
FreeRTOS_STM32F407VG_BIG_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e74  0801a928  0801a928  0002a928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f79c  0801f79c  00030398  2**0
                  CONTENTS
  4 .ARM          00000008  0801f79c  0801f79c  0002f79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7a4  0801f7a4  00030398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f7a4  0801f7a4  0002f7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f7a8  0801f7a8  0002f7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0801f7ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030398  2**0
                  CONTENTS
 10 .bss          000145f8  20000398  20000398  00030398  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20014990  20014990  00030398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e966  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f00  00000000  00000000  0006ed2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002890  00000000  00000000  00076c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002550  00000000  00000000  000794c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cda7  00000000  00000000  0007ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a700  00000000  00000000  000a87b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7ae7  00000000  00000000  000e2eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ca99e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ba70  00000000  00000000  001ca9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000398 	.word	0x20000398
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a90c 	.word	0x0801a90c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000039c 	.word	0x2000039c
 80001cc:	0801a90c 	.word	0x0801a90c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000f86:	2310      	movs	r3, #16
 8000f88:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000f8e:	e019      	b.n	8000fc4 <TP_Read+0x44>
    {
        value <<= 1;
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <TP_Read+0x54>)
 8000f9c:	f006 fa9e 	bl	80074dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <TP_Read+0x54>)
 8000fa6:	f006 fa99 	bl	80074dc <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000faa:	2101      	movs	r1, #1
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <TP_Read+0x58>)
 8000fae:	f006 fa7d 	bl	80074ac <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <TP_Read+0x3e>
        {
            value++;
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e2      	bne.n	8000f90 <TP_Read+0x10>
    };

    return value;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	4815      	ldr	r0, [pc, #84]	; (8001044 <TP_Write+0x68>)
 8000ff0:	f006 fa74 	bl	80074dc <HAL_GPIO_WritePin>

    while(i > 0)
 8000ff4:	e01e      	b.n	8001034 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da05      	bge.n	800100a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2104      	movs	r1, #4
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <TP_Write+0x6c>)
 8001004:	f006 fa6a 	bl	80074dc <HAL_GPIO_WritePin>
 8001008:	e004      	b.n	8001014 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2104      	movs	r1, #4
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <TP_Write+0x6c>)
 8001010:	f006 fa64 	bl	80074dc <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <TP_Write+0x68>)
 8001020:	f006 fa5c 	bl	80074dc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <TP_Write+0x68>)
 800102a:	f006 fa57 	bl	80074dc <HAL_GPIO_WritePin>
        i--;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1dd      	bne.n	8000ff6 <TP_Write+0x1a>
    };
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400
 8001048:	40021000 	.word	0x40021000
 800104c:	00000000 	.word	0x00000000

08001050 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	4862      	ldr	r0, [pc, #392]	; (80011e8 <TP_Read_Coordinates+0x198>)
 800105e:	f006 fa3d 	bl	80074dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2104      	movs	r1, #4
 8001066:	4861      	ldr	r0, [pc, #388]	; (80011ec <TP_Read_Coordinates+0x19c>)
 8001068:	f006 fa38 	bl	80074dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	485d      	ldr	r0, [pc, #372]	; (80011e8 <TP_Read_Coordinates+0x198>)
 8001074:	f006 fa32 	bl	80074dc <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	4851      	ldr	r0, [pc, #324]	; (80011e8 <TP_Read_Coordinates+0x198>)
 80010a2:	f006 fa1b 	bl	80074dc <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80010a6:	e023      	b.n	80010f0 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 80010a8:	2090      	movs	r0, #144	; 0x90
 80010aa:	f7ff ff97 	bl	8000fdc <TP_Write>

		rawy = TP_Read();
 80010ae:	f7ff ff67 	bl	8000f80 <TP_Read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	4413      	add	r3, r2
 80010bc:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4413      	add	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 80010c6:	20d0      	movs	r0, #208	; 0xd0
 80010c8:	f7ff ff88 	bl	8000fdc <TP_Write>
        rawx = TP_Read();
 80010cc:	f7ff ff58 	bl	8000f80 <TP_Read>
 80010d0:	4603      	mov	r3, r0
 80010d2:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	4413      	add	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
        samples--;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3301      	adds	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <TP_Read_Coordinates+0xb6>
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	483d      	ldr	r0, [pc, #244]	; (80011f0 <TP_Read_Coordinates+0x1a0>)
 80010fc:	f006 f9d6 	bl	80074ac <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0d0      	beq.n	80010a8 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4836      	ldr	r0, [pc, #216]	; (80011e8 <TP_Read_Coordinates+0x198>)
 800110e:	f006 f9e5 	bl	80074dc <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001118:	d154      	bne.n	80011c4 <TP_Read_Coordinates+0x174>
 800111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111e:	4834      	ldr	r0, [pc, #208]	; (80011f0 <TP_Read_Coordinates+0x1a0>)
 8001120:	f006 f9c4 	bl	80074ac <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d14c      	bne.n	80011c4 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	425b      	negs	r3, r3
 800114a:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 800114c:	89bb      	ldrh	r3, [r7, #12]
 800114e:	425b      	negs	r3, r3
 8001150:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8001152:	89fa      	ldrh	r2, [r7, #14]
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <TP_Read_Coordinates+0x1a4>)
 8001156:	fba3 1302 	umull	r1, r3, r3, r2
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	0852      	lsrs	r2, r2, #1
 800115e:	4413      	add	r3, r2
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9db 	bl	8000524 <__aeabi_i2d>
 800116e:	a31c      	add	r3, pc, #112	; (adr r3, 80011e0 <TP_Read_Coordinates+0x190>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa40 	bl	80005f8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1c9c      	adds	r4, r3, #2
 8001184:	f7ff fd10 	bl	8000ba8 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	b29b      	uxth	r3, r3
 800118c:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <TP_Read_Coordinates+0x1a8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	09db      	lsrs	r3, r3, #7
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b0f      	subs	r3, #15
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9c1 	bl	8000524 <__aeabi_i2d>
 80011a2:	a30f      	add	r3, pc, #60	; (adr r3, 80011e0 <TP_Read_Coordinates+0x190>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fcf8 	bl	8000ba8 <__aeabi_d2uiz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e007      	b.n	80011d4 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3302      	adds	r3, #2
 80011ce:	2200      	movs	r2, #0
 80011d0:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80011d2:	2300      	movs	r3, #0
		}
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	372c      	adds	r7, #44	; 0x2c
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	28f5c28f 	.word	0x28f5c28f
 80011e4:	3ff28f5c 	.word	0x3ff28f5c
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40020800 	.word	0x40020800
 80011f4:	e01e01e1 	.word	0xe01e01e1
 80011f8:	a0a0a0a1 	.word	0xa0a0a0a1

080011fc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <TP_Touchpad_Pressed+0x20>)
 8001206:	f006 f951 	bl	80074ac <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001214:	2300      	movs	r3, #0
	}
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800

08001220 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <TFT9341_FontsIni+0x60>)
 8001226:	2208      	movs	r2, #8
 8001228:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <TFT9341_FontsIni+0x60>)
 800122c:	2205      	movs	r2, #5
 800122e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <TFT9341_FontsIni+0x64>)
 8001232:	220c      	movs	r2, #12
 8001234:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <TFT9341_FontsIni+0x64>)
 8001238:	2207      	movs	r2, #7
 800123a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <TFT9341_FontsIni+0x68>)
 800123e:	2210      	movs	r2, #16
 8001240:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <TFT9341_FontsIni+0x68>)
 8001244:	220b      	movs	r2, #11
 8001246:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <TFT9341_FontsIni+0x6c>)
 800124a:	2214      	movs	r2, #20
 800124c:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <TFT9341_FontsIni+0x6c>)
 8001250:	220e      	movs	r2, #14
 8001252:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <TFT9341_FontsIni+0x70>)
 8001256:	2218      	movs	r2, #24
 8001258:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <TFT9341_FontsIni+0x70>)
 800125c:	2211      	movs	r2, #17
 800125e:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001268:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800126c:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <TFT9341_FontsIni+0x68>)
 8001272:	605a      	str	r2, [r3, #4]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000020 	.word	0x20000020
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000010 	.word	0x20000010
 8001290:	20000018 	.word	0x20000018
 8001294:	20007678 	.word	0x20007678

08001298 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 80012a2:	2201      	movs	r2, #1
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <TFT9341_SendData+0x2c>)
 80012a8:	f006 f918 	bl	80074dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 80012ac:	1df9      	adds	r1, r7, #7
 80012ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b2:	2201      	movs	r2, #1
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <TFT9341_SendData+0x30>)
 80012b6:	f009 ffea 	bl	800b28e <HAL_SPI_Transmit>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	2000a260 	.word	0x2000a260

080012cc <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <TFT9341_SendCommand+0x2c>)
 80012dc:	f006 f8fe 	bl	80074dc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 80012e0:	1df9      	adds	r1, r7, #7
 80012e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e6:	2201      	movs	r2, #1
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <TFT9341_SendCommand+0x30>)
 80012ea:	f009 ffd0 	bl	800b28e <HAL_SPI_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	2000a260 	.word	0x2000a260

08001300 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <TFT9341_reset+0x24>)
 800130a:	f006 f8e7 	bl	80074dc <HAL_GPIO_WritePin>
	osDelay(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f011 ffba 	bl	8013288 <osDelay>
	RESET_IDLE();
 8001314:	2201      	movs	r2, #1
 8001316:	2120      	movs	r1, #32
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TFT9341_reset+0x24>)
 800131a:	f006 f8df 	bl	80074dc <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	80fb      	strh	r3, [r7, #6]
 8001334:	4613      	mov	r3, r2
 8001336:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	48a3      	ldr	r0, [pc, #652]	; (80015cc <TFT9341_ini+0x2a4>)
 800133e:	f006 f8cd 	bl	80074dc <HAL_GPIO_WritePin>
  TFT9341_reset();
 8001342:	f7ff ffdd 	bl	8001300 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ffc0 	bl	80012cc <TFT9341_SendCommand>
  osDelay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f011 ff9a 	bl	8013288 <osDelay>

  //Power Control A
    data[0] = 0x39;
 8001354:	2339      	movs	r3, #57	; 0x39
 8001356:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 8001358:	232c      	movs	r3, #44	; 0x2c
 800135a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 800135c:	2300      	movs	r3, #0
 800135e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 8001360:	2334      	movs	r3, #52	; 0x34
 8001362:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 8001364:	2302      	movs	r3, #2
 8001366:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 8001368:	20cb      	movs	r0, #203	; 0xcb
 800136a:	f7ff ffaf 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2105      	movs	r1, #5
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f92f 	bl	80015d8 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 800137e:	23c1      	movs	r3, #193	; 0xc1
 8001380:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 8001382:	2330      	movs	r3, #48	; 0x30
 8001384:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 8001386:	20cf      	movs	r0, #207	; 0xcf
 8001388:	f7ff ffa0 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2103      	movs	r1, #3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f920 	bl	80015d8 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 8001398:	2385      	movs	r3, #133	; 0x85
 800139a:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 80013a0:	2378      	movs	r3, #120	; 0x78
 80013a2:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 80013a4:	20e8      	movs	r0, #232	; 0xe8
 80013a6:	f7ff ff91 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2103      	movs	r1, #3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f911 	bl	80015d8 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 80013be:	20ea      	movs	r0, #234	; 0xea
 80013c0:	f7ff ff84 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f904 	bl	80015d8 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 80013d4:	2303      	movs	r3, #3
 80013d6:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 80013d8:	2312      	movs	r3, #18
 80013da:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 80013dc:	2381      	movs	r3, #129	; 0x81
 80013de:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 80013e0:	20ed      	movs	r0, #237	; 0xed
 80013e2:	f7ff ff73 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f8f3 	bl	80015d8 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 80013f2:	2320      	movs	r3, #32
 80013f4:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 80013f6:	20f7      	movs	r0, #247	; 0xf7
 80013f8:	f7ff ff68 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f8e8 	bl	80015d8 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001408:	2310      	movs	r3, #16
 800140a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800140c:	20c0      	movs	r0, #192	; 0xc0
 800140e:	f7ff ff5d 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8dd 	bl	80015d8 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800141e:	2310      	movs	r3, #16
 8001420:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001422:	20c1      	movs	r0, #193	; 0xc1
 8001424:	f7ff ff52 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f8d2 	bl	80015d8 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001434:	233e      	movs	r3, #62	; 0x3e
 8001436:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001438:	2328      	movs	r3, #40	; 0x28
 800143a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800143c:	20c5      	movs	r0, #197	; 0xc5
 800143e:	f7ff ff45 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2102      	movs	r1, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f8c5 	bl	80015d8 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 800144e:	2386      	movs	r3, #134	; 0x86
 8001450:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 8001452:	20c7      	movs	r0, #199	; 0xc7
 8001454:	f7ff ff3a 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8ba 	bl	80015d8 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 8001464:	2348      	movs	r3, #72	; 0x48
 8001466:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f7ff ff2f 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f8af 	bl	80015d8 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 800147a:	2355      	movs	r3, #85	; 0x55
 800147c:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 800147e:	203a      	movs	r0, #58	; 0x3a
 8001480:	f7ff ff24 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f8a4 	bl	80015d8 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 8001494:	2318      	movs	r3, #24
 8001496:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 8001498:	20b1      	movs	r0, #177	; 0xb1
 800149a:	f7ff ff17 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	2102      	movs	r1, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f897 	bl	80015d8 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 80014aa:	2308      	movs	r3, #8
 80014ac:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 80014ae:	2382      	movs	r3, #130	; 0x82
 80014b0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 80014b2:	2327      	movs	r3, #39	; 0x27
 80014b4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 80014b6:	20b6      	movs	r0, #182	; 0xb6
 80014b8:	f7ff ff08 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2103      	movs	r1, #3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f888 	bl	80015d8 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 80014c8:	2300      	movs	r3, #0
 80014ca:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 80014cc:	20f2      	movs	r0, #242	; 0xf2
 80014ce:	f7ff fefd 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2101      	movs	r1, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f87d 	bl	80015d8 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 80014de:	2301      	movs	r3, #1
 80014e0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 80014e2:	2026      	movs	r0, #38	; 0x26
 80014e4:	f7ff fef2 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f872 	bl	80015d8 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 80014f4:	230f      	movs	r3, #15
 80014f6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 80014f8:	2331      	movs	r3, #49	; 0x31
 80014fa:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 80014fc:	232b      	movs	r3, #43	; 0x2b
 80014fe:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001500:	230c      	movs	r3, #12
 8001502:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001504:	230e      	movs	r3, #14
 8001506:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001508:	2308      	movs	r3, #8
 800150a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800150c:	234e      	movs	r3, #78	; 0x4e
 800150e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001510:	23f1      	movs	r3, #241	; 0xf1
 8001512:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001514:	2337      	movs	r3, #55	; 0x37
 8001516:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001518:	2307      	movs	r3, #7
 800151a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800151c:	2310      	movs	r3, #16
 800151e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001520:	2303      	movs	r3, #3
 8001522:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001524:	230e      	movs	r3, #14
 8001526:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001528:	2309      	movs	r3, #9
 800152a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001530:	20e0      	movs	r0, #224	; 0xe0
 8001532:	f7ff fecb 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	210f      	movs	r1, #15
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f84b 	bl	80015d8 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 800154a:	2314      	movs	r3, #20
 800154c:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 800154e:	2303      	movs	r3, #3
 8001550:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 8001552:	2311      	movs	r3, #17
 8001554:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 8001556:	2307      	movs	r3, #7
 8001558:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 800155a:	2331      	movs	r3, #49	; 0x31
 800155c:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 800155e:	23c1      	movs	r3, #193	; 0xc1
 8001560:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 8001562:	2348      	movs	r3, #72	; 0x48
 8001564:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 8001566:	2308      	movs	r3, #8
 8001568:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 800156a:	230f      	movs	r3, #15
 800156c:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 800156e:	230c      	movs	r3, #12
 8001570:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 8001572:	2331      	movs	r3, #49	; 0x31
 8001574:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 8001576:	2336      	movs	r3, #54	; 0x36
 8001578:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 800157a:	230f      	movs	r3, #15
 800157c:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 800157e:	20e1      	movs	r0, #225	; 0xe1
 8001580:	f7ff fea4 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	210f      	movs	r1, #15
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f824 	bl	80015d8 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8001590:	2011      	movs	r0, #17
 8001592:	f7ff fe9b 	bl	80012cc <TFT9341_SendCommand>

    osDelay(120);
 8001596:	2078      	movs	r0, #120	; 0x78
 8001598:	f011 fe76 	bl	8013288 <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 800159c:	2348      	movs	r3, #72	; 0x48
 800159e:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 80015a0:	2029      	movs	r0, #41	; 0x29
 80015a2:	f7ff fe93 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f813 	bl	80015d8 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <TFT9341_ini+0x2a8>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <TFT9341_ini+0x2ac>)
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 80015be:	f7ff fe2f 	bl	8001220 <TFT9341_FontsIni>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	20007676 	.word	0x20007676
 80015d4:	20007674 	.word	0x20007674

080015d8 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80015e2:	2201      	movs	r2, #1
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <TFT9341_WriteData+0x54>)
 80015e8:	f005 ff78 	bl	80074dc <HAL_GPIO_WritePin>
	while(buff_size > 0)
 80015ec:	e015      	b.n	800161a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015f4:	bf28      	it	cs
 80015f6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80015fa:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <TFT9341_WriteData+0x58>)
 8001606:	f009 fe42 	bl	800b28e <HAL_SPI_Transmit>
		buff += chunk_size;
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e6      	bne.n	80015ee <TFT9341_WriteData+0x16>
	}
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	2000a260 	.word	0x2000a260

08001634 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8001652:	202a      	movs	r0, #42	; 0x2a
 8001654:	f7ff fe3a 	bl	80012cc <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	733b      	strb	r3, [r7, #12]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	737b      	strb	r3, [r7, #13]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	73bb      	strb	r3, [r7, #14]
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2104      	movs	r1, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffaa 	bl	80015d8 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8001684:	202b      	movs	r0, #43	; 0x2b
 8001686:	f7ff fe21 	bl	80012cc <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	723b      	strb	r3, [r7, #8]
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	727b      	strb	r3, [r7, #9]
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	72bb      	strb	r3, [r7, #10]
 80016a4:	883b      	ldrh	r3, [r7, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2104      	movs	r1, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff91 	bl	80015d8 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f7ff fe08 	bl	80012cc <TFT9341_SendCommand>
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <TFT9341_FillScreen+0x90>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <TFT9341_FillScreen+0x94>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffa7 	bl	8001634 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e011      	b.n	8001710 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	b2d1      	uxtb	r1, r2
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <TFT9341_FillScreen+0x98>)
 80016fa:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	3301      	adds	r3, #1
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	b2d1      	uxtb	r1, r2
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <TFT9341_FillScreen+0x98>)
 8001708:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001716:	d3e9      	bcc.n	80016ec <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001718:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800171c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <TFT9341_FillScreen+0x9c>)
 8001724:	f005 feda 	bl	80074dc <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <TFT9341_FillScreen+0xa0>)
 800172a:	2218      	movs	r2, #24
 800172c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <TFT9341_FillScreen+0x98>)
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <TFT9341_FillScreen+0xa4>)
 8001738:	f00a f888 	bl	800b84c <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800173c:	bf00      	nop
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <TFT9341_FillScreen+0xa8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0fb      	beq.n	800173e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <TFT9341_FillScreen+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20007676 	.word	0x20007676
 8001758:	20007674 	.word	0x20007674
 800175c:	200003b4 	.word	0x200003b4
 8001760:	40021000 	.word	0x40021000
 8001764:	2000002c 	.word	0x2000002c
 8001768:	2000a260 	.word	0x2000a260
 800176c:	200027a8 	.word	0x200027a8

08001770 <TFT9341_DrawPixel>:
{
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db28      	blt.n	80017d6 <TFT9341_DrawPixel+0x66>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db25      	blt.n	80017d6 <TFT9341_DrawPixel+0x66>
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <TFT9341_DrawPixel+0x70>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4293      	cmp	r3, r2
 8001794:	da1f      	bge.n	80017d6 <TFT9341_DrawPixel+0x66>
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <TFT9341_DrawPixel+0x74>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4293      	cmp	r3, r2
 80017a0:	da19      	bge.n	80017d6 <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b298      	uxth	r0, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	b299      	uxth	r1, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f7ff ff3f 	bl	8001634 <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 80017b6:	202c      	movs	r0, #44	; 0x2c
 80017b8:	f7ff fd88 	bl	80012cc <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fd67 	bl	8001298 <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fd62 	bl	8001298 <TFT9341_SendData>
 80017d4:	e000      	b.n	80017d8 <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 80017d6:	bf00      	nop
}
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20007676 	.word	0x20007676
 80017e4:	20007674 	.word	0x20007674

080017e8 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <TFT9341_SetTextColor+0x1c>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	8013      	strh	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20007678 	.word	0x20007678

08001808 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <TFT9341_SetBackColor+0x1c>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	8053      	strh	r3, [r2, #2]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20007678 	.word	0x20007678

08001828 <TFT9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	460b      	mov	r3, r1
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  height = lcdprop.pFont->Height;
 8001846:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	88db      	ldrh	r3, [r3, #6]
 800184c:	837b      	strh	r3, [r7, #26]
  width  = lcdprop.pFont->Width;
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	833b      	strh	r3, [r7, #24]
  offset = 8 *((width + 7)/8) -  width ;
 8001856:	8b3b      	ldrh	r3, [r7, #24]
 8001858:	3307      	adds	r3, #7
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <TFT9341_DrawChar+0x38>
 800185e:	3307      	adds	r3, #7
 8001860:	10db      	asrs	r3, r3, #3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	75fb      	strb	r3, [r7, #23]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);	// c_t =0
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	3b20      	subs	r3, #32
 800187a:	4941      	ldr	r1, [pc, #260]	; (8001980 <TFT9341_DrawChar+0x158>)
 800187c:	6849      	ldr	r1, [r1, #4]
 800187e:	88c9      	ldrh	r1, [r1, #6]
 8001880:	fb01 f103 	mul.w	r1, r1, r3
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	3307      	adds	r3, #7
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <TFT9341_DrawChar+0x6a>
 8001890:	3307      	adds	r3, #7
 8001892:	10db      	asrs	r3, r3, #3
 8001894:	fb03 f301 	mul.w	r3, r3, r1
 8001898:	4413      	add	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

  for(i = 0; i < height; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e065      	b.n	800196e <TFT9341_DrawChar+0x146>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 80018a2:	8b3b      	ldrh	r3, [r7, #24]
 80018a4:	3307      	adds	r3, #7
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da00      	bge.n	80018ac <TFT9341_DrawChar+0x84>
 80018aa:	3307      	adds	r3, #7
 80018ac:	10db      	asrs	r3, r3, #3
 80018ae:	461a      	mov	r2, r3
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fb03 f302 	mul.w	r3, r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
    switch(((width + 7)/8))
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	3307      	adds	r3, #7
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <TFT9341_DrawChar+0x9e>
 80018c4:	3307      	adds	r3, #7
 80018c6:	10db      	asrs	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <TFT9341_DrawChar+0xaa>
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d004      	beq.n	80018da <TFT9341_DrawChar+0xb2>
 80018d0:	e00c      	b.n	80018ec <TFT9341_DrawChar+0xc4>
    {
      case 1:
          line =  pchar[0];
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	61fb      	str	r3, [r7, #28]
          break;
 80018d8:	e016      	b.n	8001908 <TFT9341_DrawChar+0xe0>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	3201      	adds	r2, #1
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
          break;
 80018ea:	e00d      	b.n	8001908 <TFT9341_DrawChar+0xe0>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	4313      	orrs	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	3202      	adds	r2, #2
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	61fb      	str	r3, [r7, #28]
        break;
 8001906:	bf00      	nop
    }
    for (j = 0; j < width; j++)								// print row pixel by pixel
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	e025      	b.n	800195a <TFT9341_DrawChar+0x132>
    {
      if(line & (1 << (width- j + offset- 1)))
 800190e:	8b3a      	ldrh	r2, [r7, #24]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4413      	add	r3, r2
 8001918:	3b01      	subs	r3, #1
 800191a:	2201      	movs	r2, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	461a      	mov	r2, r3
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <TFT9341_DrawChar+0x118>
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.TextColor);	// Print text pixel
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	4413      	add	r3, r2
 8001930:	4618      	mov	r0, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001936:	8812      	ldrh	r2, [r2, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff ff19 	bl	8001770 <TFT9341_DrawPixel>
 800193e:	e009      	b.n	8001954 <TFT9341_DrawChar+0x12c>
      }
      else
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.BackColor);	// Print background pixel
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	4413      	add	r3, r2
 8001946:	4618      	mov	r0, r3
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <TFT9341_DrawChar+0x158>)
 800194c:	8852      	ldrh	r2, [r2, #2]
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff ff0e 	bl	8001770 <TFT9341_DrawPixel>
    for (j = 0; j < width; j++)								// print row pixel by pixel
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	3301      	adds	r3, #1
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	8b3b      	ldrh	r3, [r7, #24]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3d5      	bcc.n	800190e <TFT9341_DrawChar+0xe6>
      }
    }
    y++;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	8b7b      	ldrh	r3, [r7, #26]
 8001970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001972:	429a      	cmp	r2, r3
 8001974:	d395      	bcc.n	80018a2 <TFT9341_DrawChar+0x7a>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20007678 	.word	0x20007678

08001984 <TFT9341_DrawChar_DMA>:
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
 800198e:	460b      	mov	r3, r1
 8001990:	80bb      	strh	r3, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	88db      	ldrh	r3, [r3, #6]
 80019a8:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 80019aa:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 80019b2:	8b3b      	ldrh	r3, [r7, #24]
 80019b4:	3307      	adds	r3, #7
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da00      	bge.n	80019bc <TFT9341_DrawChar_DMA+0x38>
 80019ba:	3307      	adds	r3, #7
 80019bc:	10db      	asrs	r3, r3, #3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	8b3b      	ldrh	r3, [r7, #24]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	3b20      	subs	r3, #32
 80019d6:	4965      	ldr	r1, [pc, #404]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019d8:	6849      	ldr	r1, [r1, #4]
 80019da:	88c9      	ldrh	r1, [r1, #6]
 80019dc:	fb01 f103 	mul.w	r1, r1, r3
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	889b      	ldrh	r3, [r3, #4]
 80019e6:	3307      	adds	r3, #7
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <TFT9341_DrawChar_DMA+0x6a>
 80019ec:	3307      	adds	r3, #7
 80019ee:	10db      	asrs	r3, r3, #3
 80019f0:	fb03 f301 	mul.w	r3, r3, r1
 80019f4:	4413      	add	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 80019f8:	88ba      	ldrh	r2, [r7, #4]
 80019fa:	8b7b      	ldrh	r3, [r7, #26]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e07c      	b.n	8001b00 <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001a06:	8b3b      	ldrh	r3, [r7, #24]
 8001a08:	3307      	adds	r3, #7
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <TFT9341_DrawChar_DMA+0x8c>
 8001a0e:	3307      	adds	r3, #7
 8001a10:	10db      	asrs	r3, r3, #3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	fb03 f302 	mul.w	r3, r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 8001a20:	8b3b      	ldrh	r3, [r7, #24]
 8001a22:	3307      	adds	r3, #7
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da00      	bge.n	8001a2a <TFT9341_DrawChar_DMA+0xa6>
 8001a28:	3307      	adds	r3, #7
 8001a2a:	10db      	asrs	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d002      	beq.n	8001a36 <TFT9341_DrawChar_DMA+0xb2>
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d004      	beq.n	8001a3e <TFT9341_DrawChar_DMA+0xba>
 8001a34:	e00c      	b.n	8001a50 <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	61fb      	str	r3, [r7, #28]
				break;
 8001a3c:	e016      	b.n	8001a6c <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	3201      	adds	r2, #1
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]
				break;
 8001a4e:	e00d      	b.n	8001a6c <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	3202      	adds	r2, #2
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]
				break;
 8001a6a:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	e03c      	b.n	8001aec <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 8001a72:	8b3b      	ldrh	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	4413      	add	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001a84:	8b3a      	ldrh	r2, [r7, #24]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	2201      	movs	r2, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d011      	beq.n	8001ac4 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b2d1      	uxtb	r1, r2
 8001aae:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ab0:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2d1      	uxtb	r1, r2
 8001abe:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ac0:	54d1      	strb	r1, [r2, r3]
 8001ac2:	e010      	b.n	8001ae6 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ac6:	885b      	ldrh	r3, [r3, #2]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ad4:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ad8:	885a      	ldrh	r2, [r3, #2]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2d1      	uxtb	r1, r2
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ae4:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	8b3b      	ldrh	r3, [r7, #24]
 8001aee:	6a3a      	ldr	r2, [r7, #32]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3be      	bcc.n	8001a72 <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	3301      	adds	r3, #1
 8001af8:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3301      	adds	r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	8b7b      	ldrh	r3, [r7, #26]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f4ff af7e 	bcc.w	8001a06 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	8b3b      	ldrh	r3, [r7, #24]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29c      	uxth	r4, r3
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	8b7b      	ldrh	r3, [r7, #26]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	88b9      	ldrh	r1, [r7, #4]
 8001b1c:	88f8      	ldrh	r0, [r7, #6]
 8001b1e:	4622      	mov	r2, r4
 8001b20:	f7ff fd88 	bl	8001634 <TFT9341_SetAddrWindow>
	DC_DATA();
 8001b24:	2201      	movs	r2, #1
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <TFT9341_DrawChar_DMA+0x1f0>)
 8001b2a:	f005 fcd7 	bl	80074dc <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <TFT9341_DrawChar_DMA+0x1f4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 8001b34:	8b3b      	ldrh	r3, [r7, #24]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	8b7b      	ldrh	r3, [r7, #26]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	fb12 f303 	smulbb	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4908      	ldr	r1, [pc, #32]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <TFT9341_DrawChar_DMA+0x1f8>)
 8001b50:	f009 fe7c 	bl	800b84c <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 8001b54:	bf00      	nop
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <TFT9341_DrawChar_DMA+0x1fc>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0fb      	beq.n	8001b56 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <TFT9341_DrawChar_DMA+0x1fc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	372c      	adds	r7, #44	; 0x2c
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	20007678 	.word	0x20007678
 8001b70:	200003b4 	.word	0x200003b4
 8001b74:	40021000 	.word	0x40021000
 8001b78:	2000002c 	.word	0x2000002c
 8001b7c:	2000a260 	.word	0x2000a260
 8001b80:	200027a8 	.word	0x200027a8

08001b84 <TFT9341_String>:
// ---------------------------------------------------------------------------------
void TFT9341_String(uint16_t x,uint16_t y, char *str)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	603a      	str	r2, [r7, #0]
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	460b      	mov	r3, r1
 8001b92:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001b94:	e00f      	b.n	8001bb6 <TFT9341_String+0x32>
  {
    TFT9341_DrawChar(x,y,str[0]);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	88b9      	ldrh	r1, [r7, #4]
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe42 	bl	8001828 <TFT9341_DrawChar>
    x+=lcdprop.pFont->Width;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <TFT9341_String+0x44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	889a      	ldrh	r2, [r3, #4]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
  while(*str)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1eb      	bne.n	8001b96 <TFT9341_String+0x12>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20007678 	.word	0x20007678

08001bcc <TFT9341_String_DMA>:
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	603a      	str	r2, [r7, #0]
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001bdc:	e00f      	b.n	8001bfe <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	88b9      	ldrh	r1, [r7, #4]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fecc 	bl	8001984 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <TFT9341_String_DMA+0x44>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	889a      	ldrh	r2, [r3, #4]
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]
  while(*str)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1eb      	bne.n	8001bde <TFT9341_String_DMA+0x12>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20007678 	.word	0x20007678

08001c14 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001c1e:	2036      	movs	r0, #54	; 0x36
 8001c20:	f7ff fb54 	bl	80012cc <TFT9341_SendCommand>
  switch(r)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d836      	bhi.n	8001c98 <TFT9341_SetRotation+0x84>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <TFT9341_SetRotation+0x1c>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001c41 	.word	0x08001c41
 8001c34:	08001c57 	.word	0x08001c57
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001c83 	.word	0x08001c83
  {
    case 0:
      TFT9341_SendData(0x48);
 8001c40:	2048      	movs	r0, #72	; 0x48
 8001c42:	f7ff fb29 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c52:	801a      	strh	r2, [r3, #0]
      break;
 8001c54:	e020      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f7ff fb1e 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c62:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c66:	22f0      	movs	r2, #240	; 0xf0
 8001c68:	801a      	strh	r2, [r3, #0]
      break;
 8001c6a:	e015      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 8001c6c:	2088      	movs	r0, #136	; 0x88
 8001c6e:	f7ff fb13 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c7e:	801a      	strh	r2, [r3, #0]
      break;
 8001c80:	e00a      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 8001c82:	20e8      	movs	r0, #232	; 0xe8
 8001c84:	f7ff fb08 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c8e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	801a      	strh	r2, [r3, #0]
      break;
 8001c96:	bf00      	nop
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20007676 	.word	0x20007676
 8001ca4:	20007674 	.word	0x20007674

08001ca8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <Mount_SD+0x38>)
 8001cca:	f010 f967 	bl	8011f9c <f_mount>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <Mount_SD+0x3c>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <Mount_SD+0x3c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <Mount_SD+0x40>)
 8001ce0:	f7ff ffe2 	bl	8001ca8 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 8001ce4:	e002      	b.n	8001cec <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <Mount_SD+0x44>)
 8001ce8:	f7ff ffde 	bl	8001ca8 <Send_Uart>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000779c 	.word	0x2000779c
 8001cf8:	200087e8 	.word	0x200087e8
 8001cfc:	0801a928 	.word	0x0801a928
 8001d00:	0801a94c 	.word	0x0801a94c

08001d04 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2000      	movs	r0, #0
 8001d12:	f010 f943 	bl	8011f9c <f_mount>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <Unmount_SD+0x38>)
 8001d1c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <Unmount_SD+0x38>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <Unmount_SD+0x2a>
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <Unmount_SD+0x3c>)
 8001d28:	f7ff ffbe 	bl	8001ca8 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001d2c:	e002      	b.n	8001d34 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <Unmount_SD+0x40>)
 8001d30:	f7ff ffba 	bl	8001ca8 <Send_Uart>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	200087e8 	.word	0x200087e8
 8001d40:	0801a970 	.word	0x0801a970
 8001d44:	0801a998 	.word	0x0801a998

08001d48 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001d50:	4940      	ldr	r1, [pc, #256]	; (8001e54 <Create_File+0x10c>)
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f010 fe64 	bl	8012a20 <f_stat>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <Create_File+0x110>)
 8001d5e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <Create_File+0x110>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	f014 ff05 	bl	8016b78 <pvPortMalloc>
 8001d6e:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	493a      	ldr	r1, [pc, #232]	; (8001e5c <Create_File+0x114>)
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f016 fd0f 	bl	8018798 <siprintf>
		Send_Uart(buf);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff ff94 	bl	8001ca8 <Send_Uart>
		vPortFree(buf);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f014 ffc5 	bl	8016d10 <vPortFree>
	    return fresult;
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <Create_File+0x110>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	e05f      	b.n	8001e4c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001d8c:	220b      	movs	r2, #11
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4833      	ldr	r0, [pc, #204]	; (8001e60 <Create_File+0x118>)
 8001d92:	f010 f967 	bl	8012064 <f_open>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <Create_File+0x110>)
 8001d9c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <Create_File+0x110>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f014 fee6 	bl	8016b78 <pvPortMalloc>
 8001dac:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <Create_File+0x110>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	492b      	ldr	r1, [pc, #172]	; (8001e64 <Create_File+0x11c>)
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	f016 fced 	bl	8018798 <siprintf>
			Send_Uart(buf);
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f7ff ff72 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001dc4:	6938      	ldr	r0, [r7, #16]
 8001dc6:	f014 ffa3 	bl	8016d10 <vPortFree>
		    return fresult;
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <Create_File+0x110>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	e03d      	b.n	8001e4c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f014 fed1 	bl	8016b78 <pvPortMalloc>
 8001dd6:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4923      	ldr	r1, [pc, #140]	; (8001e68 <Create_File+0x120>)
 8001ddc:	69f8      	ldr	r0, [r7, #28]
 8001dde:	f016 fcdb 	bl	8018798 <siprintf>
			Send_Uart(buf);
 8001de2:	69f8      	ldr	r0, [r7, #28]
 8001de4:	f7ff ff60 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f014 ff91 	bl	8016d10 <vPortFree>
		}

		fresult = f_close(&fil);
 8001dee:	481c      	ldr	r0, [pc, #112]	; (8001e60 <Create_File+0x118>)
 8001df0:	f010 fde7 	bl	80129c2 <f_close>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <Create_File+0x110>)
 8001dfa:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <Create_File+0x110>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f014 feb7 	bl	8016b78 <pvPortMalloc>
 8001e0a:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <Create_File+0x110>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4915      	ldr	r1, [pc, #84]	; (8001e6c <Create_File+0x124>)
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f016 fcbe 	bl	8018798 <siprintf>
			Send_Uart(buf);
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f7ff ff43 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f014 ff74 	bl	8016d10 <vPortFree>
 8001e28:	e00e      	b.n	8001e48 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001e2a:	2064      	movs	r0, #100	; 0x64
 8001e2c:	f014 fea4 	bl	8016b78 <pvPortMalloc>
 8001e30:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <Create_File+0x128>)
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	f016 fcae 	bl	8018798 <siprintf>
			Send_Uart(buf);
 8001e3c:	69b8      	ldr	r0, [r7, #24]
 8001e3e:	f7ff ff33 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001e42:	69b8      	ldr	r0, [r7, #24]
 8001e44:	f014 ff64 	bl	8016d10 <vPortFree>
		}
	}
    return fresult;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <Create_File+0x110>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20007684 	.word	0x20007684
 8001e58:	200087e8 	.word	0x200087e8
 8001e5c:	0801ab68 	.word	0x0801ab68
 8001e60:	200087f0 	.word	0x200087f0
 8001e64:	0801aba0 	.word	0x0801aba0
 8001e68:	0801abc8 	.word	0x0801abc8
 8001e6c:	0801ac08 	.word	0x0801ac08
 8001e70:	0801ab48 	.word	0x0801ab48

08001e74 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001e7e:	4953      	ldr	r1, [pc, #332]	; (8001fcc <Update_File+0x158>)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f010 fdcd 	bl	8012a20 <f_stat>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <Update_File+0x15c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <Update_File+0x15c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d011      	beq.n	8001eba <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001e96:	2064      	movs	r0, #100	; 0x64
 8001e98:	f014 fe6e 	bl	8016b78 <pvPortMalloc>
 8001e9c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <Update_File+0x160>)
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f016 fc78 	bl	8018798 <siprintf>
		Send_Uart (buf);
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f7ff fefd 	bl	8001ca8 <Send_Uart>
		vPortFree(buf);
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f014 ff2e 	bl	8016d10 <vPortFree>
	    return fresult;
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <Update_File+0x15c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	e083      	b.n	8001fc2 <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001eba:	2232      	movs	r2, #50	; 0x32
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4846      	ldr	r0, [pc, #280]	; (8001fd8 <Update_File+0x164>)
 8001ec0:	f010 f8d0 	bl	8012064 <f_open>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <Update_File+0x15c>)
 8001eca:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <Update_File+0x15c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	f014 fe4f 	bl	8016b78 <pvPortMalloc>
 8001eda:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <Update_File+0x15c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	493d      	ldr	r1, [pc, #244]	; (8001fdc <Update_File+0x168>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f016 fc56 	bl	8018798 <siprintf>
	    	Send_Uart(buf);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fedb 	bl	8001ca8 <Send_Uart>
	        vPortFree(buf);
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f014 ff0c 	bl	8016d10 <vPortFree>
	        return fresult;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <Update_File+0x15c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	e061      	b.n	8001fc2 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7fe f966 	bl	80001d0 <strlen>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <Update_File+0x16c>)
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <Update_File+0x164>)
 8001f0c:	f010 fb0d 	bl	801252a <f_write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <Update_File+0x15c>)
 8001f16:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <Update_File+0x15c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f014 fe29 	bl	8016b78 <pvPortMalloc>
 8001f26:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <Update_File+0x15c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <Update_File+0x170>)
 8001f32:	69b8      	ldr	r0, [r7, #24]
 8001f34:	f016 fc30 	bl	8018798 <siprintf>
	    	Send_Uart(buf);
 8001f38:	69b8      	ldr	r0, [r7, #24]
 8001f3a:	f7ff feb5 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f3e:	69b8      	ldr	r0, [r7, #24]
 8001f40:	f014 fee6 	bl	8016d10 <vPortFree>
 8001f44:	e00e      	b.n	8001f64 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f46:	2064      	movs	r0, #100	; 0x64
 8001f48:	f014 fe16 	bl	8016b78 <pvPortMalloc>
 8001f4c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4925      	ldr	r1, [pc, #148]	; (8001fe8 <Update_File+0x174>)
 8001f52:	69f8      	ldr	r0, [r7, #28]
 8001f54:	f016 fc20 	bl	8018798 <siprintf>
	    	Send_Uart(buf);
 8001f58:	69f8      	ldr	r0, [r7, #28]
 8001f5a:	f7ff fea5 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f5e:	69f8      	ldr	r0, [r7, #28]
 8001f60:	f014 fed6 	bl	8016d10 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <Update_File+0x164>)
 8001f66:	f010 fd2c 	bl	80129c2 <f_close>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <Update_File+0x15c>)
 8001f70:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <Update_File+0x15c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f014 fdfc 	bl	8016b78 <pvPortMalloc>
 8001f80:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <Update_File+0x15c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <Update_File+0x178>)
 8001f8c:	6938      	ldr	r0, [r7, #16]
 8001f8e:	f016 fc03 	bl	8018798 <siprintf>
	    	Send_Uart(buf);
 8001f92:	6938      	ldr	r0, [r7, #16]
 8001f94:	f7ff fe88 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f98:	6938      	ldr	r0, [r7, #16]
 8001f9a:	f014 feb9 	bl	8016d10 <vPortFree>
 8001f9e:	e00e      	b.n	8001fbe <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	f014 fde9 	bl	8016b78 <pvPortMalloc>
 8001fa6:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <Update_File+0x17c>)
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f016 fbf3 	bl	8018798 <siprintf>
	    	Send_Uart(buf);
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff fe78 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001fb8:	6978      	ldr	r0, [r7, #20]
 8001fba:	f014 fea9 	bl	8016d10 <vPortFree>
	     }
	}
    return fresult;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <Update_File+0x15c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20007684 	.word	0x20007684
 8001fd0:	200087e8 	.word	0x200087e8
 8001fd4:	0801a9f0 	.word	0x0801a9f0
 8001fd8:	200087f0 	.word	0x200087f0
 8001fdc:	0801aa10 	.word	0x0801aa10
 8001fe0:	200087e0 	.word	0x200087e0
 8001fe4:	0801ac2c 	.word	0x0801ac2c
 8001fe8:	0801ac54 	.word	0x0801ac54
 8001fec:	0801ab20 	.word	0x0801ab20
 8001ff0:	0801ab48 	.word	0x0801ab48

08001ff4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f010 fd5c 	bl	8012aba <f_mkdir>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <Create_Dir+0x70>)
 8002008:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <Create_Dir+0x70>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f014 fdb0 	bl	8016b78 <pvPortMalloc>
 8002018:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4912      	ldr	r1, [pc, #72]	; (8002068 <Create_Dir+0x74>)
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f016 fbba 	bl	8018798 <siprintf>
    	Send_Uart (buf);
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f7ff fe3f 	bl	8001ca8 <Send_Uart>
    	vPortFree(buf);
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f014 fe70 	bl	8016d10 <vPortFree>
 8002030:	e011      	b.n	8002056 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8002032:	2064      	movs	r0, #100	; 0x64
 8002034:	f014 fda0 	bl	8016b78 <pvPortMalloc>
 8002038:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <Create_Dir+0x70>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <Create_Dir+0x78>)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f016 fba7 	bl	8018798 <siprintf>
    	Send_Uart(buf);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fe2c 	bl	8001ca8 <Send_Uart>
    	vPortFree(buf);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f014 fe5d 	bl	8016d10 <vPortFree>
    }
    return fresult;
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <Create_Dir+0x70>)
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	200087e8 	.word	0x200087e8
 8002068:	0801acb4 	.word	0x0801acb4
 800206c:	0801acd8 	.word	0x0801acd8

08002070 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <SELECT+0x14>)
 800207a:	f005 fa2f 	bl	80074dc <HAL_GPIO_WritePin>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020800 	.word	0x40020800

08002088 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DESELECT+0x14>)
 8002092:	f005 fa23 	bl	80074dc <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40020800 	.word	0x40020800

080020a0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80020aa:	bf00      	nop
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <SPI_TxByte+0x30>)
 80020ae:	f009 fdd7 	bl	800bc60 <HAL_SPI_GetState>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d1f9      	bne.n	80020ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80020b8:	1df9      	adds	r1, r7, #7
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	2201      	movs	r2, #1
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <SPI_TxByte+0x30>)
 80020c2:	f009 f8e4 	bl	800b28e <HAL_SPI_Transmit>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	2000fabc 	.word	0x2000fabc

080020d4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80020e2:	bf00      	nop
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <SPI_RxByte+0x38>)
 80020e6:	f009 fdbb 	bl	800bc60 <HAL_SPI_GetState>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d1f9      	bne.n	80020e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80020f0:	1dba      	adds	r2, r7, #6
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <SPI_RxByte+0x38>)
 80020fe:	f009 fa02 	bl	800b506 <HAL_SPI_TransmitReceive>
  
  return data;
 8002102:	79bb      	ldrb	r3, [r7, #6]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000fabc 	.word	0x2000fabc

08002110 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002118:	f7ff ffdc 	bl	80020d4 <SPI_RxByte>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	701a      	strb	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <SD_ReadyWait+0x34>)
 8002134:	2232      	movs	r2, #50	; 0x32
 8002136:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002138:	f7ff ffcc 	bl	80020d4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800213c:	f7ff ffca 	bl	80020d4 <SPI_RxByte>
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d004      	beq.n	8002154 <SD_ReadyWait+0x28>
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SD_ReadyWait+0x34>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f3      	bne.n	800213c <SD_ReadyWait+0x10>
  
  return res;
 8002154:	79fb      	ldrb	r3, [r7, #7]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	2000fab4 	.word	0x2000fab4

08002164 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800216a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800216e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8002170:	f7ff ff8a 	bl	8002088 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e005      	b.n	8002186 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800217a:	20ff      	movs	r0, #255	; 0xff
 800217c:	f7ff ff90 	bl	80020a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b09      	cmp	r3, #9
 800218a:	ddf6      	ble.n	800217a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800218c:	f7ff ff70 	bl	8002070 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80021a4:	2395      	movs	r3, #149	; 0x95
 80021a6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80021ae:	1d3a      	adds	r2, r7, #4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff72 	bl	80020a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	ddf2      	ble.n	80021ae <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80021c8:	e002      	b.n	80021d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80021d0:	f7ff ff80 	bl	80020d4 <SPI_RxByte>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d002      	beq.n	80021e0 <SD_PowerOn+0x7c>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f4      	bne.n	80021ca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80021e0:	f7ff ff52 	bl	8002088 <DESELECT>
  SPI_TxByte(0XFF);
 80021e4:	20ff      	movs	r0, #255	; 0xff
 80021e6:	f7ff ff5b 	bl	80020a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <SD_PowerOn+0x94>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200023b5 	.word	0x200023b5

080021fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <SD_PowerOff+0x14>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	200023b5 	.word	0x200023b5

08002214 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <SD_CheckPower+0x14>)
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	200023b5 	.word	0x200023b5

0800222c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <SD_RxDataBlock+0x68>)
 8002238:	220a      	movs	r2, #10
 800223a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800223c:	f7ff ff4a 	bl	80020d4 <SPI_RxByte>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d104      	bne.n	8002254 <SD_RxDataBlock+0x28>
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <SD_RxDataBlock+0x68>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f3      	bne.n	800223c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2bfe      	cmp	r3, #254	; 0xfe
 8002258:	d001      	beq.n	800225e <SD_RxDataBlock+0x32>
    return FALSE;
 800225a:	2300      	movs	r3, #0
 800225c:	e016      	b.n	800228c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff53 	bl	8002110 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff4d 	bl	8002110 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	3b02      	subs	r3, #2
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ed      	bne.n	800225e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8002282:	f7ff ff27 	bl	80020d4 <SPI_RxByte>
  SPI_RxByte();
 8002286:	f7ff ff25 	bl	80020d4 <SPI_RxByte>
  
  return TRUE;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	2001064c 	.word	0x2001064c

08002298 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80022a8:	f7ff ff40 	bl	800212c <SD_ReadyWait>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d001      	beq.n	80022b6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e040      	b.n	8002338 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fef1 	bl	80020a0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	2bfd      	cmp	r3, #253	; 0xfd
 80022c2:	d031      	beq.n	8002328 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fee5 	bl	80020a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fede 	bl	80020a0 <SPI_TxByte>
    } while (--wc);
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	73bb      	strb	r3, [r7, #14]
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1eb      	bne.n	80022c8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80022f0:	f7ff fef0 	bl	80020d4 <SPI_RxByte>
    SPI_RxByte();
 80022f4:	f7ff feee 	bl	80020d4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80022f8:	e00b      	b.n	8002312 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80022fa:	f7ff feeb 	bl	80020d4 <SPI_RxByte>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2b05      	cmp	r3, #5
 800230a:	d006      	beq.n	800231a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	3301      	adds	r3, #1
 8002310:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d9f0      	bls.n	80022fa <SD_TxDataBlock+0x62>
 8002318:	e000      	b.n	800231c <SD_TxDataBlock+0x84>
        break;
 800231a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800231c:	bf00      	nop
 800231e:	f7ff fed9 	bl	80020d4 <SPI_RxByte>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0fa      	beq.n	800231e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2b05      	cmp	r3, #5
 8002330:	d101      	bne.n	8002336 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800234c:	f7ff feee 	bl	800212c <SD_ReadyWait>
 8002350:	4603      	mov	r3, r0
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d001      	beq.n	800235a <SD_SendCmd+0x1a>
    return 0xFF;
 8002356:	23ff      	movs	r3, #255	; 0xff
 8002358:	e040      	b.n	80023dc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe9f 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0e1b      	lsrs	r3, r3, #24
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe99 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe93 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe8d 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe88 	bl	80020a0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d101      	bne.n	800239e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800239a:	2395      	movs	r3, #149	; 0x95
 800239c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b48      	cmp	r3, #72	; 0x48
 80023a2:	d101      	bne.n	80023a8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80023a4:	2387      	movs	r3, #135	; 0x87
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe78 	bl	80020a0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	2b4c      	cmp	r3, #76	; 0x4c
 80023b4:	d101      	bne.n	80023ba <SD_SendCmd+0x7a>
    SPI_RxByte();
 80023b6:	f7ff fe8d 	bl	80020d4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80023ba:	230a      	movs	r3, #10
 80023bc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80023be:	f7ff fe89 	bl	80020d4 <SPI_RxByte>
 80023c2:	4603      	mov	r3, r0
 80023c4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80023c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da05      	bge.n	80023da <SD_SendCmd+0x9a>
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	73bb      	strb	r3, [r7, #14]
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f1      	bne.n	80023be <SD_SendCmd+0x7e>
  
  return res;
 80023da:	7b7b      	ldrb	r3, [r7, #13]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d5      	b.n	80025a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <SD_disk_initialize+0x1c8>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <SD_disk_initialize+0x2a>
    return Stat;        
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <SD_disk_initialize+0x1c8>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e0ca      	b.n	80025a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800240e:	f7ff fea9 	bl	8002164 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002412:	f7ff fe2d 	bl	8002070 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800241a:	2100      	movs	r1, #0
 800241c:	2040      	movs	r0, #64	; 0x40
 800241e:	f7ff ff8f 	bl	8002340 <SD_SendCmd>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80a5 	bne.w	8002574 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800242a:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <SD_disk_initialize+0x1cc>)
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002430:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002434:	2048      	movs	r0, #72	; 0x48
 8002436:	f7ff ff83 	bl	8002340 <SD_SendCmd>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d158      	bne.n	80024f2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e00c      	b.n	8002460 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002446:	7bfc      	ldrb	r4, [r7, #15]
 8002448:	f7ff fe44 	bl	80020d4 <SPI_RxByte>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4423      	add	r3, r4
 8002456:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d9ef      	bls.n	8002446 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002466:	7abb      	ldrb	r3, [r7, #10]
 8002468:	2b01      	cmp	r3, #1
 800246a:	f040 8083 	bne.w	8002574 <SD_disk_initialize+0x190>
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	2baa      	cmp	r3, #170	; 0xaa
 8002472:	d17f      	bne.n	8002574 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002474:	2100      	movs	r1, #0
 8002476:	2077      	movs	r0, #119	; 0x77
 8002478:	f7ff ff62 	bl	8002340 <SD_SendCmd>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d807      	bhi.n	8002492 <SD_disk_initialize+0xae>
 8002482:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002486:	2069      	movs	r0, #105	; 0x69
 8002488:	f7ff ff5a 	bl	8002340 <SD_SendCmd>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <SD_disk_initialize+0x1cc>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1eb      	bne.n	8002474 <SD_disk_initialize+0x90>
 800249c:	e000      	b.n	80024a0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800249e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <SD_disk_initialize+0x1cc>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d064      	beq.n	8002574 <SD_disk_initialize+0x190>
 80024aa:	2100      	movs	r1, #0
 80024ac:	207a      	movs	r0, #122	; 0x7a
 80024ae:	f7ff ff47 	bl	8002340 <SD_SendCmd>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d15d      	bne.n	8002574 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e00c      	b.n	80024d8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80024be:	7bfc      	ldrb	r4, [r7, #15]
 80024c0:	f7ff fe08 	bl	80020d4 <SPI_RxByte>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4423      	add	r3, r4
 80024ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d9ef      	bls.n	80024be <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80024de:	7a3b      	ldrb	r3, [r7, #8]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SD_disk_initialize+0x108>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e000      	b.n	80024ee <SD_disk_initialize+0x10a>
 80024ec:	2302      	movs	r3, #2
 80024ee:	73bb      	strb	r3, [r7, #14]
 80024f0:	e040      	b.n	8002574 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80024f2:	2100      	movs	r1, #0
 80024f4:	2077      	movs	r0, #119	; 0x77
 80024f6:	f7ff ff23 	bl	8002340 <SD_SendCmd>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d808      	bhi.n	8002512 <SD_disk_initialize+0x12e>
 8002500:	2100      	movs	r1, #0
 8002502:	2069      	movs	r0, #105	; 0x69
 8002504:	f7ff ff1c 	bl	8002340 <SD_SendCmd>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d801      	bhi.n	8002512 <SD_disk_initialize+0x12e>
 800250e:	2302      	movs	r3, #2
 8002510:	e000      	b.n	8002514 <SD_disk_initialize+0x130>
 8002512:	2301      	movs	r3, #1
 8002514:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d10e      	bne.n	800253a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800251c:	2100      	movs	r1, #0
 800251e:	2077      	movs	r0, #119	; 0x77
 8002520:	f7ff ff0e 	bl	8002340 <SD_SendCmd>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d80e      	bhi.n	8002548 <SD_disk_initialize+0x164>
 800252a:	2100      	movs	r1, #0
 800252c:	2069      	movs	r0, #105	; 0x69
 800252e:	f7ff ff07 	bl	8002340 <SD_SendCmd>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002538:	e00d      	b.n	8002556 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800253a:	2100      	movs	r1, #0
 800253c:	2041      	movs	r0, #65	; 0x41
 800253e:	f7ff feff 	bl	8002340 <SD_SendCmd>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <SD_disk_initialize+0x1cc>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e1      	bne.n	8002516 <SD_disk_initialize+0x132>
 8002552:	e000      	b.n	8002556 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002554:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <SD_disk_initialize+0x1cc>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <SD_disk_initialize+0x18c>
 8002560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002564:	2050      	movs	r0, #80	; 0x50
 8002566:	f7ff feeb 	bl	8002340 <SD_SendCmd>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <SD_disk_initialize+0x1d0>)
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800257a:	f7ff fd85 	bl	8002088 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800257e:	f7ff fda9 	bl	80020d4 <SPI_RxByte>
  
  if (type) 
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <SD_disk_initialize+0x1c8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SD_disk_initialize+0x1c8>)
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e001      	b.n	800259e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800259a:	f7ff fe2f 	bl	80021fc <SD_PowerOff>
  }
  
  return Stat;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <SD_disk_initialize+0x1c8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	20000028 	.word	0x20000028
 80025b0:	2001064c 	.word	0x2001064c
 80025b4:	200023b4 	.word	0x200023b4

080025b8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SD_disk_status+0x14>
    return STA_NOINIT; 
 80025c8:	2301      	movs	r3, #1
 80025ca:	e002      	b.n	80025d2 <SD_disk_status+0x1a>
  
  return Stat;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SD_disk_status+0x28>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000028 	.word	0x20000028

080025e4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <SD_disk_read+0x1c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <SD_disk_read+0x20>
    return RES_PARERR;
 8002600:	2304      	movs	r3, #4
 8002602:	e051      	b.n	80026a8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <SD_disk_read+0xcc>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002612:	2303      	movs	r3, #3
 8002614:	e048      	b.n	80026a8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <SD_disk_read+0xd0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002628:	f7ff fd22 	bl	8002070 <SELECT>
  
  if (count == 1) 
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d111      	bne.n	8002656 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	2051      	movs	r0, #81	; 0x51
 8002636:	f7ff fe83 	bl	8002340 <SD_SendCmd>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d129      	bne.n	8002694 <SD_disk_read+0xb0>
 8002640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002644:	68b8      	ldr	r0, [r7, #8]
 8002646:	f7ff fdf1 	bl	800222c <SD_RxDataBlock>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d021      	beq.n	8002694 <SD_disk_read+0xb0>
      count = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	e01e      	b.n	8002694 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	2052      	movs	r0, #82	; 0x52
 800265a:	f7ff fe71 	bl	8002340 <SD_SendCmd>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d117      	bne.n	8002694 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f7ff fddf 	bl	800222c <SD_RxDataBlock>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800267a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ed      	bne.n	8002664 <SD_disk_read+0x80>
 8002688:	e000      	b.n	800268c <SD_disk_read+0xa8>
          break;
 800268a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 800268c:	2100      	movs	r1, #0
 800268e:	204c      	movs	r0, #76	; 0x4c
 8002690:	f7ff fe56 	bl	8002340 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002694:	f7ff fcf8 	bl	8002088 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002698:	f7ff fd1c 	bl	80020d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000028 	.word	0x20000028
 80026b4:	200023b4 	.word	0x200023b4

080026b8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <SD_disk_write+0x1c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <SD_disk_write+0x20>
    return RES_PARERR;
 80026d4:	2304      	movs	r3, #4
 80026d6:	e06b      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <SD_disk_write+0x100>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <SD_disk_write+0x32>
    return RES_NOTRDY;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e062      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <SD_disk_write+0x100>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SD_disk_write+0x44>
    return RES_WRPRT;
 80026f8:	2302      	movs	r3, #2
 80026fa:	e059      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <SD_disk_write+0x104>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800270e:	f7ff fcaf 	bl	8002070 <SELECT>
  
  if (count == 1) 
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d110      	bne.n	800273a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	2058      	movs	r0, #88	; 0x58
 800271c:	f7ff fe10 	bl	8002340 <SD_SendCmd>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13a      	bne.n	800279c <SD_disk_write+0xe4>
 8002726:	21fe      	movs	r1, #254	; 0xfe
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f7ff fdb5 	bl	8002298 <SD_TxDataBlock>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d033      	beq.n	800279c <SD_disk_write+0xe4>
      count = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	e030      	b.n	800279c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <SD_disk_write+0x104>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002746:	2100      	movs	r1, #0
 8002748:	2077      	movs	r0, #119	; 0x77
 800274a:	f7ff fdf9 	bl	8002340 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	2057      	movs	r0, #87	; 0x57
 8002752:	f7ff fdf5 	bl	8002340 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	2059      	movs	r0, #89	; 0x59
 800275a:	f7ff fdf1 	bl	8002340 <SD_SendCmd>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11b      	bne.n	800279c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002764:	21fc      	movs	r1, #252	; 0xfc
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	f7ff fd96 	bl	8002298 <SD_TxDataBlock>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002778:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ee      	bne.n	8002764 <SD_disk_write+0xac>
 8002786:	e000      	b.n	800278a <SD_disk_write+0xd2>
          break;
 8002788:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800278a:	21fd      	movs	r1, #253	; 0xfd
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff fd83 	bl	8002298 <SD_TxDataBlock>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SD_disk_write+0xe4>
      {        
        count = 1;
 8002798:	2301      	movs	r3, #1
 800279a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800279c:	f7ff fc74 	bl	8002088 <DESELECT>
  SPI_RxByte();
 80027a0:	f7ff fc98 	bl	80020d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000028 	.word	0x20000028
 80027bc:	200023b4 	.word	0x200023b4

080027c0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b08b      	sub	sp, #44	; 0x2c
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	460b      	mov	r3, r1
 80027ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80027da:	2304      	movs	r3, #4
 80027dc:	e11b      	b.n	8002a16 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d129      	bne.n	800283e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d017      	beq.n	8002822 <SD_disk_ioctl+0x62>
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	dc1f      	bgt.n	8002836 <SD_disk_ioctl+0x76>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <SD_disk_ioctl+0x40>
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d00b      	beq.n	8002816 <SD_disk_ioctl+0x56>
 80027fe:	e01a      	b.n	8002836 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002800:	f7ff fd08 	bl	8002214 <SD_CheckPower>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800280a:	f7ff fcf7 	bl	80021fc <SD_PowerOff>
      res = RES_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002814:	e0fd      	b.n	8002a12 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002816:	f7ff fca5 	bl	8002164 <SD_PowerOn>
      res = RES_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002820:	e0f7      	b.n	8002a12 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	1c5c      	adds	r4, r3, #1
 8002826:	f7ff fcf5 	bl	8002214 <SD_CheckPower>
 800282a:	4603      	mov	r3, r0
 800282c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002834:	e0ed      	b.n	8002a12 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002836:	2304      	movs	r3, #4
 8002838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800283c:	e0e9      	b.n	8002a12 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800283e:	4b78      	ldr	r3, [pc, #480]	; (8002a20 <SD_disk_ioctl+0x260>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800284c:	2303      	movs	r3, #3
 800284e:	e0e2      	b.n	8002a16 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002850:	f7ff fc0e 	bl	8002070 <SELECT>
    
    switch (ctrl) 
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	2b0d      	cmp	r3, #13
 8002858:	f200 80cc 	bhi.w	80029f4 <SD_disk_ioctl+0x234>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <SD_disk_ioctl+0xa4>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	0800295f 	.word	0x0800295f
 8002868:	0800289d 	.word	0x0800289d
 800286c:	0800294f 	.word	0x0800294f
 8002870:	080029f5 	.word	0x080029f5
 8002874:	080029f5 	.word	0x080029f5
 8002878:	080029f5 	.word	0x080029f5
 800287c:	080029f5 	.word	0x080029f5
 8002880:	080029f5 	.word	0x080029f5
 8002884:	080029f5 	.word	0x080029f5
 8002888:	080029f5 	.word	0x080029f5
 800288c:	080029f5 	.word	0x080029f5
 8002890:	08002971 	.word	0x08002971
 8002894:	08002995 	.word	0x08002995
 8002898:	080029b9 	.word	0x080029b9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800289c:	2100      	movs	r1, #0
 800289e:	2049      	movs	r0, #73	; 0x49
 80028a0:	f7ff fd4e 	bl	8002340 <SD_SendCmd>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80a8 	bne.w	80029fc <SD_disk_ioctl+0x23c>
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2110      	movs	r1, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fcba 	bl	800222c <SD_RxDataBlock>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 809e 	beq.w	80029fc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80028c0:	7b3b      	ldrb	r3, [r7, #12]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10e      	bne.n	80028e8 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	7d3b      	ldrb	r3, [r7, #20]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80028de:	8bfb      	ldrh	r3, [r7, #30]
 80028e0:	029a      	lsls	r2, r3, #10
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e02e      	b.n	8002946 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	09db      	lsrs	r3, r3, #7
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	7d7b      	ldrb	r3, [r7, #21]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 0306 	and.w	r3, r3, #6
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	3302      	adds	r3, #2
 800290c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002910:	7d3b      	ldrb	r3, [r7, #20]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	b2db      	uxtb	r3, r3
 8002916:	b29a      	uxth	r2, r3
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	b29b      	uxth	r3, r3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	b29b      	uxth	r3, r3
 8002920:	4413      	add	r3, r2
 8002922:	b29a      	uxth	r2, r3
 8002924:	7cbb      	ldrb	r3, [r7, #18]
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	b29b      	uxth	r3, r3
 800292a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800292e:	b29b      	uxth	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002938:	8bfa      	ldrh	r2, [r7, #30]
 800293a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800293e:	3b09      	subs	r3, #9
 8002940:	409a      	lsls	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800294c:	e056      	b.n	80029fc <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800295c:	e055      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800295e:	f7ff fbe5 	bl	800212c <SD_ReadyWait>
 8002962:	4603      	mov	r3, r0
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d14b      	bne.n	8002a00 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800296e:	e047      	b.n	8002a00 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002970:	2100      	movs	r1, #0
 8002972:	2049      	movs	r0, #73	; 0x49
 8002974:	f7ff fce4 	bl	8002340 <SD_SendCmd>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d142      	bne.n	8002a04 <SD_disk_ioctl+0x244>
 800297e:	2110      	movs	r1, #16
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f7ff fc53 	bl	800222c <SD_RxDataBlock>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03b      	beq.n	8002a04 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002992:	e037      	b.n	8002a04 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002994:	2100      	movs	r1, #0
 8002996:	204a      	movs	r0, #74	; 0x4a
 8002998:	f7ff fcd2 	bl	8002340 <SD_SendCmd>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d132      	bne.n	8002a08 <SD_disk_ioctl+0x248>
 80029a2:	2110      	movs	r1, #16
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f7ff fc41 	bl	800222c <SD_RxDataBlock>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80029b6:	e027      	b.n	8002a08 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80029b8:	2100      	movs	r1, #0
 80029ba:	207a      	movs	r0, #122	; 0x7a
 80029bc:	f7ff fcc0 	bl	8002340 <SD_SendCmd>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029cc:	e00b      	b.n	80029e6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80029ce:	6a3c      	ldr	r4, [r7, #32]
 80029d0:	1c63      	adds	r3, r4, #1
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	f7ff fb7e 	bl	80020d4 <SPI_RxByte>
 80029d8:	4603      	mov	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80029dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029e0:	3301      	adds	r3, #1
 80029e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d9ef      	bls.n	80029ce <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029fa:	e006      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 80029fc:	bf00      	nop
 80029fe:	e004      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a00:	bf00      	nop
 8002a02:	e002      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a08:	bf00      	nop
    }
    
    DESELECT();
 8002a0a:	f7ff fb3d 	bl	8002088 <DESELECT>
    SPI_RxByte();
 8002a0e:	f7ff fb61 	bl	80020d4 <SPI_RxByte>
  }
  
  return res;
 8002a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	372c      	adds	r7, #44	; 0x2c
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000028 	.word	0x20000028

08002a24 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	603a      	str	r2, [r7, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	460b      	mov	r3, r1
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	b299      	uxth	r1, r3
 8002a42:	1dba      	adds	r2, r7, #6
 8002a44:	230a      	movs	r3, #10
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4811      	ldr	r0, [pc, #68]	; (8002a90 <user_i2c_read+0x6c>)
 8002a4c:	f004 fea4 	bl	8007798 <HAL_I2C_Master_Transmit>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <user_i2c_read+0x38>
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a5a:	e014      	b.n	8002a86 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	88bb      	ldrh	r3, [r7, #4]
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4807      	ldr	r0, [pc, #28]	; (8002a90 <user_i2c_read+0x6c>)
 8002a74:	f004 ff8e 	bl	8007994 <HAL_I2C_Master_Receive>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <user_i2c_read+0x60>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e000      	b.n	8002a86 <user_i2c_read+0x62>

  return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20009924 	.word	0x20009924

08002a94 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f003 fcd5 	bl	800644c <HAL_Delay>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	603a      	str	r2, [r7, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	460b      	mov	r3, r1
 8002abc:	71bb      	strb	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002ac2:	88bb      	ldrh	r3, [r7, #4]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f015 f8b2 	bl	8017c30 <malloc>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002ad0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	88ba      	ldrh	r2, [r7, #4]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f015 f8b5 	bl	8017c50 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	b299      	uxth	r1, r3
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4808      	ldr	r0, [pc, #32]	; (8002b20 <user_i2c_write+0x74>)
 8002afe:	f004 fe4b 	bl	8007798 <HAL_I2C_Master_Transmit>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <user_i2c_write+0x62>
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0c:	e003      	b.n	8002b16 <user_i2c_write+0x6a>

  free(buf);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f015 f896 	bl	8017c40 <free>
  return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20009924 	.word	0x20009924

08002b24 <delay_us>:
// End BME280 part/////////////////////////////////////////////////////////////////////////////////////

// ---------------------------------------------------------------------------------
// Function for generate dalay more than 10 us (using for AM2302 T and H sensor)
bool delay_us(uint16_t us)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <delay_us+0x50>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <delay_us+0x54>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <delay_us+0x58>)
 8002b46:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <delay_us+0x50>)
 8002b4a:	f009 fa47 	bl	800bfdc <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 8002b4e:	bf00      	nop
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <delay_us+0x58>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1fb      	bne.n	8002b50 <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <delay_us+0x50>)
 8002b5a:	f009 faaf 	bl	800c0bc <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <delay_us+0x58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
	int s = 99;
 8002b64:	2363      	movs	r3, #99	; 0x63
 8002b66:	60fb      	str	r3, [r7, #12]
	return true;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000a328 	.word	0x2000a328
 8002b78:	cccccccd 	.word	0xcccccccd
 8002b7c:	200027a4 	.word	0x200027a4

08002b80 <HAL_SPI_TxCpltCallback>:
// ---------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_SPI_TxCpltCallback+0x3c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d111      	bne.n	8002bb4 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b98:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <HAL_SPI_TxCpltCallback+0x3c>)
 8002ba4:	f008 ff08 	bl	800b9b8 <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_SPI_TxCpltCallback+0x44>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000a260 	.word	0x2000a260
 8002bc0:	2000002c 	.word	0x2000002c
 8002bc4:	200027a8 	.word	0x200027a8

08002bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bcc:	f003 fbfc 	bl	80063c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd0:	f000 f8da 	bl	8002d88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd4:	f000 fbdc 	bl	8003390 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002bd8:	f000 fb4a 	bl	8003270 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002bdc:	f000 f96e 	bl	8002ebc <MX_I2C3_Init>
  MX_TIM2_Init();
 8002be0:	f000 fafa 	bl	80031d8 <MX_TIM2_Init>
  MX_TIM10_Init();
 8002be4:	f000 fb92 	bl	800330c <MX_TIM10_Init>
  MX_SPI1_Init();
 8002be8:	f000 fa38 	bl	800305c <MX_SPI1_Init>
  MX_FATFS_Init();
 8002bec:	f00b f9d0 	bl	800df90 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002bf0:	f000 faa0 	bl	8003134 <MX_TIM1_Init>
  MX_RTC_Init();
 8002bf4:	f000 f9a4 	bl	8002f40 <MX_RTC_Init>
  MX_SPI2_Init();
 8002bf8:	f000 fa66 	bl	80030c8 <MX_SPI2_Init>
  MX_DMA_Init();
 8002bfc:	f000 fba8 	bl	8003350 <MX_DMA_Init>
  MX_RNG_Init();
 8002c00:	f000 f98a 	bl	8002f18 <MX_RNG_Init>
  MX_I2C2_Init();
 8002c04:	f000 f92c 	bl	8002e60 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8002c08:	483a      	ldr	r0, [pc, #232]	; (8002cf4 <main+0x12c>)
 8002c0a:	f009 f9e7 	bl	800bfdc <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8002c0e:	483a      	ldr	r0, [pc, #232]	; (8002cf8 <main+0x130>)
 8002c10:	f009 f9e4 	bl	800bfdc <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 8002c14:	4839      	ldr	r0, [pc, #228]	; (8002cfc <main+0x134>)
 8002c16:	f003 fdff 	bl	8006818 <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8002c1a:	4839      	ldr	r0, [pc, #228]	; (8002d00 <main+0x138>)
 8002c1c:	f008 fb0f 	bl	800b23e <HAL_SPI_DeInit>
  MX_DMA_Init();
 8002c20:	f000 fb96 	bl	8003350 <MX_DMA_Init>
  MX_SPI2_Init();
 8002c24:	f000 fa50 	bl	80030c8 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c28:	f010 fa52 	bl	80130d0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8002c2c:	4a35      	ldr	r2, [pc, #212]	; (8002d04 <main+0x13c>)
 8002c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c32:	200a      	movs	r0, #10
 8002c34:	f010 fc86 	bl	8013544 <osMessageQueueNew>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a33      	ldr	r2, [pc, #204]	; (8002d08 <main+0x140>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 8002c3e:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <main+0x144>)
 8002c40:	2164      	movs	r1, #100	; 0x64
 8002c42:	2001      	movs	r0, #1
 8002c44:	f010 fc7e 	bl	8013544 <osMessageQueueNew>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a31      	ldr	r2, [pc, #196]	; (8002d10 <main+0x148>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* creation of BME280_Queue */
  BME280_QueueHandle = osMessageQueueNew (2, sizeof(BME280QUEUE), &BME280_Queue_attributes);
 8002c4e:	4a31      	ldr	r2, [pc, #196]	; (8002d14 <main+0x14c>)
 8002c50:	2114      	movs	r1, #20
 8002c52:	2002      	movs	r0, #2
 8002c54:	f010 fc76 	bl	8013544 <osMessageQueueNew>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a2f      	ldr	r2, [pc, #188]	; (8002d18 <main+0x150>)
 8002c5c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c5e:	4a2f      	ldr	r2, [pc, #188]	; (8002d1c <main+0x154>)
 8002c60:	2100      	movs	r1, #0
 8002c62:	482f      	ldr	r0, [pc, #188]	; (8002d20 <main+0x158>)
 8002c64:	f010 fa7e 	bl	8013164 <osThreadNew>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a2e      	ldr	r2, [pc, #184]	; (8002d24 <main+0x15c>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8002c6e:	4a2e      	ldr	r2, [pc, #184]	; (8002d28 <main+0x160>)
 8002c70:	2100      	movs	r1, #0
 8002c72:	482e      	ldr	r0, [pc, #184]	; (8002d2c <main+0x164>)
 8002c74:	f010 fa76 	bl	8013164 <osThreadNew>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <main+0x168>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8002c7e:	4a2d      	ldr	r2, [pc, #180]	; (8002d34 <main+0x16c>)
 8002c80:	2100      	movs	r1, #0
 8002c82:	482d      	ldr	r0, [pc, #180]	; (8002d38 <main+0x170>)
 8002c84:	f010 fa6e 	bl	8013164 <osThreadNew>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a2c      	ldr	r2, [pc, #176]	; (8002d3c <main+0x174>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002c8e:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <main+0x178>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	482c      	ldr	r0, [pc, #176]	; (8002d44 <main+0x17c>)
 8002c94:	f010 fa66 	bl	8013164 <osThreadNew>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a2b      	ldr	r2, [pc, #172]	; (8002d48 <main+0x180>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 8002c9e:	4a2b      	ldr	r2, [pc, #172]	; (8002d4c <main+0x184>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	482b      	ldr	r0, [pc, #172]	; (8002d50 <main+0x188>)
 8002ca4:	f010 fa5e 	bl	8013164 <osThreadNew>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <main+0x18c>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 8002cae:	4a2a      	ldr	r2, [pc, #168]	; (8002d58 <main+0x190>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	482a      	ldr	r0, [pc, #168]	; (8002d5c <main+0x194>)
 8002cb4:	f010 fa56 	bl	8013164 <osThreadNew>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a29      	ldr	r2, [pc, #164]	; (8002d60 <main+0x198>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 8002cbe:	4a29      	ldr	r2, [pc, #164]	; (8002d64 <main+0x19c>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4829      	ldr	r0, [pc, #164]	; (8002d68 <main+0x1a0>)
 8002cc4:	f010 fa4e 	bl	8013164 <osThreadNew>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a28      	ldr	r2, [pc, #160]	; (8002d6c <main+0x1a4>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8002cce:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <main+0x1a8>)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4828      	ldr	r0, [pc, #160]	; (8002d74 <main+0x1ac>)
 8002cd4:	f010 fa46 	bl	8013164 <osThreadNew>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a27      	ldr	r2, [pc, #156]	; (8002d78 <main+0x1b0>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8002cde:	4a27      	ldr	r2, [pc, #156]	; (8002d7c <main+0x1b4>)
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4827      	ldr	r0, [pc, #156]	; (8002d80 <main+0x1b8>)
 8002ce4:	f010 fa3e 	bl	8013164 <osThreadNew>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <main+0x1bc>)
 8002cec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002cee:	f010 fa13 	bl	8013118 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002cf2:	e7fe      	b.n	8002cf2 <main+0x12a>
 8002cf4:	2000ddc8 	.word	0x2000ddc8
 8002cf8:	2000f854 	.word	0x2000f854
 8002cfc:	200105ec 	.word	0x200105ec
 8002d00:	2000a260 	.word	0x2000a260
 8002d04:	0801eee8 	.word	0x0801eee8
 8002d08:	2000adf4 	.word	0x2000adf4
 8002d0c:	0801ef00 	.word	0x0801ef00
 8002d10:	2000eed8 	.word	0x2000eed8
 8002d14:	0801ef18 	.word	0x0801ef18
 8002d18:	2000de10 	.word	0x2000de10
 8002d1c:	0801eda4 	.word	0x0801eda4
 8002d20:	0800366d 	.word	0x0800366d
 8002d24:	200098e0 	.word	0x200098e0
 8002d28:	0801edc8 	.word	0x0801edc8
 8002d2c:	08003681 	.word	0x08003681
 8002d30:	20010fa0 	.word	0x20010fa0
 8002d34:	0801edec 	.word	0x0801edec
 8002d38:	080038fd 	.word	0x080038fd
 8002d3c:	2000fab8 	.word	0x2000fab8
 8002d40:	0801ee10 	.word	0x0801ee10
 8002d44:	08003b79 	.word	0x08003b79
 8002d48:	2000de14 	.word	0x2000de14
 8002d4c:	0801ee34 	.word	0x0801ee34
 8002d50:	08003bd5 	.word	0x08003bd5
 8002d54:	20010fa4 	.word	0x20010fa4
 8002d58:	0801ee58 	.word	0x0801ee58
 8002d5c:	08003ead 	.word	0x08003ead
 8002d60:	2000fab0 	.word	0x2000fab0
 8002d64:	0801ee7c 	.word	0x0801ee7c
 8002d68:	08004265 	.word	0x08004265
 8002d6c:	2000ac20 	.word	0x2000ac20
 8002d70:	0801eea0 	.word	0x0801eea0
 8002d74:	08004329 	.word	0x08004329
 8002d78:	2000eee0 	.word	0x2000eee0
 8002d7c:	0801eec4 	.word	0x0801eec4
 8002d80:	08004415 	.word	0x08004415
 8002d84:	2000eedc 	.word	0x2000eedc

08002d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b094      	sub	sp, #80	; 0x50
 8002d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d8e:	f107 0320 	add.w	r3, r7, #32
 8002d92:	2230      	movs	r2, #48	; 0x30
 8002d94:	2100      	movs	r1, #0
 8002d96:	4618      	mov	r0, r3
 8002d98:	f014 ff68 	bl	8017c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d9c:	f107 030c 	add.w	r3, r7, #12
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
 8002db0:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <SystemClock_Config+0xd0>)
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	4a28      	ldr	r2, [pc, #160]	; (8002e58 <SystemClock_Config+0xd0>)
 8002db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dba:	6413      	str	r3, [r2, #64]	; 0x40
 8002dbc:	4b26      	ldr	r3, [pc, #152]	; (8002e58 <SystemClock_Config+0xd0>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	607b      	str	r3, [r7, #4]
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <SystemClock_Config+0xd4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a22      	ldr	r2, [pc, #136]	; (8002e5c <SystemClock_Config+0xd4>)
 8002dd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dd6:	6013      	str	r3, [r2, #0]
 8002dd8:	4b20      	ldr	r3, [pc, #128]	; (8002e5c <SystemClock_Config+0xd4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002de4:	2305      	movs	r3, #5
 8002de6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002dee:	2301      	movs	r3, #1
 8002df0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002df2:	2302      	movs	r3, #2
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002dfc:	2308      	movs	r3, #8
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e06:	2302      	movs	r3, #2
 8002e08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e0a:	2307      	movs	r3, #7
 8002e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e0e:	f107 0320 	add.w	r3, r7, #32
 8002e12:	4618      	mov	r0, r3
 8002e14:	f006 ffa2 	bl	8009d5c <HAL_RCC_OscConfig>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e1e:	f001 fc43 	bl	80046a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e22:	230f      	movs	r3, #15
 8002e24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e26:	2302      	movs	r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e3a:	f107 030c 	add.w	r3, r7, #12
 8002e3e:	2105      	movs	r1, #5
 8002e40:	4618      	mov	r0, r3
 8002e42:	f007 fa03 	bl	800a24c <HAL_RCC_ClockConfig>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002e4c:	f001 fc2c 	bl	80046a8 <Error_Handler>
  }
}
 8002e50:	bf00      	nop
 8002e52:	3750      	adds	r7, #80	; 0x50
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40007000 	.word	0x40007000

08002e60 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e64:	4b12      	ldr	r3, [pc, #72]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e66:	4a13      	ldr	r2, [pc, #76]	; (8002eb4 <MX_I2C2_Init+0x54>)
 8002e68:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e6c:	4a12      	ldr	r2, [pc, #72]	; (8002eb8 <MX_I2C2_Init+0x58>)
 8002e6e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e82:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e8a:	4b09      	ldr	r3, [pc, #36]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e90:	4b07      	ldr	r3, [pc, #28]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e96:	4b06      	ldr	r3, [pc, #24]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e9c:	4804      	ldr	r0, [pc, #16]	; (8002eb0 <MX_I2C2_Init+0x50>)
 8002e9e:	f004 fb37 	bl	8007510 <HAL_I2C_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002ea8:	f001 fbfe 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	2000a370 	.word	0x2000a370
 8002eb4:	40005800 	.word	0x40005800
 8002eb8:	000186a0 	.word	0x000186a0

08002ebc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002ec0:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ec2:	4a13      	ldr	r2, [pc, #76]	; (8002f10 <MX_I2C3_Init+0x54>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ec8:	4a12      	ldr	r2, [pc, #72]	; (8002f14 <MX_I2C3_Init+0x58>)
 8002eca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ed8:	4b0c      	ldr	r3, [pc, #48]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002eda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ede:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002ee6:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eec:	4b07      	ldr	r3, [pc, #28]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ef8:	4804      	ldr	r0, [pc, #16]	; (8002f0c <MX_I2C3_Init+0x50>)
 8002efa:	f004 fb09 	bl	8007510 <HAL_I2C_Init>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002f04:	f001 fbd0 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002f08:	bf00      	nop
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	20009924 	.word	0x20009924
 8002f10:	40005c00 	.word	0x40005c00
 8002f14:	000186a0 	.word	0x000186a0

08002f18 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <MX_RNG_Init+0x20>)
 8002f1e:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <MX_RNG_Init+0x24>)
 8002f20:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002f22:	4805      	ldr	r0, [pc, #20]	; (8002f38 <MX_RNG_Init+0x20>)
 8002f24:	f007 fc8e 	bl	800a844 <HAL_RNG_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002f2e:	f001 fbbb 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000faa0 	.word	0x2000faa0
 8002f3c:	50060800 	.word	0x50060800

08002f40 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b090      	sub	sp, #64	; 0x40
 8002f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	605a      	str	r2, [r3, #4]
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	60da      	str	r2, [r3, #12]
 8002f54:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002f56:	2300      	movs	r3, #0
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002f5a:	463b      	mov	r3, r7
 8002f5c:	2228      	movs	r2, #40	; 0x28
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f014 fe83 	bl	8017c6c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f66:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <MX_RTC_Init+0x114>)
 8002f68:	4a3b      	ldr	r2, [pc, #236]	; (8003058 <MX_RTC_Init+0x118>)
 8002f6a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f6c:	4b39      	ldr	r3, [pc, #228]	; (8003054 <MX_RTC_Init+0x114>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f72:	4b38      	ldr	r3, [pc, #224]	; (8003054 <MX_RTC_Init+0x114>)
 8002f74:	227f      	movs	r2, #127	; 0x7f
 8002f76:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f78:	4b36      	ldr	r3, [pc, #216]	; (8003054 <MX_RTC_Init+0x114>)
 8002f7a:	22ff      	movs	r2, #255	; 0xff
 8002f7c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f7e:	4b35      	ldr	r3, [pc, #212]	; (8003054 <MX_RTC_Init+0x114>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f84:	4b33      	ldr	r3, [pc, #204]	; (8003054 <MX_RTC_Init+0x114>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f8a:	4b32      	ldr	r3, [pc, #200]	; (8003054 <MX_RTC_Init+0x114>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f90:	4830      	ldr	r0, [pc, #192]	; (8003054 <MX_RTC_Init+0x114>)
 8002f92:	f007 fc81 	bl	800a898 <HAL_RTC_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002f9c:	f001 fb84 	bl	80046a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8002fa0:	2323      	movs	r3, #35	; 0x23
 8002fa2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8002fa6:	2359      	movs	r3, #89	; 0x59
 8002fa8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8002fac:	2345      	movs	r3, #69	; 0x45
 8002fae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002fba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4824      	ldr	r0, [pc, #144]	; (8003054 <MX_RTC_Init+0x114>)
 8002fc4:	f007 fcf9 	bl	800a9ba <HAL_RTC_SetTime>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002fce:	f001 fb6b 	bl	80046a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 8002fd8:	2312      	movs	r3, #18
 8002fda:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 8002fde:	2328      	movs	r3, #40	; 0x28
 8002fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002fea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fee:	2201      	movs	r2, #1
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4818      	ldr	r0, [pc, #96]	; (8003054 <MX_RTC_Init+0x114>)
 8002ff4:	f007 fdfc 	bl	800abf0 <HAL_RTC_SetDate>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002ffe:	f001 fb53 	bl	80046a8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003002:	2300      	movs	r3, #0
 8003004:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003006:	2300      	movs	r3, #0
 8003008:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800300a:	2310      	movs	r3, #16
 800300c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800300e:	2300      	movs	r3, #0
 8003010:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800301a:	2300      	movs	r3, #0
 800301c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800301e:	2300      	movs	r3, #0
 8003020:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003026:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800302e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003032:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003034:	463b      	mov	r3, r7
 8003036:	2201      	movs	r2, #1
 8003038:	4619      	mov	r1, r3
 800303a:	4806      	ldr	r0, [pc, #24]	; (8003054 <MX_RTC_Init+0x114>)
 800303c:	f007 fece 	bl	800addc <HAL_RTC_SetAlarm>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8003046:	f001 fb2f 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800304a:	bf00      	nop
 800304c:	3740      	adds	r7, #64	; 0x40
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	2000eee4 	.word	0x2000eee4
 8003058:	40002800 	.word	0x40002800

0800305c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003060:	4b17      	ldr	r3, [pc, #92]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003062:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <MX_SPI1_Init+0x68>)
 8003064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003066:	4b16      	ldr	r3, [pc, #88]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003068:	f44f 7282 	mov.w	r2, #260	; 0x104
 800306c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800306e:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003070:	2200      	movs	r2, #0
 8003072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003074:	4b12      	ldr	r3, [pc, #72]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003076:	2200      	movs	r2, #0
 8003078:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <MX_SPI1_Init+0x64>)
 800307c:	2200      	movs	r2, #0
 800307e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003082:	2200      	movs	r2, #0
 8003084:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003086:	4b0e      	ldr	r3, [pc, #56]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800308c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800308e:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003090:	2220      	movs	r2, #32
 8003092:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <MX_SPI1_Init+0x64>)
 8003096:	2200      	movs	r2, #0
 8003098:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <MX_SPI1_Init+0x64>)
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <MX_SPI1_Init+0x64>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030a6:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <MX_SPI1_Init+0x64>)
 80030a8:	220a      	movs	r2, #10
 80030aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030ac:	4804      	ldr	r0, [pc, #16]	; (80030c0 <MX_SPI1_Init+0x64>)
 80030ae:	f008 f83d 	bl	800b12c <HAL_SPI_Init>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d001      	beq.n	80030bc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030b8:	f001 faf6 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	2000fabc 	.word	0x2000fabc
 80030c4:	40013000 	.word	0x40013000

080030c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80030cc:	4b17      	ldr	r3, [pc, #92]	; (800312c <MX_SPI2_Init+0x64>)
 80030ce:	4a18      	ldr	r2, [pc, #96]	; (8003130 <MX_SPI2_Init+0x68>)
 80030d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030d2:	4b16      	ldr	r3, [pc, #88]	; (800312c <MX_SPI2_Init+0x64>)
 80030d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030da:	4b14      	ldr	r3, [pc, #80]	; (800312c <MX_SPI2_Init+0x64>)
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <MX_SPI2_Init+0x64>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e6:	4b11      	ldr	r3, [pc, #68]	; (800312c <MX_SPI2_Init+0x64>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <MX_SPI2_Init+0x64>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	; (800312c <MX_SPI2_Init+0x64>)
 80030f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030fa:	4b0c      	ldr	r3, [pc, #48]	; (800312c <MX_SPI2_Init+0x64>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003100:	4b0a      	ldr	r3, [pc, #40]	; (800312c <MX_SPI2_Init+0x64>)
 8003102:	2200      	movs	r2, #0
 8003104:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <MX_SPI2_Init+0x64>)
 8003108:	2200      	movs	r2, #0
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <MX_SPI2_Init+0x64>)
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003112:	4b06      	ldr	r3, [pc, #24]	; (800312c <MX_SPI2_Init+0x64>)
 8003114:	220a      	movs	r2, #10
 8003116:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003118:	4804      	ldr	r0, [pc, #16]	; (800312c <MX_SPI2_Init+0x64>)
 800311a:	f008 f807 	bl	800b12c <HAL_SPI_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003124:	f001 fac0 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000a260 	.word	0x2000a260
 8003130:	40003800 	.word	0x40003800

08003134 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800313a:	f107 0308 	add.w	r3, r7, #8
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	609a      	str	r2, [r3, #8]
 8003146:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003148:	463b      	mov	r3, r7
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003150:	4b1f      	ldr	r3, [pc, #124]	; (80031d0 <MX_TIM1_Init+0x9c>)
 8003152:	4a20      	ldr	r2, [pc, #128]	; (80031d4 <MX_TIM1_Init+0xa0>)
 8003154:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8003156:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <MX_TIM1_Init+0x9c>)
 8003158:	f244 129f 	movw	r2, #16799	; 0x419f
 800315c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800315e:	4b1c      	ldr	r3, [pc, #112]	; (80031d0 <MX_TIM1_Init+0x9c>)
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003164:	4b1a      	ldr	r3, [pc, #104]	; (80031d0 <MX_TIM1_Init+0x9c>)
 8003166:	f242 7210 	movw	r2, #10000	; 0x2710
 800316a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800316c:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <MX_TIM1_Init+0x9c>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003172:	4b17      	ldr	r3, [pc, #92]	; (80031d0 <MX_TIM1_Init+0x9c>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003178:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <MX_TIM1_Init+0x9c>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800317e:	4814      	ldr	r0, [pc, #80]	; (80031d0 <MX_TIM1_Init+0x9c>)
 8003180:	f008 fedc 	bl	800bf3c <HAL_TIM_Base_Init>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800318a:	f001 fa8d 	bl	80046a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800318e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	4619      	mov	r1, r3
 800319a:	480d      	ldr	r0, [pc, #52]	; (80031d0 <MX_TIM1_Init+0x9c>)
 800319c:	f009 f8c5 	bl	800c32a <HAL_TIM_ConfigClockSource>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80031a6:	f001 fa7f 	bl	80046a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80031aa:	2320      	movs	r3, #32
 80031ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031b2:	463b      	mov	r3, r7
 80031b4:	4619      	mov	r1, r3
 80031b6:	4806      	ldr	r0, [pc, #24]	; (80031d0 <MX_TIM1_Init+0x9c>)
 80031b8:	f009 fae0 	bl	800c77c <HAL_TIMEx_MasterConfigSynchronization>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80031c2:	f001 fa71 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80031c6:	bf00      	nop
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	2000f854 	.word	0x2000f854
 80031d4:	40010000 	.word	0x40010000

080031d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b086      	sub	sp, #24
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	463b      	mov	r3, r7
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031f4:	4b1d      	ldr	r3, [pc, #116]	; (800326c <MX_TIM2_Init+0x94>)
 80031f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <MX_TIM2_Init+0x94>)
 80031fe:	220a      	movs	r2, #10
 8003200:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003202:	4b1a      	ldr	r3, [pc, #104]	; (800326c <MX_TIM2_Init+0x94>)
 8003204:	2200      	movs	r2, #0
 8003206:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8003208:	4b18      	ldr	r3, [pc, #96]	; (800326c <MX_TIM2_Init+0x94>)
 800320a:	220a      	movs	r2, #10
 800320c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <MX_TIM2_Init+0x94>)
 8003210:	2200      	movs	r2, #0
 8003212:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003214:	4b15      	ldr	r3, [pc, #84]	; (800326c <MX_TIM2_Init+0x94>)
 8003216:	2200      	movs	r2, #0
 8003218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800321a:	4814      	ldr	r0, [pc, #80]	; (800326c <MX_TIM2_Init+0x94>)
 800321c:	f008 fe8e 	bl	800bf3c <HAL_TIM_Base_Init>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003226:	f001 fa3f 	bl	80046a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003230:	f107 0308 	add.w	r3, r7, #8
 8003234:	4619      	mov	r1, r3
 8003236:	480d      	ldr	r0, [pc, #52]	; (800326c <MX_TIM2_Init+0x94>)
 8003238:	f009 f877 	bl	800c32a <HAL_TIM_ConfigClockSource>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003242:	f001 fa31 	bl	80046a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800324e:	463b      	mov	r3, r7
 8003250:	4619      	mov	r1, r3
 8003252:	4806      	ldr	r0, [pc, #24]	; (800326c <MX_TIM2_Init+0x94>)
 8003254:	f009 fa92 	bl	800c77c <HAL_TIMEx_MasterConfigSynchronization>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800325e:	f001 fa23 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003262:	bf00      	nop
 8003264:	3718      	adds	r7, #24
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	2000fbd4 	.word	0x2000fbd4

08003270 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003284:	463b      	mov	r3, r7
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <MX_TIM3_Init+0x94>)
 800328e:	4a1e      	ldr	r2, [pc, #120]	; (8003308 <MX_TIM3_Init+0x98>)
 8003290:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003292:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <MX_TIM3_Init+0x94>)
 8003294:	f240 3247 	movw	r2, #839	; 0x347
 8003298:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <MX_TIM3_Init+0x94>)
 800329c:	2200      	movs	r2, #0
 800329e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <MX_TIM3_Init+0x94>)
 80032a2:	220a      	movs	r2, #10
 80032a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a6:	4b17      	ldr	r3, [pc, #92]	; (8003304 <MX_TIM3_Init+0x94>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80032ac:	4b15      	ldr	r3, [pc, #84]	; (8003304 <MX_TIM3_Init+0x94>)
 80032ae:	2280      	movs	r2, #128	; 0x80
 80032b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032b2:	4814      	ldr	r0, [pc, #80]	; (8003304 <MX_TIM3_Init+0x94>)
 80032b4:	f008 fe42 	bl	800bf3c <HAL_TIM_Base_Init>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80032be:	f001 f9f3 	bl	80046a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	4619      	mov	r1, r3
 80032ce:	480d      	ldr	r0, [pc, #52]	; (8003304 <MX_TIM3_Init+0x94>)
 80032d0:	f009 f82b 	bl	800c32a <HAL_TIM_ConfigClockSource>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80032da:	f001 f9e5 	bl	80046a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032e6:	463b      	mov	r3, r7
 80032e8:	4619      	mov	r1, r3
 80032ea:	4806      	ldr	r0, [pc, #24]	; (8003304 <MX_TIM3_Init+0x94>)
 80032ec:	f009 fa46 	bl	800c77c <HAL_TIMEx_MasterConfigSynchronization>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80032f6:	f001 f9d7 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	2000ddc8 	.word	0x2000ddc8
 8003308:	40000400 	.word	0x40000400

0800330c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <MX_TIM10_Init+0x3c>)
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <MX_TIM10_Init+0x40>)
 8003314:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <MX_TIM10_Init+0x3c>)
 8003318:	22a7      	movs	r2, #167	; 0xa7
 800331a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800331c:	4b0a      	ldr	r3, [pc, #40]	; (8003348 <MX_TIM10_Init+0x3c>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8003322:	4b09      	ldr	r3, [pc, #36]	; (8003348 <MX_TIM10_Init+0x3c>)
 8003324:	2209      	movs	r2, #9
 8003326:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003328:	4b07      	ldr	r3, [pc, #28]	; (8003348 <MX_TIM10_Init+0x3c>)
 800332a:	2200      	movs	r2, #0
 800332c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800332e:	4b06      	ldr	r3, [pc, #24]	; (8003348 <MX_TIM10_Init+0x3c>)
 8003330:	2280      	movs	r2, #128	; 0x80
 8003332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003334:	4804      	ldr	r0, [pc, #16]	; (8003348 <MX_TIM10_Init+0x3c>)
 8003336:	f008 fe01 	bl	800bf3c <HAL_TIM_Base_Init>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8003340:	f001 f9b2 	bl	80046a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003344:	bf00      	nop
 8003346:	bd80      	pop	{r7, pc}
 8003348:	2000a328 	.word	0x2000a328
 800334c:	40014400 	.word	0x40014400

08003350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	607b      	str	r3, [r7, #4]
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <MX_DMA_Init+0x3c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <MX_DMA_Init+0x3c>)
 8003360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003364:	6313      	str	r3, [r2, #48]	; 0x30
 8003366:	4b09      	ldr	r3, [pc, #36]	; (800338c <MX_DMA_Init+0x3c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003372:	2200      	movs	r2, #0
 8003374:	2105      	movs	r1, #5
 8003376:	200f      	movs	r0, #15
 8003378:	f003 f968 	bl	800664c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800337c:	200f      	movs	r0, #15
 800337e:	f003 f981 	bl	8006684 <HAL_NVIC_EnableIRQ>

}
 8003382:	bf00      	nop
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
 800338a:	bf00      	nop
 800338c:	40023800 	.word	0x40023800

08003390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b08c      	sub	sp, #48	; 0x30
 8003394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003396:	f107 031c 	add.w	r3, r7, #28
 800339a:	2200      	movs	r2, #0
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	605a      	str	r2, [r3, #4]
 80033a0:	609a      	str	r2, [r3, #8]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	4baa      	ldr	r3, [pc, #680]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4aa9      	ldr	r2, [pc, #676]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033b0:	f043 0310 	orr.w	r3, r3, #16
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4ba7      	ldr	r3, [pc, #668]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	4ba3      	ldr	r3, [pc, #652]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	4aa2      	ldr	r2, [pc, #648]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033cc:	f043 0304 	orr.w	r3, r3, #4
 80033d0:	6313      	str	r3, [r2, #48]	; 0x30
 80033d2:	4ba0      	ldr	r3, [pc, #640]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	4b9c      	ldr	r3, [pc, #624]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	4a9b      	ldr	r2, [pc, #620]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033ec:	6313      	str	r3, [r2, #48]	; 0x30
 80033ee:	4b99      	ldr	r3, [pc, #612]	; (8003654 <MX_GPIO_Init+0x2c4>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b95      	ldr	r3, [pc, #596]	; (8003654 <MX_GPIO_Init+0x2c4>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a94      	ldr	r2, [pc, #592]	; (8003654 <MX_GPIO_Init+0x2c4>)
 8003404:	f043 0301 	orr.w	r3, r3, #1
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b92      	ldr	r3, [pc, #584]	; (8003654 <MX_GPIO_Init+0x2c4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	4b8e      	ldr	r3, [pc, #568]	; (8003654 <MX_GPIO_Init+0x2c4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	4a8d      	ldr	r2, [pc, #564]	; (8003654 <MX_GPIO_Init+0x2c4>)
 8003420:	f043 0302 	orr.w	r3, r3, #2
 8003424:	6313      	str	r3, [r2, #48]	; 0x30
 8003426:	4b8b      	ldr	r3, [pc, #556]	; (8003654 <MX_GPIO_Init+0x2c4>)
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	607b      	str	r3, [r7, #4]
 8003436:	4b87      	ldr	r3, [pc, #540]	; (8003654 <MX_GPIO_Init+0x2c4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	4a86      	ldr	r2, [pc, #536]	; (8003654 <MX_GPIO_Init+0x2c4>)
 800343c:	f043 0308 	orr.w	r3, r3, #8
 8003440:	6313      	str	r3, [r2, #48]	; 0x30
 8003442:	4b84      	ldr	r3, [pc, #528]	; (8003654 <MX_GPIO_Init+0x2c4>)
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800344e:	2200      	movs	r2, #0
 8003450:	217c      	movs	r1, #124	; 0x7c
 8003452:	4881      	ldr	r0, [pc, #516]	; (8003658 <MX_GPIO_Init+0x2c8>)
 8003454:	f004 f842 	bl	80074dc <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003458:	2201      	movs	r2, #1
 800345a:	2101      	movs	r1, #1
 800345c:	487f      	ldr	r0, [pc, #508]	; (800365c <MX_GPIO_Init+0x2cc>)
 800345e:	f004 f83d 	bl	80074dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8003462:	2200      	movs	r2, #0
 8003464:	2142      	movs	r1, #66	; 0x42
 8003466:	487d      	ldr	r0, [pc, #500]	; (800365c <MX_GPIO_Init+0x2cc>)
 8003468:	f004 f838 	bl	80074dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800346c:	2200      	movs	r2, #0
 800346e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003472:	487b      	ldr	r0, [pc, #492]	; (8003660 <MX_GPIO_Init+0x2d0>)
 8003474:	f004 f832 	bl	80074dc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8003478:	2200      	movs	r2, #0
 800347a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800347e:	4879      	ldr	r0, [pc, #484]	; (8003664 <MX_GPIO_Init+0x2d4>)
 8003480:	f004 f82c 	bl	80074dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8003484:	231c      	movs	r3, #28
 8003486:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003488:	2301      	movs	r3, #1
 800348a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003490:	2300      	movs	r3, #0
 8003492:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	486f      	ldr	r0, [pc, #444]	; (8003658 <MX_GPIO_Init+0x2c8>)
 800349c:	f003 fd6e 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 80034a0:	2360      	movs	r3, #96	; 0x60
 80034a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034ac:	2303      	movs	r3, #3
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4619      	mov	r1, r3
 80034b6:	4868      	ldr	r0, [pc, #416]	; (8003658 <MX_GPIO_Init+0x2c8>)
 80034b8:	f003 fd60 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 80034bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c2:	2300      	movs	r3, #0
 80034c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	2300      	movs	r3, #0
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80034ca:	f107 031c 	add.w	r3, r7, #28
 80034ce:	4619      	mov	r1, r3
 80034d0:	4862      	ldr	r0, [pc, #392]	; (800365c <MX_GPIO_Init+0x2cc>)
 80034d2:	f003 fd53 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 80034d6:	2303      	movs	r3, #3
 80034d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034da:	2301      	movs	r3, #1
 80034dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e2:	2300      	movs	r3, #0
 80034e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e6:	f107 031c 	add.w	r3, r7, #28
 80034ea:	4619      	mov	r1, r3
 80034ec:	485b      	ldr	r0, [pc, #364]	; (800365c <MX_GPIO_Init+0x2cc>)
 80034ee:	f003 fd45 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80034f2:	2308      	movs	r3, #8
 80034f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f6:	2302      	movs	r3, #2
 80034f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fe:	2300      	movs	r3, #0
 8003500:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003502:	2305      	movs	r3, #5
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003506:	f107 031c 	add.w	r3, r7, #28
 800350a:	4619      	mov	r1, r3
 800350c:	4853      	ldr	r0, [pc, #332]	; (800365c <MX_GPIO_Init+0x2cc>)
 800350e:	f003 fd35 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003512:	2301      	movs	r3, #1
 8003514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003516:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800351a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351c:	2300      	movs	r3, #0
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	4619      	mov	r1, r3
 8003526:	4850      	ldr	r0, [pc, #320]	; (8003668 <MX_GPIO_Init+0x2d8>)
 8003528:	f003 fd28 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800352c:	2310      	movs	r3, #16
 800352e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003538:	2300      	movs	r3, #0
 800353a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800353c:	2306      	movs	r3, #6
 800353e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003540:	f107 031c 	add.w	r3, r7, #28
 8003544:	4619      	mov	r1, r3
 8003546:	4848      	ldr	r0, [pc, #288]	; (8003668 <MX_GPIO_Init+0x2d8>)
 8003548:	f003 fd18 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800354c:	2304      	movs	r3, #4
 800354e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003550:	2300      	movs	r3, #0
 8003552:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003554:	2300      	movs	r3, #0
 8003556:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003558:	f107 031c 	add.w	r3, r7, #28
 800355c:	4619      	mov	r1, r3
 800355e:	4841      	ldr	r0, [pc, #260]	; (8003664 <MX_GPIO_Init+0x2d4>)
 8003560:	f003 fd0c 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003564:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003568:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356a:	2301      	movs	r3, #1
 800356c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003572:	2300      	movs	r3, #0
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003576:	f107 031c 	add.w	r3, r7, #28
 800357a:	4619      	mov	r1, r3
 800357c:	4838      	ldr	r0, [pc, #224]	; (8003660 <MX_GPIO_Init+0x2d0>)
 800357e:	f003 fcfd 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8003582:	2340      	movs	r3, #64	; 0x40
 8003584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003586:	2301      	movs	r3, #1
 8003588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800358a:	2300      	movs	r3, #0
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800358e:	2302      	movs	r3, #2
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003592:	f107 031c 	add.w	r3, r7, #28
 8003596:	4619      	mov	r1, r3
 8003598:	4830      	ldr	r0, [pc, #192]	; (800365c <MX_GPIO_Init+0x2cc>)
 800359a:	f003 fcef 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800359e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80035a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a4:	2302      	movs	r3, #2
 80035a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ac:	2300      	movs	r3, #0
 80035ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035b0:	2306      	movs	r3, #6
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b4:	f107 031c 	add.w	r3, r7, #28
 80035b8:	4619      	mov	r1, r3
 80035ba:	4828      	ldr	r0, [pc, #160]	; (800365c <MX_GPIO_Init+0x2cc>)
 80035bc:	f003 fcde 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80035c0:	2320      	movs	r3, #32
 80035c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80035cc:	f107 031c 	add.w	r3, r7, #28
 80035d0:	4619      	mov	r1, r3
 80035d2:	4823      	ldr	r0, [pc, #140]	; (8003660 <MX_GPIO_Init+0x2d0>)
 80035d4:	f003 fcd2 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80035d8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80035dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035de:	2312      	movs	r3, #18
 80035e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e2:	2301      	movs	r3, #1
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e6:	2300      	movs	r3, #0
 80035e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ea:	2304      	movs	r3, #4
 80035ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ee:	f107 031c 	add.w	r3, r7, #28
 80035f2:	4619      	mov	r1, r3
 80035f4:	481b      	ldr	r0, [pc, #108]	; (8003664 <MX_GPIO_Init+0x2d4>)
 80035f6:	f003 fcc1 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 80035fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80035fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003600:	2301      	movs	r3, #1
 8003602:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003604:	2300      	movs	r3, #0
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003608:	2303      	movs	r3, #3
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	4619      	mov	r1, r3
 8003612:	4814      	ldr	r0, [pc, #80]	; (8003664 <MX_GPIO_Init+0x2d4>)
 8003614:	f003 fcb2 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8003618:	2301      	movs	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800361c:	2300      	movs	r3, #0
 800361e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	480b      	ldr	r0, [pc, #44]	; (8003658 <MX_GPIO_Init+0x2c8>)
 800362c:	f003 fca6 	bl	8006f7c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003630:	2302      	movs	r3, #2
 8003632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003634:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	4804      	ldr	r0, [pc, #16]	; (8003658 <MX_GPIO_Init+0x2c8>)
 8003646:	f003 fc99 	bl	8006f7c <HAL_GPIO_Init>

}
 800364a:	bf00      	nop
 800364c:	3730      	adds	r7, #48	; 0x30
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	40021000 	.word	0x40021000
 800365c:	40020800 	.word	0x40020800
 8003660:	40020c00 	.word	0x40020c00
 8003664:	40020400 	.word	0x40020400
 8003668:	40020000 	.word	0x40020000

0800366c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003674:	f013 fc76 	bl	8016f64 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8003678:	200a      	movs	r0, #10
 800367a:	f00f fe05 	bl	8013288 <osDelay>
 800367e:	e7fb      	b.n	8003678 <StartDefaultTask+0xc>

08003680 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8003680:	b5b0      	push	{r4, r5, r7, lr}
 8003682:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003686:	af00      	add	r7, sp, #0
 8003688:	1d3b      	adds	r3, r7, #4
 800368a:	6018      	str	r0, [r3, #0]
		 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
		 * Also, need solder the LF Crystal and two capacitors.
		 */

		// 1. Set time
		  RTC_TimeTypeDef sTime = {0};
 800368c:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]
	//	  sTime.Minutes = 33;
	//	  sTime.Seconds = 00;
	//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		  // Set date

		  RTC_DateTypeDef sDate = {0};
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 80036a2:	f107 0314 	add.w	r3, r7, #20
 80036a6:	2200      	movs	r2, #0
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	3304      	adds	r3, #4
 80036ac:	222e      	movs	r2, #46	; 0x2e
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f014 fadb 	bl	8017c6c <memset>
	char buf[5] = {0};
 80036b6:	f107 030c 	add.w	r3, r7, #12
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 80036c2:	f107 0308 	add.w	r3, r7, #8
 80036c6:	f640 220d 	movw	r2, #2573	; 0xa0d
 80036ca:	601a      	str	r2, [r3, #0]

	static uint8_t i = 1;
	for(;;)
	{
		// Blue LED blink//
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 80036cc:	2201      	movs	r2, #1
 80036ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036d2:	4883      	ldr	r0, [pc, #524]	; (80038e0 <Start_RTC+0x260>)
 80036d4:	f003 ff02 	bl	80074dc <HAL_GPIO_WritePin>
		osDelay(100);
 80036d8:	2064      	movs	r0, #100	; 0x64
 80036da:	f00f fdd5 	bl	8013288 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 80036de:	2200      	movs	r2, #0
 80036e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036e4:	487e      	ldr	r0, [pc, #504]	; (80038e0 <Start_RTC+0x260>)
 80036e6:	f003 fef9 	bl	80074dc <HAL_GPIO_WritePin>
		osDelay(900);
 80036ea:	f44f 7061 	mov.w	r0, #900	; 0x384
 80036ee:	f00f fdcb 	bl	8013288 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 80036f2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80036f6:	2200      	movs	r2, #0
 80036f8:	4619      	mov	r1, r3
 80036fa:	487a      	ldr	r0, [pc, #488]	; (80038e4 <Start_RTC+0x264>)
 80036fc:	f007 fa1a 	bl	800ab34 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003700:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003704:	2200      	movs	r2, #0
 8003706:	4619      	mov	r1, r3
 8003708:	4876      	ldr	r0, [pc, #472]	; (80038e4 <Start_RTC+0x264>)
 800370a:	f007 fb18 	bl	800ad3e <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 800370e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003716:	2100      	movs	r1, #0
 8003718:	4618      	mov	r0, r3
 800371a:	f014 faa7 	bl	8017c6c <memset>
		memset(buff, 0, sizeof(buff));
 800371e:	f107 0314 	add.w	r3, r7, #20
 8003722:	2232      	movs	r2, #50	; 0x32
 8003724:	2100      	movs	r1, #0
 8003726:	4618      	mov	r0, r3
 8003728:	f014 faa0 	bl	8017c6c <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 800372c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003730:	4618      	mov	r0, r3
 8003732:	f7fc fd4d 	bl	80001d0 <strlen>
 8003736:	4603      	mov	r3, r0
 8003738:	461a      	mov	r2, r3
 800373a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800373e:	4413      	add	r3, r2
 8003740:	4a69      	ldr	r2, [pc, #420]	; (80038e8 <Start_RTC+0x268>)
 8003742:	461d      	mov	r5, r3
 8003744:	4614      	mov	r4, r2
 8003746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003748:	6028      	str	r0, [r5, #0]
 800374a:	6069      	str	r1, [r5, #4]
 800374c:	60aa      	str	r2, [r5, #8]
 800374e:	60eb      	str	r3, [r5, #12]
 8003750:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003752:	6128      	str	r0, [r5, #16]
 8003754:	6169      	str	r1, [r5, #20]
 8003756:	61aa      	str	r2, [r5, #24]
 8003758:	8823      	ldrh	r3, [r4, #0]
 800375a:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 800375c:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003760:	4618      	mov	r0, r3
 8003762:	f107 030c 	add.w	r3, r7, #12
 8003766:	220a      	movs	r2, #10
 8003768:	4619      	mov	r1, r3
 800376a:	f014 fa5b 	bl	8017c24 <itoa>
		strcat(msg.Buf, buf);
 800376e:	f107 020c 	add.w	r2, r7, #12
 8003772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f015 f870 	bl	801885e <strcat>

		itoa(sDate.Month, buf, 10);
 800377e:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003782:	4618      	mov	r0, r3
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	220a      	movs	r2, #10
 800378a:	4619      	mov	r1, r3
 800378c:	f014 fa4a 	bl	8017c24 <itoa>
		strcat(msg.Buf, "-");
 8003790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fd1b 	bl	80001d0 <strlen>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a2:	4413      	add	r3, r2
 80037a4:	4951      	ldr	r1, [pc, #324]	; (80038ec <Start_RTC+0x26c>)
 80037a6:	461a      	mov	r2, r3
 80037a8:	460b      	mov	r3, r1
 80037aa:	881b      	ldrh	r3, [r3, #0]
 80037ac:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 80037ae:	f107 020c 	add.w	r2, r7, #12
 80037b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037b6:	4611      	mov	r1, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f015 f850 	bl	801885e <strcat>

		itoa(sDate.Date, buf, 10);
 80037be:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 80037c2:	4618      	mov	r0, r3
 80037c4:	f107 030c 	add.w	r3, r7, #12
 80037c8:	220a      	movs	r2, #10
 80037ca:	4619      	mov	r1, r3
 80037cc:	f014 fa2a 	bl	8017c24 <itoa>
		strcat(msg.Buf, "-");
 80037d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7fc fcfb 	bl	80001d0 <strlen>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037e2:	4413      	add	r3, r2
 80037e4:	4941      	ldr	r1, [pc, #260]	; (80038ec <Start_RTC+0x26c>)
 80037e6:	461a      	mov	r2, r3
 80037e8:	460b      	mov	r3, r1
 80037ea:	881b      	ldrh	r3, [r3, #0]
 80037ec:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 80037ee:	f107 020c 	add.w	r2, r7, #12
 80037f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037f6:	4611      	mov	r1, r2
 80037f8:	4618      	mov	r0, r3
 80037fa:	f015 f830 	bl	801885e <strcat>

		strcat(msg.Buf, " | ");
 80037fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fce4 	bl	80001d0 <strlen>
 8003808:	4603      	mov	r3, r0
 800380a:	461a      	mov	r2, r3
 800380c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003810:	4413      	add	r3, r2
 8003812:	4a37      	ldr	r2, [pc, #220]	; (80038f0 <Start_RTC+0x270>)
 8003814:	6810      	ldr	r0, [r2, #0]
 8003816:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003818:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 800381c:	4618      	mov	r0, r3
 800381e:	f107 030c 	add.w	r3, r7, #12
 8003822:	220a      	movs	r2, #10
 8003824:	4619      	mov	r1, r3
 8003826:	f014 f9fd 	bl	8017c24 <itoa>
		strcat(msg.Buf, buf);
 800382a:	f107 020c 	add.w	r2, r7, #12
 800382e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f015 f812 	bl	801885e <strcat>

		itoa(sTime.Minutes, buf, 10);
 800383a:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 800383e:	4618      	mov	r0, r3
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	220a      	movs	r2, #10
 8003846:	4619      	mov	r1, r3
 8003848:	f014 f9ec 	bl	8017c24 <itoa>
		strcat(msg.Buf, ":");
 800384c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003850:	4618      	mov	r0, r3
 8003852:	f7fc fcbd 	bl	80001d0 <strlen>
 8003856:	4603      	mov	r3, r0
 8003858:	461a      	mov	r2, r3
 800385a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800385e:	4413      	add	r3, r2
 8003860:	4924      	ldr	r1, [pc, #144]	; (80038f4 <Start_RTC+0x274>)
 8003862:	461a      	mov	r2, r3
 8003864:	460b      	mov	r3, r1
 8003866:	881b      	ldrh	r3, [r3, #0]
 8003868:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 800386a:	f107 020c 	add.w	r2, r7, #12
 800386e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f014 fff2 	bl	801885e <strcat>

		itoa(sTime.Seconds, buf, 10);
 800387a:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 800387e:	4618      	mov	r0, r3
 8003880:	f107 030c 	add.w	r3, r7, #12
 8003884:	220a      	movs	r2, #10
 8003886:	4619      	mov	r1, r3
 8003888:	f014 f9cc 	bl	8017c24 <itoa>
		strcat(msg.Buf, ":");
 800388c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003890:	4618      	mov	r0, r3
 8003892:	f7fc fc9d 	bl	80001d0 <strlen>
 8003896:	4603      	mov	r3, r0
 8003898:	461a      	mov	r2, r3
 800389a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800389e:	4413      	add	r3, r2
 80038a0:	4914      	ldr	r1, [pc, #80]	; (80038f4 <Start_RTC+0x274>)
 80038a2:	461a      	mov	r2, r3
 80038a4:	460b      	mov	r3, r1
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 80038aa:	f107 020c 	add.w	r2, r7, #12
 80038ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f014 ffd2 	bl	801885e <strcat>

		strcat(msg.Buf, str_end_of_line);
 80038ba:	f107 0208 	add.w	r2, r7, #8
 80038be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f014 ffca 	bl	801885e <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 80038ca:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <Start_RTC+0x278>)
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d6:	2200      	movs	r2, #0
 80038d8:	f00f fea8 	bl	801362c <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 80038dc:	e6f6      	b.n	80036cc <Start_RTC+0x4c>
 80038de:	bf00      	nop
 80038e0:	40020c00 	.word	0x40020c00
 80038e4:	2000eee4 	.word	0x2000eee4
 80038e8:	0801adc0 	.word	0x0801adc0
 80038ec:	0801ade0 	.word	0x0801ade0
 80038f0:	0801ade4 	.word	0x0801ade4
 80038f4:	0801ade8 	.word	0x0801ade8
 80038f8:	2000adf4 	.word	0x2000adf4

080038fc <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 80038fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038fe:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003902:	af00      	add	r7, sp, #0
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003908:	f241 3088 	movw	r0, #5000	; 0x1388
 800390c:	f00f fcbc 	bl	8013288 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003910:	4a90      	ldr	r2, [pc, #576]	; (8003b54 <Start_Show_Resources+0x258>)
 8003912:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4611      	mov	r1, r2
 800391a:	8019      	strh	r1, [r3, #0]
 800391c:	3302      	adds	r3, #2
 800391e:	0c12      	lsrs	r2, r2, #16
 8003920:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003922:	232d      	movs	r3, #45	; 0x2d
 8003924:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 800392e:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003938:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800393c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003940:	2100      	movs	r1, #0
 8003942:	4618      	mov	r0, r3
 8003944:	f014 f992 	bl	8017c6c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003948:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800394c:	4618      	mov	r0, r3
 800394e:	f7fc fc3f 	bl	80001d0 <strlen>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800395a:	4413      	add	r3, r2
 800395c:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <Start_Show_Resources+0x25c>)
 800395e:	461d      	mov	r5, r3
 8003960:	4614      	mov	r4, r2
 8003962:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003964:	6028      	str	r0, [r5, #0]
 8003966:	6069      	str	r1, [r5, #4]
 8003968:	60aa      	str	r2, [r5, #8]
 800396a:	60eb      	str	r3, [r5, #12]
 800396c:	cc03      	ldmia	r4!, {r0, r1}
 800396e:	6128      	str	r0, [r5, #16]
 8003970:	6169      	str	r1, [r5, #20]
 8003972:	7823      	ldrb	r3, [r4, #0]
 8003974:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003976:	f013 fa2d 	bl	8016dd4 <xPortGetFreeHeapSize>
 800397a:	4603      	mov	r3, r0
 800397c:	461a      	mov	r2, r3
 800397e:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <Start_Show_Resources+0x260>)
 8003980:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <Start_Show_Resources+0x260>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 800398a:	220a      	movs	r2, #10
 800398c:	4618      	mov	r0, r3
 800398e:	f014 f949 	bl	8017c24 <itoa>
	  strcat(msg.Buf, buff);
 8003992:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8003996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f014 ff5e 	bl	801885e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 80039a2:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80039a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f014 ff56 	bl	801885e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 80039b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039b6:	4618      	mov	r0, r3
 80039b8:	f7fc fc0a 	bl	80001d0 <strlen>
 80039bc:	4603      	mov	r3, r0
 80039be:	461a      	mov	r2, r3
 80039c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039c4:	4413      	add	r3, r2
 80039c6:	4a66      	ldr	r2, [pc, #408]	; (8003b60 <Start_Show_Resources+0x264>)
 80039c8:	4614      	mov	r4, r2
 80039ca:	469c      	mov	ip, r3
 80039cc:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80039d0:	4665      	mov	r5, ip
 80039d2:	4626      	mov	r6, r4
 80039d4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80039d6:	6028      	str	r0, [r5, #0]
 80039d8:	6069      	str	r1, [r5, #4]
 80039da:	60aa      	str	r2, [r5, #8]
 80039dc:	60eb      	str	r3, [r5, #12]
 80039de:	3410      	adds	r4, #16
 80039e0:	f10c 0c10 	add.w	ip, ip, #16
 80039e4:	4574      	cmp	r4, lr
 80039e6:	d1f3      	bne.n	80039d0 <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 80039e8:	485e      	ldr	r0, [pc, #376]	; (8003b64 <Start_Show_Resources+0x268>)
 80039ea:	f012 f9a7 	bl	8015d3c <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 80039f4:	e004      	b.n	8003a00 <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 80039f6:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 80039fa:	3301      	adds	r3, #1
 80039fc:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8003a00:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003a04:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f3      	bne.n	80039f6 <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003a14:	2300      	movs	r3, #0
 8003a16:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003a1a:	e011      	b.n	8003a40 <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003a1c:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003a20:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003a24:	4413      	add	r3, r2
 8003a26:	494f      	ldr	r1, [pc, #316]	; (8003b64 <Start_Show_Resources+0x268>)
 8003a28:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003a2c:	440a      	add	r2, r1
 8003a2e:	7811      	ldrb	r1, [r2, #0]
 8003a30:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a34:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003a36:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003a40:	4a48      	ldr	r2, [pc, #288]	; (8003b64 <Start_Show_Resources+0x268>)
 8003a42:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003a46:	4413      	add	r3, r2
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e6      	bne.n	8003a1c <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003a4e:	4b46      	ldr	r3, [pc, #280]	; (8003b68 <Start_Show_Resources+0x26c>)
 8003a50:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8003a54:	461d      	mov	r5, r3
 8003a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003a5e:	c403      	stmia	r4!, {r0, r1}
 8003a60:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8003a62:	f107 030c 	add.w	r3, r7, #12
 8003a66:	4a41      	ldr	r2, [pc, #260]	; (8003b6c <Start_Show_Resources+0x270>)
 8003a68:	461c      	mov	r4, r3
 8003a6a:	4615      	mov	r5, r2
 8003a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a74:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a78:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8003a7c:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8003a80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a84:	4611      	mov	r1, r2
 8003a86:	4618      	mov	r0, r3
 8003a88:	f014 fee9 	bl	801885e <strcat>
	  strcat(msg.Buf, str_head_2);
 8003a8c:	f107 020c 	add.w	r2, r7, #12
 8003a90:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a94:	4611      	mov	r1, r2
 8003a96:	4618      	mov	r0, r3
 8003a98:	f014 fee1 	bl	801885e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8003a9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4830      	ldr	r0, [pc, #192]	; (8003b64 <Start_Show_Resources+0x268>)
 8003aa4:	f014 f8e2 	bl	8017c6c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8003aa8:	482e      	ldr	r0, [pc, #184]	; (8003b64 <Start_Show_Resources+0x268>)
 8003aaa:	f012 f9dd 	bl	8015e68 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8003aae:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003ab8:	4413      	add	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	3340      	adds	r3, #64	; 0x40
 8003abe:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003ac8:	e011      	b.n	8003aee <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003aca:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003ace:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4923      	ldr	r1, [pc, #140]	; (8003b64 <Start_Show_Resources+0x268>)
 8003ad6:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003ada:	440a      	add	r2, r1
 8003adc:	7811      	ldrb	r1, [r2, #0]
 8003ade:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ae2:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003ae4:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003ae8:	3301      	adds	r3, #1
 8003aea:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003aee:	4a1d      	ldr	r2, [pc, #116]	; (8003b64 <Start_Show_Resources+0x268>)
 8003af0:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8003afc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fc fb65 	bl	80001d0 <strlen>
 8003b06:	4603      	mov	r3, r0
 8003b08:	461a      	mov	r2, r3
 8003b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b0e:	4413      	add	r3, r2
 8003b10:	4a17      	ldr	r2, [pc, #92]	; (8003b70 <Start_Show_Resources+0x274>)
 8003b12:	4614      	mov	r4, r2
 8003b14:	469c      	mov	ip, r3
 8003b16:	f104 0e20 	add.w	lr, r4, #32
 8003b1a:	4665      	mov	r5, ip
 8003b1c:	4626      	mov	r6, r4
 8003b1e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b20:	6028      	str	r0, [r5, #0]
 8003b22:	6069      	str	r1, [r5, #4]
 8003b24:	60aa      	str	r2, [r5, #8]
 8003b26:	60eb      	str	r3, [r5, #12]
 8003b28:	3410      	adds	r4, #16
 8003b2a:	f10c 0c10 	add.w	ip, ip, #16
 8003b2e:	4574      	cmp	r4, lr
 8003b30:	d1f3      	bne.n	8003b1a <Start_Show_Resources+0x21e>
 8003b32:	4665      	mov	r5, ip
 8003b34:	4623      	mov	r3, r4
 8003b36:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b38:	6028      	str	r0, [r5, #0]
 8003b3a:	6069      	str	r1, [r5, #4]
 8003b3c:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003b3e:	4b0d      	ldr	r3, [pc, #52]	; (8003b74 <Start_Show_Resources+0x278>)
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f00f fd6e 	bl	801362c <osMessageQueuePut>
  {
 8003b50:	e6da      	b.n	8003908 <Start_Show_Resources+0xc>
 8003b52:	bf00      	nop
 8003b54:	0801ae68 	.word	0x0801ae68
 8003b58:	0801adec 	.word	0x0801adec
 8003b5c:	200027a0 	.word	0x200027a0
 8003b60:	0801ae08 	.word	0x0801ae08
 8003b64:	200023b8 	.word	0x200023b8
 8003b68:	0801ae6c 	.word	0x0801ae6c
 8003b6c:	0801ae88 	.word	0x0801ae88
 8003b70:	0801ae3c 	.word	0x0801ae3c
 8003b74:	2000adf4 	.word	0x2000adf4

08003b78 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	1d3b      	adds	r3, r7, #4
 8003b82:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8003b84:	4b12      	ldr	r3, [pc, #72]	; (8003bd0 <Start_UART_Task+0x58>)
 8003b86:	6818      	ldr	r0, [r3, #0]
 8003b88:	f107 010c 	add.w	r1, r7, #12
 8003b8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b90:	2200      	movs	r2, #0
 8003b92:	f00f fdab 	bl	80136ec <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003b9c:	e004      	b.n	8003ba8 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8003b9e:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003ba8:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003bac:	f107 020c 	add.w	r2, r7, #12
 8003bb0:	5cd3      	ldrb	r3, [r2, r3]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f3      	bne.n	8003b9e <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8003bb6:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8003bba:	f107 030c 	add.w	r3, r7, #12
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f013 fa8d 	bl	80170e0 <CDC_Transmit_FS>
    osDelay(1);
 8003bc6:	2001      	movs	r0, #1
 8003bc8:	f00f fb5e 	bl	8013288 <osDelay>
  {
 8003bcc:	e7da      	b.n	8003b84 <Start_UART_Task+0xc>
 8003bce:	bf00      	nop
 8003bd0:	2000adf4 	.word	0x2000adf4

08003bd4 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0a4      	sub	sp, #144	; 0x90
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	6078      	str	r0, [r7, #4]
	//QUEUE_t msg;												// Make a queue

	BME280QUEUE bme280_meg;
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	uint16_t addres_device = 0x76;  		 	// BME280
 8003be2:	2376      	movs	r3, #118	; 0x76
 8003be4:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t id_addr = 0xD0;
 8003be8:	23d0      	movs	r3, #208	; 0xd0
 8003bea:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint8_t id = 96;							// in hex form
 8003bee:	2360      	movs	r3, #96	; 0x60
 8003bf0:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8003bfa:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	b299      	uxth	r1, r3
 8003c02:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8003c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c0a:	9302      	str	r3, [sp, #8]
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	2301      	movs	r3, #1
 8003c18:	4895      	ldr	r0, [pc, #596]	; (8003e70 <Start_bme280+0x29c>)
 8003c1a:	f004 f8e1 	bl	8007de0 <HAL_I2C_Mem_Read>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8003c24:	4b93      	ldr	r3, [pc, #588]	; (8003e74 <Start_bme280+0x2a0>)
 8003c26:	2276      	movs	r2, #118	; 0x76
 8003c28:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8003c2a:	4b92      	ldr	r3, [pc, #584]	; (8003e74 <Start_bme280+0x2a0>)
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8003c30:	4b90      	ldr	r3, [pc, #576]	; (8003e74 <Start_bme280+0x2a0>)
 8003c32:	4a91      	ldr	r2, [pc, #580]	; (8003e78 <Start_bme280+0x2a4>)
 8003c34:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8003c36:	4b8f      	ldr	r3, [pc, #572]	; (8003e74 <Start_bme280+0x2a0>)
 8003c38:	4a90      	ldr	r2, [pc, #576]	; (8003e7c <Start_bme280+0x2a8>)
 8003c3a:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8003c3c:	4b8d      	ldr	r3, [pc, #564]	; (8003e74 <Start_bme280+0x2a0>)
 8003c3e:	4a90      	ldr	r2, [pc, #576]	; (8003e80 <Start_bme280+0x2ac>)
 8003c40:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8003c42:	488c      	ldr	r0, [pc, #560]	; (8003e74 <Start_bme280+0x2a0>)
 8003c44:	f001 f97a 	bl	8004f3c <bme280_init>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b8d      	ldr	r3, [pc, #564]	; (8003e84 <Start_bme280+0x2b0>)
 8003c4e:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003c50:	4b88      	ldr	r3, [pc, #544]	; (8003e74 <Start_bme280+0x2a0>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8003c58:	4b86      	ldr	r3, [pc, #536]	; (8003e74 <Start_bme280+0x2a0>)
 8003c5a:	2205      	movs	r2, #5
 8003c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003c60:	4b84      	ldr	r3, [pc, #528]	; (8003e74 <Start_bme280+0x2a0>)
 8003c62:	2202      	movs	r2, #2
 8003c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8003c68:	4b82      	ldr	r3, [pc, #520]	; (8003e74 <Start_bme280+0x2a0>)
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003c70:	4980      	ldr	r1, [pc, #512]	; (8003e74 <Start_bme280+0x2a0>)
 8003c72:	200f      	movs	r0, #15
 8003c74:	f001 fa54 	bl	8005120 <bme280_set_sensor_settings>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	4b81      	ldr	r3, [pc, #516]	; (8003e84 <Start_bme280+0x2b0>)
 8003c7e:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8003c80:	497c      	ldr	r1, [pc, #496]	; (8003e74 <Start_bme280+0x2a0>)
 8003c82:	2003      	movs	r0, #3
 8003c84:	f001 faa1 	bl	80051ca <bme280_set_sensor_mode>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	4b7d      	ldr	r3, [pc, #500]	; (8003e84 <Start_bme280+0x2b0>)
 8003c8e:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8003c90:	4b78      	ldr	r3, [pc, #480]	; (8003e74 <Start_bme280+0x2a0>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	2028      	movs	r0, #40	; 0x28
 8003c96:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8003c98:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c9c:	f00f faf4 	bl	8013288 <osDelay>

	  char str_t_h_and_p[60] = {0};
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	f107 0310 	add.w	r3, r7, #16
 8003ca8:	2238      	movs	r2, #56	; 0x38
 8003caa:	2100      	movs	r1, #0
 8003cac:	4618      	mov	r0, r3
 8003cae:	f013 ffdd 	bl	8017c6c <memset>
	  char str_thp_buffer[12] = {0};
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]

	//  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
	  memset(bme280_meg.bme280_temperature_and_humidity, 0, sizeof(bme280_meg.bme280_temperature_and_humidity));								// Fill in buff '\0'
 8003cc0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003cc4:	2214      	movs	r2, #20
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f013 ffcf 	bl	8017c6c <memset>

	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 8003cce:	4a69      	ldr	r2, [pc, #420]	; (8003e74 <Start_bme280+0x2a0>)
 8003cd0:	496d      	ldr	r1, [pc, #436]	; (8003e88 <Start_bme280+0x2b4>)
 8003cd2:	2007      	movs	r0, #7
 8003cd4:	f001 faf5 	bl	80052c2 <bme280_get_sensor_data>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <Start_bme280+0x2b0>)
 8003cde:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8003ce0:	4b68      	ldr	r3, [pc, #416]	; (8003e84 <Start_bme280+0x2b0>)
 8003ce2:	f993 3000 	ldrsb.w	r3, [r3]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f040 80a5 	bne.w	8003e36 <Start_bme280+0x262>
	  {
	  		// Save data variables
	  		int BME280_temperature = comp_data.temperature;
 8003cec:	4b66      	ldr	r3, [pc, #408]	; (8003e88 <Start_bme280+0x2b4>)
 8003cee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f7fc ff2f 	bl	8000b58 <__aeabi_d2iz>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	677b      	str	r3, [r7, #116]	; 0x74
	  		int BME280_humidity = comp_data.humidity;
 8003cfe:	4b62      	ldr	r3, [pc, #392]	; (8003e88 <Start_bme280+0x2b4>)
 8003d00:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	f7fc ff26 	bl	8000b58 <__aeabi_d2iz>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	673b      	str	r3, [r7, #112]	; 0x70
	  		int BME280_preasure = comp_data.pressure;
 8003d10:	4b5d      	ldr	r3, [pc, #372]	; (8003e88 <Start_bme280+0x2b4>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc ff1d 	bl	8000b58 <__aeabi_d2iz>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	66fb      	str	r3, [r7, #108]	; 0x6c

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
//	  		strcat(str_t_h_and_p, "      BME280: \n\r");
	  		strcat(str_t_h_and_p, "T");
 8003d22:	f107 030c 	add.w	r3, r7, #12
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fa52 	bl	80001d0 <strlen>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f107 030c 	add.w	r3, r7, #12
 8003d34:	4413      	add	r3, r2
 8003d36:	4955      	ldr	r1, [pc, #340]	; (8003e8c <Start_bme280+0x2b8>)
 8003d38:	461a      	mov	r2, r3
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_temperature);
 8003d40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d44:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003d46:	4952      	ldr	r1, [pc, #328]	; (8003e90 <Start_bme280+0x2bc>)
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f014 fd25 	bl	8018798 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003d4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d52:	f107 030c 	add.w	r3, r7, #12
 8003d56:	4611      	mov	r1, r2
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f014 fd80 	bl	801885e <strcat>
	  		strcat(str_t_h_and_p, "C ");
 8003d5e:	f107 030c 	add.w	r3, r7, #12
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fc fa34 	bl	80001d0 <strlen>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	4413      	add	r3, r2
 8003d72:	4a48      	ldr	r2, [pc, #288]	; (8003e94 <Start_bme280+0x2c0>)
 8003d74:	8811      	ldrh	r1, [r2, #0]
 8003d76:	7892      	ldrb	r2, [r2, #2]
 8003d78:	8019      	strh	r1, [r3, #0]
 8003d7a:	709a      	strb	r2, [r3, #2]

	  		// Write HUMIDYTY
	  		// memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
	  		strcat(str_t_h_and_p, "H");
 8003d7c:	f107 030c 	add.w	r3, r7, #12
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fc fa25 	bl	80001d0 <strlen>
 8003d86:	4603      	mov	r3, r0
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f107 030c 	add.w	r3, r7, #12
 8003d8e:	4413      	add	r3, r2
 8003d90:	4941      	ldr	r1, [pc, #260]	; (8003e98 <Start_bme280+0x2c4>)
 8003d92:	461a      	mov	r2, r3
 8003d94:	460b      	mov	r3, r1
 8003d96:	881b      	ldrh	r3, [r3, #0]
 8003d98:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_humidity);
 8003d9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003da0:	493b      	ldr	r1, [pc, #236]	; (8003e90 <Start_bme280+0x2bc>)
 8003da2:	4618      	mov	r0, r3
 8003da4:	f014 fcf8 	bl	8018798 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003da8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f014 fd53 	bl	801885e <strcat>
	  		strcat(str_t_h_and_p, "% ");
 8003db8:	f107 030c 	add.w	r3, r7, #12
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fc fa07 	bl	80001d0 <strlen>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f107 030c 	add.w	r3, r7, #12
 8003dca:	4413      	add	r3, r2
 8003dcc:	4a33      	ldr	r2, [pc, #204]	; (8003e9c <Start_bme280+0x2c8>)
 8003dce:	8811      	ldrh	r1, [r2, #0]
 8003dd0:	7892      	ldrb	r2, [r2, #2]
 8003dd2:	8019      	strh	r1, [r3, #0]
 8003dd4:	709a      	strb	r2, [r3, #2]

	  		// Write PRERASURE
	  		//memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
	  		strcat(str_t_h_and_p, "P");
 8003dd6:	f107 030c 	add.w	r3, r7, #12
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc f9f8 	bl	80001d0 <strlen>
 8003de0:	4603      	mov	r3, r0
 8003de2:	461a      	mov	r2, r3
 8003de4:	f107 030c 	add.w	r3, r7, #12
 8003de8:	4413      	add	r3, r2
 8003dea:	492d      	ldr	r1, [pc, #180]	; (8003ea0 <Start_bme280+0x2cc>)
 8003dec:	461a      	mov	r2, r3
 8003dee:	460b      	mov	r3, r1
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_preasure);
 8003df4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003df8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003dfa:	4925      	ldr	r1, [pc, #148]	; (8003e90 <Start_bme280+0x2bc>)
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f014 fccb 	bl	8018798 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003e02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e06:	f107 030c 	add.w	r3, r7, #12
 8003e0a:	4611      	mov	r1, r2
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f014 fd26 	bl	801885e <strcat>
	  		//strcat(str_t_h_and_p, " mm\n\r\0");

//	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
//	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)

	  		strcat(bme280_meg.bme280_temperature_and_humidity, str_t_h_and_p);
 8003e12:	f107 020c 	add.w	r2, r7, #12
 8003e16:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f014 fd1e 	bl	801885e <strcat>
	  		osMessageQueuePut(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 8003e22:	4b20      	ldr	r3, [pc, #128]	; (8003ea4 <Start_bme280+0x2d0>)
 8003e24:	6818      	ldr	r0, [r3, #0]
 8003e26:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f00f fbfc 	bl	801362c <osMessageQueuePut>
 8003e34:	e730      	b.n	8003c98 <Start_bme280+0xc4>
	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!!");
 8003e36:	f107 030c 	add.w	r3, r7, #12
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fc f9c8 	bl	80001d0 <strlen>
 8003e40:	4603      	mov	r3, r0
 8003e42:	461a      	mov	r2, r3
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	4413      	add	r3, r2
 8003e4a:	4917      	ldr	r1, [pc, #92]	; (8003ea8 <Start_bme280+0x2d4>)
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	460b      	mov	r3, r1
 8003e50:	cb03      	ldmia	r3!, {r0, r1}
 8003e52:	6010      	str	r0, [r2, #0]
 8003e54:	6051      	str	r1, [r2, #4]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	7213      	strb	r3, [r2, #8]
		  osMessageQueuePut(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <Start_bme280+0x2d0>)
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e66:	2200      	movs	r2, #0
 8003e68:	f00f fbe0 	bl	801362c <osMessageQueuePut>
  {
 8003e6c:	e714      	b.n	8003c98 <Start_bme280+0xc4>
 8003e6e:	bf00      	nop
 8003e70:	20009924 	.word	0x20009924
 8003e74:	200098e4 	.word	0x200098e4
 8003e78:	08002a25 	.word	0x08002a25
 8003e7c:	08002aad 	.word	0x08002aad
 8003e80:	08002a95 	.word	0x08002a95
 8003e84:	2000a308 	.word	0x2000a308
 8003e88:	2000a310 	.word	0x2000a310
 8003e8c:	0801aeb0 	.word	0x0801aeb0
 8003e90:	0801aeb4 	.word	0x0801aeb4
 8003e94:	0801aeb8 	.word	0x0801aeb8
 8003e98:	0801aebc 	.word	0x0801aebc
 8003e9c:	0801aec0 	.word	0x0801aec0
 8003ea0:	0801aec4 	.word	0x0801aec4
 8003ea4:	2000de10 	.word	0x2000de10
 8003ea8:	0801aec8 	.word	0x0801aec8

08003eac <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 8003eac:	b5b0      	push	{r4, r5, r7, lr}
 8003eae:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003eb8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ebc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f013 fed2 	bl	8017c6c <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8003ec8:	4b48      	ldr	r3, [pc, #288]	; (8003fec <Start_AM2302+0x140>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a47      	ldr	r2, [pc, #284]	; (8003fec <Start_AM2302+0x140>)
 8003ece:	f043 0304 	orr.w	r3, r3, #4
 8003ed2:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8003ed4:	4b45      	ldr	r3, [pc, #276]	; (8003fec <Start_AM2302+0x140>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a44      	ldr	r2, [pc, #272]	; (8003fec <Start_AM2302+0x140>)
 8003eda:	f023 0302 	bic.w	r3, r3, #2
 8003ede:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8003ee0:	4b42      	ldr	r3, [pc, #264]	; (8003fec <Start_AM2302+0x140>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a41      	ldr	r2, [pc, #260]	; (8003fec <Start_AM2302+0x140>)
 8003ee6:	f043 0302 	orr.w	r3, r3, #2
 8003eea:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8003eec:	4b3f      	ldr	r3, [pc, #252]	; (8003fec <Start_AM2302+0x140>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	4a3e      	ldr	r2, [pc, #248]	; (8003fec <Start_AM2302+0x140>)
 8003ef2:	f083 0302 	eor.w	r3, r3, #2
 8003ef6:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 8003ef8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003efc:	f00f f9c4 	bl	8013288 <osDelay>

  for(;;)
  {
	  osDelay(3500);			// Measure every 3 seconds
 8003f00:	f640 50ac 	movw	r0, #3500	; 0xdac
 8003f04:	f00f f9c0 	bl	8013288 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	int j = 0;   							// Counter bytes
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  	int i = 0;								// Counter bits
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8003f1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f1e:	2200      	movs	r2, #0
 8003f20:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8003f22:	4b32      	ldr	r3, [pc, #200]	; (8003fec <Start_AM2302+0x140>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a31      	ldr	r2, [pc, #196]	; (8003fec <Start_AM2302+0x140>)
 8003f28:	f043 0304 	orr.w	r3, r3, #4
 8003f2c:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8003f2e:	4b2f      	ldr	r3, [pc, #188]	; (8003fec <Start_AM2302+0x140>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4a2e      	ldr	r2, [pc, #184]	; (8003fec <Start_AM2302+0x140>)
 8003f34:	f023 0302 	bic.w	r3, r3, #2
 8003f38:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8003f3a:	4b2c      	ldr	r3, [pc, #176]	; (8003fec <Start_AM2302+0x140>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <Start_AM2302+0x140>)
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 8003f46:	4b29      	ldr	r3, [pc, #164]	; (8003fec <Start_AM2302+0x140>)
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	4a28      	ldr	r2, [pc, #160]	; (8003fec <Start_AM2302+0x140>)
 8003f4c:	f023 0302 	bic.w	r3, r3, #2
 8003f50:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 8003f52:	2012      	movs	r0, #18
 8003f54:	f00f f998 	bl	8013288 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 8003f58:	4b24      	ldr	r3, [pc, #144]	; (8003fec <Start_AM2302+0x140>)
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	; (8003fec <Start_AM2302+0x140>)
 8003f5e:	f083 0302 	eor.w	r3, r3, #2
 8003f62:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 8003f64:	2028      	movs	r0, #40	; 0x28
 8003f66:	f7fe fddd 	bl	8002b24 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 8003f6a:	4b20      	ldr	r3, [pc, #128]	; (8003fec <Start_AM2302+0x140>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a1f      	ldr	r2, [pc, #124]	; (8003fec <Start_AM2302+0x140>)
 8003f70:	f023 0304 	bic.w	r3, r3, #4
 8003f74:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8003f76:	4b1d      	ldr	r3, [pc, #116]	; (8003fec <Start_AM2302+0x140>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <Start_AM2302+0x140>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8003f82:	4b1a      	ldr	r3, [pc, #104]	; (8003fec <Start_AM2302+0x140>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8003f94:	e002      	b.n	8003f9c <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}

	  	delay_us(80);
 8003f9c:	2050      	movs	r0, #80	; 0x50
 8003f9e:	f7fe fdc1 	bl	8002b24 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <Start_AM2302+0x140>)
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8003fae:	2300      	movs	r3, #0
 8003fb0:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8003fb4:	e002      	b.n	8003fbc <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}
	  	delay_us(80);
 8003fbc:	2050      	movs	r0, #80	; 0x50
 8003fbe:	f7fe fdb1 	bl	8002b24 <delay_us>

	  	if(get_data_status == true)
 8003fc2:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d09a      	beq.n	8003f00 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003fd0:	e050      	b.n	8004074 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 8003fd2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003fd6:	f1c3 0304 	rsb	r3, r3, #4
 8003fda:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8003fde:	2100      	movs	r1, #0
 8003fe0:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8003fe8:	e038      	b.n	800405c <Start_AM2302+0x1b0>
 8003fea:	bf00      	nop
 8003fec:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8003ff0:	bf00      	nop
 8003ff2:	4b94      	ldr	r3, [pc, #592]	; (8004244 <Start_AM2302+0x398>)
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f9      	beq.n	8003ff2 <Start_AM2302+0x146>
	  				delay_us(30);
 8003ffe:	201e      	movs	r0, #30
 8004000:	f7fe fd90 	bl	8002b24 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8004004:	4b8f      	ldr	r3, [pc, #572]	; (8004244 <Start_AM2302+0x398>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d019      	beq.n	8004044 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8004010:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004014:	f1c3 0304 	rsb	r3, r3, #4
 8004018:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800401c:	5cd3      	ldrb	r3, [r2, r3]
 800401e:	b25a      	sxtb	r2, r3
 8004020:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8004024:	f1c3 0307 	rsb	r3, r3, #7
 8004028:	2101      	movs	r1, #1
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	b25b      	sxtb	r3, r3
 8004030:	4313      	orrs	r3, r2
 8004032:	b25a      	sxtb	r2, r3
 8004034:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004038:	f1c3 0304 	rsb	r3, r3, #4
 800403c:	b2d1      	uxtb	r1, r2
 800403e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004042:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8004044:	bf00      	nop
 8004046:	4b7f      	ldr	r3, [pc, #508]	; (8004244 <Start_AM2302+0x398>)
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f9      	bne.n	8004046 <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004052:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8004056:	3301      	adds	r3, #1
 8004058:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800405c:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8004060:	2b07      	cmp	r3, #7
 8004062:	ddc5      	ble.n	8003ff0 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 8004064:	2301      	movs	r3, #1
 8004066:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 800406a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800406e:	3301      	adds	r3, #1
 8004070:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8004074:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004078:	2b04      	cmp	r3, #4
 800407a:	ddaa      	ble.n	8003fd2 <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 800407c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004080:	3301      	adds	r3, #1
 8004082:	881b      	ldrh	r3, [r3, #0]
 8004084:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004088:	ee07 3a90 	vmov	s15, r3
 800408c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004090:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004094:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004098:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800409c:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80040a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040a4:	3301      	adds	r3, #1
 80040a6:	881b      	ldrh	r3, [r3, #0]
 80040a8:	b21b      	sxth	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	da13      	bge.n	80040d6 <Start_AM2302+0x22a>
 80040ae:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	f7fc fa48 	bl	8000548 <__aeabi_f2d>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	f7fc fd92 	bl	8000be8 <__aeabi_d2f>
 80040c4:	4603      	mov	r3, r0
 80040c6:	ee07 3a90 	vmov	s15, r3
 80040ca:	eef1 7a67 	vneg.f32	s15, s15
 80040ce:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80040d2:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 80040d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040da:	3303      	adds	r3, #3
 80040dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e0:	ee07 3a90 	vmov	s15, r3
 80040e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040e8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80040ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040f0:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80040f4:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[60] = {0};
 80040f8:	f107 0308 	add.w	r3, r7, #8
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	3304      	adds	r3, #4
 8004102:	2238      	movs	r2, #56	; 0x38
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f013 fdb0 	bl	8017c6c <memset>
	  		char str_t_and_h_buffer[12] = {0};
 800410c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 800411c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f013 fda0 	bl	8017c6c <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "     AM2302: \n\r");
 800412c:	f107 0308 	add.w	r3, r7, #8
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc f84d 	bl	80001d0 <strlen>
 8004136:	4603      	mov	r3, r0
 8004138:	461a      	mov	r2, r3
 800413a:	f107 0308 	add.w	r3, r7, #8
 800413e:	4413      	add	r3, r2
 8004140:	4a41      	ldr	r2, [pc, #260]	; (8004248 <Start_AM2302+0x39c>)
 8004142:	461c      	mov	r4, r3
 8004144:	4615      	mov	r5, r2
 8004146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004148:	6020      	str	r0, [r4, #0]
 800414a:	6061      	str	r1, [r4, #4]
 800414c:	60a2      	str	r2, [r4, #8]
 800414e:	60e3      	str	r3, [r4, #12]
	  		strcat(str_t_and_h, "T: ");
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	4618      	mov	r0, r3
 8004156:	f7fc f83b 	bl	80001d0 <strlen>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	f107 0308 	add.w	r3, r7, #8
 8004162:	4413      	add	r3, r2
 8004164:	4a39      	ldr	r2, [pc, #228]	; (800424c <Start_AM2302+0x3a0>)
 8004166:	6810      	ldr	r0, [r2, #0]
 8004168:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 800416a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	f7fc f9ea 	bl	8000548 <__aeabi_f2d>
 8004174:	4602      	mov	r2, r0
 8004176:	460b      	mov	r3, r1
 8004178:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800417c:	4934      	ldr	r1, [pc, #208]	; (8004250 <Start_AM2302+0x3a4>)
 800417e:	f014 fb0b 	bl	8018798 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004182:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004186:	f107 0308 	add.w	r3, r7, #8
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f014 fb66 	bl	801885e <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 8004192:	f107 0308 	add.w	r3, r7, #8
 8004196:	4618      	mov	r0, r3
 8004198:	f7fc f81a 	bl	80001d0 <strlen>
 800419c:	4603      	mov	r3, r0
 800419e:	461a      	mov	r2, r3
 80041a0:	f107 0308 	add.w	r3, r7, #8
 80041a4:	4413      	add	r3, r2
 80041a6:	4a2b      	ldr	r2, [pc, #172]	; (8004254 <Start_AM2302+0x3a8>)
 80041a8:	6810      	ldr	r0, [r2, #0]
 80041aa:	6018      	str	r0, [r3, #0]
 80041ac:	7912      	ldrb	r2, [r2, #4]
 80041ae:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 80041b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80041b4:	220c      	movs	r2, #12
 80041b6:	2100      	movs	r1, #0
 80041b8:	4618      	mov	r0, r3
 80041ba:	f013 fd57 	bl	8017c6c <memset>

	  		strcat(str_t_and_h, "H: ");
 80041be:	f107 0308 	add.w	r3, r7, #8
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f804 	bl	80001d0 <strlen>
 80041c8:	4603      	mov	r3, r0
 80041ca:	461a      	mov	r2, r3
 80041cc:	f107 0308 	add.w	r3, r7, #8
 80041d0:	4413      	add	r3, r2
 80041d2:	4a21      	ldr	r2, [pc, #132]	; (8004258 <Start_AM2302+0x3ac>)
 80041d4:	6810      	ldr	r0, [r2, #0]
 80041d6:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 80041d8:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80041dc:	6818      	ldr	r0, [r3, #0]
 80041de:	f7fc f9b3 	bl	8000548 <__aeabi_f2d>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80041ea:	4919      	ldr	r1, [pc, #100]	; (8004250 <Start_AM2302+0x3a4>)
 80041ec:	f014 fad4 	bl	8018798 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80041f0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80041f4:	f107 0308 	add.w	r3, r7, #8
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f014 fb2f 	bl	801885e <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004200:	f107 0308 	add.w	r3, r7, #8
 8004204:	4618      	mov	r0, r3
 8004206:	f7fb ffe3 	bl	80001d0 <strlen>
 800420a:	4603      	mov	r3, r0
 800420c:	461a      	mov	r2, r3
 800420e:	f107 0308 	add.w	r3, r7, #8
 8004212:	4413      	add	r3, r2
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <Start_AM2302+0x3b0>)
 8004216:	6810      	ldr	r0, [r2, #0]
 8004218:	6018      	str	r0, [r3, #0]
 800421a:	7912      	ldrb	r2, [r2, #4]
 800421c:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 800421e:	f107 0208 	add.w	r2, r7, #8
 8004222:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004226:	4611      	mov	r1, r2
 8004228:	4618      	mov	r0, r3
 800422a:	f014 fb18 	bl	801885e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 800422e:	4b0c      	ldr	r3, [pc, #48]	; (8004260 <Start_AM2302+0x3b4>)
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800423a:	2200      	movs	r2, #0
 800423c:	f00f f9f6 	bl	801362c <osMessageQueuePut>
  {
 8004240:	e65e      	b.n	8003f00 <Start_AM2302+0x54>
 8004242:	bf00      	nop
 8004244:	40020800 	.word	0x40020800
 8004248:	0801aed4 	.word	0x0801aed4
 800424c:	0801aee4 	.word	0x0801aee4
 8004250:	0801aee8 	.word	0x0801aee8
 8004254:	0801aeec 	.word	0x0801aeec
 8004258:	0801aef4 	.word	0x0801aef4
 800425c:	0801aef8 	.word	0x0801aef8
 8004260:	2000adf4 	.word	0x2000adf4

08004264 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	osDelay(1000);
 800426c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004270:	f00f f80a 	bl	8013288 <osDelay>
	Mount_SD("/");
 8004274:	4823      	ldr	r0, [pc, #140]	; (8004304 <Start_SD_CARD+0xa0>)
 8004276:	f7fd fd21 	bl	8001cbc <Mount_SD>

	Create_File("test_data_1.txt");
 800427a:	4823      	ldr	r0, [pc, #140]	; (8004308 <Start_SD_CARD+0xa4>)
 800427c:	f7fd fd64 	bl	8001d48 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 8004280:	4922      	ldr	r1, [pc, #136]	; (800430c <Start_SD_CARD+0xa8>)
 8004282:	4821      	ldr	r0, [pc, #132]	; (8004308 <Start_SD_CARD+0xa4>)
 8004284:	f7fd fdf6 	bl	8001e74 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 8004288:	4821      	ldr	r0, [pc, #132]	; (8004310 <Start_SD_CARD+0xac>)
 800428a:	f7fd feb3 	bl	8001ff4 <Create_Dir>
	Create_Dir("test_folder_2");
 800428e:	4821      	ldr	r0, [pc, #132]	; (8004314 <Start_SD_CARD+0xb0>)
 8004290:	f7fd feb0 	bl	8001ff4 <Create_Dir>
	Create_Dir("test_folder_3");
 8004294:	4820      	ldr	r0, [pc, #128]	; (8004318 <Start_SD_CARD+0xb4>)
 8004296:	f7fd fead 	bl	8001ff4 <Create_Dir>

	Unmount_SD("/");
 800429a:	481a      	ldr	r0, [pc, #104]	; (8004304 <Start_SD_CARD+0xa0>)
 800429c:	f7fd fd32 	bl	8001d04 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 80042a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a4:	f00e fff0 	bl	8013288 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 80042a8:	2201      	movs	r2, #1
 80042aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042ae:	481b      	ldr	r0, [pc, #108]	; (800431c <Start_SD_CARD+0xb8>)
 80042b0:	f003 f914 	bl	80074dc <HAL_GPIO_WritePin>

	  Mount_SD("/");
 80042b4:	4813      	ldr	r0, [pc, #76]	; (8004304 <Start_SD_CARD+0xa0>)
 80042b6:	f7fd fd01 	bl	8001cbc <Mount_SD>

	  char data[10] = {0};
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	f107 0310 	add.w	r3, r7, #16
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 80042c8:	4b15      	ldr	r3, [pc, #84]	; (8004320 <Start_SD_CARD+0xbc>)
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	f107 030c 	add.w	r3, r7, #12
 80042d0:	4914      	ldr	r1, [pc, #80]	; (8004324 <Start_SD_CARD+0xc0>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f014 fa60 	bl	8018798 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 80042d8:	f107 030c 	add.w	r3, r7, #12
 80042dc:	4619      	mov	r1, r3
 80042de:	480a      	ldr	r0, [pc, #40]	; (8004308 <Start_SD_CARD+0xa4>)
 80042e0:	f7fd fdc8 	bl	8001e74 <Update_File>
	  i++;
 80042e4:	4b0e      	ldr	r3, [pc, #56]	; (8004320 <Start_SD_CARD+0xbc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3301      	adds	r3, #1
 80042ea:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <Start_SD_CARD+0xbc>)
 80042ec:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 80042ee:	4805      	ldr	r0, [pc, #20]	; (8004304 <Start_SD_CARD+0xa0>)
 80042f0:	f7fd fd08 	bl	8001d04 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 80042f4:	2200      	movs	r2, #0
 80042f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042fa:	4808      	ldr	r0, [pc, #32]	; (800431c <Start_SD_CARD+0xb8>)
 80042fc:	f003 f8ee 	bl	80074dc <HAL_GPIO_WritePin>
  {
 8004300:	e7ce      	b.n	80042a0 <Start_SD_CARD+0x3c>
 8004302:	bf00      	nop
 8004304:	0801af00 	.word	0x0801af00
 8004308:	0801af04 	.word	0x0801af04
 800430c:	0801af14 	.word	0x0801af14
 8004310:	0801af28 	.word	0x0801af28
 8004314:	0801af38 	.word	0x0801af38
 8004318:	0801af48 	.word	0x0801af48
 800431c:	40020c00 	.word	0x40020c00
 8004320:	200027ac 	.word	0x200027ac
 8004324:	0801af58 	.word	0x0801af58

08004328 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */
	BME280QUEUE bme280_meg;

	// Init LCD
	TFT9341_ini(240, 320);
 8004330:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004334:	20f0      	movs	r0, #240	; 0xf0
 8004336:	f7fc fff7 	bl	8001328 <TFT9341_ini>
	TFT9341_SetRotation(3);
 800433a:	2003      	movs	r0, #3
 800433c:	f7fd fc6a 	bl	8001c14 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 8004340:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004344:	f7fd fa50 	bl	80017e8 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 8004348:	201f      	movs	r0, #31
 800434a:	f7fd fa5d 	bl	8001808 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 800434e:	201f      	movs	r0, #31
 8004350:	f7fd f9b8 	bl	80016c4 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "1.RTC ");
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <Start_LCD+0xc0>)
 8004356:	211e      	movs	r1, #30
 8004358:	2002      	movs	r0, #2
 800435a:	f7fd fc37 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,45, "2.AM2302");
 800435e:	4a23      	ldr	r2, [pc, #140]	; (80043ec <Start_LCD+0xc4>)
 8004360:	212d      	movs	r1, #45	; 0x2d
 8004362:	2002      	movs	r0, #2
 8004364:	f7fd fc32 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,60, "3.BME280");
 8004368:	4a21      	ldr	r2, [pc, #132]	; (80043f0 <Start_LCD+0xc8>)
 800436a:	213c      	movs	r1, #60	; 0x3c
 800436c:	2002      	movs	r0, #2
 800436e:	f7fd fc2d 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,75, "4.MPU6060 A");
 8004372:	4a20      	ldr	r2, [pc, #128]	; (80043f4 <Start_LCD+0xcc>)
 8004374:	214b      	movs	r1, #75	; 0x4b
 8004376:	2002      	movs	r0, #2
 8004378:	f7fd fc28 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,90, "5.MPU6060 G");
 800437c:	4a1e      	ldr	r2, [pc, #120]	; (80043f8 <Start_LCD+0xd0>)
 800437e:	215a      	movs	r1, #90	; 0x5a
 8004380:	2002      	movs	r0, #2
 8004382:	f7fd fc23 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,105, "6.MPU6060 T");
 8004386:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <Start_LCD+0xd4>)
 8004388:	2169      	movs	r1, #105	; 0x69
 800438a:	2002      	movs	r0, #2
 800438c:	f7fd fc1e 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,120, "7.L883");
 8004390:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <Start_LCD+0xd8>)
 8004392:	2178      	movs	r1, #120	; 0x78
 8004394:	2002      	movs	r0, #2
 8004396:	f7fd fc19 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,135, "8.BMP180");
 800439a:	4a1a      	ldr	r2, [pc, #104]	; (8004404 <Start_LCD+0xdc>)
 800439c:	2187      	movs	r1, #135	; 0x87
 800439e:	2002      	movs	r0, #2
 80043a0:	f7fd fc14 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,150, "8.APDS9960");
 80043a4:	4a18      	ldr	r2, [pc, #96]	; (8004408 <Start_LCD+0xe0>)
 80043a6:	2196      	movs	r1, #150	; 0x96
 80043a8:	2002      	movs	r0, #2
 80043aa:	f7fd fc0f 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,165, "9.ADC");
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <Start_LCD+0xe4>)
 80043b0:	21a5      	movs	r1, #165	; 0xa5
 80043b2:	2002      	movs	r0, #2
 80043b4:	f7fd fc0a 	bl	8001bcc <TFT9341_String_DMA>
	for(;;)
	{


		// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
		osMessageQueueGet(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 80043b8:	4b15      	ldr	r3, [pc, #84]	; (8004410 <Start_LCD+0xe8>)
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	f107 0108 	add.w	r1, r7, #8
 80043c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c4:	2200      	movs	r2, #0
 80043c6:	f00f f991 	bl	80136ec <osMessageQueueGet>
		TFT9341_String(140, 60, bme280_meg.bme280_temperature_and_humidity);
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	461a      	mov	r2, r3
 80043d0:	213c      	movs	r1, #60	; 0x3c
 80043d2:	208c      	movs	r0, #140	; 0x8c
 80043d4:	f7fd fbd6 	bl	8001b84 <TFT9341_String>

		int gggg = 999;
 80043d8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80043dc:	61fb      	str	r3, [r7, #28]


		osDelay(100);
 80043de:	2064      	movs	r0, #100	; 0x64
 80043e0:	f00e ff52 	bl	8013288 <osDelay>
	{
 80043e4:	e7e8      	b.n	80043b8 <Start_LCD+0x90>
 80043e6:	bf00      	nop
 80043e8:	0801af5c 	.word	0x0801af5c
 80043ec:	0801af64 	.word	0x0801af64
 80043f0:	0801af70 	.word	0x0801af70
 80043f4:	0801af7c 	.word	0x0801af7c
 80043f8:	0801af88 	.word	0x0801af88
 80043fc:	0801af94 	.word	0x0801af94
 8004400:	0801afa0 	.word	0x0801afa0
 8004404:	0801afa8 	.word	0x0801afa8
 8004408:	0801afb4 	.word	0x0801afb4
 800440c:	0801afc0 	.word	0x0801afc0
 8004410:	2000de10 	.word	0x2000de10

08004414 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8004414:	b5b0      	push	{r4, r5, r7, lr}
 8004416:	b0b2      	sub	sp, #200	; 0xc8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 800441c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004420:	2264      	movs	r2, #100	; 0x64
 8004422:	2100      	movs	r1, #0
 8004424:	4618      	mov	r0, r3
 8004426:	f013 fc21 	bl	8017c6c <memset>
	char buffer[50] = {0};
 800442a:	2300      	movs	r3, #0
 800442c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004432:	222e      	movs	r2, #46	; 0x2e
 8004434:	2100      	movs	r1, #0
 8004436:	4618      	mov	r0, r3
 8004438:	f013 fc18 	bl	8017c6c <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 800443c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004440:	2264      	movs	r2, #100	; 0x64
 8004442:	2100      	movs	r1, #0
 8004444:	4618      	mov	r0, r3
 8004446:	f013 fc11 	bl	8017c6c <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 800444a:	f7fc fed7 	bl	80011fc <TP_Touchpad_Pressed>
 800444e:	4603      	mov	r3, r0
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 8091 	bne.w	8004578 <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 8004456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445a:	4618      	mov	r0, r3
 800445c:	f7fb feb8 	bl	80001d0 <strlen>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004468:	4413      	add	r3, r2
 800446a:	495e      	ldr	r1, [pc, #376]	; (80045e4 <Start_LCD_touchscreen+0x1d0>)
 800446c:	461a      	mov	r2, r3
 800446e:	460b      	mov	r3, r1
 8004470:	cb03      	ldmia	r3!, {r0, r1}
 8004472:	6010      	str	r0, [r2, #0]
 8004474:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 8004476:	2300      	movs	r3, #0
 8004478:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 800447a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800447e:	4618      	mov	r0, r3
 8004480:	f7fc fde6 	bl	8001050 <TP_Read_Coordinates>
 8004484:	4603      	mov	r3, r0
 8004486:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 800448a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800448e:	2b01      	cmp	r3, #1
 8004490:	f040 808c 	bne.w	80045ac <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	2300      	movs	r3, #0
 800449a:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	2300      	movs	r3, #0
 80044a2:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
 80044b0:	605a      	str	r2, [r3, #4]
 80044b2:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 80044b6:	f107 0320 	add.w	r3, r7, #32
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fb fe88 	bl	80001d0 <strlen>
 80044c0:	4603      	mov	r3, r0
 80044c2:	461a      	mov	r2, r3
 80044c4:	f107 0320 	add.w	r3, r7, #32
 80044c8:	4413      	add	r3, r2
 80044ca:	4a47      	ldr	r2, [pc, #284]	; (80045e8 <Start_LCD_touchscreen+0x1d4>)
 80044cc:	6810      	ldr	r0, [r2, #0]
 80044ce:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 80044d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80044d2:	4618      	mov	r0, r3
 80044d4:	f107 0320 	add.w	r3, r7, #32
 80044d8:	220a      	movs	r2, #10
 80044da:	4619      	mov	r1, r3
 80044dc:	f013 fba2 	bl	8017c24 <itoa>
			  strcat(buff_x_coordinates, " ");
 80044e0:	f107 0320 	add.w	r3, r7, #32
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7fb fe73 	bl	80001d0 <strlen>
 80044ea:	4603      	mov	r3, r0
 80044ec:	461a      	mov	r2, r3
 80044ee:	f107 0320 	add.w	r3, r7, #32
 80044f2:	4413      	add	r3, r2
 80044f4:	493d      	ldr	r1, [pc, #244]	; (80045ec <Start_LCD_touchscreen+0x1d8>)
 80044f6:	461a      	mov	r2, r3
 80044f8:	460b      	mov	r3, r1
 80044fa:	881b      	ldrh	r3, [r3, #0]
 80044fc:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 80044fe:	f107 0318 	add.w	r3, r7, #24
 8004502:	4618      	mov	r0, r3
 8004504:	f7fb fe64 	bl	80001d0 <strlen>
 8004508:	4603      	mov	r3, r0
 800450a:	461a      	mov	r2, r3
 800450c:	f107 0318 	add.w	r3, r7, #24
 8004510:	4413      	add	r3, r2
 8004512:	4a37      	ldr	r2, [pc, #220]	; (80045f0 <Start_LCD_touchscreen+0x1dc>)
 8004514:	6810      	ldr	r0, [r2, #0]
 8004516:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 8004518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800451a:	4618      	mov	r0, r3
 800451c:	f107 0318 	add.w	r3, r7, #24
 8004520:	220a      	movs	r2, #10
 8004522:	4619      	mov	r1, r3
 8004524:	f013 fb7e 	bl	8017c24 <itoa>
			  strcat(buff_y_coordinates, " ");
 8004528:	f107 0318 	add.w	r3, r7, #24
 800452c:	4618      	mov	r0, r3
 800452e:	f7fb fe4f 	bl	80001d0 <strlen>
 8004532:	4603      	mov	r3, r0
 8004534:	461a      	mov	r2, r3
 8004536:	f107 0318 	add.w	r3, r7, #24
 800453a:	4413      	add	r3, r2
 800453c:	492b      	ldr	r1, [pc, #172]	; (80045ec <Start_LCD_touchscreen+0x1d8>)
 800453e:	461a      	mov	r2, r3
 8004540:	460b      	mov	r3, r1
 8004542:	881b      	ldrh	r3, [r3, #0]
 8004544:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 8004546:	f107 0220 	add.w	r2, r7, #32
 800454a:	f107 0308 	add.w	r3, r7, #8
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f014 f984 	bl	801885e <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 8004556:	f107 0218 	add.w	r2, r7, #24
 800455a:	f107 0308 	add.w	r3, r7, #8
 800455e:	4611      	mov	r1, r2
 8004560:	4618      	mov	r0, r3
 8004562:	f014 f97c 	bl	801885e <strcat>
			  strcat(buffer, buff_coordinates);
 8004566:	f107 0208 	add.w	r2, r7, #8
 800456a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f014 f974 	bl	801885e <strcat>
 8004576:	e019      	b.n	80045ac <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 8004578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800457c:	4618      	mov	r0, r3
 800457e:	f7fb fe27 	bl	80001d0 <strlen>
 8004582:	4603      	mov	r3, r0
 8004584:	461a      	mov	r2, r3
 8004586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800458a:	4413      	add	r3, r2
 800458c:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <Start_LCD_touchscreen+0x1e0>)
 800458e:	461d      	mov	r5, r3
 8004590:	4614      	mov	r4, r2
 8004592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004594:	6028      	str	r0, [r5, #0]
 8004596:	6069      	str	r1, [r5, #4]
 8004598:	60aa      	str	r2, [r5, #8]
 800459a:	60eb      	str	r3, [r5, #12]
 800459c:	cc03      	ldmia	r4!, {r0, r1}
 800459e:	6128      	str	r0, [r5, #16]
 80045a0:	6169      	str	r1, [r5, #20]
 80045a2:	8823      	ldrh	r3, [r4, #0]
 80045a4:	78a2      	ldrb	r2, [r4, #2]
 80045a6:	832b      	strh	r3, [r5, #24]
 80045a8:	4613      	mov	r3, r2
 80045aa:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 80045ac:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80045b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80045b4:	4611      	mov	r1, r2
 80045b6:	4618      	mov	r0, r3
 80045b8:	f014 f951 	bl	801885e <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <Start_LCD_touchscreen+0x1e4>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c8:	2200      	movs	r2, #0
 80045ca:	f00f f82f 	bl	801362c <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 80045ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d2:	2232      	movs	r2, #50	; 0x32
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f013 fb48 	bl	8017c6c <memset>

	  osDelay(200);
 80045dc:	20c8      	movs	r0, #200	; 0xc8
 80045de:	f00e fe53 	bl	8013288 <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 80045e2:	e72b      	b.n	800443c <Start_LCD_touchscreen+0x28>
 80045e4:	0801afc8 	.word	0x0801afc8
 80045e8:	0801afd0 	.word	0x0801afd0
 80045ec:	0801afd4 	.word	0x0801afd4
 80045f0:	0801afd8 	.word	0x0801afd8
 80045f4:	0801afdc 	.word	0x0801afdc
 80045f8:	2000eed8 	.word	0x2000eed8

080045fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a20      	ldr	r2, [pc, #128]	; (800468c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d10c      	bne.n	8004628 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 800460e:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d005      	beq.n	8004622 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3b01      	subs	r3, #1
 800461c:	4a1c      	ldr	r2, [pc, #112]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800461e:	6013      	str	r3, [r2, #0]
 8004620:	e002      	b.n	8004628 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 8004622:	4b1b      	ldr	r3, [pc, #108]	; (8004690 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]
	{
		//HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d104      	bne.n	800463c <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8004632:	4b19      	ldr	r3, [pc, #100]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800463a:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a16      	ldr	r2, [pc, #88]	; (800469c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8004646:	f001 fee1 	bl	800640c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a13      	ldr	r2, [pc, #76]	; (800469c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d117      	bne.n	8004684 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		if(Timer1 > 0)
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d006      	beq.n	800466c <HAL_TIM_PeriodElapsedCallback+0x70>
		    Timer1--;
 800465e:	4b10      	ldr	r3, [pc, #64]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b2da      	uxtb	r2, r3
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800466a:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d006      	beq.n	8004684 <HAL_TIM_PeriodElapsedCallback+0x88>
		    Timer2--;
 8004676:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	b2db      	uxtb	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004682:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004684:	bf00      	nop
 8004686:	3708      	adds	r7, #8
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40014400 	.word	0x40014400
 8004690:	200027a4 	.word	0x200027a4
 8004694:	40000400 	.word	0x40000400
 8004698:	2000fa9c 	.word	0x2000fa9c
 800469c:	40002000 	.word	0x40002000
 80046a0:	2001064c 	.word	0x2001064c
 80046a4:	2000fab4 	.word	0x2000fab4

080046a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046ac:	b672      	cpsid	i
}
 80046ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046b0:	e7fe      	b.n	80046b0 <Error_Handler+0x8>
	...

080046b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <HAL_MspInit+0x54>)
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	4a11      	ldr	r2, [pc, #68]	; (8004708 <HAL_MspInit+0x54>)
 80046c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c8:	6453      	str	r3, [r2, #68]	; 0x44
 80046ca:	4b0f      	ldr	r3, [pc, #60]	; (8004708 <HAL_MspInit+0x54>)
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	603b      	str	r3, [r7, #0]
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_MspInit+0x54>)
 80046dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <HAL_MspInit+0x54>)
 80046e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e4:	6413      	str	r3, [r2, #64]	; 0x40
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_MspInit+0x54>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80046f2:	2200      	movs	r2, #0
 80046f4:	210f      	movs	r1, #15
 80046f6:	f06f 0001 	mvn.w	r0, #1
 80046fa:	f001 ffa7 	bl	800664c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40023800 	.word	0x40023800

0800470c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	; 0x30
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004714:	f107 031c 	add.w	r3, r7, #28
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	605a      	str	r2, [r3, #4]
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	60da      	str	r2, [r3, #12]
 8004722:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a42      	ldr	r2, [pc, #264]	; (8004834 <HAL_I2C_MspInit+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d12d      	bne.n	800478a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	61bb      	str	r3, [r7, #24]
 8004732:	4b41      	ldr	r3, [pc, #260]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004736:	4a40      	ldr	r2, [pc, #256]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004738:	f043 0302 	orr.w	r3, r3, #2
 800473c:	6313      	str	r3, [r2, #48]	; 0x30
 800473e:	4b3e      	ldr	r3, [pc, #248]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	61bb      	str	r3, [r7, #24]
 8004748:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800474a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800474e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004750:	2312      	movs	r3, #18
 8004752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004754:	2300      	movs	r3, #0
 8004756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004758:	2303      	movs	r3, #3
 800475a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800475c:	2304      	movs	r3, #4
 800475e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004760:	f107 031c 	add.w	r3, r7, #28
 8004764:	4619      	mov	r1, r3
 8004766:	4835      	ldr	r0, [pc, #212]	; (800483c <HAL_I2C_MspInit+0x130>)
 8004768:	f002 fc08 	bl	8006f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	4b31      	ldr	r3, [pc, #196]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004774:	4a30      	ldr	r2, [pc, #192]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004776:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800477a:	6413      	str	r3, [r2, #64]	; 0x40
 800477c:	4b2e      	ldr	r3, [pc, #184]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004788:	e050      	b.n	800482c <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a2c      	ldr	r2, [pc, #176]	; (8004840 <HAL_I2C_MspInit+0x134>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d14b      	bne.n	800482c <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004794:	2300      	movs	r3, #0
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	4b27      	ldr	r3, [pc, #156]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 800479a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800479c:	4a26      	ldr	r2, [pc, #152]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 800479e:	f043 0304 	orr.w	r3, r3, #4
 80047a2:	6313      	str	r3, [r2, #48]	; 0x30
 80047a4:	4b24      	ldr	r3, [pc, #144]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 80047a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047b0:	2300      	movs	r3, #0
 80047b2:	60fb      	str	r3, [r7, #12]
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 80047b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b8:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6313      	str	r3, [r2, #48]	; 0x30
 80047c0:	4b1d      	ldr	r3, [pc, #116]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047d2:	2312      	movs	r3, #18
 80047d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d6:	2300      	movs	r3, #0
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047da:	2303      	movs	r3, #3
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80047de:	2304      	movs	r3, #4
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047e2:	f107 031c 	add.w	r3, r7, #28
 80047e6:	4619      	mov	r1, r3
 80047e8:	4816      	ldr	r0, [pc, #88]	; (8004844 <HAL_I2C_MspInit+0x138>)
 80047ea:	f002 fbc7 	bl	8006f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80047ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80047f4:	2312      	movs	r3, #18
 80047f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f8:	2300      	movs	r3, #0
 80047fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047fc:	2303      	movs	r3, #3
 80047fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004800:	2304      	movs	r3, #4
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004804:	f107 031c 	add.w	r3, r7, #28
 8004808:	4619      	mov	r1, r3
 800480a:	480f      	ldr	r0, [pc, #60]	; (8004848 <HAL_I2C_MspInit+0x13c>)
 800480c:	f002 fbb6 	bl	8006f7c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004810:	2300      	movs	r3, #0
 8004812:	60bb      	str	r3, [r7, #8]
 8004814:	4b08      	ldr	r3, [pc, #32]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	4a07      	ldr	r2, [pc, #28]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 800481a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800481e:	6413      	str	r3, [r2, #64]	; 0x40
 8004820:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_I2C_MspInit+0x12c>)
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004828:	60bb      	str	r3, [r7, #8]
 800482a:	68bb      	ldr	r3, [r7, #8]
}
 800482c:	bf00      	nop
 800482e:	3730      	adds	r7, #48	; 0x30
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40005800 	.word	0x40005800
 8004838:	40023800 	.word	0x40023800
 800483c:	40020400 	.word	0x40020400
 8004840:	40005c00 	.word	0x40005c00
 8004844:	40020800 	.word	0x40020800
 8004848:	40020000 	.word	0x40020000

0800484c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0b      	ldr	r2, [pc, #44]	; (8004888 <HAL_RNG_MspInit+0x3c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d10d      	bne.n	800487a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <HAL_RNG_MspInit+0x40>)
 8004864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004866:	4a09      	ldr	r2, [pc, #36]	; (800488c <HAL_RNG_MspInit+0x40>)
 8004868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486c:	6353      	str	r3, [r2, #52]	; 0x34
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <HAL_RNG_MspInit+0x40>)
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800487a:	bf00      	nop
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	50060800 	.word	0x50060800
 800488c:	40023800 	.word	0x40023800

08004890 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <HAL_RTC_MspInit+0x4c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d111      	bne.n	80048d4 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80048b0:	2302      	movs	r3, #2
 80048b2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80048b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048b8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	4618      	mov	r0, r3
 80048c0:	f005 fede 	bl	800a680 <HAL_RCCEx_PeriphCLKConfig>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80048ca:	f7ff feed 	bl	80046a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <HAL_RTC_MspInit+0x50>)
 80048d0:	2201      	movs	r2, #1
 80048d2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80048d4:	bf00      	nop
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40002800 	.word	0x40002800
 80048e0:	42470e3c 	.word	0x42470e3c

080048e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08c      	sub	sp, #48	; 0x30
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ec:	f107 031c 	add.w	r3, r7, #28
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	605a      	str	r2, [r3, #4]
 80048f6:	609a      	str	r2, [r3, #8]
 80048f8:	60da      	str	r2, [r3, #12]
 80048fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a5d      	ldr	r2, [pc, #372]	; (8004a78 <HAL_SPI_MspInit+0x194>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d12c      	bne.n	8004960 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	61bb      	str	r3, [r7, #24]
 800490a:	4b5c      	ldr	r3, [pc, #368]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490e:	4a5b      	ldr	r2, [pc, #364]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004910:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004914:	6453      	str	r3, [r2, #68]	; 0x44
 8004916:	4b59      	ldr	r3, [pc, #356]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800491e:	61bb      	str	r3, [r7, #24]
 8004920:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	4b55      	ldr	r3, [pc, #340]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492a:	4a54      	ldr	r2, [pc, #336]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 800492c:	f043 0301 	orr.w	r3, r3, #1
 8004930:	6313      	str	r3, [r2, #48]	; 0x30
 8004932:	4b52      	ldr	r3, [pc, #328]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800493e:	23e0      	movs	r3, #224	; 0xe0
 8004940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004942:	2302      	movs	r3, #2
 8004944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800494a:	2302      	movs	r3, #2
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800494e:	2305      	movs	r3, #5
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004952:	f107 031c 	add.w	r3, r7, #28
 8004956:	4619      	mov	r1, r3
 8004958:	4849      	ldr	r0, [pc, #292]	; (8004a80 <HAL_SPI_MspInit+0x19c>)
 800495a:	f002 fb0f 	bl	8006f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800495e:	e086      	b.n	8004a6e <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a47      	ldr	r2, [pc, #284]	; (8004a84 <HAL_SPI_MspInit+0x1a0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	f040 8081 	bne.w	8004a6e <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800496c:	2300      	movs	r3, #0
 800496e:	613b      	str	r3, [r7, #16]
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004974:	4a41      	ldr	r2, [pc, #260]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004976:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800497a:	6413      	str	r3, [r2, #64]	; 0x40
 800497c:	4b3f      	ldr	r3, [pc, #252]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	4a3a      	ldr	r2, [pc, #232]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 8004992:	f043 0304 	orr.w	r3, r3, #4
 8004996:	6313      	str	r3, [r2, #48]	; 0x30
 8004998:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 800499a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499c:	f003 0304 	and.w	r3, r3, #4
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049a4:	2300      	movs	r3, #0
 80049a6:	60bb      	str	r3, [r7, #8]
 80049a8:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 80049aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ac:	4a33      	ldr	r2, [pc, #204]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 80049ae:	f043 0302 	orr.w	r3, r3, #2
 80049b2:	6313      	str	r3, [r2, #48]	; 0x30
 80049b4:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <HAL_SPI_MspInit+0x198>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b8:	f003 0302 	and.w	r3, r3, #2
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80049c0:	2304      	movs	r3, #4
 80049c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049c4:	2302      	movs	r3, #2
 80049c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049cc:	2303      	movs	r3, #3
 80049ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049d0:	2305      	movs	r3, #5
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049d4:	f107 031c 	add.w	r3, r7, #28
 80049d8:	4619      	mov	r1, r3
 80049da:	482b      	ldr	r0, [pc, #172]	; (8004a88 <HAL_SPI_MspInit+0x1a4>)
 80049dc:	f002 face 	bl	8006f7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80049e0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80049e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ee:	2303      	movs	r3, #3
 80049f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049f2:	2305      	movs	r3, #5
 80049f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049f6:	f107 031c 	add.w	r3, r7, #28
 80049fa:	4619      	mov	r1, r3
 80049fc:	4823      	ldr	r0, [pc, #140]	; (8004a8c <HAL_SPI_MspInit+0x1a8>)
 80049fe:	f002 fabd 	bl	8006f7c <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004a02:	4b23      	ldr	r3, [pc, #140]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <HAL_SPI_MspInit+0x1b0>)
 8004a06:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004a08:	4b21      	ldr	r3, [pc, #132]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004a0e:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a10:	2240      	movs	r2, #64	; 0x40
 8004a12:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a14:	4b1e      	ldr	r3, [pc, #120]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004a1a:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a20:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a22:	4b1b      	ldr	r3, [pc, #108]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a28:	4b19      	ldr	r3, [pc, #100]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004a2e:	4b18      	ldr	r3, [pc, #96]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a34:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004a36:	4b16      	ldr	r3, [pc, #88]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a3c:	4b14      	ldr	r3, [pc, #80]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004a42:	4813      	ldr	r0, [pc, #76]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a44:	f001 fe3a 	bl	80066bc <HAL_DMA_Init>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 8004a4e:	f7ff fe2b 	bl	80046a8 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a0e      	ldr	r2, [pc, #56]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a56:	649a      	str	r2, [r3, #72]	; 0x48
 8004a58:	4a0d      	ldr	r2, [pc, #52]	; (8004a90 <HAL_SPI_MspInit+0x1ac>)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2105      	movs	r1, #5
 8004a62:	2024      	movs	r0, #36	; 0x24
 8004a64:	f001 fdf2 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004a68:	2024      	movs	r0, #36	; 0x24
 8004a6a:	f001 fe0b 	bl	8006684 <HAL_NVIC_EnableIRQ>
}
 8004a6e:	bf00      	nop
 8004a70:	3730      	adds	r7, #48	; 0x30
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40013000 	.word	0x40013000
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40020000 	.word	0x40020000
 8004a84:	40003800 	.word	0x40003800
 8004a88:	40020800 	.word	0x40020800
 8004a8c:	40020400 	.word	0x40020400
 8004a90:	200105ec 	.word	0x200105ec
 8004a94:	40026070 	.word	0x40026070

08004a98 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <HAL_SPI_MspDeInit+0x68>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d10a      	bne.n	8004ac0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8004aaa:	4b16      	ldr	r3, [pc, #88]	; (8004b04 <HAL_SPI_MspDeInit+0x6c>)
 8004aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aae:	4a15      	ldr	r2, [pc, #84]	; (8004b04 <HAL_SPI_MspDeInit+0x6c>)
 8004ab0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ab4:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8004ab6:	21e0      	movs	r1, #224	; 0xe0
 8004ab8:	4813      	ldr	r0, [pc, #76]	; (8004b08 <HAL_SPI_MspDeInit+0x70>)
 8004aba:	f002 fbfb 	bl	80072b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8004abe:	e01b      	b.n	8004af8 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <HAL_SPI_MspDeInit+0x74>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d116      	bne.n	8004af8 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8004aca:	4b0e      	ldr	r3, [pc, #56]	; (8004b04 <HAL_SPI_MspDeInit+0x6c>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <HAL_SPI_MspDeInit+0x6c>)
 8004ad0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ad4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8004ad6:	2104      	movs	r1, #4
 8004ad8:	480d      	ldr	r0, [pc, #52]	; (8004b10 <HAL_SPI_MspDeInit+0x78>)
 8004ada:	f002 fbeb 	bl	80072b4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 8004ade:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8004ae2:	480c      	ldr	r0, [pc, #48]	; (8004b14 <HAL_SPI_MspDeInit+0x7c>)
 8004ae4:	f002 fbe6 	bl	80072b4 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aec:	4618      	mov	r0, r3
 8004aee:	f001 fe93 	bl	8006818 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8004af2:	2024      	movs	r0, #36	; 0x24
 8004af4:	f001 fdd4 	bl	80066a0 <HAL_NVIC_DisableIRQ>
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40013000 	.word	0x40013000
 8004b04:	40023800 	.word	0x40023800
 8004b08:	40020000 	.word	0x40020000
 8004b0c:	40003800 	.word	0x40003800
 8004b10:	40020800 	.word	0x40020800
 8004b14:	40020400 	.word	0x40020400

08004b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <HAL_TIM_Base_MspInit+0xf0>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d116      	bne.n	8004b58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b32:	4a36      	ldr	r2, [pc, #216]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004b34:	f043 0301 	orr.w	r3, r3, #1
 8004b38:	6453      	str	r3, [r2, #68]	; 0x44
 8004b3a:	4b34      	ldr	r3, [pc, #208]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004b46:	2200      	movs	r2, #0
 8004b48:	2105      	movs	r1, #5
 8004b4a:	2019      	movs	r0, #25
 8004b4c:	f001 fd7e 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004b50:	2019      	movs	r0, #25
 8004b52:	f001 fd97 	bl	8006684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004b56:	e052      	b.n	8004bfe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d116      	bne.n	8004b90 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004b62:	2300      	movs	r3, #0
 8004b64:	613b      	str	r3, [r7, #16]
 8004b66:	4b29      	ldr	r3, [pc, #164]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	4a28      	ldr	r2, [pc, #160]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004b6c:	f043 0301 	orr.w	r3, r3, #1
 8004b70:	6413      	str	r3, [r2, #64]	; 0x40
 8004b72:	4b26      	ldr	r3, [pc, #152]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
 8004b7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004b7e:	2200      	movs	r2, #0
 8004b80:	2105      	movs	r1, #5
 8004b82:	201c      	movs	r0, #28
 8004b84:	f001 fd62 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004b88:	201c      	movs	r0, #28
 8004b8a:	f001 fd7b 	bl	8006684 <HAL_NVIC_EnableIRQ>
}
 8004b8e:	e036      	b.n	8004bfe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1e      	ldr	r2, [pc, #120]	; (8004c10 <HAL_TIM_Base_MspInit+0xf8>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d116      	bne.n	8004bc8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60fb      	str	r3, [r7, #12]
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004ba4:	f043 0302 	orr.w	r3, r3, #2
 8004ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f003 0302 	and.w	r3, r3, #2
 8004bb2:	60fb      	str	r3, [r7, #12]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	2105      	movs	r1, #5
 8004bba:	201d      	movs	r0, #29
 8004bbc:	f001 fd46 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004bc0:	201d      	movs	r0, #29
 8004bc2:	f001 fd5f 	bl	8006684 <HAL_NVIC_EnableIRQ>
}
 8004bc6:	e01a      	b.n	8004bfe <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <HAL_TIM_Base_MspInit+0xfc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d115      	bne.n	8004bfe <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60bb      	str	r3, [r7, #8]
 8004bd6:	4b0d      	ldr	r3, [pc, #52]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bda:	4a0c      	ldr	r2, [pc, #48]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004be0:	6453      	str	r3, [r2, #68]	; 0x44
 8004be2:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <HAL_TIM_Base_MspInit+0xf4>)
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	60bb      	str	r3, [r7, #8]
 8004bec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2105      	movs	r1, #5
 8004bf2:	2019      	movs	r0, #25
 8004bf4:	f001 fd2a 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004bf8:	2019      	movs	r0, #25
 8004bfa:	f001 fd43 	bl	8006684 <HAL_NVIC_EnableIRQ>
}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40010000 	.word	0x40010000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40000400 	.word	0x40000400
 8004c14:	40014400 	.word	0x40014400

08004c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08c      	sub	sp, #48	; 0x30
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	202d      	movs	r0, #45	; 0x2d
 8004c2e:	f001 fd0d 	bl	800664c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004c32:	202d      	movs	r0, #45	; 0x2d
 8004c34:	f001 fd26 	bl	8006684 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	4b1f      	ldr	r3, [pc, #124]	; (8004cbc <HAL_InitTick+0xa4>)
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	4a1e      	ldr	r2, [pc, #120]	; (8004cbc <HAL_InitTick+0xa4>)
 8004c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c46:	6413      	str	r3, [r2, #64]	; 0x40
 8004c48:	4b1c      	ldr	r3, [pc, #112]	; (8004cbc <HAL_InitTick+0xa4>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004c54:	f107 0210 	add.w	r2, r7, #16
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	4611      	mov	r1, r2
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f005 fcdc 	bl	800a61c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004c64:	f005 fcc6 	bl	800a5f4 <HAL_RCC_GetPCLK1Freq>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c70:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_InitTick+0xa8>)
 8004c72:	fba2 2303 	umull	r2, r3, r2, r3
 8004c76:	0c9b      	lsrs	r3, r3, #18
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <HAL_InitTick+0xac>)
 8004c7e:	4a12      	ldr	r2, [pc, #72]	; (8004cc8 <HAL_InitTick+0xb0>)
 8004c80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004c82:	4b10      	ldr	r3, [pc, #64]	; (8004cc4 <HAL_InitTick+0xac>)
 8004c84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004c88:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004c8a:	4a0e      	ldr	r2, [pc, #56]	; (8004cc4 <HAL_InitTick+0xac>)
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004c90:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_InitTick+0xac>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c96:	4b0b      	ldr	r3, [pc, #44]	; (8004cc4 <HAL_InitTick+0xac>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004c9c:	4809      	ldr	r0, [pc, #36]	; (8004cc4 <HAL_InitTick+0xac>)
 8004c9e:	f007 f94d 	bl	800bf3c <HAL_TIM_Base_Init>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004ca8:	4806      	ldr	r0, [pc, #24]	; (8004cc4 <HAL_InitTick+0xac>)
 8004caa:	f007 f997 	bl	800bfdc <HAL_TIM_Base_Start_IT>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	e000      	b.n	8004cb4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3730      	adds	r7, #48	; 0x30
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	40023800 	.word	0x40023800
 8004cc0:	431bde83 	.word	0x431bde83
 8004cc4:	20010fa8 	.word	0x20010fa8
 8004cc8:	40002000 	.word	0x40002000

08004ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004cd0:	e7fe      	b.n	8004cd0 <NMI_Handler+0x4>

08004cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cd6:	e7fe      	b.n	8004cd6 <HardFault_Handler+0x4>

08004cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cdc:	e7fe      	b.n	8004cdc <MemManage_Handler+0x4>

08004cde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ce2:	e7fe      	b.n	8004ce2 <BusFault_Handler+0x4>

08004ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ce8:	e7fe      	b.n	8004ce8 <UsageFault_Handler+0x4>

08004cea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cea:	b480      	push	{r7}
 8004cec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004cfc:	4802      	ldr	r0, [pc, #8]	; (8004d08 <DMA1_Stream4_IRQHandler+0x10>)
 8004cfe:	f001 fed3 	bl	8006aa8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004d02:	bf00      	nop
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200105ec 	.word	0x200105ec

08004d0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004d10:	4803      	ldr	r0, [pc, #12]	; (8004d20 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004d12:	f007 fa02 	bl	800c11a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004d16:	4803      	ldr	r0, [pc, #12]	; (8004d24 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004d18:	f007 f9ff 	bl	800c11a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004d1c:	bf00      	nop
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	2000f854 	.word	0x2000f854
 8004d24:	2000a328 	.word	0x2000a328

08004d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d2c:	4802      	ldr	r0, [pc, #8]	; (8004d38 <TIM2_IRQHandler+0x10>)
 8004d2e:	f007 f9f4 	bl	800c11a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	2000fbd4 	.word	0x2000fbd4

08004d3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004d40:	4802      	ldr	r0, [pc, #8]	; (8004d4c <TIM3_IRQHandler+0x10>)
 8004d42:	f007 f9ea 	bl	800c11a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004d46:	bf00      	nop
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	2000ddc8 	.word	0x2000ddc8

08004d50 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004d54:	4802      	ldr	r0, [pc, #8]	; (8004d60 <SPI2_IRQHandler+0x10>)
 8004d56:	f006 fe6f 	bl	800ba38 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004d5a:	bf00      	nop
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000a260 	.word	0x2000a260

08004d64 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004d68:	4802      	ldr	r0, [pc, #8]	; (8004d74 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004d6a:	f007 f9d6 	bl	800c11a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	20010fa8 	.word	0x20010fa8

08004d78 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004d7c:	4802      	ldr	r0, [pc, #8]	; (8004d88 <OTG_FS_IRQHandler+0x10>)
 8004d7e:	f003 ffba 	bl	8008cf6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004d82:	bf00      	nop
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	20014578 	.word	0x20014578

08004d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
	return 1;
 8004d90:	2301      	movs	r3, #1
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <_kill>:

int _kill(int pid, int sig)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004da6:	f012 fe05 	bl	80179b4 <__errno>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2216      	movs	r2, #22
 8004dae:	601a      	str	r2, [r3, #0]
	return -1;
 8004db0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <_exit>:

void _exit (int status)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7ff ffe7 	bl	8004d9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004dce:	e7fe      	b.n	8004dce <_exit+0x12>

08004dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]
 8004de0:	e00a      	b.n	8004df8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004de2:	f3af 8000 	nop.w
 8004de6:	4601      	mov	r1, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	60ba      	str	r2, [r7, #8]
 8004dee:	b2ca      	uxtb	r2, r1
 8004df0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	3301      	adds	r3, #1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	dbf0      	blt.n	8004de2 <_read+0x12>
	}

return len;
 8004e00:	687b      	ldr	r3, [r7, #4]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b086      	sub	sp, #24
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e16:	2300      	movs	r3, #0
 8004e18:	617b      	str	r3, [r7, #20]
 8004e1a:	e009      	b.n	8004e30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	60ba      	str	r2, [r7, #8]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	4618      	mov	r0, r3
 8004e26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	dbf1      	blt.n	8004e1c <_write+0x12>
	}
	return len;
 8004e38:	687b      	ldr	r3, [r7, #4]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <_close>:

int _close(int file)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b083      	sub	sp, #12
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
	return -1;
 8004e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b083      	sub	sp, #12
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
 8004e62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004e6a:	605a      	str	r2, [r3, #4]
	return 0;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <_isatty>:

int _isatty(int file)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
	return 1;
 8004e82:	2301      	movs	r3, #1
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b085      	sub	sp, #20
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	607a      	str	r2, [r7, #4]
	return 0;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
	...

08004eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004eb4:	4a14      	ldr	r2, [pc, #80]	; (8004f08 <_sbrk+0x5c>)
 8004eb6:	4b15      	ldr	r3, [pc, #84]	; (8004f0c <_sbrk+0x60>)
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ec0:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <_sbrk+0x64>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d102      	bne.n	8004ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ec8:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <_sbrk+0x64>)
 8004eca:	4a12      	ldr	r2, [pc, #72]	; (8004f14 <_sbrk+0x68>)
 8004ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ece:	4b10      	ldr	r3, [pc, #64]	; (8004f10 <_sbrk+0x64>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d207      	bcs.n	8004eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004edc:	f012 fd6a 	bl	80179b4 <__errno>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	220c      	movs	r2, #12
 8004ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004ee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004eea:	e009      	b.n	8004f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004eec:	4b08      	ldr	r3, [pc, #32]	; (8004f10 <_sbrk+0x64>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ef2:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <_sbrk+0x64>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4413      	add	r3, r2
 8004efa:	4a05      	ldr	r2, [pc, #20]	; (8004f10 <_sbrk+0x64>)
 8004efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004efe:	68fb      	ldr	r3, [r7, #12]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20020000 	.word	0x20020000
 8004f0c:	00000800 	.word	0x00000800
 8004f10:	200027b0 	.word	0x200027b0
 8004f14:	20014990 	.word	0x20014990

08004f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <SystemInit+0x20>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <SystemInit+0x20>)
 8004f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004f2c:	bf00      	nop
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	e000ed00 	.word	0xe000ed00

08004f3c <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8004f44:	2305      	movs	r3, #5
 8004f46:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 f9f1 	bl	8006334 <null_ptr_check>
 8004f52:	4603      	mov	r3, r0
 8004f54:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8004f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d133      	bne.n	8004fc6 <bme280_init+0x8a>
		while (try_count) {
 8004f5e:	e028      	b.n	8004fb2 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8004f60:	f107 010d 	add.w	r1, r7, #13
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	20d0      	movs	r0, #208	; 0xd0
 8004f6a:	f000 f832 	bl	8004fd2 <bme280_get_regs>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8004f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d114      	bne.n	8004fa4 <bme280_init+0x68>
 8004f7a:	7b7b      	ldrb	r3, [r7, #13]
 8004f7c:	2b60      	cmp	r3, #96	; 0x60
 8004f7e:	d111      	bne.n	8004fa4 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8004f80:	7b7a      	ldrb	r2, [r7, #13]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f976 	bl	8005278 <bme280_soft_reset>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8004f90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d110      	bne.n	8004fba <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 f841 	bl	8006020 <get_calib_data>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8004fa2:	e00a      	b.n	8004fba <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2001      	movs	r0, #1
 8004faa:	4798      	blx	r3
			--try_count;
 8004fac:	7bbb      	ldrb	r3, [r7, #14]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8004fb2:	7bbb      	ldrb	r3, [r7, #14]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1d3      	bne.n	8004f60 <bme280_init+0x24>
 8004fb8:	e000      	b.n	8004fbc <bme280_init+0x80>
				break;
 8004fba:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8004fbc:	7bbb      	ldrb	r3, [r7, #14]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8004fc2:	23fe      	movs	r3, #254	; 0xfe
 8004fc4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8004fc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8004fd2:	b590      	push	{r4, r7, lr}
 8004fd4:	b087      	sub	sp, #28
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	4603      	mov	r3, r0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f001 f9a5 	bl	8006334 <null_ptr_check>
 8004fea:	4603      	mov	r3, r0
 8004fec:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8004fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d117      	bne.n	8005026 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	789b      	ldrb	r3, [r3, #2]
 8004ffa:	2b01      	cmp	r3, #1
 8004ffc:	d003      	beq.n	8005006 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
 8005000:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005004:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685c      	ldr	r4, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	7858      	ldrb	r0, [r3, #1]
 800500e:	89bb      	ldrh	r3, [r7, #12]
 8005010:	7bf9      	ldrb	r1, [r7, #15]
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	47a0      	blx	r4
 8005016:	4603      	mov	r3, r0
 8005018:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800501a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8005022:	23fc      	movs	r3, #252	; 0xfc
 8005024:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005026:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800502a:	4618      	mov	r0, r3
 800502c:	371c      	adds	r7, #28
 800502e:	46bd      	mov	sp, r7
 8005030:	bd90      	pop	{r4, r7, pc}

08005032 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8005032:	b590      	push	{r4, r7, lr}
 8005034:	b08d      	sub	sp, #52	; 0x34
 8005036:	af00      	add	r7, sp, #0
 8005038:	60f8      	str	r0, [r7, #12]
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	603b      	str	r3, [r7, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8005042:	79fb      	ldrb	r3, [r7, #7]
 8005044:	2b0a      	cmp	r3, #10
 8005046:	d901      	bls.n	800504c <bme280_set_regs+0x1a>
		len = 10;
 8005048:	230a      	movs	r3, #10
 800504a:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800504c:	6838      	ldr	r0, [r7, #0]
 800504e:	f001 f971 	bl	8006334 <null_ptr_check>
 8005052:	4603      	mov	r3, r0
 8005054:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8005058:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800505c:	2b00      	cmp	r3, #0
 800505e:	d154      	bne.n	800510a <bme280_set_regs+0xd8>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d051      	beq.n	800510a <bme280_set_regs+0xd8>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d04e      	beq.n	800510a <bme280_set_regs+0xd8>
		if (len != 0) {
 800506c:	79fb      	ldrb	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d047      	beq.n	8005102 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	789b      	ldrb	r3, [r3, #2]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d01a      	beq.n	80050b6 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005080:	2300      	movs	r3, #0
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005086:	e011      	b.n	80050ac <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005088:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005096:	68f9      	ldr	r1, [r7, #12]
 8005098:	440b      	add	r3, r1
 800509a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80050a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050a6:	3301      	adds	r3, #1
 80050a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80050ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d3e8      	bcc.n	8005088 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d90b      	bls.n	80050d4 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	f107 0114 	add.w	r1, r7, #20
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fff0 	bl	80060aa <interleave_reg_addr>
				temp_len = len * 2;
 80050ca:	79fb      	ldrb	r3, [r7, #7]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050d2:	e001      	b.n	80050d8 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	689c      	ldr	r4, [r3, #8]
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	7858      	ldrb	r0, [r3, #1]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	7819      	ldrb	r1, [r3, #0]
 80050e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050e6:	f107 0214 	add.w	r2, r7, #20
 80050ea:	47a0      	blx	r4
 80050ec:	4603      	mov	r3, r0
 80050ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80050f2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00b      	beq.n	8005112 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80050fa:	23fc      	movs	r3, #252	; 0xfc
 80050fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8005100:	e007      	b.n	8005112 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8005102:	23fd      	movs	r3, #253	; 0xfd
 8005104:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8005108:	e003      	b.n	8005112 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800510a:	23ff      	movs	r3, #255	; 0xff
 800510c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005110:	e000      	b.n	8005114 <bme280_set_regs+0xe2>
		if (len != 0) {
 8005112:	bf00      	nop
	}


	return rslt;
 8005114:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005118:	4618      	mov	r0, r3
 800511a:	3734      	adds	r7, #52	; 0x34
 800511c:	46bd      	mov	sp, r7
 800511e:	bd90      	pop	{r4, r7, pc}

08005120 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	6039      	str	r1, [r7, #0]
 800512a:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800512c:	6838      	ldr	r0, [r7, #0]
 800512e:	f001 f901 	bl	8006334 <null_ptr_check>
 8005132:	4603      	mov	r3, r0
 8005134:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8005136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d13f      	bne.n	80051be <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800513e:	f107 030e 	add.w	r3, r7, #14
 8005142:	6839      	ldr	r1, [r7, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f000 f874 	bl	8005232 <bme280_get_sensor_mode>
 800514a:	4603      	mov	r3, r0
 800514c:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800514e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <bme280_set_sensor_settings+0x46>
 8005156:	7bbb      	ldrb	r3, [r7, #14]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d004      	beq.n	8005166 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 800515c:	6838      	ldr	r0, [r7, #0]
 800515e:	f000 fb4e 	bl	80057fe <put_device_to_sleep>
 8005162:	4603      	mov	r3, r0
 8005164:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8005166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d127      	bne.n	80051be <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	4619      	mov	r1, r3
 8005172:	2007      	movs	r0, #7
 8005174:	f001 f8c2 	bl	80062fc <are_settings_changed>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d009      	beq.n	8005192 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f000 f98a 	bl	80054a2 <set_osr_settings>
 800518e:	4603      	mov	r3, r0
 8005190:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8005192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d111      	bne.n	80051be <bme280_set_sensor_settings+0x9e>
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	4619      	mov	r1, r3
 800519e:	2018      	movs	r0, #24
 80051a0:	f001 f8ac 	bl	80062fc <are_settings_changed>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fa11 	bl	80055dc <set_filter_standby_settings>
 80051ba:	4603      	mov	r3, r0
 80051bc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80051be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	4603      	mov	r3, r0
 80051d2:	6039      	str	r1, [r7, #0]
 80051d4:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f001 f8ac 	bl	8006334 <null_ptr_check>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80051e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11e      	bne.n	8005226 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80051e8:	f107 030e 	add.w	r3, r7, #14
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f81f 	bl	8005232 <bme280_get_sensor_mode>
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80051f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d107      	bne.n	8005210 <bme280_set_sensor_mode+0x46>
 8005200:	7bbb      	ldrb	r3, [r7, #14]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8005206:	6838      	ldr	r0, [r7, #0]
 8005208:	f000 faf9 	bl	80057fe <put_device_to_sleep>
 800520c:	4603      	mov	r3, r0
 800520e:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8005210:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d106      	bne.n	8005226 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8005218:	79fb      	ldrb	r3, [r7, #7]
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	4618      	mov	r0, r3
 800521e:	f000 fabb 	bl	8005798 <write_power_mode>
 8005222:	4603      	mov	r3, r0
 8005224:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005226:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800523c:	6838      	ldr	r0, [r7, #0]
 800523e:	f001 f879 	bl	8006334 <null_ptr_check>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8005246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10e      	bne.n	800526c <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	20f4      	movs	r0, #244	; 0xf4
 8005256:	f7ff febc 	bl	8004fd2 <bme280_get_regs>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	b2da      	uxtb	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 800526c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8005280:	23e0      	movs	r3, #224	; 0xe0
 8005282:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8005284:	23b6      	movs	r3, #182	; 0xb6
 8005286:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f001 f853 	bl	8006334 <null_ptr_check>
 800528e:	4603      	mov	r3, r0
 8005290:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8005292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d10d      	bne.n	80052b6 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800529a:	f107 010d 	add.w	r1, r7, #13
 800529e:	f107 000e 	add.w	r0, r7, #14
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f7ff fec4 	bl	8005032 <bme280_set_regs>
 80052aa:	4603      	mov	r3, r0
 80052ac:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2002      	movs	r0, #2
 80052b4:	4798      	blx	r3
	}

	return rslt;
 80052b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b08a      	sub	sp, #40	; 0x28
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	4603      	mov	r3, r0
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	2300      	movs	r3, #0
 80052d6:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80052d8:	f107 0310 	add.w	r3, r7, #16
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	605a      	str	r2, [r3, #4]
 80052e2:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f001 f825 	bl	8006334 <null_ptr_check>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80052f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d124      	bne.n	8005342 <bme280_get_sensor_data+0x80>
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d021      	beq.n	8005342 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80052fe:	f107 011c 	add.w	r1, r7, #28
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	20f7      	movs	r0, #247	; 0xf7
 8005308:	f7ff fe63 	bl	8004fd2 <bme280_get_regs>
 800530c:	4603      	mov	r3, r0
 800530e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8005312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005316:	2b00      	cmp	r3, #0
 8005318:	d116      	bne.n	8005348 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800531a:	f107 0210 	add.w	r2, r7, #16
 800531e:	f107 031c 	add.w	r3, r7, #28
 8005322:	4611      	mov	r1, r2
 8005324:	4618      	mov	r0, r3
 8005326:	f000 f815 	bl	8005354 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	3310      	adds	r3, #16
 800532e:	f107 0110 	add.w	r1, r7, #16
 8005332:	7bf8      	ldrb	r0, [r7, #15]
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	f000 f853 	bl	80053e0 <bme280_compensate_data>
 800533a:	4603      	mov	r3, r0
 800533c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8005340:	e002      	b.n	8005348 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8005342:	23ff      	movs	r3, #255	; 0xff
 8005344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8005348:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800534c:	4618      	mov	r0, r3
 800534e:	3728      	adds	r7, #40	; 0x28
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	031b      	lsls	r3, r3, #12
 8005364:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3301      	adds	r3, #1
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3302      	adds	r3, #2
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	091b      	lsrs	r3, r3, #4
 8005378:	b2db      	uxtb	r3, r3
 800537a:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	431a      	orrs	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3303      	adds	r3, #3
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	031b      	lsls	r3, r3, #12
 8005392:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	3304      	adds	r3, #4
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	011b      	lsls	r3, r3, #4
 800539c:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3305      	adds	r3, #5
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	091b      	lsrs	r3, r3, #4
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	3306      	adds	r3, #6
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	021b      	lsls	r3, r3, #8
 80053c0:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3307      	adds	r3, #7
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	371c      	adds	r7, #28
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
 80053ec:	4603      	mov	r3, r0
 80053ee:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04b      	beq.n	8005492 <bme280_compensate_data+0xb2>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d048      	beq.n	8005492 <bme280_compensate_data+0xb2>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d045      	beq.n	8005492 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	f04f 0200 	mov.w	r2, #0
 800541a:	f04f 0300 	mov.w	r3, #0
 800541e:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	f003 0307 	and.w	r3, r3, #7
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00a      	beq.n	8005450 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f000 fa2b 	bl	8005898 <compensate_temperature>
 8005442:	eeb0 7a40 	vmov.f32	s14, s0
 8005446:	eef0 7a60 	vmov.f32	s15, s1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8005450:	7bfb      	ldrb	r3, [r7, #15]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	f000 faef 	bl	8005a40 <compensate_pressure>
 8005462:	eeb0 7a40 	vmov.f32	s14, s0
 8005466:	eef0 7a60 	vmov.f32	s15, s1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8005470:	7bfb      	ldrb	r3, [r7, #15]
 8005472:	f003 0304 	and.w	r3, r3, #4
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00d      	beq.n	8005496 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800547a:	6839      	ldr	r1, [r7, #0]
 800547c:	68b8      	ldr	r0, [r7, #8]
 800547e:	f000 fcaf 	bl	8005de0 <compensate_humidity>
 8005482:	eeb0 7a40 	vmov.f32	s14, s0
 8005486:	eef0 7a60 	vmov.f32	s15, s1
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8005490:	e001      	b.n	8005496 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8005492:	23ff      	movs	r3, #255	; 0xff
 8005494:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	4603      	mov	r3, r0
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
 80054ae:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80054b4:	7bfb      	ldrb	r3, [r7, #15]
 80054b6:	f003 0304 	and.w	r3, r3, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d005      	beq.n	80054ca <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80054be:	6879      	ldr	r1, [r7, #4]
 80054c0:	68b8      	ldr	r0, [r7, #8]
 80054c2:	f000 f815 	bl	80054f0 <set_osr_humidity_settings>
 80054c6:	4603      	mov	r3, r0
 80054c8:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80054ca:	7bfb      	ldrb	r3, [r7, #15]
 80054cc:	f003 0303 	and.w	r3, r3, #3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d007      	beq.n	80054e4 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 f842 	bl	8005564 <set_osr_press_temp_settings>
 80054e0:	4603      	mov	r3, r0
 80054e2:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80054e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80054fa:	23f2      	movs	r3, #242	; 0xf2
 80054fc:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	789b      	ldrb	r3, [r3, #2]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	b2db      	uxtb	r3, r3
 8005508:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800550a:	f107 010e 	add.w	r1, r7, #14
 800550e:	f107 000c 	add.w	r0, r7, #12
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	2201      	movs	r2, #1
 8005516:	f7ff fd8c 	bl	8005032 <bme280_set_regs>
 800551a:	4603      	mov	r3, r0
 800551c:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 800551e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d118      	bne.n	8005558 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8005526:	23f4      	movs	r3, #244	; 0xf4
 8005528:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800552a:	7b38      	ldrb	r0, [r7, #12]
 800552c:	f107 010d 	add.w	r1, r7, #13
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2201      	movs	r2, #1
 8005534:	f7ff fd4d 	bl	8004fd2 <bme280_get_regs>
 8005538:	4603      	mov	r3, r0
 800553a:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 800553c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8005544:	f107 010d 	add.w	r1, r7, #13
 8005548:	f107 000c 	add.w	r0, r7, #12
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	2201      	movs	r2, #1
 8005550:	f7ff fd6f 	bl	8005032 <bme280_set_regs>
 8005554:	4603      	mov	r3, r0
 8005556:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005558:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8005572:	23f4      	movs	r3, #244	; 0xf4
 8005574:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8005576:	7db8      	ldrb	r0, [r7, #22]
 8005578:	f107 0115 	add.w	r1, r7, #21
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f7ff fd27 	bl	8004fd2 <bme280_get_regs>
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8005588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11f      	bne.n	80055d0 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d005      	beq.n	80055a6 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800559a:	f107 0315 	add.w	r3, r7, #21
 800559e:	68b9      	ldr	r1, [r7, #8]
 80055a0:	4618      	mov	r0, r3
 80055a2:	f000 f88e 	bl	80056c2 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80055b0:	f107 0315 	add.w	r3, r7, #21
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 f8a0 	bl	80056fc <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80055bc:	f107 0115 	add.w	r1, r7, #21
 80055c0:	f107 0016 	add.w	r0, r7, #22
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f7ff fd33 	bl	8005032 <bme280_set_regs>
 80055cc:	4603      	mov	r3, r0
 80055ce:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80055d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80055ea:	23f5      	movs	r3, #245	; 0xf5
 80055ec:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80055ee:	7db8      	ldrb	r0, [r7, #22]
 80055f0:	f107 0115 	add.w	r1, r7, #21
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f7ff fceb 	bl	8004fd2 <bme280_get_regs>
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8005600:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d11f      	bne.n	8005648 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b00      	cmp	r3, #0
 8005610:	d005      	beq.n	800561e <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8005612:	f107 0315 	add.w	r3, r7, #21
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 f81b 	bl	8005654 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8005628:	f107 0315 	add.w	r3, r7, #21
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f82d 	bl	800568e <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005634:	f107 0115 	add.w	r1, r7, #21
 8005638:	f107 0016 	add.w	r0, r7, #22
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f7ff fcf7 	bl	8005032 <bme280_set_regs>
 8005644:	4603      	mov	r3, r0
 8005646:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005648:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800564c:	4618      	mov	r0, r3
 800564e:	3718      	adds	r7, #24
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	b25b      	sxtb	r3, r3
 8005664:	f023 031c 	bic.w	r3, r3, #28
 8005668:	b25a      	sxtb	r2, r3
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	78db      	ldrb	r3, [r3, #3]
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	b25b      	sxtb	r3, r3
 8005672:	f003 031c 	and.w	r3, r3, #28
 8005676:	b25b      	sxtb	r3, r3
 8005678:	4313      	orrs	r3, r2
 800567a:	b25b      	sxtb	r3, r3
 800567c:	b2da      	uxtb	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	701a      	strb	r2, [r3, #0]
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr

0800568e <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
 8005696:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	b25b      	sxtb	r3, r3
 800569e:	f003 031f 	and.w	r3, r3, #31
 80056a2:	b25a      	sxtb	r2, r3
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	791b      	ldrb	r3, [r3, #4]
 80056a8:	015b      	lsls	r3, r3, #5
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	4313      	orrs	r3, r2
 80056ae:	b25b      	sxtb	r3, r3
 80056b0:	b2da      	uxtb	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	701a      	strb	r2, [r3, #0]
}
 80056b6:	bf00      	nop
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr

080056c2 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80056c2:	b480      	push	{r7}
 80056c4:	b083      	sub	sp, #12
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b25b      	sxtb	r3, r3
 80056d2:	f023 031c 	bic.w	r3, r3, #28
 80056d6:	b25a      	sxtb	r2, r3
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	b25b      	sxtb	r3, r3
 80056e0:	f003 031c 	and.w	r3, r3, #28
 80056e4:	b25b      	sxtb	r3, r3
 80056e6:	4313      	orrs	r3, r2
 80056e8:	b25b      	sxtb	r3, r3
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	701a      	strb	r2, [r3, #0]
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b25b      	sxtb	r3, r3
 800570c:	f003 031f 	and.w	r3, r3, #31
 8005710:	b25a      	sxtb	r2, r3
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	015b      	lsls	r3, r3, #5
 8005718:	b25b      	sxtb	r3, r3
 800571a:	4313      	orrs	r3, r2
 800571c:	b25b      	sxtb	r3, r3
 800571e:	b2da      	uxtb	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	701a      	strb	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f003 0307 	and.w	r3, r3, #7
 8005742:	b2da      	uxtb	r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3302      	adds	r3, #2
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	109b      	asrs	r3, r3, #2
 8005750:	b2db      	uxtb	r3, r3
 8005752:	f003 0307 	and.w	r3, r3, #7
 8005756:	b2da      	uxtb	r2, r3
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3302      	adds	r3, #2
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	095b      	lsrs	r3, r3, #5
 8005764:	b2da      	uxtb	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3303      	adds	r3, #3
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	109b      	asrs	r3, r3, #2
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	b2da      	uxtb	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3303      	adds	r3, #3
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	b2da      	uxtb	r2, r3
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	711a      	strb	r2, [r3, #4]
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	4603      	mov	r3, r0
 80057a0:	6039      	str	r1, [r7, #0]
 80057a2:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80057a4:	23f4      	movs	r3, #244	; 0xf4
 80057a6:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80057a8:	7bb8      	ldrb	r0, [r7, #14]
 80057aa:	f107 010d 	add.w	r1, r7, #13
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f7ff fc0e 	bl	8004fd2 <bme280_get_regs>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80057ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d117      	bne.n	80057f2 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80057c2:	7b7b      	ldrb	r3, [r7, #13]
 80057c4:	b25b      	sxtb	r3, r3
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	b25a      	sxtb	r2, r3
 80057cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	b25b      	sxtb	r3, r3
 80057d6:	4313      	orrs	r3, r2
 80057d8:	b25b      	sxtb	r3, r3
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80057de:	f107 010d 	add.w	r1, r7, #13
 80057e2:	f107 000e 	add.w	r0, r7, #14
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f7ff fc22 	bl	8005032 <bme280_set_regs>
 80057ee:	4603      	mov	r3, r0
 80057f0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80057f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80057fe:	b580      	push	{r7, lr}
 8005800:	b086      	sub	sp, #24
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8005806:	f107 0110 	add.w	r1, r7, #16
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2204      	movs	r2, #4
 800580e:	20f2      	movs	r0, #242	; 0xf2
 8005810:	f7ff fbdf 	bl	8004fd2 <bme280_get_regs>
 8005814:	4603      	mov	r3, r0
 8005816:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8005818:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d118      	bne.n	8005852 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8005820:	f107 0208 	add.w	r2, r7, #8
 8005824:	f107 0310 	add.w	r3, r7, #16
 8005828:	4611      	mov	r1, r2
 800582a:	4618      	mov	r0, r3
 800582c:	f7ff ff80 	bl	8005730 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff fd21 	bl	8005278 <bme280_soft_reset>
 8005836:	4603      	mov	r3, r0
 8005838:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800583a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d107      	bne.n	8005852 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8005842:	f107 0308 	add.w	r3, r7, #8
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	4618      	mov	r0, r3
 800584a:	f000 f808 	bl	800585e <reload_device_settings>
 800584e:	4603      	mov	r3, r0
 8005850:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005852:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800585e:	b580      	push	{r7, lr}
 8005860:	b084      	sub	sp, #16
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005868:	683a      	ldr	r2, [r7, #0]
 800586a:	6879      	ldr	r1, [r7, #4]
 800586c:	201f      	movs	r0, #31
 800586e:	f7ff fe18 	bl	80054a2 <set_osr_settings>
 8005872:	4603      	mov	r3, r0
 8005874:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8005876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	201f      	movs	r0, #31
 8005884:	f7ff feaa 	bl	80055dc <set_filter_standby_settings>
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]

	return rslt;
 800588c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8005898:	b5b0      	push	{r4, r5, r7, lr}
 800589a:	b08c      	sub	sp, #48	; 0x30
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80058a2:	f04f 0200 	mov.w	r2, #0
 80058a6:	4b5f      	ldr	r3, [pc, #380]	; (8005a24 <compensate_temperature+0x18c>)
 80058a8:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80058ac:	f04f 0200 	mov.w	r2, #0
 80058b0:	4b5d      	ldr	r3, [pc, #372]	; (8005a28 <compensate_temperature+0x190>)
 80058b2:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa fe22 	bl	8000504 <__aeabi_ui2d>
 80058c0:	f04f 0200 	mov.w	r2, #0
 80058c4:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <compensate_temperature+0x194>)
 80058c6:	f7fa ffc1 	bl	800084c <__aeabi_ddiv>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4614      	mov	r4, r2
 80058d0:	461d      	mov	r5, r3
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7fa fe14 	bl	8000504 <__aeabi_ui2d>
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	4b53      	ldr	r3, [pc, #332]	; (8005a30 <compensate_temperature+0x198>)
 80058e2:	f7fa ffb3 	bl	800084c <__aeabi_ddiv>
 80058e6:	4602      	mov	r2, r0
 80058e8:	460b      	mov	r3, r1
 80058ea:	4620      	mov	r0, r4
 80058ec:	4629      	mov	r1, r5
 80058ee:	f7fa fccb 	bl	8000288 <__aeabi_dsub>
 80058f2:	4602      	mov	r2, r0
 80058f4:	460b      	mov	r3, r1
 80058f6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005900:	4618      	mov	r0, r3
 8005902:	f7fa fe0f 	bl	8000524 <__aeabi_i2d>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800590e:	f7fa fe73 	bl	80005f8 <__aeabi_dmul>
 8005912:	4602      	mov	r2, r0
 8005914:	460b      	mov	r3, r1
 8005916:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	4618      	mov	r0, r3
 8005920:	f7fa fdf0 	bl	8000504 <__aeabi_ui2d>
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800592c:	f7fa ff8e 	bl	800084c <__aeabi_ddiv>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4614      	mov	r4, r2
 8005936:	461d      	mov	r5, r3
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f7fa fde1 	bl	8000504 <__aeabi_ui2d>
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <compensate_temperature+0x19c>)
 8005948:	f7fa ff80 	bl	800084c <__aeabi_ddiv>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4620      	mov	r0, r4
 8005952:	4629      	mov	r1, r5
 8005954:	f7fa fc98 	bl	8000288 <__aeabi_dsub>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8005960:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005964:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005968:	f7fa fe46 	bl	80005f8 <__aeabi_dmul>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4614      	mov	r4, r2
 8005972:	461d      	mov	r5, r3
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800597a:	4618      	mov	r0, r3
 800597c:	f7fa fdd2 	bl	8000524 <__aeabi_i2d>
 8005980:	4602      	mov	r2, r0
 8005982:	460b      	mov	r3, r1
 8005984:	4620      	mov	r0, r4
 8005986:	4629      	mov	r1, r5
 8005988:	f7fa fe36 	bl	80005f8 <__aeabi_dmul>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8005994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005998:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800599c:	f7fa fc76 	bl	800028c <__adddf3>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4610      	mov	r0, r2
 80059a6:	4619      	mov	r1, r3
 80059a8:	f7fb f8d6 	bl	8000b58 <__aeabi_d2iz>
 80059ac:	4602      	mov	r2, r0
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80059b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059ba:	f7fa fc67 	bl	800028c <__adddf3>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4610      	mov	r0, r2
 80059c4:	4619      	mov	r1, r3
 80059c6:	f04f 0200 	mov.w	r2, #0
 80059ca:	4b1b      	ldr	r3, [pc, #108]	; (8005a38 <compensate_temperature+0x1a0>)
 80059cc:	f7fa ff3e 	bl	800084c <__aeabi_ddiv>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80059d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059dc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059e0:	f7fb f87c 	bl	8000adc <__aeabi_dcmplt>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d004      	beq.n	80059f4 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80059ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80059f2:	e00c      	b.n	8005a0e <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80059f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80059fc:	f7fb f88c 	bl	8000b18 <__aeabi_dcmpgt>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <compensate_temperature+0x176>
		temperature = temperature_max;
 8005a06:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8005a0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a12:	ec43 2b17 	vmov	d7, r2, r3
}
 8005a16:	eeb0 0a47 	vmov.f32	s0, s14
 8005a1a:	eef0 0a67 	vmov.f32	s1, s15
 8005a1e:	3730      	adds	r7, #48	; 0x30
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bdb0      	pop	{r4, r5, r7, pc}
 8005a24:	c0440000 	.word	0xc0440000
 8005a28:	40554000 	.word	0x40554000
 8005a2c:	40d00000 	.word	0x40d00000
 8005a30:	40900000 	.word	0x40900000
 8005a34:	40c00000 	.word	0x40c00000
 8005a38:	40b40000 	.word	0x40b40000
 8005a3c:	00000000 	.word	0x00000000

08005a40 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8005a40:	b5b0      	push	{r4, r5, r7, lr}
 8005a42:	b08e      	sub	sp, #56	; 0x38
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8005a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8005db0 <compensate_pressure+0x370>)
 8005a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8005a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8005db8 <compensate_pressure+0x378>)
 8005a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fa fd5e 	bl	8000524 <__aeabi_i2d>
 8005a68:	f04f 0200 	mov.w	r2, #0
 8005a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a70:	f7fa feec 	bl	800084c <__aeabi_ddiv>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4610      	mov	r0, r2
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f04f 0200 	mov.w	r2, #0
 8005a80:	4bc1      	ldr	r3, [pc, #772]	; (8005d88 <compensate_pressure+0x348>)
 8005a82:	f7fa fc01 	bl	8000288 <__aeabi_dsub>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8005a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005a96:	f7fa fdaf 	bl	80005f8 <__aeabi_dmul>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	4614      	mov	r4, r2
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fa fd3b 	bl	8000524 <__aeabi_i2d>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fa fd9f 	bl	80005f8 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f04f 0200 	mov.w	r2, #0
 8005ac6:	4bb1      	ldr	r3, [pc, #708]	; (8005d8c <compensate_pressure+0x34c>)
 8005ac8:	f7fa fec0 	bl	800084c <__aeabi_ddiv>
 8005acc:	4602      	mov	r2, r0
 8005ace:	460b      	mov	r3, r1
 8005ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fa fd22 	bl	8000524 <__aeabi_i2d>
 8005ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ae4:	f7fa fd88 	bl	80005f8 <__aeabi_dmul>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4610      	mov	r0, r2
 8005aee:	4619      	mov	r1, r3
 8005af0:	4602      	mov	r2, r0
 8005af2:	460b      	mov	r3, r1
 8005af4:	f7fa fbca 	bl	800028c <__adddf3>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b00:	f7fa fbc4 	bl	800028c <__adddf3>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8005b0c:	f04f 0200 	mov.w	r2, #0
 8005b10:	4b9f      	ldr	r3, [pc, #636]	; (8005d90 <compensate_pressure+0x350>)
 8005b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005b16:	f7fa fe99 	bl	800084c <__aeabi_ddiv>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4614      	mov	r4, r2
 8005b20:	461d      	mov	r5, r3
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f7fa fcfb 	bl	8000524 <__aeabi_i2d>
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	4b98      	ldr	r3, [pc, #608]	; (8005d94 <compensate_pressure+0x354>)
 8005b34:	f7fa fd60 	bl	80005f8 <__aeabi_dmul>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa fba4 	bl	800028c <__adddf3>
 8005b44:	4602      	mov	r2, r0
 8005b46:	460b      	mov	r3, r1
 8005b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7fa fce6 	bl	8000524 <__aeabi_i2d>
 8005b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b5c:	f7fa fd4c 	bl	80005f8 <__aeabi_dmul>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b6c:	f7fa fd44 	bl	80005f8 <__aeabi_dmul>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4610      	mov	r0, r2
 8005b76:	4619      	mov	r1, r3
 8005b78:	f04f 0200 	mov.w	r2, #0
 8005b7c:	4b86      	ldr	r3, [pc, #536]	; (8005d98 <compensate_pressure+0x358>)
 8005b7e:	f7fa fe65 	bl	800084c <__aeabi_ddiv>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7fa fcc7 	bl	8000524 <__aeabi_i2d>
 8005b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b9a:	f7fa fd2d 	bl	80005f8 <__aeabi_dmul>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4610      	mov	r0, r2
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005baa:	f7fa fb6f 	bl	800028c <__adddf3>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	4610      	mov	r0, r2
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	f04f 0200 	mov.w	r2, #0
 8005bba:	4b77      	ldr	r3, [pc, #476]	; (8005d98 <compensate_pressure+0x358>)
 8005bbc:	f7fa fe46 	bl	800084c <__aeabi_ddiv>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	4b6f      	ldr	r3, [pc, #444]	; (8005d8c <compensate_pressure+0x34c>)
 8005bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005bd2:	f7fa fe3b 	bl	800084c <__aeabi_ddiv>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	4610      	mov	r0, r2
 8005bdc:	4619      	mov	r1, r3
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	4b6e      	ldr	r3, [pc, #440]	; (8005d9c <compensate_pressure+0x35c>)
 8005be4:	f7fa fb52 	bl	800028c <__adddf3>
 8005be8:	4602      	mov	r2, r0
 8005bea:	460b      	mov	r3, r1
 8005bec:	4614      	mov	r4, r2
 8005bee:	461d      	mov	r5, r3
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	88db      	ldrh	r3, [r3, #6]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7fa fc85 	bl	8000504 <__aeabi_ui2d>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4620      	mov	r0, r4
 8005c00:	4629      	mov	r1, r5
 8005c02:	f7fa fcf9 	bl	80005f8 <__aeabi_dmul>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8005c0e:	f04f 0200 	mov.w	r2, #0
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005c1a:	f7fa ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	f040 80cd 	bne.w	8005dc0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fa fc6a 	bl	8000504 <__aeabi_ui2d>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	f04f 0000 	mov.w	r0, #0
 8005c38:	4959      	ldr	r1, [pc, #356]	; (8005da0 <compensate_pressure+0x360>)
 8005c3a:	f7fa fb25 	bl	8000288 <__aeabi_dsub>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	4b56      	ldr	r3, [pc, #344]	; (8005da4 <compensate_pressure+0x364>)
 8005c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005c50:	f7fa fdfc 	bl	800084c <__aeabi_ddiv>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005c5c:	f7fa fb14 	bl	8000288 <__aeabi_dsub>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4610      	mov	r0, r2
 8005c66:	4619      	mov	r1, r3
 8005c68:	a345      	add	r3, pc, #276	; (adr r3, 8005d80 <compensate_pressure+0x340>)
 8005c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6e:	f7fa fcc3 	bl	80005f8 <__aeabi_dmul>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c7e:	f7fa fde5 	bl	800084c <__aeabi_ddiv>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fa fc47 	bl	8000524 <__aeabi_i2d>
 8005c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c9a:	f7fa fcad 	bl	80005f8 <__aeabi_dmul>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005caa:	f7fa fca5 	bl	80005f8 <__aeabi_dmul>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	4b3b      	ldr	r3, [pc, #236]	; (8005da8 <compensate_pressure+0x368>)
 8005cbc:	f7fa fdc6 	bl	800084c <__aeabi_ddiv>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7fa fc28 	bl	8000524 <__aeabi_i2d>
 8005cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cd8:	f7fa fc8e 	bl	80005f8 <__aeabi_dmul>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	4b28      	ldr	r3, [pc, #160]	; (8005d8c <compensate_pressure+0x34c>)
 8005cea:	f7fa fdaf 	bl	800084c <__aeabi_ddiv>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8005cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005cfe:	f7fa fac5 	bl	800028c <__adddf3>
 8005d02:	4602      	mov	r2, r0
 8005d04:	460b      	mov	r3, r1
 8005d06:	4614      	mov	r4, r2
 8005d08:	461d      	mov	r5, r3
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f7fa fc07 	bl	8000524 <__aeabi_i2d>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4620      	mov	r0, r4
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	f7fa fab5 	bl	800028c <__adddf3>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4610      	mov	r0, r2
 8005d28:	4619      	mov	r1, r3
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <compensate_pressure+0x36c>)
 8005d30:	f7fa fd8c 	bl	800084c <__aeabi_ddiv>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005d3c:	f7fa faa6 	bl	800028c <__adddf3>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8005d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005d50:	f7fa fec4 	bl	8000adc <__aeabi_dcmplt>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d004      	beq.n	8005d64 <compensate_pressure+0x324>
			pressure = pressure_min;
 8005d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005d62:	e031      	b.n	8005dc8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8005d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8005d6c:	f7fa fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d028      	beq.n	8005dc8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8005d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8005d7e:	e023      	b.n	8005dc8 <compensate_pressure+0x388>
 8005d80:	00000000 	.word	0x00000000
 8005d84:	40b86a00 	.word	0x40b86a00
 8005d88:	40ef4000 	.word	0x40ef4000
 8005d8c:	40e00000 	.word	0x40e00000
 8005d90:	40100000 	.word	0x40100000
 8005d94:	40f00000 	.word	0x40f00000
 8005d98:	41200000 	.word	0x41200000
 8005d9c:	3ff00000 	.word	0x3ff00000
 8005da0:	41300000 	.word	0x41300000
 8005da4:	40b00000 	.word	0x40b00000
 8005da8:	41e00000 	.word	0x41e00000
 8005dac:	40300000 	.word	0x40300000
 8005db0:	00000000 	.word	0x00000000
 8005db4:	40dd4c00 	.word	0x40dd4c00
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8005dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8005dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005dcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8005dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8005dd4:	eef0 0a67 	vmov.f32	s1, s15
 8005dd8:	3738      	adds	r7, #56	; 0x38
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8005dde:	bf00      	nop

08005de0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8005de0:	b5b0      	push	{r4, r5, r7, lr}
 8005de2:	b094      	sub	sp, #80	; 0x50
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	f04f 0300 	mov.w	r3, #0
 8005df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8005df6:	f04f 0200 	mov.w	r2, #0
 8005dfa:	4b81      	ldr	r3, [pc, #516]	; (8006000 <compensate_humidity+0x220>)
 8005dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	4618      	mov	r0, r3
 8005e06:	f7fa fb8d 	bl	8000524 <__aeabi_i2d>
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	4b7d      	ldr	r3, [pc, #500]	; (8006004 <compensate_humidity+0x224>)
 8005e10:	f7fa fa3a 	bl	8000288 <__aeabi_dsub>
 8005e14:	4602      	mov	r2, r0
 8005e16:	460b      	mov	r3, r1
 8005e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7fa fb7e 	bl	8000524 <__aeabi_i2d>
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	4b76      	ldr	r3, [pc, #472]	; (8006008 <compensate_humidity+0x228>)
 8005e2e:	f7fa fbe3 	bl	80005f8 <__aeabi_dmul>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	4614      	mov	r4, r2
 8005e38:	461d      	mov	r5, r3
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fa fb6f 	bl	8000524 <__aeabi_i2d>
 8005e46:	f04f 0200 	mov.w	r2, #0
 8005e4a:	4b70      	ldr	r3, [pc, #448]	; (800600c <compensate_humidity+0x22c>)
 8005e4c:	f7fa fcfe 	bl	800084c <__aeabi_ddiv>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e5c:	f7fa fbcc 	bl	80005f8 <__aeabi_dmul>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4620      	mov	r0, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	f7fa fa10 	bl	800028c <__adddf3>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fa fb43 	bl	8000504 <__aeabi_ui2d>
 8005e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e82:	f7fa fa01 	bl	8000288 <__aeabi_dsub>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f7fa fb45 	bl	8000524 <__aeabi_i2d>
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	4b5c      	ldr	r3, [pc, #368]	; (8006010 <compensate_humidity+0x230>)
 8005ea0:	f7fa fcd4 	bl	800084c <__aeabi_ddiv>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	7f1b      	ldrb	r3, [r3, #28]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fa fb27 	bl	8000504 <__aeabi_ui2d>
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	4b56      	ldr	r3, [pc, #344]	; (8006014 <compensate_humidity+0x234>)
 8005ebc:	f7fa fcc6 	bl	800084c <__aeabi_ddiv>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ecc:	f7fa fb94 	bl	80005f8 <__aeabi_dmul>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	4b4e      	ldr	r3, [pc, #312]	; (8006018 <compensate_humidity+0x238>)
 8005ede:	f7fa f9d5 	bl	800028c <__adddf3>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fb17 	bl	8000524 <__aeabi_i2d>
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	4b46      	ldr	r3, [pc, #280]	; (8006014 <compensate_humidity+0x234>)
 8005efc:	f7fa fca6 	bl	800084c <__aeabi_ddiv>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4610      	mov	r0, r2
 8005f06:	4619      	mov	r1, r3
 8005f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f0c:	f7fa fb74 	bl	80005f8 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4610      	mov	r0, r2
 8005f16:	4619      	mov	r1, r3
 8005f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f1c:	f7fa fb6c 	bl	80005f8 <__aeabi_dmul>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4610      	mov	r0, r2
 8005f26:	4619      	mov	r1, r3
 8005f28:	f04f 0200 	mov.w	r2, #0
 8005f2c:	4b3a      	ldr	r3, [pc, #232]	; (8006018 <compensate_humidity+0x238>)
 8005f2e:	f7fa f9ad 	bl	800028c <__adddf3>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8005f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005f42:	f7fa fb59 	bl	80005f8 <__aeabi_dmul>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	461d      	mov	r5, r3
 8005f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005f56:	f7fa fb4f 	bl	80005f8 <__aeabi_dmul>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	4620      	mov	r0, r4
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7fa fb49 	bl	80005f8 <__aeabi_dmul>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	7e1b      	ldrb	r3, [r3, #24]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa fac6 	bl	8000504 <__aeabi_ui2d>
 8005f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f7c:	f7fa fb3c 	bl	80005f8 <__aeabi_dmul>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4610      	mov	r0, r2
 8005f86:	4619      	mov	r1, r3
 8005f88:	f04f 0200 	mov.w	r2, #0
 8005f8c:	4b23      	ldr	r3, [pc, #140]	; (800601c <compensate_humidity+0x23c>)
 8005f8e:	f7fa fc5d 	bl	800084c <__aeabi_ddiv>
 8005f92:	4602      	mov	r2, r0
 8005f94:	460b      	mov	r3, r1
 8005f96:	f04f 0000 	mov.w	r0, #0
 8005f9a:	491f      	ldr	r1, [pc, #124]	; (8006018 <compensate_humidity+0x238>)
 8005f9c:	f7fa f974 	bl	8000288 <__aeabi_dsub>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	460b      	mov	r3, r1
 8005fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005fa8:	f7fa fb26 	bl	80005f8 <__aeabi_dmul>
 8005fac:	4602      	mov	r2, r0
 8005fae:	460b      	mov	r3, r1
 8005fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8005fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fbc:	f7fa fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d004      	beq.n	8005fd0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8005fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8005fce:	e00c      	b.n	8005fea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8005fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005fd8:	f7fa fd80 	bl	8000adc <__aeabi_dcmplt>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <compensate_humidity+0x20a>
		humidity = humidity_min;
 8005fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8005fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8005ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8005ff6:	eef0 0a67 	vmov.f32	s1, s15
 8005ffa:	3750      	adds	r7, #80	; 0x50
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8006000:	40590000 	.word	0x40590000
 8006004:	40f2c000 	.word	0x40f2c000
 8006008:	40500000 	.word	0x40500000
 800600c:	40d00000 	.word	0x40d00000
 8006010:	40f00000 	.word	0x40f00000
 8006014:	41900000 	.word	0x41900000
 8006018:	3ff00000 	.word	0x3ff00000
 800601c:	41200000 	.word	0x41200000

08006020 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8006028:	2388      	movs	r3, #136	; 0x88
 800602a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800602e:	2300      	movs	r3, #0
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	f107 0310 	add.w	r3, r7, #16
 8006036:	2200      	movs	r2, #0
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	605a      	str	r2, [r3, #4]
 800603c:	609a      	str	r2, [r3, #8]
 800603e:	60da      	str	r2, [r3, #12]
 8006040:	611a      	str	r2, [r3, #16]
 8006042:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8006044:	f107 010c 	add.w	r1, r7, #12
 8006048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	221a      	movs	r2, #26
 8006050:	f7fe ffbf 	bl	8004fd2 <bme280_get_regs>
 8006054:	4603      	mov	r3, r0
 8006056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800605a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11d      	bne.n	800609e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8006062:	f107 030c 	add.w	r3, r7, #12
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 f84a 	bl	8006102 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800606e:	23e1      	movs	r3, #225	; 0xe1
 8006070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8006074:	f107 010c 	add.w	r1, r7, #12
 8006078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2207      	movs	r2, #7
 8006080:	f7fe ffa7 	bl	8004fd2 <bme280_get_regs>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800608a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8006092:	f107 030c 	add.w	r3, r7, #12
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	4618      	mov	r0, r3
 800609a:	f000 f8e1 	bl	8006260 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800609e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3728      	adds	r7, #40	; 0x28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b087      	sub	sp, #28
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	60f8      	str	r0, [r7, #12]
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]
 80060bc:	e016      	b.n	80060ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80060be:	7dfb      	ldrb	r3, [r7, #23]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	441a      	add	r2, r3
 80060c4:	7dfb      	ldrb	r3, [r7, #23]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	3b01      	subs	r3, #1
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	440b      	add	r3, r1
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80060d2:	7dfb      	ldrb	r3, [r7, #23]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	441a      	add	r2, r3
 80060d8:	7dfb      	ldrb	r3, [r7, #23]
 80060da:	005b      	lsls	r3, r3, #1
 80060dc:	4619      	mov	r1, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	440b      	add	r3, r1
 80060e2:	7812      	ldrb	r2, [r2, #0]
 80060e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80060e6:	7dfb      	ldrb	r3, [r7, #23]
 80060e8:	3301      	adds	r3, #1
 80060ea:	75fb      	strb	r3, [r7, #23]
 80060ec:	7dfa      	ldrb	r2, [r7, #23]
 80060ee:	78fb      	ldrb	r3, [r7, #3]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d3e4      	bcc.n	80060be <interleave_reg_addr+0x14>
	}
}
 80060f4:	bf00      	nop
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	3310      	adds	r3, #16
 8006110:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3301      	adds	r3, #1
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	b21a      	sxth	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	b21b      	sxth	r3, r3
 8006122:	4313      	orrs	r3, r2
 8006124:	b21b      	sxth	r3, r3
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3303      	adds	r3, #3
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	021b      	lsls	r3, r3, #8
 8006134:	b21a      	sxth	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3302      	adds	r3, #2
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	b21b      	sxth	r3, r3
 800613e:	4313      	orrs	r3, r2
 8006140:	b21a      	sxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3305      	adds	r3, #5
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	b21a      	sxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3304      	adds	r3, #4
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b21b      	sxth	r3, r3
 8006158:	4313      	orrs	r3, r2
 800615a:	b21a      	sxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3307      	adds	r3, #7
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	021b      	lsls	r3, r3, #8
 8006168:	b21a      	sxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	3306      	adds	r3, #6
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	b21b      	sxth	r3, r3
 8006172:	4313      	orrs	r3, r2
 8006174:	b21b      	sxth	r3, r3
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3309      	adds	r3, #9
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	b21a      	sxth	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	3308      	adds	r3, #8
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	b21b      	sxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b21a      	sxth	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	330b      	adds	r3, #11
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	021b      	lsls	r3, r3, #8
 800619e:	b21a      	sxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	330a      	adds	r3, #10
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	b21b      	sxth	r3, r3
 80061a8:	4313      	orrs	r3, r2
 80061aa:	b21a      	sxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	330d      	adds	r3, #13
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	021b      	lsls	r3, r3, #8
 80061b8:	b21a      	sxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	330c      	adds	r3, #12
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b21b      	sxth	r3, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	b21a      	sxth	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	330f      	adds	r3, #15
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	b21a      	sxth	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	330e      	adds	r3, #14
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	b21b      	sxth	r3, r3
 80061dc:	4313      	orrs	r3, r2
 80061de:	b21a      	sxth	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3311      	adds	r3, #17
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	b21a      	sxth	r2, r3
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3310      	adds	r3, #16
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	b21b      	sxth	r3, r3
 80061f6:	4313      	orrs	r3, r2
 80061f8:	b21a      	sxth	r2, r3
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3313      	adds	r3, #19
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	021b      	lsls	r3, r3, #8
 8006206:	b21a      	sxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3312      	adds	r3, #18
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	b21b      	sxth	r3, r3
 8006210:	4313      	orrs	r3, r2
 8006212:	b21a      	sxth	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	3315      	adds	r3, #21
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	021b      	lsls	r3, r3, #8
 8006220:	b21a      	sxth	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3314      	adds	r3, #20
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	b21b      	sxth	r3, r3
 800622a:	4313      	orrs	r3, r2
 800622c:	b21a      	sxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	3317      	adds	r3, #23
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	b21a      	sxth	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	3316      	adds	r3, #22
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b21b      	sxth	r3, r3
 8006244:	4313      	orrs	r3, r2
 8006246:	b21a      	sxth	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7e5a      	ldrb	r2, [r3, #25]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	761a      	strb	r2, [r3, #24]

}
 8006254:	bf00      	nop
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8006260:	b480      	push	{r7}
 8006262:	b087      	sub	sp, #28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	3310      	adds	r3, #16
 800626e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3301      	adds	r3, #1
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	021b      	lsls	r3, r3, #8
 8006278:	b21a      	sxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	b21b      	sxth	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b21a      	sxth	r2, r3
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	789a      	ldrb	r2, [r3, #2]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3303      	adds	r3, #3
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	b25b      	sxtb	r3, r3
 8006298:	b29b      	uxth	r3, r3
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	b29b      	uxth	r3, r3
 800629e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80062ae:	8a7a      	ldrh	r2, [r7, #18]
 80062b0:	8a3b      	ldrh	r3, [r7, #16]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b21a      	sxth	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3305      	adds	r3, #5
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	b25b      	sxtb	r3, r3
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	011b      	lsls	r3, r3, #4
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	3304      	adds	r3, #4
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80062d6:	89fa      	ldrh	r2, [r7, #14]
 80062d8:	89bb      	ldrh	r3, [r7, #12]
 80062da:	4313      	orrs	r3, r2
 80062dc:	b21a      	sxth	r2, r3
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3306      	adds	r3, #6
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	b25a      	sxtb	r2, r3
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80062f0:	bf00      	nop
 80062f2:	371c      	adds	r7, #28
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	460a      	mov	r2, r1
 8006306:	71fb      	strb	r3, [r7, #7]
 8006308:	4613      	mov	r3, r2
 800630a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8006310:	79fa      	ldrb	r2, [r7, #7]
 8006312:	79bb      	ldrb	r3, [r7, #6]
 8006314:	4013      	ands	r3, r2
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
 8006320:	e001      	b.n	8006326 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8006326:	7bfb      	ldrb	r3, [r7, #15]
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8006334:	b480      	push	{r7}
 8006336:	b085      	sub	sp, #20
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <null_ptr_check+0x26>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d007      	beq.n	800635a <null_ptr_check+0x26>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <null_ptr_check+0x26>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800635a:	23ff      	movs	r3, #255	; 0xff
 800635c:	73fb      	strb	r3, [r7, #15]
 800635e:	e001      	b.n	8006364 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8006364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006374:	f8df d034 	ldr.w	sp, [pc, #52]	; 80063ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006378:	480d      	ldr	r0, [pc, #52]	; (80063b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800637a:	490e      	ldr	r1, [pc, #56]	; (80063b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800637c:	4a0e      	ldr	r2, [pc, #56]	; (80063b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800637e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006380:	e002      	b.n	8006388 <LoopCopyDataInit>

08006382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006386:	3304      	adds	r3, #4

08006388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800638a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800638c:	d3f9      	bcc.n	8006382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800638e:	4a0b      	ldr	r2, [pc, #44]	; (80063bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006390:	4c0b      	ldr	r4, [pc, #44]	; (80063c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006394:	e001      	b.n	800639a <LoopFillZerobss>

08006396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006398:	3204      	adds	r2, #4

0800639a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800639a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800639c:	d3fb      	bcc.n	8006396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800639e:	f7fe fdbb 	bl	8004f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80063a2:	f011 fc03 	bl	8017bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80063a6:	f7fc fc0f 	bl	8002bc8 <main>
  bx  lr    
 80063aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80063ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80063b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80063b4:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 80063b8:	0801f7ac 	.word	0x0801f7ac
  ldr r2, =_sbss
 80063bc:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 80063c0:	20014990 	.word	0x20014990

080063c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80063c4:	e7fe      	b.n	80063c4 <ADC_IRQHandler>
	...

080063c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <HAL_Init+0x40>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a0d      	ldr	r2, [pc, #52]	; (8006408 <HAL_Init+0x40>)
 80063d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <HAL_Init+0x40>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a0a      	ldr	r2, [pc, #40]	; (8006408 <HAL_Init+0x40>)
 80063de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80063e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063e4:	4b08      	ldr	r3, [pc, #32]	; (8006408 <HAL_Init+0x40>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a07      	ldr	r2, [pc, #28]	; (8006408 <HAL_Init+0x40>)
 80063ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063f0:	2003      	movs	r0, #3
 80063f2:	f000 f920 	bl	8006636 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063f6:	200f      	movs	r0, #15
 80063f8:	f7fe fc0e 	bl	8004c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063fc:	f7fe f95a 	bl	80046b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	40023c00 	.word	0x40023c00

0800640c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006410:	4b06      	ldr	r3, [pc, #24]	; (800642c <HAL_IncTick+0x20>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	4b06      	ldr	r3, [pc, #24]	; (8006430 <HAL_IncTick+0x24>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4413      	add	r3, r2
 800641c:	4a04      	ldr	r2, [pc, #16]	; (8006430 <HAL_IncTick+0x24>)
 800641e:	6013      	str	r3, [r2, #0]
}
 8006420:	bf00      	nop
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000038 	.word	0x20000038
 8006430:	20010ff0 	.word	0x20010ff0

08006434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006434:	b480      	push	{r7}
 8006436:	af00      	add	r7, sp, #0
  return uwTick;
 8006438:	4b03      	ldr	r3, [pc, #12]	; (8006448 <HAL_GetTick+0x14>)
 800643a:	681b      	ldr	r3, [r3, #0]
}
 800643c:	4618      	mov	r0, r3
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	20010ff0 	.word	0x20010ff0

0800644c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006454:	f7ff ffee 	bl	8006434 <HAL_GetTick>
 8006458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006464:	d005      	beq.n	8006472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006466:	4b0a      	ldr	r3, [pc, #40]	; (8006490 <HAL_Delay+0x44>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	461a      	mov	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	4413      	add	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006472:	bf00      	nop
 8006474:	f7ff ffde 	bl	8006434 <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	68fa      	ldr	r2, [r7, #12]
 8006480:	429a      	cmp	r2, r3
 8006482:	d8f7      	bhi.n	8006474 <HAL_Delay+0x28>
  {
  }
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000038 	.word	0x20000038

08006494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f003 0307 	and.w	r3, r3, #7
 80064a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <__NVIC_SetPriorityGrouping+0x44>)
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80064b0:	4013      	ands	r3, r2
 80064b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80064c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064c6:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <__NVIC_SetPriorityGrouping+0x44>)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	60d3      	str	r3, [r2, #12]
}
 80064cc:	bf00      	nop
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	e000ed00 	.word	0xe000ed00

080064dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064dc:	b480      	push	{r7}
 80064de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064e0:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <__NVIC_GetPriorityGrouping+0x18>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	0a1b      	lsrs	r3, r3, #8
 80064e6:	f003 0307 	and.w	r3, r3, #7
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	e000ed00 	.word	0xe000ed00

080064f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	4603      	mov	r3, r0
 8006500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006506:	2b00      	cmp	r3, #0
 8006508:	db0b      	blt.n	8006522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800650a:	79fb      	ldrb	r3, [r7, #7]
 800650c:	f003 021f 	and.w	r2, r3, #31
 8006510:	4907      	ldr	r1, [pc, #28]	; (8006530 <__NVIC_EnableIRQ+0x38>)
 8006512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	2001      	movs	r0, #1
 800651a:	fa00 f202 	lsl.w	r2, r0, r2
 800651e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006522:	bf00      	nop
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	e000e100 	.word	0xe000e100

08006534 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	4603      	mov	r3, r0
 800653c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800653e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006542:	2b00      	cmp	r3, #0
 8006544:	db12      	blt.n	800656c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006546:	79fb      	ldrb	r3, [r7, #7]
 8006548:	f003 021f 	and.w	r2, r3, #31
 800654c:	490a      	ldr	r1, [pc, #40]	; (8006578 <__NVIC_DisableIRQ+0x44>)
 800654e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	2001      	movs	r0, #1
 8006556:	fa00 f202 	lsl.w	r2, r0, r2
 800655a:	3320      	adds	r3, #32
 800655c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006560:	f3bf 8f4f 	dsb	sy
}
 8006564:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006566:	f3bf 8f6f 	isb	sy
}
 800656a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800656c:	bf00      	nop
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	e000e100 	.word	0xe000e100

0800657c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	4603      	mov	r3, r0
 8006584:	6039      	str	r1, [r7, #0]
 8006586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800658c:	2b00      	cmp	r3, #0
 800658e:	db0a      	blt.n	80065a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	b2da      	uxtb	r2, r3
 8006594:	490c      	ldr	r1, [pc, #48]	; (80065c8 <__NVIC_SetPriority+0x4c>)
 8006596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659a:	0112      	lsls	r2, r2, #4
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	440b      	add	r3, r1
 80065a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065a4:	e00a      	b.n	80065bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	4908      	ldr	r1, [pc, #32]	; (80065cc <__NVIC_SetPriority+0x50>)
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	3b04      	subs	r3, #4
 80065b4:	0112      	lsls	r2, r2, #4
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	440b      	add	r3, r1
 80065ba:	761a      	strb	r2, [r3, #24]
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr
 80065c8:	e000e100 	.word	0xe000e100
 80065cc:	e000ed00 	.word	0xe000ed00

080065d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b089      	sub	sp, #36	; 0x24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	f1c3 0307 	rsb	r3, r3, #7
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	bf28      	it	cs
 80065ee:	2304      	movcs	r3, #4
 80065f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	3304      	adds	r3, #4
 80065f6:	2b06      	cmp	r3, #6
 80065f8:	d902      	bls.n	8006600 <NVIC_EncodePriority+0x30>
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	3b03      	subs	r3, #3
 80065fe:	e000      	b.n	8006602 <NVIC_EncodePriority+0x32>
 8006600:	2300      	movs	r3, #0
 8006602:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006604:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	43da      	mvns	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	401a      	ands	r2, r3
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006618:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	fa01 f303 	lsl.w	r3, r1, r3
 8006622:	43d9      	mvns	r1, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006628:	4313      	orrs	r3, r2
         );
}
 800662a:	4618      	mov	r0, r3
 800662c:	3724      	adds	r7, #36	; 0x24
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b082      	sub	sp, #8
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7ff ff28 	bl	8006494 <__NVIC_SetPriorityGrouping>
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800665a:	2300      	movs	r3, #0
 800665c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800665e:	f7ff ff3d 	bl	80064dc <__NVIC_GetPriorityGrouping>
 8006662:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	68b9      	ldr	r1, [r7, #8]
 8006668:	6978      	ldr	r0, [r7, #20]
 800666a:	f7ff ffb1 	bl	80065d0 <NVIC_EncodePriority>
 800666e:	4602      	mov	r2, r0
 8006670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006674:	4611      	mov	r1, r2
 8006676:	4618      	mov	r0, r3
 8006678:	f7ff ff80 	bl	800657c <__NVIC_SetPriority>
}
 800667c:	bf00      	nop
 800667e:	3718      	adds	r7, #24
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	4618      	mov	r0, r3
 8006694:	f7ff ff30 	bl	80064f8 <__NVIC_EnableIRQ>
}
 8006698:	bf00      	nop
 800669a:	3708      	adds	r7, #8
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	4603      	mov	r3, r0
 80066a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80066aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7ff ff40 	bl	8006534 <__NVIC_DisableIRQ>
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066c8:	f7ff feb4 	bl	8006434 <HAL_GetTick>
 80066cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e099      	b.n	800680c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0201 	bic.w	r2, r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066f8:	e00f      	b.n	800671a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066fa:	f7ff fe9b 	bl	8006434 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b05      	cmp	r3, #5
 8006706:	d908      	bls.n	800671a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2220      	movs	r2, #32
 800670c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2203      	movs	r2, #3
 8006712:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e078      	b.n	800680c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1e8      	bne.n	80066fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4b38      	ldr	r3, [pc, #224]	; (8006814 <HAL_DMA_Init+0x158>)
 8006734:	4013      	ands	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006746:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006752:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a1b      	ldr	r3, [r3, #32]
 8006764:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	2b04      	cmp	r3, #4
 8006772:	d107      	bne.n	8006784 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	4313      	orrs	r3, r2
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	f023 0307 	bic.w	r3, r3, #7
 800679a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	697a      	ldr	r2, [r7, #20]
 80067a2:	4313      	orrs	r3, r2
 80067a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b04      	cmp	r3, #4
 80067ac:	d117      	bne.n	80067de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	697a      	ldr	r2, [r7, #20]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d00e      	beq.n	80067de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fb5f 	bl	8006e84 <DMA_CheckFifoParam>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d008      	beq.n	80067de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2240      	movs	r2, #64	; 0x40
 80067d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067da:	2301      	movs	r3, #1
 80067dc:	e016      	b.n	800680c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb16 	bl	8006e18 <DMA_CalcBaseAndBitshift>
 80067ec:	4603      	mov	r3, r0
 80067ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f4:	223f      	movs	r2, #63	; 0x3f
 80067f6:	409a      	lsls	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3718      	adds	r7, #24
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	f010803f 	.word	0xf010803f

08006818 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e050      	b.n	80068cc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b02      	cmp	r3, #2
 8006834:	d101      	bne.n	800683a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
 8006838:	e048      	b.n	80068cc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2221      	movs	r2, #33	; 0x21
 8006878:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 facc 	bl	8006e18 <DMA_CalcBaseAndBitshift>
 8006880:	4603      	mov	r3, r0
 8006882:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ac:	223f      	movs	r2, #63	; 0x3f
 80068ae:	409a      	lsls	r2, r3
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d101      	bne.n	80068fa <HAL_DMA_Start_IT+0x26>
 80068f6:	2302      	movs	r3, #2
 80068f8:	e040      	b.n	800697c <HAL_DMA_Start_IT+0xa8>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2201      	movs	r2, #1
 80068fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b01      	cmp	r3, #1
 800690c:	d12f      	bne.n	800696e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2202      	movs	r2, #2
 8006912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	68b9      	ldr	r1, [r7, #8]
 8006922:	68f8      	ldr	r0, [r7, #12]
 8006924:	f000 fa4a 	bl	8006dbc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692c:	223f      	movs	r2, #63	; 0x3f
 800692e:	409a      	lsls	r2, r3
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0216 	orr.w	r2, r2, #22
 8006942:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	d007      	beq.n	800695c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f042 0208 	orr.w	r2, r2, #8
 800695a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0201 	orr.w	r2, r2, #1
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	e005      	b.n	800697a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800697a:	7dfb      	ldrb	r3, [r7, #23]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006990:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006992:	f7ff fd4f 	bl	8006434 <HAL_GetTick>
 8006996:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d008      	beq.n	80069b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2280      	movs	r2, #128	; 0x80
 80069a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e052      	b.n	8006a5c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0216 	bic.w	r2, r2, #22
 80069c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695a      	ldr	r2, [r3, #20]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d103      	bne.n	80069e6 <HAL_DMA_Abort+0x62>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0208 	bic.w	r2, r2, #8
 80069f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0201 	bic.w	r2, r2, #1
 8006a04:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a06:	e013      	b.n	8006a30 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006a08:	f7ff fd14 	bl	8006434 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b05      	cmp	r3, #5
 8006a14:	d90c      	bls.n	8006a30 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2203      	movs	r2, #3
 8006a20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e015      	b.n	8006a5c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d1e4      	bne.n	8006a08 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a42:	223f      	movs	r2, #63	; 0x3f
 8006a44:	409a      	lsls	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d004      	beq.n	8006a82 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2280      	movs	r2, #128	; 0x80
 8006a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e00c      	b.n	8006a9c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2205      	movs	r2, #5
 8006a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f022 0201 	bic.w	r2, r2, #1
 8006a98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006ab4:	4b92      	ldr	r3, [pc, #584]	; (8006d00 <HAL_DMA_IRQHandler+0x258>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a92      	ldr	r2, [pc, #584]	; (8006d04 <HAL_DMA_IRQHandler+0x25c>)
 8006aba:	fba2 2303 	umull	r2, r3, r2, r3
 8006abe:	0a9b      	lsrs	r3, r3, #10
 8006ac0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d01a      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0304 	and.w	r3, r3, #4
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d013      	beq.n	8006b14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0204 	bic.w	r2, r2, #4
 8006afa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b00:	2208      	movs	r2, #8
 8006b02:	409a      	lsls	r2, r3
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b0c:	f043 0201 	orr.w	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b18:	2201      	movs	r2, #1
 8006b1a:	409a      	lsls	r2, r3
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	4013      	ands	r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d012      	beq.n	8006b4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	695b      	ldr	r3, [r3, #20]
 8006b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d00b      	beq.n	8006b4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b36:	2201      	movs	r2, #1
 8006b38:	409a      	lsls	r2, r3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b42:	f043 0202 	orr.w	r2, r3, #2
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b4e:	2204      	movs	r2, #4
 8006b50:	409a      	lsls	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4013      	ands	r3, r2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d012      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00b      	beq.n	8006b80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	409a      	lsls	r2, r3
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b78:	f043 0204 	orr.w	r2, r3, #4
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b84:	2210      	movs	r2, #16
 8006b86:	409a      	lsls	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4013      	ands	r3, r2
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d043      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d03c      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba2:	2210      	movs	r2, #16
 8006ba4:	409a      	lsls	r2, r3
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d018      	beq.n	8006bea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d108      	bne.n	8006bd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d024      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	e01f      	b.n	8006c18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01b      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
 8006be8:	e016      	b.n	8006c18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d107      	bne.n	8006c08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0208 	bic.w	r2, r2, #8
 8006c06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	409a      	lsls	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4013      	ands	r3, r2
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	f000 808e 	beq.w	8006d46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0310 	and.w	r3, r3, #16
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f000 8086 	beq.w	8006d46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	2220      	movs	r2, #32
 8006c40:	409a      	lsls	r2, r3
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d136      	bne.n	8006cc0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0216 	bic.w	r2, r2, #22
 8006c60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d103      	bne.n	8006c82 <HAL_DMA_IRQHandler+0x1da>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0208 	bic.w	r2, r2, #8
 8006c90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	223f      	movs	r2, #63	; 0x3f
 8006c98:	409a      	lsls	r2, r3
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d07d      	beq.n	8006db2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
        }
        return;
 8006cbe:	e078      	b.n	8006db2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d01c      	beq.n	8006d08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d108      	bne.n	8006cee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d030      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	4798      	blx	r3
 8006cec:	e02b      	b.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d027      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
 8006cfe:	e022      	b.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
 8006d00:	20000030 	.word	0x20000030
 8006d04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10f      	bne.n	8006d36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0210 	bic.w	r2, r2, #16
 8006d24:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d032      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d022      	beq.n	8006da0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2205      	movs	r2, #5
 8006d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0201 	bic.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	3301      	adds	r3, #1
 8006d76:	60bb      	str	r3, [r7, #8]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d307      	bcc.n	8006d8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f2      	bne.n	8006d72 <HAL_DMA_IRQHandler+0x2ca>
 8006d8c:	e000      	b.n	8006d90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006d8e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d005      	beq.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
 8006db0:	e000      	b.n	8006db4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006db2:	bf00      	nop
    }
  }
}
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop

08006dbc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	60f8      	str	r0, [r7, #12]
 8006dc4:	60b9      	str	r1, [r7, #8]
 8006dc6:	607a      	str	r2, [r7, #4]
 8006dc8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006dd8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d108      	bne.n	8006dfc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006dfa:	e007      	b.n	8006e0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	687a      	ldr	r2, [r7, #4]
 8006e0a:	60da      	str	r2, [r3, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	3b10      	subs	r3, #16
 8006e28:	4a14      	ldr	r2, [pc, #80]	; (8006e7c <DMA_CalcBaseAndBitshift+0x64>)
 8006e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e2e:	091b      	lsrs	r3, r3, #4
 8006e30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <DMA_CalcBaseAndBitshift+0x68>)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4413      	add	r3, r2
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2b03      	cmp	r3, #3
 8006e44:	d909      	bls.n	8006e5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e4e:	f023 0303 	bic.w	r3, r3, #3
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	659a      	str	r2, [r3, #88]	; 0x58
 8006e58:	e007      	b.n	8006e6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	687a      	ldr	r2, [r7, #4]
 8006e68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	aaaaaaab 	.word	0xaaaaaaab
 8006e80:	0801ef48 	.word	0x0801ef48

08006e84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	699b      	ldr	r3, [r3, #24]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d11f      	bne.n	8006ede <DMA_CheckFifoParam+0x5a>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	2b03      	cmp	r3, #3
 8006ea2:	d856      	bhi.n	8006f52 <DMA_CheckFifoParam+0xce>
 8006ea4:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <DMA_CheckFifoParam+0x28>)
 8006ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eaa:	bf00      	nop
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ecf 	.word	0x08006ecf
 8006eb4:	08006ebd 	.word	0x08006ebd
 8006eb8:	08006f53 	.word	0x08006f53
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d046      	beq.n	8006f56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ecc:	e043      	b.n	8006f56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ed6:	d140      	bne.n	8006f5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006edc:	e03d      	b.n	8006f5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee6:	d121      	bne.n	8006f2c <DMA_CheckFifoParam+0xa8>
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d837      	bhi.n	8006f5e <DMA_CheckFifoParam+0xda>
 8006eee:	a201      	add	r2, pc, #4	; (adr r2, 8006ef4 <DMA_CheckFifoParam+0x70>)
 8006ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef4:	08006f05 	.word	0x08006f05
 8006ef8:	08006f0b 	.word	0x08006f0b
 8006efc:	08006f05 	.word	0x08006f05
 8006f00:	08006f1d 	.word	0x08006f1d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	73fb      	strb	r3, [r7, #15]
      break;
 8006f08:	e030      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d025      	beq.n	8006f62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f1a:	e022      	b.n	8006f62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f24:	d11f      	bne.n	8006f66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006f2a:	e01c      	b.n	8006f66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d903      	bls.n	8006f3a <DMA_CheckFifoParam+0xb6>
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b03      	cmp	r3, #3
 8006f36:	d003      	beq.n	8006f40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006f38:	e018      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3e:	e015      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00e      	beq.n	8006f6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8006f50:	e00b      	b.n	8006f6a <DMA_CheckFifoParam+0xe6>
      break;
 8006f52:	bf00      	nop
 8006f54:	e00a      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      break;
 8006f56:	bf00      	nop
 8006f58:	e008      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      break;
 8006f5a:	bf00      	nop
 8006f5c:	e006      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      break;
 8006f5e:	bf00      	nop
 8006f60:	e004      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      break;
 8006f62:	bf00      	nop
 8006f64:	e002      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      break;   
 8006f66:	bf00      	nop
 8006f68:	e000      	b.n	8006f6c <DMA_CheckFifoParam+0xe8>
      break;
 8006f6a:	bf00      	nop
    }
  } 
  
  return status; 
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop

08006f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b089      	sub	sp, #36	; 0x24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f92:	2300      	movs	r3, #0
 8006f94:	61fb      	str	r3, [r7, #28]
 8006f96:	e16b      	b.n	8007270 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006f98:	2201      	movs	r2, #1
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	f040 815a 	bne.w	800726a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f003 0303 	and.w	r3, r3, #3
 8006fbe:	2b01      	cmp	r3, #1
 8006fc0:	d005      	beq.n	8006fce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006fca:	2b02      	cmp	r3, #2
 8006fcc:	d130      	bne.n	8007030 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	2203      	movs	r2, #3
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	43db      	mvns	r3, r3
 8006fe0:	69ba      	ldr	r2, [r7, #24]
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	68da      	ldr	r2, [r3, #12]
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	005b      	lsls	r3, r3, #1
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	69ba      	ldr	r2, [r7, #24]
 8006ffc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007004:	2201      	movs	r2, #1
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	43db      	mvns	r3, r3
 800700e:	69ba      	ldr	r2, [r7, #24]
 8007010:	4013      	ands	r3, r2
 8007012:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	091b      	lsrs	r3, r3, #4
 800701a:	f003 0201 	and.w	r2, r3, #1
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	fa02 f303 	lsl.w	r3, r2, r3
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4313      	orrs	r3, r2
 8007028:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f003 0303 	and.w	r3, r3, #3
 8007038:	2b03      	cmp	r3, #3
 800703a:	d017      	beq.n	800706c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	2203      	movs	r2, #3
 8007048:	fa02 f303 	lsl.w	r3, r2, r3
 800704c:	43db      	mvns	r3, r3
 800704e:	69ba      	ldr	r2, [r7, #24]
 8007050:	4013      	ands	r3, r2
 8007052:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689a      	ldr	r2, [r3, #8]
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	005b      	lsls	r3, r3, #1
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4313      	orrs	r3, r2
 8007064:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f003 0303 	and.w	r3, r3, #3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d123      	bne.n	80070c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	08da      	lsrs	r2, r3, #3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3208      	adds	r2, #8
 8007080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007084:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007086:	69fb      	ldr	r3, [r7, #28]
 8007088:	f003 0307 	and.w	r3, r3, #7
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	220f      	movs	r2, #15
 8007090:	fa02 f303 	lsl.w	r3, r2, r3
 8007094:	43db      	mvns	r3, r3
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	4013      	ands	r3, r2
 800709a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	69fb      	ldr	r3, [r7, #28]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	69ba      	ldr	r2, [r7, #24]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	08da      	lsrs	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	3208      	adds	r2, #8
 80070ba:	69b9      	ldr	r1, [r7, #24]
 80070bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	2203      	movs	r2, #3
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	43db      	mvns	r3, r3
 80070d2:	69ba      	ldr	r2, [r7, #24]
 80070d4:	4013      	ands	r3, r2
 80070d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 0203 	and.w	r2, r3, #3
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 80b4 	beq.w	800726a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	4b60      	ldr	r3, [pc, #384]	; (8007288 <HAL_GPIO_Init+0x30c>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	4a5f      	ldr	r2, [pc, #380]	; (8007288 <HAL_GPIO_Init+0x30c>)
 800710c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007110:	6453      	str	r3, [r2, #68]	; 0x44
 8007112:	4b5d      	ldr	r3, [pc, #372]	; (8007288 <HAL_GPIO_Init+0x30c>)
 8007114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800711a:	60fb      	str	r3, [r7, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800711e:	4a5b      	ldr	r2, [pc, #364]	; (800728c <HAL_GPIO_Init+0x310>)
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	089b      	lsrs	r3, r3, #2
 8007124:	3302      	adds	r3, #2
 8007126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	220f      	movs	r2, #15
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	43db      	mvns	r3, r3
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	4013      	ands	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a52      	ldr	r2, [pc, #328]	; (8007290 <HAL_GPIO_Init+0x314>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d02b      	beq.n	80071a2 <HAL_GPIO_Init+0x226>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a51      	ldr	r2, [pc, #324]	; (8007294 <HAL_GPIO_Init+0x318>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d025      	beq.n	800719e <HAL_GPIO_Init+0x222>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a50      	ldr	r2, [pc, #320]	; (8007298 <HAL_GPIO_Init+0x31c>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d01f      	beq.n	800719a <HAL_GPIO_Init+0x21e>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a4f      	ldr	r2, [pc, #316]	; (800729c <HAL_GPIO_Init+0x320>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d019      	beq.n	8007196 <HAL_GPIO_Init+0x21a>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a4e      	ldr	r2, [pc, #312]	; (80072a0 <HAL_GPIO_Init+0x324>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d013      	beq.n	8007192 <HAL_GPIO_Init+0x216>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a4d      	ldr	r2, [pc, #308]	; (80072a4 <HAL_GPIO_Init+0x328>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d00d      	beq.n	800718e <HAL_GPIO_Init+0x212>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a4c      	ldr	r2, [pc, #304]	; (80072a8 <HAL_GPIO_Init+0x32c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d007      	beq.n	800718a <HAL_GPIO_Init+0x20e>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a4b      	ldr	r2, [pc, #300]	; (80072ac <HAL_GPIO_Init+0x330>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d101      	bne.n	8007186 <HAL_GPIO_Init+0x20a>
 8007182:	2307      	movs	r3, #7
 8007184:	e00e      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 8007186:	2308      	movs	r3, #8
 8007188:	e00c      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 800718a:	2306      	movs	r3, #6
 800718c:	e00a      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 800718e:	2305      	movs	r3, #5
 8007190:	e008      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 8007192:	2304      	movs	r3, #4
 8007194:	e006      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 8007196:	2303      	movs	r3, #3
 8007198:	e004      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 800719a:	2302      	movs	r3, #2
 800719c:	e002      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 800719e:	2301      	movs	r3, #1
 80071a0:	e000      	b.n	80071a4 <HAL_GPIO_Init+0x228>
 80071a2:	2300      	movs	r3, #0
 80071a4:	69fa      	ldr	r2, [r7, #28]
 80071a6:	f002 0203 	and.w	r2, r2, #3
 80071aa:	0092      	lsls	r2, r2, #2
 80071ac:	4093      	lsls	r3, r2
 80071ae:	69ba      	ldr	r2, [r7, #24]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80071b4:	4935      	ldr	r1, [pc, #212]	; (800728c <HAL_GPIO_Init+0x310>)
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	089b      	lsrs	r3, r3, #2
 80071ba:	3302      	adds	r3, #2
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071c2:	4b3b      	ldr	r3, [pc, #236]	; (80072b0 <HAL_GPIO_Init+0x334>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	43db      	mvns	r3, r3
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	4013      	ands	r3, r2
 80071d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d003      	beq.n	80071e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80071e6:	4a32      	ldr	r2, [pc, #200]	; (80072b0 <HAL_GPIO_Init+0x334>)
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80071ec:	4b30      	ldr	r3, [pc, #192]	; (80072b0 <HAL_GPIO_Init+0x334>)
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	43db      	mvns	r3, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4013      	ands	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	4313      	orrs	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007210:	4a27      	ldr	r2, [pc, #156]	; (80072b0 <HAL_GPIO_Init+0x334>)
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007216:	4b26      	ldr	r3, [pc, #152]	; (80072b0 <HAL_GPIO_Init+0x334>)
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	43db      	mvns	r3, r3
 8007220:	69ba      	ldr	r2, [r7, #24]
 8007222:	4013      	ands	r3, r2
 8007224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d003      	beq.n	800723a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007232:	69ba      	ldr	r2, [r7, #24]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4313      	orrs	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800723a:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <HAL_GPIO_Init+0x334>)
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007240:	4b1b      	ldr	r3, [pc, #108]	; (80072b0 <HAL_GPIO_Init+0x334>)
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	43db      	mvns	r3, r3
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	4013      	ands	r3, r2
 800724e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	4313      	orrs	r3, r2
 8007262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007264:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <HAL_GPIO_Init+0x334>)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	3301      	adds	r3, #1
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b0f      	cmp	r3, #15
 8007274:	f67f ae90 	bls.w	8006f98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007278:	bf00      	nop
 800727a:	bf00      	nop
 800727c:	3724      	adds	r7, #36	; 0x24
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	40023800 	.word	0x40023800
 800728c:	40013800 	.word	0x40013800
 8007290:	40020000 	.word	0x40020000
 8007294:	40020400 	.word	0x40020400
 8007298:	40020800 	.word	0x40020800
 800729c:	40020c00 	.word	0x40020c00
 80072a0:	40021000 	.word	0x40021000
 80072a4:	40021400 	.word	0x40021400
 80072a8:	40021800 	.word	0x40021800
 80072ac:	40021c00 	.word	0x40021c00
 80072b0:	40013c00 	.word	0x40013c00

080072b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b087      	sub	sp, #28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80072be:	2300      	movs	r3, #0
 80072c0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80072ca:	2300      	movs	r3, #0
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	e0cd      	b.n	800746c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80072d0:	2201      	movs	r2, #1
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	4013      	ands	r3, r2
 80072e0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	f040 80bd 	bne.w	8007466 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80072ec:	4a65      	ldr	r2, [pc, #404]	; (8007484 <HAL_GPIO_DeInit+0x1d0>)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	089b      	lsrs	r3, r3, #2
 80072f2:	3302      	adds	r3, #2
 80072f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072f8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f003 0303 	and.w	r3, r3, #3
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	220f      	movs	r2, #15
 8007304:	fa02 f303 	lsl.w	r3, r2, r3
 8007308:	68ba      	ldr	r2, [r7, #8]
 800730a:	4013      	ands	r3, r2
 800730c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a5d      	ldr	r2, [pc, #372]	; (8007488 <HAL_GPIO_DeInit+0x1d4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d02b      	beq.n	800736e <HAL_GPIO_DeInit+0xba>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a5c      	ldr	r2, [pc, #368]	; (800748c <HAL_GPIO_DeInit+0x1d8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d025      	beq.n	800736a <HAL_GPIO_DeInit+0xb6>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a5b      	ldr	r2, [pc, #364]	; (8007490 <HAL_GPIO_DeInit+0x1dc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d01f      	beq.n	8007366 <HAL_GPIO_DeInit+0xb2>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a5a      	ldr	r2, [pc, #360]	; (8007494 <HAL_GPIO_DeInit+0x1e0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d019      	beq.n	8007362 <HAL_GPIO_DeInit+0xae>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a59      	ldr	r2, [pc, #356]	; (8007498 <HAL_GPIO_DeInit+0x1e4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d013      	beq.n	800735e <HAL_GPIO_DeInit+0xaa>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a58      	ldr	r2, [pc, #352]	; (800749c <HAL_GPIO_DeInit+0x1e8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d00d      	beq.n	800735a <HAL_GPIO_DeInit+0xa6>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a57      	ldr	r2, [pc, #348]	; (80074a0 <HAL_GPIO_DeInit+0x1ec>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d007      	beq.n	8007356 <HAL_GPIO_DeInit+0xa2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a56      	ldr	r2, [pc, #344]	; (80074a4 <HAL_GPIO_DeInit+0x1f0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d101      	bne.n	8007352 <HAL_GPIO_DeInit+0x9e>
 800734e:	2307      	movs	r3, #7
 8007350:	e00e      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 8007352:	2308      	movs	r3, #8
 8007354:	e00c      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 8007356:	2306      	movs	r3, #6
 8007358:	e00a      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 800735a:	2305      	movs	r3, #5
 800735c:	e008      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 800735e:	2304      	movs	r3, #4
 8007360:	e006      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 8007362:	2303      	movs	r3, #3
 8007364:	e004      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 8007366:	2302      	movs	r3, #2
 8007368:	e002      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 800736a:	2301      	movs	r3, #1
 800736c:	e000      	b.n	8007370 <HAL_GPIO_DeInit+0xbc>
 800736e:	2300      	movs	r3, #0
 8007370:	697a      	ldr	r2, [r7, #20]
 8007372:	f002 0203 	and.w	r2, r2, #3
 8007376:	0092      	lsls	r2, r2, #2
 8007378:	4093      	lsls	r3, r2
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	429a      	cmp	r2, r3
 800737e:	d132      	bne.n	80073e6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007380:	4b49      	ldr	r3, [pc, #292]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	43db      	mvns	r3, r3
 8007388:	4947      	ldr	r1, [pc, #284]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 800738a:	4013      	ands	r3, r2
 800738c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800738e:	4b46      	ldr	r3, [pc, #280]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	43db      	mvns	r3, r3
 8007396:	4944      	ldr	r1, [pc, #272]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 8007398:	4013      	ands	r3, r2
 800739a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800739c:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	43db      	mvns	r3, r3
 80073a4:	4940      	ldr	r1, [pc, #256]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 80073a6:	4013      	ands	r3, r2
 80073a8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80073aa:	4b3f      	ldr	r3, [pc, #252]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 80073ac:	68da      	ldr	r2, [r3, #12]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	43db      	mvns	r3, r3
 80073b2:	493d      	ldr	r1, [pc, #244]	; (80074a8 <HAL_GPIO_DeInit+0x1f4>)
 80073b4:	4013      	ands	r3, r2
 80073b6:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	220f      	movs	r2, #15
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80073c8:	4a2e      	ldr	r2, [pc, #184]	; (8007484 <HAL_GPIO_DeInit+0x1d0>)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	089b      	lsrs	r3, r3, #2
 80073ce:	3302      	adds	r3, #2
 80073d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	43da      	mvns	r2, r3
 80073d8:	482a      	ldr	r0, [pc, #168]	; (8007484 <HAL_GPIO_DeInit+0x1d0>)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	089b      	lsrs	r3, r3, #2
 80073de:	400a      	ands	r2, r1
 80073e0:	3302      	adds	r3, #2
 80073e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	005b      	lsls	r3, r3, #1
 80073ee:	2103      	movs	r1, #3
 80073f0:	fa01 f303 	lsl.w	r3, r1, r3
 80073f4:	43db      	mvns	r3, r3
 80073f6:	401a      	ands	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	08da      	lsrs	r2, r3, #3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	3208      	adds	r2, #8
 8007404:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	220f      	movs	r2, #15
 8007412:	fa02 f303 	lsl.w	r3, r2, r3
 8007416:	43db      	mvns	r3, r3
 8007418:	697a      	ldr	r2, [r7, #20]
 800741a:	08d2      	lsrs	r2, r2, #3
 800741c:	4019      	ands	r1, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3208      	adds	r2, #8
 8007422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	2103      	movs	r1, #3
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	401a      	ands	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	2101      	movs	r1, #1
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	fa01 f303 	lsl.w	r3, r1, r3
 8007448:	43db      	mvns	r3, r3
 800744a:	401a      	ands	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	2103      	movs	r1, #3
 800745a:	fa01 f303 	lsl.w	r3, r1, r3
 800745e:	43db      	mvns	r3, r3
 8007460:	401a      	ands	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	3301      	adds	r3, #1
 800746a:	617b      	str	r3, [r7, #20]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2b0f      	cmp	r3, #15
 8007470:	f67f af2e 	bls.w	80072d0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	371c      	adds	r7, #28
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	40013800 	.word	0x40013800
 8007488:	40020000 	.word	0x40020000
 800748c:	40020400 	.word	0x40020400
 8007490:	40020800 	.word	0x40020800
 8007494:	40020c00 	.word	0x40020c00
 8007498:	40021000 	.word	0x40021000
 800749c:	40021400 	.word	0x40021400
 80074a0:	40021800 	.word	0x40021800
 80074a4:	40021c00 	.word	0x40021c00
 80074a8:	40013c00 	.word	0x40013c00

080074ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b085      	sub	sp, #20
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	887b      	ldrh	r3, [r7, #2]
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d002      	beq.n	80074ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
 80074c8:	e001      	b.n	80074ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80074ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	460b      	mov	r3, r1
 80074e6:	807b      	strh	r3, [r7, #2]
 80074e8:	4613      	mov	r3, r2
 80074ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074ec:	787b      	ldrb	r3, [r7, #1]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074f2:	887a      	ldrh	r2, [r7, #2]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80074f8:	e003      	b.n	8007502 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80074fa:	887b      	ldrh	r3, [r7, #2]
 80074fc:	041a      	lsls	r2, r3, #16
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	619a      	str	r2, [r3, #24]
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr
	...

08007510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e12b      	b.n	800777a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d106      	bne.n	800753c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2200      	movs	r2, #0
 8007532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fd f8e8 	bl	800470c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2224      	movs	r2, #36	; 0x24
 8007540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007562:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007574:	f003 f83e 	bl	800a5f4 <HAL_RCC_GetPCLK1Freq>
 8007578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4a81      	ldr	r2, [pc, #516]	; (8007784 <HAL_I2C_Init+0x274>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d807      	bhi.n	8007594 <HAL_I2C_Init+0x84>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a80      	ldr	r2, [pc, #512]	; (8007788 <HAL_I2C_Init+0x278>)
 8007588:	4293      	cmp	r3, r2
 800758a:	bf94      	ite	ls
 800758c:	2301      	movls	r3, #1
 800758e:	2300      	movhi	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e006      	b.n	80075a2 <HAL_I2C_Init+0x92>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a7d      	ldr	r2, [pc, #500]	; (800778c <HAL_I2C_Init+0x27c>)
 8007598:	4293      	cmp	r3, r2
 800759a:	bf94      	ite	ls
 800759c:	2301      	movls	r3, #1
 800759e:	2300      	movhi	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0e7      	b.n	800777a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a78      	ldr	r2, [pc, #480]	; (8007790 <HAL_I2C_Init+0x280>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	0c9b      	lsrs	r3, r3, #18
 80075b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	4a6a      	ldr	r2, [pc, #424]	; (8007784 <HAL_I2C_Init+0x274>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d802      	bhi.n	80075e4 <HAL_I2C_Init+0xd4>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	3301      	adds	r3, #1
 80075e2:	e009      	b.n	80075f8 <HAL_I2C_Init+0xe8>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	4a69      	ldr	r2, [pc, #420]	; (8007794 <HAL_I2C_Init+0x284>)
 80075f0:	fba2 2303 	umull	r2, r3, r2, r3
 80075f4:	099b      	lsrs	r3, r3, #6
 80075f6:	3301      	adds	r3, #1
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800760a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	495c      	ldr	r1, [pc, #368]	; (8007784 <HAL_I2C_Init+0x274>)
 8007614:	428b      	cmp	r3, r1
 8007616:	d819      	bhi.n	800764c <HAL_I2C_Init+0x13c>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1e59      	subs	r1, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	fbb1 f3f3 	udiv	r3, r1, r3
 8007626:	1c59      	adds	r1, r3, #1
 8007628:	f640 73fc 	movw	r3, #4092	; 0xffc
 800762c:	400b      	ands	r3, r1
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_I2C_Init+0x138>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	1e59      	subs	r1, r3, #1
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007640:	3301      	adds	r3, #1
 8007642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007646:	e051      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 8007648:	2304      	movs	r3, #4
 800764a:	e04f      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d111      	bne.n	8007678 <HAL_I2C_Init+0x168>
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	1e58      	subs	r0, r3, #1
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6859      	ldr	r1, [r3, #4]
 800765c:	460b      	mov	r3, r1
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	440b      	add	r3, r1
 8007662:	fbb0 f3f3 	udiv	r3, r0, r3
 8007666:	3301      	adds	r3, #1
 8007668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800766c:	2b00      	cmp	r3, #0
 800766e:	bf0c      	ite	eq
 8007670:	2301      	moveq	r3, #1
 8007672:	2300      	movne	r3, #0
 8007674:	b2db      	uxtb	r3, r3
 8007676:	e012      	b.n	800769e <HAL_I2C_Init+0x18e>
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	1e58      	subs	r0, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6859      	ldr	r1, [r3, #4]
 8007680:	460b      	mov	r3, r1
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	440b      	add	r3, r1
 8007686:	0099      	lsls	r1, r3, #2
 8007688:	440b      	add	r3, r1
 800768a:	fbb0 f3f3 	udiv	r3, r0, r3
 800768e:	3301      	adds	r3, #1
 8007690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007694:	2b00      	cmp	r3, #0
 8007696:	bf0c      	ite	eq
 8007698:	2301      	moveq	r3, #1
 800769a:	2300      	movne	r3, #0
 800769c:	b2db      	uxtb	r3, r3
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d001      	beq.n	80076a6 <HAL_I2C_Init+0x196>
 80076a2:	2301      	movs	r3, #1
 80076a4:	e022      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10e      	bne.n	80076cc <HAL_I2C_Init+0x1bc>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1e58      	subs	r0, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6859      	ldr	r1, [r3, #4]
 80076b6:	460b      	mov	r3, r1
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	440b      	add	r3, r1
 80076bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80076c0:	3301      	adds	r3, #1
 80076c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ca:	e00f      	b.n	80076ec <HAL_I2C_Init+0x1dc>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	1e58      	subs	r0, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6859      	ldr	r1, [r3, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	0099      	lsls	r1, r3, #2
 80076dc:	440b      	add	r3, r1
 80076de:	fbb0 f3f3 	udiv	r3, r0, r3
 80076e2:	3301      	adds	r3, #1
 80076e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076ec:	6879      	ldr	r1, [r7, #4]
 80076ee:	6809      	ldr	r1, [r1, #0]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69da      	ldr	r2, [r3, #28]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800771a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6911      	ldr	r1, [r2, #16]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	68d2      	ldr	r2, [r2, #12]
 8007726:	4311      	orrs	r1, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6812      	ldr	r2, [r2, #0]
 800772c:	430b      	orrs	r3, r1
 800772e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68db      	ldr	r3, [r3, #12]
 8007736:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	431a      	orrs	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0201 	orr.w	r2, r2, #1
 800775a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2220      	movs	r2, #32
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	2200      	movs	r2, #0
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007778:	2300      	movs	r3, #0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	000186a0 	.word	0x000186a0
 8007788:	001e847f 	.word	0x001e847f
 800778c:	003d08ff 	.word	0x003d08ff
 8007790:	431bde83 	.word	0x431bde83
 8007794:	10624dd3 	.word	0x10624dd3

08007798 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	461a      	mov	r2, r3
 80077a4:	460b      	mov	r3, r1
 80077a6:	817b      	strh	r3, [r7, #10]
 80077a8:	4613      	mov	r3, r2
 80077aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80077ac:	f7fe fe42 	bl	8006434 <HAL_GetTick>
 80077b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f040 80e0 	bne.w	8007980 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	2319      	movs	r3, #25
 80077c6:	2201      	movs	r2, #1
 80077c8:	4970      	ldr	r1, [pc, #448]	; (800798c <HAL_I2C_Master_Transmit+0x1f4>)
 80077ca:	68f8      	ldr	r0, [r7, #12]
 80077cc:	f000 ff66 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80077d6:	2302      	movs	r3, #2
 80077d8:	e0d3      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_I2C_Master_Transmit+0x50>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e0cc      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d007      	beq.n	800780e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f042 0201 	orr.w	r2, r2, #1
 800780c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2221      	movs	r2, #33	; 0x21
 8007822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2210      	movs	r2, #16
 800782a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	893a      	ldrh	r2, [r7, #8]
 800783e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007844:	b29a      	uxth	r2, r3
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a50      	ldr	r2, [pc, #320]	; (8007990 <HAL_I2C_Master_Transmit+0x1f8>)
 800784e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007850:	8979      	ldrh	r1, [r7, #10]
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	6a3a      	ldr	r2, [r7, #32]
 8007856:	68f8      	ldr	r0, [r7, #12]
 8007858:	f000 fce8 	bl	800822c <I2C_MasterRequestWrite>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e08d      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007866:	2300      	movs	r3, #0
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	613b      	str	r3, [r7, #16]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	613b      	str	r3, [r7, #16]
 800787a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800787c:	e066      	b.n	800794c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	6a39      	ldr	r1, [r7, #32]
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 ffe0 	bl	8008848 <I2C_WaitOnTXEFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00d      	beq.n	80078aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007892:	2b04      	cmp	r3, #4
 8007894:	d107      	bne.n	80078a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e06b      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	781a      	ldrb	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ba:	1c5a      	adds	r2, r3, #1
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	3b01      	subs	r3, #1
 80078c8:	b29a      	uxth	r2, r3
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078d2:	3b01      	subs	r3, #1
 80078d4:	b29a      	uxth	r2, r3
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d11b      	bne.n	8007920 <HAL_I2C_Master_Transmit+0x188>
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d017      	beq.n	8007920 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	781a      	ldrb	r2, [r3, #0]
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790a:	b29b      	uxth	r3, r3
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007918:	3b01      	subs	r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007920:	697a      	ldr	r2, [r7, #20]
 8007922:	6a39      	ldr	r1, [r7, #32]
 8007924:	68f8      	ldr	r0, [r7, #12]
 8007926:	f000 ffd0 	bl	80088ca <I2C_WaitOnBTFFlagUntilTimeout>
 800792a:	4603      	mov	r3, r0
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00d      	beq.n	800794c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007934:	2b04      	cmp	r3, #4
 8007936:	d107      	bne.n	8007948 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007946:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e01a      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007950:	2b00      	cmp	r3, #0
 8007952:	d194      	bne.n	800787e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007962:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800797c:	2300      	movs	r3, #0
 800797e:	e000      	b.n	8007982 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007980:	2302      	movs	r3, #2
  }
}
 8007982:	4618      	mov	r0, r3
 8007984:	3718      	adds	r7, #24
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	00100002 	.word	0x00100002
 8007990:	ffff0000 	.word	0xffff0000

08007994 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08c      	sub	sp, #48	; 0x30
 8007998:	af02      	add	r7, sp, #8
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	461a      	mov	r2, r3
 80079a0:	460b      	mov	r3, r1
 80079a2:	817b      	strh	r3, [r7, #10]
 80079a4:	4613      	mov	r3, r2
 80079a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80079a8:	f7fe fd44 	bl	8006434 <HAL_GetTick>
 80079ac:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	f040 820b 	bne.w	8007dd2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	2319      	movs	r3, #25
 80079c2:	2201      	movs	r2, #1
 80079c4:	497c      	ldr	r1, [pc, #496]	; (8007bb8 <HAL_I2C_Master_Receive+0x224>)
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fe68 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 80079cc:	4603      	mov	r3, r0
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d001      	beq.n	80079d6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
 80079d4:	e1fe      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_I2C_Master_Receive+0x50>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e1f7      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d007      	beq.n	8007a0a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f042 0201 	orr.w	r2, r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2222      	movs	r2, #34	; 0x22
 8007a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2210      	movs	r2, #16
 8007a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	893a      	ldrh	r2, [r7, #8]
 8007a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4a5c      	ldr	r2, [pc, #368]	; (8007bbc <HAL_I2C_Master_Receive+0x228>)
 8007a4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007a4c:	8979      	ldrh	r1, [r7, #10]
 8007a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 fc6c 	bl	8008330 <I2C_MasterRequestRead>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e1b8      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d113      	bne.n	8007a92 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	623b      	str	r3, [r7, #32]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	623b      	str	r3, [r7, #32]
 8007a7e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a8e:	601a      	str	r2, [r3, #0]
 8007a90:	e18c      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d11b      	bne.n	8007ad2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aa8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007aaa:	2300      	movs	r3, #0
 8007aac:	61fb      	str	r3, [r7, #28]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	699b      	ldr	r3, [r3, #24]
 8007abc:	61fb      	str	r3, [r7, #28]
 8007abe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e16c      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d11b      	bne.n	8007b12 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007af8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afa:	2300      	movs	r3, #0
 8007afc:	61bb      	str	r3, [r7, #24]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	61bb      	str	r3, [r7, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	61bb      	str	r3, [r7, #24]
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	e14c      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b22:	2300      	movs	r3, #0
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	695b      	ldr	r3, [r3, #20]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b38:	e138      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b3e:	2b03      	cmp	r3, #3
 8007b40:	f200 80f1 	bhi.w	8007d26 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d123      	bne.n	8007b94 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f000 fefb 	bl	800894c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e139      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b92:	e10b      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b98:	2b02      	cmp	r3, #2
 8007b9a:	d14e      	bne.n	8007c3a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	9300      	str	r3, [sp, #0]
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	4906      	ldr	r1, [pc, #24]	; (8007bc0 <HAL_I2C_Master_Receive+0x22c>)
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 fd78 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e10e      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
 8007bb6:	bf00      	nop
 8007bb8:	00100002 	.word	0x00100002
 8007bbc:	ffff0000 	.word	0xffff0000
 8007bc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf0:	3b01      	subs	r3, #1
 8007bf2:	b29a      	uxth	r2, r3
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	3b01      	subs	r3, #1
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	691a      	ldr	r2, [r3, #16]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	b2d2      	uxtb	r2, r2
 8007c12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c22:	3b01      	subs	r3, #1
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	3b01      	subs	r3, #1
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c38:	e0b8      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c40:	2200      	movs	r2, #0
 8007c42:	4966      	ldr	r1, [pc, #408]	; (8007ddc <HAL_I2C_Master_Receive+0x448>)
 8007c44:	68f8      	ldr	r0, [r7, #12]
 8007c46:	f000 fd29 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e0bf      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	691a      	ldr	r2, [r3, #16]
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c80:	3b01      	subs	r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	494f      	ldr	r1, [pc, #316]	; (8007ddc <HAL_I2C_Master_Receive+0x448>)
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fcfb 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e091      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d24:	e042      	b.n	8007dac <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fe0e 	bl	800894c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e04c      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d118      	bne.n	8007dac <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f aec2 	bne.w	8007b3a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e000      	b.n	8007dd4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	; 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	00010004 	.word	0x00010004

08007de0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08c      	sub	sp, #48	; 0x30
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	4608      	mov	r0, r1
 8007dea:	4611      	mov	r1, r2
 8007dec:	461a      	mov	r2, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	817b      	strh	r3, [r7, #10]
 8007df2:	460b      	mov	r3, r1
 8007df4:	813b      	strh	r3, [r7, #8]
 8007df6:	4613      	mov	r3, r2
 8007df8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007dfa:	f7fe fb1b 	bl	8006434 <HAL_GetTick>
 8007dfe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	2b20      	cmp	r3, #32
 8007e0a:	f040 8208 	bne.w	800821e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	2319      	movs	r3, #25
 8007e14:	2201      	movs	r2, #1
 8007e16:	497b      	ldr	r1, [pc, #492]	; (8008004 <HAL_I2C_Mem_Read+0x224>)
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f000 fc3f 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007e24:	2302      	movs	r3, #2
 8007e26:	e1fb      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d101      	bne.n	8007e36 <HAL_I2C_Mem_Read+0x56>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e1f4      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d007      	beq.n	8007e5c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0201 	orr.w	r2, r2, #1
 8007e5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	681a      	ldr	r2, [r3, #0]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2222      	movs	r2, #34	; 0x22
 8007e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2240      	movs	r2, #64	; 0x40
 8007e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e92:	b29a      	uxth	r2, r3
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a5b      	ldr	r2, [pc, #364]	; (8008008 <HAL_I2C_Mem_Read+0x228>)
 8007e9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007e9e:	88f8      	ldrh	r0, [r7, #6]
 8007ea0:	893a      	ldrh	r2, [r7, #8]
 8007ea2:	8979      	ldrh	r1, [r7, #10]
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	9301      	str	r3, [sp, #4]
 8007ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4603      	mov	r3, r0
 8007eae:	68f8      	ldr	r0, [r7, #12]
 8007eb0:	f000 fb0c 	bl	80084cc <I2C_RequestMemoryRead>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e1b0      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d113      	bne.n	8007eee <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	623b      	str	r3, [r7, #32]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	623b      	str	r3, [r7, #32]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	623b      	str	r3, [r7, #32]
 8007eda:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e184      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d11b      	bne.n	8007f2e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	681a      	ldr	r2, [r3, #0]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f04:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f06:	2300      	movs	r3, #0
 8007f08:	61fb      	str	r3, [r7, #28]
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	61fb      	str	r3, [r7, #28]
 8007f1a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	e164      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d11b      	bne.n	8007f6e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f44:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f56:	2300      	movs	r3, #0
 8007f58:	61bb      	str	r3, [r7, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	61bb      	str	r3, [r7, #24]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	69bb      	ldr	r3, [r7, #24]
 8007f6c:	e144      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f6e:	2300      	movs	r3, #0
 8007f70:	617b      	str	r3, [r7, #20]
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	695b      	ldr	r3, [r3, #20]
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	699b      	ldr	r3, [r3, #24]
 8007f80:	617b      	str	r3, [r7, #20]
 8007f82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007f84:	e138      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f8a:	2b03      	cmp	r3, #3
 8007f8c:	f200 80f1 	bhi.w	8008172 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d123      	bne.n	8007fe0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 fcd5 	bl	800894c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e139      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691a      	ldr	r2, [r3, #16]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbe:	1c5a      	adds	r2, r3, #1
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc8:	3b01      	subs	r3, #1
 8007fca:	b29a      	uxth	r2, r3
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29a      	uxth	r2, r3
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007fde:	e10b      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d14e      	bne.n	8008086 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4906      	ldr	r1, [pc, #24]	; (800800c <HAL_I2C_Mem_Read+0x22c>)
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f000 fb52 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007ffe:	2301      	movs	r3, #1
 8008000:	e10e      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
 8008002:	bf00      	nop
 8008004:	00100002 	.word	0x00100002
 8008008:	ffff0000 	.word	0xffff0000
 800800c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800801e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	691a      	ldr	r2, [r3, #16]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800802a:	b2d2      	uxtb	r2, r2
 800802c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800803c:	3b01      	subs	r3, #1
 800803e:	b29a      	uxth	r2, r3
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805c:	b2d2      	uxtb	r2, r2
 800805e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008064:	1c5a      	adds	r2, r3, #1
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800806e:	3b01      	subs	r3, #1
 8008070:	b29a      	uxth	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008084:	e0b8      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	2200      	movs	r2, #0
 800808e:	4966      	ldr	r1, [pc, #408]	; (8008228 <HAL_I2C_Mem_Read+0x448>)
 8008090:	68f8      	ldr	r0, [r7, #12]
 8008092:	f000 fb03 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e0bf      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691a      	ldr	r2, [r3, #16]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	b2d2      	uxtb	r2, r2
 80080bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c2:	1c5a      	adds	r2, r3, #1
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d8:	b29b      	uxth	r3, r3
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80080e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e4:	9300      	str	r3, [sp, #0]
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	2200      	movs	r2, #0
 80080ea:	494f      	ldr	r1, [pc, #316]	; (8008228 <HAL_I2C_Mem_Read+0x448>)
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	f000 fad5 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 80080f2:	4603      	mov	r3, r0
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	e091      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800810a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008128:	3b01      	subs	r3, #1
 800812a:	b29a      	uxth	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008134:	b29b      	uxth	r3, r3
 8008136:	3b01      	subs	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008148:	b2d2      	uxtb	r2, r2
 800814a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008150:	1c5a      	adds	r2, r3, #1
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800815a:	3b01      	subs	r3, #1
 800815c:	b29a      	uxth	r2, r3
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008166:	b29b      	uxth	r3, r3
 8008168:	3b01      	subs	r3, #1
 800816a:	b29a      	uxth	r2, r3
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008170:	e042      	b.n	80081f8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008174:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fbe8 	bl	800894c <I2C_WaitOnRXNEFlagUntilTimeout>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d001      	beq.n	8008186 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	e04c      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	b2d2      	uxtb	r2, r2
 8008192:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008198:	1c5a      	adds	r2, r3, #1
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081a2:	3b01      	subs	r3, #1
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	3b01      	subs	r3, #1
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d118      	bne.n	80081f8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	691a      	ldr	r2, [r3, #16]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	1c5a      	adds	r2, r3, #1
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b29a      	uxth	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	3b01      	subs	r3, #1
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	f47f aec2 	bne.w	8007f86 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e000      	b.n	8008220 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800821e:	2302      	movs	r3, #2
  }
}
 8008220:	4618      	mov	r0, r3
 8008222:	3728      	adds	r7, #40	; 0x28
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	00010004 	.word	0x00010004

0800822c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b088      	sub	sp, #32
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	607a      	str	r2, [r7, #4]
 8008236:	603b      	str	r3, [r7, #0]
 8008238:	460b      	mov	r3, r1
 800823a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008240:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	2b08      	cmp	r3, #8
 8008246:	d006      	beq.n	8008256 <I2C_MasterRequestWrite+0x2a>
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d003      	beq.n	8008256 <I2C_MasterRequestWrite+0x2a>
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008254:	d108      	bne.n	8008268 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008264:	601a      	str	r2, [r3, #0]
 8008266:	e00b      	b.n	8008280 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826c:	2b12      	cmp	r3, #18
 800826e:	d107      	bne.n	8008280 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800827e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2200      	movs	r2, #0
 8008288:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f000 fa05 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00d      	beq.n	80082b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082a6:	d103      	bne.n	80082b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80082b0:	2303      	movs	r3, #3
 80082b2:	e035      	b.n	8008320 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082bc:	d108      	bne.n	80082d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80082be:	897b      	ldrh	r3, [r7, #10]
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	461a      	mov	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80082cc:	611a      	str	r2, [r3, #16]
 80082ce:	e01b      	b.n	8008308 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80082d0:	897b      	ldrh	r3, [r7, #10]
 80082d2:	11db      	asrs	r3, r3, #7
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	f003 0306 	and.w	r3, r3, #6
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	f063 030f 	orn	r3, r3, #15
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	490e      	ldr	r1, [pc, #56]	; (8008328 <I2C_MasterRequestWrite+0xfc>)
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fa2b 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d001      	beq.n	80082fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e010      	b.n	8008320 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80082fe:	897b      	ldrh	r3, [r7, #10]
 8008300:	b2da      	uxtb	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	4907      	ldr	r1, [pc, #28]	; (800832c <I2C_MasterRequestWrite+0x100>)
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 fa1b 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e000      	b.n	8008320 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	00010008 	.word	0x00010008
 800832c:	00010002 	.word	0x00010002

08008330 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af02      	add	r7, sp, #8
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	603b      	str	r3, [r7, #0]
 800833c:	460b      	mov	r3, r1
 800833e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008344:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	681a      	ldr	r2, [r3, #0]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008354:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	2b08      	cmp	r3, #8
 800835a:	d006      	beq.n	800836a <I2C_MasterRequestRead+0x3a>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d003      	beq.n	800836a <I2C_MasterRequestRead+0x3a>
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008368:	d108      	bne.n	800837c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	e00b      	b.n	8008394 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008380:	2b11      	cmp	r3, #17
 8008382:	d107      	bne.n	8008394 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008392:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f97b 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00d      	beq.n	80083c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	d103      	bne.n	80083c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e079      	b.n	80084bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d0:	d108      	bne.n	80083e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80083d2:	897b      	ldrh	r3, [r7, #10]
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	611a      	str	r2, [r3, #16]
 80083e2:	e05f      	b.n	80084a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80083e4:	897b      	ldrh	r3, [r7, #10]
 80083e6:	11db      	asrs	r3, r3, #7
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	f003 0306 	and.w	r3, r3, #6
 80083ee:	b2db      	uxtb	r3, r3
 80083f0:	f063 030f 	orn	r3, r3, #15
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	4930      	ldr	r1, [pc, #192]	; (80084c4 <I2C_MasterRequestRead+0x194>)
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f000 f9a1 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d001      	beq.n	8008412 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e054      	b.n	80084bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008412:	897b      	ldrh	r3, [r7, #10]
 8008414:	b2da      	uxtb	r2, r3
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	687a      	ldr	r2, [r7, #4]
 8008420:	4929      	ldr	r1, [pc, #164]	; (80084c8 <I2C_MasterRequestRead+0x198>)
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f000 f991 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008428:	4603      	mov	r3, r0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d001      	beq.n	8008432 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e044      	b.n	80084bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008432:	2300      	movs	r3, #0
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695b      	ldr	r3, [r3, #20]
 800843c:	613b      	str	r3, [r7, #16]
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	699b      	ldr	r3, [r3, #24]
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008456:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f000 f919 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00d      	beq.n	800848c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847e:	d103      	bne.n	8008488 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008486:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e017      	b.n	80084bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800848c:	897b      	ldrh	r3, [r7, #10]
 800848e:	11db      	asrs	r3, r3, #7
 8008490:	b2db      	uxtb	r3, r3
 8008492:	f003 0306 	and.w	r3, r3, #6
 8008496:	b2db      	uxtb	r3, r3
 8008498:	f063 030e 	orn	r3, r3, #14
 800849c:	b2da      	uxtb	r2, r3
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	4907      	ldr	r1, [pc, #28]	; (80084c8 <I2C_MasterRequestRead+0x198>)
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f000 f94d 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e000      	b.n	80084bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3718      	adds	r7, #24
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	00010008 	.word	0x00010008
 80084c8:	00010002 	.word	0x00010002

080084cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	4603      	mov	r3, r0
 80084dc:	817b      	strh	r3, [r7, #10]
 80084de:	460b      	mov	r3, r1
 80084e0:	813b      	strh	r3, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	6a3b      	ldr	r3, [r7, #32]
 800850c:	2200      	movs	r2, #0
 800850e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f000 f8c2 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8008518:	4603      	mov	r3, r0
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00d      	beq.n	800853a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800852c:	d103      	bne.n	8008536 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008534:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e0aa      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800853a:	897b      	ldrh	r3, [r7, #10]
 800853c:	b2db      	uxtb	r3, r3
 800853e:	461a      	mov	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800854a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854c:	6a3a      	ldr	r2, [r7, #32]
 800854e:	4952      	ldr	r1, [pc, #328]	; (8008698 <I2C_RequestMemoryRead+0x1cc>)
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f8fa 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e097      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008560:	2300      	movs	r3, #0
 8008562:	617b      	str	r3, [r7, #20]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	695b      	ldr	r3, [r3, #20]
 800856a:	617b      	str	r3, [r7, #20]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	699b      	ldr	r3, [r3, #24]
 8008572:	617b      	str	r3, [r7, #20]
 8008574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008578:	6a39      	ldr	r1, [r7, #32]
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f000 f964 	bl	8008848 <I2C_WaitOnTXEFlagUntilTimeout>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00d      	beq.n	80085a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	2b04      	cmp	r3, #4
 800858c:	d107      	bne.n	800859e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800859c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e076      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80085a2:	88fb      	ldrh	r3, [r7, #6]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d105      	bne.n	80085b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085a8:	893b      	ldrh	r3, [r7, #8]
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	611a      	str	r2, [r3, #16]
 80085b2:	e021      	b.n	80085f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80085b4:	893b      	ldrh	r3, [r7, #8]
 80085b6:	0a1b      	lsrs	r3, r3, #8
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	b2da      	uxtb	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085c4:	6a39      	ldr	r1, [r7, #32]
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f000 f93e 	bl	8008848 <I2C_WaitOnTXEFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d107      	bne.n	80085ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80085ea:	2301      	movs	r3, #1
 80085ec:	e050      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80085ee:	893b      	ldrh	r3, [r7, #8]
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80085f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fa:	6a39      	ldr	r1, [r7, #32]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 f923 	bl	8008848 <I2C_WaitOnTXEFlagUntilTimeout>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00d      	beq.n	8008624 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800860c:	2b04      	cmp	r3, #4
 800860e:	d107      	bne.n	8008620 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800861e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	e035      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008632:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	6a3b      	ldr	r3, [r7, #32]
 800863a:	2200      	movs	r2, #0
 800863c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008640:	68f8      	ldr	r0, [r7, #12]
 8008642:	f000 f82b 	bl	800869c <I2C_WaitOnFlagUntilTimeout>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d00d      	beq.n	8008668 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800865a:	d103      	bne.n	8008664 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e013      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008668:	897b      	ldrh	r3, [r7, #10]
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f043 0301 	orr.w	r3, r3, #1
 8008670:	b2da      	uxtb	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	6a3a      	ldr	r2, [r7, #32]
 800867c:	4906      	ldr	r1, [pc, #24]	; (8008698 <I2C_RequestMemoryRead+0x1cc>)
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f863 	bl	800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800868e:	2300      	movs	r3, #0
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	00010002 	.word	0x00010002

0800869c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	60b9      	str	r1, [r7, #8]
 80086a6:	603b      	str	r3, [r7, #0]
 80086a8:	4613      	mov	r3, r2
 80086aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086ac:	e025      	b.n	80086fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086b4:	d021      	beq.n	80086fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b6:	f7fd febd 	bl	8006434 <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d116      	bne.n	80086fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	f043 0220 	orr.w	r2, r3, #32
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e023      	b.n	8008742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	0c1b      	lsrs	r3, r3, #16
 80086fe:	b2db      	uxtb	r3, r3
 8008700:	2b01      	cmp	r3, #1
 8008702:	d10d      	bne.n	8008720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	695b      	ldr	r3, [r3, #20]
 800870a:	43da      	mvns	r2, r3
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4013      	ands	r3, r2
 8008710:	b29b      	uxth	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	bf0c      	ite	eq
 8008716:	2301      	moveq	r3, #1
 8008718:	2300      	movne	r3, #0
 800871a:	b2db      	uxtb	r3, r3
 800871c:	461a      	mov	r2, r3
 800871e:	e00c      	b.n	800873a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	699b      	ldr	r3, [r3, #24]
 8008726:	43da      	mvns	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4013      	ands	r3, r2
 800872c:	b29b      	uxth	r3, r3
 800872e:	2b00      	cmp	r3, #0
 8008730:	bf0c      	ite	eq
 8008732:	2301      	moveq	r3, #1
 8008734:	2300      	movne	r3, #0
 8008736:	b2db      	uxtb	r3, r3
 8008738:	461a      	mov	r2, r3
 800873a:	79fb      	ldrb	r3, [r7, #7]
 800873c:	429a      	cmp	r2, r3
 800873e:	d0b6      	beq.n	80086ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b084      	sub	sp, #16
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
 8008756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008758:	e051      	b.n	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	695b      	ldr	r3, [r3, #20]
 8008760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008768:	d123      	bne.n	80087b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	2200      	movs	r2, #0
 8008788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2220      	movs	r2, #32
 800878e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	f043 0204 	orr.w	r2, r3, #4
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e046      	b.n	8008840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087b8:	d021      	beq.n	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087ba:	f7fd fe3b 	bl	8006434 <HAL_GetTick>
 80087be:	4602      	mov	r2, r0
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	1ad3      	subs	r3, r2, r3
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d302      	bcc.n	80087d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d116      	bne.n	80087fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2200      	movs	r2, #0
 80087d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ea:	f043 0220 	orr.w	r2, r3, #32
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e020      	b.n	8008840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	0c1b      	lsrs	r3, r3, #16
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b01      	cmp	r3, #1
 8008806:	d10c      	bne.n	8008822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	43da      	mvns	r2, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	4013      	ands	r3, r2
 8008814:	b29b      	uxth	r3, r3
 8008816:	2b00      	cmp	r3, #0
 8008818:	bf14      	ite	ne
 800881a:	2301      	movne	r3, #1
 800881c:	2300      	moveq	r3, #0
 800881e:	b2db      	uxtb	r3, r3
 8008820:	e00b      	b.n	800883a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	699b      	ldr	r3, [r3, #24]
 8008828:	43da      	mvns	r2, r3
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	4013      	ands	r3, r2
 800882e:	b29b      	uxth	r3, r3
 8008830:	2b00      	cmp	r3, #0
 8008832:	bf14      	ite	ne
 8008834:	2301      	movne	r3, #1
 8008836:	2300      	moveq	r3, #0
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b00      	cmp	r3, #0
 800883c:	d18d      	bne.n	800875a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3710      	adds	r7, #16
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	60f8      	str	r0, [r7, #12]
 8008850:	60b9      	str	r1, [r7, #8]
 8008852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008854:	e02d      	b.n	80088b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 f8ce 	bl	80089f8 <I2C_IsAcknowledgeFailed>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d001      	beq.n	8008866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	e02d      	b.n	80088c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800886c:	d021      	beq.n	80088b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886e:	f7fd fde1 	bl	8006434 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	429a      	cmp	r2, r3
 800887c:	d302      	bcc.n	8008884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d116      	bne.n	80088b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889e:	f043 0220 	orr.w	r2, r3, #32
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088ae:	2301      	movs	r3, #1
 80088b0:	e007      	b.n	80088c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d1ca      	bne.n	8008856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b084      	sub	sp, #16
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	60f8      	str	r0, [r7, #12]
 80088d2:	60b9      	str	r1, [r7, #8]
 80088d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088d6:	e02d      	b.n	8008934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 f88d 	bl	80089f8 <I2C_IsAcknowledgeFailed>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d001      	beq.n	80088e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	e02d      	b.n	8008944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ee:	d021      	beq.n	8008934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f0:	f7fd fda0 	bl	8006434 <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d302      	bcc.n	8008906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d116      	bne.n	8008934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2220      	movs	r2, #32
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008920:	f043 0220 	orr.w	r2, r3, #32
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008930:	2301      	movs	r3, #1
 8008932:	e007      	b.n	8008944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b04      	cmp	r3, #4
 8008940:	d1ca      	bne.n	80088d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008942:	2300      	movs	r3, #0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008958:	e042      	b.n	80089e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	695b      	ldr	r3, [r3, #20]
 8008960:	f003 0310 	and.w	r3, r3, #16
 8008964:	2b10      	cmp	r3, #16
 8008966:	d119      	bne.n	800899c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f06f 0210 	mvn.w	r2, #16
 8008970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008998:	2301      	movs	r3, #1
 800899a:	e029      	b.n	80089f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800899c:	f7fd fd4a 	bl	8006434 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d302      	bcc.n	80089b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d116      	bne.n	80089e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2200      	movs	r2, #0
 80089b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089cc:	f043 0220 	orr.w	r2, r3, #32
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	e007      	b.n	80089f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	d1b5      	bne.n	800895a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a0e:	d11b      	bne.n	8008a48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008a18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2220      	movs	r2, #32
 8008a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a34:	f043 0204 	orr.w	r2, r3, #4
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	e000      	b.n	8008a4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008a56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a58:	b08f      	sub	sp, #60	; 0x3c
 8008a5a:	af0a      	add	r7, sp, #40	; 0x28
 8008a5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d101      	bne.n	8008a68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	e10f      	b.n	8008c88 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d106      	bne.n	8008a88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f00e fc74 	bl	8017370 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2203      	movs	r2, #3
 8008a8c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d102      	bne.n	8008aa2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f004 f80d 	bl	800cac6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	603b      	str	r3, [r7, #0]
 8008ab2:	687e      	ldr	r6, [r7, #4]
 8008ab4:	466d      	mov	r5, sp
 8008ab6:	f106 0410 	add.w	r4, r6, #16
 8008aba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008abc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008abe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008ac0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008ac2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008ac6:	e885 0003 	stmia.w	r5, {r0, r1}
 8008aca:	1d33      	adds	r3, r6, #4
 8008acc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ace:	6838      	ldr	r0, [r7, #0]
 8008ad0:	f003 fee4 	bl	800c89c <USB_CoreInit>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d005      	beq.n	8008ae6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2202      	movs	r2, #2
 8008ade:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e0d0      	b.n	8008c88 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2100      	movs	r1, #0
 8008aec:	4618      	mov	r0, r3
 8008aee:	f003 fffb 	bl	800cae8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	73fb      	strb	r3, [r7, #15]
 8008af6:	e04a      	b.n	8008b8e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008af8:	7bfa      	ldrb	r2, [r7, #15]
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	1a9b      	subs	r3, r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	333d      	adds	r3, #61	; 0x3d
 8008b08:	2201      	movs	r2, #1
 8008b0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	6879      	ldr	r1, [r7, #4]
 8008b10:	4613      	mov	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	333c      	adds	r3, #60	; 0x3c
 8008b1c:	7bfa      	ldrb	r2, [r7, #15]
 8008b1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008b20:	7bfa      	ldrb	r2, [r7, #15]
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	b298      	uxth	r0, r3
 8008b26:	6879      	ldr	r1, [r7, #4]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	1a9b      	subs	r3, r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	440b      	add	r3, r1
 8008b32:	3342      	adds	r3, #66	; 0x42
 8008b34:	4602      	mov	r2, r0
 8008b36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008b38:	7bfa      	ldrb	r2, [r7, #15]
 8008b3a:	6879      	ldr	r1, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	00db      	lsls	r3, r3, #3
 8008b40:	1a9b      	subs	r3, r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	440b      	add	r3, r1
 8008b46:	333f      	adds	r3, #63	; 0x3f
 8008b48:	2200      	movs	r2, #0
 8008b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008b4c:	7bfa      	ldrb	r2, [r7, #15]
 8008b4e:	6879      	ldr	r1, [r7, #4]
 8008b50:	4613      	mov	r3, r2
 8008b52:	00db      	lsls	r3, r3, #3
 8008b54:	1a9b      	subs	r3, r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	440b      	add	r3, r1
 8008b5a:	3344      	adds	r3, #68	; 0x44
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008b60:	7bfa      	ldrb	r2, [r7, #15]
 8008b62:	6879      	ldr	r1, [r7, #4]
 8008b64:	4613      	mov	r3, r2
 8008b66:	00db      	lsls	r3, r3, #3
 8008b68:	1a9b      	subs	r3, r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	440b      	add	r3, r1
 8008b6e:	3348      	adds	r3, #72	; 0x48
 8008b70:	2200      	movs	r2, #0
 8008b72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008b74:	7bfa      	ldrb	r2, [r7, #15]
 8008b76:	6879      	ldr	r1, [r7, #4]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	00db      	lsls	r3, r3, #3
 8008b7c:	1a9b      	subs	r3, r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	440b      	add	r3, r1
 8008b82:	3350      	adds	r3, #80	; 0x50
 8008b84:	2200      	movs	r2, #0
 8008b86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	73fb      	strb	r3, [r7, #15]
 8008b8e:	7bfa      	ldrb	r2, [r7, #15]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d3af      	bcc.n	8008af8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	73fb      	strb	r3, [r7, #15]
 8008b9c:	e044      	b.n	8008c28 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008b9e:	7bfa      	ldrb	r2, [r7, #15]
 8008ba0:	6879      	ldr	r1, [r7, #4]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	00db      	lsls	r3, r3, #3
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	440b      	add	r3, r1
 8008bac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008bb4:	7bfa      	ldrb	r2, [r7, #15]
 8008bb6:	6879      	ldr	r1, [r7, #4]
 8008bb8:	4613      	mov	r3, r2
 8008bba:	00db      	lsls	r3, r3, #3
 8008bbc:	1a9b      	subs	r3, r3, r2
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	440b      	add	r3, r1
 8008bc2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008bc6:	7bfa      	ldrb	r2, [r7, #15]
 8008bc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008bca:	7bfa      	ldrb	r2, [r7, #15]
 8008bcc:	6879      	ldr	r1, [r7, #4]
 8008bce:	4613      	mov	r3, r2
 8008bd0:	00db      	lsls	r3, r3, #3
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	440b      	add	r3, r1
 8008bd8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008bdc:	2200      	movs	r2, #0
 8008bde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008be0:	7bfa      	ldrb	r2, [r7, #15]
 8008be2:	6879      	ldr	r1, [r7, #4]
 8008be4:	4613      	mov	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	1a9b      	subs	r3, r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008bf6:	7bfa      	ldrb	r2, [r7, #15]
 8008bf8:	6879      	ldr	r1, [r7, #4]
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	00db      	lsls	r3, r3, #3
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008c0c:	7bfa      	ldrb	r2, [r7, #15]
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4613      	mov	r3, r2
 8008c12:	00db      	lsls	r3, r3, #3
 8008c14:	1a9b      	subs	r3, r3, r2
 8008c16:	009b      	lsls	r3, r3, #2
 8008c18:	440b      	add	r3, r1
 8008c1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008c1e:	2200      	movs	r2, #0
 8008c20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c22:	7bfb      	ldrb	r3, [r7, #15]
 8008c24:	3301      	adds	r3, #1
 8008c26:	73fb      	strb	r3, [r7, #15]
 8008c28:	7bfa      	ldrb	r2, [r7, #15]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d3b5      	bcc.n	8008b9e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	687e      	ldr	r6, [r7, #4]
 8008c3a:	466d      	mov	r5, sp
 8008c3c:	f106 0410 	add.w	r4, r6, #16
 8008c40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c50:	1d33      	adds	r3, r6, #4
 8008c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c54:	6838      	ldr	r0, [r7, #0]
 8008c56:	f003 ff93 	bl	800cb80 <USB_DevInit>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d005      	beq.n	8008c6c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2202      	movs	r2, #2
 8008c64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e00d      	b.n	8008c88 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2201      	movs	r2, #1
 8008c78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f005 f80f 	bl	800dca4 <USB_DevDisconnect>

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d101      	bne.n	8008cac <HAL_PCD_Start+0x1c>
 8008ca8:	2302      	movs	r3, #2
 8008caa:	e020      	b.n	8008cee <HAL_PCD_Start+0x5e>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d109      	bne.n	8008cd0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d005      	beq.n	8008cd0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 fee5 	bl	800caa4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f004 ffbf 	bl	800dc62 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008cf6:	b590      	push	{r4, r7, lr}
 8008cf8:	b08d      	sub	sp, #52	; 0x34
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f005 f87d 	bl	800de0c <USB_GetMode>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 839d 	bne.w	8009454 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f004 ffe1 	bl	800dce6 <USB_ReadInterrupts>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f000 8393 	beq.w	8009452 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f004 ffd8 	bl	800dce6 <USB_ReadInterrupts>
 8008d36:	4603      	mov	r3, r0
 8008d38:	f003 0302 	and.w	r3, r3, #2
 8008d3c:	2b02      	cmp	r3, #2
 8008d3e:	d107      	bne.n	8008d50 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	695a      	ldr	r2, [r3, #20]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f002 0202 	and.w	r2, r2, #2
 8008d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f004 ffc6 	bl	800dce6 <USB_ReadInterrupts>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f003 0310 	and.w	r3, r3, #16
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	d161      	bne.n	8008e28 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	699a      	ldr	r2, [r3, #24]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f022 0210 	bic.w	r2, r2, #16
 8008d72:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008d74:	6a3b      	ldr	r3, [r7, #32]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	f003 020f 	and.w	r2, r3, #15
 8008d80:	4613      	mov	r3, r2
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	1a9b      	subs	r3, r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	4413      	add	r3, r2
 8008d90:	3304      	adds	r3, #4
 8008d92:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	0c5b      	lsrs	r3, r3, #17
 8008d98:	f003 030f 	and.w	r3, r3, #15
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d124      	bne.n	8008dea <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008da6:	4013      	ands	r3, r2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d035      	beq.n	8008e18 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	091b      	lsrs	r3, r3, #4
 8008db4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008db6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	6a38      	ldr	r0, [r7, #32]
 8008dc0:	f004 fdfd 	bl	800d9be <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	091b      	lsrs	r3, r3, #4
 8008dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008dd0:	441a      	add	r2, r3
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	091b      	lsrs	r3, r3, #4
 8008dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008de2:	441a      	add	r2, r3
 8008de4:	697b      	ldr	r3, [r7, #20]
 8008de6:	619a      	str	r2, [r3, #24]
 8008de8:	e016      	b.n	8008e18 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	0c5b      	lsrs	r3, r3, #17
 8008dee:	f003 030f 	and.w	r3, r3, #15
 8008df2:	2b06      	cmp	r3, #6
 8008df4:	d110      	bne.n	8008e18 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6a38      	ldr	r0, [r7, #32]
 8008e02:	f004 fddc 	bl	800d9be <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	699a      	ldr	r2, [r3, #24]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	091b      	lsrs	r3, r3, #4
 8008e0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008e12:	441a      	add	r2, r3
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0210 	orr.w	r2, r2, #16
 8008e26:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f004 ff5a 	bl	800dce6 <USB_ReadInterrupts>
 8008e32:	4603      	mov	r3, r0
 8008e34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008e38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008e3c:	d16e      	bne.n	8008f1c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4618      	mov	r0, r3
 8008e48:	f004 ff60 	bl	800dd0c <USB_ReadDevAllOutEpInterrupt>
 8008e4c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008e4e:	e062      	b.n	8008f16 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	f003 0301 	and.w	r3, r3, #1
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d057      	beq.n	8008f0a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e60:	b2d2      	uxtb	r2, r2
 8008e62:	4611      	mov	r1, r2
 8008e64:	4618      	mov	r0, r3
 8008e66:	f004 ff85 	bl	800dd74 <USB_ReadDevOutEPInterrupt>
 8008e6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00c      	beq.n	8008e90 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	015a      	lsls	r2, r3, #5
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	4413      	add	r3, r2
 8008e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e82:	461a      	mov	r2, r3
 8008e84:	2301      	movs	r3, #1
 8008e86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fdb0 	bl	80099f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	f003 0308 	and.w	r3, r3, #8
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	015a      	lsls	r2, r3, #5
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	4413      	add	r3, r2
 8008ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	2308      	movs	r3, #8
 8008eaa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008eac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f000 feaa 	bl	8009c08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	f003 0310 	and.w	r3, r3, #16
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d008      	beq.n	8008ed0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eca:	461a      	mov	r2, r3
 8008ecc:	2310      	movs	r3, #16
 8008ece:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	f003 0320 	and.w	r3, r3, #32
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d008      	beq.n	8008eec <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	2320      	movs	r3, #32
 8008eea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d009      	beq.n	8008f0a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	69fb      	ldr	r3, [r7, #28]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f02:	461a      	mov	r2, r3
 8008f04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008f08:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	085b      	lsrs	r3, r3, #1
 8008f14:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d199      	bne.n	8008e50 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f004 fee0 	bl	800dce6 <USB_ReadInterrupts>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f2c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f30:	f040 80c0 	bne.w	80090b4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f004 ff01 	bl	800dd40 <USB_ReadDevAllInEpInterrupt>
 8008f3e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008f40:	2300      	movs	r3, #0
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008f44:	e0b2      	b.n	80090ac <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80a7 	beq.w	80090a0 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f58:	b2d2      	uxtb	r2, r2
 8008f5a:	4611      	mov	r1, r2
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f004 ff27 	bl	800ddb0 <USB_ReadDevInEPInterrupt>
 8008f62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d057      	beq.n	800901e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	2201      	movs	r2, #1
 8008f76:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
 8008f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	43db      	mvns	r3, r3
 8008f88:	69f9      	ldr	r1, [r7, #28]
 8008f8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f8e:	4013      	ands	r3, r2
 8008f90:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f94:	015a      	lsls	r2, r3, #5
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	4413      	add	r3, r2
 8008f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	d132      	bne.n	8009012 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008fac:	6879      	ldr	r1, [r7, #4]
 8008fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	00db      	lsls	r3, r3, #3
 8008fb4:	1a9b      	subs	r3, r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	440b      	add	r3, r1
 8008fba:	3348      	adds	r3, #72	; 0x48
 8008fbc:	6819      	ldr	r1, [r3, #0]
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	00db      	lsls	r3, r3, #3
 8008fc6:	1a9b      	subs	r3, r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4403      	add	r3, r0
 8008fcc:	3344      	adds	r3, #68	; 0x44
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	4419      	add	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	00db      	lsls	r3, r3, #3
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4403      	add	r3, r0
 8008fe0:	3348      	adds	r3, #72	; 0x48
 8008fe2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d113      	bne.n	8009012 <HAL_PCD_IRQHandler+0x31c>
 8008fea:	6879      	ldr	r1, [r7, #4]
 8008fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fee:	4613      	mov	r3, r2
 8008ff0:	00db      	lsls	r3, r3, #3
 8008ff2:	1a9b      	subs	r3, r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	440b      	add	r3, r1
 8008ff8:	3350      	adds	r3, #80	; 0x50
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d108      	bne.n	8009012 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6818      	ldr	r0, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800900a:	461a      	mov	r2, r3
 800900c:	2101      	movs	r1, #1
 800900e:	f004 ff2f 	bl	800de70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	b2db      	uxtb	r3, r3
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f00e fa38 	bl	801748e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f003 0308 	and.w	r3, r3, #8
 8009024:	2b00      	cmp	r3, #0
 8009026:	d008      	beq.n	800903a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902a:	015a      	lsls	r2, r3, #5
 800902c:	69fb      	ldr	r3, [r7, #28]
 800902e:	4413      	add	r3, r2
 8009030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009034:	461a      	mov	r2, r3
 8009036:	2308      	movs	r3, #8
 8009038:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	f003 0310 	and.w	r3, r3, #16
 8009040:	2b00      	cmp	r3, #0
 8009042:	d008      	beq.n	8009056 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009046:	015a      	lsls	r2, r3, #5
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	4413      	add	r3, r2
 800904c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009050:	461a      	mov	r2, r3
 8009052:	2310      	movs	r3, #16
 8009054:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800905c:	2b00      	cmp	r3, #0
 800905e:	d008      	beq.n	8009072 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906c:	461a      	mov	r2, r3
 800906e:	2340      	movs	r3, #64	; 0x40
 8009070:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b00      	cmp	r3, #0
 800907a:	d008      	beq.n	800908e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	015a      	lsls	r2, r3, #5
 8009080:	69fb      	ldr	r3, [r7, #28]
 8009082:	4413      	add	r3, r2
 8009084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009088:	461a      	mov	r2, r3
 800908a:	2302      	movs	r3, #2
 800908c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009094:	2b00      	cmp	r3, #0
 8009096:	d003      	beq.n	80090a0 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fc1b 	bl	80098d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80090a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090a2:	3301      	adds	r3, #1
 80090a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80090a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a8:	085b      	lsrs	r3, r3, #1
 80090aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80090ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f47f af49 	bne.w	8008f46 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f004 fe14 	bl	800dce6 <USB_ReadInterrupts>
 80090be:	4603      	mov	r3, r0
 80090c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090c8:	d122      	bne.n	8009110 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	69fa      	ldr	r2, [r7, #28]
 80090d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090d8:	f023 0301 	bic.w	r3, r3, #1
 80090dc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d108      	bne.n	80090fa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80090f0:	2100      	movs	r1, #0
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fe26 	bl	8009d44 <HAL_PCDEx_LPM_Callback>
 80090f8:	e002      	b.n	8009100 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f00e fa3e 	bl	801757c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	695a      	ldr	r2, [r3, #20]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800910e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f004 fde6 	bl	800dce6 <USB_ReadInterrupts>
 800911a:	4603      	mov	r3, r0
 800911c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009124:	d112      	bne.n	800914c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 0301 	and.w	r3, r3, #1
 8009132:	2b01      	cmp	r3, #1
 8009134:	d102      	bne.n	800913c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f00e f9fa 	bl	8017530 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	695a      	ldr	r2, [r3, #20]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800914a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4618      	mov	r0, r3
 8009152:	f004 fdc8 	bl	800dce6 <USB_ReadInterrupts>
 8009156:	4603      	mov	r3, r0
 8009158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800915c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009160:	f040 80c7 	bne.w	80092f2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	69fa      	ldr	r2, [r7, #28]
 800916e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009172:	f023 0301 	bic.w	r3, r3, #1
 8009176:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2110      	movs	r1, #16
 800917e:	4618      	mov	r0, r3
 8009180:	f003 fe62 	bl	800ce48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009184:	2300      	movs	r3, #0
 8009186:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009188:	e056      	b.n	8009238 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009196:	461a      	mov	r2, r3
 8009198:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800919c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800919e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a0:	015a      	lsls	r2, r3, #5
 80091a2:	69fb      	ldr	r3, [r7, #28]
 80091a4:	4413      	add	r3, r2
 80091a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ae:	0151      	lsls	r1, r2, #5
 80091b0:	69fa      	ldr	r2, [r7, #28]
 80091b2:	440a      	add	r2, r1
 80091b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091bc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80091be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	69fa      	ldr	r2, [r7, #28]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80091de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	69fb      	ldr	r3, [r7, #28]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ea:	461a      	mov	r2, r3
 80091ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80091f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	69fb      	ldr	r3, [r7, #28]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009202:	0151      	lsls	r1, r2, #5
 8009204:	69fa      	ldr	r2, [r7, #28]
 8009206:	440a      	add	r2, r1
 8009208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800920c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009210:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009222:	0151      	lsls	r1, r2, #5
 8009224:	69fa      	ldr	r2, [r7, #28]
 8009226:	440a      	add	r2, r1
 8009228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800922c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009230:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	3301      	adds	r3, #1
 8009236:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800923e:	429a      	cmp	r2, r3
 8009240:	d3a3      	bcc.n	800918a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	69fa      	ldr	r2, [r7, #28]
 800924c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009250:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009254:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925a:	2b00      	cmp	r3, #0
 800925c:	d016      	beq.n	800928c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009268:	69fa      	ldr	r2, [r7, #28]
 800926a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800926e:	f043 030b 	orr.w	r3, r3, #11
 8009272:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800927c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800927e:	69fa      	ldr	r2, [r7, #28]
 8009280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009284:	f043 030b 	orr.w	r3, r3, #11
 8009288:	6453      	str	r3, [r2, #68]	; 0x44
 800928a:	e015      	b.n	80092b8 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800928c:	69fb      	ldr	r3, [r7, #28]
 800928e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009292:	695b      	ldr	r3, [r3, #20]
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800929a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800929e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80092a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092aa:	691b      	ldr	r3, [r3, #16]
 80092ac:	69fa      	ldr	r2, [r7, #28]
 80092ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092b2:	f043 030b 	orr.w	r3, r3, #11
 80092b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80092b8:	69fb      	ldr	r3, [r7, #28]
 80092ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	69fa      	ldr	r2, [r7, #28]
 80092c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80092ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80092dc:	461a      	mov	r2, r3
 80092de:	f004 fdc7 	bl	800de70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	695a      	ldr	r2, [r3, #20]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80092f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f004 fcf5 	bl	800dce6 <USB_ReadInterrupts>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009306:	d124      	bne.n	8009352 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4618      	mov	r0, r3
 800930e:	f004 fd8b 	bl	800de28 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4618      	mov	r0, r3
 8009318:	f003 fdf3 	bl	800cf02 <USB_GetDevSpeed>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681c      	ldr	r4, [r3, #0]
 8009328:	f001 f958 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 800932c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009332:	b2db      	uxtb	r3, r3
 8009334:	461a      	mov	r2, r3
 8009336:	4620      	mov	r0, r4
 8009338:	f003 fb12 	bl	800c960 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f00e f8ce 	bl	80174de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	695a      	ldr	r2, [r3, #20]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009350:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f004 fcc5 	bl	800dce6 <USB_ReadInterrupts>
 800935c:	4603      	mov	r3, r0
 800935e:	f003 0308 	and.w	r3, r3, #8
 8009362:	2b08      	cmp	r3, #8
 8009364:	d10a      	bne.n	800937c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f00e f8ab 	bl	80174c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	695a      	ldr	r2, [r3, #20]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f002 0208 	and.w	r2, r2, #8
 800937a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4618      	mov	r0, r3
 8009382:	f004 fcb0 	bl	800dce6 <USB_ReadInterrupts>
 8009386:	4603      	mov	r3, r0
 8009388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800938c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009390:	d10f      	bne.n	80093b2 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009392:	2300      	movs	r3, #0
 8009394:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009398:	b2db      	uxtb	r3, r3
 800939a:	4619      	mov	r1, r3
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f00e f90d 	bl	80175bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	695a      	ldr	r2, [r3, #20]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80093b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f004 fc95 	bl	800dce6 <USB_ReadInterrupts>
 80093bc:	4603      	mov	r3, r0
 80093be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80093c6:	d10f      	bne.n	80093e8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80093c8:	2300      	movs	r3, #0
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f00e f8e0 	bl	8017598 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	695a      	ldr	r2, [r3, #20]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80093e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f004 fc7a 	bl	800dce6 <USB_ReadInterrupts>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d10a      	bne.n	8009414 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f00e f8ee 	bl	80175e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695a      	ldr	r2, [r3, #20]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4618      	mov	r0, r3
 800941a:	f004 fc64 	bl	800dce6 <USB_ReadInterrupts>
 800941e:	4603      	mov	r3, r0
 8009420:	f003 0304 	and.w	r3, r3, #4
 8009424:	2b04      	cmp	r3, #4
 8009426:	d115      	bne.n	8009454 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	f003 0304 	and.w	r3, r3, #4
 8009436:	2b00      	cmp	r3, #0
 8009438:	d002      	beq.n	8009440 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f00e f8de 	bl	80175fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	6859      	ldr	r1, [r3, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	69ba      	ldr	r2, [r7, #24]
 800944c:	430a      	orrs	r2, r1
 800944e:	605a      	str	r2, [r3, #4]
 8009450:	e000      	b.n	8009454 <HAL_PCD_IRQHandler+0x75e>
      return;
 8009452:	bf00      	nop
    }
  }
}
 8009454:	3734      	adds	r7, #52	; 0x34
 8009456:	46bd      	mov	sp, r7
 8009458:	bd90      	pop	{r4, r7, pc}

0800945a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
 8009462:	460b      	mov	r3, r1
 8009464:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800946c:	2b01      	cmp	r3, #1
 800946e:	d101      	bne.n	8009474 <HAL_PCD_SetAddress+0x1a>
 8009470:	2302      	movs	r3, #2
 8009472:	e013      	b.n	800949c <HAL_PCD_SetAddress+0x42>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2201      	movs	r2, #1
 8009478:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	78fa      	ldrb	r2, [r7, #3]
 8009480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	78fa      	ldrb	r2, [r7, #3]
 800948a:	4611      	mov	r1, r2
 800948c:	4618      	mov	r0, r3
 800948e:	f004 fbc2 	bl	800dc16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3708      	adds	r7, #8
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}

080094a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80094a4:	b580      	push	{r7, lr}
 80094a6:	b084      	sub	sp, #16
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
 80094ac:	4608      	mov	r0, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	461a      	mov	r2, r3
 80094b2:	4603      	mov	r3, r0
 80094b4:	70fb      	strb	r3, [r7, #3]
 80094b6:	460b      	mov	r3, r1
 80094b8:	803b      	strh	r3, [r7, #0]
 80094ba:	4613      	mov	r3, r2
 80094bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80094be:	2300      	movs	r3, #0
 80094c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	da0f      	bge.n	80094ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094ca:	78fb      	ldrb	r3, [r7, #3]
 80094cc:	f003 020f 	and.w	r2, r3, #15
 80094d0:	4613      	mov	r3, r2
 80094d2:	00db      	lsls	r3, r3, #3
 80094d4:	1a9b      	subs	r3, r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	3338      	adds	r3, #56	; 0x38
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4413      	add	r3, r2
 80094de:	3304      	adds	r3, #4
 80094e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	705a      	strb	r2, [r3, #1]
 80094e8:	e00f      	b.n	800950a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094ea:	78fb      	ldrb	r3, [r7, #3]
 80094ec:	f003 020f 	and.w	r2, r3, #15
 80094f0:	4613      	mov	r3, r2
 80094f2:	00db      	lsls	r3, r3, #3
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	4413      	add	r3, r2
 8009500:	3304      	adds	r3, #4
 8009502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2200      	movs	r2, #0
 8009508:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800950a:	78fb      	ldrb	r3, [r7, #3]
 800950c:	f003 030f 	and.w	r3, r3, #15
 8009510:	b2da      	uxtb	r2, r3
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009516:	883a      	ldrh	r2, [r7, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	78ba      	ldrb	r2, [r7, #2]
 8009520:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	785b      	ldrb	r3, [r3, #1]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d004      	beq.n	8009534 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	b29a      	uxth	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009534:	78bb      	ldrb	r3, [r7, #2]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d102      	bne.n	8009540 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009546:	2b01      	cmp	r3, #1
 8009548:	d101      	bne.n	800954e <HAL_PCD_EP_Open+0xaa>
 800954a:	2302      	movs	r3, #2
 800954c:	e00e      	b.n	800956c <HAL_PCD_EP_Open+0xc8>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	68f9      	ldr	r1, [r7, #12]
 800955c:	4618      	mov	r0, r3
 800955e:	f003 fcf5 	bl	800cf4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800956a:	7afb      	ldrb	r3, [r7, #11]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009580:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009584:	2b00      	cmp	r3, #0
 8009586:	da0f      	bge.n	80095a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009588:	78fb      	ldrb	r3, [r7, #3]
 800958a:	f003 020f 	and.w	r2, r3, #15
 800958e:	4613      	mov	r3, r2
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	1a9b      	subs	r3, r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	3338      	adds	r3, #56	; 0x38
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4413      	add	r3, r2
 800959c:	3304      	adds	r3, #4
 800959e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	705a      	strb	r2, [r3, #1]
 80095a6:	e00f      	b.n	80095c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	f003 020f 	and.w	r2, r3, #15
 80095ae:	4613      	mov	r3, r2
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	1a9b      	subs	r3, r3, r2
 80095b4:	009b      	lsls	r3, r3, #2
 80095b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	4413      	add	r3, r2
 80095be:	3304      	adds	r3, #4
 80095c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	f003 030f 	and.w	r3, r3, #15
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d101      	bne.n	80095e2 <HAL_PCD_EP_Close+0x6e>
 80095de:	2302      	movs	r3, #2
 80095e0:	e00e      	b.n	8009600 <HAL_PCD_EP_Close+0x8c>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68f9      	ldr	r1, [r7, #12]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f003 fd33 	bl	800d05c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	460b      	mov	r3, r1
 8009616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	f003 020f 	and.w	r2, r3, #15
 800961e:	4613      	mov	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	4413      	add	r3, r2
 800962e:	3304      	adds	r3, #4
 8009630:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2200      	movs	r2, #0
 8009642:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	2200      	movs	r2, #0
 8009648:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800964a:	7afb      	ldrb	r3, [r7, #11]
 800964c:	f003 030f 	and.w	r3, r3, #15
 8009650:	b2da      	uxtb	r2, r3
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	691b      	ldr	r3, [r3, #16]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d102      	bne.n	8009664 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009664:	7afb      	ldrb	r3, [r7, #11]
 8009666:	f003 030f 	and.w	r3, r3, #15
 800966a:	2b00      	cmp	r3, #0
 800966c:	d109      	bne.n	8009682 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	b2db      	uxtb	r3, r3
 8009678:	461a      	mov	r2, r3
 800967a:	6979      	ldr	r1, [r7, #20]
 800967c:	f004 f80e 	bl	800d69c <USB_EP0StartXfer>
 8009680:	e008      	b.n	8009694 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6818      	ldr	r0, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	b2db      	uxtb	r3, r3
 800968c:	461a      	mov	r2, r3
 800968e:	6979      	ldr	r1, [r7, #20]
 8009690:	f003 fdc0 	bl	800d214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3718      	adds	r7, #24
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800969e:	b480      	push	{r7}
 80096a0:	b083      	sub	sp, #12
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	460b      	mov	r3, r1
 80096a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80096aa:	78fb      	ldrb	r3, [r7, #3]
 80096ac:	f003 020f 	and.w	r2, r3, #15
 80096b0:	6879      	ldr	r1, [r7, #4]
 80096b2:	4613      	mov	r3, r2
 80096b4:	00db      	lsls	r3, r3, #3
 80096b6:	1a9b      	subs	r3, r3, r2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	440b      	add	r3, r1
 80096bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80096c0:	681b      	ldr	r3, [r3, #0]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b086      	sub	sp, #24
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	60f8      	str	r0, [r7, #12]
 80096d6:	607a      	str	r2, [r7, #4]
 80096d8:	603b      	str	r3, [r7, #0]
 80096da:	460b      	mov	r3, r1
 80096dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096de:	7afb      	ldrb	r3, [r7, #11]
 80096e0:	f003 020f 	and.w	r2, r3, #15
 80096e4:	4613      	mov	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	3338      	adds	r3, #56	; 0x38
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	4413      	add	r3, r2
 80096f2:	3304      	adds	r3, #4
 80096f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80096f6:	697b      	ldr	r3, [r7, #20]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	683a      	ldr	r2, [r7, #0]
 8009700:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	2200      	movs	r2, #0
 8009706:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2201      	movs	r2, #1
 800970c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800970e:	7afb      	ldrb	r3, [r7, #11]
 8009710:	f003 030f 	and.w	r3, r3, #15
 8009714:	b2da      	uxtb	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b01      	cmp	r3, #1
 8009720:	d102      	bne.n	8009728 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009728:	7afb      	ldrb	r3, [r7, #11]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	2b00      	cmp	r3, #0
 8009730:	d109      	bne.n	8009746 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6818      	ldr	r0, [r3, #0]
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	691b      	ldr	r3, [r3, #16]
 800973a:	b2db      	uxtb	r3, r3
 800973c:	461a      	mov	r2, r3
 800973e:	6979      	ldr	r1, [r7, #20]
 8009740:	f003 ffac 	bl	800d69c <USB_EP0StartXfer>
 8009744:	e008      	b.n	8009758 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6818      	ldr	r0, [r3, #0]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	b2db      	uxtb	r3, r3
 8009750:	461a      	mov	r2, r3
 8009752:	6979      	ldr	r1, [r7, #20]
 8009754:	f003 fd5e 	bl	800d214 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	460b      	mov	r3, r1
 800976c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	f003 020f 	and.w	r2, r3, #15
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	429a      	cmp	r2, r3
 800977a:	d901      	bls.n	8009780 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e050      	b.n	8009822 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009784:	2b00      	cmp	r3, #0
 8009786:	da0f      	bge.n	80097a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009788:	78fb      	ldrb	r3, [r7, #3]
 800978a:	f003 020f 	and.w	r2, r3, #15
 800978e:	4613      	mov	r3, r2
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	3338      	adds	r3, #56	; 0x38
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	3304      	adds	r3, #4
 800979e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2201      	movs	r2, #1
 80097a4:	705a      	strb	r2, [r3, #1]
 80097a6:	e00d      	b.n	80097c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80097a8:	78fa      	ldrb	r2, [r7, #3]
 80097aa:	4613      	mov	r3, r2
 80097ac:	00db      	lsls	r3, r3, #3
 80097ae:	1a9b      	subs	r3, r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4413      	add	r3, r2
 80097ba:	3304      	adds	r3, #4
 80097bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2200      	movs	r2, #0
 80097c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2201      	movs	r2, #1
 80097c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097ca:	78fb      	ldrb	r3, [r7, #3]
 80097cc:	f003 030f 	and.w	r3, r3, #15
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d101      	bne.n	80097e4 <HAL_PCD_EP_SetStall+0x82>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e01e      	b.n	8009822 <HAL_PCD_EP_SetStall+0xc0>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68f9      	ldr	r1, [r7, #12]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f004 f93b 	bl	800da6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80097f8:	78fb      	ldrb	r3, [r7, #3]
 80097fa:	f003 030f 	and.w	r3, r3, #15
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6818      	ldr	r0, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	b2d9      	uxtb	r1, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009812:	461a      	mov	r2, r3
 8009814:	f004 fb2c 	bl	800de70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b084      	sub	sp, #16
 800982e:	af00      	add	r7, sp, #0
 8009830:	6078      	str	r0, [r7, #4]
 8009832:	460b      	mov	r3, r1
 8009834:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	f003 020f 	and.w	r2, r3, #15
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	429a      	cmp	r2, r3
 8009842:	d901      	bls.n	8009848 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e042      	b.n	80098ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800984c:	2b00      	cmp	r3, #0
 800984e:	da0f      	bge.n	8009870 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	f003 020f 	and.w	r2, r3, #15
 8009856:	4613      	mov	r3, r2
 8009858:	00db      	lsls	r3, r3, #3
 800985a:	1a9b      	subs	r3, r3, r2
 800985c:	009b      	lsls	r3, r3, #2
 800985e:	3338      	adds	r3, #56	; 0x38
 8009860:	687a      	ldr	r2, [r7, #4]
 8009862:	4413      	add	r3, r2
 8009864:	3304      	adds	r3, #4
 8009866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2201      	movs	r2, #1
 800986c:	705a      	strb	r2, [r3, #1]
 800986e:	e00f      	b.n	8009890 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009870:	78fb      	ldrb	r3, [r7, #3]
 8009872:	f003 020f 	and.w	r2, r3, #15
 8009876:	4613      	mov	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	1a9b      	subs	r3, r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	3304      	adds	r3, #4
 8009888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009896:	78fb      	ldrb	r3, [r7, #3]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	b2da      	uxtb	r2, r3
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d101      	bne.n	80098b0 <HAL_PCD_EP_ClrStall+0x86>
 80098ac:	2302      	movs	r3, #2
 80098ae:	e00e      	b.n	80098ce <HAL_PCD_EP_ClrStall+0xa4>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	4618      	mov	r0, r3
 80098c0:	f004 f943 	bl	800db4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80098cc:	2300      	movs	r3, #0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b08a      	sub	sp, #40	; 0x28
 80098da:	af02      	add	r7, sp, #8
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4613      	mov	r3, r2
 80098ee:	00db      	lsls	r3, r3, #3
 80098f0:	1a9b      	subs	r3, r3, r2
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	3338      	adds	r3, #56	; 0x38
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	4413      	add	r3, r2
 80098fa:	3304      	adds	r3, #4
 80098fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	429a      	cmp	r2, r3
 8009908:	d901      	bls.n	800990e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e06c      	b.n	80099e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	695a      	ldr	r2, [r3, #20]
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	1ad3      	subs	r3, r2, r3
 8009918:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	69fa      	ldr	r2, [r7, #28]
 8009920:	429a      	cmp	r2, r3
 8009922:	d902      	bls.n	800992a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	3303      	adds	r3, #3
 800992e:	089b      	lsrs	r3, r3, #2
 8009930:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009932:	e02b      	b.n	800998c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	695a      	ldr	r2, [r3, #20]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	69fa      	ldr	r2, [r7, #28]
 8009946:	429a      	cmp	r2, r3
 8009948:	d902      	bls.n	8009950 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	3303      	adds	r3, #3
 8009954:	089b      	lsrs	r3, r3, #2
 8009956:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	68d9      	ldr	r1, [r3, #12]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	b2da      	uxtb	r2, r3
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009968:	b2db      	uxtb	r3, r3
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	4603      	mov	r3, r0
 800996e:	6978      	ldr	r0, [r7, #20]
 8009970:	f003 ffe7 	bl	800d942 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	441a      	add	r2, r3
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	699a      	ldr	r2, [r3, #24]
 8009984:	69fb      	ldr	r3, [r7, #28]
 8009986:	441a      	add	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	015a      	lsls	r2, r3, #5
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	4413      	add	r3, r2
 8009994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009998:	699b      	ldr	r3, [r3, #24]
 800999a:	b29b      	uxth	r3, r3
 800999c:	69ba      	ldr	r2, [r7, #24]
 800999e:	429a      	cmp	r2, r3
 80099a0:	d809      	bhi.n	80099b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	699a      	ldr	r2, [r3, #24]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d203      	bcs.n	80099b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d1be      	bne.n	8009934 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	695a      	ldr	r2, [r3, #20]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d811      	bhi.n	80099e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	f003 030f 	and.w	r3, r3, #15
 80099c8:	2201      	movs	r2, #1
 80099ca:	fa02 f303 	lsl.w	r3, r2, r3
 80099ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	43db      	mvns	r3, r3
 80099dc:	6939      	ldr	r1, [r7, #16]
 80099de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099e2:	4013      	ands	r3, r2
 80099e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80099e6:	2300      	movs	r3, #0
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3720      	adds	r7, #32
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b086      	sub	sp, #24
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	333c      	adds	r3, #60	; 0x3c
 8009a08:	3304      	adds	r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	f040 80a0 	bne.w	8009b68 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	f003 0308 	and.w	r3, r3, #8
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d015      	beq.n	8009a5e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	4a72      	ldr	r2, [pc, #456]	; (8009c00 <PCD_EP_OutXfrComplete_int+0x210>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	f240 80dd 	bls.w	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 80d7 	beq.w	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	015a      	lsls	r2, r3, #5
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	4413      	add	r3, r2
 8009a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a54:	461a      	mov	r2, r3
 8009a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a5a:	6093      	str	r3, [r2, #8]
 8009a5c:	e0cb      	b.n	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d009      	beq.n	8009a7c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a74:	461a      	mov	r2, r3
 8009a76:	2320      	movs	r3, #32
 8009a78:	6093      	str	r3, [r2, #8]
 8009a7a:	e0bc      	b.n	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f040 80b7 	bne.w	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	4a5d      	ldr	r2, [pc, #372]	; (8009c00 <PCD_EP_OutXfrComplete_int+0x210>)
 8009a8c:	4293      	cmp	r3, r2
 8009a8e:	d90f      	bls.n	8009ab0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00a      	beq.n	8009ab0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	015a      	lsls	r2, r3, #5
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aac:	6093      	str	r3, [r2, #8]
 8009aae:	e0a2      	b.n	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	683a      	ldr	r2, [r7, #0]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	00db      	lsls	r3, r3, #3
 8009ab8:	1a9b      	subs	r3, r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	440b      	add	r3, r1
 8009abe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009ac2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	0159      	lsls	r1, r3, #5
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	440b      	add	r3, r1
 8009acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009ad6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	4613      	mov	r3, r2
 8009ade:	00db      	lsls	r3, r3, #3
 8009ae0:	1a9b      	subs	r3, r3, r2
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	4403      	add	r3, r0
 8009ae6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009aea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009afe:	6819      	ldr	r1, [r3, #0]
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	683a      	ldr	r2, [r7, #0]
 8009b04:	4613      	mov	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4403      	add	r3, r0
 8009b0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4419      	add	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	4613      	mov	r3, r2
 8009b1c:	00db      	lsls	r3, r3, #3
 8009b1e:	1a9b      	subs	r3, r3, r2
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4403      	add	r3, r0
 8009b24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b28:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d114      	bne.n	8009b5a <PCD_EP_OutXfrComplete_int+0x16a>
 8009b30:	6879      	ldr	r1, [r7, #4]
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	4613      	mov	r3, r2
 8009b36:	00db      	lsls	r3, r3, #3
 8009b38:	1a9b      	subs	r3, r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d108      	bne.n	8009b5a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b52:	461a      	mov	r2, r3
 8009b54:	2101      	movs	r1, #1
 8009b56:	f004 f98b 	bl	800de70 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f00d fc79 	bl	8017458 <HAL_PCD_DataOutStageCallback>
 8009b66:	e046      	b.n	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	4a26      	ldr	r2, [pc, #152]	; (8009c04 <PCD_EP_OutXfrComplete_int+0x214>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d124      	bne.n	8009bba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	015a      	lsls	r2, r3, #5
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	4413      	add	r3, r2
 8009b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b86:	461a      	mov	r2, r3
 8009b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b8c:	6093      	str	r3, [r2, #8]
 8009b8e:	e032      	b.n	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b90:	68bb      	ldr	r3, [r7, #8]
 8009b92:	f003 0320 	and.w	r3, r3, #32
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d008      	beq.n	8009bac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	2320      	movs	r3, #32
 8009baa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f00d fc50 	bl	8017458 <HAL_PCD_DataOutStageCallback>
 8009bb8:	e01d      	b.n	8009bf6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d114      	bne.n	8009bea <PCD_EP_OutXfrComplete_int+0x1fa>
 8009bc0:	6879      	ldr	r1, [r7, #4]
 8009bc2:	683a      	ldr	r2, [r7, #0]
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	1a9b      	subs	r3, r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	440b      	add	r3, r1
 8009bce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d108      	bne.n	8009bea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6818      	ldr	r0, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009be2:	461a      	mov	r2, r3
 8009be4:	2100      	movs	r1, #0
 8009be6:	f004 f943 	bl	800de70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	4619      	mov	r1, r3
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f00d fc31 	bl	8017458 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009bf6:	2300      	movs	r3, #0
}
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	3718      	adds	r7, #24
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}
 8009c00:	4f54300a 	.word	0x4f54300a
 8009c04:	4f54310a 	.word	0x4f54310a

08009c08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	333c      	adds	r3, #60	; 0x3c
 8009c20:	3304      	adds	r3, #4
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	015a      	lsls	r2, r3, #5
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	4a15      	ldr	r2, [pc, #84]	; (8009c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d90e      	bls.n	8009c5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d009      	beq.n	8009c5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c54:	461a      	mov	r2, r3
 8009c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f00d fbe9 	bl	8017434 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a0a      	ldr	r2, [pc, #40]	; (8009c90 <PCD_EP_OutSetupPacket_int+0x88>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d90c      	bls.n	8009c84 <PCD_EP_OutSetupPacket_int+0x7c>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d108      	bne.n	8009c84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6818      	ldr	r0, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	2101      	movs	r1, #1
 8009c80:	f004 f8f6 	bl	800de70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3718      	adds	r7, #24
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	4f54300a 	.word	0x4f54300a

08009c94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b085      	sub	sp, #20
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009caa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d107      	bne.n	8009cc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009cb2:	883b      	ldrh	r3, [r7, #0]
 8009cb4:	0419      	lsls	r1, r3, #16
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	430a      	orrs	r2, r1
 8009cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8009cc0:	e028      	b.n	8009d14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc8:	0c1b      	lsrs	r3, r3, #16
 8009cca:	68ba      	ldr	r2, [r7, #8]
 8009ccc:	4413      	add	r3, r2
 8009cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	73fb      	strb	r3, [r7, #15]
 8009cd4:	e00d      	b.n	8009cf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	3340      	adds	r3, #64	; 0x40
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	0c1b      	lsrs	r3, r3, #16
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	4413      	add	r3, r2
 8009cea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
 8009cee:	3301      	adds	r3, #1
 8009cf0:	73fb      	strb	r3, [r7, #15]
 8009cf2:	7bfa      	ldrb	r2, [r7, #15]
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	3b01      	subs	r3, #1
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d3ec      	bcc.n	8009cd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009cfc:	883b      	ldrh	r3, [r7, #0]
 8009cfe:	0418      	lsls	r0, r3, #16
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6819      	ldr	r1, [r3, #0]
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	4302      	orrs	r2, r0
 8009d0c:	3340      	adds	r3, #64	; 0x40
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	440b      	add	r3, r1
 8009d12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009d22:	b480      	push	{r7}
 8009d24:	b083      	sub	sp, #12
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	460b      	mov	r3, r1
 8009d2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	887a      	ldrh	r2, [r7, #2]
 8009d34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009d36:	2300      	movs	r3, #0
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	370c      	adds	r7, #12
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d42:	4770      	bx	lr

08009d44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d50:	bf00      	nop
 8009d52:	370c      	adds	r7, #12
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d101      	bne.n	8009d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e264      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d075      	beq.n	8009e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d7a:	4ba3      	ldr	r3, [pc, #652]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009d7c:	689b      	ldr	r3, [r3, #8]
 8009d7e:	f003 030c 	and.w	r3, r3, #12
 8009d82:	2b04      	cmp	r3, #4
 8009d84:	d00c      	beq.n	8009da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d86:	4ba0      	ldr	r3, [pc, #640]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009d8e:	2b08      	cmp	r3, #8
 8009d90:	d112      	bne.n	8009db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009d92:	4b9d      	ldr	r3, [pc, #628]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009d94:	685b      	ldr	r3, [r3, #4]
 8009d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d9e:	d10b      	bne.n	8009db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009da0:	4b99      	ldr	r3, [pc, #612]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d05b      	beq.n	8009e64 <HAL_RCC_OscConfig+0x108>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d157      	bne.n	8009e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	e23f      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dc0:	d106      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x74>
 8009dc2:	4b91      	ldr	r3, [pc, #580]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a90      	ldr	r2, [pc, #576]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dcc:	6013      	str	r3, [r2, #0]
 8009dce:	e01d      	b.n	8009e0c <HAL_RCC_OscConfig+0xb0>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009dd8:	d10c      	bne.n	8009df4 <HAL_RCC_OscConfig+0x98>
 8009dda:	4b8b      	ldr	r3, [pc, #556]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a8a      	ldr	r2, [pc, #552]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009de4:	6013      	str	r3, [r2, #0]
 8009de6:	4b88      	ldr	r3, [pc, #544]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	4a87      	ldr	r2, [pc, #540]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	e00b      	b.n	8009e0c <HAL_RCC_OscConfig+0xb0>
 8009df4:	4b84      	ldr	r3, [pc, #528]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a83      	ldr	r2, [pc, #524]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	4b81      	ldr	r3, [pc, #516]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a80      	ldr	r2, [pc, #512]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d013      	beq.n	8009e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e14:	f7fc fb0e 	bl	8006434 <HAL_GetTick>
 8009e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e1a:	e008      	b.n	8009e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e1c:	f7fc fb0a 	bl	8006434 <HAL_GetTick>
 8009e20:	4602      	mov	r2, r0
 8009e22:	693b      	ldr	r3, [r7, #16]
 8009e24:	1ad3      	subs	r3, r2, r3
 8009e26:	2b64      	cmp	r3, #100	; 0x64
 8009e28:	d901      	bls.n	8009e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e2a:	2303      	movs	r3, #3
 8009e2c:	e204      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e2e:	4b76      	ldr	r3, [pc, #472]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d0f0      	beq.n	8009e1c <HAL_RCC_OscConfig+0xc0>
 8009e3a:	e014      	b.n	8009e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e3c:	f7fc fafa 	bl	8006434 <HAL_GetTick>
 8009e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e42:	e008      	b.n	8009e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e44:	f7fc faf6 	bl	8006434 <HAL_GetTick>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	2b64      	cmp	r3, #100	; 0x64
 8009e50:	d901      	bls.n	8009e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009e52:	2303      	movs	r3, #3
 8009e54:	e1f0      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009e56:	4b6c      	ldr	r3, [pc, #432]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f0      	bne.n	8009e44 <HAL_RCC_OscConfig+0xe8>
 8009e62:	e000      	b.n	8009e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f003 0302 	and.w	r3, r3, #2
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d063      	beq.n	8009f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e72:	4b65      	ldr	r3, [pc, #404]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e74:	689b      	ldr	r3, [r3, #8]
 8009e76:	f003 030c 	and.w	r3, r3, #12
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00b      	beq.n	8009e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e7e:	4b62      	ldr	r3, [pc, #392]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009e86:	2b08      	cmp	r3, #8
 8009e88:	d11c      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009e8a:	4b5f      	ldr	r3, [pc, #380]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d116      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009e96:	4b5c      	ldr	r3, [pc, #368]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 0302 	and.w	r3, r3, #2
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <HAL_RCC_OscConfig+0x152>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	68db      	ldr	r3, [r3, #12]
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	d001      	beq.n	8009eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009eaa:	2301      	movs	r3, #1
 8009eac:	e1c4      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009eae:	4b56      	ldr	r3, [pc, #344]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	4952      	ldr	r1, [pc, #328]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ec2:	e03a      	b.n	8009f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d020      	beq.n	8009f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ecc:	4b4f      	ldr	r3, [pc, #316]	; (800a00c <HAL_RCC_OscConfig+0x2b0>)
 8009ece:	2201      	movs	r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ed2:	f7fc faaf 	bl	8006434 <HAL_GetTick>
 8009ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ed8:	e008      	b.n	8009eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009eda:	f7fc faab 	bl	8006434 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e1a5      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009eec:	4b46      	ldr	r3, [pc, #280]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d0f0      	beq.n	8009eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ef8:	4b43      	ldr	r3, [pc, #268]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	4940      	ldr	r1, [pc, #256]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	600b      	str	r3, [r1, #0]
 8009f0c:	e015      	b.n	8009f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f0e:	4b3f      	ldr	r3, [pc, #252]	; (800a00c <HAL_RCC_OscConfig+0x2b0>)
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f14:	f7fc fa8e 	bl	8006434 <HAL_GetTick>
 8009f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f1a:	e008      	b.n	8009f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f1c:	f7fc fa8a 	bl	8006434 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d901      	bls.n	8009f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f2a:	2303      	movs	r3, #3
 8009f2c:	e184      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f2e:	4b36      	ldr	r3, [pc, #216]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1f0      	bne.n	8009f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0308 	and.w	r3, r3, #8
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d030      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d016      	beq.n	8009f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009f4e:	4b30      	ldr	r3, [pc, #192]	; (800a010 <HAL_RCC_OscConfig+0x2b4>)
 8009f50:	2201      	movs	r2, #1
 8009f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f54:	f7fc fa6e 	bl	8006434 <HAL_GetTick>
 8009f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f5a:	e008      	b.n	8009f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f5c:	f7fc fa6a 	bl	8006434 <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d901      	bls.n	8009f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009f6a:	2303      	movs	r3, #3
 8009f6c:	e164      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009f6e:	4b26      	ldr	r3, [pc, #152]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d0f0      	beq.n	8009f5c <HAL_RCC_OscConfig+0x200>
 8009f7a:	e015      	b.n	8009fa8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f7c:	4b24      	ldr	r3, [pc, #144]	; (800a010 <HAL_RCC_OscConfig+0x2b4>)
 8009f7e:	2200      	movs	r2, #0
 8009f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f82:	f7fc fa57 	bl	8006434 <HAL_GetTick>
 8009f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f88:	e008      	b.n	8009f9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009f8a:	f7fc fa53 	bl	8006434 <HAL_GetTick>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d901      	bls.n	8009f9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	e14d      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009f9c:	4b1a      	ldr	r3, [pc, #104]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1f0      	bne.n	8009f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 80a0 	beq.w	800a0f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009fba:	4b13      	ldr	r3, [pc, #76]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d10f      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60bb      	str	r3, [r7, #8]
 8009fca:	4b0f      	ldr	r3, [pc, #60]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fce:	4a0e      	ldr	r2, [pc, #56]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8009fd6:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <HAL_RCC_OscConfig+0x2ac>)
 8009fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fde:	60bb      	str	r3, [r7, #8]
 8009fe0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	; (800a014 <HAL_RCC_OscConfig+0x2b8>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d121      	bne.n	800a036 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009ff2:	4b08      	ldr	r3, [pc, #32]	; (800a014 <HAL_RCC_OscConfig+0x2b8>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a07      	ldr	r2, [pc, #28]	; (800a014 <HAL_RCC_OscConfig+0x2b8>)
 8009ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ffc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ffe:	f7fc fa19 	bl	8006434 <HAL_GetTick>
 800a002:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a004:	e011      	b.n	800a02a <HAL_RCC_OscConfig+0x2ce>
 800a006:	bf00      	nop
 800a008:	40023800 	.word	0x40023800
 800a00c:	42470000 	.word	0x42470000
 800a010:	42470e80 	.word	0x42470e80
 800a014:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a018:	f7fc fa0c 	bl	8006434 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e106      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a02a:	4b85      	ldr	r3, [pc, #532]	; (800a240 <HAL_RCC_OscConfig+0x4e4>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d106      	bne.n	800a04c <HAL_RCC_OscConfig+0x2f0>
 800a03e:	4b81      	ldr	r3, [pc, #516]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a042:	4a80      	ldr	r2, [pc, #512]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a044:	f043 0301 	orr.w	r3, r3, #1
 800a048:	6713      	str	r3, [r2, #112]	; 0x70
 800a04a:	e01c      	b.n	800a086 <HAL_RCC_OscConfig+0x32a>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	2b05      	cmp	r3, #5
 800a052:	d10c      	bne.n	800a06e <HAL_RCC_OscConfig+0x312>
 800a054:	4b7b      	ldr	r3, [pc, #492]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a058:	4a7a      	ldr	r2, [pc, #488]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a05a:	f043 0304 	orr.w	r3, r3, #4
 800a05e:	6713      	str	r3, [r2, #112]	; 0x70
 800a060:	4b78      	ldr	r3, [pc, #480]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a064:	4a77      	ldr	r2, [pc, #476]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	6713      	str	r3, [r2, #112]	; 0x70
 800a06c:	e00b      	b.n	800a086 <HAL_RCC_OscConfig+0x32a>
 800a06e:	4b75      	ldr	r3, [pc, #468]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	4a74      	ldr	r2, [pc, #464]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a074:	f023 0301 	bic.w	r3, r3, #1
 800a078:	6713      	str	r3, [r2, #112]	; 0x70
 800a07a:	4b72      	ldr	r3, [pc, #456]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	4a71      	ldr	r2, [pc, #452]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a080:	f023 0304 	bic.w	r3, r3, #4
 800a084:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d015      	beq.n	800a0ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a08e:	f7fc f9d1 	bl	8006434 <HAL_GetTick>
 800a092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a094:	e00a      	b.n	800a0ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a096:	f7fc f9cd 	bl	8006434 <HAL_GetTick>
 800a09a:	4602      	mov	r2, r0
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	1ad3      	subs	r3, r2, r3
 800a0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a4:	4293      	cmp	r3, r2
 800a0a6:	d901      	bls.n	800a0ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a0a8:	2303      	movs	r3, #3
 800a0aa:	e0c5      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0ac:	4b65      	ldr	r3, [pc, #404]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b0:	f003 0302 	and.w	r3, r3, #2
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d0ee      	beq.n	800a096 <HAL_RCC_OscConfig+0x33a>
 800a0b8:	e014      	b.n	800a0e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0ba:	f7fc f9bb 	bl	8006434 <HAL_GetTick>
 800a0be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0c0:	e00a      	b.n	800a0d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0c2:	f7fc f9b7 	bl	8006434 <HAL_GetTick>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d901      	bls.n	800a0d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a0d4:	2303      	movs	r3, #3
 800a0d6:	e0af      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a0d8:	4b5a      	ldr	r3, [pc, #360]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d1ee      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d105      	bne.n	800a0f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a0ea:	4b56      	ldr	r3, [pc, #344]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ee:	4a55      	ldr	r2, [pc, #340]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a0f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a0f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	699b      	ldr	r3, [r3, #24]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	f000 809b 	beq.w	800a236 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a100:	4b50      	ldr	r3, [pc, #320]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	f003 030c 	and.w	r3, r3, #12
 800a108:	2b08      	cmp	r3, #8
 800a10a:	d05c      	beq.n	800a1c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	2b02      	cmp	r3, #2
 800a112:	d141      	bne.n	800a198 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a114:	4b4c      	ldr	r3, [pc, #304]	; (800a248 <HAL_RCC_OscConfig+0x4ec>)
 800a116:	2200      	movs	r2, #0
 800a118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a11a:	f7fc f98b 	bl	8006434 <HAL_GetTick>
 800a11e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a120:	e008      	b.n	800a134 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a122:	f7fc f987 	bl	8006434 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d901      	bls.n	800a134 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e081      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a134:	4b43      	ldr	r3, [pc, #268]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1f0      	bne.n	800a122 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	69da      	ldr	r2, [r3, #28]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6a1b      	ldr	r3, [r3, #32]
 800a148:	431a      	orrs	r2, r3
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	019b      	lsls	r3, r3, #6
 800a150:	431a      	orrs	r2, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a156:	085b      	lsrs	r3, r3, #1
 800a158:	3b01      	subs	r3, #1
 800a15a:	041b      	lsls	r3, r3, #16
 800a15c:	431a      	orrs	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a162:	061b      	lsls	r3, r3, #24
 800a164:	4937      	ldr	r1, [pc, #220]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a166:	4313      	orrs	r3, r2
 800a168:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a16a:	4b37      	ldr	r3, [pc, #220]	; (800a248 <HAL_RCC_OscConfig+0x4ec>)
 800a16c:	2201      	movs	r2, #1
 800a16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a170:	f7fc f960 	bl	8006434 <HAL_GetTick>
 800a174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a178:	f7fc f95c 	bl	8006434 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e056      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a18a:	4b2e      	ldr	r3, [pc, #184]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0x41c>
 800a196:	e04e      	b.n	800a236 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a198:	4b2b      	ldr	r3, [pc, #172]	; (800a248 <HAL_RCC_OscConfig+0x4ec>)
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a19e:	f7fc f949 	bl	8006434 <HAL_GetTick>
 800a1a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1a4:	e008      	b.n	800a1b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1a6:	f7fc f945 	bl	8006434 <HAL_GetTick>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	1ad3      	subs	r3, r2, r3
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d901      	bls.n	800a1b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a1b4:	2303      	movs	r3, #3
 800a1b6:	e03f      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1b8:	4b22      	ldr	r3, [pc, #136]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d1f0      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x44a>
 800a1c4:	e037      	b.n	800a236 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d101      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	e032      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a1d2:	4b1c      	ldr	r3, [pc, #112]	; (800a244 <HAL_RCC_OscConfig+0x4e8>)
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d028      	beq.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d121      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d11a      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a202:	4013      	ands	r3, r2
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a208:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d111      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a218:	085b      	lsrs	r3, r3, #1
 800a21a:	3b01      	subs	r3, #1
 800a21c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a21e:	429a      	cmp	r2, r3
 800a220:	d107      	bne.n	800a232 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a22c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a22e:	429a      	cmp	r2, r3
 800a230:	d001      	beq.n	800a236 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e000      	b.n	800a238 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3718      	adds	r7, #24
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	40007000 	.word	0x40007000
 800a244:	40023800 	.word	0x40023800
 800a248:	42470060 	.word	0x42470060

0800a24c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b084      	sub	sp, #16
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e0cc      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a260:	4b68      	ldr	r3, [pc, #416]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	683a      	ldr	r2, [r7, #0]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d90c      	bls.n	800a288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a26e:	4b65      	ldr	r3, [pc, #404]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a270:	683a      	ldr	r2, [r7, #0]
 800a272:	b2d2      	uxtb	r2, r2
 800a274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a276:	4b63      	ldr	r3, [pc, #396]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0307 	and.w	r3, r3, #7
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d001      	beq.n	800a288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a284:	2301      	movs	r3, #1
 800a286:	e0b8      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f003 0302 	and.w	r3, r3, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	d020      	beq.n	800a2d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d005      	beq.n	800a2ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2a0:	4b59      	ldr	r3, [pc, #356]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2a2:	689b      	ldr	r3, [r3, #8]
 800a2a4:	4a58      	ldr	r2, [pc, #352]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a2aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f003 0308 	and.w	r3, r3, #8
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d005      	beq.n	800a2c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a2b8:	4b53      	ldr	r3, [pc, #332]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	4a52      	ldr	r2, [pc, #328]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a2c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a2c4:	4b50      	ldr	r3, [pc, #320]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	494d      	ldr	r1, [pc, #308]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 0301 	and.w	r3, r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d044      	beq.n	800a36c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d107      	bne.n	800a2fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a2ea:	4b47      	ldr	r3, [pc, #284]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d119      	bne.n	800a32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e07f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	2b02      	cmp	r3, #2
 800a300:	d003      	beq.n	800a30a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a306:	2b03      	cmp	r3, #3
 800a308:	d107      	bne.n	800a31a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a30a:	4b3f      	ldr	r3, [pc, #252]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d109      	bne.n	800a32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	e06f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a31a:	4b3b      	ldr	r3, [pc, #236]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a326:	2301      	movs	r3, #1
 800a328:	e067      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a32a:	4b37      	ldr	r3, [pc, #220]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f023 0203 	bic.w	r2, r3, #3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	4934      	ldr	r1, [pc, #208]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a338:	4313      	orrs	r3, r2
 800a33a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a33c:	f7fc f87a 	bl	8006434 <HAL_GetTick>
 800a340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a342:	e00a      	b.n	800a35a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a344:	f7fc f876 	bl	8006434 <HAL_GetTick>
 800a348:	4602      	mov	r2, r0
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	1ad3      	subs	r3, r2, r3
 800a34e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a352:	4293      	cmp	r3, r2
 800a354:	d901      	bls.n	800a35a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a356:	2303      	movs	r3, #3
 800a358:	e04f      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a35a:	4b2b      	ldr	r3, [pc, #172]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	f003 020c 	and.w	r2, r3, #12
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	429a      	cmp	r2, r3
 800a36a:	d1eb      	bne.n	800a344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a36c:	4b25      	ldr	r3, [pc, #148]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0307 	and.w	r3, r3, #7
 800a374:	683a      	ldr	r2, [r7, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d20c      	bcs.n	800a394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a37a:	4b22      	ldr	r3, [pc, #136]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	b2d2      	uxtb	r2, r2
 800a380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a382:	4b20      	ldr	r3, [pc, #128]	; (800a404 <HAL_RCC_ClockConfig+0x1b8>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f003 0307 	and.w	r3, r3, #7
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d001      	beq.n	800a394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	e032      	b.n	800a3fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d008      	beq.n	800a3b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3a0:	4b19      	ldr	r3, [pc, #100]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	4916      	ldr	r1, [pc, #88]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d009      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3be:	4b12      	ldr	r3, [pc, #72]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	490e      	ldr	r1, [pc, #56]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a3d2:	f000 f821 	bl	800a418 <HAL_RCC_GetSysClockFreq>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	; (800a408 <HAL_RCC_ClockConfig+0x1bc>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	490a      	ldr	r1, [pc, #40]	; (800a40c <HAL_RCC_ClockConfig+0x1c0>)
 800a3e4:	5ccb      	ldrb	r3, [r1, r3]
 800a3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ea:	4a09      	ldr	r2, [pc, #36]	; (800a410 <HAL_RCC_ClockConfig+0x1c4>)
 800a3ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a3ee:	4b09      	ldr	r3, [pc, #36]	; (800a414 <HAL_RCC_ClockConfig+0x1c8>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fa fc10 	bl	8004c18 <HAL_InitTick>

  return HAL_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40023c00 	.word	0x40023c00
 800a408:	40023800 	.word	0x40023800
 800a40c:	0801ef30 	.word	0x0801ef30
 800a410:	20000030 	.word	0x20000030
 800a414:	20000034 	.word	0x20000034

0800a418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a418:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a420:	2300      	movs	r3, #0
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	2300      	movs	r3, #0
 800a426:	60fb      	str	r3, [r7, #12]
 800a428:	2300      	movs	r3, #0
 800a42a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a42c:	2300      	movs	r3, #0
 800a42e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a430:	4b67      	ldr	r3, [pc, #412]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	f003 030c 	and.w	r3, r3, #12
 800a438:	2b08      	cmp	r3, #8
 800a43a:	d00d      	beq.n	800a458 <HAL_RCC_GetSysClockFreq+0x40>
 800a43c:	2b08      	cmp	r3, #8
 800a43e:	f200 80bd 	bhi.w	800a5bc <HAL_RCC_GetSysClockFreq+0x1a4>
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <HAL_RCC_GetSysClockFreq+0x34>
 800a446:	2b04      	cmp	r3, #4
 800a448:	d003      	beq.n	800a452 <HAL_RCC_GetSysClockFreq+0x3a>
 800a44a:	e0b7      	b.n	800a5bc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a44c:	4b61      	ldr	r3, [pc, #388]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a44e:	60bb      	str	r3, [r7, #8]
       break;
 800a450:	e0b7      	b.n	800a5c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a452:	4b61      	ldr	r3, [pc, #388]	; (800a5d8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a454:	60bb      	str	r3, [r7, #8]
      break;
 800a456:	e0b4      	b.n	800a5c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a458:	4b5d      	ldr	r3, [pc, #372]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a460:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a462:	4b5b      	ldr	r3, [pc, #364]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a464:	685b      	ldr	r3, [r3, #4]
 800a466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d04d      	beq.n	800a50a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a46e:	4b58      	ldr	r3, [pc, #352]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	099b      	lsrs	r3, r3, #6
 800a474:	461a      	mov	r2, r3
 800a476:	f04f 0300 	mov.w	r3, #0
 800a47a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a47e:	f04f 0100 	mov.w	r1, #0
 800a482:	ea02 0800 	and.w	r8, r2, r0
 800a486:	ea03 0901 	and.w	r9, r3, r1
 800a48a:	4640      	mov	r0, r8
 800a48c:	4649      	mov	r1, r9
 800a48e:	f04f 0200 	mov.w	r2, #0
 800a492:	f04f 0300 	mov.w	r3, #0
 800a496:	014b      	lsls	r3, r1, #5
 800a498:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a49c:	0142      	lsls	r2, r0, #5
 800a49e:	4610      	mov	r0, r2
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	ebb0 0008 	subs.w	r0, r0, r8
 800a4a6:	eb61 0109 	sbc.w	r1, r1, r9
 800a4aa:	f04f 0200 	mov.w	r2, #0
 800a4ae:	f04f 0300 	mov.w	r3, #0
 800a4b2:	018b      	lsls	r3, r1, #6
 800a4b4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a4b8:	0182      	lsls	r2, r0, #6
 800a4ba:	1a12      	subs	r2, r2, r0
 800a4bc:	eb63 0301 	sbc.w	r3, r3, r1
 800a4c0:	f04f 0000 	mov.w	r0, #0
 800a4c4:	f04f 0100 	mov.w	r1, #0
 800a4c8:	00d9      	lsls	r1, r3, #3
 800a4ca:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a4ce:	00d0      	lsls	r0, r2, #3
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	eb12 0208 	adds.w	r2, r2, r8
 800a4d8:	eb43 0309 	adc.w	r3, r3, r9
 800a4dc:	f04f 0000 	mov.w	r0, #0
 800a4e0:	f04f 0100 	mov.w	r1, #0
 800a4e4:	0259      	lsls	r1, r3, #9
 800a4e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a4ea:	0250      	lsls	r0, r2, #9
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4610      	mov	r0, r2
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	f04f 0300 	mov.w	r3, #0
 800a4fc:	f7f6 fbc4 	bl	8000c88 <__aeabi_uldivmod>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4613      	mov	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]
 800a508:	e04a      	b.n	800a5a0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a50a:	4b31      	ldr	r3, [pc, #196]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	099b      	lsrs	r3, r3, #6
 800a510:	461a      	mov	r2, r3
 800a512:	f04f 0300 	mov.w	r3, #0
 800a516:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a51a:	f04f 0100 	mov.w	r1, #0
 800a51e:	ea02 0400 	and.w	r4, r2, r0
 800a522:	ea03 0501 	and.w	r5, r3, r1
 800a526:	4620      	mov	r0, r4
 800a528:	4629      	mov	r1, r5
 800a52a:	f04f 0200 	mov.w	r2, #0
 800a52e:	f04f 0300 	mov.w	r3, #0
 800a532:	014b      	lsls	r3, r1, #5
 800a534:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a538:	0142      	lsls	r2, r0, #5
 800a53a:	4610      	mov	r0, r2
 800a53c:	4619      	mov	r1, r3
 800a53e:	1b00      	subs	r0, r0, r4
 800a540:	eb61 0105 	sbc.w	r1, r1, r5
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	018b      	lsls	r3, r1, #6
 800a54e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a552:	0182      	lsls	r2, r0, #6
 800a554:	1a12      	subs	r2, r2, r0
 800a556:	eb63 0301 	sbc.w	r3, r3, r1
 800a55a:	f04f 0000 	mov.w	r0, #0
 800a55e:	f04f 0100 	mov.w	r1, #0
 800a562:	00d9      	lsls	r1, r3, #3
 800a564:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a568:	00d0      	lsls	r0, r2, #3
 800a56a:	4602      	mov	r2, r0
 800a56c:	460b      	mov	r3, r1
 800a56e:	1912      	adds	r2, r2, r4
 800a570:	eb45 0303 	adc.w	r3, r5, r3
 800a574:	f04f 0000 	mov.w	r0, #0
 800a578:	f04f 0100 	mov.w	r1, #0
 800a57c:	0299      	lsls	r1, r3, #10
 800a57e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a582:	0290      	lsls	r0, r2, #10
 800a584:	4602      	mov	r2, r0
 800a586:	460b      	mov	r3, r1
 800a588:	4610      	mov	r0, r2
 800a58a:	4619      	mov	r1, r3
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	461a      	mov	r2, r3
 800a590:	f04f 0300 	mov.w	r3, #0
 800a594:	f7f6 fb78 	bl	8000c88 <__aeabi_uldivmod>
 800a598:	4602      	mov	r2, r0
 800a59a:	460b      	mov	r3, r1
 800a59c:	4613      	mov	r3, r2
 800a59e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a5a2:	685b      	ldr	r3, [r3, #4]
 800a5a4:	0c1b      	lsrs	r3, r3, #16
 800a5a6:	f003 0303 	and.w	r3, r3, #3
 800a5aa:	3301      	adds	r3, #1
 800a5ac:	005b      	lsls	r3, r3, #1
 800a5ae:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a5b0:	68fa      	ldr	r2, [r7, #12]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b8:	60bb      	str	r3, [r7, #8]
      break;
 800a5ba:	e002      	b.n	800a5c2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a5bc:	4b05      	ldr	r3, [pc, #20]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a5be:	60bb      	str	r3, [r7, #8]
      break;
 800a5c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a5ce:	bf00      	nop
 800a5d0:	40023800 	.word	0x40023800
 800a5d4:	00f42400 	.word	0x00f42400
 800a5d8:	007a1200 	.word	0x007a1200

0800a5dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5e0:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	20000030 	.word	0x20000030

0800a5f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a5f8:	f7ff fff0 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	4b05      	ldr	r3, [pc, #20]	; (800a614 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	0a9b      	lsrs	r3, r3, #10
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	4903      	ldr	r1, [pc, #12]	; (800a618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a60a:	5ccb      	ldrb	r3, [r1, r3]
 800a60c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a610:	4618      	mov	r0, r3
 800a612:	bd80      	pop	{r7, pc}
 800a614:	40023800 	.word	0x40023800
 800a618:	0801ef40 	.word	0x0801ef40

0800a61c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	220f      	movs	r2, #15
 800a62a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a62c:	4b12      	ldr	r3, [pc, #72]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	f003 0203 	and.w	r2, r3, #3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a638:	4b0f      	ldr	r3, [pc, #60]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a650:	4b09      	ldr	r3, [pc, #36]	; (800a678 <HAL_RCC_GetClockConfig+0x5c>)
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	08db      	lsrs	r3, r3, #3
 800a656:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a65e:	4b07      	ldr	r3, [pc, #28]	; (800a67c <HAL_RCC_GetClockConfig+0x60>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0207 	and.w	r2, r3, #7
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	601a      	str	r2, [r3, #0]
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	40023800 	.word	0x40023800
 800a67c:	40023c00 	.word	0x40023c00

0800a680 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a688:	2300      	movs	r3, #0
 800a68a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0301 	and.w	r3, r3, #1
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d105      	bne.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d035      	beq.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a6a8:	4b62      	ldr	r3, [pc, #392]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6ae:	f7fb fec1 	bl	8006434 <HAL_GetTick>
 800a6b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a6b4:	e008      	b.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a6b6:	f7fb febd 	bl	8006434 <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	2b02      	cmp	r3, #2
 800a6c2:	d901      	bls.n	800a6c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	e0b0      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a6c8:	4b5b      	ldr	r3, [pc, #364]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d1f0      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	019a      	lsls	r2, r3, #6
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	071b      	lsls	r3, r3, #28
 800a6e0:	4955      	ldr	r1, [pc, #340]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a6e8:	4b52      	ldr	r3, [pc, #328]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a6ee:	f7fb fea1 	bl	8006434 <HAL_GetTick>
 800a6f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a6f4:	e008      	b.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a6f6:	f7fb fe9d 	bl	8006434 <HAL_GetTick>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	1ad3      	subs	r3, r2, r3
 800a700:	2b02      	cmp	r3, #2
 800a702:	d901      	bls.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a704:	2303      	movs	r3, #3
 800a706:	e090      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a708:	4b4b      	ldr	r3, [pc, #300]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a710:	2b00      	cmp	r3, #0
 800a712:	d0f0      	beq.n	800a6f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 0302 	and.w	r3, r3, #2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 8083 	beq.w	800a828 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a722:	2300      	movs	r3, #0
 800a724:	60fb      	str	r3, [r7, #12]
 800a726:	4b44      	ldr	r3, [pc, #272]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72a:	4a43      	ldr	r2, [pc, #268]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a72c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a730:	6413      	str	r3, [r2, #64]	; 0x40
 800a732:	4b41      	ldr	r3, [pc, #260]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a73a:	60fb      	str	r3, [r7, #12]
 800a73c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a73e:	4b3f      	ldr	r3, [pc, #252]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	4a3e      	ldr	r2, [pc, #248]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a748:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a74a:	f7fb fe73 	bl	8006434 <HAL_GetTick>
 800a74e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a750:	e008      	b.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a752:	f7fb fe6f 	bl	8006434 <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	2b02      	cmp	r3, #2
 800a75e:	d901      	bls.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e062      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a764:	4b35      	ldr	r3, [pc, #212]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0f0      	beq.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a770:	4b31      	ldr	r3, [pc, #196]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a778:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d02f      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a788:	693a      	ldr	r2, [r7, #16]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d028      	beq.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a78e:	4b2a      	ldr	r3, [pc, #168]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a796:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a798:	4b29      	ldr	r3, [pc, #164]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a79e:	4b28      	ldr	r3, [pc, #160]	; (800a840 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a7a4:	4a24      	ldr	r2, [pc, #144]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a7aa:	4b23      	ldr	r3, [pc, #140]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d114      	bne.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a7b6:	f7fb fe3d 	bl	8006434 <HAL_GetTick>
 800a7ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7bc:	e00a      	b.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7be:	f7fb fe39 	bl	8006434 <HAL_GetTick>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d901      	bls.n	800a7d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e02a      	b.n	800a82a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7d4:	4b18      	ldr	r3, [pc, #96]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d8:	f003 0302 	and.w	r3, r3, #2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d0ee      	beq.n	800a7be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	68db      	ldr	r3, [r3, #12]
 800a7e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a7ec:	d10d      	bne.n	800a80a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a7ee:	4b12      	ldr	r3, [pc, #72]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	68db      	ldr	r3, [r3, #12]
 800a7fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a7fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a802:	490d      	ldr	r1, [pc, #52]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a804:	4313      	orrs	r3, r2
 800a806:	608b      	str	r3, [r1, #8]
 800a808:	e005      	b.n	800a816 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a80a:	4b0b      	ldr	r3, [pc, #44]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	4a0a      	ldr	r2, [pc, #40]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a810:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a814:	6093      	str	r3, [r2, #8]
 800a816:	4b08      	ldr	r3, [pc, #32]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a818:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a822:	4905      	ldr	r1, [pc, #20]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a824:	4313      	orrs	r3, r2
 800a826:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	42470068 	.word	0x42470068
 800a838:	40023800 	.word	0x40023800
 800a83c:	40007000 	.word	0x40007000
 800a840:	42470e40 	.word	0x42470e40

0800a844 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e01c      	b.n	800a890 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	795b      	ldrb	r3, [r3, #5]
 800a85a:	b2db      	uxtb	r3, r3
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d105      	bne.n	800a86c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2200      	movs	r2, #0
 800a864:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7f9 fff0 	bl	800484c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2202      	movs	r2, #2
 800a870:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f042 0204 	orr.w	r2, r2, #4
 800a880:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a88e:	2300      	movs	r3, #0
}
 800a890:	4618      	mov	r0, r3
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d101      	bne.n	800a8aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	e083      	b.n	800a9b2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	7f5b      	ldrb	r3, [r3, #29]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f7f9 ffe8 	bl	8004890 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	22ca      	movs	r2, #202	; 0xca
 800a8cc:	625a      	str	r2, [r3, #36]	; 0x24
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	2253      	movs	r2, #83	; 0x53
 800a8d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a8d6:	6878      	ldr	r0, [r7, #4]
 800a8d8:	f000 fbc0 	bl	800b05c <RTC_EnterInitMode>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d008      	beq.n	800a8f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	22ff      	movs	r2, #255	; 0xff
 800a8e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	2204      	movs	r2, #4
 800a8ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a8f0:	2301      	movs	r3, #1
 800a8f2:	e05e      	b.n	800a9b2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	689b      	ldr	r3, [r3, #8]
 800a8fa:	687a      	ldr	r2, [r7, #4]
 800a8fc:	6812      	ldr	r2, [r2, #0]
 800a8fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a906:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	6899      	ldr	r1, [r3, #8]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	685a      	ldr	r2, [r3, #4]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	431a      	orrs	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	695b      	ldr	r3, [r3, #20]
 800a91c:	431a      	orrs	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	430a      	orrs	r2, r1
 800a924:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	687a      	ldr	r2, [r7, #4]
 800a92c:	68d2      	ldr	r2, [r2, #12]
 800a92e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	6919      	ldr	r1, [r3, #16]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	041a      	lsls	r2, r3, #16
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	430a      	orrs	r2, r1
 800a942:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	68da      	ldr	r2, [r3, #12]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a952:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10e      	bne.n	800a980 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fb52 	bl	800b00c <HAL_RTC_WaitForSynchro>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d008      	beq.n	800a980 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	22ff      	movs	r2, #255	; 0xff
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2204      	movs	r2, #4
 800a97a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e018      	b.n	800a9b2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a98e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	22ff      	movs	r2, #255	; 0xff
 800a9a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a9b0:	2300      	movs	r3, #0
  }
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}

0800a9ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a9ba:	b590      	push	{r4, r7, lr}
 800a9bc:	b087      	sub	sp, #28
 800a9be:	af00      	add	r7, sp, #0
 800a9c0:	60f8      	str	r0, [r7, #12]
 800a9c2:	60b9      	str	r1, [r7, #8]
 800a9c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	7f1b      	ldrb	r3, [r3, #28]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_RTC_SetTime+0x1c>
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e0aa      	b.n	800ab2c <HAL_RTC_SetTime+0x172>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2202      	movs	r2, #2
 800a9e0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d126      	bne.n	800aa36 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f000 fb57 	bl	800b0b4 <RTC_ByteToBcd2>
 800aa06:	4603      	mov	r3, r0
 800aa08:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	785b      	ldrb	r3, [r3, #1]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 fb50 	bl	800b0b4 <RTC_ByteToBcd2>
 800aa14:	4603      	mov	r3, r0
 800aa16:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa18:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	789b      	ldrb	r3, [r3, #2]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 fb48 	bl	800b0b4 <RTC_ByteToBcd2>
 800aa24:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aa26:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	78db      	ldrb	r3, [r3, #3]
 800aa2e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aa30:	4313      	orrs	r3, r2
 800aa32:	617b      	str	r3, [r7, #20]
 800aa34:	e018      	b.n	800aa68 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d102      	bne.n	800aa4a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	2200      	movs	r2, #0
 800aa48:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	781b      	ldrb	r3, [r3, #0]
 800aa4e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	785b      	ldrb	r3, [r3, #1]
 800aa54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa56:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800aa5c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	78db      	ldrb	r3, [r3, #3]
 800aa62:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800aa64:	4313      	orrs	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	22ca      	movs	r2, #202	; 0xca
 800aa6e:	625a      	str	r2, [r3, #36]	; 0x24
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2253      	movs	r2, #83	; 0x53
 800aa76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 faef 	bl	800b05c <RTC_EnterInitMode>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00b      	beq.n	800aa9c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	22ff      	movs	r2, #255	; 0xff
 800aa8a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2204      	movs	r2, #4
 800aa90:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	e047      	b.n	800ab2c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aaa6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800aaaa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	689a      	ldr	r2, [r3, #8]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aaba:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	6899      	ldr	r1, [r3, #8]
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	68da      	ldr	r2, [r3, #12]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	691b      	ldr	r3, [r3, #16]
 800aaca:	431a      	orrs	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	68da      	ldr	r2, [r3, #12]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aae2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	f003 0320 	and.w	r3, r3, #32
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d111      	bne.n	800ab16 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f000 fa8a 	bl	800b00c <HAL_RTC_WaitForSynchro>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d00b      	beq.n	800ab16 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	22ff      	movs	r2, #255	; 0xff
 800ab04:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	2204      	movs	r2, #4
 800ab0a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	e00a      	b.n	800ab2c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	22ff      	movs	r2, #255	; 0xff
 800ab1c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2201      	movs	r2, #1
 800ab22:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	2200      	movs	r2, #0
 800ab28:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
  }
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	371c      	adds	r7, #28
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd90      	pop	{r4, r7, pc}

0800ab34 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b086      	sub	sp, #24
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	60f8      	str	r0, [r7, #12]
 800ab3c:	60b9      	str	r1, [r7, #8]
 800ab3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ab66:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ab6a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	0c1b      	lsrs	r3, r3, #16
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800ab7c:	697b      	ldr	r3, [r7, #20]
 800ab7e:	0a1b      	lsrs	r3, r3, #8
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab94:	b2da      	uxtb	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	0c1b      	lsrs	r3, r3, #16
 800ab9e:	b2db      	uxtb	r3, r3
 800aba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba4:	b2da      	uxtb	r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d11a      	bne.n	800abe6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 fa9b 	bl	800b0f0 <RTC_Bcd2ToByte>
 800abba:	4603      	mov	r3, r0
 800abbc:	461a      	mov	r2, r3
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	785b      	ldrb	r3, [r3, #1]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f000 fa92 	bl	800b0f0 <RTC_Bcd2ToByte>
 800abcc:	4603      	mov	r3, r0
 800abce:	461a      	mov	r2, r3
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	789b      	ldrb	r3, [r3, #2]
 800abd8:	4618      	mov	r0, r3
 800abda:	f000 fa89 	bl	800b0f0 <RTC_Bcd2ToByte>
 800abde:	4603      	mov	r3, r0
 800abe0:	461a      	mov	r2, r3
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	4618      	mov	r0, r3
 800abea:	3718      	adds	r7, #24
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b087      	sub	sp, #28
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800abfc:	2300      	movs	r3, #0
 800abfe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	7f1b      	ldrb	r3, [r3, #28]
 800ac04:	2b01      	cmp	r3, #1
 800ac06:	d101      	bne.n	800ac0c <HAL_RTC_SetDate+0x1c>
 800ac08:	2302      	movs	r3, #2
 800ac0a:	e094      	b.n	800ad36 <HAL_RTC_SetDate+0x146>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2201      	movs	r2, #1
 800ac10:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2202      	movs	r2, #2
 800ac16:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10e      	bne.n	800ac3c <HAL_RTC_SetDate+0x4c>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	785b      	ldrb	r3, [r3, #1]
 800ac22:	f003 0310 	and.w	r3, r3, #16
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d008      	beq.n	800ac3c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ac2a:	68bb      	ldr	r3, [r7, #8]
 800ac2c:	785b      	ldrb	r3, [r3, #1]
 800ac2e:	f023 0310 	bic.w	r3, r3, #16
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	330a      	adds	r3, #10
 800ac36:	b2da      	uxtb	r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d11c      	bne.n	800ac7c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	78db      	ldrb	r3, [r3, #3]
 800ac46:	4618      	mov	r0, r3
 800ac48:	f000 fa34 	bl	800b0b4 <RTC_ByteToBcd2>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	785b      	ldrb	r3, [r3, #1]
 800ac54:	4618      	mov	r0, r3
 800ac56:	f000 fa2d 	bl	800b0b4 <RTC_ByteToBcd2>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ac5e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	789b      	ldrb	r3, [r3, #2]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fa25 	bl	800b0b4 <RTC_ByteToBcd2>
 800ac6a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ac6c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ac76:	4313      	orrs	r3, r2
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	e00e      	b.n	800ac9a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	78db      	ldrb	r3, [r3, #3]
 800ac80:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	785b      	ldrb	r3, [r3, #1]
 800ac86:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ac88:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ac8e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ac90:	68bb      	ldr	r3, [r7, #8]
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ac96:	4313      	orrs	r3, r2
 800ac98:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	22ca      	movs	r2, #202	; 0xca
 800aca0:	625a      	str	r2, [r3, #36]	; 0x24
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	2253      	movs	r2, #83	; 0x53
 800aca8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800acaa:	68f8      	ldr	r0, [r7, #12]
 800acac:	f000 f9d6 	bl	800b05c <RTC_EnterInitMode>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d00b      	beq.n	800acce <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	22ff      	movs	r2, #255	; 0xff
 800acbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2204      	movs	r2, #4
 800acc2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	e033      	b.n	800ad36 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800acd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800acdc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68da      	ldr	r2, [r3, #12]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	689b      	ldr	r3, [r3, #8]
 800acf4:	f003 0320 	and.w	r3, r3, #32
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d111      	bne.n	800ad20 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 f985 	bl	800b00c <HAL_RTC_WaitForSynchro>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00b      	beq.n	800ad20 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	22ff      	movs	r2, #255	; 0xff
 800ad0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2204      	movs	r2, #4
 800ad14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	e00a      	b.n	800ad36 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	22ff      	movs	r2, #255	; 0xff
 800ad26:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	2200      	movs	r2, #0
 800ad32:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800ad34:	2300      	movs	r3, #0
  }
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd90      	pop	{r4, r7, pc}

0800ad3e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ad3e:	b580      	push	{r7, lr}
 800ad40:	b086      	sub	sp, #24
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	60b9      	str	r1, [r7, #8]
 800ad48:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad5c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	0c1b      	lsrs	r3, r3, #16
 800ad62:	b2da      	uxtb	r2, r3
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	0a1b      	lsrs	r3, r3, #8
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	f003 031f 	and.w	r3, r3, #31
 800ad72:	b2da      	uxtb	r2, r3
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ad78:	697b      	ldr	r3, [r7, #20]
 800ad7a:	b2db      	uxtb	r3, r3
 800ad7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	0b5b      	lsrs	r3, r3, #13
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	f003 0307 	and.w	r3, r3, #7
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d11a      	bne.n	800add2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	78db      	ldrb	r3, [r3, #3]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 f9a5 	bl	800b0f0 <RTC_Bcd2ToByte>
 800ada6:	4603      	mov	r3, r0
 800ada8:	461a      	mov	r2, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	785b      	ldrb	r3, [r3, #1]
 800adb2:	4618      	mov	r0, r3
 800adb4:	f000 f99c 	bl	800b0f0 <RTC_Bcd2ToByte>
 800adb8:	4603      	mov	r3, r0
 800adba:	461a      	mov	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	789b      	ldrb	r3, [r3, #2]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f000 f993 	bl	800b0f0 <RTC_Bcd2ToByte>
 800adca:	4603      	mov	r3, r0
 800adcc:	461a      	mov	r2, r3
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3718      	adds	r7, #24
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800addc:	b590      	push	{r4, r7, lr}
 800adde:	b089      	sub	sp, #36	; 0x24
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800ade8:	2300      	movs	r3, #0
 800adea:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	61fb      	str	r3, [r7, #28]
 800adf0:	2300      	movs	r3, #0
 800adf2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	7f1b      	ldrb	r3, [r3, #28]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d101      	bne.n	800ae00 <HAL_RTC_SetAlarm+0x24>
 800adfc:	2302      	movs	r3, #2
 800adfe:	e101      	b.n	800b004 <HAL_RTC_SetAlarm+0x228>
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2201      	movs	r2, #1
 800ae04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2202      	movs	r2, #2
 800ae0a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d137      	bne.n	800ae82 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d102      	bne.n	800ae26 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	2200      	movs	r2, #0
 800ae24:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f000 f942 	bl	800b0b4 <RTC_ByteToBcd2>
 800ae30:	4603      	mov	r3, r0
 800ae32:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	785b      	ldrb	r3, [r3, #1]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f93b 	bl	800b0b4 <RTC_ByteToBcd2>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ae42:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	789b      	ldrb	r3, [r3, #2]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 f933 	bl	800b0b4 <RTC_ByteToBcd2>
 800ae4e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ae50:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	78db      	ldrb	r3, [r3, #3]
 800ae58:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ae5a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f000 f925 	bl	800b0b4 <RTC_ByteToBcd2>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ae6e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ae76:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ae78:	68bb      	ldr	r3, [r7, #8]
 800ae7a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61fb      	str	r3, [r7, #28]
 800ae80:	e023      	b.n	800aeca <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d102      	bne.n	800ae96 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ae90:	68bb      	ldr	r3, [r7, #8]
 800ae92:	2200      	movs	r2, #0
 800ae94:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	785b      	ldrb	r3, [r3, #1]
 800aea0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800aea2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800aea8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	78db      	ldrb	r3, [r3, #3]
 800aeae:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800aeb0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aeb8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800aeba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800aec0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800aec6:	4313      	orrs	r3, r2
 800aec8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	699b      	ldr	r3, [r3, #24]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	22ca      	movs	r2, #202	; 0xca
 800aedc:	625a      	str	r2, [r3, #36]	; 0x24
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	2253      	movs	r2, #83	; 0x53
 800aee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aeee:	d13f      	bne.n	800af70 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	689a      	ldr	r2, [r3, #8]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aefe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	689a      	ldr	r2, [r3, #8]
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800af0e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af10:	f7fb fa90 	bl	8006434 <HAL_GetTick>
 800af14:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800af16:	e013      	b.n	800af40 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800af18:	f7fb fa8c 	bl	8006434 <HAL_GetTick>
 800af1c:	4602      	mov	r2, r0
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	1ad3      	subs	r3, r2, r3
 800af22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af26:	d90b      	bls.n	800af40 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2203      	movs	r2, #3
 800af34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e061      	b.n	800b004 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	68db      	ldr	r3, [r3, #12]
 800af46:	f003 0301 	and.w	r3, r3, #1
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d0e4      	beq.n	800af18 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	69fa      	ldr	r2, [r7, #28]
 800af54:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	697a      	ldr	r2, [r7, #20]
 800af5c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	689a      	ldr	r2, [r3, #8]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af6c:	609a      	str	r2, [r3, #8]
 800af6e:	e03e      	b.n	800afee <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	689a      	ldr	r2, [r3, #8]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800af7e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	689a      	ldr	r2, [r3, #8]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af8e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800af90:	f7fb fa50 	bl	8006434 <HAL_GetTick>
 800af94:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800af96:	e013      	b.n	800afc0 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800af98:	f7fb fa4c 	bl	8006434 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800afa6:	d90b      	bls.n	800afc0 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	22ff      	movs	r2, #255	; 0xff
 800afae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2203      	movs	r2, #3
 800afb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2200      	movs	r2, #0
 800afba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800afbc:	2303      	movs	r3, #3
 800afbe:	e021      	b.n	800b004 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	f003 0302 	and.w	r3, r3, #2
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0e4      	beq.n	800af98 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	69fa      	ldr	r2, [r7, #28]
 800afd4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689a      	ldr	r2, [r3, #8]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afec:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	22ff      	movs	r2, #255	; 0xff
 800aff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2201      	movs	r2, #1
 800affa:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3724      	adds	r7, #36	; 0x24
 800b008:	46bd      	mov	sp, r7
 800b00a:	bd90      	pop	{r4, r7, pc}

0800b00c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b014:	2300      	movs	r3, #0
 800b016:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68da      	ldr	r2, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b026:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b028:	f7fb fa04 	bl	8006434 <HAL_GetTick>
 800b02c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b02e:	e009      	b.n	800b044 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b030:	f7fb fa00 	bl	8006434 <HAL_GetTick>
 800b034:	4602      	mov	r2, r0
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b03e:	d901      	bls.n	800b044 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e007      	b.n	800b054 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	f003 0320 	and.w	r3, r3, #32
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0ee      	beq.n	800b030 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b052:	2300      	movs	r3, #0
}
 800b054:	4618      	mov	r0, r3
 800b056:	3710      	adds	r7, #16
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	68db      	ldr	r3, [r3, #12]
 800b06e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b072:	2b00      	cmp	r3, #0
 800b074:	d119      	bne.n	800b0aa <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b07e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b080:	f7fb f9d8 	bl	8006434 <HAL_GetTick>
 800b084:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b086:	e009      	b.n	800b09c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b088:	f7fb f9d4 	bl	8006434 <HAL_GetTick>
 800b08c:	4602      	mov	r2, r0
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b096:	d901      	bls.n	800b09c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800b098:	2303      	movs	r3, #3
 800b09a:	e007      	b.n	800b0ac <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d0ee      	beq.n	800b088 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800b0c2:	e005      	b.n	800b0d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800b0ca:	79fb      	ldrb	r3, [r7, #7]
 800b0cc:	3b0a      	subs	r3, #10
 800b0ce:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	2b09      	cmp	r3, #9
 800b0d4:	d8f6      	bhi.n	800b0c4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	011b      	lsls	r3, r3, #4
 800b0dc:	b2da      	uxtb	r2, r3
 800b0de:	79fb      	ldrb	r3, [r7, #7]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	b2db      	uxtb	r3, r3
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b0fe:	79fb      	ldrb	r3, [r7, #7]
 800b100:	091b      	lsrs	r3, r3, #4
 800b102:	b2db      	uxtb	r3, r3
 800b104:	461a      	mov	r2, r3
 800b106:	4613      	mov	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	4413      	add	r3, r2
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800b110:	79fb      	ldrb	r3, [r7, #7]
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	b2da      	uxtb	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	4413      	add	r3, r2
 800b11e:	b2db      	uxtb	r3, r3
}
 800b120:	4618      	mov	r0, r3
 800b122:	3714      	adds	r7, #20
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr

0800b12c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b082      	sub	sp, #8
 800b130:	af00      	add	r7, sp, #0
 800b132:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b13a:	2301      	movs	r3, #1
 800b13c:	e07b      	b.n	800b236 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b142:	2b00      	cmp	r3, #0
 800b144:	d108      	bne.n	800b158 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b14e:	d009      	beq.n	800b164 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	61da      	str	r2, [r3, #28]
 800b156:	e005      	b.n	800b164 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b170:	b2db      	uxtb	r3, r3
 800b172:	2b00      	cmp	r3, #0
 800b174:	d106      	bne.n	800b184 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f7f9 fbb0 	bl	80048e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2202      	movs	r2, #2
 800b188:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b19a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	689b      	ldr	r3, [r3, #8]
 800b1a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b1ac:	431a      	orrs	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	68db      	ldr	r3, [r3, #12]
 800b1b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b1b6:	431a      	orrs	r2, r3
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	691b      	ldr	r3, [r3, #16]
 800b1bc:	f003 0302 	and.w	r3, r3, #2
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	f003 0301 	and.w	r3, r3, #1
 800b1ca:	431a      	orrs	r2, r3
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1d4:	431a      	orrs	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b1de:	431a      	orrs	r2, r3
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6a1b      	ldr	r3, [r3, #32]
 800b1e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1e8:	ea42 0103 	orr.w	r1, r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	430a      	orrs	r2, r1
 800b1fa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	699b      	ldr	r3, [r3, #24]
 800b200:	0c1b      	lsrs	r3, r3, #16
 800b202:	f003 0104 	and.w	r1, r3, #4
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b20a:	f003 0210 	and.w	r2, r3, #16
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	430a      	orrs	r2, r1
 800b214:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	69da      	ldr	r2, [r3, #28]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b224:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b234:	2300      	movs	r3, #0
}
 800b236:	4618      	mov	r0, r3
 800b238:	3708      	adds	r7, #8
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b082      	sub	sp, #8
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e01a      	b.n	800b286 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2202      	movs	r2, #2
 800b254:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681a      	ldr	r2, [r3, #0]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b266:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800b268:	6878      	ldr	r0, [r7, #4]
 800b26a:	f7f9 fc15 	bl	8004a98 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	2200      	movs	r2, #0
 800b278:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2200      	movs	r2, #0
 800b280:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3708      	adds	r7, #8
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b088      	sub	sp, #32
 800b292:	af00      	add	r7, sp, #0
 800b294:	60f8      	str	r0, [r7, #12]
 800b296:	60b9      	str	r1, [r7, #8]
 800b298:	603b      	str	r3, [r7, #0]
 800b29a:	4613      	mov	r3, r2
 800b29c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d101      	bne.n	800b2b0 <HAL_SPI_Transmit+0x22>
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	e126      	b.n	800b4fe <HAL_SPI_Transmit+0x270>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2b8:	f7fb f8bc 	bl	8006434 <HAL_GetTick>
 800b2bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b2be:	88fb      	ldrh	r3, [r7, #6]
 800b2c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d002      	beq.n	800b2d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b2d2:	e10b      	b.n	800b4ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d002      	beq.n	800b2e0 <HAL_SPI_Transmit+0x52>
 800b2da:	88fb      	ldrh	r3, [r7, #6]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d102      	bne.n	800b2e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b2e4:	e102      	b.n	800b4ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2203      	movs	r2, #3
 800b2ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	68ba      	ldr	r2, [r7, #8]
 800b2f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	88fa      	ldrh	r2, [r7, #6]
 800b2fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	88fa      	ldrh	r2, [r7, #6]
 800b304:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2200      	movs	r2, #0
 800b31c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	689b      	ldr	r3, [r3, #8]
 800b328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b32c:	d10f      	bne.n	800b34e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b33c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	681a      	ldr	r2, [r3, #0]
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b34c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b358:	2b40      	cmp	r3, #64	; 0x40
 800b35a:	d007      	beq.n	800b36c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b36a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b374:	d14b      	bne.n	800b40e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HAL_SPI_Transmit+0xf6>
 800b37e:	8afb      	ldrh	r3, [r7, #22]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d13e      	bne.n	800b402 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b388:	881a      	ldrh	r2, [r3, #0]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b394:	1c9a      	adds	r2, r3, #2
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b3a8:	e02b      	b.n	800b402 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	689b      	ldr	r3, [r3, #8]
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d112      	bne.n	800b3de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3bc:	881a      	ldrh	r2, [r3, #0]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c8:	1c9a      	adds	r2, r3, #2
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	3b01      	subs	r3, #1
 800b3d6:	b29a      	uxth	r2, r3
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	86da      	strh	r2, [r3, #54]	; 0x36
 800b3dc:	e011      	b.n	800b402 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b3de:	f7fb f829 	bl	8006434 <HAL_GetTick>
 800b3e2:	4602      	mov	r2, r0
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	683a      	ldr	r2, [r7, #0]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d803      	bhi.n	800b3f6 <HAL_SPI_Transmit+0x168>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3f4:	d102      	bne.n	800b3fc <HAL_SPI_Transmit+0x16e>
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b400:	e074      	b.n	800b4ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b406:	b29b      	uxth	r3, r3
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1ce      	bne.n	800b3aa <HAL_SPI_Transmit+0x11c>
 800b40c:	e04c      	b.n	800b4a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d002      	beq.n	800b41c <HAL_SPI_Transmit+0x18e>
 800b416:	8afb      	ldrh	r3, [r7, #22]
 800b418:	2b01      	cmp	r3, #1
 800b41a:	d140      	bne.n	800b49e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	330c      	adds	r3, #12
 800b426:	7812      	ldrb	r2, [r2, #0]
 800b428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b42e:	1c5a      	adds	r2, r3, #1
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b438:	b29b      	uxth	r3, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b442:	e02c      	b.n	800b49e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	2b02      	cmp	r3, #2
 800b450:	d113      	bne.n	800b47a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	330c      	adds	r3, #12
 800b45c:	7812      	ldrb	r2, [r2, #0]
 800b45e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b464:	1c5a      	adds	r2, r3, #1
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b46e:	b29b      	uxth	r3, r3
 800b470:	3b01      	subs	r3, #1
 800b472:	b29a      	uxth	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	86da      	strh	r2, [r3, #54]	; 0x36
 800b478:	e011      	b.n	800b49e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b47a:	f7fa ffdb 	bl	8006434 <HAL_GetTick>
 800b47e:	4602      	mov	r2, r0
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	1ad3      	subs	r3, r2, r3
 800b484:	683a      	ldr	r2, [r7, #0]
 800b486:	429a      	cmp	r2, r3
 800b488:	d803      	bhi.n	800b492 <HAL_SPI_Transmit+0x204>
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b490:	d102      	bne.n	800b498 <HAL_SPI_Transmit+0x20a>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d102      	bne.n	800b49e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b498:	2303      	movs	r3, #3
 800b49a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b49c:	e026      	b.n	800b4ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4a2:	b29b      	uxth	r3, r3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1cd      	bne.n	800b444 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	6839      	ldr	r1, [r7, #0]
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f000 fd03 	bl	800beb8 <SPI_EndRxTxTransaction>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d002      	beq.n	800b4be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	2220      	movs	r2, #32
 800b4bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	689b      	ldr	r3, [r3, #8]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10a      	bne.n	800b4dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	613b      	str	r3, [r7, #16]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	613b      	str	r3, [r7, #16]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	613b      	str	r3, [r7, #16]
 800b4da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	77fb      	strb	r3, [r7, #31]
 800b4e8:	e000      	b.n	800b4ec <HAL_SPI_Transmit+0x25e>
  }

error:
 800b4ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b4fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3720      	adds	r7, #32
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}

0800b506 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b506:	b580      	push	{r7, lr}
 800b508:	b08c      	sub	sp, #48	; 0x30
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	607a      	str	r2, [r7, #4]
 800b512:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b514:	2301      	movs	r3, #1
 800b516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_SPI_TransmitReceive+0x26>
 800b528:	2302      	movs	r3, #2
 800b52a:	e18a      	b.n	800b842 <HAL_SPI_TransmitReceive+0x33c>
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b534:	f7fa ff7e 	bl	8006434 <HAL_GetTick>
 800b538:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b54a:	887b      	ldrh	r3, [r7, #2]
 800b54c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b54e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b552:	2b01      	cmp	r3, #1
 800b554:	d00f      	beq.n	800b576 <HAL_SPI_TransmitReceive+0x70>
 800b556:	69fb      	ldr	r3, [r7, #28]
 800b558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b55c:	d107      	bne.n	800b56e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d103      	bne.n	800b56e <HAL_SPI_TransmitReceive+0x68>
 800b566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d003      	beq.n	800b576 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b56e:	2302      	movs	r3, #2
 800b570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b574:	e15b      	b.n	800b82e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d005      	beq.n	800b588 <HAL_SPI_TransmitReceive+0x82>
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <HAL_SPI_TransmitReceive+0x82>
 800b582:	887b      	ldrh	r3, [r7, #2]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d103      	bne.n	800b590 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b58e:	e14e      	b.n	800b82e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b596:	b2db      	uxtb	r3, r3
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d003      	beq.n	800b5a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2205      	movs	r2, #5
 800b5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	687a      	ldr	r2, [r7, #4]
 800b5ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	887a      	ldrh	r2, [r7, #2]
 800b5b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	887a      	ldrh	r2, [r7, #2]
 800b5ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	68ba      	ldr	r2, [r7, #8]
 800b5c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	887a      	ldrh	r2, [r7, #2]
 800b5c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	887a      	ldrh	r2, [r7, #2]
 800b5cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5e4:	2b40      	cmp	r3, #64	; 0x40
 800b5e6:	d007      	beq.n	800b5f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b600:	d178      	bne.n	800b6f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <HAL_SPI_TransmitReceive+0x10a>
 800b60a:	8b7b      	ldrh	r3, [r7, #26]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d166      	bne.n	800b6de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b614:	881a      	ldrh	r2, [r3, #0]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b620:	1c9a      	adds	r2, r3, #2
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	3b01      	subs	r3, #1
 800b62e:	b29a      	uxth	r2, r3
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b634:	e053      	b.n	800b6de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f003 0302 	and.w	r3, r3, #2
 800b640:	2b02      	cmp	r3, #2
 800b642:	d11b      	bne.n	800b67c <HAL_SPI_TransmitReceive+0x176>
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b648:	b29b      	uxth	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d016      	beq.n	800b67c <HAL_SPI_TransmitReceive+0x176>
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	2b01      	cmp	r3, #1
 800b652:	d113      	bne.n	800b67c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b658:	881a      	ldrh	r2, [r3, #0]
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b664:	1c9a      	adds	r2, r3, #2
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b66e:	b29b      	uxth	r3, r3
 800b670:	3b01      	subs	r3, #1
 800b672:	b29a      	uxth	r2, r3
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b678:	2300      	movs	r3, #0
 800b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f003 0301 	and.w	r3, r3, #1
 800b686:	2b01      	cmp	r3, #1
 800b688:	d119      	bne.n	800b6be <HAL_SPI_TransmitReceive+0x1b8>
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b68e:	b29b      	uxth	r3, r3
 800b690:	2b00      	cmp	r3, #0
 800b692:	d014      	beq.n	800b6be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	68da      	ldr	r2, [r3, #12]
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69e:	b292      	uxth	r2, r2
 800b6a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	1c9a      	adds	r2, r3, #2
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b6be:	f7fa feb9 	bl	8006434 <HAL_GetTick>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c6:	1ad3      	subs	r3, r2, r3
 800b6c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d807      	bhi.n	800b6de <HAL_SPI_TransmitReceive+0x1d8>
 800b6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6d4:	d003      	beq.n	800b6de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b6dc:	e0a7      	b.n	800b82e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d1a6      	bne.n	800b636 <HAL_SPI_TransmitReceive+0x130>
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d1a1      	bne.n	800b636 <HAL_SPI_TransmitReceive+0x130>
 800b6f2:	e07c      	b.n	800b7ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d002      	beq.n	800b702 <HAL_SPI_TransmitReceive+0x1fc>
 800b6fc:	8b7b      	ldrh	r3, [r7, #26]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d16b      	bne.n	800b7da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	330c      	adds	r3, #12
 800b70c:	7812      	ldrb	r2, [r2, #0]
 800b70e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b71e:	b29b      	uxth	r3, r3
 800b720:	3b01      	subs	r3, #1
 800b722:	b29a      	uxth	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b728:	e057      	b.n	800b7da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	689b      	ldr	r3, [r3, #8]
 800b730:	f003 0302 	and.w	r3, r3, #2
 800b734:	2b02      	cmp	r3, #2
 800b736:	d11c      	bne.n	800b772 <HAL_SPI_TransmitReceive+0x26c>
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d017      	beq.n	800b772 <HAL_SPI_TransmitReceive+0x26c>
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	2b01      	cmp	r3, #1
 800b746:	d114      	bne.n	800b772 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	330c      	adds	r3, #12
 800b752:	7812      	ldrb	r2, [r2, #0]
 800b754:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b764:	b29b      	uxth	r3, r3
 800b766:	3b01      	subs	r3, #1
 800b768:	b29a      	uxth	r2, r3
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b76e:	2300      	movs	r3, #0
 800b770:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	f003 0301 	and.w	r3, r3, #1
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d119      	bne.n	800b7b4 <HAL_SPI_TransmitReceive+0x2ae>
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b784:	b29b      	uxth	r3, r3
 800b786:	2b00      	cmp	r3, #0
 800b788:	d014      	beq.n	800b7b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	68da      	ldr	r2, [r3, #12]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b794:	b2d2      	uxtb	r2, r2
 800b796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b79c:	1c5a      	adds	r2, r3, #1
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	3b01      	subs	r3, #1
 800b7aa:	b29a      	uxth	r2, r3
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b7b4:	f7fa fe3e 	bl	8006434 <HAL_GetTick>
 800b7b8:	4602      	mov	r2, r0
 800b7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7bc:	1ad3      	subs	r3, r2, r3
 800b7be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d803      	bhi.n	800b7cc <HAL_SPI_TransmitReceive+0x2c6>
 800b7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7ca:	d102      	bne.n	800b7d2 <HAL_SPI_TransmitReceive+0x2cc>
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d103      	bne.n	800b7da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b7d2:	2303      	movs	r3, #3
 800b7d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b7d8:	e029      	b.n	800b82e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1a2      	bne.n	800b72a <HAL_SPI_TransmitReceive+0x224>
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d19d      	bne.n	800b72a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b7ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b7f2:	68f8      	ldr	r0, [r7, #12]
 800b7f4:	f000 fb60 	bl	800beb8 <SPI_EndRxTxTransaction>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d006      	beq.n	800b80c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b7fe:	2301      	movs	r3, #1
 800b800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2220      	movs	r2, #32
 800b808:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b80a:	e010      	b.n	800b82e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	689b      	ldr	r3, [r3, #8]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d10b      	bne.n	800b82c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b814:	2300      	movs	r3, #0
 800b816:	617b      	str	r3, [r7, #20]
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	617b      	str	r3, [r7, #20]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	689b      	ldr	r3, [r3, #8]
 800b826:	617b      	str	r3, [r7, #20]
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	e000      	b.n	800b82e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b82c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b83e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b842:	4618      	mov	r0, r3
 800b844:	3730      	adds	r7, #48	; 0x30
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
	...

0800b84c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	4613      	mov	r3, r2
 800b858:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b864:	2b01      	cmp	r3, #1
 800b866:	d101      	bne.n	800b86c <HAL_SPI_Transmit_DMA+0x20>
 800b868:	2302      	movs	r3, #2
 800b86a:	e09b      	b.n	800b9a4 <HAL_SPI_Transmit_DMA+0x158>
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d002      	beq.n	800b886 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b880:	2302      	movs	r3, #2
 800b882:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b884:	e089      	b.n	800b99a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d002      	beq.n	800b892 <HAL_SPI_Transmit_DMA+0x46>
 800b88c:	88fb      	ldrh	r3, [r7, #6]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d102      	bne.n	800b898 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b896:	e080      	b.n	800b99a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2203      	movs	r2, #3
 800b89c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	88fa      	ldrh	r2, [r7, #6]
 800b8b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	88fa      	ldrh	r2, [r7, #6]
 800b8b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8de:	d10f      	bne.n	800b900 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b8fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b904:	4a29      	ldr	r2, [pc, #164]	; (800b9ac <HAL_SPI_Transmit_DMA+0x160>)
 800b906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90c:	4a28      	ldr	r2, [pc, #160]	; (800b9b0 <HAL_SPI_Transmit_DMA+0x164>)
 800b90e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b914:	4a27      	ldr	r2, [pc, #156]	; (800b9b4 <HAL_SPI_Transmit_DMA+0x168>)
 800b916:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b91c:	2200      	movs	r2, #0
 800b91e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b928:	4619      	mov	r1, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	330c      	adds	r3, #12
 800b930:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b936:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b938:	f7fa ffcc 	bl	80068d4 <HAL_DMA_Start_IT>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00c      	beq.n	800b95c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b946:	f043 0210 	orr.w	r2, r3, #16
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b95a:	e01e      	b.n	800b99a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b966:	2b40      	cmp	r3, #64	; 0x40
 800b968:	d007      	beq.n	800b97a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b978:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f042 0220 	orr.w	r2, r2, #32
 800b988:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f042 0202 	orr.w	r2, r2, #2
 800b998:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	2200      	movs	r2, #0
 800b99e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	0800bd25 	.word	0x0800bd25
 800b9b0:	0800bc7d 	.word	0x0800bc7d
 800b9b4:	0800bd41 	.word	0x0800bd41

0800b9b8 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00f      	beq.n	800b9ec <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7fa ffd7 	bl	8006984 <HAL_DMA_Abort>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d007      	beq.n	800b9ec <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e0:	f043 0210 	orr.w	r2, r3, #16
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00f      	beq.n	800ba14 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fa ffc3 	bl	8006984 <HAL_DMA_Abort>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d007      	beq.n	800ba14 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba08:	f043 0210 	orr.w	r2, r3, #16
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	685a      	ldr	r2, [r3, #4]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f022 0203 	bic.w	r2, r2, #3
 800ba22:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
	...

0800ba38 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b088      	sub	sp, #32
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba50:	69bb      	ldr	r3, [r7, #24]
 800ba52:	099b      	lsrs	r3, r3, #6
 800ba54:	f003 0301 	and.w	r3, r3, #1
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d10f      	bne.n	800ba7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba5c:	69bb      	ldr	r3, [r7, #24]
 800ba5e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	099b      	lsrs	r3, r3, #6
 800ba6a:	f003 0301 	and.w	r3, r3, #1
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d004      	beq.n	800ba7c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	4798      	blx	r3
    return;
 800ba7a:	e0d7      	b.n	800bc2c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	085b      	lsrs	r3, r3, #1
 800ba80:	f003 0301 	and.w	r3, r3, #1
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00a      	beq.n	800ba9e <HAL_SPI_IRQHandler+0x66>
 800ba88:	69fb      	ldr	r3, [r7, #28]
 800ba8a:	09db      	lsrs	r3, r3, #7
 800ba8c:	f003 0301 	and.w	r3, r3, #1
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d004      	beq.n	800ba9e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4798      	blx	r3
    return;
 800ba9c:	e0c6      	b.n	800bc2c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ba9e:	69bb      	ldr	r3, [r7, #24]
 800baa0:	095b      	lsrs	r3, r3, #5
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d10c      	bne.n	800bac4 <HAL_SPI_IRQHandler+0x8c>
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	099b      	lsrs	r3, r3, #6
 800baae:	f003 0301 	and.w	r3, r3, #1
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	0a1b      	lsrs	r3, r3, #8
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f000 80b4 	beq.w	800bc2c <HAL_SPI_IRQHandler+0x1f4>
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	095b      	lsrs	r3, r3, #5
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	2b00      	cmp	r3, #0
 800bace:	f000 80ad 	beq.w	800bc2c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800bad2:	69bb      	ldr	r3, [r7, #24]
 800bad4:	099b      	lsrs	r3, r3, #6
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	2b00      	cmp	r3, #0
 800badc:	d023      	beq.n	800bb26 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bae4:	b2db      	uxtb	r3, r3
 800bae6:	2b03      	cmp	r3, #3
 800bae8:	d011      	beq.n	800bb0e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baee:	f043 0204 	orr.w	r2, r3, #4
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800baf6:	2300      	movs	r3, #0
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	617b      	str	r3, [r7, #20]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	617b      	str	r3, [r7, #20]
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	e00b      	b.n	800bb26 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb0e:	2300      	movs	r3, #0
 800bb10:	613b      	str	r3, [r7, #16]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	613b      	str	r3, [r7, #16]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	693b      	ldr	r3, [r7, #16]
        return;
 800bb24:	e082      	b.n	800bc2c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	095b      	lsrs	r3, r3, #5
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d014      	beq.n	800bb5c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb36:	f043 0201 	orr.w	r2, r3, #1
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bb3e:	2300      	movs	r3, #0
 800bb40:	60fb      	str	r3, [r7, #12]
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	689b      	ldr	r3, [r3, #8]
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb58:	601a      	str	r2, [r3, #0]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800bb5c:	69bb      	ldr	r3, [r7, #24]
 800bb5e:	0a1b      	lsrs	r3, r3, #8
 800bb60:	f003 0301 	and.w	r3, r3, #1
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00c      	beq.n	800bb82 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb6c:	f043 0208 	orr.w	r2, r3, #8
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bb74:	2300      	movs	r3, #0
 800bb76:	60bb      	str	r3, [r7, #8]
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	689b      	ldr	r3, [r3, #8]
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d04f      	beq.n	800bc2a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	685a      	ldr	r2, [r3, #4]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb98:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bba2:	69fb      	ldr	r3, [r7, #28]
 800bba4:	f003 0302 	and.w	r3, r3, #2
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d104      	bne.n	800bbb6 <HAL_SPI_IRQHandler+0x17e>
 800bbac:	69fb      	ldr	r3, [r7, #28]
 800bbae:	f003 0301 	and.w	r3, r3, #1
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d034      	beq.n	800bc20 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685a      	ldr	r2, [r3, #4]
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f022 0203 	bic.w	r2, r2, #3
 800bbc4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d011      	beq.n	800bbf2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbd2:	4a18      	ldr	r2, [pc, #96]	; (800bc34 <HAL_SPI_IRQHandler+0x1fc>)
 800bbd4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f7fa ff42 	bl	8006a64 <HAL_DMA_Abort_IT>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d005      	beq.n	800bbf2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d016      	beq.n	800bc28 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbfe:	4a0d      	ldr	r2, [pc, #52]	; (800bc34 <HAL_SPI_IRQHandler+0x1fc>)
 800bc00:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc06:	4618      	mov	r0, r3
 800bc08:	f7fa ff2c 	bl	8006a64 <HAL_DMA_Abort_IT>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d00a      	beq.n	800bc28 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc16:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bc1e:	e003      	b.n	800bc28 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 f813 	bl	800bc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bc26:	e000      	b.n	800bc2a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bc28:	bf00      	nop
    return;
 800bc2a:	bf00      	nop
  }
}
 800bc2c:	3720      	adds	r7, #32
 800bc2e:	46bd      	mov	sp, r7
 800bc30:	bd80      	pop	{r7, pc}
 800bc32:	bf00      	nop
 800bc34:	0800bd81 	.word	0x0800bd81

0800bc38 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bc54:	bf00      	nop
 800bc56:	370c      	adds	r7, #12
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5e:	4770      	bx	lr

0800bc60 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b083      	sub	sp, #12
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc6e:	b2db      	uxtb	r3, r3
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b086      	sub	sp, #24
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc8a:	f7fa fbd3 	bl	8006434 <HAL_GetTick>
 800bc8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc9e:	d03b      	beq.n	800bd18 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bca0:	697b      	ldr	r3, [r7, #20]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	697b      	ldr	r3, [r7, #20]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0220 	bic.w	r2, r2, #32
 800bcae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	685a      	ldr	r2, [r3, #4]
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f022 0202 	bic.w	r2, r2, #2
 800bcbe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bcc0:	693a      	ldr	r2, [r7, #16]
 800bcc2:	2164      	movs	r1, #100	; 0x64
 800bcc4:	6978      	ldr	r0, [r7, #20]
 800bcc6:	f000 f8f7 	bl	800beb8 <SPI_EndRxTxTransaction>
 800bcca:	4603      	mov	r3, r0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d005      	beq.n	800bcdc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd4:	f043 0220 	orr.w	r2, r3, #32
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d10a      	bne.n	800bcfa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	68db      	ldr	r3, [r3, #12]
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800bd00:	697b      	ldr	r3, [r7, #20]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d003      	beq.n	800bd18 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800bd10:	6978      	ldr	r0, [r7, #20]
 800bd12:	f7ff ff9b 	bl	800bc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800bd16:	e002      	b.n	800bd1e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800bd18:	6978      	ldr	r0, [r7, #20]
 800bd1a:	f7f6 ff31 	bl	8002b80 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd1e:	3718      	adds	r7, #24
 800bd20:	46bd      	mov	sp, r7
 800bd22:	bd80      	pop	{r7, pc}

0800bd24 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b084      	sub	sp, #16
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd30:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f7ff ff80 	bl	800bc38 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd38:	bf00      	nop
 800bd3a:	3710      	adds	r7, #16
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	685a      	ldr	r2, [r3, #4]
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f022 0203 	bic.w	r2, r2, #3
 800bd5c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd62:	f043 0210 	orr.w	r2, r3, #16
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2201      	movs	r2, #1
 800bd6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f7ff ff6a 	bl	800bc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bd78:	bf00      	nop
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	2200      	movs	r2, #0
 800bd92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff ff56 	bl	800bc4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bda0:	bf00      	nop
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b088      	sub	sp, #32
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	603b      	str	r3, [r7, #0]
 800bdb4:	4613      	mov	r3, r2
 800bdb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bdb8:	f7fa fb3c 	bl	8006434 <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc0:	1a9b      	subs	r3, r3, r2
 800bdc2:	683a      	ldr	r2, [r7, #0]
 800bdc4:	4413      	add	r3, r2
 800bdc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800bdc8:	f7fa fb34 	bl	8006434 <HAL_GetTick>
 800bdcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bdce:	4b39      	ldr	r3, [pc, #228]	; (800beb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	015b      	lsls	r3, r3, #5
 800bdd4:	0d1b      	lsrs	r3, r3, #20
 800bdd6:	69fa      	ldr	r2, [r7, #28]
 800bdd8:	fb02 f303 	mul.w	r3, r2, r3
 800bddc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bdde:	e054      	b.n	800be8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bde6:	d050      	beq.n	800be8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bde8:	f7fa fb24 	bl	8006434 <HAL_GetTick>
 800bdec:	4602      	mov	r2, r0
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	69fa      	ldr	r2, [r7, #28]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d902      	bls.n	800bdfe <SPI_WaitFlagStateUntilTimeout+0x56>
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d13d      	bne.n	800be7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800be0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be16:	d111      	bne.n	800be3c <SPI_WaitFlagStateUntilTimeout+0x94>
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be20:	d004      	beq.n	800be2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be2a:	d107      	bne.n	800be3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be44:	d10f      	bne.n	800be66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800be54:	601a      	str	r2, [r3, #0]
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800be64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2201      	movs	r2, #1
 800be6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800be76:	2303      	movs	r3, #3
 800be78:	e017      	b.n	800beaa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d101      	bne.n	800be84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800be80:	2300      	movs	r3, #0
 800be82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800be84:	697b      	ldr	r3, [r7, #20]
 800be86:	3b01      	subs	r3, #1
 800be88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	689a      	ldr	r2, [r3, #8]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	4013      	ands	r3, r2
 800be94:	68ba      	ldr	r2, [r7, #8]
 800be96:	429a      	cmp	r2, r3
 800be98:	bf0c      	ite	eq
 800be9a:	2301      	moveq	r3, #1
 800be9c:	2300      	movne	r3, #0
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	461a      	mov	r2, r3
 800bea2:	79fb      	ldrb	r3, [r7, #7]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d19b      	bne.n	800bde0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3720      	adds	r7, #32
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	20000030 	.word	0x20000030

0800beb8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af02      	add	r7, sp, #8
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bec4:	4b1b      	ldr	r3, [pc, #108]	; (800bf34 <SPI_EndRxTxTransaction+0x7c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a1b      	ldr	r2, [pc, #108]	; (800bf38 <SPI_EndRxTxTransaction+0x80>)
 800beca:	fba2 2303 	umull	r2, r3, r2, r3
 800bece:	0d5b      	lsrs	r3, r3, #21
 800bed0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bed4:	fb02 f303 	mul.w	r3, r2, r3
 800bed8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bee2:	d112      	bne.n	800bf0a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2200      	movs	r2, #0
 800beec:	2180      	movs	r1, #128	; 0x80
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f7ff ff5a 	bl	800bda8 <SPI_WaitFlagStateUntilTimeout>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d016      	beq.n	800bf28 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befe:	f043 0220 	orr.w	r2, r3, #32
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bf06:	2303      	movs	r3, #3
 800bf08:	e00f      	b.n	800bf2a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d00a      	beq.n	800bf26 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	3b01      	subs	r3, #1
 800bf14:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf20:	2b80      	cmp	r3, #128	; 0x80
 800bf22:	d0f2      	beq.n	800bf0a <SPI_EndRxTxTransaction+0x52>
 800bf24:	e000      	b.n	800bf28 <SPI_EndRxTxTransaction+0x70>
        break;
 800bf26:	bf00      	nop
  }

  return HAL_OK;
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3718      	adds	r7, #24
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	20000030 	.word	0x20000030
 800bf38:	165e9f81 	.word	0x165e9f81

0800bf3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d101      	bne.n	800bf4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e041      	b.n	800bfd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf54:	b2db      	uxtb	r3, r3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d106      	bne.n	800bf68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7f8 fdd8 	bl	8004b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	3304      	adds	r3, #4
 800bf78:	4619      	mov	r1, r3
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	f000 fac4 	bl	800c508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2201      	movs	r2, #1
 800bf94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2201      	movs	r2, #1
 800bf9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2201      	movs	r2, #1
 800bfac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2201      	movs	r2, #1
 800bfb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2201      	movs	r2, #1
 800bfcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3708      	adds	r7, #8
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
	...

0800bfdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfea:	b2db      	uxtb	r3, r3
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d001      	beq.n	800bff4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e04e      	b.n	800c092 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2202      	movs	r2, #2
 800bff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68da      	ldr	r2, [r3, #12]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0201 	orr.w	r2, r2, #1
 800c00a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a23      	ldr	r2, [pc, #140]	; (800c0a0 <HAL_TIM_Base_Start_IT+0xc4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d022      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c01e:	d01d      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a1f      	ldr	r2, [pc, #124]	; (800c0a4 <HAL_TIM_Base_Start_IT+0xc8>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d018      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	4a1e      	ldr	r2, [pc, #120]	; (800c0a8 <HAL_TIM_Base_Start_IT+0xcc>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d013      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	4a1c      	ldr	r2, [pc, #112]	; (800c0ac <HAL_TIM_Base_Start_IT+0xd0>)
 800c03a:	4293      	cmp	r3, r2
 800c03c:	d00e      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	4a1b      	ldr	r2, [pc, #108]	; (800c0b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800c044:	4293      	cmp	r3, r2
 800c046:	d009      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a19      	ldr	r2, [pc, #100]	; (800c0b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d004      	beq.n	800c05c <HAL_TIM_Base_Start_IT+0x80>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	4a18      	ldr	r2, [pc, #96]	; (800c0b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d111      	bne.n	800c080 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f003 0307 	and.w	r3, r3, #7
 800c066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b06      	cmp	r3, #6
 800c06c:	d010      	beq.n	800c090 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f042 0201 	orr.w	r2, r2, #1
 800c07c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c07e:	e007      	b.n	800c090 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f042 0201 	orr.w	r2, r2, #1
 800c08e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	40010000 	.word	0x40010000
 800c0a4:	40000400 	.word	0x40000400
 800c0a8:	40000800 	.word	0x40000800
 800c0ac:	40000c00 	.word	0x40000c00
 800c0b0:	40010400 	.word	0x40010400
 800c0b4:	40014000 	.word	0x40014000
 800c0b8:	40001800 	.word	0x40001800

0800c0bc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b083      	sub	sp, #12
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f022 0201 	bic.w	r2, r2, #1
 800c0d2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	6a1a      	ldr	r2, [r3, #32]
 800c0da:	f241 1311 	movw	r3, #4369	; 0x1111
 800c0de:	4013      	ands	r3, r2
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d10f      	bne.n	800c104 <HAL_TIM_Base_Stop_IT+0x48>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6a1a      	ldr	r2, [r3, #32]
 800c0ea:	f240 4344 	movw	r3, #1092	; 0x444
 800c0ee:	4013      	ands	r3, r2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d107      	bne.n	800c104 <HAL_TIM_Base_Stop_IT+0x48>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 0201 	bic.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c10c:	2300      	movs	r3, #0
}
 800c10e:	4618      	mov	r0, r3
 800c110:	370c      	adds	r7, #12
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr

0800c11a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	f003 0302 	and.w	r3, r3, #2
 800c12c:	2b02      	cmp	r3, #2
 800c12e:	d122      	bne.n	800c176 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	f003 0302 	and.w	r3, r3, #2
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d11b      	bne.n	800c176 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f06f 0202 	mvn.w	r2, #2
 800c146:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	2201      	movs	r2, #1
 800c14c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	699b      	ldr	r3, [r3, #24]
 800c154:	f003 0303 	and.w	r3, r3, #3
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d003      	beq.n	800c164 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c15c:	6878      	ldr	r0, [r7, #4]
 800c15e:	f000 f9b5 	bl	800c4cc <HAL_TIM_IC_CaptureCallback>
 800c162:	e005      	b.n	800c170 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f000 f9a7 	bl	800c4b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f000 f9b8 	bl	800c4e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b04      	cmp	r3, #4
 800c182:	d122      	bne.n	800c1ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	68db      	ldr	r3, [r3, #12]
 800c18a:	f003 0304 	and.w	r3, r3, #4
 800c18e:	2b04      	cmp	r3, #4
 800c190:	d11b      	bne.n	800c1ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f06f 0204 	mvn.w	r2, #4
 800c19a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d003      	beq.n	800c1b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f000 f98b 	bl	800c4cc <HAL_TIM_IC_CaptureCallback>
 800c1b6:	e005      	b.n	800c1c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f97d 	bl	800c4b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1be:	6878      	ldr	r0, [r7, #4]
 800c1c0:	f000 f98e 	bl	800c4e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	f003 0308 	and.w	r3, r3, #8
 800c1d4:	2b08      	cmp	r3, #8
 800c1d6:	d122      	bne.n	800c21e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	68db      	ldr	r3, [r3, #12]
 800c1de:	f003 0308 	and.w	r3, r3, #8
 800c1e2:	2b08      	cmp	r3, #8
 800c1e4:	d11b      	bne.n	800c21e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f06f 0208 	mvn.w	r2, #8
 800c1ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2204      	movs	r2, #4
 800c1f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	f003 0303 	and.w	r3, r3, #3
 800c200:	2b00      	cmp	r3, #0
 800c202:	d003      	beq.n	800c20c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f961 	bl	800c4cc <HAL_TIM_IC_CaptureCallback>
 800c20a:	e005      	b.n	800c218 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f953 	bl	800c4b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f964 	bl	800c4e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2200      	movs	r2, #0
 800c21c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	691b      	ldr	r3, [r3, #16]
 800c224:	f003 0310 	and.w	r3, r3, #16
 800c228:	2b10      	cmp	r3, #16
 800c22a:	d122      	bne.n	800c272 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	68db      	ldr	r3, [r3, #12]
 800c232:	f003 0310 	and.w	r3, r3, #16
 800c236:	2b10      	cmp	r3, #16
 800c238:	d11b      	bne.n	800c272 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f06f 0210 	mvn.w	r2, #16
 800c242:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2208      	movs	r2, #8
 800c248:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	69db      	ldr	r3, [r3, #28]
 800c250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c254:	2b00      	cmp	r3, #0
 800c256:	d003      	beq.n	800c260 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f937 	bl	800c4cc <HAL_TIM_IC_CaptureCallback>
 800c25e:	e005      	b.n	800c26c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f929 	bl	800c4b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f93a 	bl	800c4e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2200      	movs	r2, #0
 800c270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	f003 0301 	and.w	r3, r3, #1
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d10e      	bne.n	800c29e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68db      	ldr	r3, [r3, #12]
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b01      	cmp	r3, #1
 800c28c:	d107      	bne.n	800c29e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f06f 0201 	mvn.w	r2, #1
 800c296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f7f8 f9af 	bl	80045fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d10e      	bne.n	800c2ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2b6:	2b80      	cmp	r3, #128	; 0x80
 800c2b8:	d107      	bne.n	800c2ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c2c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 fadf 	bl	800c888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d4:	2b40      	cmp	r3, #64	; 0x40
 800c2d6:	d10e      	bne.n	800c2f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e2:	2b40      	cmp	r3, #64	; 0x40
 800c2e4:	d107      	bne.n	800c2f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c2ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 f8ff 	bl	800c4f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	691b      	ldr	r3, [r3, #16]
 800c2fc:	f003 0320 	and.w	r3, r3, #32
 800c300:	2b20      	cmp	r3, #32
 800c302:	d10e      	bne.n	800c322 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	68db      	ldr	r3, [r3, #12]
 800c30a:	f003 0320 	and.w	r3, r3, #32
 800c30e:	2b20      	cmp	r3, #32
 800c310:	d107      	bne.n	800c322 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f06f 0220 	mvn.w	r2, #32
 800c31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 faa9 	bl	800c874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c322:	bf00      	nop
 800c324:	3708      	adds	r7, #8
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}

0800c32a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c32a:	b580      	push	{r7, lr}
 800c32c:	b084      	sub	sp, #16
 800c32e:	af00      	add	r7, sp, #0
 800c330:	6078      	str	r0, [r7, #4]
 800c332:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d101      	bne.n	800c346 <HAL_TIM_ConfigClockSource+0x1c>
 800c342:	2302      	movs	r3, #2
 800c344:	e0b4      	b.n	800c4b0 <HAL_TIM_ConfigClockSource+0x186>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2201      	movs	r2, #1
 800c34a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	2202      	movs	r2, #2
 800c352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c364:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c36c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68ba      	ldr	r2, [r7, #8]
 800c374:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c37e:	d03e      	beq.n	800c3fe <HAL_TIM_ConfigClockSource+0xd4>
 800c380:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c384:	f200 8087 	bhi.w	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c38c:	f000 8086 	beq.w	800c49c <HAL_TIM_ConfigClockSource+0x172>
 800c390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c394:	d87f      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c396:	2b70      	cmp	r3, #112	; 0x70
 800c398:	d01a      	beq.n	800c3d0 <HAL_TIM_ConfigClockSource+0xa6>
 800c39a:	2b70      	cmp	r3, #112	; 0x70
 800c39c:	d87b      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c39e:	2b60      	cmp	r3, #96	; 0x60
 800c3a0:	d050      	beq.n	800c444 <HAL_TIM_ConfigClockSource+0x11a>
 800c3a2:	2b60      	cmp	r3, #96	; 0x60
 800c3a4:	d877      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c3a6:	2b50      	cmp	r3, #80	; 0x50
 800c3a8:	d03c      	beq.n	800c424 <HAL_TIM_ConfigClockSource+0xfa>
 800c3aa:	2b50      	cmp	r3, #80	; 0x50
 800c3ac:	d873      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c3ae:	2b40      	cmp	r3, #64	; 0x40
 800c3b0:	d058      	beq.n	800c464 <HAL_TIM_ConfigClockSource+0x13a>
 800c3b2:	2b40      	cmp	r3, #64	; 0x40
 800c3b4:	d86f      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c3b6:	2b30      	cmp	r3, #48	; 0x30
 800c3b8:	d064      	beq.n	800c484 <HAL_TIM_ConfigClockSource+0x15a>
 800c3ba:	2b30      	cmp	r3, #48	; 0x30
 800c3bc:	d86b      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	d060      	beq.n	800c484 <HAL_TIM_ConfigClockSource+0x15a>
 800c3c2:	2b20      	cmp	r3, #32
 800c3c4:	d867      	bhi.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d05c      	beq.n	800c484 <HAL_TIM_ConfigClockSource+0x15a>
 800c3ca:	2b10      	cmp	r3, #16
 800c3cc:	d05a      	beq.n	800c484 <HAL_TIM_ConfigClockSource+0x15a>
 800c3ce:	e062      	b.n	800c496 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	6899      	ldr	r1, [r3, #8]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	685a      	ldr	r2, [r3, #4]
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	f000 f9ac 	bl	800c73c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	689b      	ldr	r3, [r3, #8]
 800c3ea:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c3f2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	609a      	str	r2, [r3, #8]
      break;
 800c3fc:	e04f      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6818      	ldr	r0, [r3, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	6899      	ldr	r1, [r3, #8]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	685a      	ldr	r2, [r3, #4]
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	68db      	ldr	r3, [r3, #12]
 800c40e:	f000 f995 	bl	800c73c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	689a      	ldr	r2, [r3, #8]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c420:	609a      	str	r2, [r3, #8]
      break;
 800c422:	e03c      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6818      	ldr	r0, [r3, #0]
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	6859      	ldr	r1, [r3, #4]
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	461a      	mov	r2, r3
 800c432:	f000 f909 	bl	800c648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2150      	movs	r1, #80	; 0x50
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 f962 	bl	800c706 <TIM_ITRx_SetConfig>
      break;
 800c442:	e02c      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6818      	ldr	r0, [r3, #0]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	6859      	ldr	r1, [r3, #4]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	461a      	mov	r2, r3
 800c452:	f000 f928 	bl	800c6a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	2160      	movs	r1, #96	; 0x60
 800c45c:	4618      	mov	r0, r3
 800c45e:	f000 f952 	bl	800c706 <TIM_ITRx_SetConfig>
      break;
 800c462:	e01c      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6818      	ldr	r0, [r3, #0]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	6859      	ldr	r1, [r3, #4]
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	461a      	mov	r2, r3
 800c472:	f000 f8e9 	bl	800c648 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2140      	movs	r1, #64	; 0x40
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 f942 	bl	800c706 <TIM_ITRx_SetConfig>
      break;
 800c482:	e00c      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	4619      	mov	r1, r3
 800c48e:	4610      	mov	r0, r2
 800c490:	f000 f939 	bl	800c706 <TIM_ITRx_SetConfig>
      break;
 800c494:	e003      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	73fb      	strb	r3, [r7, #15]
      break;
 800c49a:	e000      	b.n	800c49e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c49c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3710      	adds	r7, #16
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c4c0:	bf00      	nop
 800c4c2:	370c      	adds	r7, #12
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ca:	4770      	bx	lr

0800c4cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b083      	sub	sp, #12
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c4d4:	bf00      	nop
 800c4d6:	370c      	adds	r7, #12
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4de:	4770      	bx	lr

0800c4e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	4a40      	ldr	r2, [pc, #256]	; (800c61c <TIM_Base_SetConfig+0x114>)
 800c51c:	4293      	cmp	r3, r2
 800c51e:	d013      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c526:	d00f      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a3d      	ldr	r2, [pc, #244]	; (800c620 <TIM_Base_SetConfig+0x118>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d00b      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a3c      	ldr	r2, [pc, #240]	; (800c624 <TIM_Base_SetConfig+0x11c>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d007      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a3b      	ldr	r2, [pc, #236]	; (800c628 <TIM_Base_SetConfig+0x120>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d003      	beq.n	800c548 <TIM_Base_SetConfig+0x40>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a3a      	ldr	r2, [pc, #232]	; (800c62c <TIM_Base_SetConfig+0x124>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d108      	bne.n	800c55a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c54e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	685b      	ldr	r3, [r3, #4]
 800c554:	68fa      	ldr	r2, [r7, #12]
 800c556:	4313      	orrs	r3, r2
 800c558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4a2f      	ldr	r2, [pc, #188]	; (800c61c <TIM_Base_SetConfig+0x114>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d02b      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c568:	d027      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4a2c      	ldr	r2, [pc, #176]	; (800c620 <TIM_Base_SetConfig+0x118>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d023      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4a2b      	ldr	r2, [pc, #172]	; (800c624 <TIM_Base_SetConfig+0x11c>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d01f      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4a2a      	ldr	r2, [pc, #168]	; (800c628 <TIM_Base_SetConfig+0x120>)
 800c57e:	4293      	cmp	r3, r2
 800c580:	d01b      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	4a29      	ldr	r2, [pc, #164]	; (800c62c <TIM_Base_SetConfig+0x124>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d017      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	4a28      	ldr	r2, [pc, #160]	; (800c630 <TIM_Base_SetConfig+0x128>)
 800c58e:	4293      	cmp	r3, r2
 800c590:	d013      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	4a27      	ldr	r2, [pc, #156]	; (800c634 <TIM_Base_SetConfig+0x12c>)
 800c596:	4293      	cmp	r3, r2
 800c598:	d00f      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4a26      	ldr	r2, [pc, #152]	; (800c638 <TIM_Base_SetConfig+0x130>)
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	d00b      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	4a25      	ldr	r2, [pc, #148]	; (800c63c <TIM_Base_SetConfig+0x134>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d007      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a24      	ldr	r2, [pc, #144]	; (800c640 <TIM_Base_SetConfig+0x138>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d003      	beq.n	800c5ba <TIM_Base_SetConfig+0xb2>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a23      	ldr	r2, [pc, #140]	; (800c644 <TIM_Base_SetConfig+0x13c>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d108      	bne.n	800c5cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c5c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	68fa      	ldr	r2, [r7, #12]
 800c5c8:	4313      	orrs	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	689a      	ldr	r2, [r3, #8]
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	681a      	ldr	r2, [r3, #0]
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a0a      	ldr	r2, [pc, #40]	; (800c61c <TIM_Base_SetConfig+0x114>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d003      	beq.n	800c600 <TIM_Base_SetConfig+0xf8>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a0c      	ldr	r2, [pc, #48]	; (800c62c <TIM_Base_SetConfig+0x124>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d103      	bne.n	800c608 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c600:	683b      	ldr	r3, [r7, #0]
 800c602:	691a      	ldr	r2, [r3, #16]
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	615a      	str	r2, [r3, #20]
}
 800c60e:	bf00      	nop
 800c610:	3714      	adds	r7, #20
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr
 800c61a:	bf00      	nop
 800c61c:	40010000 	.word	0x40010000
 800c620:	40000400 	.word	0x40000400
 800c624:	40000800 	.word	0x40000800
 800c628:	40000c00 	.word	0x40000c00
 800c62c:	40010400 	.word	0x40010400
 800c630:	40014000 	.word	0x40014000
 800c634:	40014400 	.word	0x40014400
 800c638:	40014800 	.word	0x40014800
 800c63c:	40001800 	.word	0x40001800
 800c640:	40001c00 	.word	0x40001c00
 800c644:	40002000 	.word	0x40002000

0800c648 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	60f8      	str	r0, [r7, #12]
 800c650:	60b9      	str	r1, [r7, #8]
 800c652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6a1b      	ldr	r3, [r3, #32]
 800c658:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	6a1b      	ldr	r3, [r3, #32]
 800c65e:	f023 0201 	bic.w	r2, r3, #1
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	699b      	ldr	r3, [r3, #24]
 800c66a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	f023 030a 	bic.w	r3, r3, #10
 800c684:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	4313      	orrs	r3, r2
 800c68c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	693a      	ldr	r2, [r7, #16]
 800c692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	697a      	ldr	r2, [r7, #20]
 800c698:	621a      	str	r2, [r3, #32]
}
 800c69a:	bf00      	nop
 800c69c:	371c      	adds	r7, #28
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b087      	sub	sp, #28
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	60f8      	str	r0, [r7, #12]
 800c6ae:	60b9      	str	r1, [r7, #8]
 800c6b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	f023 0210 	bic.w	r2, r3, #16
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6a1b      	ldr	r3, [r3, #32]
 800c6c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6ca:	697b      	ldr	r3, [r7, #20]
 800c6cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c6d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	031b      	lsls	r3, r3, #12
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c6e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	011b      	lsls	r3, r3, #4
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	621a      	str	r2, [r3, #32]
}
 800c6fa:	bf00      	nop
 800c6fc:	371c      	adds	r7, #28
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c706:	b480      	push	{r7}
 800c708:	b085      	sub	sp, #20
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	689b      	ldr	r3, [r3, #8]
 800c714:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c71c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	4313      	orrs	r3, r2
 800c724:	f043 0307 	orr.w	r3, r3, #7
 800c728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	68fa      	ldr	r2, [r7, #12]
 800c72e:	609a      	str	r2, [r3, #8]
}
 800c730:	bf00      	nop
 800c732:	3714      	adds	r7, #20
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr

0800c73c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c73c:	b480      	push	{r7}
 800c73e:	b087      	sub	sp, #28
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	60b9      	str	r1, [r7, #8]
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	689b      	ldr	r3, [r3, #8]
 800c74e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	021a      	lsls	r2, r3, #8
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	431a      	orrs	r2, r3
 800c760:	68bb      	ldr	r3, [r7, #8]
 800c762:	4313      	orrs	r3, r2
 800c764:	697a      	ldr	r2, [r7, #20]
 800c766:	4313      	orrs	r3, r2
 800c768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	697a      	ldr	r2, [r7, #20]
 800c76e:	609a      	str	r2, [r3, #8]
}
 800c770:	bf00      	nop
 800c772:	371c      	adds	r7, #28
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c78c:	2b01      	cmp	r3, #1
 800c78e:	d101      	bne.n	800c794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c790:	2302      	movs	r3, #2
 800c792:	e05a      	b.n	800c84a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2202      	movs	r2, #2
 800c7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	689b      	ldr	r3, [r3, #8]
 800c7b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68fa      	ldr	r2, [r7, #12]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	4a21      	ldr	r2, [pc, #132]	; (800c858 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c7d4:	4293      	cmp	r3, r2
 800c7d6:	d022      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c7e0:	d01d      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4a1d      	ldr	r2, [pc, #116]	; (800c85c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c7e8:	4293      	cmp	r3, r2
 800c7ea:	d018      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a1b      	ldr	r2, [pc, #108]	; (800c860 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d013      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c7fc:	4293      	cmp	r3, r2
 800c7fe:	d00e      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	4a18      	ldr	r2, [pc, #96]	; (800c868 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d009      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	4a17      	ldr	r2, [pc, #92]	; (800c86c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c810:	4293      	cmp	r3, r2
 800c812:	d004      	beq.n	800c81e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a15      	ldr	r2, [pc, #84]	; (800c870 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d10c      	bne.n	800c838 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c824:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	4313      	orrs	r3, r2
 800c82e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3714      	adds	r7, #20
 800c84e:	46bd      	mov	sp, r7
 800c850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c854:	4770      	bx	lr
 800c856:	bf00      	nop
 800c858:	40010000 	.word	0x40010000
 800c85c:	40000400 	.word	0x40000400
 800c860:	40000800 	.word	0x40000800
 800c864:	40000c00 	.word	0x40000c00
 800c868:	40010400 	.word	0x40010400
 800c86c:	40014000 	.word	0x40014000
 800c870:	40001800 	.word	0x40001800

0800c874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c886:	4770      	bx	lr

0800c888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c890:	bf00      	nop
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c89c:	b084      	sub	sp, #16
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b084      	sub	sp, #16
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
 800c8a6:	f107 001c 	add.w	r0, r7, #28
 800c8aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d122      	bne.n	800c8fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68db      	ldr	r3, [r3, #12]
 800c8c4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c8c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68db      	ldr	r3, [r3, #12]
 800c8d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c8dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d105      	bne.n	800c8ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f001 fb1c 	bl	800df2c <USB_CoreReset>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	73fb      	strb	r3, [r7, #15]
 800c8f8:	e01a      	b.n	800c930 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	68db      	ldr	r3, [r3, #12]
 800c8fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f001 fb10 	bl	800df2c <USB_CoreReset>
 800c90c:	4603      	mov	r3, r0
 800c90e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c912:	2b00      	cmp	r3, #0
 800c914:	d106      	bne.n	800c924 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	639a      	str	r2, [r3, #56]	; 0x38
 800c922:	e005      	b.n	800c930 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c932:	2b01      	cmp	r3, #1
 800c934:	d10b      	bne.n	800c94e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f043 0206 	orr.w	r2, r3, #6
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	f043 0220 	orr.w	r2, r3, #32
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c94e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c950:	4618      	mov	r0, r3
 800c952:	3710      	adds	r7, #16
 800c954:	46bd      	mov	sp, r7
 800c956:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c95a:	b004      	add	sp, #16
 800c95c:	4770      	bx	lr
	...

0800c960 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c960:	b480      	push	{r7}
 800c962:	b087      	sub	sp, #28
 800c964:	af00      	add	r7, sp, #0
 800c966:	60f8      	str	r0, [r7, #12]
 800c968:	60b9      	str	r1, [r7, #8]
 800c96a:	4613      	mov	r3, r2
 800c96c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	2b02      	cmp	r3, #2
 800c972:	d165      	bne.n	800ca40 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	4a41      	ldr	r2, [pc, #260]	; (800ca7c <USB_SetTurnaroundTime+0x11c>)
 800c978:	4293      	cmp	r3, r2
 800c97a:	d906      	bls.n	800c98a <USB_SetTurnaroundTime+0x2a>
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	4a40      	ldr	r2, [pc, #256]	; (800ca80 <USB_SetTurnaroundTime+0x120>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d202      	bcs.n	800c98a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c984:	230f      	movs	r3, #15
 800c986:	617b      	str	r3, [r7, #20]
 800c988:	e062      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	4a3c      	ldr	r2, [pc, #240]	; (800ca80 <USB_SetTurnaroundTime+0x120>)
 800c98e:	4293      	cmp	r3, r2
 800c990:	d306      	bcc.n	800c9a0 <USB_SetTurnaroundTime+0x40>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	4a3b      	ldr	r2, [pc, #236]	; (800ca84 <USB_SetTurnaroundTime+0x124>)
 800c996:	4293      	cmp	r3, r2
 800c998:	d202      	bcs.n	800c9a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c99a:	230e      	movs	r3, #14
 800c99c:	617b      	str	r3, [r7, #20]
 800c99e:	e057      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	4a38      	ldr	r2, [pc, #224]	; (800ca84 <USB_SetTurnaroundTime+0x124>)
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d306      	bcc.n	800c9b6 <USB_SetTurnaroundTime+0x56>
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	4a37      	ldr	r2, [pc, #220]	; (800ca88 <USB_SetTurnaroundTime+0x128>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d202      	bcs.n	800c9b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c9b0:	230d      	movs	r3, #13
 800c9b2:	617b      	str	r3, [r7, #20]
 800c9b4:	e04c      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	4a33      	ldr	r2, [pc, #204]	; (800ca88 <USB_SetTurnaroundTime+0x128>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d306      	bcc.n	800c9cc <USB_SetTurnaroundTime+0x6c>
 800c9be:	68bb      	ldr	r3, [r7, #8]
 800c9c0:	4a32      	ldr	r2, [pc, #200]	; (800ca8c <USB_SetTurnaroundTime+0x12c>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d802      	bhi.n	800c9cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	617b      	str	r3, [r7, #20]
 800c9ca:	e041      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	4a2f      	ldr	r2, [pc, #188]	; (800ca8c <USB_SetTurnaroundTime+0x12c>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d906      	bls.n	800c9e2 <USB_SetTurnaroundTime+0x82>
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	4a2e      	ldr	r2, [pc, #184]	; (800ca90 <USB_SetTurnaroundTime+0x130>)
 800c9d8:	4293      	cmp	r3, r2
 800c9da:	d802      	bhi.n	800c9e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c9dc:	230b      	movs	r3, #11
 800c9de:	617b      	str	r3, [r7, #20]
 800c9e0:	e036      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	4a2a      	ldr	r2, [pc, #168]	; (800ca90 <USB_SetTurnaroundTime+0x130>)
 800c9e6:	4293      	cmp	r3, r2
 800c9e8:	d906      	bls.n	800c9f8 <USB_SetTurnaroundTime+0x98>
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	4a29      	ldr	r2, [pc, #164]	; (800ca94 <USB_SetTurnaroundTime+0x134>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d802      	bhi.n	800c9f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c9f2:	230a      	movs	r3, #10
 800c9f4:	617b      	str	r3, [r7, #20]
 800c9f6:	e02b      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	4a26      	ldr	r2, [pc, #152]	; (800ca94 <USB_SetTurnaroundTime+0x134>)
 800c9fc:	4293      	cmp	r3, r2
 800c9fe:	d906      	bls.n	800ca0e <USB_SetTurnaroundTime+0xae>
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	4a25      	ldr	r2, [pc, #148]	; (800ca98 <USB_SetTurnaroundTime+0x138>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d202      	bcs.n	800ca0e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ca08:	2309      	movs	r3, #9
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	e020      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	4a21      	ldr	r2, [pc, #132]	; (800ca98 <USB_SetTurnaroundTime+0x138>)
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d306      	bcc.n	800ca24 <USB_SetTurnaroundTime+0xc4>
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	4a20      	ldr	r2, [pc, #128]	; (800ca9c <USB_SetTurnaroundTime+0x13c>)
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d802      	bhi.n	800ca24 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ca1e:	2308      	movs	r3, #8
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	e015      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	4a1d      	ldr	r2, [pc, #116]	; (800ca9c <USB_SetTurnaroundTime+0x13c>)
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d906      	bls.n	800ca3a <USB_SetTurnaroundTime+0xda>
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4a1c      	ldr	r2, [pc, #112]	; (800caa0 <USB_SetTurnaroundTime+0x140>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	d202      	bcs.n	800ca3a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ca34:	2307      	movs	r3, #7
 800ca36:	617b      	str	r3, [r7, #20]
 800ca38:	e00a      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ca3a:	2306      	movs	r3, #6
 800ca3c:	617b      	str	r3, [r7, #20]
 800ca3e:	e007      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ca40:	79fb      	ldrb	r3, [r7, #7]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d102      	bne.n	800ca4c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ca46:	2309      	movs	r3, #9
 800ca48:	617b      	str	r3, [r7, #20]
 800ca4a:	e001      	b.n	800ca50 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ca4c:	2309      	movs	r3, #9
 800ca4e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	68db      	ldr	r3, [r3, #12]
 800ca54:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68da      	ldr	r2, [r3, #12]
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	029b      	lsls	r3, r3, #10
 800ca64:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ca68:	431a      	orrs	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ca6e:	2300      	movs	r3, #0
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	371c      	adds	r7, #28
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	00d8acbf 	.word	0x00d8acbf
 800ca80:	00e4e1c0 	.word	0x00e4e1c0
 800ca84:	00f42400 	.word	0x00f42400
 800ca88:	01067380 	.word	0x01067380
 800ca8c:	011a499f 	.word	0x011a499f
 800ca90:	01312cff 	.word	0x01312cff
 800ca94:	014ca43f 	.word	0x014ca43f
 800ca98:	016e3600 	.word	0x016e3600
 800ca9c:	01a6ab1f 	.word	0x01a6ab1f
 800caa0:	01e84800 	.word	0x01e84800

0800caa4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	f043 0201 	orr.w	r2, r3, #1
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	370c      	adds	r7, #12
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b083      	sub	sp, #12
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	689b      	ldr	r3, [r3, #8]
 800cad2:	f023 0201 	bic.w	r2, r3, #1
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cada:	2300      	movs	r3, #0
}
 800cadc:	4618      	mov	r0, r3
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	460b      	mov	r3, r1
 800caf2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800caf4:	2300      	movs	r3, #0
 800caf6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cb04:	78fb      	ldrb	r3, [r7, #3]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d115      	bne.n	800cb36 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb16:	2001      	movs	r0, #1
 800cb18:	f7f9 fc98 	bl	800644c <HAL_Delay>
      ms++;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f001 f972 	bl	800de0c <USB_GetMode>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d01e      	beq.n	800cb6c <USB_SetCurrentMode+0x84>
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b31      	cmp	r3, #49	; 0x31
 800cb32:	d9f0      	bls.n	800cb16 <USB_SetCurrentMode+0x2e>
 800cb34:	e01a      	b.n	800cb6c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cb36:	78fb      	ldrb	r3, [r7, #3]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d115      	bne.n	800cb68 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cb48:	2001      	movs	r0, #1
 800cb4a:	f7f9 fc7f 	bl	800644c <HAL_Delay>
      ms++;
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	3301      	adds	r3, #1
 800cb52:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cb54:	6878      	ldr	r0, [r7, #4]
 800cb56:	f001 f959 	bl	800de0c <USB_GetMode>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d005      	beq.n	800cb6c <USB_SetCurrentMode+0x84>
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2b31      	cmp	r3, #49	; 0x31
 800cb64:	d9f0      	bls.n	800cb48 <USB_SetCurrentMode+0x60>
 800cb66:	e001      	b.n	800cb6c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e005      	b.n	800cb78 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b32      	cmp	r3, #50	; 0x32
 800cb70:	d101      	bne.n	800cb76 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e000      	b.n	800cb78 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cb76:	2300      	movs	r3, #0
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3710      	adds	r7, #16
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cb80:	b084      	sub	sp, #16
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b086      	sub	sp, #24
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800cb8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	613b      	str	r3, [r7, #16]
 800cb9e:	e009      	b.n	800cbb4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	3340      	adds	r3, #64	; 0x40
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	4413      	add	r3, r2
 800cbaa:	2200      	movs	r2, #0
 800cbac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	613b      	str	r3, [r7, #16]
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	2b0e      	cmp	r3, #14
 800cbb8:	d9f2      	bls.n	800cba0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800cbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d11c      	bne.n	800cbfa <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbce:	f043 0302 	orr.w	r3, r3, #2
 800cbd2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbf0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	639a      	str	r2, [r3, #56]	; 0x38
 800cbf8:	e00b      	b.n	800cc12 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbfe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc18:	461a      	mov	r2, r3
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc24:	4619      	mov	r1, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	680b      	ldr	r3, [r1, #0]
 800cc30:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc34:	2b01      	cmp	r3, #1
 800cc36:	d10c      	bne.n	800cc52 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d104      	bne.n	800cc48 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800cc3e:	2100      	movs	r1, #0
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f945 	bl	800ced0 <USB_SetDevSpeed>
 800cc46:	e008      	b.n	800cc5a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800cc48:	2101      	movs	r1, #1
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f000 f940 	bl	800ced0 <USB_SetDevSpeed>
 800cc50:	e003      	b.n	800cc5a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800cc52:	2103      	movs	r1, #3
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f93b 	bl	800ced0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cc5a:	2110      	movs	r1, #16
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 f8f3 	bl	800ce48 <USB_FlushTxFifo>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cc6c:	6878      	ldr	r0, [r7, #4]
 800cc6e:	f000 f90f 	bl	800ce90 <USB_FlushRxFifo>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc82:	461a      	mov	r2, r3
 800cc84:	2300      	movs	r3, #0
 800cc86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc8e:	461a      	mov	r2, r3
 800cc90:	2300      	movs	r3, #0
 800cc92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cca0:	2300      	movs	r3, #0
 800cca2:	613b      	str	r3, [r7, #16]
 800cca4:	e043      	b.n	800cd2e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cca6:	693b      	ldr	r3, [r7, #16]
 800cca8:	015a      	lsls	r2, r3, #5
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	4413      	add	r3, r2
 800ccae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ccb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ccbc:	d118      	bne.n	800ccf0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d10a      	bne.n	800ccda <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ccc4:	693b      	ldr	r3, [r7, #16]
 800ccc6:	015a      	lsls	r2, r3, #5
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	4413      	add	r3, r2
 800cccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ccd6:	6013      	str	r3, [r2, #0]
 800ccd8:	e013      	b.n	800cd02 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	015a      	lsls	r2, r3, #5
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	4413      	add	r3, r2
 800cce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce6:	461a      	mov	r2, r3
 800cce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ccec:	6013      	str	r3, [r2, #0]
 800ccee:	e008      	b.n	800cd02 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ccf0:	693b      	ldr	r3, [r7, #16]
 800ccf2:	015a      	lsls	r2, r3, #5
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	2300      	movs	r3, #0
 800cd00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	015a      	lsls	r2, r3, #5
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	4413      	add	r3, r2
 800cd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0e:	461a      	mov	r2, r3
 800cd10:	2300      	movs	r3, #0
 800cd12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd20:	461a      	mov	r2, r3
 800cd22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cd26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	613b      	str	r3, [r7, #16]
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d3b7      	bcc.n	800cca6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cd36:	2300      	movs	r3, #0
 800cd38:	613b      	str	r3, [r7, #16]
 800cd3a:	e043      	b.n	800cdc4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cd3c:	693b      	ldr	r3, [r7, #16]
 800cd3e:	015a      	lsls	r2, r3, #5
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	4413      	add	r3, r2
 800cd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd52:	d118      	bne.n	800cd86 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d10a      	bne.n	800cd70 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800cd5a:	693b      	ldr	r3, [r7, #16]
 800cd5c:	015a      	lsls	r2, r3, #5
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	4413      	add	r3, r2
 800cd62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd66:	461a      	mov	r2, r3
 800cd68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800cd6c:	6013      	str	r3, [r2, #0]
 800cd6e:	e013      	b.n	800cd98 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	015a      	lsls	r2, r3, #5
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	4413      	add	r3, r2
 800cd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800cd82:	6013      	str	r3, [r2, #0]
 800cd84:	e008      	b.n	800cd98 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800cd86:	693b      	ldr	r3, [r7, #16]
 800cd88:	015a      	lsls	r2, r3, #5
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	4413      	add	r3, r2
 800cd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd92:	461a      	mov	r2, r3
 800cd94:	2300      	movs	r3, #0
 800cd96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	015a      	lsls	r2, r3, #5
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	4413      	add	r3, r2
 800cda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cda4:	461a      	mov	r2, r3
 800cda6:	2300      	movs	r3, #0
 800cda8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	015a      	lsls	r2, r3, #5
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cdbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	613b      	str	r3, [r7, #16]
 800cdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc6:	693a      	ldr	r2, [r7, #16]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d3b7      	bcc.n	800cd3c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdd2:	691b      	ldr	r3, [r3, #16]
 800cdd4:	68fa      	ldr	r2, [r7, #12]
 800cdd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cdda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cdde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2200      	movs	r2, #0
 800cde4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cdec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d105      	bne.n	800ce00 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	699b      	ldr	r3, [r3, #24]
 800cdf8:	f043 0210 	orr.w	r2, r3, #16
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	699a      	ldr	r2, [r3, #24]
 800ce04:	4b0f      	ldr	r3, [pc, #60]	; (800ce44 <USB_DevInit+0x2c4>)
 800ce06:	4313      	orrs	r3, r2
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ce0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d005      	beq.n	800ce1e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	699b      	ldr	r3, [r3, #24]
 800ce16:	f043 0208 	orr.w	r2, r3, #8
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ce1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d107      	bne.n	800ce34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ce2c:	f043 0304 	orr.w	r3, r3, #4
 800ce30:	687a      	ldr	r2, [r7, #4]
 800ce32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ce34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3718      	adds	r7, #24
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce40:	b004      	add	sp, #16
 800ce42:	4770      	bx	lr
 800ce44:	803c3800 	.word	0x803c3800

0800ce48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	019b      	lsls	r3, r3, #6
 800ce5a:	f043 0220 	orr.w	r2, r3, #32
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3301      	adds	r3, #1
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	4a08      	ldr	r2, [pc, #32]	; (800ce8c <USB_FlushTxFifo+0x44>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d901      	bls.n	800ce72 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ce6e:	2303      	movs	r3, #3
 800ce70:	e006      	b.n	800ce80 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	f003 0320 	and.w	r3, r3, #32
 800ce7a:	2b20      	cmp	r3, #32
 800ce7c:	d0f1      	beq.n	800ce62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ce7e:	2300      	movs	r3, #0
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	00030d40 	.word	0x00030d40

0800ce90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b085      	sub	sp, #20
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2210      	movs	r2, #16
 800cea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	3301      	adds	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	4a08      	ldr	r2, [pc, #32]	; (800cecc <USB_FlushRxFifo+0x3c>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d901      	bls.n	800ceb2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800ceae:	2303      	movs	r3, #3
 800ceb0:	e006      	b.n	800cec0 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	691b      	ldr	r3, [r3, #16]
 800ceb6:	f003 0310 	and.w	r3, r3, #16
 800ceba:	2b10      	cmp	r3, #16
 800cebc:	d0f1      	beq.n	800cea2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cebe:	2300      	movs	r3, #0
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3714      	adds	r7, #20
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr
 800cecc:	00030d40 	.word	0x00030d40

0800ced0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b085      	sub	sp, #20
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	68f9      	ldr	r1, [r7, #12]
 800ceec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cef0:	4313      	orrs	r3, r2
 800cef2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cef4:	2300      	movs	r3, #0
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	3714      	adds	r7, #20
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr

0800cf02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cf02:	b480      	push	{r7}
 800cf04:	b087      	sub	sp, #28
 800cf06:	af00      	add	r7, sp, #0
 800cf08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf14:	689b      	ldr	r3, [r3, #8]
 800cf16:	f003 0306 	and.w	r3, r3, #6
 800cf1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d102      	bne.n	800cf28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cf22:	2300      	movs	r3, #0
 800cf24:	75fb      	strb	r3, [r7, #23]
 800cf26:	e00a      	b.n	800cf3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2b02      	cmp	r3, #2
 800cf2c:	d002      	beq.n	800cf34 <USB_GetDevSpeed+0x32>
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2b06      	cmp	r3, #6
 800cf32:	d102      	bne.n	800cf3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cf34:	2302      	movs	r3, #2
 800cf36:	75fb      	strb	r3, [r7, #23]
 800cf38:	e001      	b.n	800cf3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cf3a:	230f      	movs	r3, #15
 800cf3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	371c      	adds	r7, #28
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	781b      	ldrb	r3, [r3, #0]
 800cf5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	785b      	ldrb	r3, [r3, #1]
 800cf64:	2b01      	cmp	r3, #1
 800cf66:	d13a      	bne.n	800cfde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cf6e:	69da      	ldr	r2, [r3, #28]
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	781b      	ldrb	r3, [r3, #0]
 800cf74:	f003 030f 	and.w	r3, r3, #15
 800cf78:	2101      	movs	r1, #1
 800cf7a:	fa01 f303 	lsl.w	r3, r1, r3
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	68f9      	ldr	r1, [r7, #12]
 800cf82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cf86:	4313      	orrs	r3, r2
 800cf88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	015a      	lsls	r2, r3, #5
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	4413      	add	r3, r2
 800cf92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d155      	bne.n	800d04c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	015a      	lsls	r2, r3, #5
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfac:	681a      	ldr	r2, [r3, #0]
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	689b      	ldr	r3, [r3, #8]
 800cfb2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cfb6:	683b      	ldr	r3, [r7, #0]
 800cfb8:	78db      	ldrb	r3, [r3, #3]
 800cfba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	059b      	lsls	r3, r3, #22
 800cfc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800cfc4:	4313      	orrs	r3, r2
 800cfc6:	68ba      	ldr	r2, [r7, #8]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	68fa      	ldr	r2, [r7, #12]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfda:	6013      	str	r3, [r2, #0]
 800cfdc:	e036      	b.n	800d04c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cfe4:	69da      	ldr	r2, [r3, #28]
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	f003 030f 	and.w	r3, r3, #15
 800cfee:	2101      	movs	r1, #1
 800cff0:	fa01 f303 	lsl.w	r3, r1, r3
 800cff4:	041b      	lsls	r3, r3, #16
 800cff6:	68f9      	ldr	r1, [r7, #12]
 800cff8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cffc:	4313      	orrs	r3, r2
 800cffe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d000:	68bb      	ldr	r3, [r7, #8]
 800d002:	015a      	lsls	r2, r3, #5
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	4413      	add	r3, r2
 800d008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d11a      	bne.n	800d04c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	015a      	lsls	r2, r3, #5
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	4413      	add	r3, r2
 800d01e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	78db      	ldrb	r3, [r3, #3]
 800d030:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d032:	430b      	orrs	r3, r1
 800d034:	4313      	orrs	r3, r2
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	0151      	lsls	r1, r2, #5
 800d03a:	68fa      	ldr	r2, [r7, #12]
 800d03c:	440a      	add	r2, r1
 800d03e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d04a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d04c:	2300      	movs	r3, #0
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3714      	adds	r7, #20
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr
	...

0800d05c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b085      	sub	sp, #20
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
 800d064:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	785b      	ldrb	r3, [r3, #1]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d161      	bne.n	800d13c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	015a      	lsls	r2, r3, #5
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d08a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d08e:	d11f      	bne.n	800d0d0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	015a      	lsls	r2, r3, #5
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	4413      	add	r3, r2
 800d098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	0151      	lsls	r1, r2, #5
 800d0a2:	68fa      	ldr	r2, [r7, #12]
 800d0a4:	440a      	add	r2, r1
 800d0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d0ae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	015a      	lsls	r2, r3, #5
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	0151      	lsls	r1, r2, #5
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	440a      	add	r2, r1
 800d0c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d0ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	f003 030f 	and.w	r3, r3, #15
 800d0e0:	2101      	movs	r1, #1
 800d0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	43db      	mvns	r3, r3
 800d0ea:	68f9      	ldr	r1, [r7, #12]
 800d0ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0fa:	69da      	ldr	r2, [r3, #28]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	f003 030f 	and.w	r3, r3, #15
 800d104:	2101      	movs	r1, #1
 800d106:	fa01 f303 	lsl.w	r3, r1, r3
 800d10a:	b29b      	uxth	r3, r3
 800d10c:	43db      	mvns	r3, r3
 800d10e:	68f9      	ldr	r1, [r7, #12]
 800d110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d114:	4013      	ands	r3, r2
 800d116:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d118:	68bb      	ldr	r3, [r7, #8]
 800d11a:	015a      	lsls	r2, r3, #5
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d124:	681a      	ldr	r2, [r3, #0]
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	0159      	lsls	r1, r3, #5
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	440b      	add	r3, r1
 800d12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d132:	4619      	mov	r1, r3
 800d134:	4b35      	ldr	r3, [pc, #212]	; (800d20c <USB_DeactivateEndpoint+0x1b0>)
 800d136:	4013      	ands	r3, r2
 800d138:	600b      	str	r3, [r1, #0]
 800d13a:	e060      	b.n	800d1fe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	015a      	lsls	r2, r3, #5
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	4413      	add	r3, r2
 800d144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d14e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d152:	d11f      	bne.n	800d194 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	015a      	lsls	r2, r3, #5
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	4413      	add	r3, r2
 800d15c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68ba      	ldr	r2, [r7, #8]
 800d164:	0151      	lsls	r1, r2, #5
 800d166:	68fa      	ldr	r2, [r7, #12]
 800d168:	440a      	add	r2, r1
 800d16a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d16e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d172:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	015a      	lsls	r2, r3, #5
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	4413      	add	r3, r2
 800d17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68ba      	ldr	r2, [r7, #8]
 800d184:	0151      	lsls	r1, r2, #5
 800d186:	68fa      	ldr	r2, [r7, #12]
 800d188:	440a      	add	r2, r1
 800d18a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d18e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d192:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	f003 030f 	and.w	r3, r3, #15
 800d1a4:	2101      	movs	r1, #1
 800d1a6:	fa01 f303 	lsl.w	r3, r1, r3
 800d1aa:	041b      	lsls	r3, r3, #16
 800d1ac:	43db      	mvns	r3, r3
 800d1ae:	68f9      	ldr	r1, [r7, #12]
 800d1b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1be:	69da      	ldr	r2, [r3, #28]
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	781b      	ldrb	r3, [r3, #0]
 800d1c4:	f003 030f 	and.w	r3, r3, #15
 800d1c8:	2101      	movs	r1, #1
 800d1ca:	fa01 f303 	lsl.w	r3, r1, r3
 800d1ce:	041b      	lsls	r3, r3, #16
 800d1d0:	43db      	mvns	r3, r3
 800d1d2:	68f9      	ldr	r1, [r7, #12]
 800d1d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d1d8:	4013      	ands	r3, r2
 800d1da:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	015a      	lsls	r2, r3, #5
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	0159      	lsls	r1, r3, #5
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	440b      	add	r3, r1
 800d1f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	4b05      	ldr	r3, [pc, #20]	; (800d210 <USB_DeactivateEndpoint+0x1b4>)
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3714      	adds	r7, #20
 800d204:	46bd      	mov	sp, r7
 800d206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20a:	4770      	bx	lr
 800d20c:	ec337800 	.word	0xec337800
 800d210:	eff37800 	.word	0xeff37800

0800d214 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b08a      	sub	sp, #40	; 0x28
 800d218:	af02      	add	r7, sp, #8
 800d21a:	60f8      	str	r0, [r7, #12]
 800d21c:	60b9      	str	r1, [r7, #8]
 800d21e:	4613      	mov	r3, r2
 800d220:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	785b      	ldrb	r3, [r3, #1]
 800d230:	2b01      	cmp	r3, #1
 800d232:	f040 815c 	bne.w	800d4ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d236:	68bb      	ldr	r3, [r7, #8]
 800d238:	695b      	ldr	r3, [r3, #20]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d132      	bne.n	800d2a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	015a      	lsls	r2, r3, #5
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	4413      	add	r3, r2
 800d246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	69ba      	ldr	r2, [r7, #24]
 800d24e:	0151      	lsls	r1, r2, #5
 800d250:	69fa      	ldr	r2, [r7, #28]
 800d252:	440a      	add	r2, r1
 800d254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d258:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d25c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	015a      	lsls	r2, r3, #5
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	4413      	add	r3, r2
 800d26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	69ba      	ldr	r2, [r7, #24]
 800d272:	0151      	lsls	r1, r2, #5
 800d274:	69fa      	ldr	r2, [r7, #28]
 800d276:	440a      	add	r2, r1
 800d278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d27c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d280:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d282:	69bb      	ldr	r3, [r7, #24]
 800d284:	015a      	lsls	r2, r3, #5
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	4413      	add	r3, r2
 800d28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d28e:	691b      	ldr	r3, [r3, #16]
 800d290:	69ba      	ldr	r2, [r7, #24]
 800d292:	0151      	lsls	r1, r2, #5
 800d294:	69fa      	ldr	r2, [r7, #28]
 800d296:	440a      	add	r2, r1
 800d298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d29c:	0cdb      	lsrs	r3, r3, #19
 800d29e:	04db      	lsls	r3, r3, #19
 800d2a0:	6113      	str	r3, [r2, #16]
 800d2a2:	e074      	b.n	800d38e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d2a4:	69bb      	ldr	r3, [r7, #24]
 800d2a6:	015a      	lsls	r2, r3, #5
 800d2a8:	69fb      	ldr	r3, [r7, #28]
 800d2aa:	4413      	add	r3, r2
 800d2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2b0:	691b      	ldr	r3, [r3, #16]
 800d2b2:	69ba      	ldr	r2, [r7, #24]
 800d2b4:	0151      	lsls	r1, r2, #5
 800d2b6:	69fa      	ldr	r2, [r7, #28]
 800d2b8:	440a      	add	r2, r1
 800d2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2be:	0cdb      	lsrs	r3, r3, #19
 800d2c0:	04db      	lsls	r3, r3, #19
 800d2c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d2c4:	69bb      	ldr	r3, [r7, #24]
 800d2c6:	015a      	lsls	r2, r3, #5
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	69ba      	ldr	r2, [r7, #24]
 800d2d4:	0151      	lsls	r1, r2, #5
 800d2d6:	69fa      	ldr	r2, [r7, #28]
 800d2d8:	440a      	add	r2, r1
 800d2da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d2de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d2e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d2e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	015a      	lsls	r2, r3, #5
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	4413      	add	r3, r2
 800d2f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d2f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	6959      	ldr	r1, [r3, #20]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	440b      	add	r3, r1
 800d300:	1e59      	subs	r1, r3, #1
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	689b      	ldr	r3, [r3, #8]
 800d306:	fbb1 f3f3 	udiv	r3, r1, r3
 800d30a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d30c:	4b9d      	ldr	r3, [pc, #628]	; (800d584 <USB_EPStartXfer+0x370>)
 800d30e:	400b      	ands	r3, r1
 800d310:	69b9      	ldr	r1, [r7, #24]
 800d312:	0148      	lsls	r0, r1, #5
 800d314:	69f9      	ldr	r1, [r7, #28]
 800d316:	4401      	add	r1, r0
 800d318:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d31c:	4313      	orrs	r3, r2
 800d31e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d320:	69bb      	ldr	r3, [r7, #24]
 800d322:	015a      	lsls	r2, r3, #5
 800d324:	69fb      	ldr	r3, [r7, #28]
 800d326:	4413      	add	r3, r2
 800d328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d32c:	691a      	ldr	r2, [r3, #16]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d336:	69b9      	ldr	r1, [r7, #24]
 800d338:	0148      	lsls	r0, r1, #5
 800d33a:	69f9      	ldr	r1, [r7, #28]
 800d33c:	4401      	add	r1, r0
 800d33e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d342:	4313      	orrs	r3, r2
 800d344:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	78db      	ldrb	r3, [r3, #3]
 800d34a:	2b01      	cmp	r3, #1
 800d34c:	d11f      	bne.n	800d38e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d34e:	69bb      	ldr	r3, [r7, #24]
 800d350:	015a      	lsls	r2, r3, #5
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	4413      	add	r3, r2
 800d356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d35a:	691b      	ldr	r3, [r3, #16]
 800d35c:	69ba      	ldr	r2, [r7, #24]
 800d35e:	0151      	lsls	r1, r2, #5
 800d360:	69fa      	ldr	r2, [r7, #28]
 800d362:	440a      	add	r2, r1
 800d364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d368:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d36c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d36e:	69bb      	ldr	r3, [r7, #24]
 800d370:	015a      	lsls	r2, r3, #5
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	4413      	add	r3, r2
 800d376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d37a:	691b      	ldr	r3, [r3, #16]
 800d37c:	69ba      	ldr	r2, [r7, #24]
 800d37e:	0151      	lsls	r1, r2, #5
 800d380:	69fa      	ldr	r2, [r7, #28]
 800d382:	440a      	add	r2, r1
 800d384:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d388:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d38c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d38e:	79fb      	ldrb	r3, [r7, #7]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d14b      	bne.n	800d42c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	691b      	ldr	r3, [r3, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d009      	beq.n	800d3b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d39c:	69bb      	ldr	r3, [r7, #24]
 800d39e:	015a      	lsls	r2, r3, #5
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	691b      	ldr	r3, [r3, #16]
 800d3ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	78db      	ldrb	r3, [r3, #3]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d128      	bne.n	800d40a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d3b8:	69fb      	ldr	r3, [r7, #28]
 800d3ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d110      	bne.n	800d3ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d3c8:	69bb      	ldr	r3, [r7, #24]
 800d3ca:	015a      	lsls	r2, r3, #5
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	69ba      	ldr	r2, [r7, #24]
 800d3d8:	0151      	lsls	r1, r2, #5
 800d3da:	69fa      	ldr	r2, [r7, #28]
 800d3dc:	440a      	add	r2, r1
 800d3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3e6:	6013      	str	r3, [r2, #0]
 800d3e8:	e00f      	b.n	800d40a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	015a      	lsls	r2, r3, #5
 800d3ee:	69fb      	ldr	r3, [r7, #28]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	69ba      	ldr	r2, [r7, #24]
 800d3fa:	0151      	lsls	r1, r2, #5
 800d3fc:	69fa      	ldr	r2, [r7, #28]
 800d3fe:	440a      	add	r2, r1
 800d400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d408:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	015a      	lsls	r2, r3, #5
 800d40e:	69fb      	ldr	r3, [r7, #28]
 800d410:	4413      	add	r3, r2
 800d412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	69ba      	ldr	r2, [r7, #24]
 800d41a:	0151      	lsls	r1, r2, #5
 800d41c:	69fa      	ldr	r2, [r7, #28]
 800d41e:	440a      	add	r2, r1
 800d420:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d424:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d428:	6013      	str	r3, [r2, #0]
 800d42a:	e12f      	b.n	800d68c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d42c:	69bb      	ldr	r3, [r7, #24]
 800d42e:	015a      	lsls	r2, r3, #5
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	4413      	add	r3, r2
 800d434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	69ba      	ldr	r2, [r7, #24]
 800d43c:	0151      	lsls	r1, r2, #5
 800d43e:	69fa      	ldr	r2, [r7, #28]
 800d440:	440a      	add	r2, r1
 800d442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d446:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d44a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	78db      	ldrb	r3, [r3, #3]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d015      	beq.n	800d480 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	695b      	ldr	r3, [r3, #20]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f000 8117 	beq.w	800d68c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d45e:	69fb      	ldr	r3, [r7, #28]
 800d460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	f003 030f 	and.w	r3, r3, #15
 800d46e:	2101      	movs	r1, #1
 800d470:	fa01 f303 	lsl.w	r3, r1, r3
 800d474:	69f9      	ldr	r1, [r7, #28]
 800d476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d47a:	4313      	orrs	r3, r2
 800d47c:	634b      	str	r3, [r1, #52]	; 0x34
 800d47e:	e105      	b.n	800d68c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d486:	689b      	ldr	r3, [r3, #8]
 800d488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d110      	bne.n	800d4b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d490:	69bb      	ldr	r3, [r7, #24]
 800d492:	015a      	lsls	r2, r3, #5
 800d494:	69fb      	ldr	r3, [r7, #28]
 800d496:	4413      	add	r3, r2
 800d498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	69ba      	ldr	r2, [r7, #24]
 800d4a0:	0151      	lsls	r1, r2, #5
 800d4a2:	69fa      	ldr	r2, [r7, #28]
 800d4a4:	440a      	add	r2, r1
 800d4a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d4ae:	6013      	str	r3, [r2, #0]
 800d4b0:	e00f      	b.n	800d4d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d4b2:	69bb      	ldr	r3, [r7, #24]
 800d4b4:	015a      	lsls	r2, r3, #5
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	4413      	add	r3, r2
 800d4ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	69ba      	ldr	r2, [r7, #24]
 800d4c2:	0151      	lsls	r1, r2, #5
 800d4c4:	69fa      	ldr	r2, [r7, #28]
 800d4c6:	440a      	add	r2, r1
 800d4c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	68d9      	ldr	r1, [r3, #12]
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	781a      	ldrb	r2, [r3, #0]
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	695b      	ldr	r3, [r3, #20]
 800d4de:	b298      	uxth	r0, r3
 800d4e0:	79fb      	ldrb	r3, [r7, #7]
 800d4e2:	9300      	str	r3, [sp, #0]
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f000 fa2b 	bl	800d942 <USB_WritePacket>
 800d4ec:	e0ce      	b.n	800d68c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d4ee:	69bb      	ldr	r3, [r7, #24]
 800d4f0:	015a      	lsls	r2, r3, #5
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4fa:	691b      	ldr	r3, [r3, #16]
 800d4fc:	69ba      	ldr	r2, [r7, #24]
 800d4fe:	0151      	lsls	r1, r2, #5
 800d500:	69fa      	ldr	r2, [r7, #28]
 800d502:	440a      	add	r2, r1
 800d504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d508:	0cdb      	lsrs	r3, r3, #19
 800d50a:	04db      	lsls	r3, r3, #19
 800d50c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d50e:	69bb      	ldr	r3, [r7, #24]
 800d510:	015a      	lsls	r2, r3, #5
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	4413      	add	r3, r2
 800d516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	69ba      	ldr	r2, [r7, #24]
 800d51e:	0151      	lsls	r1, r2, #5
 800d520:	69fa      	ldr	r2, [r7, #28]
 800d522:	440a      	add	r2, r1
 800d524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d52c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d530:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d126      	bne.n	800d588 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	015a      	lsls	r2, r3, #5
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	4413      	add	r3, r2
 800d542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d546:	691a      	ldr	r2, [r3, #16]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	689b      	ldr	r3, [r3, #8]
 800d54c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d550:	69b9      	ldr	r1, [r7, #24]
 800d552:	0148      	lsls	r0, r1, #5
 800d554:	69f9      	ldr	r1, [r7, #28]
 800d556:	4401      	add	r1, r0
 800d558:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d55c:	4313      	orrs	r3, r2
 800d55e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d560:	69bb      	ldr	r3, [r7, #24]
 800d562:	015a      	lsls	r2, r3, #5
 800d564:	69fb      	ldr	r3, [r7, #28]
 800d566:	4413      	add	r3, r2
 800d568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d56c:	691b      	ldr	r3, [r3, #16]
 800d56e:	69ba      	ldr	r2, [r7, #24]
 800d570:	0151      	lsls	r1, r2, #5
 800d572:	69fa      	ldr	r2, [r7, #28]
 800d574:	440a      	add	r2, r1
 800d576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d57a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d57e:	6113      	str	r3, [r2, #16]
 800d580:	e036      	b.n	800d5f0 <USB_EPStartXfer+0x3dc>
 800d582:	bf00      	nop
 800d584:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d588:	68bb      	ldr	r3, [r7, #8]
 800d58a:	695a      	ldr	r2, [r3, #20]
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	4413      	add	r3, r2
 800d592:	1e5a      	subs	r2, r3, #1
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	fbb2 f3f3 	udiv	r3, r2, r3
 800d59c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	015a      	lsls	r2, r3, #5
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5aa:	691a      	ldr	r2, [r3, #16]
 800d5ac:	8afb      	ldrh	r3, [r7, #22]
 800d5ae:	04d9      	lsls	r1, r3, #19
 800d5b0:	4b39      	ldr	r3, [pc, #228]	; (800d698 <USB_EPStartXfer+0x484>)
 800d5b2:	400b      	ands	r3, r1
 800d5b4:	69b9      	ldr	r1, [r7, #24]
 800d5b6:	0148      	lsls	r0, r1, #5
 800d5b8:	69f9      	ldr	r1, [r7, #28]
 800d5ba:	4401      	add	r1, r0
 800d5bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d5c0:	4313      	orrs	r3, r2
 800d5c2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d5c4:	69bb      	ldr	r3, [r7, #24]
 800d5c6:	015a      	lsls	r2, r3, #5
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5d0:	691a      	ldr	r2, [r3, #16]
 800d5d2:	68bb      	ldr	r3, [r7, #8]
 800d5d4:	689b      	ldr	r3, [r3, #8]
 800d5d6:	8af9      	ldrh	r1, [r7, #22]
 800d5d8:	fb01 f303 	mul.w	r3, r1, r3
 800d5dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5e0:	69b9      	ldr	r1, [r7, #24]
 800d5e2:	0148      	lsls	r0, r1, #5
 800d5e4:	69f9      	ldr	r1, [r7, #28]
 800d5e6:	4401      	add	r1, r0
 800d5e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d5ec:	4313      	orrs	r3, r2
 800d5ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d5f0:	79fb      	ldrb	r3, [r7, #7]
 800d5f2:	2b01      	cmp	r3, #1
 800d5f4:	d10d      	bne.n	800d612 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	68db      	ldr	r3, [r3, #12]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d009      	beq.n	800d612 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	68d9      	ldr	r1, [r3, #12]
 800d602:	69bb      	ldr	r3, [r7, #24]
 800d604:	015a      	lsls	r2, r3, #5
 800d606:	69fb      	ldr	r3, [r7, #28]
 800d608:	4413      	add	r3, r2
 800d60a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d60e:	460a      	mov	r2, r1
 800d610:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	78db      	ldrb	r3, [r3, #3]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d128      	bne.n	800d66c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d61a:	69fb      	ldr	r3, [r7, #28]
 800d61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d626:	2b00      	cmp	r3, #0
 800d628:	d110      	bne.n	800d64c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	015a      	lsls	r2, r3, #5
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	4413      	add	r3, r2
 800d632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	69ba      	ldr	r2, [r7, #24]
 800d63a:	0151      	lsls	r1, r2, #5
 800d63c:	69fa      	ldr	r2, [r7, #28]
 800d63e:	440a      	add	r2, r1
 800d640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d644:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	e00f      	b.n	800d66c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d64c:	69bb      	ldr	r3, [r7, #24]
 800d64e:	015a      	lsls	r2, r3, #5
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	4413      	add	r3, r2
 800d654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	69ba      	ldr	r2, [r7, #24]
 800d65c:	0151      	lsls	r1, r2, #5
 800d65e:	69fa      	ldr	r2, [r7, #28]
 800d660:	440a      	add	r2, r1
 800d662:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d66a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d66c:	69bb      	ldr	r3, [r7, #24]
 800d66e:	015a      	lsls	r2, r3, #5
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	4413      	add	r3, r2
 800d674:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	69ba      	ldr	r2, [r7, #24]
 800d67c:	0151      	lsls	r1, r2, #5
 800d67e:	69fa      	ldr	r2, [r7, #28]
 800d680:	440a      	add	r2, r1
 800d682:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d686:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d68a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d68c:	2300      	movs	r3, #0
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3720      	adds	r7, #32
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	1ff80000 	.word	0x1ff80000

0800d69c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d69c:	b480      	push	{r7}
 800d69e:	b087      	sub	sp, #28
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	781b      	ldrb	r3, [r3, #0]
 800d6b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6b4:	68bb      	ldr	r3, [r7, #8]
 800d6b6:	785b      	ldrb	r3, [r3, #1]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	f040 80cd 	bne.w	800d858 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d6be:	68bb      	ldr	r3, [r7, #8]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d132      	bne.n	800d72c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	015a      	lsls	r2, r3, #5
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	4413      	add	r3, r2
 800d6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6d2:	691b      	ldr	r3, [r3, #16]
 800d6d4:	693a      	ldr	r2, [r7, #16]
 800d6d6:	0151      	lsls	r1, r2, #5
 800d6d8:	697a      	ldr	r2, [r7, #20]
 800d6da:	440a      	add	r2, r1
 800d6dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d6e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d6e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d6e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	015a      	lsls	r2, r3, #5
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	4413      	add	r3, r2
 800d6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	0151      	lsls	r1, r2, #5
 800d6fc:	697a      	ldr	r2, [r7, #20]
 800d6fe:	440a      	add	r2, r1
 800d700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d704:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d708:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	015a      	lsls	r2, r3, #5
 800d70e:	697b      	ldr	r3, [r7, #20]
 800d710:	4413      	add	r3, r2
 800d712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	693a      	ldr	r2, [r7, #16]
 800d71a:	0151      	lsls	r1, r2, #5
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	440a      	add	r2, r1
 800d720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d724:	0cdb      	lsrs	r3, r3, #19
 800d726:	04db      	lsls	r3, r3, #19
 800d728:	6113      	str	r3, [r2, #16]
 800d72a:	e04e      	b.n	800d7ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	015a      	lsls	r2, r3, #5
 800d730:	697b      	ldr	r3, [r7, #20]
 800d732:	4413      	add	r3, r2
 800d734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	693a      	ldr	r2, [r7, #16]
 800d73c:	0151      	lsls	r1, r2, #5
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	440a      	add	r2, r1
 800d742:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d746:	0cdb      	lsrs	r3, r3, #19
 800d748:	04db      	lsls	r3, r3, #19
 800d74a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	015a      	lsls	r2, r3, #5
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	4413      	add	r3, r2
 800d754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d758:	691b      	ldr	r3, [r3, #16]
 800d75a:	693a      	ldr	r2, [r7, #16]
 800d75c:	0151      	lsls	r1, r2, #5
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	440a      	add	r2, r1
 800d762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d766:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d76a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d76e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	695a      	ldr	r2, [r3, #20]
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	689b      	ldr	r3, [r3, #8]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d903      	bls.n	800d784 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	689a      	ldr	r2, [r3, #8]
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	015a      	lsls	r2, r3, #5
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	4413      	add	r3, r2
 800d78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d790:	691b      	ldr	r3, [r3, #16]
 800d792:	693a      	ldr	r2, [r7, #16]
 800d794:	0151      	lsls	r1, r2, #5
 800d796:	697a      	ldr	r2, [r7, #20]
 800d798:	440a      	add	r2, r1
 800d79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d79e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d7a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	015a      	lsls	r2, r3, #5
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7b0:	691a      	ldr	r2, [r3, #16]
 800d7b2:	68bb      	ldr	r3, [r7, #8]
 800d7b4:	695b      	ldr	r3, [r3, #20]
 800d7b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d7ba:	6939      	ldr	r1, [r7, #16]
 800d7bc:	0148      	lsls	r0, r1, #5
 800d7be:	6979      	ldr	r1, [r7, #20]
 800d7c0:	4401      	add	r1, r0
 800d7c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d7ca:	79fb      	ldrb	r3, [r7, #7]
 800d7cc:	2b01      	cmp	r3, #1
 800d7ce:	d11e      	bne.n	800d80e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	691b      	ldr	r3, [r3, #16]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d009      	beq.n	800d7ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	691b      	ldr	r3, [r3, #16]
 800d7ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	015a      	lsls	r2, r3, #5
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	693a      	ldr	r2, [r7, #16]
 800d7fc:	0151      	lsls	r1, r2, #5
 800d7fe:	697a      	ldr	r2, [r7, #20]
 800d800:	440a      	add	r2, r1
 800d802:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d806:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d80a:	6013      	str	r3, [r2, #0]
 800d80c:	e092      	b.n	800d934 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	015a      	lsls	r2, r3, #5
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	4413      	add	r3, r2
 800d816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	0151      	lsls	r1, r2, #5
 800d820:	697a      	ldr	r2, [r7, #20]
 800d822:	440a      	add	r2, r1
 800d824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d828:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d82c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d07e      	beq.n	800d934 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d83c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	f003 030f 	and.w	r3, r3, #15
 800d846:	2101      	movs	r1, #1
 800d848:	fa01 f303 	lsl.w	r3, r1, r3
 800d84c:	6979      	ldr	r1, [r7, #20]
 800d84e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d852:	4313      	orrs	r3, r2
 800d854:	634b      	str	r3, [r1, #52]	; 0x34
 800d856:	e06d      	b.n	800d934 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d858:	693b      	ldr	r3, [r7, #16]
 800d85a:	015a      	lsls	r2, r3, #5
 800d85c:	697b      	ldr	r3, [r7, #20]
 800d85e:	4413      	add	r3, r2
 800d860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d864:	691b      	ldr	r3, [r3, #16]
 800d866:	693a      	ldr	r2, [r7, #16]
 800d868:	0151      	lsls	r1, r2, #5
 800d86a:	697a      	ldr	r2, [r7, #20]
 800d86c:	440a      	add	r2, r1
 800d86e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d872:	0cdb      	lsrs	r3, r3, #19
 800d874:	04db      	lsls	r3, r3, #19
 800d876:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	015a      	lsls	r2, r3, #5
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	4413      	add	r3, r2
 800d880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d884:	691b      	ldr	r3, [r3, #16]
 800d886:	693a      	ldr	r2, [r7, #16]
 800d888:	0151      	lsls	r1, r2, #5
 800d88a:	697a      	ldr	r2, [r7, #20]
 800d88c:	440a      	add	r2, r1
 800d88e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d892:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d896:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d89a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	695b      	ldr	r3, [r3, #20]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d003      	beq.n	800d8ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	015a      	lsls	r2, r3, #5
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	4413      	add	r3, r2
 800d8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8b8:	691b      	ldr	r3, [r3, #16]
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	0151      	lsls	r1, r2, #5
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	440a      	add	r2, r1
 800d8c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d8ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8d8:	691a      	ldr	r2, [r3, #16]
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d8e2:	6939      	ldr	r1, [r7, #16]
 800d8e4:	0148      	lsls	r0, r1, #5
 800d8e6:	6979      	ldr	r1, [r7, #20]
 800d8e8:	4401      	add	r1, r0
 800d8ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d8f2:	79fb      	ldrb	r3, [r7, #7]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d10d      	bne.n	800d914 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d009      	beq.n	800d914 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	68d9      	ldr	r1, [r3, #12]
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	015a      	lsls	r2, r3, #5
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	4413      	add	r3, r2
 800d90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d910:	460a      	mov	r2, r1
 800d912:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d914:	693b      	ldr	r3, [r7, #16]
 800d916:	015a      	lsls	r2, r3, #5
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	4413      	add	r3, r2
 800d91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	693a      	ldr	r2, [r7, #16]
 800d924:	0151      	lsls	r1, r2, #5
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	440a      	add	r2, r1
 800d92a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d92e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d932:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	371c      	adds	r7, #28
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d942:	b480      	push	{r7}
 800d944:	b089      	sub	sp, #36	; 0x24
 800d946:	af00      	add	r7, sp, #0
 800d948:	60f8      	str	r0, [r7, #12]
 800d94a:	60b9      	str	r1, [r7, #8]
 800d94c:	4611      	mov	r1, r2
 800d94e:	461a      	mov	r2, r3
 800d950:	460b      	mov	r3, r1
 800d952:	71fb      	strb	r3, [r7, #7]
 800d954:	4613      	mov	r3, r2
 800d956:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d960:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d964:	2b00      	cmp	r3, #0
 800d966:	d123      	bne.n	800d9b0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d968:	88bb      	ldrh	r3, [r7, #4]
 800d96a:	3303      	adds	r3, #3
 800d96c:	089b      	lsrs	r3, r3, #2
 800d96e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d970:	2300      	movs	r3, #0
 800d972:	61bb      	str	r3, [r7, #24]
 800d974:	e018      	b.n	800d9a8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d976:	79fb      	ldrb	r3, [r7, #7]
 800d978:	031a      	lsls	r2, r3, #12
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	4413      	add	r3, r2
 800d97e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d982:	461a      	mov	r2, r3
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	3301      	adds	r3, #1
 800d98e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d990:	69fb      	ldr	r3, [r7, #28]
 800d992:	3301      	adds	r3, #1
 800d994:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	3301      	adds	r3, #1
 800d99a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d99c:	69fb      	ldr	r3, [r7, #28]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d9a2:	69bb      	ldr	r3, [r7, #24]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	61bb      	str	r3, [r7, #24]
 800d9a8:	69ba      	ldr	r2, [r7, #24]
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d3e2      	bcc.n	800d976 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3724      	adds	r7, #36	; 0x24
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b08b      	sub	sp, #44	; 0x2c
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	60f8      	str	r0, [r7, #12]
 800d9c6:	60b9      	str	r1, [r7, #8]
 800d9c8:	4613      	mov	r3, r2
 800d9ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d9d0:	68bb      	ldr	r3, [r7, #8]
 800d9d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d9d4:	88fb      	ldrh	r3, [r7, #6]
 800d9d6:	089b      	lsrs	r3, r3, #2
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d9dc:	88fb      	ldrh	r3, [r7, #6]
 800d9de:	f003 0303 	and.w	r3, r3, #3
 800d9e2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	623b      	str	r3, [r7, #32]
 800d9e8:	e014      	b.n	800da14 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d9ea:	69bb      	ldr	r3, [r7, #24]
 800d9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f4:	601a      	str	r2, [r3, #0]
    pDest++;
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d9fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9fe:	3301      	adds	r3, #1
 800da00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800da02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da04:	3301      	adds	r3, #1
 800da06:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800da08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0a:	3301      	adds	r3, #1
 800da0c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	3301      	adds	r3, #1
 800da12:	623b      	str	r3, [r7, #32]
 800da14:	6a3a      	ldr	r2, [r7, #32]
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	429a      	cmp	r2, r3
 800da1a:	d3e6      	bcc.n	800d9ea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800da1c:	8bfb      	ldrh	r3, [r7, #30]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d01e      	beq.n	800da60 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800da22:	2300      	movs	r3, #0
 800da24:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800da2c:	461a      	mov	r2, r3
 800da2e:	f107 0310 	add.w	r3, r7, #16
 800da32:	6812      	ldr	r2, [r2, #0]
 800da34:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800da36:	693a      	ldr	r2, [r7, #16]
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	00db      	lsls	r3, r3, #3
 800da3e:	fa22 f303 	lsr.w	r3, r2, r3
 800da42:	b2da      	uxtb	r2, r3
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	701a      	strb	r2, [r3, #0]
      i++;
 800da48:	6a3b      	ldr	r3, [r7, #32]
 800da4a:	3301      	adds	r3, #1
 800da4c:	623b      	str	r3, [r7, #32]
      pDest++;
 800da4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da50:	3301      	adds	r3, #1
 800da52:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800da54:	8bfb      	ldrh	r3, [r7, #30]
 800da56:	3b01      	subs	r3, #1
 800da58:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800da5a:	8bfb      	ldrh	r3, [r7, #30]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1ea      	bne.n	800da36 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800da60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da62:	4618      	mov	r0, r3
 800da64:	372c      	adds	r7, #44	; 0x2c
 800da66:	46bd      	mov	sp, r7
 800da68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6c:	4770      	bx	lr

0800da6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800da6e:	b480      	push	{r7}
 800da70:	b085      	sub	sp, #20
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	781b      	ldrb	r3, [r3, #0]
 800da80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	785b      	ldrb	r3, [r3, #1]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d12c      	bne.n	800dae4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800da8a:	68bb      	ldr	r3, [r7, #8]
 800da8c:	015a      	lsls	r2, r3, #5
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	4413      	add	r3, r2
 800da92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	db12      	blt.n	800dac2 <USB_EPSetStall+0x54>
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d00f      	beq.n	800dac2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	015a      	lsls	r2, r3, #5
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	4413      	add	r3, r2
 800daaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	0151      	lsls	r1, r2, #5
 800dab4:	68fa      	ldr	r2, [r7, #12]
 800dab6:	440a      	add	r2, r1
 800dab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dabc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dac0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	015a      	lsls	r2, r3, #5
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	4413      	add	r3, r2
 800daca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	0151      	lsls	r1, r2, #5
 800dad4:	68fa      	ldr	r2, [r7, #12]
 800dad6:	440a      	add	r2, r1
 800dad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dadc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dae0:	6013      	str	r3, [r2, #0]
 800dae2:	e02b      	b.n	800db3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	015a      	lsls	r2, r3, #5
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	4413      	add	r3, r2
 800daec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	db12      	blt.n	800db1c <USB_EPSetStall+0xae>
 800daf6:	68bb      	ldr	r3, [r7, #8]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d00f      	beq.n	800db1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	015a      	lsls	r2, r3, #5
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	4413      	add	r3, r2
 800db04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	0151      	lsls	r1, r2, #5
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	440a      	add	r2, r1
 800db12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800db1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	015a      	lsls	r2, r3, #5
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	4413      	add	r3, r2
 800db24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	0151      	lsls	r1, r2, #5
 800db2e:	68fa      	ldr	r2, [r7, #12]
 800db30:	440a      	add	r2, r1
 800db32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800db3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3714      	adds	r7, #20
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800db4a:	b480      	push	{r7}
 800db4c:	b085      	sub	sp, #20
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	785b      	ldrb	r3, [r3, #1]
 800db62:	2b01      	cmp	r3, #1
 800db64:	d128      	bne.n	800dbb8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	015a      	lsls	r2, r3, #5
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	4413      	add	r3, r2
 800db6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68ba      	ldr	r2, [r7, #8]
 800db76:	0151      	lsls	r1, r2, #5
 800db78:	68fa      	ldr	r2, [r7, #12]
 800db7a:	440a      	add	r2, r1
 800db7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800db84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	78db      	ldrb	r3, [r3, #3]
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d003      	beq.n	800db96 <USB_EPClearStall+0x4c>
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	78db      	ldrb	r3, [r3, #3]
 800db92:	2b02      	cmp	r3, #2
 800db94:	d138      	bne.n	800dc08 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	015a      	lsls	r2, r3, #5
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	4413      	add	r3, r2
 800db9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	0151      	lsls	r1, r2, #5
 800dba8:	68fa      	ldr	r2, [r7, #12]
 800dbaa:	440a      	add	r2, r1
 800dbac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbb4:	6013      	str	r3, [r2, #0]
 800dbb6:	e027      	b.n	800dc08 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	015a      	lsls	r2, r3, #5
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	68ba      	ldr	r2, [r7, #8]
 800dbc8:	0151      	lsls	r1, r2, #5
 800dbca:	68fa      	ldr	r2, [r7, #12]
 800dbcc:	440a      	add	r2, r1
 800dbce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800dbd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	78db      	ldrb	r3, [r3, #3]
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d003      	beq.n	800dbe8 <USB_EPClearStall+0x9e>
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	78db      	ldrb	r3, [r3, #3]
 800dbe4:	2b02      	cmp	r3, #2
 800dbe6:	d10f      	bne.n	800dc08 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	015a      	lsls	r2, r3, #5
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	4413      	add	r3, r2
 800dbf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	68ba      	ldr	r2, [r7, #8]
 800dbf8:	0151      	lsls	r1, r2, #5
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	440a      	add	r2, r1
 800dbfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dc06:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr

0800dc16 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800dc16:	b480      	push	{r7}
 800dc18:	b085      	sub	sp, #20
 800dc1a:	af00      	add	r7, sp, #0
 800dc1c:	6078      	str	r0, [r7, #4]
 800dc1e:	460b      	mov	r3, r1
 800dc20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	68fa      	ldr	r2, [r7, #12]
 800dc30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc34:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800dc38:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	78fb      	ldrb	r3, [r7, #3]
 800dc44:	011b      	lsls	r3, r3, #4
 800dc46:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800dc4a:	68f9      	ldr	r1, [r7, #12]
 800dc4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dc50:	4313      	orrs	r3, r2
 800dc52:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3714      	adds	r7, #20
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc60:	4770      	bx	lr

0800dc62 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dc62:	b480      	push	{r7}
 800dc64:	b085      	sub	sp, #20
 800dc66:	af00      	add	r7, sp, #0
 800dc68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	68fa      	ldr	r2, [r7, #12]
 800dc78:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc7c:	f023 0303 	bic.w	r3, r3, #3
 800dc80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	68fa      	ldr	r2, [r7, #12]
 800dc8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc90:	f023 0302 	bic.w	r3, r3, #2
 800dc94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dc96:	2300      	movs	r3, #0
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	3714      	adds	r7, #20
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr

0800dca4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800dca4:	b480      	push	{r7}
 800dca6:	b085      	sub	sp, #20
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dcbe:	f023 0303 	bic.w	r3, r3, #3
 800dcc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dcd2:	f043 0302 	orr.w	r3, r3, #2
 800dcd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dcd8:	2300      	movs	r3, #0
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3714      	adds	r7, #20
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr

0800dce6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800dce6:	b480      	push	{r7}
 800dce8:	b085      	sub	sp, #20
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	695b      	ldr	r3, [r3, #20]
 800dcf2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	699b      	ldr	r3, [r3, #24]
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4013      	ands	r3, r2
 800dcfc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	3714      	adds	r7, #20
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr

0800dd0c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd1e:	699b      	ldr	r3, [r3, #24]
 800dd20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd28:	69db      	ldr	r3, [r3, #28]
 800dd2a:	68ba      	ldr	r2, [r7, #8]
 800dd2c:	4013      	ands	r3, r2
 800dd2e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	0c1b      	lsrs	r3, r3, #16
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd52:	699b      	ldr	r3, [r3, #24]
 800dd54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	4013      	ands	r3, r2
 800dd62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	b29b      	uxth	r3, r3
}
 800dd68:	4618      	mov	r0, r3
 800dd6a:	3714      	adds	r7, #20
 800dd6c:	46bd      	mov	sp, r7
 800dd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd72:	4770      	bx	lr

0800dd74 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dd74:	b480      	push	{r7}
 800dd76:	b085      	sub	sp, #20
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800dd84:	78fb      	ldrb	r3, [r7, #3]
 800dd86:	015a      	lsls	r2, r3, #5
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	4413      	add	r3, r2
 800dd8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd9a:	695b      	ldr	r3, [r3, #20]
 800dd9c:	68ba      	ldr	r2, [r7, #8]
 800dd9e:	4013      	ands	r3, r2
 800dda0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dda2:	68bb      	ldr	r3, [r7, #8]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b087      	sub	sp, #28
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddc6:	691b      	ldr	r3, [r3, #16]
 800ddc8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ddd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddd2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ddd4:	78fb      	ldrb	r3, [r7, #3]
 800ddd6:	f003 030f 	and.w	r3, r3, #15
 800ddda:	68fa      	ldr	r2, [r7, #12]
 800dddc:	fa22 f303 	lsr.w	r3, r2, r3
 800dde0:	01db      	lsls	r3, r3, #7
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	693a      	ldr	r2, [r7, #16]
 800dde6:	4313      	orrs	r3, r2
 800dde8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ddea:	78fb      	ldrb	r3, [r7, #3]
 800ddec:	015a      	lsls	r2, r3, #5
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ddf6:	689b      	ldr	r3, [r3, #8]
 800ddf8:	693a      	ldr	r2, [r7, #16]
 800ddfa:	4013      	ands	r3, r2
 800ddfc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
}
 800de00:	4618      	mov	r0, r3
 800de02:	371c      	adds	r7, #28
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	695b      	ldr	r3, [r3, #20]
 800de18:	f003 0301 	and.w	r3, r3, #1
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr

0800de28 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800de28:	b480      	push	{r7}
 800de2a:	b085      	sub	sp, #20
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68fa      	ldr	r2, [r7, #12]
 800de3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800de42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800de46:	f023 0307 	bic.w	r3, r3, #7
 800de4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	68fa      	ldr	r2, [r7, #12]
 800de56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
	...

0800de70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800de70:	b480      	push	{r7}
 800de72:	b087      	sub	sp, #28
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	460b      	mov	r3, r1
 800de7a:	607a      	str	r2, [r7, #4]
 800de7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	333c      	adds	r3, #60	; 0x3c
 800de86:	3304      	adds	r3, #4
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	4a26      	ldr	r2, [pc, #152]	; (800df28 <USB_EP0_OutStart+0xb8>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d90a      	bls.n	800deaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800de94:	697b      	ldr	r3, [r7, #20]
 800de96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dea0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dea4:	d101      	bne.n	800deaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dea6:	2300      	movs	r3, #0
 800dea8:	e037      	b.n	800df1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800deaa:	697b      	ldr	r3, [r7, #20]
 800deac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800deb0:	461a      	mov	r2, r3
 800deb2:	2300      	movs	r3, #0
 800deb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800debc:	691b      	ldr	r3, [r3, #16]
 800debe:	697a      	ldr	r2, [r7, #20]
 800dec0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dec4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ded0:	691b      	ldr	r3, [r3, #16]
 800ded2:	697a      	ldr	r2, [r7, #20]
 800ded4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ded8:	f043 0318 	orr.w	r3, r3, #24
 800dedc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dede:	697b      	ldr	r3, [r7, #20]
 800dee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dee4:	691b      	ldr	r3, [r3, #16]
 800dee6:	697a      	ldr	r2, [r7, #20]
 800dee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800deec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800def0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800def2:	7afb      	ldrb	r3, [r7, #11]
 800def4:	2b01      	cmp	r3, #1
 800def6:	d10f      	bne.n	800df18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800defe:	461a      	mov	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	697a      	ldr	r2, [r7, #20]
 800df0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800df12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800df16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df18:	2300      	movs	r3, #0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	371c      	adds	r7, #28
 800df1e:	46bd      	mov	sp, r7
 800df20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df24:	4770      	bx	lr
 800df26:	bf00      	nop
 800df28:	4f54300a 	.word	0x4f54300a

0800df2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800df2c:	b480      	push	{r7}
 800df2e:	b085      	sub	sp, #20
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df34:	2300      	movs	r3, #0
 800df36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]
 800df3e:	4a13      	ldr	r2, [pc, #76]	; (800df8c <USB_CoreReset+0x60>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d901      	bls.n	800df48 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800df44:	2303      	movs	r3, #3
 800df46:	e01a      	b.n	800df7e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	daf3      	bge.n	800df38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	691b      	ldr	r3, [r3, #16]
 800df58:	f043 0201 	orr.w	r2, r3, #1
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	3301      	adds	r3, #1
 800df64:	60fb      	str	r3, [r7, #12]
 800df66:	4a09      	ldr	r2, [pc, #36]	; (800df8c <USB_CoreReset+0x60>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d901      	bls.n	800df70 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800df6c:	2303      	movs	r3, #3
 800df6e:	e006      	b.n	800df7e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	f003 0301 	and.w	r3, r3, #1
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d0f1      	beq.n	800df60 <USB_CoreReset+0x34>

  return HAL_OK;
 800df7c:	2300      	movs	r3, #0
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3714      	adds	r7, #20
 800df82:	46bd      	mov	sp, r7
 800df84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df88:	4770      	bx	lr
 800df8a:	bf00      	nop
 800df8c:	00030d40 	.word	0x00030d40

0800df90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800df94:	4904      	ldr	r1, [pc, #16]	; (800dfa8 <MX_FATFS_Init+0x18>)
 800df96:	4805      	ldr	r0, [pc, #20]	; (800dfac <MX_FATFS_Init+0x1c>)
 800df98:	f004 ff38 	bl	8012e0c <FATFS_LinkDriver>
 800df9c:	4603      	mov	r3, r0
 800df9e:	461a      	mov	r2, r3
 800dfa0:	4b03      	ldr	r3, [pc, #12]	; (800dfb0 <MX_FATFS_Init+0x20>)
 800dfa2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dfa4:	bf00      	nop
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20010ff4 	.word	0x20010ff4
 800dfac:	2000003c 	.word	0x2000003c
 800dfb0:	20010ff8 	.word	0x20010ff8

0800dfb4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dfb8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	4603      	mov	r3, r0
 800dfcc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800dfce:	79fb      	ldrb	r3, [r7, #7]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7f4 fa07 	bl	80023e4 <SD_disk_initialize>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b082      	sub	sp, #8
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	4603      	mov	r3, r0
 800dfea:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7f4 fae2 	bl	80025b8 <SD_disk_status>
 800dff4:	4603      	mov	r3, r0
 800dff6:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3708      	adds	r7, #8
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b084      	sub	sp, #16
 800e004:	af00      	add	r7, sp, #0
 800e006:	60b9      	str	r1, [r7, #8]
 800e008:	607a      	str	r2, [r7, #4]
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800e010:	7bf8      	ldrb	r0, [r7, #15]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	68b9      	ldr	r1, [r7, #8]
 800e018:	f7f4 fae4 	bl	80025e4 <SD_disk_read>
 800e01c:	4603      	mov	r3, r0
 800e01e:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800e020:	4618      	mov	r0, r3
 800e022:	3710      	adds	r7, #16
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	60b9      	str	r1, [r7, #8]
 800e030:	607a      	str	r2, [r7, #4]
 800e032:	603b      	str	r3, [r7, #0]
 800e034:	4603      	mov	r3, r0
 800e036:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800e038:	7bf8      	ldrb	r0, [r7, #15]
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	68b9      	ldr	r1, [r7, #8]
 800e040:	f7f4 fb3a 	bl	80026b8 <SD_disk_write>
 800e044:	4603      	mov	r3, r0
 800e046:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800e048:	4618      	mov	r0, r3
 800e04a:	3710      	adds	r7, #16
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b082      	sub	sp, #8
 800e054:	af00      	add	r7, sp, #0
 800e056:	4603      	mov	r3, r0
 800e058:	603a      	str	r2, [r7, #0]
 800e05a:	71fb      	strb	r3, [r7, #7]
 800e05c:	460b      	mov	r3, r1
 800e05e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800e060:	79fb      	ldrb	r3, [r7, #7]
 800e062:	79b9      	ldrb	r1, [r7, #6]
 800e064:	683a      	ldr	r2, [r7, #0]
 800e066:	4618      	mov	r0, r3
 800e068:	f7f4 fbaa 	bl	80027c0 <SD_disk_ioctl>
 800e06c:	4603      	mov	r3, r0
 800e06e:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	460b      	mov	r3, r1
 800e082:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e084:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e088:	f009 fc50 	bl	801792c <USBD_static_malloc>
 800e08c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d105      	bne.n	800e0a0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e09c:	2302      	movs	r3, #2
 800e09e:	e066      	b.n	800e16e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	68fa      	ldr	r2, [r7, #12]
 800e0a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	7c1b      	ldrb	r3, [r3, #16]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d119      	bne.n	800e0e4 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e0b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0b4:	2202      	movs	r2, #2
 800e0b6:	2181      	movs	r1, #129	; 0x81
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f009 fb14 	bl	80176e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e0c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0c8:	2202      	movs	r2, #2
 800e0ca:	2101      	movs	r1, #1
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f009 fb0a 	bl	80176e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2201      	movs	r2, #1
 800e0d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2210      	movs	r2, #16
 800e0de:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e0e2:	e016      	b.n	800e112 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e0e4:	2340      	movs	r3, #64	; 0x40
 800e0e6:	2202      	movs	r2, #2
 800e0e8:	2181      	movs	r1, #129	; 0x81
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f009 fafb 	bl	80176e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e0f6:	2340      	movs	r3, #64	; 0x40
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	2101      	movs	r1, #1
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f009 faf2 	bl	80176e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2201      	movs	r2, #1
 800e106:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2210      	movs	r2, #16
 800e10e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e112:	2308      	movs	r3, #8
 800e114:	2203      	movs	r2, #3
 800e116:	2182      	movs	r1, #130	; 0x82
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f009 fae4 	bl	80176e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	2200      	movs	r2, #0
 800e134:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2200      	movs	r2, #0
 800e13c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	7c1b      	ldrb	r3, [r3, #16]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d109      	bne.n	800e15c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e14e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e152:	2101      	movs	r1, #1
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f009 fbb5 	bl	80178c4 <USBD_LL_PrepareReceive>
 800e15a:	e007      	b.n	800e16c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e162:	2340      	movs	r3, #64	; 0x40
 800e164:	2101      	movs	r1, #1
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f009 fbac 	bl	80178c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e16c:	2300      	movs	r3, #0
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
 800e17e:	460b      	mov	r3, r1
 800e180:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e182:	2181      	movs	r1, #129	; 0x81
 800e184:	6878      	ldr	r0, [r7, #4]
 800e186:	f009 fad4 	bl	8017732 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	2200      	movs	r2, #0
 800e18e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e190:	2101      	movs	r1, #1
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f009 facd 	bl	8017732 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e1a0:	2182      	movs	r1, #130	; 0x82
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f009 fac5 	bl	8017732 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00e      	beq.n	800e1e0 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1c8:	685b      	ldr	r3, [r3, #4]
 800e1ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f009 fbb8 	bl	8017948 <USBD_static_free>
    pdev->pClassData = NULL;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e1e0:	2300      	movs	r3, #0
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3708      	adds	r7, #8
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
	...

0800e1ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b086      	sub	sp, #24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1fc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e1fe:	2300      	movs	r3, #0
 800e200:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e202:	2300      	movs	r3, #0
 800e204:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e206:	2300      	movs	r3, #0
 800e208:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d101      	bne.n	800e214 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e210:	2303      	movs	r3, #3
 800e212:	e0af      	b.n	800e374 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	781b      	ldrb	r3, [r3, #0]
 800e218:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d03f      	beq.n	800e2a0 <USBD_CDC_Setup+0xb4>
 800e220:	2b20      	cmp	r3, #32
 800e222:	f040 809f 	bne.w	800e364 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	88db      	ldrh	r3, [r3, #6]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d02e      	beq.n	800e28c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	b25b      	sxtb	r3, r3
 800e234:	2b00      	cmp	r3, #0
 800e236:	da16      	bge.n	800e266 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	683a      	ldr	r2, [r7, #0]
 800e242:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e244:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e246:	683a      	ldr	r2, [r7, #0]
 800e248:	88d2      	ldrh	r2, [r2, #6]
 800e24a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	88db      	ldrh	r3, [r3, #6]
 800e250:	2b07      	cmp	r3, #7
 800e252:	bf28      	it	cs
 800e254:	2307      	movcs	r3, #7
 800e256:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	89fa      	ldrh	r2, [r7, #14]
 800e25c:	4619      	mov	r1, r3
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f001 fb19 	bl	800f896 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e264:	e085      	b.n	800e372 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	785a      	ldrb	r2, [r3, #1]
 800e26a:	693b      	ldr	r3, [r7, #16]
 800e26c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	88db      	ldrh	r3, [r3, #6]
 800e274:	b2da      	uxtb	r2, r3
 800e276:	693b      	ldr	r3, [r7, #16]
 800e278:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e27c:	6939      	ldr	r1, [r7, #16]
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	88db      	ldrh	r3, [r3, #6]
 800e282:	461a      	mov	r2, r3
 800e284:	6878      	ldr	r0, [r7, #4]
 800e286:	f001 fb32 	bl	800f8ee <USBD_CtlPrepareRx>
      break;
 800e28a:	e072      	b.n	800e372 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	7850      	ldrb	r0, [r2, #1]
 800e298:	2200      	movs	r2, #0
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	4798      	blx	r3
      break;
 800e29e:	e068      	b.n	800e372 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2a0:	683b      	ldr	r3, [r7, #0]
 800e2a2:	785b      	ldrb	r3, [r3, #1]
 800e2a4:	2b0b      	cmp	r3, #11
 800e2a6:	d852      	bhi.n	800e34e <USBD_CDC_Setup+0x162>
 800e2a8:	a201      	add	r2, pc, #4	; (adr r2, 800e2b0 <USBD_CDC_Setup+0xc4>)
 800e2aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ae:	bf00      	nop
 800e2b0:	0800e2e1 	.word	0x0800e2e1
 800e2b4:	0800e35d 	.word	0x0800e35d
 800e2b8:	0800e34f 	.word	0x0800e34f
 800e2bc:	0800e34f 	.word	0x0800e34f
 800e2c0:	0800e34f 	.word	0x0800e34f
 800e2c4:	0800e34f 	.word	0x0800e34f
 800e2c8:	0800e34f 	.word	0x0800e34f
 800e2cc:	0800e34f 	.word	0x0800e34f
 800e2d0:	0800e34f 	.word	0x0800e34f
 800e2d4:	0800e34f 	.word	0x0800e34f
 800e2d8:	0800e30b 	.word	0x0800e30b
 800e2dc:	0800e335 	.word	0x0800e335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2e6:	b2db      	uxtb	r3, r3
 800e2e8:	2b03      	cmp	r3, #3
 800e2ea:	d107      	bne.n	800e2fc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e2ec:	f107 030a 	add.w	r3, r7, #10
 800e2f0:	2202      	movs	r2, #2
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f001 face 	bl	800f896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e2fa:	e032      	b.n	800e362 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e2fc:	6839      	ldr	r1, [r7, #0]
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f001 fa58 	bl	800f7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800e304:	2303      	movs	r3, #3
 800e306:	75fb      	strb	r3, [r7, #23]
          break;
 800e308:	e02b      	b.n	800e362 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e310:	b2db      	uxtb	r3, r3
 800e312:	2b03      	cmp	r3, #3
 800e314:	d107      	bne.n	800e326 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e316:	f107 030d 	add.w	r3, r7, #13
 800e31a:	2201      	movs	r2, #1
 800e31c:	4619      	mov	r1, r3
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f001 fab9 	bl	800f896 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e324:	e01d      	b.n	800e362 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f001 fa43 	bl	800f7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800e32e:	2303      	movs	r3, #3
 800e330:	75fb      	strb	r3, [r7, #23]
          break;
 800e332:	e016      	b.n	800e362 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	2b03      	cmp	r3, #3
 800e33e:	d00f      	beq.n	800e360 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f001 fa36 	bl	800f7b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800e348:	2303      	movs	r3, #3
 800e34a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e34c:	e008      	b.n	800e360 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e34e:	6839      	ldr	r1, [r7, #0]
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f001 fa2f 	bl	800f7b4 <USBD_CtlError>
          ret = USBD_FAIL;
 800e356:	2303      	movs	r3, #3
 800e358:	75fb      	strb	r3, [r7, #23]
          break;
 800e35a:	e002      	b.n	800e362 <USBD_CDC_Setup+0x176>
          break;
 800e35c:	bf00      	nop
 800e35e:	e008      	b.n	800e372 <USBD_CDC_Setup+0x186>
          break;
 800e360:	bf00      	nop
      }
      break;
 800e362:	e006      	b.n	800e372 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e364:	6839      	ldr	r1, [r7, #0]
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f001 fa24 	bl	800f7b4 <USBD_CtlError>
      ret = USBD_FAIL;
 800e36c:	2303      	movs	r3, #3
 800e36e:	75fb      	strb	r3, [r7, #23]
      break;
 800e370:	bf00      	nop
  }

  return (uint8_t)ret;
 800e372:	7dfb      	ldrb	r3, [r7, #23]
}
 800e374:	4618      	mov	r0, r3
 800e376:	3718      	adds	r7, #24
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}

0800e37c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
 800e382:	6078      	str	r0, [r7, #4]
 800e384:	460b      	mov	r3, r1
 800e386:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e38e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e396:	2b00      	cmp	r3, #0
 800e398:	d101      	bne.n	800e39e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e04f      	b.n	800e43e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e3a6:	78fa      	ldrb	r2, [r7, #3]
 800e3a8:	6879      	ldr	r1, [r7, #4]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	009b      	lsls	r3, r3, #2
 800e3ae:	4413      	add	r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	440b      	add	r3, r1
 800e3b4:	3318      	adds	r3, #24
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d029      	beq.n	800e410 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e3bc:	78fa      	ldrb	r2, [r7, #3]
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	009b      	lsls	r3, r3, #2
 800e3c8:	440b      	add	r3, r1
 800e3ca:	3318      	adds	r3, #24
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	78f9      	ldrb	r1, [r7, #3]
 800e3d0:	68f8      	ldr	r0, [r7, #12]
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	1a5b      	subs	r3, r3, r1
 800e3d8:	009b      	lsls	r3, r3, #2
 800e3da:	4403      	add	r3, r0
 800e3dc:	3344      	adds	r3, #68	; 0x44
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	fbb2 f1f3 	udiv	r1, r2, r3
 800e3e4:	fb03 f301 	mul.w	r3, r3, r1
 800e3e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d110      	bne.n	800e410 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e3ee:	78fa      	ldrb	r2, [r7, #3]
 800e3f0:	6879      	ldr	r1, [r7, #4]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	440b      	add	r3, r1
 800e3fc:	3318      	adds	r3, #24
 800e3fe:	2200      	movs	r2, #0
 800e400:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e402:	78f9      	ldrb	r1, [r7, #3]
 800e404:	2300      	movs	r3, #0
 800e406:	2200      	movs	r2, #0
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f009 fa3a 	bl	8017882 <USBD_LL_Transmit>
 800e40e:	e015      	b.n	800e43c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e410:	68bb      	ldr	r3, [r7, #8]
 800e412:	2200      	movs	r2, #0
 800e414:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d00b      	beq.n	800e43c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e42a:	691b      	ldr	r3, [r3, #16]
 800e42c:	68ba      	ldr	r2, [r7, #8]
 800e42e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e432:	68ba      	ldr	r2, [r7, #8]
 800e434:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e438:	78fa      	ldrb	r2, [r7, #3]
 800e43a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e43c:	2300      	movs	r3, #0
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}

0800e446 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e446:	b580      	push	{r7, lr}
 800e448:	b084      	sub	sp, #16
 800e44a:	af00      	add	r7, sp, #0
 800e44c:	6078      	str	r0, [r7, #4]
 800e44e:	460b      	mov	r3, r1
 800e450:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e458:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e460:	2b00      	cmp	r3, #0
 800e462:	d101      	bne.n	800e468 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e464:	2303      	movs	r3, #3
 800e466:	e015      	b.n	800e494 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e468:	78fb      	ldrb	r3, [r7, #3]
 800e46a:	4619      	mov	r1, r3
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f009 fa4a 	bl	8017906 <USBD_LL_GetRxDataSize>
 800e472:	4602      	mov	r2, r0
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e480:	68db      	ldr	r3, [r3, #12]
 800e482:	68fa      	ldr	r2, [r7, #12]
 800e484:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e488:	68fa      	ldr	r2, [r7, #12]
 800e48a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e48e:	4611      	mov	r1, r2
 800e490:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e4aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d101      	bne.n	800e4b6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	e01b      	b.n	800e4ee <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d015      	beq.n	800e4ec <USBD_CDC_EP0_RxReady+0x50>
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e4c6:	2bff      	cmp	r3, #255	; 0xff
 800e4c8:	d010      	beq.n	800e4ec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4d0:	689b      	ldr	r3, [r3, #8]
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e4d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e4e0:	b292      	uxth	r2, r2
 800e4e2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	22ff      	movs	r2, #255	; 0xff
 800e4e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e4ec:	2300      	movs	r3, #0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3710      	adds	r7, #16
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
	...

0800e4f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2243      	movs	r2, #67	; 0x43
 800e504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e506:	4b03      	ldr	r3, [pc, #12]	; (800e514 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr
 800e514:	200000d8 	.word	0x200000d8

0800e518 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e518:	b480      	push	{r7}
 800e51a:	b083      	sub	sp, #12
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2243      	movs	r2, #67	; 0x43
 800e524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e526:	4b03      	ldr	r3, [pc, #12]	; (800e534 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e528:	4618      	mov	r0, r3
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr
 800e534:	20000094 	.word	0x20000094

0800e538 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2243      	movs	r2, #67	; 0x43
 800e544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e546:	4b03      	ldr	r3, [pc, #12]	; (800e554 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e548:	4618      	mov	r0, r3
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	2000011c 	.word	0x2000011c

0800e558 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e558:	b480      	push	{r7}
 800e55a:	b083      	sub	sp, #12
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	220a      	movs	r2, #10
 800e564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e566:	4b03      	ldr	r3, [pc, #12]	; (800e574 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e568:	4618      	mov	r0, r3
 800e56a:	370c      	adds	r7, #12
 800e56c:	46bd      	mov	sp, r7
 800e56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e572:	4770      	bx	lr
 800e574:	20000050 	.word	0x20000050

0800e578 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e578:	b480      	push	{r7}
 800e57a:	b083      	sub	sp, #12
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d101      	bne.n	800e58c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e588:	2303      	movs	r3, #3
 800e58a:	e004      	b.n	800e596 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	683a      	ldr	r2, [r7, #0]
 800e590:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	370c      	adds	r7, #12
 800e59a:	46bd      	mov	sp, r7
 800e59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a0:	4770      	bx	lr

0800e5a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e5a2:	b480      	push	{r7}
 800e5a4:	b087      	sub	sp, #28
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	60f8      	str	r0, [r7, #12]
 800e5aa:	60b9      	str	r1, [r7, #8]
 800e5ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5b4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d101      	bne.n	800e5c0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e5bc:	2303      	movs	r3, #3
 800e5be:	e008      	b.n	800e5d2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	68ba      	ldr	r2, [r7, #8]
 800e5c4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e5c8:	697b      	ldr	r3, [r7, #20]
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e5d0:	2300      	movs	r3, #0
}
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	371c      	adds	r7, #28
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr

0800e5de <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b085      	sub	sp, #20
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
 800e5e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e5ee:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e5f6:	2303      	movs	r3, #3
 800e5f8:	e004      	b.n	800e604 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	683a      	ldr	r2, [r7, #0]
 800e5fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e602:	2300      	movs	r3, #0
}
 800e604:	4618      	mov	r0, r3
 800e606:	3714      	adds	r7, #20
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e61e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e620:	2301      	movs	r3, #1
 800e622:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d101      	bne.n	800e632 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e62e:	2303      	movs	r3, #3
 800e630:	e01a      	b.n	800e668 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d114      	bne.n	800e666 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2201      	movs	r2, #1
 800e640:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e65a:	2181      	movs	r1, #129	; 0x81
 800e65c:	6878      	ldr	r0, [r7, #4]
 800e65e:	f009 f910 	bl	8017882 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e662:	2300      	movs	r3, #0
 800e664:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e666:	7bfb      	ldrb	r3, [r7, #15]
}
 800e668:	4618      	mov	r0, r3
 800e66a:	3710      	adds	r7, #16
 800e66c:	46bd      	mov	sp, r7
 800e66e:	bd80      	pop	{r7, pc}

0800e670 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e67e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e686:	2b00      	cmp	r3, #0
 800e688:	d101      	bne.n	800e68e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e68a:	2303      	movs	r3, #3
 800e68c:	e016      	b.n	800e6bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	7c1b      	ldrb	r3, [r3, #16]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d109      	bne.n	800e6aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e69c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f009 f90e 	bl	80178c4 <USBD_LL_PrepareReceive>
 800e6a8:	e007      	b.n	800e6ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6b0:	2340      	movs	r3, #64	; 0x40
 800e6b2:	2101      	movs	r1, #1
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f009 f905 	bl	80178c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b086      	sub	sp, #24
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	60f8      	str	r0, [r7, #12]
 800e6cc:	60b9      	str	r1, [r7, #8]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e6d8:	2303      	movs	r3, #3
 800e6da:	e01f      	b.n	800e71c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2200      	movs	r2, #0
 800e6e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d003      	beq.n	800e702 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	68ba      	ldr	r2, [r7, #8]
 800e6fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2201      	movs	r2, #1
 800e706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	79fa      	ldrb	r2, [r7, #7]
 800e70e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f008 ff81 	bl	8017618 <USBD_LL_Init>
 800e716:	4603      	mov	r3, r0
 800e718:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3718      	adds	r7, #24
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}

0800e724 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e72e:	2300      	movs	r3, #0
 800e730:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d101      	bne.n	800e73c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e738:	2303      	movs	r3, #3
 800e73a:	e016      	b.n	800e76a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	683a      	ldr	r2, [r7, #0]
 800e740:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d00b      	beq.n	800e768 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e758:	f107 020e 	add.w	r2, r7, #14
 800e75c:	4610      	mov	r0, r2
 800e75e:	4798      	blx	r3
 800e760:	4602      	mov	r2, r0
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	3710      	adds	r7, #16
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}

0800e772 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b082      	sub	sp, #8
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f008 ff98 	bl	80176b0 <USBD_LL_Start>
 800e780:	4603      	mov	r3, r0
}
 800e782:	4618      	mov	r0, r3
 800e784:	3708      	adds	r7, #8
 800e786:	46bd      	mov	sp, r7
 800e788:	bd80      	pop	{r7, pc}

0800e78a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e78a:	b480      	push	{r7}
 800e78c:	b083      	sub	sp, #12
 800e78e:	af00      	add	r7, sp, #0
 800e790:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e792:	2300      	movs	r3, #0
}
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr

0800e7a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d009      	beq.n	800e7ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	78fa      	ldrb	r2, [r7, #3]
 800e7c4:	4611      	mov	r1, r2
 800e7c6:	6878      	ldr	r0, [r7, #4]
 800e7c8:	4798      	blx	r3
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	3710      	adds	r7, #16
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b082      	sub	sp, #8
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d007      	beq.n	800e7fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7f4:	685b      	ldr	r3, [r3, #4]
 800e7f6:	78fa      	ldrb	r2, [r7, #3]
 800e7f8:	4611      	mov	r1, r2
 800e7fa:	6878      	ldr	r0, [r7, #4]
 800e7fc:	4798      	blx	r3
  }

  return USBD_OK;
 800e7fe:	2300      	movs	r3, #0
}
 800e800:	4618      	mov	r0, r3
 800e802:	3708      	adds	r7, #8
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 ff90 	bl	800f740 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2201      	movs	r2, #1
 800e824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e82e:	461a      	mov	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e83c:	f003 031f 	and.w	r3, r3, #31
 800e840:	2b02      	cmp	r3, #2
 800e842:	d01a      	beq.n	800e87a <USBD_LL_SetupStage+0x72>
 800e844:	2b02      	cmp	r3, #2
 800e846:	d822      	bhi.n	800e88e <USBD_LL_SetupStage+0x86>
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d002      	beq.n	800e852 <USBD_LL_SetupStage+0x4a>
 800e84c:	2b01      	cmp	r3, #1
 800e84e:	d00a      	beq.n	800e866 <USBD_LL_SetupStage+0x5e>
 800e850:	e01d      	b.n	800e88e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fa62 	bl	800ed24 <USBD_StdDevReq>
 800e860:	4603      	mov	r3, r0
 800e862:	73fb      	strb	r3, [r7, #15]
      break;
 800e864:	e020      	b.n	800e8a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e86c:	4619      	mov	r1, r3
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fac6 	bl	800ee00 <USBD_StdItfReq>
 800e874:	4603      	mov	r3, r0
 800e876:	73fb      	strb	r3, [r7, #15]
      break;
 800e878:	e016      	b.n	800e8a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e880:	4619      	mov	r1, r3
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fb05 	bl	800ee92 <USBD_StdEPReq>
 800e888:	4603      	mov	r3, r0
 800e88a:	73fb      	strb	r3, [r7, #15]
      break;
 800e88c:	e00c      	b.n	800e8a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e894:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	4619      	mov	r1, r3
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f008 ff67 	bl	8017770 <USBD_LL_StallEP>
 800e8a2:	4603      	mov	r3, r0
 800e8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800e8a6:	bf00      	nop
  }

  return ret;
 800e8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3710      	adds	r7, #16
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}

0800e8b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8b2:	b580      	push	{r7, lr}
 800e8b4:	b086      	sub	sp, #24
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	60f8      	str	r0, [r7, #12]
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	607a      	str	r2, [r7, #4]
 800e8be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e8c0:	7afb      	ldrb	r3, [r7, #11]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d138      	bne.n	800e938 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e8cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8d4:	2b03      	cmp	r3, #3
 800e8d6:	d14a      	bne.n	800e96e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	689a      	ldr	r2, [r3, #8]
 800e8dc:	693b      	ldr	r3, [r7, #16]
 800e8de:	68db      	ldr	r3, [r3, #12]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d913      	bls.n	800e90c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	689a      	ldr	r2, [r3, #8]
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	1ad2      	subs	r2, r2, r3
 800e8ee:	693b      	ldr	r3, [r7, #16]
 800e8f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	68da      	ldr	r2, [r3, #12]
 800e8f6:	693b      	ldr	r3, [r7, #16]
 800e8f8:	689b      	ldr	r3, [r3, #8]
 800e8fa:	4293      	cmp	r3, r2
 800e8fc:	bf28      	it	cs
 800e8fe:	4613      	movcs	r3, r2
 800e900:	461a      	mov	r2, r3
 800e902:	6879      	ldr	r1, [r7, #4]
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f001 f80f 	bl	800f928 <USBD_CtlContinueRx>
 800e90a:	e030      	b.n	800e96e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e912:	b2db      	uxtb	r3, r3
 800e914:	2b03      	cmp	r3, #3
 800e916:	d10b      	bne.n	800e930 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d005      	beq.n	800e930 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e92a:	691b      	ldr	r3, [r3, #16]
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e930:	68f8      	ldr	r0, [r7, #12]
 800e932:	f001 f80a 	bl	800f94a <USBD_CtlSendStatus>
 800e936:	e01a      	b.n	800e96e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	2b03      	cmp	r3, #3
 800e942:	d114      	bne.n	800e96e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e94a:	699b      	ldr	r3, [r3, #24]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d00e      	beq.n	800e96e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e956:	699b      	ldr	r3, [r3, #24]
 800e958:	7afa      	ldrb	r2, [r7, #11]
 800e95a:	4611      	mov	r1, r2
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	4798      	blx	r3
 800e960:	4603      	mov	r3, r0
 800e962:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e964:	7dfb      	ldrb	r3, [r7, #23]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d001      	beq.n	800e96e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e96a:	7dfb      	ldrb	r3, [r7, #23]
 800e96c:	e000      	b.n	800e970 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e96e:	2300      	movs	r3, #0
}
 800e970:	4618      	mov	r0, r3
 800e972:	3718      	adds	r7, #24
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	460b      	mov	r3, r1
 800e982:	607a      	str	r2, [r7, #4]
 800e984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e986:	7afb      	ldrb	r3, [r7, #11]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d16b      	bne.n	800ea64 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	3314      	adds	r3, #20
 800e990:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e998:	2b02      	cmp	r3, #2
 800e99a:	d156      	bne.n	800ea4a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	689a      	ldr	r2, [r3, #8]
 800e9a0:	693b      	ldr	r3, [r7, #16]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d914      	bls.n	800e9d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e9a8:	693b      	ldr	r3, [r7, #16]
 800e9aa:	689a      	ldr	r2, [r3, #8]
 800e9ac:	693b      	ldr	r3, [r7, #16]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	1ad2      	subs	r2, r2, r3
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	689b      	ldr	r3, [r3, #8]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	6879      	ldr	r1, [r7, #4]
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f000 ff84 	bl	800f8cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f008 ff7a 	bl	80178c4 <USBD_LL_PrepareReceive>
 800e9d0:	e03b      	b.n	800ea4a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e9d2:	693b      	ldr	r3, [r7, #16]
 800e9d4:	68da      	ldr	r2, [r3, #12]
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	689b      	ldr	r3, [r3, #8]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d11c      	bne.n	800ea18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	685a      	ldr	r2, [r3, #4]
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d316      	bcc.n	800ea18 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	685a      	ldr	r2, [r3, #4]
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d20f      	bcs.n	800ea18 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f000 ff65 	bl	800f8cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	2100      	movs	r1, #0
 800ea10:	68f8      	ldr	r0, [r7, #12]
 800ea12:	f008 ff57 	bl	80178c4 <USBD_LL_PrepareReceive>
 800ea16:	e018      	b.n	800ea4a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	2b03      	cmp	r3, #3
 800ea22:	d10b      	bne.n	800ea3c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea36:	68db      	ldr	r3, [r3, #12]
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ea3c:	2180      	movs	r1, #128	; 0x80
 800ea3e:	68f8      	ldr	r0, [r7, #12]
 800ea40:	f008 fe96 	bl	8017770 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ea44:	68f8      	ldr	r0, [r7, #12]
 800ea46:	f000 ff93 	bl	800f970 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ea50:	2b01      	cmp	r3, #1
 800ea52:	d122      	bne.n	800ea9a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ea54:	68f8      	ldr	r0, [r7, #12]
 800ea56:	f7ff fe98 	bl	800e78a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ea62:	e01a      	b.n	800ea9a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	2b03      	cmp	r3, #3
 800ea6e:	d114      	bne.n	800ea9a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea76:	695b      	ldr	r3, [r3, #20]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00e      	beq.n	800ea9a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea82:	695b      	ldr	r3, [r3, #20]
 800ea84:	7afa      	ldrb	r2, [r7, #11]
 800ea86:	4611      	mov	r1, r2
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	4798      	blx	r3
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d001      	beq.n	800ea9a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ea96:	7dfb      	ldrb	r3, [r7, #23]
 800ea98:	e000      	b.n	800ea9c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ea9a:	2300      	movs	r3, #0
}
 800ea9c:	4618      	mov	r0, r3
 800ea9e:	3718      	adds	r7, #24
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2200      	movs	r2, #0
 800eab8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2200      	movs	r2, #0
 800eac0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2200      	movs	r2, #0
 800eac6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ead4:	2303      	movs	r3, #3
 800ead6:	e02f      	b.n	800eb38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00f      	beq.n	800eb02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaf4:	685b      	ldr	r3, [r3, #4]
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	6852      	ldr	r2, [r2, #4]
 800eafa:	b2d2      	uxtb	r2, r2
 800eafc:	4611      	mov	r1, r2
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb02:	2340      	movs	r3, #64	; 0x40
 800eb04:	2200      	movs	r2, #0
 800eb06:	2100      	movs	r1, #0
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f008 fdec 	bl	80176e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2240      	movs	r2, #64	; 0x40
 800eb1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800eb1e:	2340      	movs	r3, #64	; 0x40
 800eb20:	2200      	movs	r2, #0
 800eb22:	2180      	movs	r1, #128	; 0x80
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f008 fdde 	bl	80176e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2240      	movs	r2, #64	; 0x40
 800eb34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eb36:	2300      	movs	r3, #0
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3708      	adds	r7, #8
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}

0800eb40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	78fa      	ldrb	r2, [r7, #3]
 800eb50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eb52:	2300      	movs	r3, #0
}
 800eb54:	4618      	mov	r0, r3
 800eb56:	370c      	adds	r7, #12
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5e:	4770      	bx	lr

0800eb60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb6e:	b2da      	uxtb	r2, r3
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2204      	movs	r2, #4
 800eb7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eb7e:	2300      	movs	r3, #0
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr

0800eb8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b083      	sub	sp, #12
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb9a:	b2db      	uxtb	r3, r3
 800eb9c:	2b04      	cmp	r3, #4
 800eb9e:	d106      	bne.n	800ebae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800eba6:	b2da      	uxtb	r2, r3
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d101      	bne.n	800ebd2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ebce:	2303      	movs	r3, #3
 800ebd0:	e012      	b.n	800ebf8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b03      	cmp	r3, #3
 800ebdc:	d10b      	bne.n	800ebf6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe4:	69db      	ldr	r3, [r3, #28]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d005      	beq.n	800ebf6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3708      	adds	r7, #8
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}

0800ec00 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	460b      	mov	r3, r1
 800ec0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d101      	bne.n	800ec1a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ec16:	2303      	movs	r3, #3
 800ec18:	e014      	b.n	800ec44 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec20:	b2db      	uxtb	r3, r3
 800ec22:	2b03      	cmp	r3, #3
 800ec24:	d10d      	bne.n	800ec42 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec2c:	6a1b      	ldr	r3, [r3, #32]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d007      	beq.n	800ec42 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec38:	6a1b      	ldr	r3, [r3, #32]
 800ec3a:	78fa      	ldrb	r2, [r7, #3]
 800ec3c:	4611      	mov	r1, r2
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3708      	adds	r7, #8
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	460b      	mov	r3, r1
 800ec56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d101      	bne.n	800ec66 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ec62:	2303      	movs	r3, #3
 800ec64:	e014      	b.n	800ec90 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec6c:	b2db      	uxtb	r3, r3
 800ec6e:	2b03      	cmp	r3, #3
 800ec70:	d10d      	bne.n	800ec8e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d007      	beq.n	800ec8e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec86:	78fa      	ldrb	r2, [r7, #3]
 800ec88:	4611      	mov	r1, r2
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ec8e:	2300      	movs	r3, #0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3708      	adds	r7, #8
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ecae:	b580      	push	{r7, lr}
 800ecb0:	b082      	sub	sp, #8
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d009      	beq.n	800ecdc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	687a      	ldr	r2, [r7, #4]
 800ecd2:	6852      	ldr	r2, [r2, #4]
 800ecd4:	b2d2      	uxtb	r2, r2
 800ecd6:	4611      	mov	r1, r2
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	4798      	blx	r3
  }

  return USBD_OK;
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ece6:	b480      	push	{r7}
 800ece8:	b087      	sub	sp, #28
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	781b      	ldrb	r3, [r3, #0]
 800ecf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	781b      	ldrb	r3, [r3, #0]
 800ed02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ed04:	8a3b      	ldrh	r3, [r7, #16]
 800ed06:	021b      	lsls	r3, r3, #8
 800ed08:	b21a      	sxth	r2, r3
 800ed0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	b21b      	sxth	r3, r3
 800ed12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ed14:	89fb      	ldrh	r3, [r7, #14]
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	371c      	adds	r7, #28
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr
	...

0800ed24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed24:	b580      	push	{r7, lr}
 800ed26:	b084      	sub	sp, #16
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
 800ed2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed3a:	2b40      	cmp	r3, #64	; 0x40
 800ed3c:	d005      	beq.n	800ed4a <USBD_StdDevReq+0x26>
 800ed3e:	2b40      	cmp	r3, #64	; 0x40
 800ed40:	d853      	bhi.n	800edea <USBD_StdDevReq+0xc6>
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d00b      	beq.n	800ed5e <USBD_StdDevReq+0x3a>
 800ed46:	2b20      	cmp	r3, #32
 800ed48:	d14f      	bne.n	800edea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed50:	689b      	ldr	r3, [r3, #8]
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	4798      	blx	r3
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ed5c:	e04a      	b.n	800edf4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	785b      	ldrb	r3, [r3, #1]
 800ed62:	2b09      	cmp	r3, #9
 800ed64:	d83b      	bhi.n	800edde <USBD_StdDevReq+0xba>
 800ed66:	a201      	add	r2, pc, #4	; (adr r2, 800ed6c <USBD_StdDevReq+0x48>)
 800ed68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed6c:	0800edc1 	.word	0x0800edc1
 800ed70:	0800edd5 	.word	0x0800edd5
 800ed74:	0800eddf 	.word	0x0800eddf
 800ed78:	0800edcb 	.word	0x0800edcb
 800ed7c:	0800eddf 	.word	0x0800eddf
 800ed80:	0800ed9f 	.word	0x0800ed9f
 800ed84:	0800ed95 	.word	0x0800ed95
 800ed88:	0800eddf 	.word	0x0800eddf
 800ed8c:	0800edb7 	.word	0x0800edb7
 800ed90:	0800eda9 	.word	0x0800eda9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 f9de 	bl	800f158 <USBD_GetDescriptor>
          break;
 800ed9c:	e024      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ed9e:	6839      	ldr	r1, [r7, #0]
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 fb43 	bl	800f42c <USBD_SetAddress>
          break;
 800eda6:	e01f      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eda8:	6839      	ldr	r1, [r7, #0]
 800edaa:	6878      	ldr	r0, [r7, #4]
 800edac:	f000 fb82 	bl	800f4b4 <USBD_SetConfig>
 800edb0:	4603      	mov	r3, r0
 800edb2:	73fb      	strb	r3, [r7, #15]
          break;
 800edb4:	e018      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800edb6:	6839      	ldr	r1, [r7, #0]
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	f000 fc21 	bl	800f600 <USBD_GetConfig>
          break;
 800edbe:	e013      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800edc0:	6839      	ldr	r1, [r7, #0]
 800edc2:	6878      	ldr	r0, [r7, #4]
 800edc4:	f000 fc52 	bl	800f66c <USBD_GetStatus>
          break;
 800edc8:	e00e      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800edca:	6839      	ldr	r1, [r7, #0]
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 fc81 	bl	800f6d4 <USBD_SetFeature>
          break;
 800edd2:	e009      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800edd4:	6839      	ldr	r1, [r7, #0]
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f000 fc90 	bl	800f6fc <USBD_ClrFeature>
          break;
 800eddc:	e004      	b.n	800ede8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800edde:	6839      	ldr	r1, [r7, #0]
 800ede0:	6878      	ldr	r0, [r7, #4]
 800ede2:	f000 fce7 	bl	800f7b4 <USBD_CtlError>
          break;
 800ede6:	bf00      	nop
      }
      break;
 800ede8:	e004      	b.n	800edf4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800edea:	6839      	ldr	r1, [r7, #0]
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f000 fce1 	bl	800f7b4 <USBD_CtlError>
      break;
 800edf2:	bf00      	nop
  }

  return ret;
 800edf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800edf6:	4618      	mov	r0, r3
 800edf8:	3710      	adds	r7, #16
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}
 800edfe:	bf00      	nop

0800ee00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee00:	b580      	push	{r7, lr}
 800ee02:	b084      	sub	sp, #16
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
 800ee08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	781b      	ldrb	r3, [r3, #0]
 800ee12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ee16:	2b40      	cmp	r3, #64	; 0x40
 800ee18:	d005      	beq.n	800ee26 <USBD_StdItfReq+0x26>
 800ee1a:	2b40      	cmp	r3, #64	; 0x40
 800ee1c:	d82f      	bhi.n	800ee7e <USBD_StdItfReq+0x7e>
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d001      	beq.n	800ee26 <USBD_StdItfReq+0x26>
 800ee22:	2b20      	cmp	r3, #32
 800ee24:	d12b      	bne.n	800ee7e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	3b01      	subs	r3, #1
 800ee30:	2b02      	cmp	r3, #2
 800ee32:	d81d      	bhi.n	800ee70 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	889b      	ldrh	r3, [r3, #4]
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	2b01      	cmp	r3, #1
 800ee3c:	d813      	bhi.n	800ee66 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee44:	689b      	ldr	r3, [r3, #8]
 800ee46:	6839      	ldr	r1, [r7, #0]
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	4798      	blx	r3
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	88db      	ldrh	r3, [r3, #6]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d110      	bne.n	800ee7a <USBD_StdItfReq+0x7a>
 800ee58:	7bfb      	ldrb	r3, [r7, #15]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d10d      	bne.n	800ee7a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	f000 fd73 	bl	800f94a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ee64:	e009      	b.n	800ee7a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ee66:	6839      	ldr	r1, [r7, #0]
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f000 fca3 	bl	800f7b4 <USBD_CtlError>
          break;
 800ee6e:	e004      	b.n	800ee7a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f000 fc9e 	bl	800f7b4 <USBD_CtlError>
          break;
 800ee78:	e000      	b.n	800ee7c <USBD_StdItfReq+0x7c>
          break;
 800ee7a:	bf00      	nop
      }
      break;
 800ee7c:	e004      	b.n	800ee88 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ee7e:	6839      	ldr	r1, [r7, #0]
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fc97 	bl	800f7b4 <USBD_CtlError>
      break;
 800ee86:	bf00      	nop
  }

  return ret;
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}

0800ee92 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee92:	b580      	push	{r7, lr}
 800ee94:	b084      	sub	sp, #16
 800ee96:	af00      	add	r7, sp, #0
 800ee98:	6078      	str	r0, [r7, #4]
 800ee9a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	889b      	ldrh	r3, [r3, #4]
 800eea4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	781b      	ldrb	r3, [r3, #0]
 800eeaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eeae:	2b40      	cmp	r3, #64	; 0x40
 800eeb0:	d007      	beq.n	800eec2 <USBD_StdEPReq+0x30>
 800eeb2:	2b40      	cmp	r3, #64	; 0x40
 800eeb4:	f200 8145 	bhi.w	800f142 <USBD_StdEPReq+0x2b0>
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00c      	beq.n	800eed6 <USBD_StdEPReq+0x44>
 800eebc:	2b20      	cmp	r3, #32
 800eebe:	f040 8140 	bne.w	800f142 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eec8:	689b      	ldr	r3, [r3, #8]
 800eeca:	6839      	ldr	r1, [r7, #0]
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	4798      	blx	r3
 800eed0:	4603      	mov	r3, r0
 800eed2:	73fb      	strb	r3, [r7, #15]
      break;
 800eed4:	e13a      	b.n	800f14c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	785b      	ldrb	r3, [r3, #1]
 800eeda:	2b03      	cmp	r3, #3
 800eedc:	d007      	beq.n	800eeee <USBD_StdEPReq+0x5c>
 800eede:	2b03      	cmp	r3, #3
 800eee0:	f300 8129 	bgt.w	800f136 <USBD_StdEPReq+0x2a4>
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d07f      	beq.n	800efe8 <USBD_StdEPReq+0x156>
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d03c      	beq.n	800ef66 <USBD_StdEPReq+0xd4>
 800eeec:	e123      	b.n	800f136 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	2b02      	cmp	r3, #2
 800eef8:	d002      	beq.n	800ef00 <USBD_StdEPReq+0x6e>
 800eefa:	2b03      	cmp	r3, #3
 800eefc:	d016      	beq.n	800ef2c <USBD_StdEPReq+0x9a>
 800eefe:	e02c      	b.n	800ef5a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef00:	7bbb      	ldrb	r3, [r7, #14]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d00d      	beq.n	800ef22 <USBD_StdEPReq+0x90>
 800ef06:	7bbb      	ldrb	r3, [r7, #14]
 800ef08:	2b80      	cmp	r3, #128	; 0x80
 800ef0a:	d00a      	beq.n	800ef22 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef0c:	7bbb      	ldrb	r3, [r7, #14]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f008 fc2d 	bl	8017770 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef16:	2180      	movs	r1, #128	; 0x80
 800ef18:	6878      	ldr	r0, [r7, #4]
 800ef1a:	f008 fc29 	bl	8017770 <USBD_LL_StallEP>
 800ef1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef20:	e020      	b.n	800ef64 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ef22:	6839      	ldr	r1, [r7, #0]
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f000 fc45 	bl	800f7b4 <USBD_CtlError>
              break;
 800ef2a:	e01b      	b.n	800ef64 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	885b      	ldrh	r3, [r3, #2]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d10e      	bne.n	800ef52 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ef34:	7bbb      	ldrb	r3, [r7, #14]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d00b      	beq.n	800ef52 <USBD_StdEPReq+0xc0>
 800ef3a:	7bbb      	ldrb	r3, [r7, #14]
 800ef3c:	2b80      	cmp	r3, #128	; 0x80
 800ef3e:	d008      	beq.n	800ef52 <USBD_StdEPReq+0xc0>
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	88db      	ldrh	r3, [r3, #6]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d104      	bne.n	800ef52 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	6878      	ldr	r0, [r7, #4]
 800ef4e:	f008 fc0f 	bl	8017770 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f000 fcf9 	bl	800f94a <USBD_CtlSendStatus>

              break;
 800ef58:	e004      	b.n	800ef64 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ef5a:	6839      	ldr	r1, [r7, #0]
 800ef5c:	6878      	ldr	r0, [r7, #4]
 800ef5e:	f000 fc29 	bl	800f7b4 <USBD_CtlError>
              break;
 800ef62:	bf00      	nop
          }
          break;
 800ef64:	e0ec      	b.n	800f140 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ef6c:	b2db      	uxtb	r3, r3
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d002      	beq.n	800ef78 <USBD_StdEPReq+0xe6>
 800ef72:	2b03      	cmp	r3, #3
 800ef74:	d016      	beq.n	800efa4 <USBD_StdEPReq+0x112>
 800ef76:	e030      	b.n	800efda <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef78:	7bbb      	ldrb	r3, [r7, #14]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d00d      	beq.n	800ef9a <USBD_StdEPReq+0x108>
 800ef7e:	7bbb      	ldrb	r3, [r7, #14]
 800ef80:	2b80      	cmp	r3, #128	; 0x80
 800ef82:	d00a      	beq.n	800ef9a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef84:	7bbb      	ldrb	r3, [r7, #14]
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f008 fbf1 	bl	8017770 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef8e:	2180      	movs	r1, #128	; 0x80
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f008 fbed 	bl	8017770 <USBD_LL_StallEP>
 800ef96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef98:	e025      	b.n	800efe6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ef9a:	6839      	ldr	r1, [r7, #0]
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 fc09 	bl	800f7b4 <USBD_CtlError>
              break;
 800efa2:	e020      	b.n	800efe6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	885b      	ldrh	r3, [r3, #2]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d11b      	bne.n	800efe4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800efac:	7bbb      	ldrb	r3, [r7, #14]
 800efae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d004      	beq.n	800efc0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800efb6:	7bbb      	ldrb	r3, [r7, #14]
 800efb8:	4619      	mov	r1, r3
 800efba:	6878      	ldr	r0, [r7, #4]
 800efbc:	f008 fbf7 	bl	80177ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fcc2 	bl	800f94a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efcc:	689b      	ldr	r3, [r3, #8]
 800efce:	6839      	ldr	r1, [r7, #0]
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	4798      	blx	r3
 800efd4:	4603      	mov	r3, r0
 800efd6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800efd8:	e004      	b.n	800efe4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800efda:	6839      	ldr	r1, [r7, #0]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 fbe9 	bl	800f7b4 <USBD_CtlError>
              break;
 800efe2:	e000      	b.n	800efe6 <USBD_StdEPReq+0x154>
              break;
 800efe4:	bf00      	nop
          }
          break;
 800efe6:	e0ab      	b.n	800f140 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efee:	b2db      	uxtb	r3, r3
 800eff0:	2b02      	cmp	r3, #2
 800eff2:	d002      	beq.n	800effa <USBD_StdEPReq+0x168>
 800eff4:	2b03      	cmp	r3, #3
 800eff6:	d032      	beq.n	800f05e <USBD_StdEPReq+0x1cc>
 800eff8:	e097      	b.n	800f12a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800effa:	7bbb      	ldrb	r3, [r7, #14]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d007      	beq.n	800f010 <USBD_StdEPReq+0x17e>
 800f000:	7bbb      	ldrb	r3, [r7, #14]
 800f002:	2b80      	cmp	r3, #128	; 0x80
 800f004:	d004      	beq.n	800f010 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f006:	6839      	ldr	r1, [r7, #0]
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fbd3 	bl	800f7b4 <USBD_CtlError>
                break;
 800f00e:	e091      	b.n	800f134 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f010:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f014:	2b00      	cmp	r3, #0
 800f016:	da0b      	bge.n	800f030 <USBD_StdEPReq+0x19e>
 800f018:	7bbb      	ldrb	r3, [r7, #14]
 800f01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f01e:	4613      	mov	r3, r2
 800f020:	009b      	lsls	r3, r3, #2
 800f022:	4413      	add	r3, r2
 800f024:	009b      	lsls	r3, r3, #2
 800f026:	3310      	adds	r3, #16
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	4413      	add	r3, r2
 800f02c:	3304      	adds	r3, #4
 800f02e:	e00b      	b.n	800f048 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f030:	7bbb      	ldrb	r3, [r7, #14]
 800f032:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f036:	4613      	mov	r3, r2
 800f038:	009b      	lsls	r3, r3, #2
 800f03a:	4413      	add	r3, r2
 800f03c:	009b      	lsls	r3, r3, #2
 800f03e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	4413      	add	r3, r2
 800f046:	3304      	adds	r3, #4
 800f048:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2200      	movs	r2, #0
 800f04e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	2202      	movs	r2, #2
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f000 fc1d 	bl	800f896 <USBD_CtlSendData>
              break;
 800f05c:	e06a      	b.n	800f134 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f05e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f062:	2b00      	cmp	r3, #0
 800f064:	da11      	bge.n	800f08a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f066:	7bbb      	ldrb	r3, [r7, #14]
 800f068:	f003 020f 	and.w	r2, r3, #15
 800f06c:	6879      	ldr	r1, [r7, #4]
 800f06e:	4613      	mov	r3, r2
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	4413      	add	r3, r2
 800f074:	009b      	lsls	r3, r3, #2
 800f076:	440b      	add	r3, r1
 800f078:	3324      	adds	r3, #36	; 0x24
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d117      	bne.n	800f0b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f080:	6839      	ldr	r1, [r7, #0]
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fb96 	bl	800f7b4 <USBD_CtlError>
                  break;
 800f088:	e054      	b.n	800f134 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
 800f08c:	f003 020f 	and.w	r2, r3, #15
 800f090:	6879      	ldr	r1, [r7, #4]
 800f092:	4613      	mov	r3, r2
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	4413      	add	r3, r2
 800f098:	009b      	lsls	r3, r3, #2
 800f09a:	440b      	add	r3, r1
 800f09c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f0a0:	881b      	ldrh	r3, [r3, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d104      	bne.n	800f0b0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f0a6:	6839      	ldr	r1, [r7, #0]
 800f0a8:	6878      	ldr	r0, [r7, #4]
 800f0aa:	f000 fb83 	bl	800f7b4 <USBD_CtlError>
                  break;
 800f0ae:	e041      	b.n	800f134 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	da0b      	bge.n	800f0d0 <USBD_StdEPReq+0x23e>
 800f0b8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f0be:	4613      	mov	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	3310      	adds	r3, #16
 800f0c8:	687a      	ldr	r2, [r7, #4]
 800f0ca:	4413      	add	r3, r2
 800f0cc:	3304      	adds	r3, #4
 800f0ce:	e00b      	b.n	800f0e8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f0d0:	7bbb      	ldrb	r3, [r7, #14]
 800f0d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0d6:	4613      	mov	r3, r2
 800f0d8:	009b      	lsls	r3, r3, #2
 800f0da:	4413      	add	r3, r2
 800f0dc:	009b      	lsls	r3, r3, #2
 800f0de:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f0e2:	687a      	ldr	r2, [r7, #4]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f0ea:	7bbb      	ldrb	r3, [r7, #14]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <USBD_StdEPReq+0x264>
 800f0f0:	7bbb      	ldrb	r3, [r7, #14]
 800f0f2:	2b80      	cmp	r3, #128	; 0x80
 800f0f4:	d103      	bne.n	800f0fe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	601a      	str	r2, [r3, #0]
 800f0fc:	e00e      	b.n	800f11c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f0fe:	7bbb      	ldrb	r3, [r7, #14]
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f008 fb72 	bl	80177ec <USBD_LL_IsStallEP>
 800f108:	4603      	mov	r3, r0
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d003      	beq.n	800f116 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	2201      	movs	r2, #1
 800f112:	601a      	str	r2, [r3, #0]
 800f114:	e002      	b.n	800f11c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	2200      	movs	r2, #0
 800f11a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	2202      	movs	r2, #2
 800f120:	4619      	mov	r1, r3
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 fbb7 	bl	800f896 <USBD_CtlSendData>
              break;
 800f128:	e004      	b.n	800f134 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f12a:	6839      	ldr	r1, [r7, #0]
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 fb41 	bl	800f7b4 <USBD_CtlError>
              break;
 800f132:	bf00      	nop
          }
          break;
 800f134:	e004      	b.n	800f140 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fb3b 	bl	800f7b4 <USBD_CtlError>
          break;
 800f13e:	bf00      	nop
      }
      break;
 800f140:	e004      	b.n	800f14c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f142:	6839      	ldr	r1, [r7, #0]
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f000 fb35 	bl	800f7b4 <USBD_CtlError>
      break;
 800f14a:	bf00      	nop
  }

  return ret;
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f14e:	4618      	mov	r0, r3
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
	...

0800f158 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b084      	sub	sp, #16
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f162:	2300      	movs	r3, #0
 800f164:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f166:	2300      	movs	r3, #0
 800f168:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f16a:	2300      	movs	r3, #0
 800f16c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f16e:	683b      	ldr	r3, [r7, #0]
 800f170:	885b      	ldrh	r3, [r3, #2]
 800f172:	0a1b      	lsrs	r3, r3, #8
 800f174:	b29b      	uxth	r3, r3
 800f176:	3b01      	subs	r3, #1
 800f178:	2b06      	cmp	r3, #6
 800f17a:	f200 8128 	bhi.w	800f3ce <USBD_GetDescriptor+0x276>
 800f17e:	a201      	add	r2, pc, #4	; (adr r2, 800f184 <USBD_GetDescriptor+0x2c>)
 800f180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f184:	0800f1a1 	.word	0x0800f1a1
 800f188:	0800f1b9 	.word	0x0800f1b9
 800f18c:	0800f1f9 	.word	0x0800f1f9
 800f190:	0800f3cf 	.word	0x0800f3cf
 800f194:	0800f3cf 	.word	0x0800f3cf
 800f198:	0800f36f 	.word	0x0800f36f
 800f19c:	0800f39b 	.word	0x0800f39b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	7c12      	ldrb	r2, [r2, #16]
 800f1ac:	f107 0108 	add.w	r1, r7, #8
 800f1b0:	4610      	mov	r0, r2
 800f1b2:	4798      	blx	r3
 800f1b4:	60f8      	str	r0, [r7, #12]
      break;
 800f1b6:	e112      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	7c1b      	ldrb	r3, [r3, #16]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10d      	bne.n	800f1dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f1c8:	f107 0208 	add.w	r2, r7, #8
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4798      	blx	r3
 800f1d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	3301      	adds	r3, #1
 800f1d6:	2202      	movs	r2, #2
 800f1d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f1da:	e100      	b.n	800f3de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e4:	f107 0208 	add.w	r2, r7, #8
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	4798      	blx	r3
 800f1ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	2202      	movs	r2, #2
 800f1f4:	701a      	strb	r2, [r3, #0]
      break;
 800f1f6:	e0f2      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	885b      	ldrh	r3, [r3, #2]
 800f1fc:	b2db      	uxtb	r3, r3
 800f1fe:	2b05      	cmp	r3, #5
 800f200:	f200 80ac 	bhi.w	800f35c <USBD_GetDescriptor+0x204>
 800f204:	a201      	add	r2, pc, #4	; (adr r2, 800f20c <USBD_GetDescriptor+0xb4>)
 800f206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f20a:	bf00      	nop
 800f20c:	0800f225 	.word	0x0800f225
 800f210:	0800f259 	.word	0x0800f259
 800f214:	0800f28d 	.word	0x0800f28d
 800f218:	0800f2c1 	.word	0x0800f2c1
 800f21c:	0800f2f5 	.word	0x0800f2f5
 800f220:	0800f329 	.word	0x0800f329
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f22a:	685b      	ldr	r3, [r3, #4]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d00b      	beq.n	800f248 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	687a      	ldr	r2, [r7, #4]
 800f23a:	7c12      	ldrb	r2, [r2, #16]
 800f23c:	f107 0108 	add.w	r1, r7, #8
 800f240:	4610      	mov	r0, r2
 800f242:	4798      	blx	r3
 800f244:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f246:	e091      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f248:	6839      	ldr	r1, [r7, #0]
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f000 fab2 	bl	800f7b4 <USBD_CtlError>
            err++;
 800f250:	7afb      	ldrb	r3, [r7, #11]
 800f252:	3301      	adds	r3, #1
 800f254:	72fb      	strb	r3, [r7, #11]
          break;
 800f256:	e089      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00b      	beq.n	800f27c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	687a      	ldr	r2, [r7, #4]
 800f26e:	7c12      	ldrb	r2, [r2, #16]
 800f270:	f107 0108 	add.w	r1, r7, #8
 800f274:	4610      	mov	r0, r2
 800f276:	4798      	blx	r3
 800f278:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f27a:	e077      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f000 fa98 	bl	800f7b4 <USBD_CtlError>
            err++;
 800f284:	7afb      	ldrb	r3, [r7, #11]
 800f286:	3301      	adds	r3, #1
 800f288:	72fb      	strb	r3, [r7, #11]
          break;
 800f28a:	e06f      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d00b      	beq.n	800f2b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f29e:	68db      	ldr	r3, [r3, #12]
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	7c12      	ldrb	r2, [r2, #16]
 800f2a4:	f107 0108 	add.w	r1, r7, #8
 800f2a8:	4610      	mov	r0, r2
 800f2aa:	4798      	blx	r3
 800f2ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2ae:	e05d      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2b0:	6839      	ldr	r1, [r7, #0]
 800f2b2:	6878      	ldr	r0, [r7, #4]
 800f2b4:	f000 fa7e 	bl	800f7b4 <USBD_CtlError>
            err++;
 800f2b8:	7afb      	ldrb	r3, [r7, #11]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	72fb      	strb	r3, [r7, #11]
          break;
 800f2be:	e055      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d00b      	beq.n	800f2e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	687a      	ldr	r2, [r7, #4]
 800f2d6:	7c12      	ldrb	r2, [r2, #16]
 800f2d8:	f107 0108 	add.w	r1, r7, #8
 800f2dc:	4610      	mov	r0, r2
 800f2de:	4798      	blx	r3
 800f2e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2e2:	e043      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f000 fa64 	bl	800f7b4 <USBD_CtlError>
            err++;
 800f2ec:	7afb      	ldrb	r3, [r7, #11]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	72fb      	strb	r3, [r7, #11]
          break;
 800f2f2:	e03b      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f2fa:	695b      	ldr	r3, [r3, #20]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d00b      	beq.n	800f318 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f306:	695b      	ldr	r3, [r3, #20]
 800f308:	687a      	ldr	r2, [r7, #4]
 800f30a:	7c12      	ldrb	r2, [r2, #16]
 800f30c:	f107 0108 	add.w	r1, r7, #8
 800f310:	4610      	mov	r0, r2
 800f312:	4798      	blx	r3
 800f314:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f316:	e029      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f318:	6839      	ldr	r1, [r7, #0]
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 fa4a 	bl	800f7b4 <USBD_CtlError>
            err++;
 800f320:	7afb      	ldrb	r3, [r7, #11]
 800f322:	3301      	adds	r3, #1
 800f324:	72fb      	strb	r3, [r7, #11]
          break;
 800f326:	e021      	b.n	800f36c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d00b      	beq.n	800f34c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f33a:	699b      	ldr	r3, [r3, #24]
 800f33c:	687a      	ldr	r2, [r7, #4]
 800f33e:	7c12      	ldrb	r2, [r2, #16]
 800f340:	f107 0108 	add.w	r1, r7, #8
 800f344:	4610      	mov	r0, r2
 800f346:	4798      	blx	r3
 800f348:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f34a:	e00f      	b.n	800f36c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f34c:	6839      	ldr	r1, [r7, #0]
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 fa30 	bl	800f7b4 <USBD_CtlError>
            err++;
 800f354:	7afb      	ldrb	r3, [r7, #11]
 800f356:	3301      	adds	r3, #1
 800f358:	72fb      	strb	r3, [r7, #11]
          break;
 800f35a:	e007      	b.n	800f36c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f35c:	6839      	ldr	r1, [r7, #0]
 800f35e:	6878      	ldr	r0, [r7, #4]
 800f360:	f000 fa28 	bl	800f7b4 <USBD_CtlError>
          err++;
 800f364:	7afb      	ldrb	r3, [r7, #11]
 800f366:	3301      	adds	r3, #1
 800f368:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f36a:	bf00      	nop
      }
      break;
 800f36c:	e037      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	7c1b      	ldrb	r3, [r3, #16]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d109      	bne.n	800f38a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f37c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f37e:	f107 0208 	add.w	r2, r7, #8
 800f382:	4610      	mov	r0, r2
 800f384:	4798      	blx	r3
 800f386:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f388:	e029      	b.n	800f3de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f38a:	6839      	ldr	r1, [r7, #0]
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f000 fa11 	bl	800f7b4 <USBD_CtlError>
        err++;
 800f392:	7afb      	ldrb	r3, [r7, #11]
 800f394:	3301      	adds	r3, #1
 800f396:	72fb      	strb	r3, [r7, #11]
      break;
 800f398:	e021      	b.n	800f3de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	7c1b      	ldrb	r3, [r3, #16]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d10d      	bne.n	800f3be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3aa:	f107 0208 	add.w	r2, r7, #8
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	4798      	blx	r3
 800f3b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	2207      	movs	r2, #7
 800f3ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f3bc:	e00f      	b.n	800f3de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f3be:	6839      	ldr	r1, [r7, #0]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 f9f7 	bl	800f7b4 <USBD_CtlError>
        err++;
 800f3c6:	7afb      	ldrb	r3, [r7, #11]
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	72fb      	strb	r3, [r7, #11]
      break;
 800f3cc:	e007      	b.n	800f3de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	6878      	ldr	r0, [r7, #4]
 800f3d2:	f000 f9ef 	bl	800f7b4 <USBD_CtlError>
      err++;
 800f3d6:	7afb      	ldrb	r3, [r7, #11]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	72fb      	strb	r3, [r7, #11]
      break;
 800f3dc:	bf00      	nop
  }

  if (err != 0U)
 800f3de:	7afb      	ldrb	r3, [r7, #11]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d11e      	bne.n	800f422 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	88db      	ldrh	r3, [r3, #6]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d016      	beq.n	800f41a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f3ec:	893b      	ldrh	r3, [r7, #8]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d00e      	beq.n	800f410 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	88da      	ldrh	r2, [r3, #6]
 800f3f6:	893b      	ldrh	r3, [r7, #8]
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	bf28      	it	cs
 800f3fc:	4613      	movcs	r3, r2
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f402:	893b      	ldrh	r3, [r7, #8]
 800f404:	461a      	mov	r2, r3
 800f406:	68f9      	ldr	r1, [r7, #12]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 fa44 	bl	800f896 <USBD_CtlSendData>
 800f40e:	e009      	b.n	800f424 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f9ce 	bl	800f7b4 <USBD_CtlError>
 800f418:	e004      	b.n	800f424 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f41a:	6878      	ldr	r0, [r7, #4]
 800f41c:	f000 fa95 	bl	800f94a <USBD_CtlSendStatus>
 800f420:	e000      	b.n	800f424 <USBD_GetDescriptor+0x2cc>
    return;
 800f422:	bf00      	nop
  }
}
 800f424:	3710      	adds	r7, #16
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop

0800f42c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	6078      	str	r0, [r7, #4]
 800f434:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	889b      	ldrh	r3, [r3, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d131      	bne.n	800f4a2 <USBD_SetAddress+0x76>
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	88db      	ldrh	r3, [r3, #6]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d12d      	bne.n	800f4a2 <USBD_SetAddress+0x76>
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	885b      	ldrh	r3, [r3, #2]
 800f44a:	2b7f      	cmp	r3, #127	; 0x7f
 800f44c:	d829      	bhi.n	800f4a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	885b      	ldrh	r3, [r3, #2]
 800f452:	b2db      	uxtb	r3, r3
 800f454:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f458:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b03      	cmp	r3, #3
 800f464:	d104      	bne.n	800f470 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f466:	6839      	ldr	r1, [r7, #0]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f000 f9a3 	bl	800f7b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f46e:	e01d      	b.n	800f4ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	7bfa      	ldrb	r2, [r7, #15]
 800f474:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f478:	7bfb      	ldrb	r3, [r7, #15]
 800f47a:	4619      	mov	r1, r3
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f008 f9e1 	bl	8017844 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 fa61 	bl	800f94a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f488:	7bfb      	ldrb	r3, [r7, #15]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d004      	beq.n	800f498 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2202      	movs	r2, #2
 800f492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f496:	e009      	b.n	800f4ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2201      	movs	r2, #1
 800f49c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4a0:	e004      	b.n	800f4ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f4a2:	6839      	ldr	r1, [r7, #0]
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f000 f985 	bl	800f7b4 <USBD_CtlError>
  }
}
 800f4aa:	bf00      	nop
 800f4ac:	bf00      	nop
 800f4ae:	3710      	adds	r7, #16
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	885b      	ldrh	r3, [r3, #2]
 800f4c6:	b2da      	uxtb	r2, r3
 800f4c8:	4b4c      	ldr	r3, [pc, #304]	; (800f5fc <USBD_SetConfig+0x148>)
 800f4ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f4cc:	4b4b      	ldr	r3, [pc, #300]	; (800f5fc <USBD_SetConfig+0x148>)
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	2b01      	cmp	r3, #1
 800f4d2:	d905      	bls.n	800f4e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f4d4:	6839      	ldr	r1, [r7, #0]
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f000 f96c 	bl	800f7b4 <USBD_CtlError>
    return USBD_FAIL;
 800f4dc:	2303      	movs	r3, #3
 800f4de:	e088      	b.n	800f5f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b02      	cmp	r3, #2
 800f4ea:	d002      	beq.n	800f4f2 <USBD_SetConfig+0x3e>
 800f4ec:	2b03      	cmp	r3, #3
 800f4ee:	d025      	beq.n	800f53c <USBD_SetConfig+0x88>
 800f4f0:	e071      	b.n	800f5d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f4f2:	4b42      	ldr	r3, [pc, #264]	; (800f5fc <USBD_SetConfig+0x148>)
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d01c      	beq.n	800f534 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f4fa:	4b40      	ldr	r3, [pc, #256]	; (800f5fc <USBD_SetConfig+0x148>)
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	461a      	mov	r2, r3
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f504:	4b3d      	ldr	r3, [pc, #244]	; (800f5fc <USBD_SetConfig+0x148>)
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7ff f948 	bl	800e7a0 <USBD_SetClassConfig>
 800f510:	4603      	mov	r3, r0
 800f512:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f514:	7bfb      	ldrb	r3, [r7, #15]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d004      	beq.n	800f524 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f51a:	6839      	ldr	r1, [r7, #0]
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f949 	bl	800f7b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f522:	e065      	b.n	800f5f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 fa10 	bl	800f94a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2203      	movs	r2, #3
 800f52e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f532:	e05d      	b.n	800f5f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f534:	6878      	ldr	r0, [r7, #4]
 800f536:	f000 fa08 	bl	800f94a <USBD_CtlSendStatus>
      break;
 800f53a:	e059      	b.n	800f5f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f53c:	4b2f      	ldr	r3, [pc, #188]	; (800f5fc <USBD_SetConfig+0x148>)
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d112      	bne.n	800f56a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2202      	movs	r2, #2
 800f548:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f54c:	4b2b      	ldr	r3, [pc, #172]	; (800f5fc <USBD_SetConfig+0x148>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	461a      	mov	r2, r3
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f556:	4b29      	ldr	r3, [pc, #164]	; (800f5fc <USBD_SetConfig+0x148>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff f93b 	bl	800e7d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f9f1 	bl	800f94a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f568:	e042      	b.n	800f5f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f56a:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <USBD_SetConfig+0x148>)
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	461a      	mov	r2, r3
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	685b      	ldr	r3, [r3, #4]
 800f574:	429a      	cmp	r2, r3
 800f576:	d02a      	beq.n	800f5ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	4619      	mov	r1, r3
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff f929 	bl	800e7d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f586:	4b1d      	ldr	r3, [pc, #116]	; (800f5fc <USBD_SetConfig+0x148>)
 800f588:	781b      	ldrb	r3, [r3, #0]
 800f58a:	461a      	mov	r2, r3
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f590:	4b1a      	ldr	r3, [pc, #104]	; (800f5fc <USBD_SetConfig+0x148>)
 800f592:	781b      	ldrb	r3, [r3, #0]
 800f594:	4619      	mov	r1, r3
 800f596:	6878      	ldr	r0, [r7, #4]
 800f598:	f7ff f902 	bl	800e7a0 <USBD_SetClassConfig>
 800f59c:	4603      	mov	r3, r0
 800f59e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d00f      	beq.n	800f5c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 f903 	bl	800f7b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	685b      	ldr	r3, [r3, #4]
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f7ff f90e 	bl	800e7d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2202      	movs	r2, #2
 800f5c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f5c4:	e014      	b.n	800f5f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f000 f9bf 	bl	800f94a <USBD_CtlSendStatus>
      break;
 800f5cc:	e010      	b.n	800f5f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	f000 f9bb 	bl	800f94a <USBD_CtlSendStatus>
      break;
 800f5d4:	e00c      	b.n	800f5f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	f000 f8eb 	bl	800f7b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f5de:	4b07      	ldr	r3, [pc, #28]	; (800f5fc <USBD_SetConfig+0x148>)
 800f5e0:	781b      	ldrb	r3, [r3, #0]
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7ff f8f7 	bl	800e7d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f5ea:	2303      	movs	r3, #3
 800f5ec:	73fb      	strb	r3, [r7, #15]
      break;
 800f5ee:	bf00      	nop
  }

  return ret;
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3710      	adds	r7, #16
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	200027b4 	.word	0x200027b4

0800f600 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	88db      	ldrh	r3, [r3, #6]
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d004      	beq.n	800f61c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f612:	6839      	ldr	r1, [r7, #0]
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 f8cd 	bl	800f7b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f61a:	e023      	b.n	800f664 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f622:	b2db      	uxtb	r3, r3
 800f624:	2b02      	cmp	r3, #2
 800f626:	dc02      	bgt.n	800f62e <USBD_GetConfig+0x2e>
 800f628:	2b00      	cmp	r3, #0
 800f62a:	dc03      	bgt.n	800f634 <USBD_GetConfig+0x34>
 800f62c:	e015      	b.n	800f65a <USBD_GetConfig+0x5a>
 800f62e:	2b03      	cmp	r3, #3
 800f630:	d00b      	beq.n	800f64a <USBD_GetConfig+0x4a>
 800f632:	e012      	b.n	800f65a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	3308      	adds	r3, #8
 800f63e:	2201      	movs	r2, #1
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 f927 	bl	800f896 <USBD_CtlSendData>
        break;
 800f648:	e00c      	b.n	800f664 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3304      	adds	r3, #4
 800f64e:	2201      	movs	r2, #1
 800f650:	4619      	mov	r1, r3
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f91f 	bl	800f896 <USBD_CtlSendData>
        break;
 800f658:	e004      	b.n	800f664 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f65a:	6839      	ldr	r1, [r7, #0]
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f000 f8a9 	bl	800f7b4 <USBD_CtlError>
        break;
 800f662:	bf00      	nop
}
 800f664:	bf00      	nop
 800f666:	3708      	adds	r7, #8
 800f668:	46bd      	mov	sp, r7
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	3b01      	subs	r3, #1
 800f680:	2b02      	cmp	r3, #2
 800f682:	d81e      	bhi.n	800f6c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	88db      	ldrh	r3, [r3, #6]
 800f688:	2b02      	cmp	r3, #2
 800f68a:	d004      	beq.n	800f696 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f68c:	6839      	ldr	r1, [r7, #0]
 800f68e:	6878      	ldr	r0, [r7, #4]
 800f690:	f000 f890 	bl	800f7b4 <USBD_CtlError>
        break;
 800f694:	e01a      	b.n	800f6cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2201      	movs	r2, #1
 800f69a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d005      	beq.n	800f6b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	68db      	ldr	r3, [r3, #12]
 800f6aa:	f043 0202 	orr.w	r2, r3, #2
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	330c      	adds	r3, #12
 800f6b6:	2202      	movs	r2, #2
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 f8eb 	bl	800f896 <USBD_CtlSendData>
      break;
 800f6c0:	e004      	b.n	800f6cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f6c2:	6839      	ldr	r1, [r7, #0]
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f000 f875 	bl	800f7b4 <USBD_CtlError>
      break;
 800f6ca:	bf00      	nop
  }
}
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f6de:	683b      	ldr	r3, [r7, #0]
 800f6e0:	885b      	ldrh	r3, [r3, #2]
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d106      	bne.n	800f6f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f92b 	bl	800f94a <USBD_CtlSendStatus>
  }
}
 800f6f4:	bf00      	nop
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6fc:	b580      	push	{r7, lr}
 800f6fe:	b082      	sub	sp, #8
 800f700:	af00      	add	r7, sp, #0
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	3b01      	subs	r3, #1
 800f710:	2b02      	cmp	r3, #2
 800f712:	d80b      	bhi.n	800f72c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	885b      	ldrh	r3, [r3, #2]
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d10c      	bne.n	800f736 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2200      	movs	r2, #0
 800f720:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 f910 	bl	800f94a <USBD_CtlSendStatus>
      }
      break;
 800f72a:	e004      	b.n	800f736 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f72c:	6839      	ldr	r1, [r7, #0]
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f000 f840 	bl	800f7b4 <USBD_CtlError>
      break;
 800f734:	e000      	b.n	800f738 <USBD_ClrFeature+0x3c>
      break;
 800f736:	bf00      	nop
  }
}
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b084      	sub	sp, #16
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
 800f748:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	781a      	ldrb	r2, [r3, #0]
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3301      	adds	r3, #1
 800f75a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	781a      	ldrb	r2, [r3, #0]
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	3301      	adds	r3, #1
 800f768:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f76a:	68f8      	ldr	r0, [r7, #12]
 800f76c:	f7ff fabb 	bl	800ece6 <SWAPBYTE>
 800f770:	4603      	mov	r3, r0
 800f772:	461a      	mov	r2, r3
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	3301      	adds	r3, #1
 800f77c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3301      	adds	r3, #1
 800f782:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f7ff faae 	bl	800ece6 <SWAPBYTE>
 800f78a:	4603      	mov	r3, r0
 800f78c:	461a      	mov	r2, r3
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3301      	adds	r3, #1
 800f796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	3301      	adds	r3, #1
 800f79c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f79e:	68f8      	ldr	r0, [r7, #12]
 800f7a0:	f7ff faa1 	bl	800ece6 <SWAPBYTE>
 800f7a4:	4603      	mov	r3, r0
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	80da      	strh	r2, [r3, #6]
}
 800f7ac:	bf00      	nop
 800f7ae:	3710      	adds	r7, #16
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	bd80      	pop	{r7, pc}

0800f7b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b082      	sub	sp, #8
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7be:	2180      	movs	r1, #128	; 0x80
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f007 ffd5 	bl	8017770 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f007 ffd1 	bl	8017770 <USBD_LL_StallEP>
}
 800f7ce:	bf00      	nop
 800f7d0:	3708      	adds	r7, #8
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f7d6:	b580      	push	{r7, lr}
 800f7d8:	b086      	sub	sp, #24
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	60f8      	str	r0, [r7, #12]
 800f7de:	60b9      	str	r1, [r7, #8]
 800f7e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d036      	beq.n	800f85a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f7f0:	6938      	ldr	r0, [r7, #16]
 800f7f2:	f000 f836 	bl	800f862 <USBD_GetLen>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	b29a      	uxth	r2, r3
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f804:	7dfb      	ldrb	r3, [r7, #23]
 800f806:	68ba      	ldr	r2, [r7, #8]
 800f808:	4413      	add	r3, r2
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	7812      	ldrb	r2, [r2, #0]
 800f80e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f810:	7dfb      	ldrb	r3, [r7, #23]
 800f812:	3301      	adds	r3, #1
 800f814:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f816:	7dfb      	ldrb	r3, [r7, #23]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	4413      	add	r3, r2
 800f81c:	2203      	movs	r2, #3
 800f81e:	701a      	strb	r2, [r3, #0]
  idx++;
 800f820:	7dfb      	ldrb	r3, [r7, #23]
 800f822:	3301      	adds	r3, #1
 800f824:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f826:	e013      	b.n	800f850 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f828:	7dfb      	ldrb	r3, [r7, #23]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	4413      	add	r3, r2
 800f82e:	693a      	ldr	r2, [r7, #16]
 800f830:	7812      	ldrb	r2, [r2, #0]
 800f832:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	3301      	adds	r3, #1
 800f838:	613b      	str	r3, [r7, #16]
    idx++;
 800f83a:	7dfb      	ldrb	r3, [r7, #23]
 800f83c:	3301      	adds	r3, #1
 800f83e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f840:	7dfb      	ldrb	r3, [r7, #23]
 800f842:	68ba      	ldr	r2, [r7, #8]
 800f844:	4413      	add	r3, r2
 800f846:	2200      	movs	r2, #0
 800f848:	701a      	strb	r2, [r3, #0]
    idx++;
 800f84a:	7dfb      	ldrb	r3, [r7, #23]
 800f84c:	3301      	adds	r3, #1
 800f84e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1e7      	bne.n	800f828 <USBD_GetString+0x52>
 800f858:	e000      	b.n	800f85c <USBD_GetString+0x86>
    return;
 800f85a:	bf00      	nop
  }
}
 800f85c:	3718      	adds	r7, #24
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f862:	b480      	push	{r7}
 800f864:	b085      	sub	sp, #20
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f86a:	2300      	movs	r3, #0
 800f86c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f872:	e005      	b.n	800f880 <USBD_GetLen+0x1e>
  {
    len++;
 800f874:	7bfb      	ldrb	r3, [r7, #15]
 800f876:	3301      	adds	r3, #1
 800f878:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f87a:	68bb      	ldr	r3, [r7, #8]
 800f87c:	3301      	adds	r3, #1
 800f87e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	781b      	ldrb	r3, [r3, #0]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d1f5      	bne.n	800f874 <USBD_GetLen+0x12>
  }

  return len;
 800f888:	7bfb      	ldrb	r3, [r7, #15]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3714      	adds	r7, #20
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr

0800f896 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f896:	b580      	push	{r7, lr}
 800f898:	b084      	sub	sp, #16
 800f89a:	af00      	add	r7, sp, #0
 800f89c:	60f8      	str	r0, [r7, #12]
 800f89e:	60b9      	str	r1, [r7, #8]
 800f8a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2202      	movs	r2, #2
 800f8a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	687a      	ldr	r2, [r7, #4]
 800f8ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	68ba      	ldr	r2, [r7, #8]
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	68f8      	ldr	r0, [r7, #12]
 800f8be:	f007 ffe0 	bl	8017882 <USBD_LL_Transmit>

  return USBD_OK;
 800f8c2:	2300      	movs	r3, #0
}
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	3710      	adds	r7, #16
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}

0800f8cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b084      	sub	sp, #16
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68ba      	ldr	r2, [r7, #8]
 800f8dc:	2100      	movs	r1, #0
 800f8de:	68f8      	ldr	r0, [r7, #12]
 800f8e0:	f007 ffcf 	bl	8017882 <USBD_LL_Transmit>

  return USBD_OK;
 800f8e4:	2300      	movs	r3, #0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3710      	adds	r7, #16
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	bd80      	pop	{r7, pc}

0800f8ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f8ee:	b580      	push	{r7, lr}
 800f8f0:	b084      	sub	sp, #16
 800f8f2:	af00      	add	r7, sp, #0
 800f8f4:	60f8      	str	r0, [r7, #12]
 800f8f6:	60b9      	str	r1, [r7, #8]
 800f8f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2203      	movs	r2, #3
 800f8fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	2100      	movs	r1, #0
 800f918:	68f8      	ldr	r0, [r7, #12]
 800f91a:	f007 ffd3 	bl	80178c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	60f8      	str	r0, [r7, #12]
 800f930:	60b9      	str	r1, [r7, #8]
 800f932:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68ba      	ldr	r2, [r7, #8]
 800f938:	2100      	movs	r1, #0
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f007 ffc2 	bl	80178c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f940:	2300      	movs	r3, #0
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b082      	sub	sp, #8
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	2204      	movs	r2, #4
 800f956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f95a:	2300      	movs	r3, #0
 800f95c:	2200      	movs	r2, #0
 800f95e:	2100      	movs	r1, #0
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f007 ff8e 	bl	8017882 <USBD_LL_Transmit>

  return USBD_OK;
 800f966:	2300      	movs	r3, #0
}
 800f968:	4618      	mov	r0, r3
 800f96a:	3708      	adds	r7, #8
 800f96c:	46bd      	mov	sp, r7
 800f96e:	bd80      	pop	{r7, pc}

0800f970 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2205      	movs	r2, #5
 800f97c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f980:	2300      	movs	r3, #0
 800f982:	2200      	movs	r2, #0
 800f984:	2100      	movs	r1, #0
 800f986:	6878      	ldr	r0, [r7, #4]
 800f988:	f007 ff9c 	bl	80178c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3708      	adds	r7, #8
 800f992:	46bd      	mov	sp, r7
 800f994:	bd80      	pop	{r7, pc}
	...

0800f998 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f9a2:	79fb      	ldrb	r3, [r7, #7]
 800f9a4:	4a08      	ldr	r2, [pc, #32]	; (800f9c8 <disk_status+0x30>)
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4413      	add	r3, r2
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	685b      	ldr	r3, [r3, #4]
 800f9ae:	79fa      	ldrb	r2, [r7, #7]
 800f9b0:	4905      	ldr	r1, [pc, #20]	; (800f9c8 <disk_status+0x30>)
 800f9b2:	440a      	add	r2, r1
 800f9b4:	7a12      	ldrb	r2, [r2, #8]
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	4798      	blx	r3
 800f9ba:	4603      	mov	r3, r0
 800f9bc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3710      	adds	r7, #16
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	200027e0 	.word	0x200027e0

0800f9cc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f9da:	79fb      	ldrb	r3, [r7, #7]
 800f9dc:	4a0d      	ldr	r2, [pc, #52]	; (800fa14 <disk_initialize+0x48>)
 800f9de:	5cd3      	ldrb	r3, [r2, r3]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d111      	bne.n	800fa08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f9e4:	79fb      	ldrb	r3, [r7, #7]
 800f9e6:	4a0b      	ldr	r2, [pc, #44]	; (800fa14 <disk_initialize+0x48>)
 800f9e8:	2101      	movs	r1, #1
 800f9ea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f9ec:	79fb      	ldrb	r3, [r7, #7]
 800f9ee:	4a09      	ldr	r2, [pc, #36]	; (800fa14 <disk_initialize+0x48>)
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4413      	add	r3, r2
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	79fa      	ldrb	r2, [r7, #7]
 800f9fa:	4906      	ldr	r1, [pc, #24]	; (800fa14 <disk_initialize+0x48>)
 800f9fc:	440a      	add	r2, r1
 800f9fe:	7a12      	ldrb	r2, [r2, #8]
 800fa00:	4610      	mov	r0, r2
 800fa02:	4798      	blx	r3
 800fa04:	4603      	mov	r3, r0
 800fa06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fa08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	200027e0 	.word	0x200027e0

0800fa18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fa18:	b590      	push	{r4, r7, lr}
 800fa1a:	b087      	sub	sp, #28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60b9      	str	r1, [r7, #8]
 800fa20:	607a      	str	r2, [r7, #4]
 800fa22:	603b      	str	r3, [r7, #0]
 800fa24:	4603      	mov	r3, r0
 800fa26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fa28:	7bfb      	ldrb	r3, [r7, #15]
 800fa2a:	4a0a      	ldr	r2, [pc, #40]	; (800fa54 <disk_read+0x3c>)
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	4413      	add	r3, r2
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	689c      	ldr	r4, [r3, #8]
 800fa34:	7bfb      	ldrb	r3, [r7, #15]
 800fa36:	4a07      	ldr	r2, [pc, #28]	; (800fa54 <disk_read+0x3c>)
 800fa38:	4413      	add	r3, r2
 800fa3a:	7a18      	ldrb	r0, [r3, #8]
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	687a      	ldr	r2, [r7, #4]
 800fa40:	68b9      	ldr	r1, [r7, #8]
 800fa42:	47a0      	blx	r4
 800fa44:	4603      	mov	r3, r0
 800fa46:	75fb      	strb	r3, [r7, #23]
  return res;
 800fa48:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	371c      	adds	r7, #28
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd90      	pop	{r4, r7, pc}
 800fa52:	bf00      	nop
 800fa54:	200027e0 	.word	0x200027e0

0800fa58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fa58:	b590      	push	{r4, r7, lr}
 800fa5a:	b087      	sub	sp, #28
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	60b9      	str	r1, [r7, #8]
 800fa60:	607a      	str	r2, [r7, #4]
 800fa62:	603b      	str	r3, [r7, #0]
 800fa64:	4603      	mov	r3, r0
 800fa66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fa68:	7bfb      	ldrb	r3, [r7, #15]
 800fa6a:	4a0a      	ldr	r2, [pc, #40]	; (800fa94 <disk_write+0x3c>)
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	4413      	add	r3, r2
 800fa70:	685b      	ldr	r3, [r3, #4]
 800fa72:	68dc      	ldr	r4, [r3, #12]
 800fa74:	7bfb      	ldrb	r3, [r7, #15]
 800fa76:	4a07      	ldr	r2, [pc, #28]	; (800fa94 <disk_write+0x3c>)
 800fa78:	4413      	add	r3, r2
 800fa7a:	7a18      	ldrb	r0, [r3, #8]
 800fa7c:	683b      	ldr	r3, [r7, #0]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	68b9      	ldr	r1, [r7, #8]
 800fa82:	47a0      	blx	r4
 800fa84:	4603      	mov	r3, r0
 800fa86:	75fb      	strb	r3, [r7, #23]
  return res;
 800fa88:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	371c      	adds	r7, #28
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd90      	pop	{r4, r7, pc}
 800fa92:	bf00      	nop
 800fa94:	200027e0 	.word	0x200027e0

0800fa98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	4603      	mov	r3, r0
 800faa0:	603a      	str	r2, [r7, #0]
 800faa2:	71fb      	strb	r3, [r7, #7]
 800faa4:	460b      	mov	r3, r1
 800faa6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800faa8:	79fb      	ldrb	r3, [r7, #7]
 800faaa:	4a09      	ldr	r2, [pc, #36]	; (800fad0 <disk_ioctl+0x38>)
 800faac:	009b      	lsls	r3, r3, #2
 800faae:	4413      	add	r3, r2
 800fab0:	685b      	ldr	r3, [r3, #4]
 800fab2:	691b      	ldr	r3, [r3, #16]
 800fab4:	79fa      	ldrb	r2, [r7, #7]
 800fab6:	4906      	ldr	r1, [pc, #24]	; (800fad0 <disk_ioctl+0x38>)
 800fab8:	440a      	add	r2, r1
 800faba:	7a10      	ldrb	r0, [r2, #8]
 800fabc:	79b9      	ldrb	r1, [r7, #6]
 800fabe:	683a      	ldr	r2, [r7, #0]
 800fac0:	4798      	blx	r3
 800fac2:	4603      	mov	r3, r0
 800fac4:	73fb      	strb	r3, [r7, #15]
  return res;
 800fac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3710      	adds	r7, #16
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}
 800fad0:	200027e0 	.word	0x200027e0

0800fad4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fad4:	b480      	push	{r7}
 800fad6:	b085      	sub	sp, #20
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	3301      	adds	r3, #1
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fae4:	89fb      	ldrh	r3, [r7, #14]
 800fae6:	021b      	lsls	r3, r3, #8
 800fae8:	b21a      	sxth	r2, r3
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	b21b      	sxth	r3, r3
 800faf0:	4313      	orrs	r3, r2
 800faf2:	b21b      	sxth	r3, r3
 800faf4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800faf6:	89fb      	ldrh	r3, [r7, #14]
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fb04:	b480      	push	{r7}
 800fb06:	b085      	sub	sp, #20
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	3303      	adds	r3, #3
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	021b      	lsls	r3, r3, #8
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	3202      	adds	r2, #2
 800fb1c:	7812      	ldrb	r2, [r2, #0]
 800fb1e:	4313      	orrs	r3, r2
 800fb20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fb22:	68fb      	ldr	r3, [r7, #12]
 800fb24:	021b      	lsls	r3, r3, #8
 800fb26:	687a      	ldr	r2, [r7, #4]
 800fb28:	3201      	adds	r2, #1
 800fb2a:	7812      	ldrb	r2, [r2, #0]
 800fb2c:	4313      	orrs	r3, r2
 800fb2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	021b      	lsls	r3, r3, #8
 800fb34:	687a      	ldr	r2, [r7, #4]
 800fb36:	7812      	ldrb	r2, [r2, #0]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	60fb      	str	r3, [r7, #12]
	return rv;
 800fb3c:	68fb      	ldr	r3, [r7, #12]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3714      	adds	r7, #20
 800fb42:	46bd      	mov	sp, r7
 800fb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb48:	4770      	bx	lr

0800fb4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fb4a:	b480      	push	{r7}
 800fb4c:	b083      	sub	sp, #12
 800fb4e:	af00      	add	r7, sp, #0
 800fb50:	6078      	str	r0, [r7, #4]
 800fb52:	460b      	mov	r3, r1
 800fb54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	1c5a      	adds	r2, r3, #1
 800fb5a:	607a      	str	r2, [r7, #4]
 800fb5c:	887a      	ldrh	r2, [r7, #2]
 800fb5e:	b2d2      	uxtb	r2, r2
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	887b      	ldrh	r3, [r7, #2]
 800fb64:	0a1b      	lsrs	r3, r3, #8
 800fb66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	1c5a      	adds	r2, r3, #1
 800fb6c:	607a      	str	r2, [r7, #4]
 800fb6e:	887a      	ldrh	r2, [r7, #2]
 800fb70:	b2d2      	uxtb	r2, r2
 800fb72:	701a      	strb	r2, [r3, #0]
}
 800fb74:	bf00      	nop
 800fb76:	370c      	adds	r7, #12
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb7e:	4770      	bx	lr

0800fb80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fb80:	b480      	push	{r7}
 800fb82:	b083      	sub	sp, #12
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	1c5a      	adds	r2, r3, #1
 800fb8e:	607a      	str	r2, [r7, #4]
 800fb90:	683a      	ldr	r2, [r7, #0]
 800fb92:	b2d2      	uxtb	r2, r2
 800fb94:	701a      	strb	r2, [r3, #0]
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	0a1b      	lsrs	r3, r3, #8
 800fb9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	1c5a      	adds	r2, r3, #1
 800fba0:	607a      	str	r2, [r7, #4]
 800fba2:	683a      	ldr	r2, [r7, #0]
 800fba4:	b2d2      	uxtb	r2, r2
 800fba6:	701a      	strb	r2, [r3, #0]
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	0a1b      	lsrs	r3, r3, #8
 800fbac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	1c5a      	adds	r2, r3, #1
 800fbb2:	607a      	str	r2, [r7, #4]
 800fbb4:	683a      	ldr	r2, [r7, #0]
 800fbb6:	b2d2      	uxtb	r2, r2
 800fbb8:	701a      	strb	r2, [r3, #0]
 800fbba:	683b      	ldr	r3, [r7, #0]
 800fbbc:	0a1b      	lsrs	r3, r3, #8
 800fbbe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	607a      	str	r2, [r7, #4]
 800fbc6:	683a      	ldr	r2, [r7, #0]
 800fbc8:	b2d2      	uxtb	r2, r2
 800fbca:	701a      	strb	r2, [r3, #0]
}
 800fbcc:	bf00      	nop
 800fbce:	370c      	adds	r7, #12
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr

0800fbd8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fbd8:	b480      	push	{r7}
 800fbda:	b087      	sub	sp, #28
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00d      	beq.n	800fc0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fbf2:	693a      	ldr	r2, [r7, #16]
 800fbf4:	1c53      	adds	r3, r2, #1
 800fbf6:	613b      	str	r3, [r7, #16]
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	1c59      	adds	r1, r3, #1
 800fbfc:	6179      	str	r1, [r7, #20]
 800fbfe:	7812      	ldrb	r2, [r2, #0]
 800fc00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3b01      	subs	r3, #1
 800fc06:	607b      	str	r3, [r7, #4]
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1f1      	bne.n	800fbf2 <mem_cpy+0x1a>
	}
}
 800fc0e:	bf00      	nop
 800fc10:	371c      	adds	r7, #28
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr

0800fc1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fc1a:	b480      	push	{r7}
 800fc1c:	b087      	sub	sp, #28
 800fc1e:	af00      	add	r7, sp, #0
 800fc20:	60f8      	str	r0, [r7, #12]
 800fc22:	60b9      	str	r1, [r7, #8]
 800fc24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fc2a:	697b      	ldr	r3, [r7, #20]
 800fc2c:	1c5a      	adds	r2, r3, #1
 800fc2e:	617a      	str	r2, [r7, #20]
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	b2d2      	uxtb	r2, r2
 800fc34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	3b01      	subs	r3, #1
 800fc3a:	607b      	str	r3, [r7, #4]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d1f3      	bne.n	800fc2a <mem_set+0x10>
}
 800fc42:	bf00      	nop
 800fc44:	bf00      	nop
 800fc46:	371c      	adds	r7, #28
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fc50:	b480      	push	{r7}
 800fc52:	b089      	sub	sp, #36	; 0x24
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60f8      	str	r0, [r7, #12]
 800fc58:	60b9      	str	r1, [r7, #8]
 800fc5a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	61fb      	str	r3, [r7, #28]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fc64:	2300      	movs	r3, #0
 800fc66:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fc68:	69fb      	ldr	r3, [r7, #28]
 800fc6a:	1c5a      	adds	r2, r3, #1
 800fc6c:	61fa      	str	r2, [r7, #28]
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	4619      	mov	r1, r3
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	1c5a      	adds	r2, r3, #1
 800fc76:	61ba      	str	r2, [r7, #24]
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	1acb      	subs	r3, r1, r3
 800fc7c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	3b01      	subs	r3, #1
 800fc82:	607b      	str	r3, [r7, #4]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d002      	beq.n	800fc90 <mem_cmp+0x40>
 800fc8a:	697b      	ldr	r3, [r7, #20]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d0eb      	beq.n	800fc68 <mem_cmp+0x18>

	return r;
 800fc90:	697b      	ldr	r3, [r7, #20]
}
 800fc92:	4618      	mov	r0, r3
 800fc94:	3724      	adds	r7, #36	; 0x24
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr

0800fc9e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fc9e:	b480      	push	{r7}
 800fca0:	b083      	sub	sp, #12
 800fca2:	af00      	add	r7, sp, #0
 800fca4:	6078      	str	r0, [r7, #4]
 800fca6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fca8:	e002      	b.n	800fcb0 <chk_chr+0x12>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	3301      	adds	r3, #1
 800fcae:	607b      	str	r3, [r7, #4]
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d005      	beq.n	800fcc4 <chk_chr+0x26>
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	461a      	mov	r2, r3
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	4293      	cmp	r3, r2
 800fcc2:	d1f2      	bne.n	800fcaa <chk_chr+0xc>
	return *str;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	781b      	ldrb	r3, [r3, #0]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b082      	sub	sp, #8
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d009      	beq.n	800fcf6 <lock_fs+0x22>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f003 f98d 	bl	8013006 <ff_req_grant>
 800fcec:	4603      	mov	r3, r0
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <lock_fs+0x22>
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	e000      	b.n	800fcf8 <lock_fs+0x24>
 800fcf6:	2300      	movs	r3, #0
}
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	3708      	adds	r7, #8
 800fcfc:	46bd      	mov	sp, r7
 800fcfe:	bd80      	pop	{r7, pc}

0800fd00 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
 800fd08:	460b      	mov	r3, r1
 800fd0a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d00d      	beq.n	800fd2e <unlock_fs+0x2e>
 800fd12:	78fb      	ldrb	r3, [r7, #3]
 800fd14:	2b0c      	cmp	r3, #12
 800fd16:	d00a      	beq.n	800fd2e <unlock_fs+0x2e>
 800fd18:	78fb      	ldrb	r3, [r7, #3]
 800fd1a:	2b0b      	cmp	r3, #11
 800fd1c:	d007      	beq.n	800fd2e <unlock_fs+0x2e>
 800fd1e:	78fb      	ldrb	r3, [r7, #3]
 800fd20:	2b0f      	cmp	r3, #15
 800fd22:	d004      	beq.n	800fd2e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	695b      	ldr	r3, [r3, #20]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f003 f981 	bl	8013030 <ff_rel_grant>
	}
}
 800fd2e:	bf00      	nop
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
	...

0800fd38 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd42:	2300      	movs	r3, #0
 800fd44:	60bb      	str	r3, [r7, #8]
 800fd46:	68bb      	ldr	r3, [r7, #8]
 800fd48:	60fb      	str	r3, [r7, #12]
 800fd4a:	e029      	b.n	800fda0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fd4c:	4a27      	ldr	r2, [pc, #156]	; (800fdec <chk_lock+0xb4>)
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	011b      	lsls	r3, r3, #4
 800fd52:	4413      	add	r3, r2
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d01d      	beq.n	800fd96 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd5a:	4a24      	ldr	r2, [pc, #144]	; (800fdec <chk_lock+0xb4>)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	011b      	lsls	r3, r3, #4
 800fd60:	4413      	add	r3, r2
 800fd62:	681a      	ldr	r2, [r3, #0]
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d116      	bne.n	800fd9a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fd6c:	4a1f      	ldr	r2, [pc, #124]	; (800fdec <chk_lock+0xb4>)
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	011b      	lsls	r3, r3, #4
 800fd72:	4413      	add	r3, r2
 800fd74:	3304      	adds	r3, #4
 800fd76:	681a      	ldr	r2, [r3, #0]
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d10c      	bne.n	800fd9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd80:	4a1a      	ldr	r2, [pc, #104]	; (800fdec <chk_lock+0xb4>)
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	011b      	lsls	r3, r3, #4
 800fd86:	4413      	add	r3, r2
 800fd88:	3308      	adds	r3, #8
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d102      	bne.n	800fd9a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fd94:	e007      	b.n	800fda6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fd96:	2301      	movs	r3, #1
 800fd98:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	60fb      	str	r3, [r7, #12]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d9d2      	bls.n	800fd4c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	d109      	bne.n	800fdc0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fdac:	68bb      	ldr	r3, [r7, #8]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d102      	bne.n	800fdb8 <chk_lock+0x80>
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	2b02      	cmp	r3, #2
 800fdb6:	d101      	bne.n	800fdbc <chk_lock+0x84>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	e010      	b.n	800fdde <chk_lock+0xa6>
 800fdbc:	2312      	movs	r3, #18
 800fdbe:	e00e      	b.n	800fdde <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d108      	bne.n	800fdd8 <chk_lock+0xa0>
 800fdc6:	4a09      	ldr	r2, [pc, #36]	; (800fdec <chk_lock+0xb4>)
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	011b      	lsls	r3, r3, #4
 800fdcc:	4413      	add	r3, r2
 800fdce:	330c      	adds	r3, #12
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fdd6:	d101      	bne.n	800fddc <chk_lock+0xa4>
 800fdd8:	2310      	movs	r3, #16
 800fdda:	e000      	b.n	800fdde <chk_lock+0xa6>
 800fddc:	2300      	movs	r3, #0
}
 800fdde:	4618      	mov	r0, r3
 800fde0:	3714      	adds	r7, #20
 800fde2:	46bd      	mov	sp, r7
 800fde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde8:	4770      	bx	lr
 800fdea:	bf00      	nop
 800fdec:	200027c0 	.word	0x200027c0

0800fdf0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b083      	sub	sp, #12
 800fdf4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	607b      	str	r3, [r7, #4]
 800fdfa:	e002      	b.n	800fe02 <enq_lock+0x12>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	607b      	str	r3, [r7, #4]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	2b01      	cmp	r3, #1
 800fe06:	d806      	bhi.n	800fe16 <enq_lock+0x26>
 800fe08:	4a09      	ldr	r2, [pc, #36]	; (800fe30 <enq_lock+0x40>)
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	011b      	lsls	r3, r3, #4
 800fe0e:	4413      	add	r3, r2
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d1f2      	bne.n	800fdfc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	bf14      	ite	ne
 800fe1c:	2301      	movne	r3, #1
 800fe1e:	2300      	moveq	r3, #0
 800fe20:	b2db      	uxtb	r3, r3
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	370c      	adds	r7, #12
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop
 800fe30:	200027c0 	.word	0x200027c0

0800fe34 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fe34:	b480      	push	{r7}
 800fe36:	b085      	sub	sp, #20
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
 800fe3c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe3e:	2300      	movs	r3, #0
 800fe40:	60fb      	str	r3, [r7, #12]
 800fe42:	e01f      	b.n	800fe84 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fe44:	4a41      	ldr	r2, [pc, #260]	; (800ff4c <inc_lock+0x118>)
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	011b      	lsls	r3, r3, #4
 800fe4a:	4413      	add	r3, r2
 800fe4c:	681a      	ldr	r2, [r3, #0]
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d113      	bne.n	800fe7e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fe56:	4a3d      	ldr	r2, [pc, #244]	; (800ff4c <inc_lock+0x118>)
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	4413      	add	r3, r2
 800fe5e:	3304      	adds	r3, #4
 800fe60:	681a      	ldr	r2, [r3, #0]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fe66:	429a      	cmp	r2, r3
 800fe68:	d109      	bne.n	800fe7e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fe6a:	4a38      	ldr	r2, [pc, #224]	; (800ff4c <inc_lock+0x118>)
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	011b      	lsls	r3, r3, #4
 800fe70:	4413      	add	r3, r2
 800fe72:	3308      	adds	r3, #8
 800fe74:	681a      	ldr	r2, [r3, #0]
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d006      	beq.n	800fe8c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	3301      	adds	r3, #1
 800fe82:	60fb      	str	r3, [r7, #12]
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d9dc      	bls.n	800fe44 <inc_lock+0x10>
 800fe8a:	e000      	b.n	800fe8e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fe8c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	d132      	bne.n	800fefa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fe94:	2300      	movs	r3, #0
 800fe96:	60fb      	str	r3, [r7, #12]
 800fe98:	e002      	b.n	800fea0 <inc_lock+0x6c>
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	60fb      	str	r3, [r7, #12]
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2b01      	cmp	r3, #1
 800fea4:	d806      	bhi.n	800feb4 <inc_lock+0x80>
 800fea6:	4a29      	ldr	r2, [pc, #164]	; (800ff4c <inc_lock+0x118>)
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	011b      	lsls	r3, r3, #4
 800feac:	4413      	add	r3, r2
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d1f2      	bne.n	800fe9a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	2b02      	cmp	r3, #2
 800feb8:	d101      	bne.n	800febe <inc_lock+0x8a>
 800feba:	2300      	movs	r3, #0
 800febc:	e040      	b.n	800ff40 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681a      	ldr	r2, [r3, #0]
 800fec2:	4922      	ldr	r1, [pc, #136]	; (800ff4c <inc_lock+0x118>)
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	011b      	lsls	r3, r3, #4
 800fec8:	440b      	add	r3, r1
 800feca:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	689a      	ldr	r2, [r3, #8]
 800fed0:	491e      	ldr	r1, [pc, #120]	; (800ff4c <inc_lock+0x118>)
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	011b      	lsls	r3, r3, #4
 800fed6:	440b      	add	r3, r1
 800fed8:	3304      	adds	r3, #4
 800feda:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	695a      	ldr	r2, [r3, #20]
 800fee0:	491a      	ldr	r1, [pc, #104]	; (800ff4c <inc_lock+0x118>)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	011b      	lsls	r3, r3, #4
 800fee6:	440b      	add	r3, r1
 800fee8:	3308      	adds	r3, #8
 800feea:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800feec:	4a17      	ldr	r2, [pc, #92]	; (800ff4c <inc_lock+0x118>)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	011b      	lsls	r3, r3, #4
 800fef2:	4413      	add	r3, r2
 800fef4:	330c      	adds	r3, #12
 800fef6:	2200      	movs	r2, #0
 800fef8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d009      	beq.n	800ff14 <inc_lock+0xe0>
 800ff00:	4a12      	ldr	r2, [pc, #72]	; (800ff4c <inc_lock+0x118>)
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	011b      	lsls	r3, r3, #4
 800ff06:	4413      	add	r3, r2
 800ff08:	330c      	adds	r3, #12
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d001      	beq.n	800ff14 <inc_lock+0xe0>
 800ff10:	2300      	movs	r3, #0
 800ff12:	e015      	b.n	800ff40 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d108      	bne.n	800ff2c <inc_lock+0xf8>
 800ff1a:	4a0c      	ldr	r2, [pc, #48]	; (800ff4c <inc_lock+0x118>)
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	011b      	lsls	r3, r3, #4
 800ff20:	4413      	add	r3, r2
 800ff22:	330c      	adds	r3, #12
 800ff24:	881b      	ldrh	r3, [r3, #0]
 800ff26:	3301      	adds	r3, #1
 800ff28:	b29a      	uxth	r2, r3
 800ff2a:	e001      	b.n	800ff30 <inc_lock+0xfc>
 800ff2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff30:	4906      	ldr	r1, [pc, #24]	; (800ff4c <inc_lock+0x118>)
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	011b      	lsls	r3, r3, #4
 800ff36:	440b      	add	r3, r1
 800ff38:	330c      	adds	r3, #12
 800ff3a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	3301      	adds	r3, #1
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	3714      	adds	r7, #20
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr
 800ff4c:	200027c0 	.word	0x200027c0

0800ff50 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ff50:	b480      	push	{r7}
 800ff52:	b085      	sub	sp, #20
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3b01      	subs	r3, #1
 800ff5c:	607b      	str	r3, [r7, #4]
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d825      	bhi.n	800ffb0 <dec_lock+0x60>
		n = Files[i].ctr;
 800ff64:	4a17      	ldr	r2, [pc, #92]	; (800ffc4 <dec_lock+0x74>)
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	011b      	lsls	r3, r3, #4
 800ff6a:	4413      	add	r3, r2
 800ff6c:	330c      	adds	r3, #12
 800ff6e:	881b      	ldrh	r3, [r3, #0]
 800ff70:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ff72:	89fb      	ldrh	r3, [r7, #14]
 800ff74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff78:	d101      	bne.n	800ff7e <dec_lock+0x2e>
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ff7e:	89fb      	ldrh	r3, [r7, #14]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d002      	beq.n	800ff8a <dec_lock+0x3a>
 800ff84:	89fb      	ldrh	r3, [r7, #14]
 800ff86:	3b01      	subs	r3, #1
 800ff88:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ff8a:	4a0e      	ldr	r2, [pc, #56]	; (800ffc4 <dec_lock+0x74>)
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	011b      	lsls	r3, r3, #4
 800ff90:	4413      	add	r3, r2
 800ff92:	330c      	adds	r3, #12
 800ff94:	89fa      	ldrh	r2, [r7, #14]
 800ff96:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ff98:	89fb      	ldrh	r3, [r7, #14]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d105      	bne.n	800ffaa <dec_lock+0x5a>
 800ff9e:	4a09      	ldr	r2, [pc, #36]	; (800ffc4 <dec_lock+0x74>)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	011b      	lsls	r3, r3, #4
 800ffa4:	4413      	add	r3, r2
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	737b      	strb	r3, [r7, #13]
 800ffae:	e001      	b.n	800ffb4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ffb0:	2302      	movs	r3, #2
 800ffb2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ffb4:	7b7b      	ldrb	r3, [r7, #13]
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	200027c0 	.word	0x200027c0

0800ffc8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ffd0:	2300      	movs	r3, #0
 800ffd2:	60fb      	str	r3, [r7, #12]
 800ffd4:	e010      	b.n	800fff8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ffd6:	4a0d      	ldr	r2, [pc, #52]	; (801000c <clear_lock+0x44>)
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	011b      	lsls	r3, r3, #4
 800ffdc:	4413      	add	r3, r2
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	687a      	ldr	r2, [r7, #4]
 800ffe2:	429a      	cmp	r2, r3
 800ffe4:	d105      	bne.n	800fff2 <clear_lock+0x2a>
 800ffe6:	4a09      	ldr	r2, [pc, #36]	; (801000c <clear_lock+0x44>)
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	011b      	lsls	r3, r3, #4
 800ffec:	4413      	add	r3, r2
 800ffee:	2200      	movs	r2, #0
 800fff0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	3301      	adds	r3, #1
 800fff6:	60fb      	str	r3, [r7, #12]
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	2b01      	cmp	r3, #1
 800fffc:	d9eb      	bls.n	800ffd6 <clear_lock+0xe>
	}
}
 800fffe:	bf00      	nop
 8010000:	bf00      	nop
 8010002:	3714      	adds	r7, #20
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr
 801000c:	200027c0 	.word	0x200027c0

08010010 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b086      	sub	sp, #24
 8010014:	af00      	add	r7, sp, #0
 8010016:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	78db      	ldrb	r3, [r3, #3]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d034      	beq.n	801008e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010028:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	7858      	ldrb	r0, [r3, #1]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010034:	2301      	movs	r3, #1
 8010036:	697a      	ldr	r2, [r7, #20]
 8010038:	f7ff fd0e 	bl	800fa58 <disk_write>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d002      	beq.n	8010048 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010042:	2301      	movs	r3, #1
 8010044:	73fb      	strb	r3, [r7, #15]
 8010046:	e022      	b.n	801008e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	2200      	movs	r2, #0
 801004c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010052:	697a      	ldr	r2, [r7, #20]
 8010054:	1ad2      	subs	r2, r2, r3
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801005a:	429a      	cmp	r2, r3
 801005c:	d217      	bcs.n	801008e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	789b      	ldrb	r3, [r3, #2]
 8010062:	613b      	str	r3, [r7, #16]
 8010064:	e010      	b.n	8010088 <sync_window+0x78>
					wsect += fs->fsize;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801006a:	697a      	ldr	r2, [r7, #20]
 801006c:	4413      	add	r3, r2
 801006e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	7858      	ldrb	r0, [r3, #1]
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801007a:	2301      	movs	r3, #1
 801007c:	697a      	ldr	r2, [r7, #20]
 801007e:	f7ff fceb 	bl	800fa58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010082:	693b      	ldr	r3, [r7, #16]
 8010084:	3b01      	subs	r3, #1
 8010086:	613b      	str	r3, [r7, #16]
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	2b01      	cmp	r3, #1
 801008c:	d8eb      	bhi.n	8010066 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801008e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010090:	4618      	mov	r0, r3
 8010092:	3718      	adds	r7, #24
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
 80100a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80100a2:	2300      	movs	r3, #0
 80100a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100aa:	683a      	ldr	r2, [r7, #0]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d01b      	beq.n	80100e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80100b0:	6878      	ldr	r0, [r7, #4]
 80100b2:	f7ff ffad 	bl	8010010 <sync_window>
 80100b6:	4603      	mov	r3, r0
 80100b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80100ba:	7bfb      	ldrb	r3, [r7, #15]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d113      	bne.n	80100e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	7858      	ldrb	r0, [r3, #1]
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80100ca:	2301      	movs	r3, #1
 80100cc:	683a      	ldr	r2, [r7, #0]
 80100ce:	f7ff fca3 	bl	800fa18 <disk_read>
 80100d2:	4603      	mov	r3, r0
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d004      	beq.n	80100e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80100d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80100de:	2301      	movs	r3, #1
 80100e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	683a      	ldr	r2, [r7, #0]
 80100e6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80100e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3710      	adds	r7, #16
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}
	...

080100f4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b084      	sub	sp, #16
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f7ff ff87 	bl	8010010 <sync_window>
 8010102:	4603      	mov	r3, r0
 8010104:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010106:	7bfb      	ldrb	r3, [r7, #15]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d159      	bne.n	80101c0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	2b03      	cmp	r3, #3
 8010112:	d149      	bne.n	80101a8 <sync_fs+0xb4>
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	791b      	ldrb	r3, [r3, #4]
 8010118:	2b01      	cmp	r3, #1
 801011a:	d145      	bne.n	80101a8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	899b      	ldrh	r3, [r3, #12]
 8010126:	461a      	mov	r2, r3
 8010128:	2100      	movs	r1, #0
 801012a:	f7ff fd76 	bl	800fc1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	333c      	adds	r3, #60	; 0x3c
 8010132:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010136:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801013a:	4618      	mov	r0, r3
 801013c:	f7ff fd05 	bl	800fb4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	333c      	adds	r3, #60	; 0x3c
 8010144:	4921      	ldr	r1, [pc, #132]	; (80101cc <sync_fs+0xd8>)
 8010146:	4618      	mov	r0, r3
 8010148:	f7ff fd1a 	bl	800fb80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	333c      	adds	r3, #60	; 0x3c
 8010150:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010154:	491e      	ldr	r1, [pc, #120]	; (80101d0 <sync_fs+0xdc>)
 8010156:	4618      	mov	r0, r3
 8010158:	f7ff fd12 	bl	800fb80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	333c      	adds	r3, #60	; 0x3c
 8010160:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	69db      	ldr	r3, [r3, #28]
 8010168:	4619      	mov	r1, r3
 801016a:	4610      	mov	r0, r2
 801016c:	f7ff fd08 	bl	800fb80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	333c      	adds	r3, #60	; 0x3c
 8010174:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	699b      	ldr	r3, [r3, #24]
 801017c:	4619      	mov	r1, r3
 801017e:	4610      	mov	r0, r2
 8010180:	f7ff fcfe 	bl	800fb80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010188:	1c5a      	adds	r2, r3, #1
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	7858      	ldrb	r0, [r3, #1]
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801019c:	2301      	movs	r3, #1
 801019e:	f7ff fc5b 	bl	800fa58 <disk_write>
			fs->fsi_flag = 0;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	2200      	movs	r2, #0
 80101a6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	785b      	ldrb	r3, [r3, #1]
 80101ac:	2200      	movs	r2, #0
 80101ae:	2100      	movs	r1, #0
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7ff fc71 	bl	800fa98 <disk_ioctl>
 80101b6:	4603      	mov	r3, r0
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d001      	beq.n	80101c0 <sync_fs+0xcc>
 80101bc:	2301      	movs	r3, #1
 80101be:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80101c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	41615252 	.word	0x41615252
 80101d0:	61417272 	.word	0x61417272

080101d4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80101d4:	b480      	push	{r7}
 80101d6:	b083      	sub	sp, #12
 80101d8:	af00      	add	r7, sp, #0
 80101da:	6078      	str	r0, [r7, #4]
 80101dc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	3b02      	subs	r3, #2
 80101e2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	6a1b      	ldr	r3, [r3, #32]
 80101e8:	3b02      	subs	r3, #2
 80101ea:	683a      	ldr	r2, [r7, #0]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d301      	bcc.n	80101f4 <clust2sect+0x20>
 80101f0:	2300      	movs	r3, #0
 80101f2:	e008      	b.n	8010206 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	895b      	ldrh	r3, [r3, #10]
 80101f8:	461a      	mov	r2, r3
 80101fa:	683b      	ldr	r3, [r7, #0]
 80101fc:	fb03 f202 	mul.w	r2, r3, r2
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010204:	4413      	add	r3, r2
}
 8010206:	4618      	mov	r0, r3
 8010208:	370c      	adds	r7, #12
 801020a:	46bd      	mov	sp, r7
 801020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010210:	4770      	bx	lr

08010212 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010212:	b580      	push	{r7, lr}
 8010214:	b086      	sub	sp, #24
 8010216:	af00      	add	r7, sp, #0
 8010218:	6078      	str	r0, [r7, #4]
 801021a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	2b01      	cmp	r3, #1
 8010226:	d904      	bls.n	8010232 <get_fat+0x20>
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	6a1b      	ldr	r3, [r3, #32]
 801022c:	683a      	ldr	r2, [r7, #0]
 801022e:	429a      	cmp	r2, r3
 8010230:	d302      	bcc.n	8010238 <get_fat+0x26>
		val = 1;	/* Internal error */
 8010232:	2301      	movs	r3, #1
 8010234:	617b      	str	r3, [r7, #20]
 8010236:	e0bb      	b.n	80103b0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010238:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801023c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b03      	cmp	r3, #3
 8010244:	f000 8083 	beq.w	801034e <get_fat+0x13c>
 8010248:	2b03      	cmp	r3, #3
 801024a:	f300 80a7 	bgt.w	801039c <get_fat+0x18a>
 801024e:	2b01      	cmp	r3, #1
 8010250:	d002      	beq.n	8010258 <get_fat+0x46>
 8010252:	2b02      	cmp	r3, #2
 8010254:	d056      	beq.n	8010304 <get_fat+0xf2>
 8010256:	e0a1      	b.n	801039c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	60fb      	str	r3, [r7, #12]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	085b      	lsrs	r3, r3, #1
 8010260:	68fa      	ldr	r2, [r7, #12]
 8010262:	4413      	add	r3, r2
 8010264:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010266:	693b      	ldr	r3, [r7, #16]
 8010268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801026a:	693b      	ldr	r3, [r7, #16]
 801026c:	899b      	ldrh	r3, [r3, #12]
 801026e:	4619      	mov	r1, r3
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	fbb3 f3f1 	udiv	r3, r3, r1
 8010276:	4413      	add	r3, r2
 8010278:	4619      	mov	r1, r3
 801027a:	6938      	ldr	r0, [r7, #16]
 801027c:	f7ff ff0c 	bl	8010098 <move_window>
 8010280:	4603      	mov	r3, r0
 8010282:	2b00      	cmp	r3, #0
 8010284:	f040 808d 	bne.w	80103a2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	1c5a      	adds	r2, r3, #1
 801028c:	60fa      	str	r2, [r7, #12]
 801028e:	693a      	ldr	r2, [r7, #16]
 8010290:	8992      	ldrh	r2, [r2, #12]
 8010292:	fbb3 f1f2 	udiv	r1, r3, r2
 8010296:	fb02 f201 	mul.w	r2, r2, r1
 801029a:	1a9b      	subs	r3, r3, r2
 801029c:	693a      	ldr	r2, [r7, #16]
 801029e:	4413      	add	r3, r2
 80102a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	899b      	ldrh	r3, [r3, #12]
 80102ae:	4619      	mov	r1, r3
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80102b6:	4413      	add	r3, r2
 80102b8:	4619      	mov	r1, r3
 80102ba:	6938      	ldr	r0, [r7, #16]
 80102bc:	f7ff feec 	bl	8010098 <move_window>
 80102c0:	4603      	mov	r3, r0
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d16f      	bne.n	80103a6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80102c6:	693b      	ldr	r3, [r7, #16]
 80102c8:	899b      	ldrh	r3, [r3, #12]
 80102ca:	461a      	mov	r2, r3
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80102d2:	fb02 f201 	mul.w	r2, r2, r1
 80102d6:	1a9b      	subs	r3, r3, r2
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	4413      	add	r3, r2
 80102dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80102e0:	021b      	lsls	r3, r3, #8
 80102e2:	461a      	mov	r2, r3
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80102ea:	683b      	ldr	r3, [r7, #0]
 80102ec:	f003 0301 	and.w	r3, r3, #1
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <get_fat+0xe8>
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	091b      	lsrs	r3, r3, #4
 80102f8:	e002      	b.n	8010300 <get_fat+0xee>
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010300:	617b      	str	r3, [r7, #20]
			break;
 8010302:	e055      	b.n	80103b0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010308:	693b      	ldr	r3, [r7, #16]
 801030a:	899b      	ldrh	r3, [r3, #12]
 801030c:	085b      	lsrs	r3, r3, #1
 801030e:	b29b      	uxth	r3, r3
 8010310:	4619      	mov	r1, r3
 8010312:	683b      	ldr	r3, [r7, #0]
 8010314:	fbb3 f3f1 	udiv	r3, r3, r1
 8010318:	4413      	add	r3, r2
 801031a:	4619      	mov	r1, r3
 801031c:	6938      	ldr	r0, [r7, #16]
 801031e:	f7ff febb 	bl	8010098 <move_window>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d140      	bne.n	80103aa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801032e:	683b      	ldr	r3, [r7, #0]
 8010330:	005b      	lsls	r3, r3, #1
 8010332:	693a      	ldr	r2, [r7, #16]
 8010334:	8992      	ldrh	r2, [r2, #12]
 8010336:	fbb3 f0f2 	udiv	r0, r3, r2
 801033a:	fb02 f200 	mul.w	r2, r2, r0
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	440b      	add	r3, r1
 8010342:	4618      	mov	r0, r3
 8010344:	f7ff fbc6 	bl	800fad4 <ld_word>
 8010348:	4603      	mov	r3, r0
 801034a:	617b      	str	r3, [r7, #20]
			break;
 801034c:	e030      	b.n	80103b0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	899b      	ldrh	r3, [r3, #12]
 8010356:	089b      	lsrs	r3, r3, #2
 8010358:	b29b      	uxth	r3, r3
 801035a:	4619      	mov	r1, r3
 801035c:	683b      	ldr	r3, [r7, #0]
 801035e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010362:	4413      	add	r3, r2
 8010364:	4619      	mov	r1, r3
 8010366:	6938      	ldr	r0, [r7, #16]
 8010368:	f7ff fe96 	bl	8010098 <move_window>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d11d      	bne.n	80103ae <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010378:	683b      	ldr	r3, [r7, #0]
 801037a:	009b      	lsls	r3, r3, #2
 801037c:	693a      	ldr	r2, [r7, #16]
 801037e:	8992      	ldrh	r2, [r2, #12]
 8010380:	fbb3 f0f2 	udiv	r0, r3, r2
 8010384:	fb02 f200 	mul.w	r2, r2, r0
 8010388:	1a9b      	subs	r3, r3, r2
 801038a:	440b      	add	r3, r1
 801038c:	4618      	mov	r0, r3
 801038e:	f7ff fbb9 	bl	800fb04 <ld_dword>
 8010392:	4603      	mov	r3, r0
 8010394:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010398:	617b      	str	r3, [r7, #20]
			break;
 801039a:	e009      	b.n	80103b0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801039c:	2301      	movs	r3, #1
 801039e:	617b      	str	r3, [r7, #20]
 80103a0:	e006      	b.n	80103b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103a2:	bf00      	nop
 80103a4:	e004      	b.n	80103b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80103a6:	bf00      	nop
 80103a8:	e002      	b.n	80103b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80103aa:	bf00      	nop
 80103ac:	e000      	b.n	80103b0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80103ae:	bf00      	nop
		}
	}

	return val;
 80103b0:	697b      	ldr	r3, [r7, #20]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	3718      	adds	r7, #24
 80103b6:	46bd      	mov	sp, r7
 80103b8:	bd80      	pop	{r7, pc}

080103ba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80103ba:	b590      	push	{r4, r7, lr}
 80103bc:	b089      	sub	sp, #36	; 0x24
 80103be:	af00      	add	r7, sp, #0
 80103c0:	60f8      	str	r0, [r7, #12]
 80103c2:	60b9      	str	r1, [r7, #8]
 80103c4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80103c6:	2302      	movs	r3, #2
 80103c8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	2b01      	cmp	r3, #1
 80103ce:	f240 8102 	bls.w	80105d6 <put_fat+0x21c>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	6a1b      	ldr	r3, [r3, #32]
 80103d6:	68ba      	ldr	r2, [r7, #8]
 80103d8:	429a      	cmp	r2, r3
 80103da:	f080 80fc 	bcs.w	80105d6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	2b03      	cmp	r3, #3
 80103e4:	f000 80b6 	beq.w	8010554 <put_fat+0x19a>
 80103e8:	2b03      	cmp	r3, #3
 80103ea:	f300 80fd 	bgt.w	80105e8 <put_fat+0x22e>
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d003      	beq.n	80103fa <put_fat+0x40>
 80103f2:	2b02      	cmp	r3, #2
 80103f4:	f000 8083 	beq.w	80104fe <put_fat+0x144>
 80103f8:	e0f6      	b.n	80105e8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	61bb      	str	r3, [r7, #24]
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	085b      	lsrs	r3, r3, #1
 8010402:	69ba      	ldr	r2, [r7, #24]
 8010404:	4413      	add	r3, r2
 8010406:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	899b      	ldrh	r3, [r3, #12]
 8010410:	4619      	mov	r1, r3
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	fbb3 f3f1 	udiv	r3, r3, r1
 8010418:	4413      	add	r3, r2
 801041a:	4619      	mov	r1, r3
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f7ff fe3b 	bl	8010098 <move_window>
 8010422:	4603      	mov	r3, r0
 8010424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010426:	7ffb      	ldrb	r3, [r7, #31]
 8010428:	2b00      	cmp	r3, #0
 801042a:	f040 80d6 	bne.w	80105da <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	1c5a      	adds	r2, r3, #1
 8010438:	61ba      	str	r2, [r7, #24]
 801043a:	68fa      	ldr	r2, [r7, #12]
 801043c:	8992      	ldrh	r2, [r2, #12]
 801043e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010442:	fb02 f200 	mul.w	r2, r2, r0
 8010446:	1a9b      	subs	r3, r3, r2
 8010448:	440b      	add	r3, r1
 801044a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	f003 0301 	and.w	r3, r3, #1
 8010452:	2b00      	cmp	r3, #0
 8010454:	d00d      	beq.n	8010472 <put_fat+0xb8>
 8010456:	697b      	ldr	r3, [r7, #20]
 8010458:	781b      	ldrb	r3, [r3, #0]
 801045a:	b25b      	sxtb	r3, r3
 801045c:	f003 030f 	and.w	r3, r3, #15
 8010460:	b25a      	sxtb	r2, r3
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	b2db      	uxtb	r3, r3
 8010466:	011b      	lsls	r3, r3, #4
 8010468:	b25b      	sxtb	r3, r3
 801046a:	4313      	orrs	r3, r2
 801046c:	b25b      	sxtb	r3, r3
 801046e:	b2db      	uxtb	r3, r3
 8010470:	e001      	b.n	8010476 <put_fat+0xbc>
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	b2db      	uxtb	r3, r3
 8010476:	697a      	ldr	r2, [r7, #20]
 8010478:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	2201      	movs	r2, #1
 801047e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	899b      	ldrh	r3, [r3, #12]
 8010488:	4619      	mov	r1, r3
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010490:	4413      	add	r3, r2
 8010492:	4619      	mov	r1, r3
 8010494:	68f8      	ldr	r0, [r7, #12]
 8010496:	f7ff fdff 	bl	8010098 <move_window>
 801049a:	4603      	mov	r3, r0
 801049c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801049e:	7ffb      	ldrb	r3, [r7, #31]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	f040 809c 	bne.w	80105de <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	899b      	ldrh	r3, [r3, #12]
 80104b0:	461a      	mov	r2, r3
 80104b2:	69bb      	ldr	r3, [r7, #24]
 80104b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80104b8:	fb02 f200 	mul.w	r2, r2, r0
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	440b      	add	r3, r1
 80104c0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80104c2:	68bb      	ldr	r3, [r7, #8]
 80104c4:	f003 0301 	and.w	r3, r3, #1
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d003      	beq.n	80104d4 <put_fat+0x11a>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	091b      	lsrs	r3, r3, #4
 80104d0:	b2db      	uxtb	r3, r3
 80104d2:	e00e      	b.n	80104f2 <put_fat+0x138>
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	781b      	ldrb	r3, [r3, #0]
 80104d8:	b25b      	sxtb	r3, r3
 80104da:	f023 030f 	bic.w	r3, r3, #15
 80104de:	b25a      	sxtb	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	0a1b      	lsrs	r3, r3, #8
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	f003 030f 	and.w	r3, r3, #15
 80104ea:	b25b      	sxtb	r3, r3
 80104ec:	4313      	orrs	r3, r2
 80104ee:	b25b      	sxtb	r3, r3
 80104f0:	b2db      	uxtb	r3, r3
 80104f2:	697a      	ldr	r2, [r7, #20]
 80104f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2201      	movs	r2, #1
 80104fa:	70da      	strb	r2, [r3, #3]
			break;
 80104fc:	e074      	b.n	80105e8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	899b      	ldrh	r3, [r3, #12]
 8010506:	085b      	lsrs	r3, r3, #1
 8010508:	b29b      	uxth	r3, r3
 801050a:	4619      	mov	r1, r3
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	fbb3 f3f1 	udiv	r3, r3, r1
 8010512:	4413      	add	r3, r2
 8010514:	4619      	mov	r1, r3
 8010516:	68f8      	ldr	r0, [r7, #12]
 8010518:	f7ff fdbe 	bl	8010098 <move_window>
 801051c:	4603      	mov	r3, r0
 801051e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010520:	7ffb      	ldrb	r3, [r7, #31]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d15d      	bne.n	80105e2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	68fa      	ldr	r2, [r7, #12]
 8010532:	8992      	ldrh	r2, [r2, #12]
 8010534:	fbb3 f0f2 	udiv	r0, r3, r2
 8010538:	fb02 f200 	mul.w	r2, r2, r0
 801053c:	1a9b      	subs	r3, r3, r2
 801053e:	440b      	add	r3, r1
 8010540:	687a      	ldr	r2, [r7, #4]
 8010542:	b292      	uxth	r2, r2
 8010544:	4611      	mov	r1, r2
 8010546:	4618      	mov	r0, r3
 8010548:	f7ff faff 	bl	800fb4a <st_word>
			fs->wflag = 1;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2201      	movs	r2, #1
 8010550:	70da      	strb	r2, [r3, #3]
			break;
 8010552:	e049      	b.n	80105e8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	899b      	ldrh	r3, [r3, #12]
 801055c:	089b      	lsrs	r3, r3, #2
 801055e:	b29b      	uxth	r3, r3
 8010560:	4619      	mov	r1, r3
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	fbb3 f3f1 	udiv	r3, r3, r1
 8010568:	4413      	add	r3, r2
 801056a:	4619      	mov	r1, r3
 801056c:	68f8      	ldr	r0, [r7, #12]
 801056e:	f7ff fd93 	bl	8010098 <move_window>
 8010572:	4603      	mov	r3, r0
 8010574:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010576:	7ffb      	ldrb	r3, [r7, #31]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d134      	bne.n	80105e6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	009b      	lsls	r3, r3, #2
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	8992      	ldrh	r2, [r2, #12]
 8010590:	fbb3 f0f2 	udiv	r0, r3, r2
 8010594:	fb02 f200 	mul.w	r2, r2, r0
 8010598:	1a9b      	subs	r3, r3, r2
 801059a:	440b      	add	r3, r1
 801059c:	4618      	mov	r0, r3
 801059e:	f7ff fab1 	bl	800fb04 <ld_dword>
 80105a2:	4603      	mov	r3, r0
 80105a4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80105a8:	4323      	orrs	r3, r4
 80105aa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	009b      	lsls	r3, r3, #2
 80105b6:	68fa      	ldr	r2, [r7, #12]
 80105b8:	8992      	ldrh	r2, [r2, #12]
 80105ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80105be:	fb02 f200 	mul.w	r2, r2, r0
 80105c2:	1a9b      	subs	r3, r3, r2
 80105c4:	440b      	add	r3, r1
 80105c6:	6879      	ldr	r1, [r7, #4]
 80105c8:	4618      	mov	r0, r3
 80105ca:	f7ff fad9 	bl	800fb80 <st_dword>
			fs->wflag = 1;
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	2201      	movs	r2, #1
 80105d2:	70da      	strb	r2, [r3, #3]
			break;
 80105d4:	e008      	b.n	80105e8 <put_fat+0x22e>
		}
	}
 80105d6:	bf00      	nop
 80105d8:	e006      	b.n	80105e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80105da:	bf00      	nop
 80105dc:	e004      	b.n	80105e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80105de:	bf00      	nop
 80105e0:	e002      	b.n	80105e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80105e2:	bf00      	nop
 80105e4:	e000      	b.n	80105e8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80105e6:	bf00      	nop
	return res;
 80105e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3724      	adds	r7, #36	; 0x24
 80105ee:	46bd      	mov	sp, r7
 80105f0:	bd90      	pop	{r4, r7, pc}

080105f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80105f2:	b580      	push	{r7, lr}
 80105f4:	b088      	sub	sp, #32
 80105f6:	af00      	add	r7, sp, #0
 80105f8:	60f8      	str	r0, [r7, #12]
 80105fa:	60b9      	str	r1, [r7, #8]
 80105fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80105fe:	2300      	movs	r3, #0
 8010600:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	2b01      	cmp	r3, #1
 801060c:	d904      	bls.n	8010618 <remove_chain+0x26>
 801060e:	69bb      	ldr	r3, [r7, #24]
 8010610:	6a1b      	ldr	r3, [r3, #32]
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	429a      	cmp	r2, r3
 8010616:	d301      	bcc.n	801061c <remove_chain+0x2a>
 8010618:	2302      	movs	r3, #2
 801061a:	e04b      	b.n	80106b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d00c      	beq.n	801063c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010622:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010626:	6879      	ldr	r1, [r7, #4]
 8010628:	69b8      	ldr	r0, [r7, #24]
 801062a:	f7ff fec6 	bl	80103ba <put_fat>
 801062e:	4603      	mov	r3, r0
 8010630:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010632:	7ffb      	ldrb	r3, [r7, #31]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d001      	beq.n	801063c <remove_chain+0x4a>
 8010638:	7ffb      	ldrb	r3, [r7, #31]
 801063a:	e03b      	b.n	80106b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801063c:	68b9      	ldr	r1, [r7, #8]
 801063e:	68f8      	ldr	r0, [r7, #12]
 8010640:	f7ff fde7 	bl	8010212 <get_fat>
 8010644:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d031      	beq.n	80106b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801064c:	697b      	ldr	r3, [r7, #20]
 801064e:	2b01      	cmp	r3, #1
 8010650:	d101      	bne.n	8010656 <remove_chain+0x64>
 8010652:	2302      	movs	r3, #2
 8010654:	e02e      	b.n	80106b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801065c:	d101      	bne.n	8010662 <remove_chain+0x70>
 801065e:	2301      	movs	r3, #1
 8010660:	e028      	b.n	80106b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010662:	2200      	movs	r2, #0
 8010664:	68b9      	ldr	r1, [r7, #8]
 8010666:	69b8      	ldr	r0, [r7, #24]
 8010668:	f7ff fea7 	bl	80103ba <put_fat>
 801066c:	4603      	mov	r3, r0
 801066e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010670:	7ffb      	ldrb	r3, [r7, #31]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d001      	beq.n	801067a <remove_chain+0x88>
 8010676:	7ffb      	ldrb	r3, [r7, #31]
 8010678:	e01c      	b.n	80106b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	69da      	ldr	r2, [r3, #28]
 801067e:	69bb      	ldr	r3, [r7, #24]
 8010680:	6a1b      	ldr	r3, [r3, #32]
 8010682:	3b02      	subs	r3, #2
 8010684:	429a      	cmp	r2, r3
 8010686:	d20b      	bcs.n	80106a0 <remove_chain+0xae>
			fs->free_clst++;
 8010688:	69bb      	ldr	r3, [r7, #24]
 801068a:	69db      	ldr	r3, [r3, #28]
 801068c:	1c5a      	adds	r2, r3, #1
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8010692:	69bb      	ldr	r3, [r7, #24]
 8010694:	791b      	ldrb	r3, [r3, #4]
 8010696:	f043 0301 	orr.w	r3, r3, #1
 801069a:	b2da      	uxtb	r2, r3
 801069c:	69bb      	ldr	r3, [r7, #24]
 801069e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80106a0:	697b      	ldr	r3, [r7, #20]
 80106a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80106a4:	69bb      	ldr	r3, [r7, #24]
 80106a6:	6a1b      	ldr	r3, [r3, #32]
 80106a8:	68ba      	ldr	r2, [r7, #8]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d3c6      	bcc.n	801063c <remove_chain+0x4a>
 80106ae:	e000      	b.n	80106b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80106b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80106b2:	2300      	movs	r3, #0
}
 80106b4:	4618      	mov	r0, r3
 80106b6:	3720      	adds	r7, #32
 80106b8:	46bd      	mov	sp, r7
 80106ba:	bd80      	pop	{r7, pc}

080106bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b088      	sub	sp, #32
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	6078      	str	r0, [r7, #4]
 80106c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10d      	bne.n	80106ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d004      	beq.n	80106e8 <create_chain+0x2c>
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	6a1b      	ldr	r3, [r3, #32]
 80106e2:	69ba      	ldr	r2, [r7, #24]
 80106e4:	429a      	cmp	r2, r3
 80106e6:	d31b      	bcc.n	8010720 <create_chain+0x64>
 80106e8:	2301      	movs	r3, #1
 80106ea:	61bb      	str	r3, [r7, #24]
 80106ec:	e018      	b.n	8010720 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80106ee:	6839      	ldr	r1, [r7, #0]
 80106f0:	6878      	ldr	r0, [r7, #4]
 80106f2:	f7ff fd8e 	bl	8010212 <get_fat>
 80106f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2b01      	cmp	r3, #1
 80106fc:	d801      	bhi.n	8010702 <create_chain+0x46>
 80106fe:	2301      	movs	r3, #1
 8010700:	e070      	b.n	80107e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010708:	d101      	bne.n	801070e <create_chain+0x52>
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	e06a      	b.n	80107e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801070e:	693b      	ldr	r3, [r7, #16]
 8010710:	6a1b      	ldr	r3, [r3, #32]
 8010712:	68fa      	ldr	r2, [r7, #12]
 8010714:	429a      	cmp	r2, r3
 8010716:	d201      	bcs.n	801071c <create_chain+0x60>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	e063      	b.n	80107e4 <create_chain+0x128>
		scl = clst;
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010720:	69bb      	ldr	r3, [r7, #24]
 8010722:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010724:	69fb      	ldr	r3, [r7, #28]
 8010726:	3301      	adds	r3, #1
 8010728:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	6a1b      	ldr	r3, [r3, #32]
 801072e:	69fa      	ldr	r2, [r7, #28]
 8010730:	429a      	cmp	r2, r3
 8010732:	d307      	bcc.n	8010744 <create_chain+0x88>
				ncl = 2;
 8010734:	2302      	movs	r3, #2
 8010736:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8010738:	69fa      	ldr	r2, [r7, #28]
 801073a:	69bb      	ldr	r3, [r7, #24]
 801073c:	429a      	cmp	r2, r3
 801073e:	d901      	bls.n	8010744 <create_chain+0x88>
 8010740:	2300      	movs	r3, #0
 8010742:	e04f      	b.n	80107e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010744:	69f9      	ldr	r1, [r7, #28]
 8010746:	6878      	ldr	r0, [r7, #4]
 8010748:	f7ff fd63 	bl	8010212 <get_fat>
 801074c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d00e      	beq.n	8010772 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2b01      	cmp	r3, #1
 8010758:	d003      	beq.n	8010762 <create_chain+0xa6>
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010760:	d101      	bne.n	8010766 <create_chain+0xaa>
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	e03e      	b.n	80107e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010766:	69fa      	ldr	r2, [r7, #28]
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	429a      	cmp	r2, r3
 801076c:	d1da      	bne.n	8010724 <create_chain+0x68>
 801076e:	2300      	movs	r3, #0
 8010770:	e038      	b.n	80107e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010772:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010778:	69f9      	ldr	r1, [r7, #28]
 801077a:	6938      	ldr	r0, [r7, #16]
 801077c:	f7ff fe1d 	bl	80103ba <put_fat>
 8010780:	4603      	mov	r3, r0
 8010782:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010784:	7dfb      	ldrb	r3, [r7, #23]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d109      	bne.n	801079e <create_chain+0xe2>
 801078a:	683b      	ldr	r3, [r7, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d006      	beq.n	801079e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010790:	69fa      	ldr	r2, [r7, #28]
 8010792:	6839      	ldr	r1, [r7, #0]
 8010794:	6938      	ldr	r0, [r7, #16]
 8010796:	f7ff fe10 	bl	80103ba <put_fat>
 801079a:	4603      	mov	r3, r0
 801079c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801079e:	7dfb      	ldrb	r3, [r7, #23]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d116      	bne.n	80107d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80107a4:	693b      	ldr	r3, [r7, #16]
 80107a6:	69fa      	ldr	r2, [r7, #28]
 80107a8:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80107aa:	693b      	ldr	r3, [r7, #16]
 80107ac:	69da      	ldr	r2, [r3, #28]
 80107ae:	693b      	ldr	r3, [r7, #16]
 80107b0:	6a1b      	ldr	r3, [r3, #32]
 80107b2:	3b02      	subs	r3, #2
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d804      	bhi.n	80107c2 <create_chain+0x106>
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	69db      	ldr	r3, [r3, #28]
 80107bc:	1e5a      	subs	r2, r3, #1
 80107be:	693b      	ldr	r3, [r7, #16]
 80107c0:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80107c2:	693b      	ldr	r3, [r7, #16]
 80107c4:	791b      	ldrb	r3, [r3, #4]
 80107c6:	f043 0301 	orr.w	r3, r3, #1
 80107ca:	b2da      	uxtb	r2, r3
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	711a      	strb	r2, [r3, #4]
 80107d0:	e007      	b.n	80107e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80107d2:	7dfb      	ldrb	r3, [r7, #23]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d102      	bne.n	80107de <create_chain+0x122>
 80107d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107dc:	e000      	b.n	80107e0 <create_chain+0x124>
 80107de:	2301      	movs	r3, #1
 80107e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80107e2:	69fb      	ldr	r3, [r7, #28]
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3720      	adds	r7, #32
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}

080107ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b087      	sub	sp, #28
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
 80107f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010800:	3304      	adds	r3, #4
 8010802:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	899b      	ldrh	r3, [r3, #12]
 8010808:	461a      	mov	r2, r3
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010810:	68fa      	ldr	r2, [r7, #12]
 8010812:	8952      	ldrh	r2, [r2, #10]
 8010814:	fbb3 f3f2 	udiv	r3, r3, r2
 8010818:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	1d1a      	adds	r2, r3, #4
 801081e:	613a      	str	r2, [r7, #16]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d101      	bne.n	801082e <clmt_clust+0x42>
 801082a:	2300      	movs	r3, #0
 801082c:	e010      	b.n	8010850 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801082e:	697a      	ldr	r2, [r7, #20]
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	429a      	cmp	r2, r3
 8010834:	d307      	bcc.n	8010846 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8010836:	697a      	ldr	r2, [r7, #20]
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	1ad3      	subs	r3, r2, r3
 801083c:	617b      	str	r3, [r7, #20]
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	3304      	adds	r3, #4
 8010842:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010844:	e7e9      	b.n	801081a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8010846:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	697b      	ldr	r3, [r7, #20]
 801084e:	4413      	add	r3, r2
}
 8010850:	4618      	mov	r0, r3
 8010852:	371c      	adds	r7, #28
 8010854:	46bd      	mov	sp, r7
 8010856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801085a:	4770      	bx	lr

0801085c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b086      	sub	sp, #24
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010872:	d204      	bcs.n	801087e <dir_sdi+0x22>
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	f003 031f 	and.w	r3, r3, #31
 801087a:	2b00      	cmp	r3, #0
 801087c:	d001      	beq.n	8010882 <dir_sdi+0x26>
		return FR_INT_ERR;
 801087e:	2302      	movs	r3, #2
 8010880:	e071      	b.n	8010966 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	683a      	ldr	r2, [r7, #0]
 8010886:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	689b      	ldr	r3, [r3, #8]
 801088c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d106      	bne.n	80108a2 <dir_sdi+0x46>
 8010894:	693b      	ldr	r3, [r7, #16]
 8010896:	781b      	ldrb	r3, [r3, #0]
 8010898:	2b02      	cmp	r3, #2
 801089a:	d902      	bls.n	80108a2 <dir_sdi+0x46>
		clst = fs->dirbase;
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108a0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80108a2:	697b      	ldr	r3, [r7, #20]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d10c      	bne.n	80108c2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	095b      	lsrs	r3, r3, #5
 80108ac:	693a      	ldr	r2, [r7, #16]
 80108ae:	8912      	ldrh	r2, [r2, #8]
 80108b0:	4293      	cmp	r3, r2
 80108b2:	d301      	bcc.n	80108b8 <dir_sdi+0x5c>
 80108b4:	2302      	movs	r3, #2
 80108b6:	e056      	b.n	8010966 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80108b8:	693b      	ldr	r3, [r7, #16]
 80108ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	61da      	str	r2, [r3, #28]
 80108c0:	e02d      	b.n	801091e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	895b      	ldrh	r3, [r3, #10]
 80108c6:	461a      	mov	r2, r3
 80108c8:	693b      	ldr	r3, [r7, #16]
 80108ca:	899b      	ldrh	r3, [r3, #12]
 80108cc:	fb03 f302 	mul.w	r3, r3, r2
 80108d0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80108d2:	e019      	b.n	8010908 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	6979      	ldr	r1, [r7, #20]
 80108d8:	4618      	mov	r0, r3
 80108da:	f7ff fc9a 	bl	8010212 <get_fat>
 80108de:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80108e0:	697b      	ldr	r3, [r7, #20]
 80108e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108e6:	d101      	bne.n	80108ec <dir_sdi+0x90>
 80108e8:	2301      	movs	r3, #1
 80108ea:	e03c      	b.n	8010966 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80108ec:	697b      	ldr	r3, [r7, #20]
 80108ee:	2b01      	cmp	r3, #1
 80108f0:	d904      	bls.n	80108fc <dir_sdi+0xa0>
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	6a1b      	ldr	r3, [r3, #32]
 80108f6:	697a      	ldr	r2, [r7, #20]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d301      	bcc.n	8010900 <dir_sdi+0xa4>
 80108fc:	2302      	movs	r3, #2
 80108fe:	e032      	b.n	8010966 <dir_sdi+0x10a>
			ofs -= csz;
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	1ad3      	subs	r3, r2, r3
 8010906:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010908:	683a      	ldr	r2, [r7, #0]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	429a      	cmp	r2, r3
 801090e:	d2e1      	bcs.n	80108d4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010910:	6979      	ldr	r1, [r7, #20]
 8010912:	6938      	ldr	r0, [r7, #16]
 8010914:	f7ff fc5e 	bl	80101d4 <clust2sect>
 8010918:	4602      	mov	r2, r0
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	697a      	ldr	r2, [r7, #20]
 8010922:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	69db      	ldr	r3, [r3, #28]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d101      	bne.n	8010930 <dir_sdi+0xd4>
 801092c:	2302      	movs	r3, #2
 801092e:	e01a      	b.n	8010966 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	69da      	ldr	r2, [r3, #28]
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	899b      	ldrh	r3, [r3, #12]
 8010938:	4619      	mov	r1, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	fbb3 f3f1 	udiv	r3, r3, r1
 8010940:	441a      	add	r2, r3
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	899b      	ldrh	r3, [r3, #12]
 8010950:	461a      	mov	r2, r3
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	fbb3 f0f2 	udiv	r0, r3, r2
 8010958:	fb02 f200 	mul.w	r2, r2, r0
 801095c:	1a9b      	subs	r3, r3, r2
 801095e:	18ca      	adds	r2, r1, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010964:	2300      	movs	r3, #0
}
 8010966:	4618      	mov	r0, r3
 8010968:	3718      	adds	r7, #24
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b086      	sub	sp, #24
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	695b      	ldr	r3, [r3, #20]
 8010982:	3320      	adds	r3, #32
 8010984:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	69db      	ldr	r3, [r3, #28]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d003      	beq.n	8010996 <dir_next+0x28>
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010994:	d301      	bcc.n	801099a <dir_next+0x2c>
 8010996:	2304      	movs	r3, #4
 8010998:	e0bb      	b.n	8010b12 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	899b      	ldrh	r3, [r3, #12]
 801099e:	461a      	mov	r2, r3
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80109a6:	fb02 f201 	mul.w	r2, r2, r1
 80109aa:	1a9b      	subs	r3, r3, r2
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	f040 809d 	bne.w	8010aec <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	69db      	ldr	r3, [r3, #28]
 80109b6:	1c5a      	adds	r2, r3, #1
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	699b      	ldr	r3, [r3, #24]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10b      	bne.n	80109dc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	095b      	lsrs	r3, r3, #5
 80109c8:	68fa      	ldr	r2, [r7, #12]
 80109ca:	8912      	ldrh	r2, [r2, #8]
 80109cc:	4293      	cmp	r3, r2
 80109ce:	f0c0 808d 	bcc.w	8010aec <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2200      	movs	r2, #0
 80109d6:	61da      	str	r2, [r3, #28]
 80109d8:	2304      	movs	r3, #4
 80109da:	e09a      	b.n	8010b12 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	899b      	ldrh	r3, [r3, #12]
 80109e0:	461a      	mov	r2, r3
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80109e8:	68fa      	ldr	r2, [r7, #12]
 80109ea:	8952      	ldrh	r2, [r2, #10]
 80109ec:	3a01      	subs	r2, #1
 80109ee:	4013      	ands	r3, r2
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d17b      	bne.n	8010aec <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80109f4:	687a      	ldr	r2, [r7, #4]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	699b      	ldr	r3, [r3, #24]
 80109fa:	4619      	mov	r1, r3
 80109fc:	4610      	mov	r0, r2
 80109fe:	f7ff fc08 	bl	8010212 <get_fat>
 8010a02:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010a04:	697b      	ldr	r3, [r7, #20]
 8010a06:	2b01      	cmp	r3, #1
 8010a08:	d801      	bhi.n	8010a0e <dir_next+0xa0>
 8010a0a:	2302      	movs	r3, #2
 8010a0c:	e081      	b.n	8010b12 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a14:	d101      	bne.n	8010a1a <dir_next+0xac>
 8010a16:	2301      	movs	r3, #1
 8010a18:	e07b      	b.n	8010b12 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6a1b      	ldr	r3, [r3, #32]
 8010a1e:	697a      	ldr	r2, [r7, #20]
 8010a20:	429a      	cmp	r2, r3
 8010a22:	d359      	bcc.n	8010ad8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d104      	bne.n	8010a34 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	61da      	str	r2, [r3, #28]
 8010a30:	2304      	movs	r3, #4
 8010a32:	e06e      	b.n	8010b12 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	699b      	ldr	r3, [r3, #24]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	4610      	mov	r0, r2
 8010a3e:	f7ff fe3d 	bl	80106bc <create_chain>
 8010a42:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010a44:	697b      	ldr	r3, [r7, #20]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d101      	bne.n	8010a4e <dir_next+0xe0>
 8010a4a:	2307      	movs	r3, #7
 8010a4c:	e061      	b.n	8010b12 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010a4e:	697b      	ldr	r3, [r7, #20]
 8010a50:	2b01      	cmp	r3, #1
 8010a52:	d101      	bne.n	8010a58 <dir_next+0xea>
 8010a54:	2302      	movs	r3, #2
 8010a56:	e05c      	b.n	8010b12 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010a58:	697b      	ldr	r3, [r7, #20]
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a5e:	d101      	bne.n	8010a64 <dir_next+0xf6>
 8010a60:	2301      	movs	r3, #1
 8010a62:	e056      	b.n	8010b12 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f7ff fad3 	bl	8010010 <sync_window>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d001      	beq.n	8010a74 <dir_next+0x106>
 8010a70:	2301      	movs	r3, #1
 8010a72:	e04e      	b.n	8010b12 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	899b      	ldrh	r3, [r3, #12]
 8010a7e:	461a      	mov	r2, r3
 8010a80:	2100      	movs	r1, #0
 8010a82:	f7ff f8ca 	bl	800fc1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010a86:	2300      	movs	r3, #0
 8010a88:	613b      	str	r3, [r7, #16]
 8010a8a:	6979      	ldr	r1, [r7, #20]
 8010a8c:	68f8      	ldr	r0, [r7, #12]
 8010a8e:	f7ff fba1 	bl	80101d4 <clust2sect>
 8010a92:	4602      	mov	r2, r0
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	639a      	str	r2, [r3, #56]	; 0x38
 8010a98:	e012      	b.n	8010ac0 <dir_next+0x152>
						fs->wflag = 1;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f7ff fab5 	bl	8010010 <sync_window>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d001      	beq.n	8010ab0 <dir_next+0x142>
 8010aac:	2301      	movs	r3, #1
 8010aae:	e030      	b.n	8010b12 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010ab0:	693b      	ldr	r3, [r7, #16]
 8010ab2:	3301      	adds	r3, #1
 8010ab4:	613b      	str	r3, [r7, #16]
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aba:	1c5a      	adds	r2, r3, #1
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	639a      	str	r2, [r3, #56]	; 0x38
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	895b      	ldrh	r3, [r3, #10]
 8010ac4:	461a      	mov	r2, r3
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	4293      	cmp	r3, r2
 8010aca:	d3e6      	bcc.n	8010a9a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	1ad2      	subs	r2, r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	697a      	ldr	r2, [r7, #20]
 8010adc:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010ade:	6979      	ldr	r1, [r7, #20]
 8010ae0:	68f8      	ldr	r0, [r7, #12]
 8010ae2:	f7ff fb77 	bl	80101d4 <clust2sect>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	68ba      	ldr	r2, [r7, #8]
 8010af0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	899b      	ldrh	r3, [r3, #12]
 8010afc:	461a      	mov	r2, r3
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b04:	fb02 f200 	mul.w	r2, r2, r0
 8010b08:	1a9b      	subs	r3, r3, r2
 8010b0a:	18ca      	adds	r2, r1, r3
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010b10:	2300      	movs	r3, #0
}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3718      	adds	r7, #24
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b086      	sub	sp, #24
 8010b1e:	af00      	add	r7, sp, #0
 8010b20:	6078      	str	r0, [r7, #4]
 8010b22:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010b2a:	2100      	movs	r1, #0
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f7ff fe95 	bl	801085c <dir_sdi>
 8010b32:	4603      	mov	r3, r0
 8010b34:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010b36:	7dfb      	ldrb	r3, [r7, #23]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d12b      	bne.n	8010b94 <dir_alloc+0x7a>
		n = 0;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	69db      	ldr	r3, [r3, #28]
 8010b44:	4619      	mov	r1, r3
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f7ff faa6 	bl	8010098 <move_window>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010b50:	7dfb      	ldrb	r3, [r7, #23]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d11d      	bne.n	8010b92 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6a1b      	ldr	r3, [r3, #32]
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	2be5      	cmp	r3, #229	; 0xe5
 8010b5e:	d004      	beq.n	8010b6a <dir_alloc+0x50>
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6a1b      	ldr	r3, [r3, #32]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d107      	bne.n	8010b7a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	3301      	adds	r3, #1
 8010b6e:	613b      	str	r3, [r7, #16]
 8010b70:	693a      	ldr	r2, [r7, #16]
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d102      	bne.n	8010b7e <dir_alloc+0x64>
 8010b78:	e00c      	b.n	8010b94 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010b7e:	2101      	movs	r1, #1
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff fef4 	bl	801096e <dir_next>
 8010b86:	4603      	mov	r3, r0
 8010b88:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010b8a:	7dfb      	ldrb	r3, [r7, #23]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d0d7      	beq.n	8010b40 <dir_alloc+0x26>
 8010b90:	e000      	b.n	8010b94 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010b92:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010b94:	7dfb      	ldrb	r3, [r7, #23]
 8010b96:	2b04      	cmp	r3, #4
 8010b98:	d101      	bne.n	8010b9e <dir_alloc+0x84>
 8010b9a:	2307      	movs	r3, #7
 8010b9c:	75fb      	strb	r3, [r7, #23]
	return res;
 8010b9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba0:	4618      	mov	r0, r3
 8010ba2:	3718      	adds	r7, #24
 8010ba4:	46bd      	mov	sp, r7
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b084      	sub	sp, #16
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
 8010bb0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010bb2:	683b      	ldr	r3, [r7, #0]
 8010bb4:	331a      	adds	r3, #26
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7fe ff8c 	bl	800fad4 <ld_word>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2b03      	cmp	r3, #3
 8010bc6:	d109      	bne.n	8010bdc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	3314      	adds	r3, #20
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe ff81 	bl	800fad4 <ld_word>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	041b      	lsls	r3, r3, #16
 8010bd6:	68fa      	ldr	r2, [r7, #12]
 8010bd8:	4313      	orrs	r3, r2
 8010bda:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}

08010be6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010be6:	b580      	push	{r7, lr}
 8010be8:	b084      	sub	sp, #16
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	60f8      	str	r0, [r7, #12]
 8010bee:	60b9      	str	r1, [r7, #8]
 8010bf0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010bf2:	68bb      	ldr	r3, [r7, #8]
 8010bf4:	331a      	adds	r3, #26
 8010bf6:	687a      	ldr	r2, [r7, #4]
 8010bf8:	b292      	uxth	r2, r2
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7fe ffa4 	bl	800fb4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	781b      	ldrb	r3, [r3, #0]
 8010c06:	2b03      	cmp	r3, #3
 8010c08:	d109      	bne.n	8010c1e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010c0a:	68bb      	ldr	r3, [r7, #8]
 8010c0c:	f103 0214 	add.w	r2, r3, #20
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	0c1b      	lsrs	r3, r3, #16
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	4619      	mov	r1, r3
 8010c18:	4610      	mov	r0, r2
 8010c1a:	f7fe ff96 	bl	800fb4a <st_word>
	}
}
 8010c1e:	bf00      	nop
 8010c20:	3710      	adds	r7, #16
 8010c22:	46bd      	mov	sp, r7
 8010c24:	bd80      	pop	{r7, pc}
	...

08010c28 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010c28:	b590      	push	{r4, r7, lr}
 8010c2a:	b087      	sub	sp, #28
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
 8010c30:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010c32:	683b      	ldr	r3, [r7, #0]
 8010c34:	331a      	adds	r3, #26
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7fe ff4c 	bl	800fad4 <ld_word>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d001      	beq.n	8010c46 <cmp_lfn+0x1e>
 8010c42:	2300      	movs	r3, #0
 8010c44:	e059      	b.n	8010cfa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	781b      	ldrb	r3, [r3, #0]
 8010c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010c4e:	1e5a      	subs	r2, r3, #1
 8010c50:	4613      	mov	r3, r2
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	4413      	add	r3, r2
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	4413      	add	r3, r2
 8010c5a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	81fb      	strh	r3, [r7, #14]
 8010c60:	2300      	movs	r3, #0
 8010c62:	613b      	str	r3, [r7, #16]
 8010c64:	e033      	b.n	8010cce <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010c66:	4a27      	ldr	r2, [pc, #156]	; (8010d04 <cmp_lfn+0xdc>)
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	4413      	add	r3, r2
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	461a      	mov	r2, r3
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	4413      	add	r3, r2
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fe ff2d 	bl	800fad4 <ld_word>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010c7e:	89fb      	ldrh	r3, [r7, #14]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d01a      	beq.n	8010cba <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	2bfe      	cmp	r3, #254	; 0xfe
 8010c88:	d812      	bhi.n	8010cb0 <cmp_lfn+0x88>
 8010c8a:	89bb      	ldrh	r3, [r7, #12]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f002 f909 	bl	8012ea4 <ff_wtoupper>
 8010c92:	4603      	mov	r3, r0
 8010c94:	461c      	mov	r4, r3
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	1c5a      	adds	r2, r3, #1
 8010c9a:	617a      	str	r2, [r7, #20]
 8010c9c:	005b      	lsls	r3, r3, #1
 8010c9e:	687a      	ldr	r2, [r7, #4]
 8010ca0:	4413      	add	r3, r2
 8010ca2:	881b      	ldrh	r3, [r3, #0]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f002 f8fd 	bl	8012ea4 <ff_wtoupper>
 8010caa:	4603      	mov	r3, r0
 8010cac:	429c      	cmp	r4, r3
 8010cae:	d001      	beq.n	8010cb4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	e022      	b.n	8010cfa <cmp_lfn+0xd2>
			}
			wc = uc;
 8010cb4:	89bb      	ldrh	r3, [r7, #12]
 8010cb6:	81fb      	strh	r3, [r7, #14]
 8010cb8:	e006      	b.n	8010cc8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010cba:	89bb      	ldrh	r3, [r7, #12]
 8010cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cc0:	4293      	cmp	r3, r2
 8010cc2:	d001      	beq.n	8010cc8 <cmp_lfn+0xa0>
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	e018      	b.n	8010cfa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	3301      	adds	r3, #1
 8010ccc:	613b      	str	r3, [r7, #16]
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	2b0c      	cmp	r3, #12
 8010cd2:	d9c8      	bls.n	8010c66 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010cd4:	683b      	ldr	r3, [r7, #0]
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d00b      	beq.n	8010cf8 <cmp_lfn+0xd0>
 8010ce0:	89fb      	ldrh	r3, [r7, #14]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d008      	beq.n	8010cf8 <cmp_lfn+0xd0>
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	005b      	lsls	r3, r3, #1
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	4413      	add	r3, r2
 8010cee:	881b      	ldrh	r3, [r3, #0]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d001      	beq.n	8010cf8 <cmp_lfn+0xd0>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	e000      	b.n	8010cfa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010cf8:	2301      	movs	r3, #1
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	371c      	adds	r7, #28
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd90      	pop	{r4, r7, pc}
 8010d02:	bf00      	nop
 8010d04:	0801efd0 	.word	0x0801efd0

08010d08 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b088      	sub	sp, #32
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	4611      	mov	r1, r2
 8010d14:	461a      	mov	r2, r3
 8010d16:	460b      	mov	r3, r1
 8010d18:	71fb      	strb	r3, [r7, #7]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010d1e:	68bb      	ldr	r3, [r7, #8]
 8010d20:	330d      	adds	r3, #13
 8010d22:	79ba      	ldrb	r2, [r7, #6]
 8010d24:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010d26:	68bb      	ldr	r3, [r7, #8]
 8010d28:	330b      	adds	r3, #11
 8010d2a:	220f      	movs	r2, #15
 8010d2c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	330c      	adds	r3, #12
 8010d32:	2200      	movs	r2, #0
 8010d34:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	331a      	adds	r3, #26
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7fe ff04 	bl	800fb4a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010d42:	79fb      	ldrb	r3, [r7, #7]
 8010d44:	1e5a      	subs	r2, r3, #1
 8010d46:	4613      	mov	r3, r2
 8010d48:	005b      	lsls	r3, r3, #1
 8010d4a:	4413      	add	r3, r2
 8010d4c:	009b      	lsls	r3, r3, #2
 8010d4e:	4413      	add	r3, r2
 8010d50:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010d52:	2300      	movs	r3, #0
 8010d54:	82fb      	strh	r3, [r7, #22]
 8010d56:	2300      	movs	r3, #0
 8010d58:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010d5a:	8afb      	ldrh	r3, [r7, #22]
 8010d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d60:	4293      	cmp	r3, r2
 8010d62:	d007      	beq.n	8010d74 <put_lfn+0x6c>
 8010d64:	69fb      	ldr	r3, [r7, #28]
 8010d66:	1c5a      	adds	r2, r3, #1
 8010d68:	61fa      	str	r2, [r7, #28]
 8010d6a:	005b      	lsls	r3, r3, #1
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	4413      	add	r3, r2
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010d74:	4a17      	ldr	r2, [pc, #92]	; (8010dd4 <put_lfn+0xcc>)
 8010d76:	69bb      	ldr	r3, [r7, #24]
 8010d78:	4413      	add	r3, r2
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	4413      	add	r3, r2
 8010d82:	8afa      	ldrh	r2, [r7, #22]
 8010d84:	4611      	mov	r1, r2
 8010d86:	4618      	mov	r0, r3
 8010d88:	f7fe fedf 	bl	800fb4a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010d8c:	8afb      	ldrh	r3, [r7, #22]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d102      	bne.n	8010d98 <put_lfn+0x90>
 8010d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010d96:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010d98:	69bb      	ldr	r3, [r7, #24]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	61bb      	str	r3, [r7, #24]
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	2b0c      	cmp	r3, #12
 8010da2:	d9da      	bls.n	8010d5a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010da4:	8afb      	ldrh	r3, [r7, #22]
 8010da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010daa:	4293      	cmp	r3, r2
 8010dac:	d006      	beq.n	8010dbc <put_lfn+0xb4>
 8010dae:	69fb      	ldr	r3, [r7, #28]
 8010db0:	005b      	lsls	r3, r3, #1
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	4413      	add	r3, r2
 8010db6:	881b      	ldrh	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d103      	bne.n	8010dc4 <put_lfn+0xbc>
 8010dbc:	79fb      	ldrb	r3, [r7, #7]
 8010dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dc2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	79fa      	ldrb	r2, [r7, #7]
 8010dc8:	701a      	strb	r2, [r3, #0]
}
 8010dca:	bf00      	nop
 8010dcc:	3720      	adds	r7, #32
 8010dce:	46bd      	mov	sp, r7
 8010dd0:	bd80      	pop	{r7, pc}
 8010dd2:	bf00      	nop
 8010dd4:	0801efd0 	.word	0x0801efd0

08010dd8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b08c      	sub	sp, #48	; 0x30
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	60f8      	str	r0, [r7, #12]
 8010de0:	60b9      	str	r1, [r7, #8]
 8010de2:	607a      	str	r2, [r7, #4]
 8010de4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010de6:	220b      	movs	r2, #11
 8010de8:	68b9      	ldr	r1, [r7, #8]
 8010dea:	68f8      	ldr	r0, [r7, #12]
 8010dec:	f7fe fef4 	bl	800fbd8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010df0:	683b      	ldr	r3, [r7, #0]
 8010df2:	2b05      	cmp	r3, #5
 8010df4:	d92b      	bls.n	8010e4e <gen_numname+0x76>
		sr = seq;
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010dfa:	e022      	b.n	8010e42 <gen_numname+0x6a>
			wc = *lfn++;
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	1c9a      	adds	r2, r3, #2
 8010e00:	607a      	str	r2, [r7, #4]
 8010e02:	881b      	ldrh	r3, [r3, #0]
 8010e04:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8010e06:	2300      	movs	r3, #0
 8010e08:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e0a:	e017      	b.n	8010e3c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010e0c:	69fb      	ldr	r3, [r7, #28]
 8010e0e:	005a      	lsls	r2, r3, #1
 8010e10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e12:	f003 0301 	and.w	r3, r3, #1
 8010e16:	4413      	add	r3, r2
 8010e18:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010e1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010e1c:	085b      	lsrs	r3, r3, #1
 8010e1e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d005      	beq.n	8010e36 <gen_numname+0x5e>
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010e30:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010e34:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e38:	3301      	adds	r3, #1
 8010e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3e:	2b0f      	cmp	r3, #15
 8010e40:	d9e4      	bls.n	8010e0c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1d8      	bne.n	8010dfc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010e4a:	69fb      	ldr	r3, [r7, #28]
 8010e4c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010e4e:	2307      	movs	r3, #7
 8010e50:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	b2db      	uxtb	r3, r3
 8010e56:	f003 030f 	and.w	r3, r3, #15
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	3330      	adds	r3, #48	; 0x30
 8010e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8010e62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e66:	2b39      	cmp	r3, #57	; 0x39
 8010e68:	d904      	bls.n	8010e74 <gen_numname+0x9c>
 8010e6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e6e:	3307      	adds	r3, #7
 8010e70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8010e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e76:	1e5a      	subs	r2, r3, #1
 8010e78:	62ba      	str	r2, [r7, #40]	; 0x28
 8010e7a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010e7e:	4413      	add	r3, r2
 8010e80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010e84:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	091b      	lsrs	r3, r3, #4
 8010e8c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d1de      	bne.n	8010e52 <gen_numname+0x7a>
	ns[i] = '~';
 8010e94:	f107 0214 	add.w	r2, r7, #20
 8010e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e9a:	4413      	add	r3, r2
 8010e9c:	227e      	movs	r2, #126	; 0x7e
 8010e9e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010ea0:	2300      	movs	r3, #0
 8010ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8010ea4:	e002      	b.n	8010eac <gen_numname+0xd4>
 8010ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8010eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eb0:	429a      	cmp	r2, r3
 8010eb2:	d205      	bcs.n	8010ec0 <gen_numname+0xe8>
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb8:	4413      	add	r3, r2
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	2b20      	cmp	r3, #32
 8010ebe:	d1f2      	bne.n	8010ea6 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec2:	2b07      	cmp	r3, #7
 8010ec4:	d808      	bhi.n	8010ed8 <gen_numname+0x100>
 8010ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec8:	1c5a      	adds	r2, r3, #1
 8010eca:	62ba      	str	r2, [r7, #40]	; 0x28
 8010ecc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010ed0:	4413      	add	r3, r2
 8010ed2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010ed6:	e000      	b.n	8010eda <gen_numname+0x102>
 8010ed8:	2120      	movs	r1, #32
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	1c5a      	adds	r2, r3, #1
 8010ede:	627a      	str	r2, [r7, #36]	; 0x24
 8010ee0:	68fa      	ldr	r2, [r7, #12]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	460a      	mov	r2, r1
 8010ee6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eea:	2b07      	cmp	r3, #7
 8010eec:	d9e8      	bls.n	8010ec0 <gen_numname+0xe8>
}
 8010eee:	bf00      	nop
 8010ef0:	bf00      	nop
 8010ef2:	3730      	adds	r7, #48	; 0x30
 8010ef4:	46bd      	mov	sp, r7
 8010ef6:	bd80      	pop	{r7, pc}

08010ef8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b085      	sub	sp, #20
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010f00:	2300      	movs	r3, #0
 8010f02:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010f04:	230b      	movs	r3, #11
 8010f06:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010f08:	7bfb      	ldrb	r3, [r7, #15]
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	0852      	lsrs	r2, r2, #1
 8010f0e:	01db      	lsls	r3, r3, #7
 8010f10:	4313      	orrs	r3, r2
 8010f12:	b2da      	uxtb	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	1c59      	adds	r1, r3, #1
 8010f18:	6079      	str	r1, [r7, #4]
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	3b01      	subs	r3, #1
 8010f24:	60bb      	str	r3, [r7, #8]
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d1ed      	bne.n	8010f08 <sum_sfn+0x10>
	return sum;
 8010f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	3714      	adds	r7, #20
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010f3a:	b580      	push	{r7, lr}
 8010f3c:	b086      	sub	sp, #24
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010f48:	2100      	movs	r1, #0
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff fc86 	bl	801085c <dir_sdi>
 8010f50:	4603      	mov	r3, r0
 8010f52:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010f54:	7dfb      	ldrb	r3, [r7, #23]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <dir_find+0x24>
 8010f5a:	7dfb      	ldrb	r3, [r7, #23]
 8010f5c:	e0a9      	b.n	80110b2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010f5e:	23ff      	movs	r3, #255	; 0xff
 8010f60:	753b      	strb	r3, [r7, #20]
 8010f62:	7d3b      	ldrb	r3, [r7, #20]
 8010f64:	757b      	strb	r3, [r7, #21]
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f6c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	69db      	ldr	r3, [r3, #28]
 8010f72:	4619      	mov	r1, r3
 8010f74:	6938      	ldr	r0, [r7, #16]
 8010f76:	f7ff f88f 	bl	8010098 <move_window>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010f7e:	7dfb      	ldrb	r3, [r7, #23]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	f040 8090 	bne.w	80110a6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	6a1b      	ldr	r3, [r3, #32]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010f8e:	7dbb      	ldrb	r3, [r7, #22]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d102      	bne.n	8010f9a <dir_find+0x60>
 8010f94:	2304      	movs	r3, #4
 8010f96:	75fb      	strb	r3, [r7, #23]
 8010f98:	e08a      	b.n	80110b0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a1b      	ldr	r3, [r3, #32]
 8010f9e:	330b      	adds	r3, #11
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010fa6:	73fb      	strb	r3, [r7, #15]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	7bfa      	ldrb	r2, [r7, #15]
 8010fac:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010fae:	7dbb      	ldrb	r3, [r7, #22]
 8010fb0:	2be5      	cmp	r3, #229	; 0xe5
 8010fb2:	d007      	beq.n	8010fc4 <dir_find+0x8a>
 8010fb4:	7bfb      	ldrb	r3, [r7, #15]
 8010fb6:	f003 0308 	and.w	r3, r3, #8
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d009      	beq.n	8010fd2 <dir_find+0x98>
 8010fbe:	7bfb      	ldrb	r3, [r7, #15]
 8010fc0:	2b0f      	cmp	r3, #15
 8010fc2:	d006      	beq.n	8010fd2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010fc4:	23ff      	movs	r3, #255	; 0xff
 8010fc6:	757b      	strb	r3, [r7, #21]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fce:	631a      	str	r2, [r3, #48]	; 0x30
 8010fd0:	e05e      	b.n	8011090 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010fd2:	7bfb      	ldrb	r3, [r7, #15]
 8010fd4:	2b0f      	cmp	r3, #15
 8010fd6:	d136      	bne.n	8011046 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d154      	bne.n	8011090 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010fe6:	7dbb      	ldrb	r3, [r7, #22]
 8010fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d00d      	beq.n	801100c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	6a1b      	ldr	r3, [r3, #32]
 8010ff4:	7b5b      	ldrb	r3, [r3, #13]
 8010ff6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010ff8:	7dbb      	ldrb	r3, [r7, #22]
 8010ffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ffe:	75bb      	strb	r3, [r7, #22]
 8011000:	7dbb      	ldrb	r3, [r7, #22]
 8011002:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	695a      	ldr	r2, [r3, #20]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801100c:	7dba      	ldrb	r2, [r7, #22]
 801100e:	7d7b      	ldrb	r3, [r7, #21]
 8011010:	429a      	cmp	r2, r3
 8011012:	d115      	bne.n	8011040 <dir_find+0x106>
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	6a1b      	ldr	r3, [r3, #32]
 8011018:	330d      	adds	r3, #13
 801101a:	781b      	ldrb	r3, [r3, #0]
 801101c:	7d3a      	ldrb	r2, [r7, #20]
 801101e:	429a      	cmp	r2, r3
 8011020:	d10e      	bne.n	8011040 <dir_find+0x106>
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	691a      	ldr	r2, [r3, #16]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6a1b      	ldr	r3, [r3, #32]
 801102a:	4619      	mov	r1, r3
 801102c:	4610      	mov	r0, r2
 801102e:	f7ff fdfb 	bl	8010c28 <cmp_lfn>
 8011032:	4603      	mov	r3, r0
 8011034:	2b00      	cmp	r3, #0
 8011036:	d003      	beq.n	8011040 <dir_find+0x106>
 8011038:	7d7b      	ldrb	r3, [r7, #21]
 801103a:	3b01      	subs	r3, #1
 801103c:	b2db      	uxtb	r3, r3
 801103e:	e000      	b.n	8011042 <dir_find+0x108>
 8011040:	23ff      	movs	r3, #255	; 0xff
 8011042:	757b      	strb	r3, [r7, #21]
 8011044:	e024      	b.n	8011090 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011046:	7d7b      	ldrb	r3, [r7, #21]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d109      	bne.n	8011060 <dir_find+0x126>
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6a1b      	ldr	r3, [r3, #32]
 8011050:	4618      	mov	r0, r3
 8011052:	f7ff ff51 	bl	8010ef8 <sum_sfn>
 8011056:	4603      	mov	r3, r0
 8011058:	461a      	mov	r2, r3
 801105a:	7d3b      	ldrb	r3, [r7, #20]
 801105c:	4293      	cmp	r3, r2
 801105e:	d024      	beq.n	80110aa <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011066:	f003 0301 	and.w	r3, r3, #1
 801106a:	2b00      	cmp	r3, #0
 801106c:	d10a      	bne.n	8011084 <dir_find+0x14a>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	6a18      	ldr	r0, [r3, #32]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	3324      	adds	r3, #36	; 0x24
 8011076:	220b      	movs	r2, #11
 8011078:	4619      	mov	r1, r3
 801107a:	f7fe fde9 	bl	800fc50 <mem_cmp>
 801107e:	4603      	mov	r3, r0
 8011080:	2b00      	cmp	r3, #0
 8011082:	d014      	beq.n	80110ae <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011084:	23ff      	movs	r3, #255	; 0xff
 8011086:	757b      	strb	r3, [r7, #21]
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801108e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011090:	2100      	movs	r1, #0
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff fc6b 	bl	801096e <dir_next>
 8011098:	4603      	mov	r3, r0
 801109a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801109c:	7dfb      	ldrb	r3, [r7, #23]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	f43f af65 	beq.w	8010f6e <dir_find+0x34>
 80110a4:	e004      	b.n	80110b0 <dir_find+0x176>
		if (res != FR_OK) break;
 80110a6:	bf00      	nop
 80110a8:	e002      	b.n	80110b0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80110aa:	bf00      	nop
 80110ac:	e000      	b.n	80110b0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80110ae:	bf00      	nop

	return res;
 80110b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3718      	adds	r7, #24
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
	...

080110bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b08c      	sub	sp, #48	; 0x30
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80110d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d001      	beq.n	80110dc <dir_register+0x20>
 80110d8:	2306      	movs	r3, #6
 80110da:	e0e0      	b.n	801129e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80110dc:	2300      	movs	r3, #0
 80110de:	627b      	str	r3, [r7, #36]	; 0x24
 80110e0:	e002      	b.n	80110e8 <dir_register+0x2c>
 80110e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e4:	3301      	adds	r3, #1
 80110e6:	627b      	str	r3, [r7, #36]	; 0x24
 80110e8:	69fb      	ldr	r3, [r7, #28]
 80110ea:	691a      	ldr	r2, [r3, #16]
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	005b      	lsls	r3, r3, #1
 80110f0:	4413      	add	r3, r2
 80110f2:	881b      	ldrh	r3, [r3, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1f4      	bne.n	80110e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80110fe:	f107 030c 	add.w	r3, r7, #12
 8011102:	220c      	movs	r2, #12
 8011104:	4618      	mov	r0, r3
 8011106:	f7fe fd67 	bl	800fbd8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801110a:	7dfb      	ldrb	r3, [r7, #23]
 801110c:	f003 0301 	and.w	r3, r3, #1
 8011110:	2b00      	cmp	r3, #0
 8011112:	d032      	beq.n	801117a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	2240      	movs	r2, #64	; 0x40
 8011118:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801111c:	2301      	movs	r3, #1
 801111e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011120:	e016      	b.n	8011150 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8011128:	69fb      	ldr	r3, [r7, #28]
 801112a:	691a      	ldr	r2, [r3, #16]
 801112c:	f107 010c 	add.w	r1, r7, #12
 8011130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011132:	f7ff fe51 	bl	8010dd8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f7ff feff 	bl	8010f3a <dir_find>
 801113c:	4603      	mov	r3, r0
 801113e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8011142:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011146:	2b00      	cmp	r3, #0
 8011148:	d106      	bne.n	8011158 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801114c:	3301      	adds	r3, #1
 801114e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011152:	2b63      	cmp	r3, #99	; 0x63
 8011154:	d9e5      	bls.n	8011122 <dir_register+0x66>
 8011156:	e000      	b.n	801115a <dir_register+0x9e>
			if (res != FR_OK) break;
 8011158:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115c:	2b64      	cmp	r3, #100	; 0x64
 801115e:	d101      	bne.n	8011164 <dir_register+0xa8>
 8011160:	2307      	movs	r3, #7
 8011162:	e09c      	b.n	801129e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8011164:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011168:	2b04      	cmp	r3, #4
 801116a:	d002      	beq.n	8011172 <dir_register+0xb6>
 801116c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011170:	e095      	b.n	801129e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8011172:	7dfa      	ldrb	r2, [r7, #23]
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801117a:	7dfb      	ldrb	r3, [r7, #23]
 801117c:	f003 0302 	and.w	r3, r3, #2
 8011180:	2b00      	cmp	r3, #0
 8011182:	d007      	beq.n	8011194 <dir_register+0xd8>
 8011184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011186:	330c      	adds	r3, #12
 8011188:	4a47      	ldr	r2, [pc, #284]	; (80112a8 <dir_register+0x1ec>)
 801118a:	fba2 2303 	umull	r2, r3, r2, r3
 801118e:	089b      	lsrs	r3, r3, #2
 8011190:	3301      	adds	r3, #1
 8011192:	e000      	b.n	8011196 <dir_register+0xda>
 8011194:	2301      	movs	r3, #1
 8011196:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8011198:	6a39      	ldr	r1, [r7, #32]
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f7ff fcbd 	bl	8010b1a <dir_alloc>
 80111a0:	4603      	mov	r3, r0
 80111a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80111a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d148      	bne.n	8011240 <dir_register+0x184>
 80111ae:	6a3b      	ldr	r3, [r7, #32]
 80111b0:	3b01      	subs	r3, #1
 80111b2:	623b      	str	r3, [r7, #32]
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d042      	beq.n	8011240 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	695a      	ldr	r2, [r3, #20]
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	015b      	lsls	r3, r3, #5
 80111c2:	1ad3      	subs	r3, r2, r3
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f7ff fb48 	bl	801085c <dir_sdi>
 80111cc:	4603      	mov	r3, r0
 80111ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80111d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d132      	bne.n	8011240 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	3324      	adds	r3, #36	; 0x24
 80111de:	4618      	mov	r0, r3
 80111e0:	f7ff fe8a 	bl	8010ef8 <sum_sfn>
 80111e4:	4603      	mov	r3, r0
 80111e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	69db      	ldr	r3, [r3, #28]
 80111ec:	4619      	mov	r1, r3
 80111ee:	69f8      	ldr	r0, [r7, #28]
 80111f0:	f7fe ff52 	bl	8010098 <move_window>
 80111f4:	4603      	mov	r3, r0
 80111f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80111fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d11d      	bne.n	801123e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8011202:	69fb      	ldr	r3, [r7, #28]
 8011204:	6918      	ldr	r0, [r3, #16]
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	6a19      	ldr	r1, [r3, #32]
 801120a:	6a3b      	ldr	r3, [r7, #32]
 801120c:	b2da      	uxtb	r2, r3
 801120e:	7efb      	ldrb	r3, [r7, #27]
 8011210:	f7ff fd7a 	bl	8010d08 <put_lfn>
				fs->wflag = 1;
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	2201      	movs	r2, #1
 8011218:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801121a:	2100      	movs	r1, #0
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f7ff fba6 	bl	801096e <dir_next>
 8011222:	4603      	mov	r3, r0
 8011224:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8011228:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801122c:	2b00      	cmp	r3, #0
 801122e:	d107      	bne.n	8011240 <dir_register+0x184>
 8011230:	6a3b      	ldr	r3, [r7, #32]
 8011232:	3b01      	subs	r3, #1
 8011234:	623b      	str	r3, [r7, #32]
 8011236:	6a3b      	ldr	r3, [r7, #32]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d1d5      	bne.n	80111e8 <dir_register+0x12c>
 801123c:	e000      	b.n	8011240 <dir_register+0x184>
				if (res != FR_OK) break;
 801123e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011240:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011244:	2b00      	cmp	r3, #0
 8011246:	d128      	bne.n	801129a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	69db      	ldr	r3, [r3, #28]
 801124c:	4619      	mov	r1, r3
 801124e:	69f8      	ldr	r0, [r7, #28]
 8011250:	f7fe ff22 	bl	8010098 <move_window>
 8011254:	4603      	mov	r3, r0
 8011256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801125a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801125e:	2b00      	cmp	r3, #0
 8011260:	d11b      	bne.n	801129a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a1b      	ldr	r3, [r3, #32]
 8011266:	2220      	movs	r2, #32
 8011268:	2100      	movs	r1, #0
 801126a:	4618      	mov	r0, r3
 801126c:	f7fe fcd5 	bl	800fc1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6a18      	ldr	r0, [r3, #32]
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	3324      	adds	r3, #36	; 0x24
 8011278:	220b      	movs	r2, #11
 801127a:	4619      	mov	r1, r3
 801127c:	f7fe fcac 	bl	800fbd8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	6a1b      	ldr	r3, [r3, #32]
 801128a:	330c      	adds	r3, #12
 801128c:	f002 0218 	and.w	r2, r2, #24
 8011290:	b2d2      	uxtb	r2, r2
 8011292:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8011294:	69fb      	ldr	r3, [r7, #28]
 8011296:	2201      	movs	r2, #1
 8011298:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801129a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3730      	adds	r7, #48	; 0x30
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	4ec4ec4f 	.word	0x4ec4ec4f

080112ac <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b088      	sub	sp, #32
 80112b0:	af00      	add	r7, sp, #0
 80112b2:	6078      	str	r0, [r7, #4]
 80112b4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2200      	movs	r2, #0
 80112c0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	69db      	ldr	r3, [r3, #28]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	f000 80c9 	beq.w	801145e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112d4:	d032      	beq.n	801133c <get_fileinfo+0x90>
			i = j = 0;
 80112d6:	2300      	movs	r3, #0
 80112d8:	61bb      	str	r3, [r7, #24]
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80112de:	e01b      	b.n	8011318 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80112e0:	89fb      	ldrh	r3, [r7, #14]
 80112e2:	2100      	movs	r1, #0
 80112e4:	4618      	mov	r0, r3
 80112e6:	f001 fda1 	bl	8012e2c <ff_convert>
 80112ea:	4603      	mov	r3, r0
 80112ec:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80112ee:	89fb      	ldrh	r3, [r7, #14]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d102      	bne.n	80112fa <get_fileinfo+0x4e>
 80112f4:	2300      	movs	r3, #0
 80112f6:	61fb      	str	r3, [r7, #28]
 80112f8:	e01a      	b.n	8011330 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80112fa:	69fb      	ldr	r3, [r7, #28]
 80112fc:	2bfe      	cmp	r3, #254	; 0xfe
 80112fe:	d902      	bls.n	8011306 <get_fileinfo+0x5a>
 8011300:	2300      	movs	r3, #0
 8011302:	61fb      	str	r3, [r7, #28]
 8011304:	e014      	b.n	8011330 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	1c5a      	adds	r2, r3, #1
 801130a:	61fa      	str	r2, [r7, #28]
 801130c:	89fa      	ldrh	r2, [r7, #14]
 801130e:	b2d1      	uxtb	r1, r2
 8011310:	683a      	ldr	r2, [r7, #0]
 8011312:	4413      	add	r3, r2
 8011314:	460a      	mov	r2, r1
 8011316:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	691a      	ldr	r2, [r3, #16]
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	1c59      	adds	r1, r3, #1
 8011320:	61b9      	str	r1, [r7, #24]
 8011322:	005b      	lsls	r3, r3, #1
 8011324:	4413      	add	r3, r2
 8011326:	881b      	ldrh	r3, [r3, #0]
 8011328:	81fb      	strh	r3, [r7, #14]
 801132a:	89fb      	ldrh	r3, [r7, #14]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d1d7      	bne.n	80112e0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8011330:	683a      	ldr	r2, [r7, #0]
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	4413      	add	r3, r2
 8011336:	3316      	adds	r3, #22
 8011338:	2200      	movs	r2, #0
 801133a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 801133c:	2300      	movs	r3, #0
 801133e:	61bb      	str	r3, [r7, #24]
 8011340:	69bb      	ldr	r3, [r7, #24]
 8011342:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011344:	683a      	ldr	r2, [r7, #0]
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	4413      	add	r3, r2
 801134a:	3316      	adds	r3, #22
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8011350:	e04c      	b.n	80113ec <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	6a1a      	ldr	r2, [r3, #32]
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	1c59      	adds	r1, r3, #1
 801135a:	61f9      	str	r1, [r7, #28]
 801135c:	4413      	add	r3, r2
 801135e:	781b      	ldrb	r3, [r3, #0]
 8011360:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011362:	7dfb      	ldrb	r3, [r7, #23]
 8011364:	2b20      	cmp	r3, #32
 8011366:	d100      	bne.n	801136a <get_fileinfo+0xbe>
 8011368:	e040      	b.n	80113ec <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	2b05      	cmp	r3, #5
 801136e:	d101      	bne.n	8011374 <get_fileinfo+0xc8>
 8011370:	23e5      	movs	r3, #229	; 0xe5
 8011372:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8011374:	69fb      	ldr	r3, [r7, #28]
 8011376:	2b09      	cmp	r3, #9
 8011378:	d10f      	bne.n	801139a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801137a:	89bb      	ldrh	r3, [r7, #12]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d105      	bne.n	801138c <get_fileinfo+0xe0>
 8011380:	683a      	ldr	r2, [r7, #0]
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	4413      	add	r3, r2
 8011386:	3316      	adds	r3, #22
 8011388:	222e      	movs	r2, #46	; 0x2e
 801138a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801138c:	69bb      	ldr	r3, [r7, #24]
 801138e:	1c5a      	adds	r2, r3, #1
 8011390:	61ba      	str	r2, [r7, #24]
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	4413      	add	r3, r2
 8011396:	222e      	movs	r2, #46	; 0x2e
 8011398:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801139a:	683a      	ldr	r2, [r7, #0]
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	4413      	add	r3, r2
 80113a0:	3309      	adds	r3, #9
 80113a2:	7dfa      	ldrb	r2, [r7, #23]
 80113a4:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80113a6:	89bb      	ldrh	r3, [r7, #12]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d11c      	bne.n	80113e6 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80113ac:	7dfb      	ldrb	r3, [r7, #23]
 80113ae:	2b40      	cmp	r3, #64	; 0x40
 80113b0:	d913      	bls.n	80113da <get_fileinfo+0x12e>
 80113b2:	7dfb      	ldrb	r3, [r7, #23]
 80113b4:	2b5a      	cmp	r3, #90	; 0x5a
 80113b6:	d810      	bhi.n	80113da <get_fileinfo+0x12e>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	6a1b      	ldr	r3, [r3, #32]
 80113bc:	330c      	adds	r3, #12
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	461a      	mov	r2, r3
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	2b08      	cmp	r3, #8
 80113c6:	d901      	bls.n	80113cc <get_fileinfo+0x120>
 80113c8:	2310      	movs	r3, #16
 80113ca:	e000      	b.n	80113ce <get_fileinfo+0x122>
 80113cc:	2308      	movs	r3, #8
 80113ce:	4013      	ands	r3, r2
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d002      	beq.n	80113da <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80113d4:	7dfb      	ldrb	r3, [r7, #23]
 80113d6:	3320      	adds	r3, #32
 80113d8:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	4413      	add	r3, r2
 80113e0:	3316      	adds	r3, #22
 80113e2:	7dfa      	ldrb	r2, [r7, #23]
 80113e4:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80113e6:	69bb      	ldr	r3, [r7, #24]
 80113e8:	3301      	adds	r3, #1
 80113ea:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80113ec:	69fb      	ldr	r3, [r7, #28]
 80113ee:	2b0a      	cmp	r3, #10
 80113f0:	d9af      	bls.n	8011352 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80113f2:	89bb      	ldrh	r3, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d10d      	bne.n	8011414 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80113f8:	683a      	ldr	r2, [r7, #0]
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	4413      	add	r3, r2
 80113fe:	3316      	adds	r3, #22
 8011400:	2200      	movs	r2, #0
 8011402:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6a1b      	ldr	r3, [r3, #32]
 8011408:	330c      	adds	r3, #12
 801140a:	781b      	ldrb	r3, [r3, #0]
 801140c:	2b00      	cmp	r3, #0
 801140e:	d101      	bne.n	8011414 <get_fileinfo+0x168>
 8011410:	2300      	movs	r3, #0
 8011412:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8011414:	683a      	ldr	r2, [r7, #0]
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	4413      	add	r3, r2
 801141a:	3309      	adds	r3, #9
 801141c:	2200      	movs	r2, #0
 801141e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6a1b      	ldr	r3, [r3, #32]
 8011424:	7ada      	ldrb	r2, [r3, #11]
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	6a1b      	ldr	r3, [r3, #32]
 801142e:	331c      	adds	r3, #28
 8011430:	4618      	mov	r0, r3
 8011432:	f7fe fb67 	bl	800fb04 <ld_dword>
 8011436:	4602      	mov	r2, r0
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801143c:	687b      	ldr	r3, [r7, #4]
 801143e:	6a1b      	ldr	r3, [r3, #32]
 8011440:	3316      	adds	r3, #22
 8011442:	4618      	mov	r0, r3
 8011444:	f7fe fb5e 	bl	800fb04 <ld_dword>
 8011448:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	b29a      	uxth	r2, r3
 801144e:	683b      	ldr	r3, [r7, #0]
 8011450:	80da      	strh	r2, [r3, #6]
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	0c1b      	lsrs	r3, r3, #16
 8011456:	b29a      	uxth	r2, r3
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	809a      	strh	r2, [r3, #4]
 801145c:	e000      	b.n	8011460 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801145e:	bf00      	nop
}
 8011460:	3720      	adds	r7, #32
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
	...

08011468 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b08a      	sub	sp, #40	; 0x28
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011472:	683b      	ldr	r3, [r7, #0]
 8011474:	681b      	ldr	r3, [r3, #0]
 8011476:	613b      	str	r3, [r7, #16]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	691b      	ldr	r3, [r3, #16]
 801147e:	60fb      	str	r3, [r7, #12]
 8011480:	2300      	movs	r3, #0
 8011482:	617b      	str	r3, [r7, #20]
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	1c5a      	adds	r2, r3, #1
 801148c:	61ba      	str	r2, [r7, #24]
 801148e:	693a      	ldr	r2, [r7, #16]
 8011490:	4413      	add	r3, r2
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8011496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011498:	2b1f      	cmp	r3, #31
 801149a:	d940      	bls.n	801151e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801149c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801149e:	2b2f      	cmp	r3, #47	; 0x2f
 80114a0:	d006      	beq.n	80114b0 <create_name+0x48>
 80114a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114a4:	2b5c      	cmp	r3, #92	; 0x5c
 80114a6:	d110      	bne.n	80114ca <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80114a8:	e002      	b.n	80114b0 <create_name+0x48>
 80114aa:	69bb      	ldr	r3, [r7, #24]
 80114ac:	3301      	adds	r3, #1
 80114ae:	61bb      	str	r3, [r7, #24]
 80114b0:	693a      	ldr	r2, [r7, #16]
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	4413      	add	r3, r2
 80114b6:	781b      	ldrb	r3, [r3, #0]
 80114b8:	2b2f      	cmp	r3, #47	; 0x2f
 80114ba:	d0f6      	beq.n	80114aa <create_name+0x42>
 80114bc:	693a      	ldr	r2, [r7, #16]
 80114be:	69bb      	ldr	r3, [r7, #24]
 80114c0:	4413      	add	r3, r2
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b5c      	cmp	r3, #92	; 0x5c
 80114c6:	d0f0      	beq.n	80114aa <create_name+0x42>
			break;
 80114c8:	e02a      	b.n	8011520 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	2bfe      	cmp	r3, #254	; 0xfe
 80114ce:	d901      	bls.n	80114d4 <create_name+0x6c>
 80114d0:	2306      	movs	r3, #6
 80114d2:	e177      	b.n	80117c4 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80114d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114d6:	b2db      	uxtb	r3, r3
 80114d8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80114da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114dc:	2101      	movs	r1, #1
 80114de:	4618      	mov	r0, r3
 80114e0:	f001 fca4 	bl	8012e2c <ff_convert>
 80114e4:	4603      	mov	r3, r0
 80114e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80114e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d101      	bne.n	80114f2 <create_name+0x8a>
 80114ee:	2306      	movs	r3, #6
 80114f0:	e168      	b.n	80117c4 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80114f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114f4:	2b7f      	cmp	r3, #127	; 0x7f
 80114f6:	d809      	bhi.n	801150c <create_name+0xa4>
 80114f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114fa:	4619      	mov	r1, r3
 80114fc:	48b3      	ldr	r0, [pc, #716]	; (80117cc <create_name+0x364>)
 80114fe:	f7fe fbce 	bl	800fc9e <chk_chr>
 8011502:	4603      	mov	r3, r0
 8011504:	2b00      	cmp	r3, #0
 8011506:	d001      	beq.n	801150c <create_name+0xa4>
 8011508:	2306      	movs	r3, #6
 801150a:	e15b      	b.n	80117c4 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	1c5a      	adds	r2, r3, #1
 8011510:	617a      	str	r2, [r7, #20]
 8011512:	005b      	lsls	r3, r3, #1
 8011514:	68fa      	ldr	r2, [r7, #12]
 8011516:	4413      	add	r3, r2
 8011518:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801151a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801151c:	e7b4      	b.n	8011488 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801151e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011520:	693a      	ldr	r2, [r7, #16]
 8011522:	69bb      	ldr	r3, [r7, #24]
 8011524:	441a      	add	r2, r3
 8011526:	683b      	ldr	r3, [r7, #0]
 8011528:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801152a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801152c:	2b1f      	cmp	r3, #31
 801152e:	d801      	bhi.n	8011534 <create_name+0xcc>
 8011530:	2304      	movs	r3, #4
 8011532:	e000      	b.n	8011536 <create_name+0xce>
 8011534:	2300      	movs	r3, #0
 8011536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801153a:	e011      	b.n	8011560 <create_name+0xf8>
		w = lfn[di - 1];
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011542:	3b01      	subs	r3, #1
 8011544:	005b      	lsls	r3, r3, #1
 8011546:	68fa      	ldr	r2, [r7, #12]
 8011548:	4413      	add	r3, r2
 801154a:	881b      	ldrh	r3, [r3, #0]
 801154c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801154e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011550:	2b20      	cmp	r3, #32
 8011552:	d002      	beq.n	801155a <create_name+0xf2>
 8011554:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011556:	2b2e      	cmp	r3, #46	; 0x2e
 8011558:	d106      	bne.n	8011568 <create_name+0x100>
		di--;
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	3b01      	subs	r3, #1
 801155e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d1ea      	bne.n	801153c <create_name+0xd4>
 8011566:	e000      	b.n	801156a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8011568:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	68fa      	ldr	r2, [r7, #12]
 8011570:	4413      	add	r3, r2
 8011572:	2200      	movs	r2, #0
 8011574:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8011576:	697b      	ldr	r3, [r7, #20]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <create_name+0x118>
 801157c:	2306      	movs	r3, #6
 801157e:	e121      	b.n	80117c4 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	3324      	adds	r3, #36	; 0x24
 8011584:	220b      	movs	r2, #11
 8011586:	2120      	movs	r1, #32
 8011588:	4618      	mov	r0, r3
 801158a:	f7fe fb46 	bl	800fc1a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801158e:	2300      	movs	r3, #0
 8011590:	61bb      	str	r3, [r7, #24]
 8011592:	e002      	b.n	801159a <create_name+0x132>
 8011594:	69bb      	ldr	r3, [r7, #24]
 8011596:	3301      	adds	r3, #1
 8011598:	61bb      	str	r3, [r7, #24]
 801159a:	69bb      	ldr	r3, [r7, #24]
 801159c:	005b      	lsls	r3, r3, #1
 801159e:	68fa      	ldr	r2, [r7, #12]
 80115a0:	4413      	add	r3, r2
 80115a2:	881b      	ldrh	r3, [r3, #0]
 80115a4:	2b20      	cmp	r3, #32
 80115a6:	d0f5      	beq.n	8011594 <create_name+0x12c>
 80115a8:	69bb      	ldr	r3, [r7, #24]
 80115aa:	005b      	lsls	r3, r3, #1
 80115ac:	68fa      	ldr	r2, [r7, #12]
 80115ae:	4413      	add	r3, r2
 80115b0:	881b      	ldrh	r3, [r3, #0]
 80115b2:	2b2e      	cmp	r3, #46	; 0x2e
 80115b4:	d0ee      	beq.n	8011594 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80115b6:	69bb      	ldr	r3, [r7, #24]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d009      	beq.n	80115d0 <create_name+0x168>
 80115bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115c0:	f043 0303 	orr.w	r3, r3, #3
 80115c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80115c8:	e002      	b.n	80115d0 <create_name+0x168>
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	3b01      	subs	r3, #1
 80115ce:	617b      	str	r3, [r7, #20]
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d009      	beq.n	80115ea <create_name+0x182>
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80115dc:	3b01      	subs	r3, #1
 80115de:	005b      	lsls	r3, r3, #1
 80115e0:	68fa      	ldr	r2, [r7, #12]
 80115e2:	4413      	add	r3, r2
 80115e4:	881b      	ldrh	r3, [r3, #0]
 80115e6:	2b2e      	cmp	r3, #46	; 0x2e
 80115e8:	d1ef      	bne.n	80115ca <create_name+0x162>

	i = b = 0; ni = 8;
 80115ea:	2300      	movs	r3, #0
 80115ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80115f0:	2300      	movs	r3, #0
 80115f2:	623b      	str	r3, [r7, #32]
 80115f4:	2308      	movs	r3, #8
 80115f6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	1c5a      	adds	r2, r3, #1
 80115fc:	61ba      	str	r2, [r7, #24]
 80115fe:	005b      	lsls	r3, r3, #1
 8011600:	68fa      	ldr	r2, [r7, #12]
 8011602:	4413      	add	r3, r2
 8011604:	881b      	ldrh	r3, [r3, #0]
 8011606:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8011608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801160a:	2b00      	cmp	r3, #0
 801160c:	f000 8090 	beq.w	8011730 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011612:	2b20      	cmp	r3, #32
 8011614:	d006      	beq.n	8011624 <create_name+0x1bc>
 8011616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011618:	2b2e      	cmp	r3, #46	; 0x2e
 801161a:	d10a      	bne.n	8011632 <create_name+0x1ca>
 801161c:	69ba      	ldr	r2, [r7, #24]
 801161e:	697b      	ldr	r3, [r7, #20]
 8011620:	429a      	cmp	r2, r3
 8011622:	d006      	beq.n	8011632 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011628:	f043 0303 	orr.w	r3, r3, #3
 801162c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011630:	e07d      	b.n	801172e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011632:	6a3a      	ldr	r2, [r7, #32]
 8011634:	69fb      	ldr	r3, [r7, #28]
 8011636:	429a      	cmp	r2, r3
 8011638:	d203      	bcs.n	8011642 <create_name+0x1da>
 801163a:	69ba      	ldr	r2, [r7, #24]
 801163c:	697b      	ldr	r3, [r7, #20]
 801163e:	429a      	cmp	r2, r3
 8011640:	d123      	bne.n	801168a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	2b0b      	cmp	r3, #11
 8011646:	d106      	bne.n	8011656 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8011648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801164c:	f043 0303 	orr.w	r3, r3, #3
 8011650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011654:	e06f      	b.n	8011736 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	429a      	cmp	r2, r3
 801165c:	d005      	beq.n	801166a <create_name+0x202>
 801165e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011662:	f043 0303 	orr.w	r3, r3, #3
 8011666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801166a:	69ba      	ldr	r2, [r7, #24]
 801166c:	697b      	ldr	r3, [r7, #20]
 801166e:	429a      	cmp	r2, r3
 8011670:	d860      	bhi.n	8011734 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	61bb      	str	r3, [r7, #24]
 8011676:	2308      	movs	r3, #8
 8011678:	623b      	str	r3, [r7, #32]
 801167a:	230b      	movs	r3, #11
 801167c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801167e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011682:	009b      	lsls	r3, r3, #2
 8011684:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011688:	e051      	b.n	801172e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801168a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801168c:	2b7f      	cmp	r3, #127	; 0x7f
 801168e:	d914      	bls.n	80116ba <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8011690:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011692:	2100      	movs	r1, #0
 8011694:	4618      	mov	r0, r3
 8011696:	f001 fbc9 	bl	8012e2c <ff_convert>
 801169a:	4603      	mov	r3, r0
 801169c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801169e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d004      	beq.n	80116ae <create_name+0x246>
 80116a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116a6:	3b80      	subs	r3, #128	; 0x80
 80116a8:	4a49      	ldr	r2, [pc, #292]	; (80117d0 <create_name+0x368>)
 80116aa:	5cd3      	ldrb	r3, [r2, r3]
 80116ac:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80116ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116b2:	f043 0302 	orr.w	r3, r3, #2
 80116b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80116ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d007      	beq.n	80116d0 <create_name+0x268>
 80116c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116c2:	4619      	mov	r1, r3
 80116c4:	4843      	ldr	r0, [pc, #268]	; (80117d4 <create_name+0x36c>)
 80116c6:	f7fe faea 	bl	800fc9e <chk_chr>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d008      	beq.n	80116e2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80116d0:	235f      	movs	r3, #95	; 0x5f
 80116d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80116d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80116d8:	f043 0303 	orr.w	r3, r3, #3
 80116dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80116e0:	e01b      	b.n	801171a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80116e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116e4:	2b40      	cmp	r3, #64	; 0x40
 80116e6:	d909      	bls.n	80116fc <create_name+0x294>
 80116e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116ea:	2b5a      	cmp	r3, #90	; 0x5a
 80116ec:	d806      	bhi.n	80116fc <create_name+0x294>
					b |= 2;
 80116ee:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80116f2:	f043 0302 	orr.w	r3, r3, #2
 80116f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80116fa:	e00e      	b.n	801171a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80116fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80116fe:	2b60      	cmp	r3, #96	; 0x60
 8011700:	d90b      	bls.n	801171a <create_name+0x2b2>
 8011702:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011704:	2b7a      	cmp	r3, #122	; 0x7a
 8011706:	d808      	bhi.n	801171a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8011708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801170c:	f043 0301 	orr.w	r3, r3, #1
 8011710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011714:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011716:	3b20      	subs	r3, #32
 8011718:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801171a:	6a3b      	ldr	r3, [r7, #32]
 801171c:	1c5a      	adds	r2, r3, #1
 801171e:	623a      	str	r2, [r7, #32]
 8011720:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011722:	b2d1      	uxtb	r1, r2
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	4413      	add	r3, r2
 8011728:	460a      	mov	r2, r1
 801172a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801172e:	e763      	b.n	80115f8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011730:	bf00      	nop
 8011732:	e000      	b.n	8011736 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8011734:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801173c:	2be5      	cmp	r3, #229	; 0xe5
 801173e:	d103      	bne.n	8011748 <create_name+0x2e0>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	2205      	movs	r2, #5
 8011744:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	2b08      	cmp	r3, #8
 801174c:	d104      	bne.n	8011758 <create_name+0x2f0>
 801174e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8011758:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801175c:	f003 030c 	and.w	r3, r3, #12
 8011760:	2b0c      	cmp	r3, #12
 8011762:	d005      	beq.n	8011770 <create_name+0x308>
 8011764:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011768:	f003 0303 	and.w	r3, r3, #3
 801176c:	2b03      	cmp	r3, #3
 801176e:	d105      	bne.n	801177c <create_name+0x314>
 8011770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011774:	f043 0302 	orr.w	r3, r3, #2
 8011778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801177c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011780:	f003 0302 	and.w	r3, r3, #2
 8011784:	2b00      	cmp	r3, #0
 8011786:	d117      	bne.n	80117b8 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8011788:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801178c:	f003 0303 	and.w	r3, r3, #3
 8011790:	2b01      	cmp	r3, #1
 8011792:	d105      	bne.n	80117a0 <create_name+0x338>
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011798:	f043 0310 	orr.w	r3, r3, #16
 801179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80117a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80117a4:	f003 030c 	and.w	r3, r3, #12
 80117a8:	2b04      	cmp	r3, #4
 80117aa:	d105      	bne.n	80117b8 <create_name+0x350>
 80117ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117b0:	f043 0308 	orr.w	r3, r3, #8
 80117b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80117be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80117c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3728      	adds	r7, #40	; 0x28
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}
 80117cc:	0801aff8 	.word	0x0801aff8
 80117d0:	0801ef50 	.word	0x0801ef50
 80117d4:	0801b004 	.word	0x0801b004

080117d8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b086      	sub	sp, #24
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80117e6:	693b      	ldr	r3, [r7, #16]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80117ec:	e002      	b.n	80117f4 <follow_path+0x1c>
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	3301      	adds	r3, #1
 80117f2:	603b      	str	r3, [r7, #0]
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	2b2f      	cmp	r3, #47	; 0x2f
 80117fa:	d0f8      	beq.n	80117ee <follow_path+0x16>
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	781b      	ldrb	r3, [r3, #0]
 8011800:	2b5c      	cmp	r3, #92	; 0x5c
 8011802:	d0f4      	beq.n	80117ee <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011804:	693b      	ldr	r3, [r7, #16]
 8011806:	2200      	movs	r2, #0
 8011808:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801180a:	683b      	ldr	r3, [r7, #0]
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	2b1f      	cmp	r3, #31
 8011810:	d80a      	bhi.n	8011828 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	2280      	movs	r2, #128	; 0x80
 8011816:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801181a:	2100      	movs	r1, #0
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f7ff f81d 	bl	801085c <dir_sdi>
 8011822:	4603      	mov	r3, r0
 8011824:	75fb      	strb	r3, [r7, #23]
 8011826:	e048      	b.n	80118ba <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011828:	463b      	mov	r3, r7
 801182a:	4619      	mov	r1, r3
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7ff fe1b 	bl	8011468 <create_name>
 8011832:	4603      	mov	r3, r0
 8011834:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011836:	7dfb      	ldrb	r3, [r7, #23]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d139      	bne.n	80118b0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f7ff fb7c 	bl	8010f3a <dir_find>
 8011842:	4603      	mov	r3, r0
 8011844:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801184c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801184e:	7dfb      	ldrb	r3, [r7, #23]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d00a      	beq.n	801186a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011854:	7dfb      	ldrb	r3, [r7, #23]
 8011856:	2b04      	cmp	r3, #4
 8011858:	d12c      	bne.n	80118b4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801185a:	7afb      	ldrb	r3, [r7, #11]
 801185c:	f003 0304 	and.w	r3, r3, #4
 8011860:	2b00      	cmp	r3, #0
 8011862:	d127      	bne.n	80118b4 <follow_path+0xdc>
 8011864:	2305      	movs	r3, #5
 8011866:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011868:	e024      	b.n	80118b4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801186a:	7afb      	ldrb	r3, [r7, #11]
 801186c:	f003 0304 	and.w	r3, r3, #4
 8011870:	2b00      	cmp	r3, #0
 8011872:	d121      	bne.n	80118b8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011874:	693b      	ldr	r3, [r7, #16]
 8011876:	799b      	ldrb	r3, [r3, #6]
 8011878:	f003 0310 	and.w	r3, r3, #16
 801187c:	2b00      	cmp	r3, #0
 801187e:	d102      	bne.n	8011886 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011880:	2305      	movs	r3, #5
 8011882:	75fb      	strb	r3, [r7, #23]
 8011884:	e019      	b.n	80118ba <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	695b      	ldr	r3, [r3, #20]
 8011890:	68fa      	ldr	r2, [r7, #12]
 8011892:	8992      	ldrh	r2, [r2, #12]
 8011894:	fbb3 f0f2 	udiv	r0, r3, r2
 8011898:	fb02 f200 	mul.w	r2, r2, r0
 801189c:	1a9b      	subs	r3, r3, r2
 801189e:	440b      	add	r3, r1
 80118a0:	4619      	mov	r1, r3
 80118a2:	68f8      	ldr	r0, [r7, #12]
 80118a4:	f7ff f980 	bl	8010ba8 <ld_clust>
 80118a8:	4602      	mov	r2, r0
 80118aa:	693b      	ldr	r3, [r7, #16]
 80118ac:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80118ae:	e7bb      	b.n	8011828 <follow_path+0x50>
			if (res != FR_OK) break;
 80118b0:	bf00      	nop
 80118b2:	e002      	b.n	80118ba <follow_path+0xe2>
				break;
 80118b4:	bf00      	nop
 80118b6:	e000      	b.n	80118ba <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80118b8:	bf00      	nop
			}
		}
	}

	return res;
 80118ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3718      	adds	r7, #24
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b087      	sub	sp, #28
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80118cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118d0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d031      	beq.n	801193e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	617b      	str	r3, [r7, #20]
 80118e0:	e002      	b.n	80118e8 <get_ldnumber+0x24>
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	3301      	adds	r3, #1
 80118e6:	617b      	str	r3, [r7, #20]
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	2b1f      	cmp	r3, #31
 80118ee:	d903      	bls.n	80118f8 <get_ldnumber+0x34>
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	2b3a      	cmp	r3, #58	; 0x3a
 80118f6:	d1f4      	bne.n	80118e2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	781b      	ldrb	r3, [r3, #0]
 80118fc:	2b3a      	cmp	r3, #58	; 0x3a
 80118fe:	d11c      	bne.n	801193a <get_ldnumber+0x76>
			tp = *path;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	1c5a      	adds	r2, r3, #1
 801190a:	60fa      	str	r2, [r7, #12]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	3b30      	subs	r3, #48	; 0x30
 8011910:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011912:	68bb      	ldr	r3, [r7, #8]
 8011914:	2b09      	cmp	r3, #9
 8011916:	d80e      	bhi.n	8011936 <get_ldnumber+0x72>
 8011918:	68fa      	ldr	r2, [r7, #12]
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	429a      	cmp	r2, r3
 801191e:	d10a      	bne.n	8011936 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d107      	bne.n	8011936 <get_ldnumber+0x72>
					vol = (int)i;
 8011926:	68bb      	ldr	r3, [r7, #8]
 8011928:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	3301      	adds	r3, #1
 801192e:	617b      	str	r3, [r7, #20]
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	697a      	ldr	r2, [r7, #20]
 8011934:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011936:	693b      	ldr	r3, [r7, #16]
 8011938:	e002      	b.n	8011940 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801193a:	2300      	movs	r3, #0
 801193c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801193e:	693b      	ldr	r3, [r7, #16]
}
 8011940:	4618      	mov	r0, r3
 8011942:	371c      	adds	r7, #28
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr

0801194c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	2200      	movs	r2, #0
 801195a:	70da      	strb	r2, [r3, #3]
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011962:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011964:	6839      	ldr	r1, [r7, #0]
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7fe fb96 	bl	8010098 <move_window>
 801196c:	4603      	mov	r3, r0
 801196e:	2b00      	cmp	r3, #0
 8011970:	d001      	beq.n	8011976 <check_fs+0x2a>
 8011972:	2304      	movs	r3, #4
 8011974:	e038      	b.n	80119e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	333c      	adds	r3, #60	; 0x3c
 801197a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe f8a8 	bl	800fad4 <ld_word>
 8011984:	4603      	mov	r3, r0
 8011986:	461a      	mov	r2, r3
 8011988:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801198c:	429a      	cmp	r2, r3
 801198e:	d001      	beq.n	8011994 <check_fs+0x48>
 8011990:	2303      	movs	r3, #3
 8011992:	e029      	b.n	80119e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801199a:	2be9      	cmp	r3, #233	; 0xe9
 801199c:	d009      	beq.n	80119b2 <check_fs+0x66>
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80119a4:	2beb      	cmp	r3, #235	; 0xeb
 80119a6:	d11e      	bne.n	80119e6 <check_fs+0x9a>
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80119ae:	2b90      	cmp	r3, #144	; 0x90
 80119b0:	d119      	bne.n	80119e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	333c      	adds	r3, #60	; 0x3c
 80119b6:	3336      	adds	r3, #54	; 0x36
 80119b8:	4618      	mov	r0, r3
 80119ba:	f7fe f8a3 	bl	800fb04 <ld_dword>
 80119be:	4603      	mov	r3, r0
 80119c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80119c4:	4a0a      	ldr	r2, [pc, #40]	; (80119f0 <check_fs+0xa4>)
 80119c6:	4293      	cmp	r3, r2
 80119c8:	d101      	bne.n	80119ce <check_fs+0x82>
 80119ca:	2300      	movs	r3, #0
 80119cc:	e00c      	b.n	80119e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	333c      	adds	r3, #60	; 0x3c
 80119d2:	3352      	adds	r3, #82	; 0x52
 80119d4:	4618      	mov	r0, r3
 80119d6:	f7fe f895 	bl	800fb04 <ld_dword>
 80119da:	4603      	mov	r3, r0
 80119dc:	4a05      	ldr	r2, [pc, #20]	; (80119f4 <check_fs+0xa8>)
 80119de:	4293      	cmp	r3, r2
 80119e0:	d101      	bne.n	80119e6 <check_fs+0x9a>
 80119e2:	2300      	movs	r3, #0
 80119e4:	e000      	b.n	80119e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80119e6:	2302      	movs	r3, #2
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}
 80119f0:	00544146 	.word	0x00544146
 80119f4:	33544146 	.word	0x33544146

080119f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b096      	sub	sp, #88	; 0x58
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	4613      	mov	r3, r2
 8011a04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	2200      	movs	r2, #0
 8011a0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011a0c:	68f8      	ldr	r0, [r7, #12]
 8011a0e:	f7ff ff59 	bl	80118c4 <get_ldnumber>
 8011a12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	da01      	bge.n	8011a1e <find_volume+0x26>
 8011a1a:	230b      	movs	r3, #11
 8011a1c:	e26c      	b.n	8011ef8 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011a1e:	4aa4      	ldr	r2, [pc, #656]	; (8011cb0 <find_volume+0x2b8>)
 8011a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <find_volume+0x3a>
 8011a2e:	230c      	movs	r3, #12
 8011a30:	e262      	b.n	8011ef8 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8011a32:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011a34:	f7fe f94e 	bl	800fcd4 <lock_fs>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d101      	bne.n	8011a42 <find_volume+0x4a>
 8011a3e:	230f      	movs	r3, #15
 8011a40:	e25a      	b.n	8011ef8 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a46:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011a48:	79fb      	ldrb	r3, [r7, #7]
 8011a4a:	f023 0301 	bic.w	r3, r3, #1
 8011a4e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d01a      	beq.n	8011a8e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8011a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a5a:	785b      	ldrb	r3, [r3, #1]
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f7fd ff9b 	bl	800f998 <disk_status>
 8011a62:	4603      	mov	r3, r0
 8011a64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011a68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a6c:	f003 0301 	and.w	r3, r3, #1
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d10c      	bne.n	8011a8e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011a74:	79fb      	ldrb	r3, [r7, #7]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d007      	beq.n	8011a8a <find_volume+0x92>
 8011a7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011a7e:	f003 0304 	and.w	r3, r3, #4
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d001      	beq.n	8011a8a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8011a86:	230a      	movs	r3, #10
 8011a88:	e236      	b.n	8011ef8 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e234      	b.n	8011ef8 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a90:	2200      	movs	r2, #0
 8011a92:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a96:	b2da      	uxtb	r2, r3
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9e:	785b      	ldrb	r3, [r3, #1]
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7fd ff93 	bl	800f9cc <disk_initialize>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011aac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ab0:	f003 0301 	and.w	r3, r3, #1
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d001      	beq.n	8011abc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e21d      	b.n	8011ef8 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011abc:	79fb      	ldrb	r3, [r7, #7]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d007      	beq.n	8011ad2 <find_volume+0xda>
 8011ac2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ac6:	f003 0304 	and.w	r3, r3, #4
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d001      	beq.n	8011ad2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8011ace:	230a      	movs	r3, #10
 8011ad0:	e212      	b.n	8011ef8 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad4:	7858      	ldrb	r0, [r3, #1]
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad8:	330c      	adds	r3, #12
 8011ada:	461a      	mov	r2, r3
 8011adc:	2102      	movs	r1, #2
 8011ade:	f7fd ffdb 	bl	800fa98 <disk_ioctl>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d001      	beq.n	8011aec <find_volume+0xf4>
 8011ae8:	2301      	movs	r3, #1
 8011aea:	e205      	b.n	8011ef8 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aee:	899b      	ldrh	r3, [r3, #12]
 8011af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011af4:	d80d      	bhi.n	8011b12 <find_volume+0x11a>
 8011af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af8:	899b      	ldrh	r3, [r3, #12]
 8011afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011afe:	d308      	bcc.n	8011b12 <find_volume+0x11a>
 8011b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b02:	899b      	ldrh	r3, [r3, #12]
 8011b04:	461a      	mov	r2, r3
 8011b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b08:	899b      	ldrh	r3, [r3, #12]
 8011b0a:	3b01      	subs	r3, #1
 8011b0c:	4013      	ands	r3, r2
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d001      	beq.n	8011b16 <find_volume+0x11e>
 8011b12:	2301      	movs	r3, #1
 8011b14:	e1f0      	b.n	8011ef8 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011b1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011b1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b1e:	f7ff ff15 	bl	801194c <check_fs>
 8011b22:	4603      	mov	r3, r0
 8011b24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011b28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b2c:	2b02      	cmp	r3, #2
 8011b2e:	d14b      	bne.n	8011bc8 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011b30:	2300      	movs	r3, #0
 8011b32:	643b      	str	r3, [r7, #64]	; 0x40
 8011b34:	e01f      	b.n	8011b76 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b38:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8011b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b3e:	011b      	lsls	r3, r3, #4
 8011b40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011b44:	4413      	add	r3, r2
 8011b46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4a:	3304      	adds	r3, #4
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d006      	beq.n	8011b60 <find_volume+0x168>
 8011b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b54:	3308      	adds	r3, #8
 8011b56:	4618      	mov	r0, r3
 8011b58:	f7fd ffd4 	bl	800fb04 <ld_dword>
 8011b5c:	4602      	mov	r2, r0
 8011b5e:	e000      	b.n	8011b62 <find_volume+0x16a>
 8011b60:	2200      	movs	r2, #0
 8011b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b64:	009b      	lsls	r3, r3, #2
 8011b66:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011b6a:	440b      	add	r3, r1
 8011b6c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b72:	3301      	adds	r3, #1
 8011b74:	643b      	str	r3, [r7, #64]	; 0x40
 8011b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b78:	2b03      	cmp	r3, #3
 8011b7a:	d9dc      	bls.n	8011b36 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011b80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d002      	beq.n	8011b8c <find_volume+0x194>
 8011b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b88:	3b01      	subs	r3, #1
 8011b8a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011b94:	4413      	add	r3, r2
 8011b96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011b9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d005      	beq.n	8011bae <find_volume+0x1b6>
 8011ba2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011ba4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ba6:	f7ff fed1 	bl	801194c <check_fs>
 8011baa:	4603      	mov	r3, r0
 8011bac:	e000      	b.n	8011bb0 <find_volume+0x1b8>
 8011bae:	2303      	movs	r3, #3
 8011bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011bb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d905      	bls.n	8011bc8 <find_volume+0x1d0>
 8011bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	643b      	str	r3, [r7, #64]	; 0x40
 8011bc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bc4:	2b03      	cmp	r3, #3
 8011bc6:	d9e1      	bls.n	8011b8c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bcc:	2b04      	cmp	r3, #4
 8011bce:	d101      	bne.n	8011bd4 <find_volume+0x1dc>
 8011bd0:	2301      	movs	r3, #1
 8011bd2:	e191      	b.n	8011ef8 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011bd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011bd8:	2b01      	cmp	r3, #1
 8011bda:	d901      	bls.n	8011be0 <find_volume+0x1e8>
 8011bdc:	230d      	movs	r3, #13
 8011bde:	e18b      	b.n	8011ef8 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be2:	333c      	adds	r3, #60	; 0x3c
 8011be4:	330b      	adds	r3, #11
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fd ff74 	bl	800fad4 <ld_word>
 8011bec:	4603      	mov	r3, r0
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bf2:	899b      	ldrh	r3, [r3, #12]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d001      	beq.n	8011bfc <find_volume+0x204>
 8011bf8:	230d      	movs	r3, #13
 8011bfa:	e17d      	b.n	8011ef8 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bfe:	333c      	adds	r3, #60	; 0x3c
 8011c00:	3316      	adds	r3, #22
 8011c02:	4618      	mov	r0, r3
 8011c04:	f7fd ff66 	bl	800fad4 <ld_word>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d106      	bne.n	8011c20 <find_volume+0x228>
 8011c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c14:	333c      	adds	r3, #60	; 0x3c
 8011c16:	3324      	adds	r3, #36	; 0x24
 8011c18:	4618      	mov	r0, r3
 8011c1a:	f7fd ff73 	bl	800fb04 <ld_dword>
 8011c1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011c24:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c28:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c32:	789b      	ldrb	r3, [r3, #2]
 8011c34:	2b01      	cmp	r3, #1
 8011c36:	d005      	beq.n	8011c44 <find_volume+0x24c>
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	789b      	ldrb	r3, [r3, #2]
 8011c3c:	2b02      	cmp	r3, #2
 8011c3e:	d001      	beq.n	8011c44 <find_volume+0x24c>
 8011c40:	230d      	movs	r3, #13
 8011c42:	e159      	b.n	8011ef8 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c46:	789b      	ldrb	r3, [r3, #2]
 8011c48:	461a      	mov	r2, r3
 8011c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c4c:	fb02 f303 	mul.w	r3, r2, r3
 8011c50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c54:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8011c58:	b29a      	uxth	r2, r3
 8011c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c60:	895b      	ldrh	r3, [r3, #10]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d008      	beq.n	8011c78 <find_volume+0x280>
 8011c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c68:	895b      	ldrh	r3, [r3, #10]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c6e:	895b      	ldrh	r3, [r3, #10]
 8011c70:	3b01      	subs	r3, #1
 8011c72:	4013      	ands	r3, r2
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d001      	beq.n	8011c7c <find_volume+0x284>
 8011c78:	230d      	movs	r3, #13
 8011c7a:	e13d      	b.n	8011ef8 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c7e:	333c      	adds	r3, #60	; 0x3c
 8011c80:	3311      	adds	r3, #17
 8011c82:	4618      	mov	r0, r3
 8011c84:	f7fd ff26 	bl	800fad4 <ld_word>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c92:	891b      	ldrh	r3, [r3, #8]
 8011c94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c96:	8992      	ldrh	r2, [r2, #12]
 8011c98:	0952      	lsrs	r2, r2, #5
 8011c9a:	b292      	uxth	r2, r2
 8011c9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ca0:	fb02 f201 	mul.w	r2, r2, r1
 8011ca4:	1a9b      	subs	r3, r3, r2
 8011ca6:	b29b      	uxth	r3, r3
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d003      	beq.n	8011cb4 <find_volume+0x2bc>
 8011cac:	230d      	movs	r3, #13
 8011cae:	e123      	b.n	8011ef8 <find_volume+0x500>
 8011cb0:	200027b8 	.word	0x200027b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cb6:	333c      	adds	r3, #60	; 0x3c
 8011cb8:	3313      	adds	r3, #19
 8011cba:	4618      	mov	r0, r3
 8011cbc:	f7fd ff0a 	bl	800fad4 <ld_word>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d106      	bne.n	8011cd8 <find_volume+0x2e0>
 8011cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ccc:	333c      	adds	r3, #60	; 0x3c
 8011cce:	3320      	adds	r3, #32
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fd ff17 	bl	800fb04 <ld_dword>
 8011cd6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cda:	333c      	adds	r3, #60	; 0x3c
 8011cdc:	330e      	adds	r3, #14
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f7fd fef8 	bl	800fad4 <ld_word>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011ce8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d101      	bne.n	8011cf2 <find_volume+0x2fa>
 8011cee:	230d      	movs	r3, #13
 8011cf0:	e102      	b.n	8011ef8 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011cf2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cf6:	4413      	add	r3, r2
 8011cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cfa:	8911      	ldrh	r1, [r2, #8]
 8011cfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011cfe:	8992      	ldrh	r2, [r2, #12]
 8011d00:	0952      	lsrs	r2, r2, #5
 8011d02:	b292      	uxth	r2, r2
 8011d04:	fbb1 f2f2 	udiv	r2, r1, r2
 8011d08:	b292      	uxth	r2, r2
 8011d0a:	4413      	add	r3, r2
 8011d0c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011d0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d201      	bcs.n	8011d1a <find_volume+0x322>
 8011d16:	230d      	movs	r3, #13
 8011d18:	e0ee      	b.n	8011ef8 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011d1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	1ad3      	subs	r3, r2, r3
 8011d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011d22:	8952      	ldrh	r2, [r2, #10]
 8011d24:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d28:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d101      	bne.n	8011d34 <find_volume+0x33c>
 8011d30:	230d      	movs	r3, #13
 8011d32:	e0e1      	b.n	8011ef8 <find_volume+0x500>
		fmt = FS_FAT32;
 8011d34:	2303      	movs	r3, #3
 8011d36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d802      	bhi.n	8011d4a <find_volume+0x352>
 8011d44:	2302      	movs	r3, #2
 8011d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d4c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d802      	bhi.n	8011d5a <find_volume+0x362>
 8011d54:	2301      	movs	r3, #1
 8011d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5c:	1c9a      	adds	r2, r3, #2
 8011d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d60:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8011d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d66:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011d68:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d6c:	441a      	add	r2, r3
 8011d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d70:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8011d72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d76:	441a      	add	r2, r3
 8011d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d7a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8011d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d80:	2b03      	cmp	r3, #3
 8011d82:	d11e      	bne.n	8011dc2 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d86:	333c      	adds	r3, #60	; 0x3c
 8011d88:	332a      	adds	r3, #42	; 0x2a
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	f7fd fea2 	bl	800fad4 <ld_word>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d001      	beq.n	8011d9a <find_volume+0x3a2>
 8011d96:	230d      	movs	r3, #13
 8011d98:	e0ae      	b.n	8011ef8 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d9c:	891b      	ldrh	r3, [r3, #8]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d001      	beq.n	8011da6 <find_volume+0x3ae>
 8011da2:	230d      	movs	r3, #13
 8011da4:	e0a8      	b.n	8011ef8 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da8:	333c      	adds	r3, #60	; 0x3c
 8011daa:	332c      	adds	r3, #44	; 0x2c
 8011dac:	4618      	mov	r0, r3
 8011dae:	f7fd fea9 	bl	800fb04 <ld_dword>
 8011db2:	4602      	mov	r2, r0
 8011db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011db6:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dba:	6a1b      	ldr	r3, [r3, #32]
 8011dbc:	009b      	lsls	r3, r3, #2
 8011dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8011dc0:	e01f      	b.n	8011e02 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dc4:	891b      	ldrh	r3, [r3, #8]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d101      	bne.n	8011dce <find_volume+0x3d6>
 8011dca:	230d      	movs	r3, #13
 8011dcc:	e094      	b.n	8011ef8 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dd4:	441a      	add	r2, r3
 8011dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011dde:	2b02      	cmp	r3, #2
 8011de0:	d103      	bne.n	8011dea <find_volume+0x3f2>
 8011de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de4:	6a1b      	ldr	r3, [r3, #32]
 8011de6:	005b      	lsls	r3, r3, #1
 8011de8:	e00a      	b.n	8011e00 <find_volume+0x408>
 8011dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dec:	6a1a      	ldr	r2, [r3, #32]
 8011dee:	4613      	mov	r3, r2
 8011df0:	005b      	lsls	r3, r3, #1
 8011df2:	4413      	add	r3, r2
 8011df4:	085a      	lsrs	r2, r3, #1
 8011df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df8:	6a1b      	ldr	r3, [r3, #32]
 8011dfa:	f003 0301 	and.w	r3, r3, #1
 8011dfe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011e00:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e08:	899b      	ldrh	r3, [r3, #12]
 8011e0a:	4619      	mov	r1, r3
 8011e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e0e:	440b      	add	r3, r1
 8011e10:	3b01      	subs	r3, #1
 8011e12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011e14:	8989      	ldrh	r1, [r1, #12]
 8011e16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011e1a:	429a      	cmp	r2, r3
 8011e1c:	d201      	bcs.n	8011e22 <find_volume+0x42a>
 8011e1e:	230d      	movs	r3, #13
 8011e20:	e06a      	b.n	8011ef8 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e28:	61da      	str	r2, [r3, #28]
 8011e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2c:	69da      	ldr	r2, [r3, #28]
 8011e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e30:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8011e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e34:	2280      	movs	r2, #128	; 0x80
 8011e36:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011e3c:	2b03      	cmp	r3, #3
 8011e3e:	d149      	bne.n	8011ed4 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e42:	333c      	adds	r3, #60	; 0x3c
 8011e44:	3330      	adds	r3, #48	; 0x30
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fd fe44 	bl	800fad4 <ld_word>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d140      	bne.n	8011ed4 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011e52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e54:	3301      	adds	r3, #1
 8011e56:	4619      	mov	r1, r3
 8011e58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011e5a:	f7fe f91d 	bl	8010098 <move_window>
 8011e5e:	4603      	mov	r3, r0
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d137      	bne.n	8011ed4 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8011e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e66:	2200      	movs	r2, #0
 8011e68:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e6c:	333c      	adds	r3, #60	; 0x3c
 8011e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011e72:	4618      	mov	r0, r3
 8011e74:	f7fd fe2e 	bl	800fad4 <ld_word>
 8011e78:	4603      	mov	r3, r0
 8011e7a:	461a      	mov	r2, r3
 8011e7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011e80:	429a      	cmp	r2, r3
 8011e82:	d127      	bne.n	8011ed4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e86:	333c      	adds	r3, #60	; 0x3c
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fd fe3b 	bl	800fb04 <ld_dword>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	4a1b      	ldr	r2, [pc, #108]	; (8011f00 <find_volume+0x508>)
 8011e92:	4293      	cmp	r3, r2
 8011e94:	d11e      	bne.n	8011ed4 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e98:	333c      	adds	r3, #60	; 0x3c
 8011e9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f7fd fe30 	bl	800fb04 <ld_dword>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	4a17      	ldr	r2, [pc, #92]	; (8011f04 <find_volume+0x50c>)
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d113      	bne.n	8011ed4 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	333c      	adds	r3, #60	; 0x3c
 8011eb0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7fd fe25 	bl	800fb04 <ld_dword>
 8011eba:	4602      	mov	r2, r0
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebe:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec2:	333c      	adds	r3, #60	; 0x3c
 8011ec4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f7fd fe1b 	bl	800fb04 <ld_dword>
 8011ece:	4602      	mov	r2, r0
 8011ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011eda:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011edc:	4b0a      	ldr	r3, [pc, #40]	; (8011f08 <find_volume+0x510>)
 8011ede:	881b      	ldrh	r3, [r3, #0]
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	b29a      	uxth	r2, r3
 8011ee4:	4b08      	ldr	r3, [pc, #32]	; (8011f08 <find_volume+0x510>)
 8011ee6:	801a      	strh	r2, [r3, #0]
 8011ee8:	4b07      	ldr	r3, [pc, #28]	; (8011f08 <find_volume+0x510>)
 8011eea:	881a      	ldrh	r2, [r3, #0]
 8011eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011ef0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ef2:	f7fe f869 	bl	800ffc8 <clear_lock>
#endif
	return FR_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3758      	adds	r7, #88	; 0x58
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}
 8011f00:	41615252 	.word	0x41615252
 8011f04:	61417272 	.word	0x61417272
 8011f08:	200027bc 	.word	0x200027bc

08011f0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b084      	sub	sp, #16
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
 8011f14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011f16:	2309      	movs	r3, #9
 8011f18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d02e      	beq.n	8011f7e <validate+0x72>
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d02a      	beq.n	8011f7e <validate+0x72>
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	781b      	ldrb	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d025      	beq.n	8011f7e <validate+0x72>
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	889a      	ldrh	r2, [r3, #4]
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	88db      	ldrh	r3, [r3, #6]
 8011f3c:	429a      	cmp	r2, r3
 8011f3e:	d11e      	bne.n	8011f7e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fd fec5 	bl	800fcd4 <lock_fs>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d014      	beq.n	8011f7a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	785b      	ldrb	r3, [r3, #1]
 8011f56:	4618      	mov	r0, r3
 8011f58:	f7fd fd1e 	bl	800f998 <disk_status>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	f003 0301 	and.w	r3, r3, #1
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d102      	bne.n	8011f6c <validate+0x60>
				res = FR_OK;
 8011f66:	2300      	movs	r3, #0
 8011f68:	73fb      	strb	r3, [r7, #15]
 8011f6a:	e008      	b.n	8011f7e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2100      	movs	r1, #0
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7fd fec4 	bl	800fd00 <unlock_fs>
 8011f78:	e001      	b.n	8011f7e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011f7a:	230f      	movs	r3, #15
 8011f7c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011f7e:	7bfb      	ldrb	r3, [r7, #15]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d102      	bne.n	8011f8a <validate+0x7e>
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	e000      	b.n	8011f8c <validate+0x80>
 8011f8a:	2300      	movs	r3, #0
 8011f8c:	683a      	ldr	r2, [r7, #0]
 8011f8e:	6013      	str	r3, [r2, #0]
	return res;
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3710      	adds	r7, #16
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
	...

08011f9c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b088      	sub	sp, #32
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	60b9      	str	r1, [r7, #8]
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011fae:	f107 0310 	add.w	r3, r7, #16
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7ff fc86 	bl	80118c4 <get_ldnumber>
 8011fb8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011fba:	69fb      	ldr	r3, [r7, #28]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	da01      	bge.n	8011fc4 <f_mount+0x28>
 8011fc0:	230b      	movs	r3, #11
 8011fc2:	e048      	b.n	8012056 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011fc4:	4a26      	ldr	r2, [pc, #152]	; (8012060 <f_mount+0xc4>)
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fcc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011fce:	69bb      	ldr	r3, [r7, #24]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00f      	beq.n	8011ff4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011fd4:	69b8      	ldr	r0, [r7, #24]
 8011fd6:	f7fd fff7 	bl	800ffc8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011fda:	69bb      	ldr	r3, [r7, #24]
 8011fdc:	695b      	ldr	r3, [r3, #20]
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f001 f805 	bl	8012fee <ff_del_syncobj>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d101      	bne.n	8011fee <f_mount+0x52>
 8011fea:	2302      	movs	r3, #2
 8011fec:	e033      	b.n	8012056 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011fee:	69bb      	ldr	r3, [r7, #24]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d00f      	beq.n	801201a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012000:	69fb      	ldr	r3, [r7, #28]
 8012002:	b2da      	uxtb	r2, r3
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	3314      	adds	r3, #20
 8012008:	4619      	mov	r1, r3
 801200a:	4610      	mov	r0, r2
 801200c:	f000 ffd4 	bl	8012fb8 <ff_cre_syncobj>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <f_mount+0x7e>
 8012016:	2302      	movs	r3, #2
 8012018:	e01d      	b.n	8012056 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801201a:	68fa      	ldr	r2, [r7, #12]
 801201c:	4910      	ldr	r1, [pc, #64]	; (8012060 <f_mount+0xc4>)
 801201e:	69fb      	ldr	r3, [r7, #28]
 8012020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d002      	beq.n	8012030 <f_mount+0x94>
 801202a:	79fb      	ldrb	r3, [r7, #7]
 801202c:	2b01      	cmp	r3, #1
 801202e:	d001      	beq.n	8012034 <f_mount+0x98>
 8012030:	2300      	movs	r3, #0
 8012032:	e010      	b.n	8012056 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012034:	f107 010c 	add.w	r1, r7, #12
 8012038:	f107 0308 	add.w	r3, r7, #8
 801203c:	2200      	movs	r2, #0
 801203e:	4618      	mov	r0, r3
 8012040:	f7ff fcda 	bl	80119f8 <find_volume>
 8012044:	4603      	mov	r3, r0
 8012046:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	7dfa      	ldrb	r2, [r7, #23]
 801204c:	4611      	mov	r1, r2
 801204e:	4618      	mov	r0, r3
 8012050:	f7fd fe56 	bl	800fd00 <unlock_fs>
 8012054:	7dfb      	ldrb	r3, [r7, #23]
}
 8012056:	4618      	mov	r0, r3
 8012058:	3720      	adds	r7, #32
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	200027b8 	.word	0x200027b8

08012064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012064:	b580      	push	{r7, lr}
 8012066:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 801206a:	af00      	add	r7, sp, #0
 801206c:	f107 030c 	add.w	r3, r7, #12
 8012070:	6018      	str	r0, [r3, #0]
 8012072:	f107 0308 	add.w	r3, r7, #8
 8012076:	6019      	str	r1, [r3, #0]
 8012078:	1dfb      	adds	r3, r7, #7
 801207a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801207c:	f107 030c 	add.w	r3, r7, #12
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d101      	bne.n	801208a <f_open+0x26>
 8012086:	2309      	movs	r3, #9
 8012088:	e24a      	b.n	8012520 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801208a:	1dfb      	adds	r3, r7, #7
 801208c:	1dfa      	adds	r2, r7, #7
 801208e:	7812      	ldrb	r2, [r2, #0]
 8012090:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8012094:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8012096:	1dfb      	adds	r3, r7, #7
 8012098:	781a      	ldrb	r2, [r3, #0]
 801209a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801209e:	f107 0308 	add.w	r3, r7, #8
 80120a2:	4618      	mov	r0, r3
 80120a4:	f7ff fca8 	bl	80119f8 <find_volume>
 80120a8:	4603      	mov	r3, r0
 80120aa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80120ae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	f040 8221 	bne.w	80124fa <f_open+0x496>
		dj.obj.fs = fs;
 80120b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80120bc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80120c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80120c4:	f107 0214 	add.w	r2, r7, #20
 80120c8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80120ca:	f107 0308 	add.w	r3, r7, #8
 80120ce:	681a      	ldr	r2, [r3, #0]
 80120d0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80120d4:	4611      	mov	r1, r2
 80120d6:	4618      	mov	r0, r3
 80120d8:	f7ff fb7e 	bl	80117d8 <follow_path>
 80120dc:	4603      	mov	r3, r0
 80120de:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80120e2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d11b      	bne.n	8012122 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80120ea:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80120ee:	b25b      	sxtb	r3, r3
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	da03      	bge.n	80120fc <f_open+0x98>
				res = FR_INVALID_NAME;
 80120f4:	2306      	movs	r3, #6
 80120f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80120fa:	e012      	b.n	8012122 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80120fc:	1dfb      	adds	r3, r7, #7
 80120fe:	781b      	ldrb	r3, [r3, #0]
 8012100:	f023 0301 	bic.w	r3, r3, #1
 8012104:	2b00      	cmp	r3, #0
 8012106:	bf14      	ite	ne
 8012108:	2301      	movne	r3, #1
 801210a:	2300      	moveq	r3, #0
 801210c:	b2db      	uxtb	r3, r3
 801210e:	461a      	mov	r2, r3
 8012110:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012114:	4611      	mov	r1, r2
 8012116:	4618      	mov	r0, r3
 8012118:	f7fd fe0e 	bl	800fd38 <chk_lock>
 801211c:	4603      	mov	r3, r0
 801211e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012122:	1dfb      	adds	r3, r7, #7
 8012124:	781b      	ldrb	r3, [r3, #0]
 8012126:	f003 031c 	and.w	r3, r3, #28
 801212a:	2b00      	cmp	r3, #0
 801212c:	f000 809b 	beq.w	8012266 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8012130:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012134:	2b00      	cmp	r3, #0
 8012136:	d019      	beq.n	801216c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012138:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801213c:	2b04      	cmp	r3, #4
 801213e:	d10e      	bne.n	801215e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012140:	f7fd fe56 	bl	800fdf0 <enq_lock>
 8012144:	4603      	mov	r3, r0
 8012146:	2b00      	cmp	r3, #0
 8012148:	d006      	beq.n	8012158 <f_open+0xf4>
 801214a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801214e:	4618      	mov	r0, r3
 8012150:	f7fe ffb4 	bl	80110bc <dir_register>
 8012154:	4603      	mov	r3, r0
 8012156:	e000      	b.n	801215a <f_open+0xf6>
 8012158:	2312      	movs	r3, #18
 801215a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801215e:	1dfb      	adds	r3, r7, #7
 8012160:	1dfa      	adds	r2, r7, #7
 8012162:	7812      	ldrb	r2, [r2, #0]
 8012164:	f042 0208 	orr.w	r2, r2, #8
 8012168:	701a      	strb	r2, [r3, #0]
 801216a:	e012      	b.n	8012192 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801216c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012170:	f003 0311 	and.w	r3, r3, #17
 8012174:	2b00      	cmp	r3, #0
 8012176:	d003      	beq.n	8012180 <f_open+0x11c>
					res = FR_DENIED;
 8012178:	2307      	movs	r3, #7
 801217a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801217e:	e008      	b.n	8012192 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012180:	1dfb      	adds	r3, r7, #7
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	f003 0304 	and.w	r3, r3, #4
 8012188:	2b00      	cmp	r3, #0
 801218a:	d002      	beq.n	8012192 <f_open+0x12e>
 801218c:	2308      	movs	r3, #8
 801218e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012192:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012196:	2b00      	cmp	r3, #0
 8012198:	f040 8082 	bne.w	80122a0 <f_open+0x23c>
 801219c:	1dfb      	adds	r3, r7, #7
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	f003 0308 	and.w	r3, r3, #8
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d07b      	beq.n	80122a0 <f_open+0x23c>
				dw = GET_FATTIME();
 80121a8:	f7fb ff04 	bl	800dfb4 <get_fattime>
 80121ac:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80121b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80121b4:	330e      	adds	r3, #14
 80121b6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80121ba:	4618      	mov	r0, r3
 80121bc:	f7fd fce0 	bl	800fb80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80121c0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80121c4:	3316      	adds	r3, #22
 80121c6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fd fcd8 	bl	800fb80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80121d0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80121d4:	330b      	adds	r3, #11
 80121d6:	2220      	movs	r2, #32
 80121d8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80121da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80121de:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80121e2:	4611      	mov	r1, r2
 80121e4:	4618      	mov	r0, r3
 80121e6:	f7fe fcdf 	bl	8010ba8 <ld_clust>
 80121ea:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80121ee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80121f2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80121f6:	2200      	movs	r2, #0
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7fe fcf4 	bl	8010be6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80121fe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012202:	331c      	adds	r3, #28
 8012204:	2100      	movs	r1, #0
 8012206:	4618      	mov	r0, r3
 8012208:	f7fd fcba 	bl	800fb80 <st_dword>
					fs->wflag = 1;
 801220c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012210:	2201      	movs	r2, #1
 8012212:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012214:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8012218:	2b00      	cmp	r3, #0
 801221a:	d041      	beq.n	80122a0 <f_open+0x23c>
						dw = fs->winsect;
 801221c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012222:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8012226:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801222a:	2200      	movs	r2, #0
 801222c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8012230:	4618      	mov	r0, r3
 8012232:	f7fe f9de 	bl	80105f2 <remove_chain>
 8012236:	4603      	mov	r3, r0
 8012238:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 801223c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012240:	2b00      	cmp	r3, #0
 8012242:	d12d      	bne.n	80122a0 <f_open+0x23c>
							res = move_window(fs, dw);
 8012244:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012248:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801224c:	4618      	mov	r0, r3
 801224e:	f7fd ff23 	bl	8010098 <move_window>
 8012252:	4603      	mov	r3, r0
 8012254:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012258:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801225c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8012260:	3a01      	subs	r2, #1
 8012262:	619a      	str	r2, [r3, #24]
 8012264:	e01c      	b.n	80122a0 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012266:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801226a:	2b00      	cmp	r3, #0
 801226c:	d118      	bne.n	80122a0 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801226e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012272:	f003 0310 	and.w	r3, r3, #16
 8012276:	2b00      	cmp	r3, #0
 8012278:	d003      	beq.n	8012282 <f_open+0x21e>
					res = FR_NO_FILE;
 801227a:	2304      	movs	r3, #4
 801227c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8012280:	e00e      	b.n	80122a0 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012282:	1dfb      	adds	r3, r7, #7
 8012284:	781b      	ldrb	r3, [r3, #0]
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	2b00      	cmp	r3, #0
 801228c:	d008      	beq.n	80122a0 <f_open+0x23c>
 801228e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8012292:	f003 0301 	and.w	r3, r3, #1
 8012296:	2b00      	cmp	r3, #0
 8012298:	d002      	beq.n	80122a0 <f_open+0x23c>
						res = FR_DENIED;
 801229a:	2307      	movs	r3, #7
 801229c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80122a0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d136      	bne.n	8012316 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80122a8:	1dfb      	adds	r3, r7, #7
 80122aa:	781b      	ldrb	r3, [r3, #0]
 80122ac:	f003 0308 	and.w	r3, r3, #8
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d005      	beq.n	80122c0 <f_open+0x25c>
				mode |= FA_MODIFIED;
 80122b4:	1dfb      	adds	r3, r7, #7
 80122b6:	1dfa      	adds	r2, r7, #7
 80122b8:	7812      	ldrb	r2, [r2, #0]
 80122ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80122be:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80122c0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80122c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80122c6:	f107 030c 	add.w	r3, r7, #12
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80122ce:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80122d2:	f107 030c 	add.w	r3, r7, #12
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80122da:	1dfb      	adds	r3, r7, #7
 80122dc:	781b      	ldrb	r3, [r3, #0]
 80122de:	f023 0301 	bic.w	r3, r3, #1
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	bf14      	ite	ne
 80122e6:	2301      	movne	r3, #1
 80122e8:	2300      	moveq	r3, #0
 80122ea:	b2db      	uxtb	r3, r3
 80122ec:	461a      	mov	r2, r3
 80122ee:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80122f2:	4611      	mov	r1, r2
 80122f4:	4618      	mov	r0, r3
 80122f6:	f7fd fd9d 	bl	800fe34 <inc_lock>
 80122fa:	4602      	mov	r2, r0
 80122fc:	f107 030c 	add.w	r3, r7, #12
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012304:	f107 030c 	add.w	r3, r7, #12
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d102      	bne.n	8012316 <f_open+0x2b2>
 8012310:	2302      	movs	r3, #2
 8012312:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012316:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801231a:	2b00      	cmp	r3, #0
 801231c:	f040 80ed 	bne.w	80124fa <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012320:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012324:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8012328:	4611      	mov	r1, r2
 801232a:	4618      	mov	r0, r3
 801232c:	f7fe fc3c 	bl	8010ba8 <ld_clust>
 8012330:	4602      	mov	r2, r0
 8012332:	f107 030c 	add.w	r3, r7, #12
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801233a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801233e:	331c      	adds	r3, #28
 8012340:	4618      	mov	r0, r3
 8012342:	f7fd fbdf 	bl	800fb04 <ld_dword>
 8012346:	4602      	mov	r2, r0
 8012348:	f107 030c 	add.w	r3, r7, #12
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012350:	f107 030c 	add.w	r3, r7, #12
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	2200      	movs	r2, #0
 8012358:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801235a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801235e:	f107 030c 	add.w	r3, r7, #12
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012366:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801236a:	88da      	ldrh	r2, [r3, #6]
 801236c:	f107 030c 	add.w	r3, r7, #12
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012374:	f107 030c 	add.w	r3, r7, #12
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	1dfa      	adds	r2, r7, #7
 801237c:	7812      	ldrb	r2, [r2, #0]
 801237e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012380:	f107 030c 	add.w	r3, r7, #12
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	2200      	movs	r2, #0
 8012388:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801238a:	f107 030c 	add.w	r3, r7, #12
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2200      	movs	r2, #0
 8012392:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012394:	f107 030c 	add.w	r3, r7, #12
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2200      	movs	r2, #0
 801239c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801239e:	f107 030c 	add.w	r3, r7, #12
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	3330      	adds	r3, #48	; 0x30
 80123a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80123aa:	2100      	movs	r1, #0
 80123ac:	4618      	mov	r0, r3
 80123ae:	f7fd fc34 	bl	800fc1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80123b2:	1dfb      	adds	r3, r7, #7
 80123b4:	781b      	ldrb	r3, [r3, #0]
 80123b6:	f003 0320 	and.w	r3, r3, #32
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	f000 809d 	beq.w	80124fa <f_open+0x496>
 80123c0:	f107 030c 	add.w	r3, r7, #12
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	68db      	ldr	r3, [r3, #12]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	f000 8096 	beq.w	80124fa <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80123ce:	f107 030c 	add.w	r3, r7, #12
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68da      	ldr	r2, [r3, #12]
 80123d6:	f107 030c 	add.w	r3, r7, #12
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80123de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80123e2:	895b      	ldrh	r3, [r3, #10]
 80123e4:	461a      	mov	r2, r3
 80123e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80123ea:	899b      	ldrh	r3, [r3, #12]
 80123ec:	fb03 f302 	mul.w	r3, r3, r2
 80123f0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80123f4:	f107 030c 	add.w	r3, r7, #12
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	689b      	ldr	r3, [r3, #8]
 80123fc:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012400:	f107 030c 	add.w	r3, r7, #12
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	68db      	ldr	r3, [r3, #12]
 8012408:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801240c:	e01f      	b.n	801244e <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 801240e:	f107 030c 	add.w	r3, r7, #12
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012418:	4618      	mov	r0, r3
 801241a:	f7fd fefa 	bl	8010212 <get_fat>
 801241e:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8012422:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012426:	2b01      	cmp	r3, #1
 8012428:	d802      	bhi.n	8012430 <f_open+0x3cc>
 801242a:	2302      	movs	r3, #2
 801242c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012430:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012434:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012438:	d102      	bne.n	8012440 <f_open+0x3dc>
 801243a:	2301      	movs	r3, #1
 801243c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012440:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012444:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801244e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012452:	2b00      	cmp	r3, #0
 8012454:	d105      	bne.n	8012462 <f_open+0x3fe>
 8012456:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801245a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801245e:	429a      	cmp	r2, r3
 8012460:	d8d5      	bhi.n	801240e <f_open+0x3aa>
				}
				fp->clust = clst;
 8012462:	f107 030c 	add.w	r3, r7, #12
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 801246c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801246e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012472:	2b00      	cmp	r3, #0
 8012474:	d141      	bne.n	80124fa <f_open+0x496>
 8012476:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801247a:	899b      	ldrh	r3, [r3, #12]
 801247c:	461a      	mov	r2, r3
 801247e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8012482:	fbb3 f1f2 	udiv	r1, r3, r2
 8012486:	fb02 f201 	mul.w	r2, r2, r1
 801248a:	1a9b      	subs	r3, r3, r2
 801248c:	2b00      	cmp	r3, #0
 801248e:	d034      	beq.n	80124fa <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012490:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012494:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8012498:	4618      	mov	r0, r3
 801249a:	f7fd fe9b 	bl	80101d4 <clust2sect>
 801249e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80124a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d103      	bne.n	80124b2 <f_open+0x44e>
						res = FR_INT_ERR;
 80124aa:	2302      	movs	r3, #2
 80124ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80124b0:	e023      	b.n	80124fa <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80124b2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80124b6:	899b      	ldrh	r3, [r3, #12]
 80124b8:	461a      	mov	r2, r3
 80124ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80124be:	fbb3 f2f2 	udiv	r2, r3, r2
 80124c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80124c6:	441a      	add	r2, r3
 80124c8:	f107 030c 	add.w	r3, r7, #12
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80124d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80124d4:	7858      	ldrb	r0, [r3, #1]
 80124d6:	f107 030c 	add.w	r3, r7, #12
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124e0:	f107 030c 	add.w	r3, r7, #12
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	6a1a      	ldr	r2, [r3, #32]
 80124e8:	2301      	movs	r3, #1
 80124ea:	f7fd fa95 	bl	800fa18 <disk_read>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d002      	beq.n	80124fa <f_open+0x496>
 80124f4:	2301      	movs	r3, #1
 80124f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80124fa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d004      	beq.n	801250c <f_open+0x4a8>
 8012502:	f107 030c 	add.w	r3, r7, #12
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	2200      	movs	r2, #0
 801250a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801250c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012510:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8012514:	4611      	mov	r1, r2
 8012516:	4618      	mov	r0, r3
 8012518:	f7fd fbf2 	bl	800fd00 <unlock_fs>
 801251c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8012520:	4618      	mov	r0, r3
 8012522:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b08c      	sub	sp, #48	; 0x30
 801252e:	af00      	add	r7, sp, #0
 8012530:	60f8      	str	r0, [r7, #12]
 8012532:	60b9      	str	r1, [r7, #8]
 8012534:	607a      	str	r2, [r7, #4]
 8012536:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801253c:	683b      	ldr	r3, [r7, #0]
 801253e:	2200      	movs	r2, #0
 8012540:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	f107 0210 	add.w	r2, r7, #16
 8012548:	4611      	mov	r1, r2
 801254a:	4618      	mov	r0, r3
 801254c:	f7ff fcde 	bl	8011f0c <validate>
 8012550:	4603      	mov	r3, r0
 8012552:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012556:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801255a:	2b00      	cmp	r3, #0
 801255c:	d107      	bne.n	801256e <f_write+0x44>
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	7d5b      	ldrb	r3, [r3, #21]
 8012562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8012566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801256a:	2b00      	cmp	r3, #0
 801256c:	d009      	beq.n	8012582 <f_write+0x58>
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012574:	4611      	mov	r1, r2
 8012576:	4618      	mov	r0, r3
 8012578:	f7fd fbc2 	bl	800fd00 <unlock_fs>
 801257c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012580:	e192      	b.n	80128a8 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	7d1b      	ldrb	r3, [r3, #20]
 8012586:	f003 0302 	and.w	r3, r3, #2
 801258a:	2b00      	cmp	r3, #0
 801258c:	d106      	bne.n	801259c <f_write+0x72>
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	2107      	movs	r1, #7
 8012592:	4618      	mov	r0, r3
 8012594:	f7fd fbb4 	bl	800fd00 <unlock_fs>
 8012598:	2307      	movs	r3, #7
 801259a:	e185      	b.n	80128a8 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	699a      	ldr	r2, [r3, #24]
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	441a      	add	r2, r3
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	699b      	ldr	r3, [r3, #24]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	f080 816a 	bcs.w	8012882 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	699b      	ldr	r3, [r3, #24]
 80125b2:	43db      	mvns	r3, r3
 80125b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80125b6:	e164      	b.n	8012882 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	699b      	ldr	r3, [r3, #24]
 80125bc:	693a      	ldr	r2, [r7, #16]
 80125be:	8992      	ldrh	r2, [r2, #12]
 80125c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80125c4:	fb02 f201 	mul.w	r2, r2, r1
 80125c8:	1a9b      	subs	r3, r3, r2
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	f040 810f 	bne.w	80127ee <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	699b      	ldr	r3, [r3, #24]
 80125d4:	693a      	ldr	r2, [r7, #16]
 80125d6:	8992      	ldrh	r2, [r2, #12]
 80125d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80125dc:	693a      	ldr	r2, [r7, #16]
 80125de:	8952      	ldrh	r2, [r2, #10]
 80125e0:	3a01      	subs	r2, #1
 80125e2:	4013      	ands	r3, r2
 80125e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d14d      	bne.n	8012688 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80125ec:	68fb      	ldr	r3, [r7, #12]
 80125ee:	699b      	ldr	r3, [r3, #24]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d10c      	bne.n	801260e <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	689b      	ldr	r3, [r3, #8]
 80125f8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80125fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d11a      	bne.n	8012636 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2100      	movs	r1, #0
 8012604:	4618      	mov	r0, r3
 8012606:	f7fe f859 	bl	80106bc <create_chain>
 801260a:	62b8      	str	r0, [r7, #40]	; 0x28
 801260c:	e013      	b.n	8012636 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012612:	2b00      	cmp	r3, #0
 8012614:	d007      	beq.n	8012626 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	699b      	ldr	r3, [r3, #24]
 801261a:	4619      	mov	r1, r3
 801261c:	68f8      	ldr	r0, [r7, #12]
 801261e:	f7fe f8e5 	bl	80107ec <clmt_clust>
 8012622:	62b8      	str	r0, [r7, #40]	; 0x28
 8012624:	e007      	b.n	8012636 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8012626:	68fa      	ldr	r2, [r7, #12]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	69db      	ldr	r3, [r3, #28]
 801262c:	4619      	mov	r1, r3
 801262e:	4610      	mov	r0, r2
 8012630:	f7fe f844 	bl	80106bc <create_chain>
 8012634:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012638:	2b00      	cmp	r3, #0
 801263a:	f000 8127 	beq.w	801288c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801263e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012640:	2b01      	cmp	r3, #1
 8012642:	d109      	bne.n	8012658 <f_write+0x12e>
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	2202      	movs	r2, #2
 8012648:	755a      	strb	r2, [r3, #21]
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	2102      	movs	r1, #2
 801264e:	4618      	mov	r0, r3
 8012650:	f7fd fb56 	bl	800fd00 <unlock_fs>
 8012654:	2302      	movs	r3, #2
 8012656:	e127      	b.n	80128a8 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801265e:	d109      	bne.n	8012674 <f_write+0x14a>
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	2201      	movs	r2, #1
 8012664:	755a      	strb	r2, [r3, #21]
 8012666:	693b      	ldr	r3, [r7, #16]
 8012668:	2101      	movs	r1, #1
 801266a:	4618      	mov	r0, r3
 801266c:	f7fd fb48 	bl	800fd00 <unlock_fs>
 8012670:	2301      	movs	r3, #1
 8012672:	e119      	b.n	80128a8 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012678:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	689b      	ldr	r3, [r3, #8]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d102      	bne.n	8012688 <f_write+0x15e>
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012686:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	7d1b      	ldrb	r3, [r3, #20]
 801268c:	b25b      	sxtb	r3, r3
 801268e:	2b00      	cmp	r3, #0
 8012690:	da1d      	bge.n	80126ce <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	7858      	ldrb	r0, [r3, #1]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	6a1a      	ldr	r2, [r3, #32]
 80126a0:	2301      	movs	r3, #1
 80126a2:	f7fd f9d9 	bl	800fa58 <disk_write>
 80126a6:	4603      	mov	r3, r0
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d009      	beq.n	80126c0 <f_write+0x196>
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	2201      	movs	r2, #1
 80126b0:	755a      	strb	r2, [r3, #21]
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	2101      	movs	r1, #1
 80126b6:	4618      	mov	r0, r3
 80126b8:	f7fd fb22 	bl	800fd00 <unlock_fs>
 80126bc:	2301      	movs	r3, #1
 80126be:	e0f3      	b.n	80128a8 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	7d1b      	ldrb	r3, [r3, #20]
 80126c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126c8:	b2da      	uxtb	r2, r3
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80126ce:	693a      	ldr	r2, [r7, #16]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	69db      	ldr	r3, [r3, #28]
 80126d4:	4619      	mov	r1, r3
 80126d6:	4610      	mov	r0, r2
 80126d8:	f7fd fd7c 	bl	80101d4 <clust2sect>
 80126dc:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80126de:	697b      	ldr	r3, [r7, #20]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d109      	bne.n	80126f8 <f_write+0x1ce>
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	2202      	movs	r2, #2
 80126e8:	755a      	strb	r2, [r3, #21]
 80126ea:	693b      	ldr	r3, [r7, #16]
 80126ec:	2102      	movs	r1, #2
 80126ee:	4618      	mov	r0, r3
 80126f0:	f7fd fb06 	bl	800fd00 <unlock_fs>
 80126f4:	2302      	movs	r3, #2
 80126f6:	e0d7      	b.n	80128a8 <f_write+0x37e>
			sect += csect;
 80126f8:	697a      	ldr	r2, [r7, #20]
 80126fa:	69bb      	ldr	r3, [r7, #24]
 80126fc:	4413      	add	r3, r2
 80126fe:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	899b      	ldrh	r3, [r3, #12]
 8012704:	461a      	mov	r2, r3
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	fbb3 f3f2 	udiv	r3, r3, r2
 801270c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801270e:	6a3b      	ldr	r3, [r7, #32]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d048      	beq.n	80127a6 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012714:	69ba      	ldr	r2, [r7, #24]
 8012716:	6a3b      	ldr	r3, [r7, #32]
 8012718:	4413      	add	r3, r2
 801271a:	693a      	ldr	r2, [r7, #16]
 801271c:	8952      	ldrh	r2, [r2, #10]
 801271e:	4293      	cmp	r3, r2
 8012720:	d905      	bls.n	801272e <f_write+0x204>
					cc = fs->csize - csect;
 8012722:	693b      	ldr	r3, [r7, #16]
 8012724:	895b      	ldrh	r3, [r3, #10]
 8012726:	461a      	mov	r2, r3
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	1ad3      	subs	r3, r2, r3
 801272c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	7858      	ldrb	r0, [r3, #1]
 8012732:	6a3b      	ldr	r3, [r7, #32]
 8012734:	697a      	ldr	r2, [r7, #20]
 8012736:	69f9      	ldr	r1, [r7, #28]
 8012738:	f7fd f98e 	bl	800fa58 <disk_write>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d009      	beq.n	8012756 <f_write+0x22c>
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	2201      	movs	r2, #1
 8012746:	755a      	strb	r2, [r3, #21]
 8012748:	693b      	ldr	r3, [r7, #16]
 801274a:	2101      	movs	r1, #1
 801274c:	4618      	mov	r0, r3
 801274e:	f7fd fad7 	bl	800fd00 <unlock_fs>
 8012752:	2301      	movs	r3, #1
 8012754:	e0a8      	b.n	80128a8 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	6a1a      	ldr	r2, [r3, #32]
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	1ad3      	subs	r3, r2, r3
 801275e:	6a3a      	ldr	r2, [r7, #32]
 8012760:	429a      	cmp	r2, r3
 8012762:	d918      	bls.n	8012796 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	6a1a      	ldr	r2, [r3, #32]
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	1ad3      	subs	r3, r2, r3
 8012772:	693a      	ldr	r2, [r7, #16]
 8012774:	8992      	ldrh	r2, [r2, #12]
 8012776:	fb02 f303 	mul.w	r3, r2, r3
 801277a:	69fa      	ldr	r2, [r7, #28]
 801277c:	18d1      	adds	r1, r2, r3
 801277e:	693b      	ldr	r3, [r7, #16]
 8012780:	899b      	ldrh	r3, [r3, #12]
 8012782:	461a      	mov	r2, r3
 8012784:	f7fd fa28 	bl	800fbd8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	7d1b      	ldrb	r3, [r3, #20]
 801278c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012790:	b2da      	uxtb	r2, r3
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	899b      	ldrh	r3, [r3, #12]
 801279a:	461a      	mov	r2, r3
 801279c:	6a3b      	ldr	r3, [r7, #32]
 801279e:	fb02 f303 	mul.w	r3, r2, r3
 80127a2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80127a4:	e050      	b.n	8012848 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	6a1b      	ldr	r3, [r3, #32]
 80127aa:	697a      	ldr	r2, [r7, #20]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d01b      	beq.n	80127e8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	699a      	ldr	r2, [r3, #24]
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d215      	bcs.n	80127e8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	7858      	ldrb	r0, [r3, #1]
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80127c6:	2301      	movs	r3, #1
 80127c8:	697a      	ldr	r2, [r7, #20]
 80127ca:	f7fd f925 	bl	800fa18 <disk_read>
 80127ce:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d009      	beq.n	80127e8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	2201      	movs	r2, #1
 80127d8:	755a      	strb	r2, [r3, #21]
 80127da:	693b      	ldr	r3, [r7, #16]
 80127dc:	2101      	movs	r1, #1
 80127de:	4618      	mov	r0, r3
 80127e0:	f7fd fa8e 	bl	800fd00 <unlock_fs>
 80127e4:	2301      	movs	r3, #1
 80127e6:	e05f      	b.n	80128a8 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	697a      	ldr	r2, [r7, #20]
 80127ec:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80127ee:	693b      	ldr	r3, [r7, #16]
 80127f0:	899b      	ldrh	r3, [r3, #12]
 80127f2:	4618      	mov	r0, r3
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	699b      	ldr	r3, [r3, #24]
 80127f8:	693a      	ldr	r2, [r7, #16]
 80127fa:	8992      	ldrh	r2, [r2, #12]
 80127fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012800:	fb02 f201 	mul.w	r2, r2, r1
 8012804:	1a9b      	subs	r3, r3, r2
 8012806:	1ac3      	subs	r3, r0, r3
 8012808:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	429a      	cmp	r2, r3
 8012810:	d901      	bls.n	8012816 <f_write+0x2ec>
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	699b      	ldr	r3, [r3, #24]
 8012820:	693a      	ldr	r2, [r7, #16]
 8012822:	8992      	ldrh	r2, [r2, #12]
 8012824:	fbb3 f0f2 	udiv	r0, r3, r2
 8012828:	fb02 f200 	mul.w	r2, r2, r0
 801282c:	1a9b      	subs	r3, r3, r2
 801282e:	440b      	add	r3, r1
 8012830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012832:	69f9      	ldr	r1, [r7, #28]
 8012834:	4618      	mov	r0, r3
 8012836:	f7fd f9cf 	bl	800fbd8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	7d1b      	ldrb	r3, [r3, #20]
 801283e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012842:	b2da      	uxtb	r2, r3
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012848:	69fa      	ldr	r2, [r7, #28]
 801284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284c:	4413      	add	r3, r2
 801284e:	61fb      	str	r3, [r7, #28]
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	699a      	ldr	r2, [r3, #24]
 8012854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012856:	441a      	add	r2, r3
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	619a      	str	r2, [r3, #24]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	68da      	ldr	r2, [r3, #12]
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	699b      	ldr	r3, [r3, #24]
 8012864:	429a      	cmp	r2, r3
 8012866:	bf38      	it	cc
 8012868:	461a      	movcc	r2, r3
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	60da      	str	r2, [r3, #12]
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	681a      	ldr	r2, [r3, #0]
 8012872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012874:	441a      	add	r2, r3
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	601a      	str	r2, [r3, #0]
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	f47f ae97 	bne.w	80125b8 <f_write+0x8e>
 801288a:	e000      	b.n	801288e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801288c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	7d1b      	ldrb	r3, [r3, #20]
 8012892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012896:	b2da      	uxtb	r2, r3
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801289c:	693b      	ldr	r3, [r7, #16]
 801289e:	2100      	movs	r1, #0
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7fd fa2d 	bl	800fd00 <unlock_fs>
 80128a6:	2300      	movs	r3, #0
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3730      	adds	r7, #48	; 0x30
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b086      	sub	sp, #24
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	f107 0208 	add.w	r2, r7, #8
 80128be:	4611      	mov	r1, r2
 80128c0:	4618      	mov	r0, r3
 80128c2:	f7ff fb23 	bl	8011f0c <validate>
 80128c6:	4603      	mov	r3, r0
 80128c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80128ca:	7dfb      	ldrb	r3, [r7, #23]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d16d      	bne.n	80129ac <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	7d1b      	ldrb	r3, [r3, #20]
 80128d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d067      	beq.n	80129ac <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	7d1b      	ldrb	r3, [r3, #20]
 80128e0:	b25b      	sxtb	r3, r3
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	da1a      	bge.n	801291c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	7858      	ldrb	r0, [r3, #1]
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a1a      	ldr	r2, [r3, #32]
 80128f4:	2301      	movs	r3, #1
 80128f6:	f7fd f8af 	bl	800fa58 <disk_write>
 80128fa:	4603      	mov	r3, r0
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d006      	beq.n	801290e <f_sync+0x5e>
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	2101      	movs	r1, #1
 8012904:	4618      	mov	r0, r3
 8012906:	f7fd f9fb 	bl	800fd00 <unlock_fs>
 801290a:	2301      	movs	r3, #1
 801290c:	e055      	b.n	80129ba <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	7d1b      	ldrb	r3, [r3, #20]
 8012912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012916:	b2da      	uxtb	r2, r3
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801291c:	f7fb fb4a 	bl	800dfb4 <get_fattime>
 8012920:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012922:	68ba      	ldr	r2, [r7, #8]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012928:	4619      	mov	r1, r3
 801292a:	4610      	mov	r0, r2
 801292c:	f7fd fbb4 	bl	8010098 <move_window>
 8012930:	4603      	mov	r3, r0
 8012932:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012934:	7dfb      	ldrb	r3, [r7, #23]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d138      	bne.n	80129ac <f_sync+0xfc>
					dir = fp->dir_ptr;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801293e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	330b      	adds	r3, #11
 8012944:	781a      	ldrb	r2, [r3, #0]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	330b      	adds	r3, #11
 801294a:	f042 0220 	orr.w	r2, r2, #32
 801294e:	b2d2      	uxtb	r2, r2
 8012950:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6818      	ldr	r0, [r3, #0]
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	461a      	mov	r2, r3
 801295c:	68f9      	ldr	r1, [r7, #12]
 801295e:	f7fe f942 	bl	8010be6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	f103 021c 	add.w	r2, r3, #28
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	68db      	ldr	r3, [r3, #12]
 801296c:	4619      	mov	r1, r3
 801296e:	4610      	mov	r0, r2
 8012970:	f7fd f906 	bl	800fb80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	3316      	adds	r3, #22
 8012978:	6939      	ldr	r1, [r7, #16]
 801297a:	4618      	mov	r0, r3
 801297c:	f7fd f900 	bl	800fb80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	3312      	adds	r3, #18
 8012984:	2100      	movs	r1, #0
 8012986:	4618      	mov	r0, r3
 8012988:	f7fd f8df 	bl	800fb4a <st_word>
					fs->wflag = 1;
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	2201      	movs	r2, #1
 8012990:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	4618      	mov	r0, r3
 8012996:	f7fd fbad 	bl	80100f4 <sync_fs>
 801299a:	4603      	mov	r3, r0
 801299c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	7d1b      	ldrb	r3, [r3, #20]
 80129a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129a6:	b2da      	uxtb	r2, r3
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	7dfa      	ldrb	r2, [r7, #23]
 80129b0:	4611      	mov	r1, r2
 80129b2:	4618      	mov	r0, r3
 80129b4:	f7fd f9a4 	bl	800fd00 <unlock_fs>
 80129b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80129ba:	4618      	mov	r0, r3
 80129bc:	3718      	adds	r7, #24
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b084      	sub	sp, #16
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80129ca:	6878      	ldr	r0, [r7, #4]
 80129cc:	f7ff ff70 	bl	80128b0 <f_sync>
 80129d0:	4603      	mov	r3, r0
 80129d2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d11d      	bne.n	8012a16 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	f107 0208 	add.w	r2, r7, #8
 80129e0:	4611      	mov	r1, r2
 80129e2:	4618      	mov	r0, r3
 80129e4:	f7ff fa92 	bl	8011f0c <validate>
 80129e8:	4603      	mov	r3, r0
 80129ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80129ec:	7bfb      	ldrb	r3, [r7, #15]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d111      	bne.n	8012a16 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	691b      	ldr	r3, [r3, #16]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7fd faaa 	bl	800ff50 <dec_lock>
 80129fc:	4603      	mov	r3, r0
 80129fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012a00:	7bfb      	ldrb	r3, [r7, #15]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d102      	bne.n	8012a0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2200      	movs	r2, #0
 8012a0a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	2100      	movs	r1, #0
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fd f975 	bl	800fd00 <unlock_fs>
#endif
		}
	}
	return res;
 8012a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8012a26:	af00      	add	r7, sp, #0
 8012a28:	1d3b      	adds	r3, r7, #4
 8012a2a:	6018      	str	r0, [r3, #0]
 8012a2c:	463b      	mov	r3, r7
 8012a2e:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8012a30:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8012a34:	1d3b      	adds	r3, r7, #4
 8012a36:	2200      	movs	r2, #0
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f7fe ffdd 	bl	80119f8 <find_volume>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8012a44:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d127      	bne.n	8012a9c <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8012a4c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8012a50:	f107 0208 	add.w	r2, r7, #8
 8012a54:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8012a56:	1d3b      	adds	r3, r7, #4
 8012a58:	681a      	ldr	r2, [r3, #0]
 8012a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012a5e:	4611      	mov	r1, r2
 8012a60:	4618      	mov	r0, r3
 8012a62:	f7fe feb9 	bl	80117d8 <follow_path>
 8012a66:	4603      	mov	r3, r0
 8012a68:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8012a6c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8012a70:	2b00      	cmp	r3, #0
 8012a72:	d113      	bne.n	8012a9c <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012a74:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8012a78:	b25b      	sxtb	r3, r3
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	da03      	bge.n	8012a86 <f_stat+0x66>
				res = FR_INVALID_NAME;
 8012a7e:	2306      	movs	r3, #6
 8012a80:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8012a84:	e00a      	b.n	8012a9c <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8012a86:	463b      	mov	r3, r7
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d006      	beq.n	8012a9c <f_stat+0x7c>
 8012a8e:	463b      	mov	r3, r7
 8012a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8012a94:	6819      	ldr	r1, [r3, #0]
 8012a96:	4610      	mov	r0, r2
 8012a98:	f7fe fc08 	bl	80112ac <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8012a9c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8012aa0:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8012aa4:	4611      	mov	r1, r2
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f7fd f92a 	bl	800fd00 <unlock_fs>
 8012aac:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd80      	pop	{r7, pc}

08012aba <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8012aba:	b580      	push	{r7, lr}
 8012abc:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	1d3b      	adds	r3, r7, #4
 8012ac4:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8012ac6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8012aca:	1d3b      	adds	r3, r7, #4
 8012acc:	2202      	movs	r2, #2
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f7fe ff92 	bl	80119f8 <find_volume>
 8012ad4:	4603      	mov	r3, r0
 8012ad6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 8012ada:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012ade:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 8012ae2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	f040 8134 	bne.w	8012d54 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8012aec:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012af0:	f107 020c 	add.w	r2, r7, #12
 8012af4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8012af6:	1d3b      	adds	r3, r7, #4
 8012af8:	681a      	ldr	r2, [r3, #0]
 8012afa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012afe:	4611      	mov	r1, r2
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7fe fe69 	bl	80117d8 <follow_path>
 8012b06:	4603      	mov	r3, r0
 8012b08:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012b0c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d102      	bne.n	8012b1a <f_mkdir+0x60>
 8012b14:	2308      	movs	r3, #8
 8012b16:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012b1a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012b1e:	2b04      	cmp	r3, #4
 8012b20:	f040 8118 	bne.w	8012d54 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012b24:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012b28:	2100      	movs	r1, #0
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	f7fd fdc6 	bl	80106bc <create_chain>
 8012b30:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012b34:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012b38:	895b      	ldrh	r3, [r3, #10]
 8012b3a:	461a      	mov	r2, r3
 8012b3c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012b40:	899b      	ldrh	r3, [r3, #12]
 8012b42:	fb03 f302 	mul.w	r3, r3, r2
 8012b46:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 8012b4a:	2300      	movs	r3, #0
 8012b4c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012b50:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d102      	bne.n	8012b5e <f_mkdir+0xa4>
 8012b58:	2307      	movs	r3, #7
 8012b5a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 8012b5e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012b62:	2b01      	cmp	r3, #1
 8012b64:	d102      	bne.n	8012b6c <f_mkdir+0xb2>
 8012b66:	2302      	movs	r3, #2
 8012b68:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012b6c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012b70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b74:	d102      	bne.n	8012b7c <f_mkdir+0xc2>
 8012b76:	2301      	movs	r3, #1
 8012b78:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012b7c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d107      	bne.n	8012b94 <f_mkdir+0xda>
 8012b84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012b88:	4618      	mov	r0, r3
 8012b8a:	f7fd fa41 	bl	8010010 <sync_window>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 8012b94:	f7fb fa0e 	bl	800dfb4 <get_fattime>
 8012b98:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012b9c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	f040 8094 	bne.w	8012cce <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 8012ba6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012baa:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8012bae:	4618      	mov	r0, r3
 8012bb0:	f7fd fb10 	bl	80101d4 <clust2sect>
 8012bb4:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 8012bb8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012bbc:	333c      	adds	r3, #60	; 0x3c
 8012bbe:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 8012bc2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012bc6:	899b      	ldrh	r3, [r3, #12]
 8012bc8:	461a      	mov	r2, r3
 8012bca:	2100      	movs	r1, #0
 8012bcc:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8012bd0:	f7fd f823 	bl	800fc1a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012bd4:	220b      	movs	r2, #11
 8012bd6:	2120      	movs	r1, #32
 8012bd8:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8012bdc:	f7fd f81d 	bl	800fc1a <mem_set>
					dir[DIR_Name] = '.';
 8012be0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012be4:	222e      	movs	r2, #46	; 0x2e
 8012be6:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012be8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012bec:	330b      	adds	r3, #11
 8012bee:	2210      	movs	r2, #16
 8012bf0:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012bf2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012bf6:	3316      	adds	r3, #22
 8012bf8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	f7fc ffbf 	bl	800fb80 <st_dword>
					st_clust(fs, dir, dcl);
 8012c02:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c06:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8012c0a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fd ffe9 	bl	8010be6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012c14:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012c18:	3320      	adds	r3, #32
 8012c1a:	2220      	movs	r2, #32
 8012c1c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012c20:	4618      	mov	r0, r3
 8012c22:	f7fc ffd9 	bl	800fbd8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012c26:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012c2a:	3321      	adds	r3, #33	; 0x21
 8012c2c:	222e      	movs	r2, #46	; 0x2e
 8012c2e:	701a      	strb	r2, [r3, #0]
 8012c30:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8012c34:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012c38:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	2b03      	cmp	r3, #3
 8012c40:	d109      	bne.n	8012c56 <f_mkdir+0x19c>
 8012c42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c48:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d102      	bne.n	8012c56 <f_mkdir+0x19c>
 8012c50:	2300      	movs	r3, #0
 8012c52:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 8012c56:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8012c5a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012c5e:	3320      	adds	r3, #32
 8012c60:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8012c64:	4619      	mov	r1, r3
 8012c66:	f7fd ffbe 	bl	8010be6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012c6a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c6e:	895b      	ldrh	r3, [r3, #10]
 8012c70:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8012c74:	e025      	b.n	8012cc2 <f_mkdir+0x208>
					fs->winsect = dsc++;
 8012c76:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8012c7a:	1c5a      	adds	r2, r3, #1
 8012c7c:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8012c80:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8012c84:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8012c86:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c8a:	2201      	movs	r2, #1
 8012c8c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012c8e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012c92:	4618      	mov	r0, r3
 8012c94:	f7fd f9bc 	bl	8010010 <sync_window>
 8012c98:	4603      	mov	r3, r0
 8012c9a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 8012c9e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d112      	bne.n	8012ccc <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 8012ca6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012caa:	899b      	ldrh	r3, [r3, #12]
 8012cac:	461a      	mov	r2, r3
 8012cae:	2100      	movs	r1, #0
 8012cb0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8012cb4:	f7fc ffb1 	bl	800fc1a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012cb8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8012cbc:	3b01      	subs	r3, #1
 8012cbe:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8012cc2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d1d5      	bne.n	8012c76 <f_mkdir+0x1bc>
 8012cca:	e000      	b.n	8012cce <f_mkdir+0x214>
					if (res != FR_OK) break;
 8012ccc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012cce:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d107      	bne.n	8012ce6 <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012cd6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f7fe f9ee 	bl	80110bc <dir_register>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 8012ce6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d12a      	bne.n	8012d44 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012cee:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8012cf2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012cf6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012cfa:	3316      	adds	r3, #22
 8012cfc:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7fc ff3d 	bl	800fb80 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012d06:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012d0a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8012d0e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7fd ff67 	bl	8010be6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012d18:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012d1c:	330b      	adds	r3, #11
 8012d1e:	2210      	movs	r2, #16
 8012d20:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012d22:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012d26:	2201      	movs	r2, #1
 8012d28:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012d2a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	d110      	bne.n	8012d54 <f_mkdir+0x29a>
					res = sync_fs(fs);
 8012d32:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7fd f9dc 	bl	80100f4 <sync_fs>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8012d42:	e007      	b.n	8012d54 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012d44:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012d48:	2200      	movs	r2, #0
 8012d4a:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8012d4e:	4618      	mov	r0, r3
 8012d50:	f7fd fc4f 	bl	80105f2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012d54:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012d58:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 8012d5c:	4611      	mov	r1, r2
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fc ffce 	bl	800fd00 <unlock_fs>
 8012d64:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8012d6e:	46bd      	mov	sp, r7
 8012d70:	bd80      	pop	{r7, pc}
	...

08012d74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b087      	sub	sp, #28
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	60f8      	str	r0, [r7, #12]
 8012d7c:	60b9      	str	r1, [r7, #8]
 8012d7e:	4613      	mov	r3, r2
 8012d80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012d82:	2301      	movs	r3, #1
 8012d84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012d86:	2300      	movs	r3, #0
 8012d88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012d8a:	4b1f      	ldr	r3, [pc, #124]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012d8c:	7a5b      	ldrb	r3, [r3, #9]
 8012d8e:	b2db      	uxtb	r3, r3
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d131      	bne.n	8012df8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012d94:	4b1c      	ldr	r3, [pc, #112]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012d96:	7a5b      	ldrb	r3, [r3, #9]
 8012d98:	b2db      	uxtb	r3, r3
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	4b1a      	ldr	r3, [pc, #104]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012d9e:	2100      	movs	r1, #0
 8012da0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012da2:	4b19      	ldr	r3, [pc, #100]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012da4:	7a5b      	ldrb	r3, [r3, #9]
 8012da6:	b2db      	uxtb	r3, r3
 8012da8:	4a17      	ldr	r2, [pc, #92]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012daa:	009b      	lsls	r3, r3, #2
 8012dac:	4413      	add	r3, r2
 8012dae:	68fa      	ldr	r2, [r7, #12]
 8012db0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012db2:	4b15      	ldr	r3, [pc, #84]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012db4:	7a5b      	ldrb	r3, [r3, #9]
 8012db6:	b2db      	uxtb	r3, r3
 8012db8:	461a      	mov	r2, r3
 8012dba:	4b13      	ldr	r3, [pc, #76]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012dbc:	4413      	add	r3, r2
 8012dbe:	79fa      	ldrb	r2, [r7, #7]
 8012dc0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012dc2:	4b11      	ldr	r3, [pc, #68]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012dc4:	7a5b      	ldrb	r3, [r3, #9]
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	1c5a      	adds	r2, r3, #1
 8012dca:	b2d1      	uxtb	r1, r2
 8012dcc:	4a0e      	ldr	r2, [pc, #56]	; (8012e08 <FATFS_LinkDriverEx+0x94>)
 8012dce:	7251      	strb	r1, [r2, #9]
 8012dd0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012dd2:	7dbb      	ldrb	r3, [r7, #22]
 8012dd4:	3330      	adds	r3, #48	; 0x30
 8012dd6:	b2da      	uxtb	r2, r3
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	3301      	adds	r3, #1
 8012de0:	223a      	movs	r2, #58	; 0x3a
 8012de2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	3302      	adds	r3, #2
 8012de8:	222f      	movs	r2, #47	; 0x2f
 8012dea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012dec:	68bb      	ldr	r3, [r7, #8]
 8012dee:	3303      	adds	r3, #3
 8012df0:	2200      	movs	r2, #0
 8012df2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012df4:	2300      	movs	r3, #0
 8012df6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012df8:	7dfb      	ldrb	r3, [r7, #23]
}
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	371c      	adds	r7, #28
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e04:	4770      	bx	lr
 8012e06:	bf00      	nop
 8012e08:	200027e0 	.word	0x200027e0

08012e0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012e16:	2200      	movs	r2, #0
 8012e18:	6839      	ldr	r1, [r7, #0]
 8012e1a:	6878      	ldr	r0, [r7, #4]
 8012e1c:	f7ff ffaa 	bl	8012d74 <FATFS_LinkDriverEx>
 8012e20:	4603      	mov	r3, r0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
	...

08012e2c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012e2c:	b480      	push	{r7}
 8012e2e:	b085      	sub	sp, #20
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	4603      	mov	r3, r0
 8012e34:	6039      	str	r1, [r7, #0]
 8012e36:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012e38:	88fb      	ldrh	r3, [r7, #6]
 8012e3a:	2b7f      	cmp	r3, #127	; 0x7f
 8012e3c:	d802      	bhi.n	8012e44 <ff_convert+0x18>
		c = chr;
 8012e3e:	88fb      	ldrh	r3, [r7, #6]
 8012e40:	81fb      	strh	r3, [r7, #14]
 8012e42:	e025      	b.n	8012e90 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012e44:	683b      	ldr	r3, [r7, #0]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00b      	beq.n	8012e62 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012e4a:	88fb      	ldrh	r3, [r7, #6]
 8012e4c:	2bff      	cmp	r3, #255	; 0xff
 8012e4e:	d805      	bhi.n	8012e5c <ff_convert+0x30>
 8012e50:	88fb      	ldrh	r3, [r7, #6]
 8012e52:	3b80      	subs	r3, #128	; 0x80
 8012e54:	4a12      	ldr	r2, [pc, #72]	; (8012ea0 <ff_convert+0x74>)
 8012e56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e5a:	e000      	b.n	8012e5e <ff_convert+0x32>
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	81fb      	strh	r3, [r7, #14]
 8012e60:	e016      	b.n	8012e90 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012e62:	2300      	movs	r3, #0
 8012e64:	81fb      	strh	r3, [r7, #14]
 8012e66:	e009      	b.n	8012e7c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012e68:	89fb      	ldrh	r3, [r7, #14]
 8012e6a:	4a0d      	ldr	r2, [pc, #52]	; (8012ea0 <ff_convert+0x74>)
 8012e6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012e70:	88fa      	ldrh	r2, [r7, #6]
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d006      	beq.n	8012e84 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012e76:	89fb      	ldrh	r3, [r7, #14]
 8012e78:	3301      	adds	r3, #1
 8012e7a:	81fb      	strh	r3, [r7, #14]
 8012e7c:	89fb      	ldrh	r3, [r7, #14]
 8012e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8012e80:	d9f2      	bls.n	8012e68 <ff_convert+0x3c>
 8012e82:	e000      	b.n	8012e86 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012e84:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012e86:	89fb      	ldrh	r3, [r7, #14]
 8012e88:	3380      	adds	r3, #128	; 0x80
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	b2db      	uxtb	r3, r3
 8012e8e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012e90:	89fb      	ldrh	r3, [r7, #14]
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3714      	adds	r7, #20
 8012e96:	46bd      	mov	sp, r7
 8012e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9c:	4770      	bx	lr
 8012e9e:	bf00      	nop
 8012ea0:	0801efe0 	.word	0x0801efe0

08012ea4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b087      	sub	sp, #28
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012eae:	88fb      	ldrh	r3, [r7, #6]
 8012eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012eb4:	d201      	bcs.n	8012eba <ff_wtoupper+0x16>
 8012eb6:	4b3e      	ldr	r3, [pc, #248]	; (8012fb0 <ff_wtoupper+0x10c>)
 8012eb8:	e000      	b.n	8012ebc <ff_wtoupper+0x18>
 8012eba:	4b3e      	ldr	r3, [pc, #248]	; (8012fb4 <ff_wtoupper+0x110>)
 8012ebc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	1c9a      	adds	r2, r3, #2
 8012ec2:	617a      	str	r2, [r7, #20]
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012ec8:	8a7b      	ldrh	r3, [r7, #18]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d068      	beq.n	8012fa0 <ff_wtoupper+0xfc>
 8012ece:	88fa      	ldrh	r2, [r7, #6]
 8012ed0:	8a7b      	ldrh	r3, [r7, #18]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	d364      	bcc.n	8012fa0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012ed6:	697b      	ldr	r3, [r7, #20]
 8012ed8:	1c9a      	adds	r2, r3, #2
 8012eda:	617a      	str	r2, [r7, #20]
 8012edc:	881b      	ldrh	r3, [r3, #0]
 8012ede:	823b      	strh	r3, [r7, #16]
 8012ee0:	8a3b      	ldrh	r3, [r7, #16]
 8012ee2:	0a1b      	lsrs	r3, r3, #8
 8012ee4:	81fb      	strh	r3, [r7, #14]
 8012ee6:	8a3b      	ldrh	r3, [r7, #16]
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012eec:	88fa      	ldrh	r2, [r7, #6]
 8012eee:	8a79      	ldrh	r1, [r7, #18]
 8012ef0:	8a3b      	ldrh	r3, [r7, #16]
 8012ef2:	440b      	add	r3, r1
 8012ef4:	429a      	cmp	r2, r3
 8012ef6:	da49      	bge.n	8012f8c <ff_wtoupper+0xe8>
			switch (cmd) {
 8012ef8:	89fb      	ldrh	r3, [r7, #14]
 8012efa:	2b08      	cmp	r3, #8
 8012efc:	d84f      	bhi.n	8012f9e <ff_wtoupper+0xfa>
 8012efe:	a201      	add	r2, pc, #4	; (adr r2, 8012f04 <ff_wtoupper+0x60>)
 8012f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f04:	08012f29 	.word	0x08012f29
 8012f08:	08012f3b 	.word	0x08012f3b
 8012f0c:	08012f51 	.word	0x08012f51
 8012f10:	08012f59 	.word	0x08012f59
 8012f14:	08012f61 	.word	0x08012f61
 8012f18:	08012f69 	.word	0x08012f69
 8012f1c:	08012f71 	.word	0x08012f71
 8012f20:	08012f79 	.word	0x08012f79
 8012f24:	08012f81 	.word	0x08012f81
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012f28:	88fa      	ldrh	r2, [r7, #6]
 8012f2a:	8a7b      	ldrh	r3, [r7, #18]
 8012f2c:	1ad3      	subs	r3, r2, r3
 8012f2e:	005b      	lsls	r3, r3, #1
 8012f30:	697a      	ldr	r2, [r7, #20]
 8012f32:	4413      	add	r3, r2
 8012f34:	881b      	ldrh	r3, [r3, #0]
 8012f36:	80fb      	strh	r3, [r7, #6]
 8012f38:	e027      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012f3a:	88fa      	ldrh	r2, [r7, #6]
 8012f3c:	8a7b      	ldrh	r3, [r7, #18]
 8012f3e:	1ad3      	subs	r3, r2, r3
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	f003 0301 	and.w	r3, r3, #1
 8012f46:	b29b      	uxth	r3, r3
 8012f48:	88fa      	ldrh	r2, [r7, #6]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	80fb      	strh	r3, [r7, #6]
 8012f4e:	e01c      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012f50:	88fb      	ldrh	r3, [r7, #6]
 8012f52:	3b10      	subs	r3, #16
 8012f54:	80fb      	strh	r3, [r7, #6]
 8012f56:	e018      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012f58:	88fb      	ldrh	r3, [r7, #6]
 8012f5a:	3b20      	subs	r3, #32
 8012f5c:	80fb      	strh	r3, [r7, #6]
 8012f5e:	e014      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012f60:	88fb      	ldrh	r3, [r7, #6]
 8012f62:	3b30      	subs	r3, #48	; 0x30
 8012f64:	80fb      	strh	r3, [r7, #6]
 8012f66:	e010      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012f68:	88fb      	ldrh	r3, [r7, #6]
 8012f6a:	3b1a      	subs	r3, #26
 8012f6c:	80fb      	strh	r3, [r7, #6]
 8012f6e:	e00c      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012f70:	88fb      	ldrh	r3, [r7, #6]
 8012f72:	3308      	adds	r3, #8
 8012f74:	80fb      	strh	r3, [r7, #6]
 8012f76:	e008      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012f78:	88fb      	ldrh	r3, [r7, #6]
 8012f7a:	3b50      	subs	r3, #80	; 0x50
 8012f7c:	80fb      	strh	r3, [r7, #6]
 8012f7e:	e004      	b.n	8012f8a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012f80:	88fb      	ldrh	r3, [r7, #6]
 8012f82:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8012f86:	80fb      	strh	r3, [r7, #6]
 8012f88:	bf00      	nop
			}
			break;
 8012f8a:	e008      	b.n	8012f9e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012f8c:	89fb      	ldrh	r3, [r7, #14]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d195      	bne.n	8012ebe <ff_wtoupper+0x1a>
 8012f92:	8a3b      	ldrh	r3, [r7, #16]
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	697a      	ldr	r2, [r7, #20]
 8012f98:	4413      	add	r3, r2
 8012f9a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012f9c:	e78f      	b.n	8012ebe <ff_wtoupper+0x1a>
			break;
 8012f9e:	bf00      	nop
	}

	return chr;
 8012fa0:	88fb      	ldrh	r3, [r7, #6]
}
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	371c      	adds	r7, #28
 8012fa6:	46bd      	mov	sp, r7
 8012fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fac:	4770      	bx	lr
 8012fae:	bf00      	nop
 8012fb0:	0801f0e0 	.word	0x0801f0e0
 8012fb4:	0801f2d4 	.word	0x0801f2d4

08012fb8 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b084      	sub	sp, #16
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	6039      	str	r1, [r7, #0]
 8012fc2:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	2101      	movs	r1, #1
 8012fc8:	2001      	movs	r0, #1
 8012fca:	f000 f978 	bl	80132be <osSemaphoreNew>
 8012fce:	4602      	mov	r2, r0
 8012fd0:	683b      	ldr	r3, [r7, #0]
 8012fd2:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012fd4:	683b      	ldr	r3, [r7, #0]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	bf14      	ite	ne
 8012fdc:	2301      	movne	r3, #1
 8012fde:	2300      	moveq	r3, #0
 8012fe0:	b2db      	uxtb	r3, r3
 8012fe2:	60fb      	str	r3, [r7, #12]

    return ret;
 8012fe4:	68fb      	ldr	r3, [r7, #12]
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b082      	sub	sp, #8
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f000 fa80 	bl	80134fc <osSemaphoreDelete>
#endif
    return 1;
 8012ffc:	2301      	movs	r3, #1
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3708      	adds	r7, #8
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b084      	sub	sp, #16
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801300e:	2300      	movs	r3, #0
 8013010:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8013012:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f000 f9da 	bl	80133d0 <osSemaphoreAcquire>
 801301c:	4603      	mov	r3, r0
 801301e:	2b00      	cmp	r3, #0
 8013020:	d101      	bne.n	8013026 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8013022:	2301      	movs	r3, #1
 8013024:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013026:	68fb      	ldr	r3, [r7, #12]
}
 8013028:	4618      	mov	r0, r3
 801302a:	3710      	adds	r7, #16
 801302c:	46bd      	mov	sp, r7
 801302e:	bd80      	pop	{r7, pc}

08013030 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b082      	sub	sp, #8
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013038:	6878      	ldr	r0, [r7, #4]
 801303a:	f000 fa1b 	bl	8013474 <osSemaphoreRelease>
#endif
}
 801303e:	bf00      	nop
 8013040:	3708      	adds	r7, #8
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}
	...

08013048 <__NVIC_SetPriority>:
{
 8013048:	b480      	push	{r7}
 801304a:	b083      	sub	sp, #12
 801304c:	af00      	add	r7, sp, #0
 801304e:	4603      	mov	r3, r0
 8013050:	6039      	str	r1, [r7, #0]
 8013052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013058:	2b00      	cmp	r3, #0
 801305a:	db0a      	blt.n	8013072 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801305c:	683b      	ldr	r3, [r7, #0]
 801305e:	b2da      	uxtb	r2, r3
 8013060:	490c      	ldr	r1, [pc, #48]	; (8013094 <__NVIC_SetPriority+0x4c>)
 8013062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013066:	0112      	lsls	r2, r2, #4
 8013068:	b2d2      	uxtb	r2, r2
 801306a:	440b      	add	r3, r1
 801306c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013070:	e00a      	b.n	8013088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013072:	683b      	ldr	r3, [r7, #0]
 8013074:	b2da      	uxtb	r2, r3
 8013076:	4908      	ldr	r1, [pc, #32]	; (8013098 <__NVIC_SetPriority+0x50>)
 8013078:	79fb      	ldrb	r3, [r7, #7]
 801307a:	f003 030f 	and.w	r3, r3, #15
 801307e:	3b04      	subs	r3, #4
 8013080:	0112      	lsls	r2, r2, #4
 8013082:	b2d2      	uxtb	r2, r2
 8013084:	440b      	add	r3, r1
 8013086:	761a      	strb	r2, [r3, #24]
}
 8013088:	bf00      	nop
 801308a:	370c      	adds	r7, #12
 801308c:	46bd      	mov	sp, r7
 801308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013092:	4770      	bx	lr
 8013094:	e000e100 	.word	0xe000e100
 8013098:	e000ed00 	.word	0xe000ed00

0801309c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801309c:	b580      	push	{r7, lr}
 801309e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80130a0:	4b05      	ldr	r3, [pc, #20]	; (80130b8 <SysTick_Handler+0x1c>)
 80130a2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80130a4:	f002 fcae 	bl	8015a04 <xTaskGetSchedulerState>
 80130a8:	4603      	mov	r3, r0
 80130aa:	2b01      	cmp	r3, #1
 80130ac:	d001      	beq.n	80130b2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80130ae:	f003 fcd3 	bl	8016a58 <xPortSysTickHandler>
  }
}
 80130b2:	bf00      	nop
 80130b4:	bd80      	pop	{r7, pc}
 80130b6:	bf00      	nop
 80130b8:	e000e010 	.word	0xe000e010

080130bc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80130bc:	b580      	push	{r7, lr}
 80130be:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80130c0:	2100      	movs	r1, #0
 80130c2:	f06f 0004 	mvn.w	r0, #4
 80130c6:	f7ff ffbf 	bl	8013048 <__NVIC_SetPriority>
#endif
}
 80130ca:	bf00      	nop
 80130cc:	bd80      	pop	{r7, pc}
	...

080130d0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80130d0:	b480      	push	{r7}
 80130d2:	b083      	sub	sp, #12
 80130d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80130d6:	f3ef 8305 	mrs	r3, IPSR
 80130da:	603b      	str	r3, [r7, #0]
  return(result);
 80130dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d003      	beq.n	80130ea <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80130e2:	f06f 0305 	mvn.w	r3, #5
 80130e6:	607b      	str	r3, [r7, #4]
 80130e8:	e00c      	b.n	8013104 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80130ea:	4b0a      	ldr	r3, [pc, #40]	; (8013114 <osKernelInitialize+0x44>)
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d105      	bne.n	80130fe <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80130f2:	4b08      	ldr	r3, [pc, #32]	; (8013114 <osKernelInitialize+0x44>)
 80130f4:	2201      	movs	r2, #1
 80130f6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80130f8:	2300      	movs	r3, #0
 80130fa:	607b      	str	r3, [r7, #4]
 80130fc:	e002      	b.n	8013104 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80130fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013102:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013104:	687b      	ldr	r3, [r7, #4]
}
 8013106:	4618      	mov	r0, r3
 8013108:	370c      	adds	r7, #12
 801310a:	46bd      	mov	sp, r7
 801310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013110:	4770      	bx	lr
 8013112:	bf00      	nop
 8013114:	200027ec 	.word	0x200027ec

08013118 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013118:	b580      	push	{r7, lr}
 801311a:	b082      	sub	sp, #8
 801311c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801311e:	f3ef 8305 	mrs	r3, IPSR
 8013122:	603b      	str	r3, [r7, #0]
  return(result);
 8013124:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013126:	2b00      	cmp	r3, #0
 8013128:	d003      	beq.n	8013132 <osKernelStart+0x1a>
    stat = osErrorISR;
 801312a:	f06f 0305 	mvn.w	r3, #5
 801312e:	607b      	str	r3, [r7, #4]
 8013130:	e010      	b.n	8013154 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013132:	4b0b      	ldr	r3, [pc, #44]	; (8013160 <osKernelStart+0x48>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2b01      	cmp	r3, #1
 8013138:	d109      	bne.n	801314e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801313a:	f7ff ffbf 	bl	80130bc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801313e:	4b08      	ldr	r3, [pc, #32]	; (8013160 <osKernelStart+0x48>)
 8013140:	2202      	movs	r2, #2
 8013142:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013144:	f001 fe7c 	bl	8014e40 <vTaskStartScheduler>
      stat = osOK;
 8013148:	2300      	movs	r3, #0
 801314a:	607b      	str	r3, [r7, #4]
 801314c:	e002      	b.n	8013154 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801314e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013152:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013154:	687b      	ldr	r3, [r7, #4]
}
 8013156:	4618      	mov	r0, r3
 8013158:	3708      	adds	r7, #8
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
 801315e:	bf00      	nop
 8013160:	200027ec 	.word	0x200027ec

08013164 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013164:	b580      	push	{r7, lr}
 8013166:	b08e      	sub	sp, #56	; 0x38
 8013168:	af04      	add	r7, sp, #16
 801316a:	60f8      	str	r0, [r7, #12]
 801316c:	60b9      	str	r1, [r7, #8]
 801316e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013170:	2300      	movs	r3, #0
 8013172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013174:	f3ef 8305 	mrs	r3, IPSR
 8013178:	617b      	str	r3, [r7, #20]
  return(result);
 801317a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801317c:	2b00      	cmp	r3, #0
 801317e:	d17e      	bne.n	801327e <osThreadNew+0x11a>
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d07b      	beq.n	801327e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013186:	2380      	movs	r3, #128	; 0x80
 8013188:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801318a:	2318      	movs	r3, #24
 801318c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801318e:	2300      	movs	r3, #0
 8013190:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8013192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013196:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d045      	beq.n	801322a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d002      	beq.n	80131ac <osThreadNew+0x48>
        name = attr->name;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d002      	beq.n	80131ba <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	699b      	ldr	r3, [r3, #24]
 80131b8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80131ba:	69fb      	ldr	r3, [r7, #28]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d008      	beq.n	80131d2 <osThreadNew+0x6e>
 80131c0:	69fb      	ldr	r3, [r7, #28]
 80131c2:	2b38      	cmp	r3, #56	; 0x38
 80131c4:	d805      	bhi.n	80131d2 <osThreadNew+0x6e>
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	f003 0301 	and.w	r3, r3, #1
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d001      	beq.n	80131d6 <osThreadNew+0x72>
        return (NULL);
 80131d2:	2300      	movs	r3, #0
 80131d4:	e054      	b.n	8013280 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	695b      	ldr	r3, [r3, #20]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d003      	beq.n	80131e6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	695b      	ldr	r3, [r3, #20]
 80131e2:	089b      	lsrs	r3, r3, #2
 80131e4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	689b      	ldr	r3, [r3, #8]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d00e      	beq.n	801320c <osThreadNew+0xa8>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	68db      	ldr	r3, [r3, #12]
 80131f2:	2bbf      	cmp	r3, #191	; 0xbf
 80131f4:	d90a      	bls.n	801320c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d006      	beq.n	801320c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	695b      	ldr	r3, [r3, #20]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d002      	beq.n	801320c <osThreadNew+0xa8>
        mem = 1;
 8013206:	2301      	movs	r3, #1
 8013208:	61bb      	str	r3, [r7, #24]
 801320a:	e010      	b.n	801322e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	689b      	ldr	r3, [r3, #8]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d10c      	bne.n	801322e <osThreadNew+0xca>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	68db      	ldr	r3, [r3, #12]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d108      	bne.n	801322e <osThreadNew+0xca>
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	691b      	ldr	r3, [r3, #16]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d104      	bne.n	801322e <osThreadNew+0xca>
          mem = 0;
 8013224:	2300      	movs	r3, #0
 8013226:	61bb      	str	r3, [r7, #24]
 8013228:	e001      	b.n	801322e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801322a:	2300      	movs	r3, #0
 801322c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	2b01      	cmp	r3, #1
 8013232:	d110      	bne.n	8013256 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801323c:	9202      	str	r2, [sp, #8]
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	69fb      	ldr	r3, [r7, #28]
 8013242:	9300      	str	r3, [sp, #0]
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	6a3a      	ldr	r2, [r7, #32]
 8013248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f001 fba2 	bl	8014994 <xTaskCreateStatic>
 8013250:	4603      	mov	r3, r0
 8013252:	613b      	str	r3, [r7, #16]
 8013254:	e013      	b.n	801327e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013256:	69bb      	ldr	r3, [r7, #24]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d110      	bne.n	801327e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	b29a      	uxth	r2, r3
 8013260:	f107 0310 	add.w	r3, r7, #16
 8013264:	9301      	str	r3, [sp, #4]
 8013266:	69fb      	ldr	r3, [r7, #28]
 8013268:	9300      	str	r3, [sp, #0]
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801326e:	68f8      	ldr	r0, [r7, #12]
 8013270:	f001 fbed 	bl	8014a4e <xTaskCreate>
 8013274:	4603      	mov	r3, r0
 8013276:	2b01      	cmp	r3, #1
 8013278:	d001      	beq.n	801327e <osThreadNew+0x11a>
            hTask = NULL;
 801327a:	2300      	movs	r3, #0
 801327c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801327e:	693b      	ldr	r3, [r7, #16]
}
 8013280:	4618      	mov	r0, r3
 8013282:	3728      	adds	r7, #40	; 0x28
 8013284:	46bd      	mov	sp, r7
 8013286:	bd80      	pop	{r7, pc}

08013288 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013288:	b580      	push	{r7, lr}
 801328a:	b084      	sub	sp, #16
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013290:	f3ef 8305 	mrs	r3, IPSR
 8013294:	60bb      	str	r3, [r7, #8]
  return(result);
 8013296:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013298:	2b00      	cmp	r3, #0
 801329a:	d003      	beq.n	80132a4 <osDelay+0x1c>
    stat = osErrorISR;
 801329c:	f06f 0305 	mvn.w	r3, #5
 80132a0:	60fb      	str	r3, [r7, #12]
 80132a2:	e007      	b.n	80132b4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80132a4:	2300      	movs	r3, #0
 80132a6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d002      	beq.n	80132b4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80132ae:	6878      	ldr	r0, [r7, #4]
 80132b0:	f001 fd2c 	bl	8014d0c <vTaskDelay>
    }
  }

  return (stat);
 80132b4:	68fb      	ldr	r3, [r7, #12]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3710      	adds	r7, #16
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}

080132be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80132be:	b580      	push	{r7, lr}
 80132c0:	b08a      	sub	sp, #40	; 0x28
 80132c2:	af02      	add	r7, sp, #8
 80132c4:	60f8      	str	r0, [r7, #12]
 80132c6:	60b9      	str	r1, [r7, #8]
 80132c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80132ca:	2300      	movs	r3, #0
 80132cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80132ce:	f3ef 8305 	mrs	r3, IPSR
 80132d2:	613b      	str	r3, [r7, #16]
  return(result);
 80132d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d175      	bne.n	80133c6 <osSemaphoreNew+0x108>
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d072      	beq.n	80133c6 <osSemaphoreNew+0x108>
 80132e0:	68ba      	ldr	r2, [r7, #8]
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	429a      	cmp	r2, r3
 80132e6:	d86e      	bhi.n	80133c6 <osSemaphoreNew+0x108>
    mem = -1;
 80132e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80132ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d015      	beq.n	8013320 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	689b      	ldr	r3, [r3, #8]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d006      	beq.n	801330a <osSemaphoreNew+0x4c>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	68db      	ldr	r3, [r3, #12]
 8013300:	2b4f      	cmp	r3, #79	; 0x4f
 8013302:	d902      	bls.n	801330a <osSemaphoreNew+0x4c>
        mem = 1;
 8013304:	2301      	movs	r3, #1
 8013306:	61bb      	str	r3, [r7, #24]
 8013308:	e00c      	b.n	8013324 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	689b      	ldr	r3, [r3, #8]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d108      	bne.n	8013324 <osSemaphoreNew+0x66>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	68db      	ldr	r3, [r3, #12]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d104      	bne.n	8013324 <osSemaphoreNew+0x66>
          mem = 0;
 801331a:	2300      	movs	r3, #0
 801331c:	61bb      	str	r3, [r7, #24]
 801331e:	e001      	b.n	8013324 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8013320:	2300      	movs	r3, #0
 8013322:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8013324:	69bb      	ldr	r3, [r7, #24]
 8013326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801332a:	d04c      	beq.n	80133c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 801332c:	68fb      	ldr	r3, [r7, #12]
 801332e:	2b01      	cmp	r3, #1
 8013330:	d128      	bne.n	8013384 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8013332:	69bb      	ldr	r3, [r7, #24]
 8013334:	2b01      	cmp	r3, #1
 8013336:	d10a      	bne.n	801334e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	2203      	movs	r2, #3
 801333e:	9200      	str	r2, [sp, #0]
 8013340:	2200      	movs	r2, #0
 8013342:	2100      	movs	r1, #0
 8013344:	2001      	movs	r0, #1
 8013346:	f000 fb7f 	bl	8013a48 <xQueueGenericCreateStatic>
 801334a:	61f8      	str	r0, [r7, #28]
 801334c:	e005      	b.n	801335a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801334e:	2203      	movs	r2, #3
 8013350:	2100      	movs	r1, #0
 8013352:	2001      	movs	r0, #1
 8013354:	f000 fbf0 	bl	8013b38 <xQueueGenericCreate>
 8013358:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801335a:	69fb      	ldr	r3, [r7, #28]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d022      	beq.n	80133a6 <osSemaphoreNew+0xe8>
 8013360:	68bb      	ldr	r3, [r7, #8]
 8013362:	2b00      	cmp	r3, #0
 8013364:	d01f      	beq.n	80133a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8013366:	2300      	movs	r3, #0
 8013368:	2200      	movs	r2, #0
 801336a:	2100      	movs	r1, #0
 801336c:	69f8      	ldr	r0, [r7, #28]
 801336e:	f000 fcab 	bl	8013cc8 <xQueueGenericSend>
 8013372:	4603      	mov	r3, r0
 8013374:	2b01      	cmp	r3, #1
 8013376:	d016      	beq.n	80133a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8013378:	69f8      	ldr	r0, [r7, #28]
 801337a:	f001 f937 	bl	80145ec <vQueueDelete>
            hSemaphore = NULL;
 801337e:	2300      	movs	r3, #0
 8013380:	61fb      	str	r3, [r7, #28]
 8013382:	e010      	b.n	80133a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d108      	bne.n	801339c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	689b      	ldr	r3, [r3, #8]
 801338e:	461a      	mov	r2, r3
 8013390:	68b9      	ldr	r1, [r7, #8]
 8013392:	68f8      	ldr	r0, [r7, #12]
 8013394:	f000 fc2d 	bl	8013bf2 <xQueueCreateCountingSemaphoreStatic>
 8013398:	61f8      	str	r0, [r7, #28]
 801339a:	e004      	b.n	80133a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801339c:	68b9      	ldr	r1, [r7, #8]
 801339e:	68f8      	ldr	r0, [r7, #12]
 80133a0:	f000 fc5e 	bl	8013c60 <xQueueCreateCountingSemaphore>
 80133a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d00c      	beq.n	80133c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d003      	beq.n	80133ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	617b      	str	r3, [r7, #20]
 80133b8:	e001      	b.n	80133be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80133ba:	2300      	movs	r3, #0
 80133bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80133be:	6979      	ldr	r1, [r7, #20]
 80133c0:	69f8      	ldr	r0, [r7, #28]
 80133c2:	f001 fa5f 	bl	8014884 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80133c6:	69fb      	ldr	r3, [r7, #28]
}
 80133c8:	4618      	mov	r0, r3
 80133ca:	3720      	adds	r7, #32
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b086      	sub	sp, #24
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80133de:	2300      	movs	r3, #0
 80133e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80133e2:	693b      	ldr	r3, [r7, #16]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d103      	bne.n	80133f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80133e8:	f06f 0303 	mvn.w	r3, #3
 80133ec:	617b      	str	r3, [r7, #20]
 80133ee:	e039      	b.n	8013464 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80133f0:	f3ef 8305 	mrs	r3, IPSR
 80133f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80133f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d022      	beq.n	8013442 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d003      	beq.n	801340a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8013402:	f06f 0303 	mvn.w	r3, #3
 8013406:	617b      	str	r3, [r7, #20]
 8013408:	e02c      	b.n	8013464 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801340a:	2300      	movs	r3, #0
 801340c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801340e:	f107 0308 	add.w	r3, r7, #8
 8013412:	461a      	mov	r2, r3
 8013414:	2100      	movs	r1, #0
 8013416:	6938      	ldr	r0, [r7, #16]
 8013418:	f001 f868 	bl	80144ec <xQueueReceiveFromISR>
 801341c:	4603      	mov	r3, r0
 801341e:	2b01      	cmp	r3, #1
 8013420:	d003      	beq.n	801342a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8013422:	f06f 0302 	mvn.w	r3, #2
 8013426:	617b      	str	r3, [r7, #20]
 8013428:	e01c      	b.n	8013464 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	2b00      	cmp	r3, #0
 801342e:	d019      	beq.n	8013464 <osSemaphoreAcquire+0x94>
 8013430:	4b0f      	ldr	r3, [pc, #60]	; (8013470 <osSemaphoreAcquire+0xa0>)
 8013432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013436:	601a      	str	r2, [r3, #0]
 8013438:	f3bf 8f4f 	dsb	sy
 801343c:	f3bf 8f6f 	isb	sy
 8013440:	e010      	b.n	8013464 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8013442:	6839      	ldr	r1, [r7, #0]
 8013444:	6938      	ldr	r0, [r7, #16]
 8013446:	f000 ff45 	bl	80142d4 <xQueueSemaphoreTake>
 801344a:	4603      	mov	r3, r0
 801344c:	2b01      	cmp	r3, #1
 801344e:	d009      	beq.n	8013464 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d003      	beq.n	801345e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8013456:	f06f 0301 	mvn.w	r3, #1
 801345a:	617b      	str	r3, [r7, #20]
 801345c:	e002      	b.n	8013464 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801345e:	f06f 0302 	mvn.w	r3, #2
 8013462:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8013464:	697b      	ldr	r3, [r7, #20]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3718      	adds	r7, #24
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}
 801346e:	bf00      	nop
 8013470:	e000ed04 	.word	0xe000ed04

08013474 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8013474:	b580      	push	{r7, lr}
 8013476:	b086      	sub	sp, #24
 8013478:	af00      	add	r7, sp, #0
 801347a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8013480:	2300      	movs	r3, #0
 8013482:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8013484:	693b      	ldr	r3, [r7, #16]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d103      	bne.n	8013492 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801348a:	f06f 0303 	mvn.w	r3, #3
 801348e:	617b      	str	r3, [r7, #20]
 8013490:	e02c      	b.n	80134ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013492:	f3ef 8305 	mrs	r3, IPSR
 8013496:	60fb      	str	r3, [r7, #12]
  return(result);
 8013498:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801349a:	2b00      	cmp	r3, #0
 801349c:	d01a      	beq.n	80134d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801349e:	2300      	movs	r3, #0
 80134a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80134a2:	f107 0308 	add.w	r3, r7, #8
 80134a6:	4619      	mov	r1, r3
 80134a8:	6938      	ldr	r0, [r7, #16]
 80134aa:	f000 fda6 	bl	8013ffa <xQueueGiveFromISR>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d003      	beq.n	80134bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80134b4:	f06f 0302 	mvn.w	r3, #2
 80134b8:	617b      	str	r3, [r7, #20]
 80134ba:	e017      	b.n	80134ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80134bc:	68bb      	ldr	r3, [r7, #8]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d014      	beq.n	80134ec <osSemaphoreRelease+0x78>
 80134c2:	4b0d      	ldr	r3, [pc, #52]	; (80134f8 <osSemaphoreRelease+0x84>)
 80134c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134c8:	601a      	str	r2, [r3, #0]
 80134ca:	f3bf 8f4f 	dsb	sy
 80134ce:	f3bf 8f6f 	isb	sy
 80134d2:	e00b      	b.n	80134ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80134d4:	2300      	movs	r3, #0
 80134d6:	2200      	movs	r2, #0
 80134d8:	2100      	movs	r1, #0
 80134da:	6938      	ldr	r0, [r7, #16]
 80134dc:	f000 fbf4 	bl	8013cc8 <xQueueGenericSend>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b01      	cmp	r3, #1
 80134e4:	d002      	beq.n	80134ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80134e6:	f06f 0302 	mvn.w	r3, #2
 80134ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80134ec:	697b      	ldr	r3, [r7, #20]
}
 80134ee:	4618      	mov	r0, r3
 80134f0:	3718      	adds	r7, #24
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	e000ed04 	.word	0xe000ed04

080134fc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b086      	sub	sp, #24
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013508:	f3ef 8305 	mrs	r3, IPSR
 801350c:	60fb      	str	r3, [r7, #12]
  return(result);
 801350e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013510:	2b00      	cmp	r3, #0
 8013512:	d003      	beq.n	801351c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8013514:	f06f 0305 	mvn.w	r3, #5
 8013518:	617b      	str	r3, [r7, #20]
 801351a:	e00e      	b.n	801353a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d103      	bne.n	801352a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8013522:	f06f 0303 	mvn.w	r3, #3
 8013526:	617b      	str	r3, [r7, #20]
 8013528:	e007      	b.n	801353a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801352a:	6938      	ldr	r0, [r7, #16]
 801352c:	f001 f9d4 	bl	80148d8 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8013530:	2300      	movs	r3, #0
 8013532:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8013534:	6938      	ldr	r0, [r7, #16]
 8013536:	f001 f859 	bl	80145ec <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801353a:	697b      	ldr	r3, [r7, #20]
}
 801353c:	4618      	mov	r0, r3
 801353e:	3718      	adds	r7, #24
 8013540:	46bd      	mov	sp, r7
 8013542:	bd80      	pop	{r7, pc}

08013544 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013544:	b580      	push	{r7, lr}
 8013546:	b08a      	sub	sp, #40	; 0x28
 8013548:	af02      	add	r7, sp, #8
 801354a:	60f8      	str	r0, [r7, #12]
 801354c:	60b9      	str	r1, [r7, #8]
 801354e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013550:	2300      	movs	r3, #0
 8013552:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013554:	f3ef 8305 	mrs	r3, IPSR
 8013558:	613b      	str	r3, [r7, #16]
  return(result);
 801355a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 801355c:	2b00      	cmp	r3, #0
 801355e:	d15f      	bne.n	8013620 <osMessageQueueNew+0xdc>
 8013560:	68fb      	ldr	r3, [r7, #12]
 8013562:	2b00      	cmp	r3, #0
 8013564:	d05c      	beq.n	8013620 <osMessageQueueNew+0xdc>
 8013566:	68bb      	ldr	r3, [r7, #8]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d059      	beq.n	8013620 <osMessageQueueNew+0xdc>
    mem = -1;
 801356c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013570:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d029      	beq.n	80135cc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	689b      	ldr	r3, [r3, #8]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d012      	beq.n	80135a6 <osMessageQueueNew+0x62>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	68db      	ldr	r3, [r3, #12]
 8013584:	2b4f      	cmp	r3, #79	; 0x4f
 8013586:	d90e      	bls.n	80135a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801358c:	2b00      	cmp	r3, #0
 801358e:	d00a      	beq.n	80135a6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	695a      	ldr	r2, [r3, #20]
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	68b9      	ldr	r1, [r7, #8]
 8013598:	fb01 f303 	mul.w	r3, r1, r3
 801359c:	429a      	cmp	r2, r3
 801359e:	d302      	bcc.n	80135a6 <osMessageQueueNew+0x62>
        mem = 1;
 80135a0:	2301      	movs	r3, #1
 80135a2:	61bb      	str	r3, [r7, #24]
 80135a4:	e014      	b.n	80135d0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	689b      	ldr	r3, [r3, #8]
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d110      	bne.n	80135d0 <osMessageQueueNew+0x8c>
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d10c      	bne.n	80135d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d108      	bne.n	80135d0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	695b      	ldr	r3, [r3, #20]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d104      	bne.n	80135d0 <osMessageQueueNew+0x8c>
          mem = 0;
 80135c6:	2300      	movs	r3, #0
 80135c8:	61bb      	str	r3, [r7, #24]
 80135ca:	e001      	b.n	80135d0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80135cc:	2300      	movs	r3, #0
 80135ce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80135d0:	69bb      	ldr	r3, [r7, #24]
 80135d2:	2b01      	cmp	r3, #1
 80135d4:	d10b      	bne.n	80135ee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	691a      	ldr	r2, [r3, #16]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	689b      	ldr	r3, [r3, #8]
 80135de:	2100      	movs	r1, #0
 80135e0:	9100      	str	r1, [sp, #0]
 80135e2:	68b9      	ldr	r1, [r7, #8]
 80135e4:	68f8      	ldr	r0, [r7, #12]
 80135e6:	f000 fa2f 	bl	8013a48 <xQueueGenericCreateStatic>
 80135ea:	61f8      	str	r0, [r7, #28]
 80135ec:	e008      	b.n	8013600 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80135ee:	69bb      	ldr	r3, [r7, #24]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d105      	bne.n	8013600 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80135f4:	2200      	movs	r2, #0
 80135f6:	68b9      	ldr	r1, [r7, #8]
 80135f8:	68f8      	ldr	r0, [r7, #12]
 80135fa:	f000 fa9d 	bl	8013b38 <xQueueGenericCreate>
 80135fe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013600:	69fb      	ldr	r3, [r7, #28]
 8013602:	2b00      	cmp	r3, #0
 8013604:	d00c      	beq.n	8013620 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d003      	beq.n	8013614 <osMessageQueueNew+0xd0>
        name = attr->name;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	681b      	ldr	r3, [r3, #0]
 8013610:	617b      	str	r3, [r7, #20]
 8013612:	e001      	b.n	8013618 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013614:	2300      	movs	r3, #0
 8013616:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8013618:	6979      	ldr	r1, [r7, #20]
 801361a:	69f8      	ldr	r0, [r7, #28]
 801361c:	f001 f932 	bl	8014884 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013620:	69fb      	ldr	r3, [r7, #28]
}
 8013622:	4618      	mov	r0, r3
 8013624:	3720      	adds	r7, #32
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 801362c:	b580      	push	{r7, lr}
 801362e:	b088      	sub	sp, #32
 8013630:	af00      	add	r7, sp, #0
 8013632:	60f8      	str	r0, [r7, #12]
 8013634:	60b9      	str	r1, [r7, #8]
 8013636:	603b      	str	r3, [r7, #0]
 8013638:	4613      	mov	r3, r2
 801363a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013640:	2300      	movs	r3, #0
 8013642:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013644:	f3ef 8305 	mrs	r3, IPSR
 8013648:	617b      	str	r3, [r7, #20]
  return(result);
 801364a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801364c:	2b00      	cmp	r3, #0
 801364e:	d028      	beq.n	80136a2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013650:	69bb      	ldr	r3, [r7, #24]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d005      	beq.n	8013662 <osMessageQueuePut+0x36>
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d002      	beq.n	8013662 <osMessageQueuePut+0x36>
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d003      	beq.n	801366a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013662:	f06f 0303 	mvn.w	r3, #3
 8013666:	61fb      	str	r3, [r7, #28]
 8013668:	e038      	b.n	80136dc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801366a:	2300      	movs	r3, #0
 801366c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801366e:	f107 0210 	add.w	r2, r7, #16
 8013672:	2300      	movs	r3, #0
 8013674:	68b9      	ldr	r1, [r7, #8]
 8013676:	69b8      	ldr	r0, [r7, #24]
 8013678:	f000 fc24 	bl	8013ec4 <xQueueGenericSendFromISR>
 801367c:	4603      	mov	r3, r0
 801367e:	2b01      	cmp	r3, #1
 8013680:	d003      	beq.n	801368a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8013682:	f06f 0302 	mvn.w	r3, #2
 8013686:	61fb      	str	r3, [r7, #28]
 8013688:	e028      	b.n	80136dc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801368a:	693b      	ldr	r3, [r7, #16]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d025      	beq.n	80136dc <osMessageQueuePut+0xb0>
 8013690:	4b15      	ldr	r3, [pc, #84]	; (80136e8 <osMessageQueuePut+0xbc>)
 8013692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013696:	601a      	str	r2, [r3, #0]
 8013698:	f3bf 8f4f 	dsb	sy
 801369c:	f3bf 8f6f 	isb	sy
 80136a0:	e01c      	b.n	80136dc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80136a2:	69bb      	ldr	r3, [r7, #24]
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d002      	beq.n	80136ae <osMessageQueuePut+0x82>
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d103      	bne.n	80136b6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80136ae:	f06f 0303 	mvn.w	r3, #3
 80136b2:	61fb      	str	r3, [r7, #28]
 80136b4:	e012      	b.n	80136dc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80136b6:	2300      	movs	r3, #0
 80136b8:	683a      	ldr	r2, [r7, #0]
 80136ba:	68b9      	ldr	r1, [r7, #8]
 80136bc:	69b8      	ldr	r0, [r7, #24]
 80136be:	f000 fb03 	bl	8013cc8 <xQueueGenericSend>
 80136c2:	4603      	mov	r3, r0
 80136c4:	2b01      	cmp	r3, #1
 80136c6:	d009      	beq.n	80136dc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80136c8:	683b      	ldr	r3, [r7, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d003      	beq.n	80136d6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80136ce:	f06f 0301 	mvn.w	r3, #1
 80136d2:	61fb      	str	r3, [r7, #28]
 80136d4:	e002      	b.n	80136dc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80136d6:	f06f 0302 	mvn.w	r3, #2
 80136da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80136dc:	69fb      	ldr	r3, [r7, #28]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3720      	adds	r7, #32
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	e000ed04 	.word	0xe000ed04

080136ec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80136ec:	b580      	push	{r7, lr}
 80136ee:	b088      	sub	sp, #32
 80136f0:	af00      	add	r7, sp, #0
 80136f2:	60f8      	str	r0, [r7, #12]
 80136f4:	60b9      	str	r1, [r7, #8]
 80136f6:	607a      	str	r2, [r7, #4]
 80136f8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80136fe:	2300      	movs	r3, #0
 8013700:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013702:	f3ef 8305 	mrs	r3, IPSR
 8013706:	617b      	str	r3, [r7, #20]
  return(result);
 8013708:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801370a:	2b00      	cmp	r3, #0
 801370c:	d028      	beq.n	8013760 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d005      	beq.n	8013720 <osMessageQueueGet+0x34>
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d002      	beq.n	8013720 <osMessageQueueGet+0x34>
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	2b00      	cmp	r3, #0
 801371e:	d003      	beq.n	8013728 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013720:	f06f 0303 	mvn.w	r3, #3
 8013724:	61fb      	str	r3, [r7, #28]
 8013726:	e037      	b.n	8013798 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013728:	2300      	movs	r3, #0
 801372a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801372c:	f107 0310 	add.w	r3, r7, #16
 8013730:	461a      	mov	r2, r3
 8013732:	68b9      	ldr	r1, [r7, #8]
 8013734:	69b8      	ldr	r0, [r7, #24]
 8013736:	f000 fed9 	bl	80144ec <xQueueReceiveFromISR>
 801373a:	4603      	mov	r3, r0
 801373c:	2b01      	cmp	r3, #1
 801373e:	d003      	beq.n	8013748 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013740:	f06f 0302 	mvn.w	r3, #2
 8013744:	61fb      	str	r3, [r7, #28]
 8013746:	e027      	b.n	8013798 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d024      	beq.n	8013798 <osMessageQueueGet+0xac>
 801374e:	4b15      	ldr	r3, [pc, #84]	; (80137a4 <osMessageQueueGet+0xb8>)
 8013750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013754:	601a      	str	r2, [r3, #0]
 8013756:	f3bf 8f4f 	dsb	sy
 801375a:	f3bf 8f6f 	isb	sy
 801375e:	e01b      	b.n	8013798 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d002      	beq.n	801376c <osMessageQueueGet+0x80>
 8013766:	68bb      	ldr	r3, [r7, #8]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d103      	bne.n	8013774 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801376c:	f06f 0303 	mvn.w	r3, #3
 8013770:	61fb      	str	r3, [r7, #28]
 8013772:	e011      	b.n	8013798 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013774:	683a      	ldr	r2, [r7, #0]
 8013776:	68b9      	ldr	r1, [r7, #8]
 8013778:	69b8      	ldr	r0, [r7, #24]
 801377a:	f000 fccb 	bl	8014114 <xQueueReceive>
 801377e:	4603      	mov	r3, r0
 8013780:	2b01      	cmp	r3, #1
 8013782:	d009      	beq.n	8013798 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013784:	683b      	ldr	r3, [r7, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d003      	beq.n	8013792 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801378a:	f06f 0301 	mvn.w	r3, #1
 801378e:	61fb      	str	r3, [r7, #28]
 8013790:	e002      	b.n	8013798 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013792:	f06f 0302 	mvn.w	r3, #2
 8013796:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013798:	69fb      	ldr	r3, [r7, #28]
}
 801379a:	4618      	mov	r0, r3
 801379c:	3720      	adds	r7, #32
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	e000ed04 	.word	0xe000ed04

080137a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80137a8:	b480      	push	{r7}
 80137aa:	b085      	sub	sp, #20
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	60f8      	str	r0, [r7, #12]
 80137b0:	60b9      	str	r1, [r7, #8]
 80137b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	4a07      	ldr	r2, [pc, #28]	; (80137d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80137b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	4a06      	ldr	r2, [pc, #24]	; (80137d8 <vApplicationGetIdleTaskMemory+0x30>)
 80137be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	2280      	movs	r2, #128	; 0x80
 80137c4:	601a      	str	r2, [r3, #0]
}
 80137c6:	bf00      	nop
 80137c8:	3714      	adds	r7, #20
 80137ca:	46bd      	mov	sp, r7
 80137cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d0:	4770      	bx	lr
 80137d2:	bf00      	nop
 80137d4:	200027f0 	.word	0x200027f0
 80137d8:	200028b0 	.word	0x200028b0

080137dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80137dc:	b480      	push	{r7}
 80137de:	b085      	sub	sp, #20
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	4a07      	ldr	r2, [pc, #28]	; (8013808 <vApplicationGetTimerTaskMemory+0x2c>)
 80137ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80137ee:	68bb      	ldr	r3, [r7, #8]
 80137f0:	4a06      	ldr	r2, [pc, #24]	; (801380c <vApplicationGetTimerTaskMemory+0x30>)
 80137f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80137fa:	601a      	str	r2, [r3, #0]
}
 80137fc:	bf00      	nop
 80137fe:	3714      	adds	r7, #20
 8013800:	46bd      	mov	sp, r7
 8013802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013806:	4770      	bx	lr
 8013808:	20002ab0 	.word	0x20002ab0
 801380c:	20002b70 	.word	0x20002b70

08013810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013810:	b480      	push	{r7}
 8013812:	b083      	sub	sp, #12
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f103 0208 	add.w	r2, r3, #8
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013828:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	f103 0208 	add.w	r2, r3, #8
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	f103 0208 	add.w	r2, r3, #8
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	2200      	movs	r2, #0
 8013842:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013844:	bf00      	nop
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384e:	4770      	bx	lr

08013850 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013850:	b480      	push	{r7}
 8013852:	b083      	sub	sp, #12
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	2200      	movs	r2, #0
 801385c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801385e:	bf00      	nop
 8013860:	370c      	adds	r7, #12
 8013862:	46bd      	mov	sp, r7
 8013864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013868:	4770      	bx	lr

0801386a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801386a:	b480      	push	{r7}
 801386c:	b085      	sub	sp, #20
 801386e:	af00      	add	r7, sp, #0
 8013870:	6078      	str	r0, [r7, #4]
 8013872:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	68fa      	ldr	r2, [r7, #12]
 801387e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	689a      	ldr	r2, [r3, #8]
 8013884:	683b      	ldr	r3, [r7, #0]
 8013886:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	689b      	ldr	r3, [r3, #8]
 801388c:	683a      	ldr	r2, [r7, #0]
 801388e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	683a      	ldr	r2, [r7, #0]
 8013894:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013896:	683b      	ldr	r3, [r7, #0]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	1c5a      	adds	r2, r3, #1
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	601a      	str	r2, [r3, #0]
}
 80138a6:	bf00      	nop
 80138a8:	3714      	adds	r7, #20
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80138b2:	b480      	push	{r7}
 80138b4:	b085      	sub	sp, #20
 80138b6:	af00      	add	r7, sp, #0
 80138b8:	6078      	str	r0, [r7, #4]
 80138ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80138bc:	683b      	ldr	r3, [r7, #0]
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80138c2:	68bb      	ldr	r3, [r7, #8]
 80138c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80138c8:	d103      	bne.n	80138d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	691b      	ldr	r3, [r3, #16]
 80138ce:	60fb      	str	r3, [r7, #12]
 80138d0:	e00c      	b.n	80138ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	3308      	adds	r3, #8
 80138d6:	60fb      	str	r3, [r7, #12]
 80138d8:	e002      	b.n	80138e0 <vListInsert+0x2e>
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	685b      	ldr	r3, [r3, #4]
 80138de:	60fb      	str	r3, [r7, #12]
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	68ba      	ldr	r2, [r7, #8]
 80138e8:	429a      	cmp	r2, r3
 80138ea:	d2f6      	bcs.n	80138da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	685a      	ldr	r2, [r3, #4]
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80138f4:	683b      	ldr	r3, [r7, #0]
 80138f6:	685b      	ldr	r3, [r3, #4]
 80138f8:	683a      	ldr	r2, [r7, #0]
 80138fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	68fa      	ldr	r2, [r7, #12]
 8013900:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	683a      	ldr	r2, [r7, #0]
 8013906:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	601a      	str	r2, [r3, #0]
}
 8013918:	bf00      	nop
 801391a:	3714      	adds	r7, #20
 801391c:	46bd      	mov	sp, r7
 801391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013922:	4770      	bx	lr

08013924 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013924:	b480      	push	{r7}
 8013926:	b085      	sub	sp, #20
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	691b      	ldr	r3, [r3, #16]
 8013930:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	685b      	ldr	r3, [r3, #4]
 8013936:	687a      	ldr	r2, [r7, #4]
 8013938:	6892      	ldr	r2, [r2, #8]
 801393a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	689b      	ldr	r3, [r3, #8]
 8013940:	687a      	ldr	r2, [r7, #4]
 8013942:	6852      	ldr	r2, [r2, #4]
 8013944:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013946:	68fb      	ldr	r3, [r7, #12]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	429a      	cmp	r2, r3
 801394e:	d103      	bne.n	8013958 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	689a      	ldr	r2, [r3, #8]
 8013954:	68fb      	ldr	r3, [r7, #12]
 8013956:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	2200      	movs	r2, #0
 801395c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	1e5a      	subs	r2, r3, #1
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
}
 801396c:	4618      	mov	r0, r3
 801396e:	3714      	adds	r7, #20
 8013970:	46bd      	mov	sp, r7
 8013972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013976:	4770      	bx	lr

08013978 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013978:	b580      	push	{r7, lr}
 801397a:	b084      	sub	sp, #16
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
 8013980:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d10a      	bne.n	80139a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013990:	f383 8811 	msr	BASEPRI, r3
 8013994:	f3bf 8f6f 	isb	sy
 8013998:	f3bf 8f4f 	dsb	sy
 801399c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801399e:	bf00      	nop
 80139a0:	e7fe      	b.n	80139a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80139a2:	f002 ffc7 	bl	8016934 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	681a      	ldr	r2, [r3, #0]
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139ae:	68f9      	ldr	r1, [r7, #12]
 80139b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139b2:	fb01 f303 	mul.w	r3, r1, r3
 80139b6:	441a      	add	r2, r3
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2200      	movs	r2, #0
 80139c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681a      	ldr	r2, [r3, #0]
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80139ca:	68fb      	ldr	r3, [r7, #12]
 80139cc:	681a      	ldr	r2, [r3, #0]
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139d2:	3b01      	subs	r3, #1
 80139d4:	68f9      	ldr	r1, [r7, #12]
 80139d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80139d8:	fb01 f303 	mul.w	r3, r1, r3
 80139dc:	441a      	add	r2, r3
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	22ff      	movs	r2, #255	; 0xff
 80139e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	22ff      	movs	r2, #255	; 0xff
 80139ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d114      	bne.n	8013a22 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	691b      	ldr	r3, [r3, #16]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d01a      	beq.n	8013a36 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	3310      	adds	r3, #16
 8013a04:	4618      	mov	r0, r3
 8013a06:	f001 fd67 	bl	80154d8 <xTaskRemoveFromEventList>
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d012      	beq.n	8013a36 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013a10:	4b0c      	ldr	r3, [pc, #48]	; (8013a44 <xQueueGenericReset+0xcc>)
 8013a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a16:	601a      	str	r2, [r3, #0]
 8013a18:	f3bf 8f4f 	dsb	sy
 8013a1c:	f3bf 8f6f 	isb	sy
 8013a20:	e009      	b.n	8013a36 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	3310      	adds	r3, #16
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7ff fef2 	bl	8013810 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	3324      	adds	r3, #36	; 0x24
 8013a30:	4618      	mov	r0, r3
 8013a32:	f7ff feed 	bl	8013810 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013a36:	f002 ffad 	bl	8016994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013a3a:	2301      	movs	r3, #1
}
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	3710      	adds	r7, #16
 8013a40:	46bd      	mov	sp, r7
 8013a42:	bd80      	pop	{r7, pc}
 8013a44:	e000ed04 	.word	0xe000ed04

08013a48 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b08e      	sub	sp, #56	; 0x38
 8013a4c:	af02      	add	r7, sp, #8
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	d10a      	bne.n	8013a72 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a6e:	bf00      	nop
 8013a70:	e7fe      	b.n	8013a70 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10a      	bne.n	8013a8e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a7c:	f383 8811 	msr	BASEPRI, r3
 8013a80:	f3bf 8f6f 	isb	sy
 8013a84:	f3bf 8f4f 	dsb	sy
 8013a88:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a8a:	bf00      	nop
 8013a8c:	e7fe      	b.n	8013a8c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d002      	beq.n	8013a9a <xQueueGenericCreateStatic+0x52>
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d001      	beq.n	8013a9e <xQueueGenericCreateStatic+0x56>
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	e000      	b.n	8013aa0 <xQueueGenericCreateStatic+0x58>
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d10a      	bne.n	8013aba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	623b      	str	r3, [r7, #32]
}
 8013ab6:	bf00      	nop
 8013ab8:	e7fe      	b.n	8013ab8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d102      	bne.n	8013ac6 <xQueueGenericCreateStatic+0x7e>
 8013ac0:	68bb      	ldr	r3, [r7, #8]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d101      	bne.n	8013aca <xQueueGenericCreateStatic+0x82>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e000      	b.n	8013acc <xQueueGenericCreateStatic+0x84>
 8013aca:	2300      	movs	r3, #0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10a      	bne.n	8013ae6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8013ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ad4:	f383 8811 	msr	BASEPRI, r3
 8013ad8:	f3bf 8f6f 	isb	sy
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	61fb      	str	r3, [r7, #28]
}
 8013ae2:	bf00      	nop
 8013ae4:	e7fe      	b.n	8013ae4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013ae6:	2350      	movs	r3, #80	; 0x50
 8013ae8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	2b50      	cmp	r3, #80	; 0x50
 8013aee:	d00a      	beq.n	8013b06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af4:	f383 8811 	msr	BASEPRI, r3
 8013af8:	f3bf 8f6f 	isb	sy
 8013afc:	f3bf 8f4f 	dsb	sy
 8013b00:	61bb      	str	r3, [r7, #24]
}
 8013b02:	bf00      	nop
 8013b04:	e7fe      	b.n	8013b04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013b06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00d      	beq.n	8013b2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b14:	2201      	movs	r2, #1
 8013b16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b20:	9300      	str	r3, [sp, #0]
 8013b22:	4613      	mov	r3, r2
 8013b24:	687a      	ldr	r2, [r7, #4]
 8013b26:	68b9      	ldr	r1, [r7, #8]
 8013b28:	68f8      	ldr	r0, [r7, #12]
 8013b2a:	f000 f83f 	bl	8013bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013b30:	4618      	mov	r0, r3
 8013b32:	3730      	adds	r7, #48	; 0x30
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}

08013b38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b08a      	sub	sp, #40	; 0x28
 8013b3c:	af02      	add	r7, sp, #8
 8013b3e:	60f8      	str	r0, [r7, #12]
 8013b40:	60b9      	str	r1, [r7, #8]
 8013b42:	4613      	mov	r3, r2
 8013b44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d10a      	bne.n	8013b62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b50:	f383 8811 	msr	BASEPRI, r3
 8013b54:	f3bf 8f6f 	isb	sy
 8013b58:	f3bf 8f4f 	dsb	sy
 8013b5c:	613b      	str	r3, [r7, #16]
}
 8013b5e:	bf00      	nop
 8013b60:	e7fe      	b.n	8013b60 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	68ba      	ldr	r2, [r7, #8]
 8013b66:	fb02 f303 	mul.w	r3, r2, r3
 8013b6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013b6c:	69fb      	ldr	r3, [r7, #28]
 8013b6e:	3350      	adds	r3, #80	; 0x50
 8013b70:	4618      	mov	r0, r3
 8013b72:	f003 f801 	bl	8016b78 <pvPortMalloc>
 8013b76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013b78:	69bb      	ldr	r3, [r7, #24]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d011      	beq.n	8013ba2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013b7e:	69bb      	ldr	r3, [r7, #24]
 8013b80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	3350      	adds	r3, #80	; 0x50
 8013b86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013b88:	69bb      	ldr	r3, [r7, #24]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013b90:	79fa      	ldrb	r2, [r7, #7]
 8013b92:	69bb      	ldr	r3, [r7, #24]
 8013b94:	9300      	str	r3, [sp, #0]
 8013b96:	4613      	mov	r3, r2
 8013b98:	697a      	ldr	r2, [r7, #20]
 8013b9a:	68b9      	ldr	r1, [r7, #8]
 8013b9c:	68f8      	ldr	r0, [r7, #12]
 8013b9e:	f000 f805 	bl	8013bac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013ba2:	69bb      	ldr	r3, [r7, #24]
	}
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	3720      	adds	r7, #32
 8013ba8:	46bd      	mov	sp, r7
 8013baa:	bd80      	pop	{r7, pc}

08013bac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	60f8      	str	r0, [r7, #12]
 8013bb4:	60b9      	str	r1, [r7, #8]
 8013bb6:	607a      	str	r2, [r7, #4]
 8013bb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d103      	bne.n	8013bc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013bc0:	69bb      	ldr	r3, [r7, #24]
 8013bc2:	69ba      	ldr	r2, [r7, #24]
 8013bc4:	601a      	str	r2, [r3, #0]
 8013bc6:	e002      	b.n	8013bce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013bc8:	69bb      	ldr	r3, [r7, #24]
 8013bca:	687a      	ldr	r2, [r7, #4]
 8013bcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013bce:	69bb      	ldr	r3, [r7, #24]
 8013bd0:	68fa      	ldr	r2, [r7, #12]
 8013bd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013bd4:	69bb      	ldr	r3, [r7, #24]
 8013bd6:	68ba      	ldr	r2, [r7, #8]
 8013bd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013bda:	2101      	movs	r1, #1
 8013bdc:	69b8      	ldr	r0, [r7, #24]
 8013bde:	f7ff fecb 	bl	8013978 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013be2:	69bb      	ldr	r3, [r7, #24]
 8013be4:	78fa      	ldrb	r2, [r7, #3]
 8013be6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013bea:	bf00      	nop
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}

08013bf2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013bf2:	b580      	push	{r7, lr}
 8013bf4:	b08a      	sub	sp, #40	; 0x28
 8013bf6:	af02      	add	r7, sp, #8
 8013bf8:	60f8      	str	r0, [r7, #12]
 8013bfa:	60b9      	str	r1, [r7, #8]
 8013bfc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d10a      	bne.n	8013c1a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8013c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c08:	f383 8811 	msr	BASEPRI, r3
 8013c0c:	f3bf 8f6f 	isb	sy
 8013c10:	f3bf 8f4f 	dsb	sy
 8013c14:	61bb      	str	r3, [r7, #24]
}
 8013c16:	bf00      	nop
 8013c18:	e7fe      	b.n	8013c18 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013c1a:	68ba      	ldr	r2, [r7, #8]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	429a      	cmp	r2, r3
 8013c20:	d90a      	bls.n	8013c38 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8013c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c26:	f383 8811 	msr	BASEPRI, r3
 8013c2a:	f3bf 8f6f 	isb	sy
 8013c2e:	f3bf 8f4f 	dsb	sy
 8013c32:	617b      	str	r3, [r7, #20]
}
 8013c34:	bf00      	nop
 8013c36:	e7fe      	b.n	8013c36 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013c38:	2302      	movs	r3, #2
 8013c3a:	9300      	str	r3, [sp, #0]
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2200      	movs	r2, #0
 8013c40:	2100      	movs	r1, #0
 8013c42:	68f8      	ldr	r0, [r7, #12]
 8013c44:	f7ff ff00 	bl	8013a48 <xQueueGenericCreateStatic>
 8013c48:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d002      	beq.n	8013c56 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	68ba      	ldr	r2, [r7, #8]
 8013c54:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013c56:	69fb      	ldr	r3, [r7, #28]
	}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	3720      	adds	r7, #32
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	bd80      	pop	{r7, pc}

08013c60 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b086      	sub	sp, #24
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d10a      	bne.n	8013c86 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8013c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c74:	f383 8811 	msr	BASEPRI, r3
 8013c78:	f3bf 8f6f 	isb	sy
 8013c7c:	f3bf 8f4f 	dsb	sy
 8013c80:	613b      	str	r3, [r7, #16]
}
 8013c82:	bf00      	nop
 8013c84:	e7fe      	b.n	8013c84 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8013c86:	683a      	ldr	r2, [r7, #0]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d90a      	bls.n	8013ca4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8013c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c92:	f383 8811 	msr	BASEPRI, r3
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	f3bf 8f4f 	dsb	sy
 8013c9e:	60fb      	str	r3, [r7, #12]
}
 8013ca0:	bf00      	nop
 8013ca2:	e7fe      	b.n	8013ca2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8013ca4:	2202      	movs	r2, #2
 8013ca6:	2100      	movs	r1, #0
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f7ff ff45 	bl	8013b38 <xQueueGenericCreate>
 8013cae:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013cb0:	697b      	ldr	r3, [r7, #20]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d002      	beq.n	8013cbc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	683a      	ldr	r2, [r7, #0]
 8013cba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013cbc:	697b      	ldr	r3, [r7, #20]
	}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3718      	adds	r7, #24
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	bd80      	pop	{r7, pc}
	...

08013cc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b08e      	sub	sp, #56	; 0x38
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	60f8      	str	r0, [r7, #12]
 8013cd0:	60b9      	str	r1, [r7, #8]
 8013cd2:	607a      	str	r2, [r7, #4]
 8013cd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d10a      	bne.n	8013cfa <xQueueGenericSend+0x32>
	__asm volatile
 8013ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce8:	f383 8811 	msr	BASEPRI, r3
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013cf6:	bf00      	nop
 8013cf8:	e7fe      	b.n	8013cf8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013cfa:	68bb      	ldr	r3, [r7, #8]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d103      	bne.n	8013d08 <xQueueGenericSend+0x40>
 8013d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d101      	bne.n	8013d0c <xQueueGenericSend+0x44>
 8013d08:	2301      	movs	r3, #1
 8013d0a:	e000      	b.n	8013d0e <xQueueGenericSend+0x46>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d10a      	bne.n	8013d28 <xQueueGenericSend+0x60>
	__asm volatile
 8013d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d16:	f383 8811 	msr	BASEPRI, r3
 8013d1a:	f3bf 8f6f 	isb	sy
 8013d1e:	f3bf 8f4f 	dsb	sy
 8013d22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013d24:	bf00      	nop
 8013d26:	e7fe      	b.n	8013d26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013d28:	683b      	ldr	r3, [r7, #0]
 8013d2a:	2b02      	cmp	r3, #2
 8013d2c:	d103      	bne.n	8013d36 <xQueueGenericSend+0x6e>
 8013d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d32:	2b01      	cmp	r3, #1
 8013d34:	d101      	bne.n	8013d3a <xQueueGenericSend+0x72>
 8013d36:	2301      	movs	r3, #1
 8013d38:	e000      	b.n	8013d3c <xQueueGenericSend+0x74>
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d10a      	bne.n	8013d56 <xQueueGenericSend+0x8e>
	__asm volatile
 8013d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d44:	f383 8811 	msr	BASEPRI, r3
 8013d48:	f3bf 8f6f 	isb	sy
 8013d4c:	f3bf 8f4f 	dsb	sy
 8013d50:	623b      	str	r3, [r7, #32]
}
 8013d52:	bf00      	nop
 8013d54:	e7fe      	b.n	8013d54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d56:	f001 fe55 	bl	8015a04 <xTaskGetSchedulerState>
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d102      	bne.n	8013d66 <xQueueGenericSend+0x9e>
 8013d60:	687b      	ldr	r3, [r7, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <xQueueGenericSend+0xa2>
 8013d66:	2301      	movs	r3, #1
 8013d68:	e000      	b.n	8013d6c <xQueueGenericSend+0xa4>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10a      	bne.n	8013d86 <xQueueGenericSend+0xbe>
	__asm volatile
 8013d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	61fb      	str	r3, [r7, #28]
}
 8013d82:	bf00      	nop
 8013d84:	e7fe      	b.n	8013d84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013d86:	f002 fdd5 	bl	8016934 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013d92:	429a      	cmp	r2, r3
 8013d94:	d302      	bcc.n	8013d9c <xQueueGenericSend+0xd4>
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	2b02      	cmp	r3, #2
 8013d9a:	d129      	bne.n	8013df0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013d9c:	683a      	ldr	r2, [r7, #0]
 8013d9e:	68b9      	ldr	r1, [r7, #8]
 8013da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013da2:	f000 fc5e 	bl	8014662 <prvCopyDataToQueue>
 8013da6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d010      	beq.n	8013dd2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db2:	3324      	adds	r3, #36	; 0x24
 8013db4:	4618      	mov	r0, r3
 8013db6:	f001 fb8f 	bl	80154d8 <xTaskRemoveFromEventList>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d013      	beq.n	8013de8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013dc0:	4b3f      	ldr	r3, [pc, #252]	; (8013ec0 <xQueueGenericSend+0x1f8>)
 8013dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dc6:	601a      	str	r2, [r3, #0]
 8013dc8:	f3bf 8f4f 	dsb	sy
 8013dcc:	f3bf 8f6f 	isb	sy
 8013dd0:	e00a      	b.n	8013de8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d007      	beq.n	8013de8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013dd8:	4b39      	ldr	r3, [pc, #228]	; (8013ec0 <xQueueGenericSend+0x1f8>)
 8013dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013dde:	601a      	str	r2, [r3, #0]
 8013de0:	f3bf 8f4f 	dsb	sy
 8013de4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013de8:	f002 fdd4 	bl	8016994 <vPortExitCritical>
				return pdPASS;
 8013dec:	2301      	movs	r3, #1
 8013dee:	e063      	b.n	8013eb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d103      	bne.n	8013dfe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013df6:	f002 fdcd 	bl	8016994 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	e05c      	b.n	8013eb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d106      	bne.n	8013e12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013e04:	f107 0314 	add.w	r3, r7, #20
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f001 fbc9 	bl	80155a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013e0e:	2301      	movs	r3, #1
 8013e10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013e12:	f002 fdbf 	bl	8016994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013e16:	f001 f887 	bl	8014f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013e1a:	f002 fd8b 	bl	8016934 <vPortEnterCritical>
 8013e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e24:	b25b      	sxtb	r3, r3
 8013e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e2a:	d103      	bne.n	8013e34 <xQueueGenericSend+0x16c>
 8013e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2e:	2200      	movs	r2, #0
 8013e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013e3a:	b25b      	sxtb	r3, r3
 8013e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e40:	d103      	bne.n	8013e4a <xQueueGenericSend+0x182>
 8013e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e44:	2200      	movs	r2, #0
 8013e46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013e4a:	f002 fda3 	bl	8016994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013e4e:	1d3a      	adds	r2, r7, #4
 8013e50:	f107 0314 	add.w	r3, r7, #20
 8013e54:	4611      	mov	r1, r2
 8013e56:	4618      	mov	r0, r3
 8013e58:	f001 fbb8 	bl	80155cc <xTaskCheckForTimeOut>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d124      	bne.n	8013eac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e64:	f000 fcf5 	bl	8014852 <prvIsQueueFull>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d018      	beq.n	8013ea0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e70:	3310      	adds	r3, #16
 8013e72:	687a      	ldr	r2, [r7, #4]
 8013e74:	4611      	mov	r1, r2
 8013e76:	4618      	mov	r0, r3
 8013e78:	f001 fade 	bl	8015438 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e7e:	f000 fc80 	bl	8014782 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013e82:	f001 f85f 	bl	8014f44 <xTaskResumeAll>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	f47f af7c 	bne.w	8013d86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013e8e:	4b0c      	ldr	r3, [pc, #48]	; (8013ec0 <xQueueGenericSend+0x1f8>)
 8013e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e94:	601a      	str	r2, [r3, #0]
 8013e96:	f3bf 8f4f 	dsb	sy
 8013e9a:	f3bf 8f6f 	isb	sy
 8013e9e:	e772      	b.n	8013d86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ea2:	f000 fc6e 	bl	8014782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013ea6:	f001 f84d 	bl	8014f44 <xTaskResumeAll>
 8013eaa:	e76c      	b.n	8013d86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013eae:	f000 fc68 	bl	8014782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013eb2:	f001 f847 	bl	8014f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013eb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	3738      	adds	r7, #56	; 0x38
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	bd80      	pop	{r7, pc}
 8013ec0:	e000ed04 	.word	0xe000ed04

08013ec4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b090      	sub	sp, #64	; 0x40
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	60f8      	str	r0, [r7, #12]
 8013ecc:	60b9      	str	r1, [r7, #8]
 8013ece:	607a      	str	r2, [r7, #4]
 8013ed0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d10a      	bne.n	8013ef2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ee0:	f383 8811 	msr	BASEPRI, r3
 8013ee4:	f3bf 8f6f 	isb	sy
 8013ee8:	f3bf 8f4f 	dsb	sy
 8013eec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013eee:	bf00      	nop
 8013ef0:	e7fe      	b.n	8013ef0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d103      	bne.n	8013f00 <xQueueGenericSendFromISR+0x3c>
 8013ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d101      	bne.n	8013f04 <xQueueGenericSendFromISR+0x40>
 8013f00:	2301      	movs	r3, #1
 8013f02:	e000      	b.n	8013f06 <xQueueGenericSendFromISR+0x42>
 8013f04:	2300      	movs	r3, #0
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	d10a      	bne.n	8013f20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f0e:	f383 8811 	msr	BASEPRI, r3
 8013f12:	f3bf 8f6f 	isb	sy
 8013f16:	f3bf 8f4f 	dsb	sy
 8013f1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013f1c:	bf00      	nop
 8013f1e:	e7fe      	b.n	8013f1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	2b02      	cmp	r3, #2
 8013f24:	d103      	bne.n	8013f2e <xQueueGenericSendFromISR+0x6a>
 8013f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f2a:	2b01      	cmp	r3, #1
 8013f2c:	d101      	bne.n	8013f32 <xQueueGenericSendFromISR+0x6e>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	e000      	b.n	8013f34 <xQueueGenericSendFromISR+0x70>
 8013f32:	2300      	movs	r3, #0
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d10a      	bne.n	8013f4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f3c:	f383 8811 	msr	BASEPRI, r3
 8013f40:	f3bf 8f6f 	isb	sy
 8013f44:	f3bf 8f4f 	dsb	sy
 8013f48:	623b      	str	r3, [r7, #32]
}
 8013f4a:	bf00      	nop
 8013f4c:	e7fe      	b.n	8013f4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013f4e:	f002 fdd3 	bl	8016af8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013f52:	f3ef 8211 	mrs	r2, BASEPRI
 8013f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f5a:	f383 8811 	msr	BASEPRI, r3
 8013f5e:	f3bf 8f6f 	isb	sy
 8013f62:	f3bf 8f4f 	dsb	sy
 8013f66:	61fa      	str	r2, [r7, #28]
 8013f68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013f6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013f6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d302      	bcc.n	8013f80 <xQueueGenericSendFromISR+0xbc>
 8013f7a:	683b      	ldr	r3, [r7, #0]
 8013f7c:	2b02      	cmp	r3, #2
 8013f7e:	d12f      	bne.n	8013fe0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013f90:	683a      	ldr	r2, [r7, #0]
 8013f92:	68b9      	ldr	r1, [r7, #8]
 8013f94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f96:	f000 fb64 	bl	8014662 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013f9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013fa2:	d112      	bne.n	8013fca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d016      	beq.n	8013fda <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fae:	3324      	adds	r3, #36	; 0x24
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f001 fa91 	bl	80154d8 <xTaskRemoveFromEventList>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d00e      	beq.n	8013fda <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d00b      	beq.n	8013fda <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	2201      	movs	r2, #1
 8013fc6:	601a      	str	r2, [r3, #0]
 8013fc8:	e007      	b.n	8013fda <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013fce:	3301      	adds	r3, #1
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	b25a      	sxtb	r2, r3
 8013fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013fda:	2301      	movs	r3, #1
 8013fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013fde:	e001      	b.n	8013fe4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fe6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013fe8:	697b      	ldr	r3, [r7, #20]
 8013fea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013fee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	3740      	adds	r7, #64	; 0x40
 8013ff6:	46bd      	mov	sp, r7
 8013ff8:	bd80      	pop	{r7, pc}

08013ffa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013ffa:	b580      	push	{r7, lr}
 8013ffc:	b08e      	sub	sp, #56	; 0x38
 8013ffe:	af00      	add	r7, sp, #0
 8014000:	6078      	str	r0, [r7, #4]
 8014002:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801400a:	2b00      	cmp	r3, #0
 801400c:	d10a      	bne.n	8014024 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801400e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014012:	f383 8811 	msr	BASEPRI, r3
 8014016:	f3bf 8f6f 	isb	sy
 801401a:	f3bf 8f4f 	dsb	sy
 801401e:	623b      	str	r3, [r7, #32]
}
 8014020:	bf00      	nop
 8014022:	e7fe      	b.n	8014022 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014028:	2b00      	cmp	r3, #0
 801402a:	d00a      	beq.n	8014042 <xQueueGiveFromISR+0x48>
	__asm volatile
 801402c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014030:	f383 8811 	msr	BASEPRI, r3
 8014034:	f3bf 8f6f 	isb	sy
 8014038:	f3bf 8f4f 	dsb	sy
 801403c:	61fb      	str	r3, [r7, #28]
}
 801403e:	bf00      	nop
 8014040:	e7fe      	b.n	8014040 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d103      	bne.n	8014052 <xQueueGiveFromISR+0x58>
 801404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d101      	bne.n	8014056 <xQueueGiveFromISR+0x5c>
 8014052:	2301      	movs	r3, #1
 8014054:	e000      	b.n	8014058 <xQueueGiveFromISR+0x5e>
 8014056:	2300      	movs	r3, #0
 8014058:	2b00      	cmp	r3, #0
 801405a:	d10a      	bne.n	8014072 <xQueueGiveFromISR+0x78>
	__asm volatile
 801405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014060:	f383 8811 	msr	BASEPRI, r3
 8014064:	f3bf 8f6f 	isb	sy
 8014068:	f3bf 8f4f 	dsb	sy
 801406c:	61bb      	str	r3, [r7, #24]
}
 801406e:	bf00      	nop
 8014070:	e7fe      	b.n	8014070 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014072:	f002 fd41 	bl	8016af8 <vPortValidateInterruptPriority>
	__asm volatile
 8014076:	f3ef 8211 	mrs	r2, BASEPRI
 801407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801407e:	f383 8811 	msr	BASEPRI, r3
 8014082:	f3bf 8f6f 	isb	sy
 8014086:	f3bf 8f4f 	dsb	sy
 801408a:	617a      	str	r2, [r7, #20]
 801408c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801408e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014090:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014096:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8014098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801409c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801409e:	429a      	cmp	r2, r3
 80140a0:	d22b      	bcs.n	80140fa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80140a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80140a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80140ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ae:	1c5a      	adds	r2, r3, #1
 80140b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80140b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80140b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140bc:	d112      	bne.n	80140e4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80140be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d016      	beq.n	80140f4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80140c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c8:	3324      	adds	r3, #36	; 0x24
 80140ca:	4618      	mov	r0, r3
 80140cc:	f001 fa04 	bl	80154d8 <xTaskRemoveFromEventList>
 80140d0:	4603      	mov	r3, r0
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d00e      	beq.n	80140f4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d00b      	beq.n	80140f4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	2201      	movs	r2, #1
 80140e0:	601a      	str	r2, [r3, #0]
 80140e2:	e007      	b.n	80140f4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80140e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140e8:	3301      	adds	r3, #1
 80140ea:	b2db      	uxtb	r3, r3
 80140ec:	b25a      	sxtb	r2, r3
 80140ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80140f4:	2301      	movs	r3, #1
 80140f6:	637b      	str	r3, [r7, #52]	; 0x34
 80140f8:	e001      	b.n	80140fe <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80140fa:	2300      	movs	r3, #0
 80140fc:	637b      	str	r3, [r7, #52]	; 0x34
 80140fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014100:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	f383 8811 	msr	BASEPRI, r3
}
 8014108:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801410a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801410c:	4618      	mov	r0, r3
 801410e:	3738      	adds	r7, #56	; 0x38
 8014110:	46bd      	mov	sp, r7
 8014112:	bd80      	pop	{r7, pc}

08014114 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b08c      	sub	sp, #48	; 0x30
 8014118:	af00      	add	r7, sp, #0
 801411a:	60f8      	str	r0, [r7, #12]
 801411c:	60b9      	str	r1, [r7, #8]
 801411e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014120:	2300      	movs	r3, #0
 8014122:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412a:	2b00      	cmp	r3, #0
 801412c:	d10a      	bne.n	8014144 <xQueueReceive+0x30>
	__asm volatile
 801412e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014132:	f383 8811 	msr	BASEPRI, r3
 8014136:	f3bf 8f6f 	isb	sy
 801413a:	f3bf 8f4f 	dsb	sy
 801413e:	623b      	str	r3, [r7, #32]
}
 8014140:	bf00      	nop
 8014142:	e7fe      	b.n	8014142 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d103      	bne.n	8014152 <xQueueReceive+0x3e>
 801414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801414e:	2b00      	cmp	r3, #0
 8014150:	d101      	bne.n	8014156 <xQueueReceive+0x42>
 8014152:	2301      	movs	r3, #1
 8014154:	e000      	b.n	8014158 <xQueueReceive+0x44>
 8014156:	2300      	movs	r3, #0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d10a      	bne.n	8014172 <xQueueReceive+0x5e>
	__asm volatile
 801415c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014160:	f383 8811 	msr	BASEPRI, r3
 8014164:	f3bf 8f6f 	isb	sy
 8014168:	f3bf 8f4f 	dsb	sy
 801416c:	61fb      	str	r3, [r7, #28]
}
 801416e:	bf00      	nop
 8014170:	e7fe      	b.n	8014170 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014172:	f001 fc47 	bl	8015a04 <xTaskGetSchedulerState>
 8014176:	4603      	mov	r3, r0
 8014178:	2b00      	cmp	r3, #0
 801417a:	d102      	bne.n	8014182 <xQueueReceive+0x6e>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	2b00      	cmp	r3, #0
 8014180:	d101      	bne.n	8014186 <xQueueReceive+0x72>
 8014182:	2301      	movs	r3, #1
 8014184:	e000      	b.n	8014188 <xQueueReceive+0x74>
 8014186:	2300      	movs	r3, #0
 8014188:	2b00      	cmp	r3, #0
 801418a:	d10a      	bne.n	80141a2 <xQueueReceive+0x8e>
	__asm volatile
 801418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014190:	f383 8811 	msr	BASEPRI, r3
 8014194:	f3bf 8f6f 	isb	sy
 8014198:	f3bf 8f4f 	dsb	sy
 801419c:	61bb      	str	r3, [r7, #24]
}
 801419e:	bf00      	nop
 80141a0:	e7fe      	b.n	80141a0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141a2:	f002 fbc7 	bl	8016934 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80141a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80141aa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d01f      	beq.n	80141f2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80141b2:	68b9      	ldr	r1, [r7, #8]
 80141b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80141b6:	f000 fabe 	bl	8014736 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80141ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141bc:	1e5a      	subs	r2, r3, #1
 80141be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80141c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c4:	691b      	ldr	r3, [r3, #16]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00f      	beq.n	80141ea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80141ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141cc:	3310      	adds	r3, #16
 80141ce:	4618      	mov	r0, r3
 80141d0:	f001 f982 	bl	80154d8 <xTaskRemoveFromEventList>
 80141d4:	4603      	mov	r3, r0
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d007      	beq.n	80141ea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80141da:	4b3d      	ldr	r3, [pc, #244]	; (80142d0 <xQueueReceive+0x1bc>)
 80141dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	f3bf 8f4f 	dsb	sy
 80141e6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80141ea:	f002 fbd3 	bl	8016994 <vPortExitCritical>
				return pdPASS;
 80141ee:	2301      	movs	r3, #1
 80141f0:	e069      	b.n	80142c6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d103      	bne.n	8014200 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80141f8:	f002 fbcc 	bl	8016994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80141fc:	2300      	movs	r3, #0
 80141fe:	e062      	b.n	80142c6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014202:	2b00      	cmp	r3, #0
 8014204:	d106      	bne.n	8014214 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014206:	f107 0310 	add.w	r3, r7, #16
 801420a:	4618      	mov	r0, r3
 801420c:	f001 f9c8 	bl	80155a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014210:	2301      	movs	r3, #1
 8014212:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014214:	f002 fbbe 	bl	8016994 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014218:	f000 fe86 	bl	8014f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801421c:	f002 fb8a 	bl	8016934 <vPortEnterCritical>
 8014220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014226:	b25b      	sxtb	r3, r3
 8014228:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801422c:	d103      	bne.n	8014236 <xQueueReceive+0x122>
 801422e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014230:	2200      	movs	r2, #0
 8014232:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014238:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801423c:	b25b      	sxtb	r3, r3
 801423e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014242:	d103      	bne.n	801424c <xQueueReceive+0x138>
 8014244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014246:	2200      	movs	r2, #0
 8014248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801424c:	f002 fba2 	bl	8016994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014250:	1d3a      	adds	r2, r7, #4
 8014252:	f107 0310 	add.w	r3, r7, #16
 8014256:	4611      	mov	r1, r2
 8014258:	4618      	mov	r0, r3
 801425a:	f001 f9b7 	bl	80155cc <xTaskCheckForTimeOut>
 801425e:	4603      	mov	r3, r0
 8014260:	2b00      	cmp	r3, #0
 8014262:	d123      	bne.n	80142ac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014266:	f000 fade 	bl	8014826 <prvIsQueueEmpty>
 801426a:	4603      	mov	r3, r0
 801426c:	2b00      	cmp	r3, #0
 801426e:	d017      	beq.n	80142a0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014272:	3324      	adds	r3, #36	; 0x24
 8014274:	687a      	ldr	r2, [r7, #4]
 8014276:	4611      	mov	r1, r2
 8014278:	4618      	mov	r0, r3
 801427a:	f001 f8dd 	bl	8015438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801427e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014280:	f000 fa7f 	bl	8014782 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014284:	f000 fe5e 	bl	8014f44 <xTaskResumeAll>
 8014288:	4603      	mov	r3, r0
 801428a:	2b00      	cmp	r3, #0
 801428c:	d189      	bne.n	80141a2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801428e:	4b10      	ldr	r3, [pc, #64]	; (80142d0 <xQueueReceive+0x1bc>)
 8014290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014294:	601a      	str	r2, [r3, #0]
 8014296:	f3bf 8f4f 	dsb	sy
 801429a:	f3bf 8f6f 	isb	sy
 801429e:	e780      	b.n	80141a2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80142a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142a2:	f000 fa6e 	bl	8014782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142a6:	f000 fe4d 	bl	8014f44 <xTaskResumeAll>
 80142aa:	e77a      	b.n	80141a2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80142ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142ae:	f000 fa68 	bl	8014782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142b2:	f000 fe47 	bl	8014f44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80142b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80142b8:	f000 fab5 	bl	8014826 <prvIsQueueEmpty>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	f43f af6f 	beq.w	80141a2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80142c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	3730      	adds	r7, #48	; 0x30
 80142ca:	46bd      	mov	sp, r7
 80142cc:	bd80      	pop	{r7, pc}
 80142ce:	bf00      	nop
 80142d0:	e000ed04 	.word	0xe000ed04

080142d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b08e      	sub	sp, #56	; 0x38
 80142d8:	af00      	add	r7, sp, #0
 80142da:	6078      	str	r0, [r7, #4]
 80142dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80142de:	2300      	movs	r3, #0
 80142e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80142e6:	2300      	movs	r3, #0
 80142e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80142ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d10a      	bne.n	8014306 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80142f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f4:	f383 8811 	msr	BASEPRI, r3
 80142f8:	f3bf 8f6f 	isb	sy
 80142fc:	f3bf 8f4f 	dsb	sy
 8014300:	623b      	str	r3, [r7, #32]
}
 8014302:	bf00      	nop
 8014304:	e7fe      	b.n	8014304 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801430a:	2b00      	cmp	r3, #0
 801430c:	d00a      	beq.n	8014324 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	61fb      	str	r3, [r7, #28]
}
 8014320:	bf00      	nop
 8014322:	e7fe      	b.n	8014322 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014324:	f001 fb6e 	bl	8015a04 <xTaskGetSchedulerState>
 8014328:	4603      	mov	r3, r0
 801432a:	2b00      	cmp	r3, #0
 801432c:	d102      	bne.n	8014334 <xQueueSemaphoreTake+0x60>
 801432e:	683b      	ldr	r3, [r7, #0]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d101      	bne.n	8014338 <xQueueSemaphoreTake+0x64>
 8014334:	2301      	movs	r3, #1
 8014336:	e000      	b.n	801433a <xQueueSemaphoreTake+0x66>
 8014338:	2300      	movs	r3, #0
 801433a:	2b00      	cmp	r3, #0
 801433c:	d10a      	bne.n	8014354 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014342:	f383 8811 	msr	BASEPRI, r3
 8014346:	f3bf 8f6f 	isb	sy
 801434a:	f3bf 8f4f 	dsb	sy
 801434e:	61bb      	str	r3, [r7, #24]
}
 8014350:	bf00      	nop
 8014352:	e7fe      	b.n	8014352 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014354:	f002 faee 	bl	8016934 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801435c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014360:	2b00      	cmp	r3, #0
 8014362:	d024      	beq.n	80143ae <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014366:	1e5a      	subs	r2, r3, #1
 8014368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d104      	bne.n	801437e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014374:	f001 fdfc 	bl	8015f70 <pvTaskIncrementMutexHeldCount>
 8014378:	4602      	mov	r2, r0
 801437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801437c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801437e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014380:	691b      	ldr	r3, [r3, #16]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00f      	beq.n	80143a6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014388:	3310      	adds	r3, #16
 801438a:	4618      	mov	r0, r3
 801438c:	f001 f8a4 	bl	80154d8 <xTaskRemoveFromEventList>
 8014390:	4603      	mov	r3, r0
 8014392:	2b00      	cmp	r3, #0
 8014394:	d007      	beq.n	80143a6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014396:	4b54      	ldr	r3, [pc, #336]	; (80144e8 <xQueueSemaphoreTake+0x214>)
 8014398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801439c:	601a      	str	r2, [r3, #0]
 801439e:	f3bf 8f4f 	dsb	sy
 80143a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80143a6:	f002 faf5 	bl	8016994 <vPortExitCritical>
				return pdPASS;
 80143aa:	2301      	movs	r3, #1
 80143ac:	e097      	b.n	80144de <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80143ae:	683b      	ldr	r3, [r7, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d111      	bne.n	80143d8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80143b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d00a      	beq.n	80143d0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80143ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143be:	f383 8811 	msr	BASEPRI, r3
 80143c2:	f3bf 8f6f 	isb	sy
 80143c6:	f3bf 8f4f 	dsb	sy
 80143ca:	617b      	str	r3, [r7, #20]
}
 80143cc:	bf00      	nop
 80143ce:	e7fe      	b.n	80143ce <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80143d0:	f002 fae0 	bl	8016994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80143d4:	2300      	movs	r3, #0
 80143d6:	e082      	b.n	80144de <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80143d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80143da:	2b00      	cmp	r3, #0
 80143dc:	d106      	bne.n	80143ec <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80143de:	f107 030c 	add.w	r3, r7, #12
 80143e2:	4618      	mov	r0, r3
 80143e4:	f001 f8dc 	bl	80155a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80143e8:	2301      	movs	r3, #1
 80143ea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80143ec:	f002 fad2 	bl	8016994 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80143f0:	f000 fd9a 	bl	8014f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80143f4:	f002 fa9e 	bl	8016934 <vPortEnterCritical>
 80143f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80143fe:	b25b      	sxtb	r3, r3
 8014400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014404:	d103      	bne.n	801440e <xQueueSemaphoreTake+0x13a>
 8014406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014408:	2200      	movs	r2, #0
 801440a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801440e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014414:	b25b      	sxtb	r3, r3
 8014416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801441a:	d103      	bne.n	8014424 <xQueueSemaphoreTake+0x150>
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	2200      	movs	r2, #0
 8014420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014424:	f002 fab6 	bl	8016994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014428:	463a      	mov	r2, r7
 801442a:	f107 030c 	add.w	r3, r7, #12
 801442e:	4611      	mov	r1, r2
 8014430:	4618      	mov	r0, r3
 8014432:	f001 f8cb 	bl	80155cc <xTaskCheckForTimeOut>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d132      	bne.n	80144a2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801443c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801443e:	f000 f9f2 	bl	8014826 <prvIsQueueEmpty>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d026      	beq.n	8014496 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	2b00      	cmp	r3, #0
 801444e:	d109      	bne.n	8014464 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8014450:	f002 fa70 	bl	8016934 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014456:	689b      	ldr	r3, [r3, #8]
 8014458:	4618      	mov	r0, r3
 801445a:	f001 faf1 	bl	8015a40 <xTaskPriorityInherit>
 801445e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014460:	f002 fa98 	bl	8016994 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014466:	3324      	adds	r3, #36	; 0x24
 8014468:	683a      	ldr	r2, [r7, #0]
 801446a:	4611      	mov	r1, r2
 801446c:	4618      	mov	r0, r3
 801446e:	f000 ffe3 	bl	8015438 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014472:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014474:	f000 f985 	bl	8014782 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014478:	f000 fd64 	bl	8014f44 <xTaskResumeAll>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	f47f af68 	bne.w	8014354 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8014484:	4b18      	ldr	r3, [pc, #96]	; (80144e8 <xQueueSemaphoreTake+0x214>)
 8014486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801448a:	601a      	str	r2, [r3, #0]
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	f3bf 8f6f 	isb	sy
 8014494:	e75e      	b.n	8014354 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014496:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014498:	f000 f973 	bl	8014782 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801449c:	f000 fd52 	bl	8014f44 <xTaskResumeAll>
 80144a0:	e758      	b.n	8014354 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80144a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144a4:	f000 f96d 	bl	8014782 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80144a8:	f000 fd4c 	bl	8014f44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80144ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144ae:	f000 f9ba 	bl	8014826 <prvIsQueueEmpty>
 80144b2:	4603      	mov	r3, r0
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	f43f af4d 	beq.w	8014354 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80144ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d00d      	beq.n	80144dc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80144c0:	f002 fa38 	bl	8016934 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80144c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144c6:	f000 f8b4 	bl	8014632 <prvGetDisinheritPriorityAfterTimeout>
 80144ca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80144cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ce:	689b      	ldr	r3, [r3, #8]
 80144d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80144d2:	4618      	mov	r0, r3
 80144d4:	f001 fb8a 	bl	8015bec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80144d8:	f002 fa5c 	bl	8016994 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80144dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80144de:	4618      	mov	r0, r3
 80144e0:	3738      	adds	r7, #56	; 0x38
 80144e2:	46bd      	mov	sp, r7
 80144e4:	bd80      	pop	{r7, pc}
 80144e6:	bf00      	nop
 80144e8:	e000ed04 	.word	0xe000ed04

080144ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b08e      	sub	sp, #56	; 0x38
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	60f8      	str	r0, [r7, #12]
 80144f4:	60b9      	str	r1, [r7, #8]
 80144f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80144fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d10a      	bne.n	8014518 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014506:	f383 8811 	msr	BASEPRI, r3
 801450a:	f3bf 8f6f 	isb	sy
 801450e:	f3bf 8f4f 	dsb	sy
 8014512:	623b      	str	r3, [r7, #32]
}
 8014514:	bf00      	nop
 8014516:	e7fe      	b.n	8014516 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014518:	68bb      	ldr	r3, [r7, #8]
 801451a:	2b00      	cmp	r3, #0
 801451c:	d103      	bne.n	8014526 <xQueueReceiveFromISR+0x3a>
 801451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014522:	2b00      	cmp	r3, #0
 8014524:	d101      	bne.n	801452a <xQueueReceiveFromISR+0x3e>
 8014526:	2301      	movs	r3, #1
 8014528:	e000      	b.n	801452c <xQueueReceiveFromISR+0x40>
 801452a:	2300      	movs	r3, #0
 801452c:	2b00      	cmp	r3, #0
 801452e:	d10a      	bne.n	8014546 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014534:	f383 8811 	msr	BASEPRI, r3
 8014538:	f3bf 8f6f 	isb	sy
 801453c:	f3bf 8f4f 	dsb	sy
 8014540:	61fb      	str	r3, [r7, #28]
}
 8014542:	bf00      	nop
 8014544:	e7fe      	b.n	8014544 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014546:	f002 fad7 	bl	8016af8 <vPortValidateInterruptPriority>
	__asm volatile
 801454a:	f3ef 8211 	mrs	r2, BASEPRI
 801454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014552:	f383 8811 	msr	BASEPRI, r3
 8014556:	f3bf 8f6f 	isb	sy
 801455a:	f3bf 8f4f 	dsb	sy
 801455e:	61ba      	str	r2, [r7, #24]
 8014560:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014562:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014564:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801456a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801456e:	2b00      	cmp	r3, #0
 8014570:	d02f      	beq.n	80145d2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014574:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014578:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801457c:	68b9      	ldr	r1, [r7, #8]
 801457e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014580:	f000 f8d9 	bl	8014736 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014586:	1e5a      	subs	r2, r3, #1
 8014588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801458a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801458c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014594:	d112      	bne.n	80145bc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014598:	691b      	ldr	r3, [r3, #16]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d016      	beq.n	80145cc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145a0:	3310      	adds	r3, #16
 80145a2:	4618      	mov	r0, r3
 80145a4:	f000 ff98 	bl	80154d8 <xTaskRemoveFromEventList>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d00e      	beq.n	80145cc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d00b      	beq.n	80145cc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2201      	movs	r2, #1
 80145b8:	601a      	str	r2, [r3, #0]
 80145ba:	e007      	b.n	80145cc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80145bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145c0:	3301      	adds	r3, #1
 80145c2:	b2db      	uxtb	r3, r3
 80145c4:	b25a      	sxtb	r2, r3
 80145c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80145cc:	2301      	movs	r3, #1
 80145ce:	637b      	str	r3, [r7, #52]	; 0x34
 80145d0:	e001      	b.n	80145d6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80145d2:	2300      	movs	r3, #0
 80145d4:	637b      	str	r3, [r7, #52]	; 0x34
 80145d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	f383 8811 	msr	BASEPRI, r3
}
 80145e0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80145e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80145e4:	4618      	mov	r0, r3
 80145e6:	3738      	adds	r7, #56	; 0x38
 80145e8:	46bd      	mov	sp, r7
 80145ea:	bd80      	pop	{r7, pc}

080145ec <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80145ec:	b580      	push	{r7, lr}
 80145ee:	b084      	sub	sp, #16
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d10a      	bne.n	8014614 <vQueueDelete+0x28>
	__asm volatile
 80145fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014602:	f383 8811 	msr	BASEPRI, r3
 8014606:	f3bf 8f6f 	isb	sy
 801460a:	f3bf 8f4f 	dsb	sy
 801460e:	60bb      	str	r3, [r7, #8]
}
 8014610:	bf00      	nop
 8014612:	e7fe      	b.n	8014612 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014614:	68f8      	ldr	r0, [r7, #12]
 8014616:	f000 f95f 	bl	80148d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014620:	2b00      	cmp	r3, #0
 8014622:	d102      	bne.n	801462a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8014624:	68f8      	ldr	r0, [r7, #12]
 8014626:	f002 fb73 	bl	8016d10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801462a:	bf00      	nop
 801462c:	3710      	adds	r7, #16
 801462e:	46bd      	mov	sp, r7
 8014630:	bd80      	pop	{r7, pc}

08014632 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014632:	b480      	push	{r7}
 8014634:	b085      	sub	sp, #20
 8014636:	af00      	add	r7, sp, #0
 8014638:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801463e:	2b00      	cmp	r3, #0
 8014640:	d006      	beq.n	8014650 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801464c:	60fb      	str	r3, [r7, #12]
 801464e:	e001      	b.n	8014654 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014650:	2300      	movs	r3, #0
 8014652:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014654:	68fb      	ldr	r3, [r7, #12]
	}
 8014656:	4618      	mov	r0, r3
 8014658:	3714      	adds	r7, #20
 801465a:	46bd      	mov	sp, r7
 801465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014660:	4770      	bx	lr

08014662 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014662:	b580      	push	{r7, lr}
 8014664:	b086      	sub	sp, #24
 8014666:	af00      	add	r7, sp, #0
 8014668:	60f8      	str	r0, [r7, #12]
 801466a:	60b9      	str	r1, [r7, #8]
 801466c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801466e:	2300      	movs	r3, #0
 8014670:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014676:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801467c:	2b00      	cmp	r3, #0
 801467e:	d10d      	bne.n	801469c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d14d      	bne.n	8014724 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	689b      	ldr	r3, [r3, #8]
 801468c:	4618      	mov	r0, r3
 801468e:	f001 fa3f 	bl	8015b10 <xTaskPriorityDisinherit>
 8014692:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	2200      	movs	r2, #0
 8014698:	609a      	str	r2, [r3, #8]
 801469a:	e043      	b.n	8014724 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d119      	bne.n	80146d6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	6858      	ldr	r0, [r3, #4]
 80146a6:	68fb      	ldr	r3, [r7, #12]
 80146a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146aa:	461a      	mov	r2, r3
 80146ac:	68b9      	ldr	r1, [r7, #8]
 80146ae:	f003 facf 	bl	8017c50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	685a      	ldr	r2, [r3, #4]
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ba:	441a      	add	r2, r3
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	685a      	ldr	r2, [r3, #4]
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	429a      	cmp	r2, r3
 80146ca:	d32b      	bcc.n	8014724 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	681a      	ldr	r2, [r3, #0]
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	605a      	str	r2, [r3, #4]
 80146d4:	e026      	b.n	8014724 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	68d8      	ldr	r0, [r3, #12]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146de:	461a      	mov	r2, r3
 80146e0:	68b9      	ldr	r1, [r7, #8]
 80146e2:	f003 fab5 	bl	8017c50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	68da      	ldr	r2, [r3, #12]
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ee:	425b      	negs	r3, r3
 80146f0:	441a      	add	r2, r3
 80146f2:	68fb      	ldr	r3, [r7, #12]
 80146f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	68da      	ldr	r2, [r3, #12]
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	681b      	ldr	r3, [r3, #0]
 80146fe:	429a      	cmp	r2, r3
 8014700:	d207      	bcs.n	8014712 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	689a      	ldr	r2, [r3, #8]
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801470a:	425b      	negs	r3, r3
 801470c:	441a      	add	r2, r3
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	2b02      	cmp	r3, #2
 8014716:	d105      	bne.n	8014724 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d002      	beq.n	8014724 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801471e:	693b      	ldr	r3, [r7, #16]
 8014720:	3b01      	subs	r3, #1
 8014722:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014724:	693b      	ldr	r3, [r7, #16]
 8014726:	1c5a      	adds	r2, r3, #1
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801472c:	697b      	ldr	r3, [r7, #20]
}
 801472e:	4618      	mov	r0, r3
 8014730:	3718      	adds	r7, #24
 8014732:	46bd      	mov	sp, r7
 8014734:	bd80      	pop	{r7, pc}

08014736 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014736:	b580      	push	{r7, lr}
 8014738:	b082      	sub	sp, #8
 801473a:	af00      	add	r7, sp, #0
 801473c:	6078      	str	r0, [r7, #4]
 801473e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014744:	2b00      	cmp	r3, #0
 8014746:	d018      	beq.n	801477a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	68da      	ldr	r2, [r3, #12]
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014750:	441a      	add	r2, r3
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	68da      	ldr	r2, [r3, #12]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	689b      	ldr	r3, [r3, #8]
 801475e:	429a      	cmp	r2, r3
 8014760:	d303      	bcc.n	801476a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	681a      	ldr	r2, [r3, #0]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	68d9      	ldr	r1, [r3, #12]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014772:	461a      	mov	r2, r3
 8014774:	6838      	ldr	r0, [r7, #0]
 8014776:	f003 fa6b 	bl	8017c50 <memcpy>
	}
}
 801477a:	bf00      	nop
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}

08014782 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014782:	b580      	push	{r7, lr}
 8014784:	b084      	sub	sp, #16
 8014786:	af00      	add	r7, sp, #0
 8014788:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801478a:	f002 f8d3 	bl	8016934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014794:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014796:	e011      	b.n	80147bc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801479c:	2b00      	cmp	r3, #0
 801479e:	d012      	beq.n	80147c6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	3324      	adds	r3, #36	; 0x24
 80147a4:	4618      	mov	r0, r3
 80147a6:	f000 fe97 	bl	80154d8 <xTaskRemoveFromEventList>
 80147aa:	4603      	mov	r3, r0
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d001      	beq.n	80147b4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80147b0:	f000 ff6e 	bl	8015690 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80147b4:	7bfb      	ldrb	r3, [r7, #15]
 80147b6:	3b01      	subs	r3, #1
 80147b8:	b2db      	uxtb	r3, r3
 80147ba:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80147bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	dce9      	bgt.n	8014798 <prvUnlockQueue+0x16>
 80147c4:	e000      	b.n	80147c8 <prvUnlockQueue+0x46>
					break;
 80147c6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	22ff      	movs	r2, #255	; 0xff
 80147cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80147d0:	f002 f8e0 	bl	8016994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80147d4:	f002 f8ae 	bl	8016934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80147de:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80147e0:	e011      	b.n	8014806 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	691b      	ldr	r3, [r3, #16]
 80147e6:	2b00      	cmp	r3, #0
 80147e8:	d012      	beq.n	8014810 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	3310      	adds	r3, #16
 80147ee:	4618      	mov	r0, r3
 80147f0:	f000 fe72 	bl	80154d8 <xTaskRemoveFromEventList>
 80147f4:	4603      	mov	r3, r0
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d001      	beq.n	80147fe <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80147fa:	f000 ff49 	bl	8015690 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80147fe:	7bbb      	ldrb	r3, [r7, #14]
 8014800:	3b01      	subs	r3, #1
 8014802:	b2db      	uxtb	r3, r3
 8014804:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801480a:	2b00      	cmp	r3, #0
 801480c:	dce9      	bgt.n	80147e2 <prvUnlockQueue+0x60>
 801480e:	e000      	b.n	8014812 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014810:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	22ff      	movs	r2, #255	; 0xff
 8014816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801481a:	f002 f8bb 	bl	8016994 <vPortExitCritical>
}
 801481e:	bf00      	nop
 8014820:	3710      	adds	r7, #16
 8014822:	46bd      	mov	sp, r7
 8014824:	bd80      	pop	{r7, pc}

08014826 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014826:	b580      	push	{r7, lr}
 8014828:	b084      	sub	sp, #16
 801482a:	af00      	add	r7, sp, #0
 801482c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801482e:	f002 f881 	bl	8016934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014836:	2b00      	cmp	r3, #0
 8014838:	d102      	bne.n	8014840 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801483a:	2301      	movs	r3, #1
 801483c:	60fb      	str	r3, [r7, #12]
 801483e:	e001      	b.n	8014844 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014840:	2300      	movs	r3, #0
 8014842:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014844:	f002 f8a6 	bl	8016994 <vPortExitCritical>

	return xReturn;
 8014848:	68fb      	ldr	r3, [r7, #12]
}
 801484a:	4618      	mov	r0, r3
 801484c:	3710      	adds	r7, #16
 801484e:	46bd      	mov	sp, r7
 8014850:	bd80      	pop	{r7, pc}

08014852 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014852:	b580      	push	{r7, lr}
 8014854:	b084      	sub	sp, #16
 8014856:	af00      	add	r7, sp, #0
 8014858:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801485a:	f002 f86b 	bl	8016934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014866:	429a      	cmp	r2, r3
 8014868:	d102      	bne.n	8014870 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801486a:	2301      	movs	r3, #1
 801486c:	60fb      	str	r3, [r7, #12]
 801486e:	e001      	b.n	8014874 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014870:	2300      	movs	r3, #0
 8014872:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014874:	f002 f88e 	bl	8016994 <vPortExitCritical>

	return xReturn;
 8014878:	68fb      	ldr	r3, [r7, #12]
}
 801487a:	4618      	mov	r0, r3
 801487c:	3710      	adds	r7, #16
 801487e:	46bd      	mov	sp, r7
 8014880:	bd80      	pop	{r7, pc}
	...

08014884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014884:	b480      	push	{r7}
 8014886:	b085      	sub	sp, #20
 8014888:	af00      	add	r7, sp, #0
 801488a:	6078      	str	r0, [r7, #4]
 801488c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801488e:	2300      	movs	r3, #0
 8014890:	60fb      	str	r3, [r7, #12]
 8014892:	e014      	b.n	80148be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014894:	4a0f      	ldr	r2, [pc, #60]	; (80148d4 <vQueueAddToRegistry+0x50>)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d10b      	bne.n	80148b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80148a0:	490c      	ldr	r1, [pc, #48]	; (80148d4 <vQueueAddToRegistry+0x50>)
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	683a      	ldr	r2, [r7, #0]
 80148a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80148aa:	4a0a      	ldr	r2, [pc, #40]	; (80148d4 <vQueueAddToRegistry+0x50>)
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	00db      	lsls	r3, r3, #3
 80148b0:	4413      	add	r3, r2
 80148b2:	687a      	ldr	r2, [r7, #4]
 80148b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80148b6:	e006      	b.n	80148c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	3301      	adds	r3, #1
 80148bc:	60fb      	str	r3, [r7, #12]
 80148be:	68fb      	ldr	r3, [r7, #12]
 80148c0:	2b07      	cmp	r3, #7
 80148c2:	d9e7      	bls.n	8014894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80148c4:	bf00      	nop
 80148c6:	bf00      	nop
 80148c8:	3714      	adds	r7, #20
 80148ca:	46bd      	mov	sp, r7
 80148cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	20013068 	.word	0x20013068

080148d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80148d8:	b480      	push	{r7}
 80148da:	b085      	sub	sp, #20
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80148e0:	2300      	movs	r3, #0
 80148e2:	60fb      	str	r3, [r7, #12]
 80148e4:	e016      	b.n	8014914 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80148e6:	4a10      	ldr	r2, [pc, #64]	; (8014928 <vQueueUnregisterQueue+0x50>)
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	00db      	lsls	r3, r3, #3
 80148ec:	4413      	add	r3, r2
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d10b      	bne.n	801490e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80148f6:	4a0c      	ldr	r2, [pc, #48]	; (8014928 <vQueueUnregisterQueue+0x50>)
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	2100      	movs	r1, #0
 80148fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014900:	4a09      	ldr	r2, [pc, #36]	; (8014928 <vQueueUnregisterQueue+0x50>)
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	00db      	lsls	r3, r3, #3
 8014906:	4413      	add	r3, r2
 8014908:	2200      	movs	r2, #0
 801490a:	605a      	str	r2, [r3, #4]
				break;
 801490c:	e006      	b.n	801491c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801490e:	68fb      	ldr	r3, [r7, #12]
 8014910:	3301      	adds	r3, #1
 8014912:	60fb      	str	r3, [r7, #12]
 8014914:	68fb      	ldr	r3, [r7, #12]
 8014916:	2b07      	cmp	r3, #7
 8014918:	d9e5      	bls.n	80148e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801491a:	bf00      	nop
 801491c:	bf00      	nop
 801491e:	3714      	adds	r7, #20
 8014920:	46bd      	mov	sp, r7
 8014922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014926:	4770      	bx	lr
 8014928:	20013068 	.word	0x20013068

0801492c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	60f8      	str	r0, [r7, #12]
 8014934:	60b9      	str	r1, [r7, #8]
 8014936:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801493c:	f001 fffa 	bl	8016934 <vPortEnterCritical>
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014946:	b25b      	sxtb	r3, r3
 8014948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801494c:	d103      	bne.n	8014956 <vQueueWaitForMessageRestricted+0x2a>
 801494e:	697b      	ldr	r3, [r7, #20]
 8014950:	2200      	movs	r2, #0
 8014952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014956:	697b      	ldr	r3, [r7, #20]
 8014958:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801495c:	b25b      	sxtb	r3, r3
 801495e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014962:	d103      	bne.n	801496c <vQueueWaitForMessageRestricted+0x40>
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	2200      	movs	r2, #0
 8014968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801496c:	f002 f812 	bl	8016994 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014970:	697b      	ldr	r3, [r7, #20]
 8014972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014974:	2b00      	cmp	r3, #0
 8014976:	d106      	bne.n	8014986 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014978:	697b      	ldr	r3, [r7, #20]
 801497a:	3324      	adds	r3, #36	; 0x24
 801497c:	687a      	ldr	r2, [r7, #4]
 801497e:	68b9      	ldr	r1, [r7, #8]
 8014980:	4618      	mov	r0, r3
 8014982:	f000 fd7d 	bl	8015480 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014986:	6978      	ldr	r0, [r7, #20]
 8014988:	f7ff fefb 	bl	8014782 <prvUnlockQueue>
	}
 801498c:	bf00      	nop
 801498e:	3718      	adds	r7, #24
 8014990:	46bd      	mov	sp, r7
 8014992:	bd80      	pop	{r7, pc}

08014994 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014994:	b580      	push	{r7, lr}
 8014996:	b08e      	sub	sp, #56	; 0x38
 8014998:	af04      	add	r7, sp, #16
 801499a:	60f8      	str	r0, [r7, #12]
 801499c:	60b9      	str	r1, [r7, #8]
 801499e:	607a      	str	r2, [r7, #4]
 80149a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80149a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d10a      	bne.n	80149be <xTaskCreateStatic+0x2a>
	__asm volatile
 80149a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149ac:	f383 8811 	msr	BASEPRI, r3
 80149b0:	f3bf 8f6f 	isb	sy
 80149b4:	f3bf 8f4f 	dsb	sy
 80149b8:	623b      	str	r3, [r7, #32]
}
 80149ba:	bf00      	nop
 80149bc:	e7fe      	b.n	80149bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80149be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d10a      	bne.n	80149da <xTaskCreateStatic+0x46>
	__asm volatile
 80149c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149c8:	f383 8811 	msr	BASEPRI, r3
 80149cc:	f3bf 8f6f 	isb	sy
 80149d0:	f3bf 8f4f 	dsb	sy
 80149d4:	61fb      	str	r3, [r7, #28]
}
 80149d6:	bf00      	nop
 80149d8:	e7fe      	b.n	80149d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80149da:	23c0      	movs	r3, #192	; 0xc0
 80149dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80149de:	693b      	ldr	r3, [r7, #16]
 80149e0:	2bc0      	cmp	r3, #192	; 0xc0
 80149e2:	d00a      	beq.n	80149fa <xTaskCreateStatic+0x66>
	__asm volatile
 80149e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e8:	f383 8811 	msr	BASEPRI, r3
 80149ec:	f3bf 8f6f 	isb	sy
 80149f0:	f3bf 8f4f 	dsb	sy
 80149f4:	61bb      	str	r3, [r7, #24]
}
 80149f6:	bf00      	nop
 80149f8:	e7fe      	b.n	80149f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80149fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80149fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d01e      	beq.n	8014a40 <xTaskCreateStatic+0xac>
 8014a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d01b      	beq.n	8014a40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a14:	2202      	movs	r2, #2
 8014a16:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	9303      	str	r3, [sp, #12]
 8014a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a20:	9302      	str	r3, [sp, #8]
 8014a22:	f107 0314 	add.w	r3, r7, #20
 8014a26:	9301      	str	r3, [sp, #4]
 8014a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2a:	9300      	str	r3, [sp, #0]
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	687a      	ldr	r2, [r7, #4]
 8014a30:	68b9      	ldr	r1, [r7, #8]
 8014a32:	68f8      	ldr	r0, [r7, #12]
 8014a34:	f000 f850 	bl	8014ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014a38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014a3a:	f000 f8f7 	bl	8014c2c <prvAddNewTaskToReadyList>
 8014a3e:	e001      	b.n	8014a44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014a40:	2300      	movs	r3, #0
 8014a42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014a44:	697b      	ldr	r3, [r7, #20]
	}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3728      	adds	r7, #40	; 0x28
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}

08014a4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014a4e:	b580      	push	{r7, lr}
 8014a50:	b08c      	sub	sp, #48	; 0x30
 8014a52:	af04      	add	r7, sp, #16
 8014a54:	60f8      	str	r0, [r7, #12]
 8014a56:	60b9      	str	r1, [r7, #8]
 8014a58:	603b      	str	r3, [r7, #0]
 8014a5a:	4613      	mov	r3, r2
 8014a5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014a5e:	88fb      	ldrh	r3, [r7, #6]
 8014a60:	009b      	lsls	r3, r3, #2
 8014a62:	4618      	mov	r0, r3
 8014a64:	f002 f888 	bl	8016b78 <pvPortMalloc>
 8014a68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d00e      	beq.n	8014a8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014a70:	20c0      	movs	r0, #192	; 0xc0
 8014a72:	f002 f881 	bl	8016b78 <pvPortMalloc>
 8014a76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014a78:	69fb      	ldr	r3, [r7, #28]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d003      	beq.n	8014a86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	697a      	ldr	r2, [r7, #20]
 8014a82:	631a      	str	r2, [r3, #48]	; 0x30
 8014a84:	e005      	b.n	8014a92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014a86:	6978      	ldr	r0, [r7, #20]
 8014a88:	f002 f942 	bl	8016d10 <vPortFree>
 8014a8c:	e001      	b.n	8014a92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014a8e:	2300      	movs	r3, #0
 8014a90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014a92:	69fb      	ldr	r3, [r7, #28]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d017      	beq.n	8014ac8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014aa0:	88fa      	ldrh	r2, [r7, #6]
 8014aa2:	2300      	movs	r3, #0
 8014aa4:	9303      	str	r3, [sp, #12]
 8014aa6:	69fb      	ldr	r3, [r7, #28]
 8014aa8:	9302      	str	r3, [sp, #8]
 8014aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aac:	9301      	str	r3, [sp, #4]
 8014aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab0:	9300      	str	r3, [sp, #0]
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	68b9      	ldr	r1, [r7, #8]
 8014ab6:	68f8      	ldr	r0, [r7, #12]
 8014ab8:	f000 f80e 	bl	8014ad8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014abc:	69f8      	ldr	r0, [r7, #28]
 8014abe:	f000 f8b5 	bl	8014c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	61bb      	str	r3, [r7, #24]
 8014ac6:	e002      	b.n	8014ace <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014acc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014ace:	69bb      	ldr	r3, [r7, #24]
	}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3720      	adds	r7, #32
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	bd80      	pop	{r7, pc}

08014ad8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b088      	sub	sp, #32
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	60f8      	str	r0, [r7, #12]
 8014ae0:	60b9      	str	r1, [r7, #8]
 8014ae2:	607a      	str	r2, [r7, #4]
 8014ae4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ae8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	009b      	lsls	r3, r3, #2
 8014aee:	461a      	mov	r2, r3
 8014af0:	21a5      	movs	r1, #165	; 0xa5
 8014af2:	f003 f8bb 	bl	8017c6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014b00:	3b01      	subs	r3, #1
 8014b02:	009b      	lsls	r3, r3, #2
 8014b04:	4413      	add	r3, r2
 8014b06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	f023 0307 	bic.w	r3, r3, #7
 8014b0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014b10:	69bb      	ldr	r3, [r7, #24]
 8014b12:	f003 0307 	and.w	r3, r3, #7
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d00a      	beq.n	8014b30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8014b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b1e:	f383 8811 	msr	BASEPRI, r3
 8014b22:	f3bf 8f6f 	isb	sy
 8014b26:	f3bf 8f4f 	dsb	sy
 8014b2a:	617b      	str	r3, [r7, #20]
}
 8014b2c:	bf00      	nop
 8014b2e:	e7fe      	b.n	8014b2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d01f      	beq.n	8014b76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b36:	2300      	movs	r3, #0
 8014b38:	61fb      	str	r3, [r7, #28]
 8014b3a:	e012      	b.n	8014b62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014b3c:	68ba      	ldr	r2, [r7, #8]
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	4413      	add	r3, r2
 8014b42:	7819      	ldrb	r1, [r3, #0]
 8014b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	4413      	add	r3, r2
 8014b4a:	3334      	adds	r3, #52	; 0x34
 8014b4c:	460a      	mov	r2, r1
 8014b4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014b50:	68ba      	ldr	r2, [r7, #8]
 8014b52:	69fb      	ldr	r3, [r7, #28]
 8014b54:	4413      	add	r3, r2
 8014b56:	781b      	ldrb	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d006      	beq.n	8014b6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014b5c:	69fb      	ldr	r3, [r7, #28]
 8014b5e:	3301      	adds	r3, #1
 8014b60:	61fb      	str	r3, [r7, #28]
 8014b62:	69fb      	ldr	r3, [r7, #28]
 8014b64:	2b0f      	cmp	r3, #15
 8014b66:	d9e9      	bls.n	8014b3c <prvInitialiseNewTask+0x64>
 8014b68:	e000      	b.n	8014b6c <prvInitialiseNewTask+0x94>
			{
				break;
 8014b6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b6e:	2200      	movs	r2, #0
 8014b70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014b74:	e003      	b.n	8014b7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b78:	2200      	movs	r2, #0
 8014b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b80:	2b37      	cmp	r3, #55	; 0x37
 8014b82:	d901      	bls.n	8014b88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014b84:	2337      	movs	r3, #55	; 0x37
 8014b86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b96:	2200      	movs	r2, #0
 8014b98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b9c:	3304      	adds	r3, #4
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7fe fe56 	bl	8013850 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba6:	3318      	adds	r3, #24
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7fe fe51 	bl	8013850 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014bb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8014bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bcc:	2200      	movs	r2, #0
 8014bce:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd4:	2200      	movs	r2, #0
 8014bd6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bdc:	3358      	adds	r3, #88	; 0x58
 8014bde:	2260      	movs	r2, #96	; 0x60
 8014be0:	2100      	movs	r1, #0
 8014be2:	4618      	mov	r0, r3
 8014be4:	f003 f842 	bl	8017c6c <memset>
 8014be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bea:	4a0d      	ldr	r2, [pc, #52]	; (8014c20 <prvInitialiseNewTask+0x148>)
 8014bec:	65da      	str	r2, [r3, #92]	; 0x5c
 8014bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf0:	4a0c      	ldr	r2, [pc, #48]	; (8014c24 <prvInitialiseNewTask+0x14c>)
 8014bf2:	661a      	str	r2, [r3, #96]	; 0x60
 8014bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bf6:	4a0c      	ldr	r2, [pc, #48]	; (8014c28 <prvInitialiseNewTask+0x150>)
 8014bf8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014bfa:	683a      	ldr	r2, [r7, #0]
 8014bfc:	68f9      	ldr	r1, [r7, #12]
 8014bfe:	69b8      	ldr	r0, [r7, #24]
 8014c00:	f001 fd6c 	bl	80166dc <pxPortInitialiseStack>
 8014c04:	4602      	mov	r2, r0
 8014c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d002      	beq.n	8014c16 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014c16:	bf00      	nop
 8014c18:	3720      	adds	r7, #32
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	0801f3b0 	.word	0x0801f3b0
 8014c24:	0801f3d0 	.word	0x0801f3d0
 8014c28:	0801f390 	.word	0x0801f390

08014c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014c34:	f001 fe7e 	bl	8016934 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014c38:	4b2d      	ldr	r3, [pc, #180]	; (8014cf0 <prvAddNewTaskToReadyList+0xc4>)
 8014c3a:	681b      	ldr	r3, [r3, #0]
 8014c3c:	3301      	adds	r3, #1
 8014c3e:	4a2c      	ldr	r2, [pc, #176]	; (8014cf0 <prvAddNewTaskToReadyList+0xc4>)
 8014c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014c42:	4b2c      	ldr	r3, [pc, #176]	; (8014cf4 <prvAddNewTaskToReadyList+0xc8>)
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d109      	bne.n	8014c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014c4a:	4a2a      	ldr	r2, [pc, #168]	; (8014cf4 <prvAddNewTaskToReadyList+0xc8>)
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014c50:	4b27      	ldr	r3, [pc, #156]	; (8014cf0 <prvAddNewTaskToReadyList+0xc4>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d110      	bne.n	8014c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014c58:	f000 fd3e 	bl	80156d8 <prvInitialiseTaskLists>
 8014c5c:	e00d      	b.n	8014c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014c5e:	4b26      	ldr	r3, [pc, #152]	; (8014cf8 <prvAddNewTaskToReadyList+0xcc>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d109      	bne.n	8014c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014c66:	4b23      	ldr	r3, [pc, #140]	; (8014cf4 <prvAddNewTaskToReadyList+0xc8>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c70:	429a      	cmp	r2, r3
 8014c72:	d802      	bhi.n	8014c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014c74:	4a1f      	ldr	r2, [pc, #124]	; (8014cf4 <prvAddNewTaskToReadyList+0xc8>)
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014c7a:	4b20      	ldr	r3, [pc, #128]	; (8014cfc <prvAddNewTaskToReadyList+0xd0>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	3301      	adds	r3, #1
 8014c80:	4a1e      	ldr	r2, [pc, #120]	; (8014cfc <prvAddNewTaskToReadyList+0xd0>)
 8014c82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014c84:	4b1d      	ldr	r3, [pc, #116]	; (8014cfc <prvAddNewTaskToReadyList+0xd0>)
 8014c86:	681a      	ldr	r2, [r3, #0]
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c90:	4b1b      	ldr	r3, [pc, #108]	; (8014d00 <prvAddNewTaskToReadyList+0xd4>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	429a      	cmp	r2, r3
 8014c96:	d903      	bls.n	8014ca0 <prvAddNewTaskToReadyList+0x74>
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c9c:	4a18      	ldr	r2, [pc, #96]	; (8014d00 <prvAddNewTaskToReadyList+0xd4>)
 8014c9e:	6013      	str	r3, [r2, #0]
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ca4:	4613      	mov	r3, r2
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	4413      	add	r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4a15      	ldr	r2, [pc, #84]	; (8014d04 <prvAddNewTaskToReadyList+0xd8>)
 8014cae:	441a      	add	r2, r3
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	3304      	adds	r3, #4
 8014cb4:	4619      	mov	r1, r3
 8014cb6:	4610      	mov	r0, r2
 8014cb8:	f7fe fdd7 	bl	801386a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014cbc:	f001 fe6a 	bl	8016994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014cc0:	4b0d      	ldr	r3, [pc, #52]	; (8014cf8 <prvAddNewTaskToReadyList+0xcc>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d00e      	beq.n	8014ce6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014cc8:	4b0a      	ldr	r3, [pc, #40]	; (8014cf4 <prvAddNewTaskToReadyList+0xc8>)
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d207      	bcs.n	8014ce6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014cd6:	4b0c      	ldr	r3, [pc, #48]	; (8014d08 <prvAddNewTaskToReadyList+0xdc>)
 8014cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014cdc:	601a      	str	r2, [r3, #0]
 8014cde:	f3bf 8f4f 	dsb	sy
 8014ce2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014ce6:	bf00      	nop
 8014ce8:	3708      	adds	r7, #8
 8014cea:	46bd      	mov	sp, r7
 8014cec:	bd80      	pop	{r7, pc}
 8014cee:	bf00      	nop
 8014cf0:	20003444 	.word	0x20003444
 8014cf4:	20002f70 	.word	0x20002f70
 8014cf8:	20003450 	.word	0x20003450
 8014cfc:	20003460 	.word	0x20003460
 8014d00:	2000344c 	.word	0x2000344c
 8014d04:	20002f74 	.word	0x20002f74
 8014d08:	e000ed04 	.word	0xe000ed04

08014d0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b084      	sub	sp, #16
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014d14:	2300      	movs	r3, #0
 8014d16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d017      	beq.n	8014d4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014d1e:	4b13      	ldr	r3, [pc, #76]	; (8014d6c <vTaskDelay+0x60>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d00a      	beq.n	8014d3c <vTaskDelay+0x30>
	__asm volatile
 8014d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d2a:	f383 8811 	msr	BASEPRI, r3
 8014d2e:	f3bf 8f6f 	isb	sy
 8014d32:	f3bf 8f4f 	dsb	sy
 8014d36:	60bb      	str	r3, [r7, #8]
}
 8014d38:	bf00      	nop
 8014d3a:	e7fe      	b.n	8014d3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014d3c:	f000 f8f4 	bl	8014f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014d40:	2100      	movs	r1, #0
 8014d42:	6878      	ldr	r0, [r7, #4]
 8014d44:	f001 f928 	bl	8015f98 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014d48:	f000 f8fc 	bl	8014f44 <xTaskResumeAll>
 8014d4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d107      	bne.n	8014d64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014d54:	4b06      	ldr	r3, [pc, #24]	; (8014d70 <vTaskDelay+0x64>)
 8014d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d5a:	601a      	str	r2, [r3, #0]
 8014d5c:	f3bf 8f4f 	dsb	sy
 8014d60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014d64:	bf00      	nop
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	2000346c 	.word	0x2000346c
 8014d70:	e000ed04 	.word	0xe000ed04

08014d74 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b088      	sub	sp, #32
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8014d80:	69bb      	ldr	r3, [r7, #24]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d10a      	bne.n	8014d9c <eTaskGetState+0x28>
	__asm volatile
 8014d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d8a:	f383 8811 	msr	BASEPRI, r3
 8014d8e:	f3bf 8f6f 	isb	sy
 8014d92:	f3bf 8f4f 	dsb	sy
 8014d96:	60bb      	str	r3, [r7, #8]
}
 8014d98:	bf00      	nop
 8014d9a:	e7fe      	b.n	8014d9a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8014d9c:	4b23      	ldr	r3, [pc, #140]	; (8014e2c <eTaskGetState+0xb8>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	69ba      	ldr	r2, [r7, #24]
 8014da2:	429a      	cmp	r2, r3
 8014da4:	d102      	bne.n	8014dac <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8014da6:	2300      	movs	r3, #0
 8014da8:	77fb      	strb	r3, [r7, #31]
 8014daa:	e03a      	b.n	8014e22 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8014dac:	f001 fdc2 	bl	8016934 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014db0:	69bb      	ldr	r3, [r7, #24]
 8014db2:	695b      	ldr	r3, [r3, #20]
 8014db4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8014db6:	4b1e      	ldr	r3, [pc, #120]	; (8014e30 <eTaskGetState+0xbc>)
 8014db8:	681b      	ldr	r3, [r3, #0]
 8014dba:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014dbc:	4b1d      	ldr	r3, [pc, #116]	; (8014e34 <eTaskGetState+0xc0>)
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8014dc2:	f001 fde7 	bl	8016994 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8014dc6:	697a      	ldr	r2, [r7, #20]
 8014dc8:	693b      	ldr	r3, [r7, #16]
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d003      	beq.n	8014dd6 <eTaskGetState+0x62>
 8014dce:	697a      	ldr	r2, [r7, #20]
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d102      	bne.n	8014ddc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8014dd6:	2302      	movs	r3, #2
 8014dd8:	77fb      	strb	r3, [r7, #31]
 8014dda:	e022      	b.n	8014e22 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8014ddc:	697b      	ldr	r3, [r7, #20]
 8014dde:	4a16      	ldr	r2, [pc, #88]	; (8014e38 <eTaskGetState+0xc4>)
 8014de0:	4293      	cmp	r3, r2
 8014de2:	d112      	bne.n	8014e0a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8014de4:	69bb      	ldr	r3, [r7, #24]
 8014de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d10b      	bne.n	8014e04 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014dec:	69bb      	ldr	r3, [r7, #24]
 8014dee:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	2b01      	cmp	r3, #1
 8014df6:	d102      	bne.n	8014dfe <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8014df8:	2302      	movs	r3, #2
 8014dfa:	77fb      	strb	r3, [r7, #31]
 8014dfc:	e011      	b.n	8014e22 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	77fb      	strb	r3, [r7, #31]
 8014e02:	e00e      	b.n	8014e22 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8014e04:	2302      	movs	r3, #2
 8014e06:	77fb      	strb	r3, [r7, #31]
 8014e08:	e00b      	b.n	8014e22 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	4a0b      	ldr	r2, [pc, #44]	; (8014e3c <eTaskGetState+0xc8>)
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	d002      	beq.n	8014e18 <eTaskGetState+0xa4>
 8014e12:	697b      	ldr	r3, [r7, #20]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d102      	bne.n	8014e1e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8014e18:	2304      	movs	r3, #4
 8014e1a:	77fb      	strb	r3, [r7, #31]
 8014e1c:	e001      	b.n	8014e22 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8014e1e:	2301      	movs	r3, #1
 8014e20:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8014e22:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014e24:	4618      	mov	r0, r3
 8014e26:	3720      	adds	r7, #32
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	20002f70 	.word	0x20002f70
 8014e30:	200033fc 	.word	0x200033fc
 8014e34:	20003400 	.word	0x20003400
 8014e38:	20003430 	.word	0x20003430
 8014e3c:	20003418 	.word	0x20003418

08014e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b08a      	sub	sp, #40	; 0x28
 8014e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014e46:	2300      	movs	r3, #0
 8014e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014e4e:	463a      	mov	r2, r7
 8014e50:	1d39      	adds	r1, r7, #4
 8014e52:	f107 0308 	add.w	r3, r7, #8
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7fe fca6 	bl	80137a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014e5c:	6839      	ldr	r1, [r7, #0]
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	9202      	str	r2, [sp, #8]
 8014e64:	9301      	str	r3, [sp, #4]
 8014e66:	2300      	movs	r3, #0
 8014e68:	9300      	str	r3, [sp, #0]
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	460a      	mov	r2, r1
 8014e6e:	4925      	ldr	r1, [pc, #148]	; (8014f04 <vTaskStartScheduler+0xc4>)
 8014e70:	4825      	ldr	r0, [pc, #148]	; (8014f08 <vTaskStartScheduler+0xc8>)
 8014e72:	f7ff fd8f 	bl	8014994 <xTaskCreateStatic>
 8014e76:	4603      	mov	r3, r0
 8014e78:	4a24      	ldr	r2, [pc, #144]	; (8014f0c <vTaskStartScheduler+0xcc>)
 8014e7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014e7c:	4b23      	ldr	r3, [pc, #140]	; (8014f0c <vTaskStartScheduler+0xcc>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d002      	beq.n	8014e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014e84:	2301      	movs	r3, #1
 8014e86:	617b      	str	r3, [r7, #20]
 8014e88:	e001      	b.n	8014e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	2b01      	cmp	r3, #1
 8014e92:	d102      	bne.n	8014e9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014e94:	f001 f8d4 	bl	8016040 <xTimerCreateTimerTask>
 8014e98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d11e      	bne.n	8014ede <vTaskStartScheduler+0x9e>
	__asm volatile
 8014ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea4:	f383 8811 	msr	BASEPRI, r3
 8014ea8:	f3bf 8f6f 	isb	sy
 8014eac:	f3bf 8f4f 	dsb	sy
 8014eb0:	613b      	str	r3, [r7, #16]
}
 8014eb2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014eb4:	4b16      	ldr	r3, [pc, #88]	; (8014f10 <vTaskStartScheduler+0xd0>)
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	3358      	adds	r3, #88	; 0x58
 8014eba:	4a16      	ldr	r2, [pc, #88]	; (8014f14 <vTaskStartScheduler+0xd4>)
 8014ebc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014ebe:	4b16      	ldr	r3, [pc, #88]	; (8014f18 <vTaskStartScheduler+0xd8>)
 8014ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ec4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014ec6:	4b15      	ldr	r3, [pc, #84]	; (8014f1c <vTaskStartScheduler+0xdc>)
 8014ec8:	2201      	movs	r2, #1
 8014eca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014ecc:	4b14      	ldr	r3, [pc, #80]	; (8014f20 <vTaskStartScheduler+0xe0>)
 8014ece:	2200      	movs	r2, #0
 8014ed0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014ed2:	4b14      	ldr	r3, [pc, #80]	; (8014f24 <vTaskStartScheduler+0xe4>)
 8014ed4:	2200      	movs	r2, #0
 8014ed6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014ed8:	f001 fc8a 	bl	80167f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014edc:	e00e      	b.n	8014efc <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014ee4:	d10a      	bne.n	8014efc <vTaskStartScheduler+0xbc>
	__asm volatile
 8014ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eea:	f383 8811 	msr	BASEPRI, r3
 8014eee:	f3bf 8f6f 	isb	sy
 8014ef2:	f3bf 8f4f 	dsb	sy
 8014ef6:	60fb      	str	r3, [r7, #12]
}
 8014ef8:	bf00      	nop
 8014efa:	e7fe      	b.n	8014efa <vTaskStartScheduler+0xba>
}
 8014efc:	bf00      	nop
 8014efe:	3718      	adds	r7, #24
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	0801b040 	.word	0x0801b040
 8014f08:	080156a9 	.word	0x080156a9
 8014f0c:	20003468 	.word	0x20003468
 8014f10:	20002f70 	.word	0x20002f70
 8014f14:	200001c8 	.word	0x200001c8
 8014f18:	20003464 	.word	0x20003464
 8014f1c:	20003450 	.word	0x20003450
 8014f20:	20003448 	.word	0x20003448
 8014f24:	2000fa9c 	.word	0x2000fa9c

08014f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014f28:	b480      	push	{r7}
 8014f2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014f2c:	4b04      	ldr	r3, [pc, #16]	; (8014f40 <vTaskSuspendAll+0x18>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	3301      	adds	r3, #1
 8014f32:	4a03      	ldr	r2, [pc, #12]	; (8014f40 <vTaskSuspendAll+0x18>)
 8014f34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014f36:	bf00      	nop
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr
 8014f40:	2000346c 	.word	0x2000346c

08014f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b084      	sub	sp, #16
 8014f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014f52:	4b42      	ldr	r3, [pc, #264]	; (801505c <xTaskResumeAll+0x118>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d10a      	bne.n	8014f70 <xTaskResumeAll+0x2c>
	__asm volatile
 8014f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5e:	f383 8811 	msr	BASEPRI, r3
 8014f62:	f3bf 8f6f 	isb	sy
 8014f66:	f3bf 8f4f 	dsb	sy
 8014f6a:	603b      	str	r3, [r7, #0]
}
 8014f6c:	bf00      	nop
 8014f6e:	e7fe      	b.n	8014f6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014f70:	f001 fce0 	bl	8016934 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014f74:	4b39      	ldr	r3, [pc, #228]	; (801505c <xTaskResumeAll+0x118>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	3b01      	subs	r3, #1
 8014f7a:	4a38      	ldr	r2, [pc, #224]	; (801505c <xTaskResumeAll+0x118>)
 8014f7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f7e:	4b37      	ldr	r3, [pc, #220]	; (801505c <xTaskResumeAll+0x118>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d162      	bne.n	801504c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014f86:	4b36      	ldr	r3, [pc, #216]	; (8015060 <xTaskResumeAll+0x11c>)
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d05e      	beq.n	801504c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014f8e:	e02f      	b.n	8014ff0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f90:	4b34      	ldr	r3, [pc, #208]	; (8015064 <xTaskResumeAll+0x120>)
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	68db      	ldr	r3, [r3, #12]
 8014f96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	3318      	adds	r3, #24
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f7fe fcc1 	bl	8013924 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	3304      	adds	r3, #4
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fe fcbc 	bl	8013924 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fb0:	4b2d      	ldr	r3, [pc, #180]	; (8015068 <xTaskResumeAll+0x124>)
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	429a      	cmp	r2, r3
 8014fb6:	d903      	bls.n	8014fc0 <xTaskResumeAll+0x7c>
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fbc:	4a2a      	ldr	r2, [pc, #168]	; (8015068 <xTaskResumeAll+0x124>)
 8014fbe:	6013      	str	r3, [r2, #0]
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc4:	4613      	mov	r3, r2
 8014fc6:	009b      	lsls	r3, r3, #2
 8014fc8:	4413      	add	r3, r2
 8014fca:	009b      	lsls	r3, r3, #2
 8014fcc:	4a27      	ldr	r2, [pc, #156]	; (801506c <xTaskResumeAll+0x128>)
 8014fce:	441a      	add	r2, r3
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	3304      	adds	r3, #4
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	4610      	mov	r0, r2
 8014fd8:	f7fe fc47 	bl	801386a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe0:	4b23      	ldr	r3, [pc, #140]	; (8015070 <xTaskResumeAll+0x12c>)
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d302      	bcc.n	8014ff0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014fea:	4b22      	ldr	r3, [pc, #136]	; (8015074 <xTaskResumeAll+0x130>)
 8014fec:	2201      	movs	r2, #1
 8014fee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ff0:	4b1c      	ldr	r3, [pc, #112]	; (8015064 <xTaskResumeAll+0x120>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d1cb      	bne.n	8014f90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d001      	beq.n	8015002 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014ffe:	f000 fce1 	bl	80159c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015002:	4b1d      	ldr	r3, [pc, #116]	; (8015078 <xTaskResumeAll+0x134>)
 8015004:	681b      	ldr	r3, [r3, #0]
 8015006:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d010      	beq.n	8015030 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801500e:	f000 f8d7 	bl	80151c0 <xTaskIncrementTick>
 8015012:	4603      	mov	r3, r0
 8015014:	2b00      	cmp	r3, #0
 8015016:	d002      	beq.n	801501e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015018:	4b16      	ldr	r3, [pc, #88]	; (8015074 <xTaskResumeAll+0x130>)
 801501a:	2201      	movs	r2, #1
 801501c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	3b01      	subs	r3, #1
 8015022:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d1f1      	bne.n	801500e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801502a:	4b13      	ldr	r3, [pc, #76]	; (8015078 <xTaskResumeAll+0x134>)
 801502c:	2200      	movs	r2, #0
 801502e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015030:	4b10      	ldr	r3, [pc, #64]	; (8015074 <xTaskResumeAll+0x130>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d009      	beq.n	801504c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015038:	2301      	movs	r3, #1
 801503a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801503c:	4b0f      	ldr	r3, [pc, #60]	; (801507c <xTaskResumeAll+0x138>)
 801503e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015042:	601a      	str	r2, [r3, #0]
 8015044:	f3bf 8f4f 	dsb	sy
 8015048:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801504c:	f001 fca2 	bl	8016994 <vPortExitCritical>

	return xAlreadyYielded;
 8015050:	68bb      	ldr	r3, [r7, #8]
}
 8015052:	4618      	mov	r0, r3
 8015054:	3710      	adds	r7, #16
 8015056:	46bd      	mov	sp, r7
 8015058:	bd80      	pop	{r7, pc}
 801505a:	bf00      	nop
 801505c:	2000346c 	.word	0x2000346c
 8015060:	20003444 	.word	0x20003444
 8015064:	20003404 	.word	0x20003404
 8015068:	2000344c 	.word	0x2000344c
 801506c:	20002f74 	.word	0x20002f74
 8015070:	20002f70 	.word	0x20002f70
 8015074:	20003458 	.word	0x20003458
 8015078:	20003454 	.word	0x20003454
 801507c:	e000ed04 	.word	0xe000ed04

08015080 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015080:	b480      	push	{r7}
 8015082:	b083      	sub	sp, #12
 8015084:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015086:	4b05      	ldr	r3, [pc, #20]	; (801509c <xTaskGetTickCount+0x1c>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801508c:	687b      	ldr	r3, [r7, #4]
}
 801508e:	4618      	mov	r0, r3
 8015090:	370c      	adds	r7, #12
 8015092:	46bd      	mov	sp, r7
 8015094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015098:	4770      	bx	lr
 801509a:	bf00      	nop
 801509c:	20003448 	.word	0x20003448

080150a0 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b086      	sub	sp, #24
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	60f8      	str	r0, [r7, #12]
 80150a8:	60b9      	str	r1, [r7, #8]
 80150aa:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80150ac:	2300      	movs	r3, #0
 80150ae:	617b      	str	r3, [r7, #20]
 80150b0:	2338      	movs	r3, #56	; 0x38
 80150b2:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80150b4:	f7ff ff38 	bl	8014f28 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80150b8:	4b3a      	ldr	r3, [pc, #232]	; (80151a4 <uxTaskGetSystemState+0x104>)
 80150ba:	681b      	ldr	r3, [r3, #0]
 80150bc:	68ba      	ldr	r2, [r7, #8]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d369      	bcc.n	8015196 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80150c2:	693b      	ldr	r3, [r7, #16]
 80150c4:	3b01      	subs	r3, #1
 80150c6:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80150c8:	697a      	ldr	r2, [r7, #20]
 80150ca:	4613      	mov	r3, r2
 80150cc:	00db      	lsls	r3, r3, #3
 80150ce:	4413      	add	r3, r2
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	461a      	mov	r2, r3
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	1898      	adds	r0, r3, r2
 80150d8:	693a      	ldr	r2, [r7, #16]
 80150da:	4613      	mov	r3, r2
 80150dc:	009b      	lsls	r3, r3, #2
 80150de:	4413      	add	r3, r2
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	4a31      	ldr	r2, [pc, #196]	; (80151a8 <uxTaskGetSystemState+0x108>)
 80150e4:	4413      	add	r3, r2
 80150e6:	2201      	movs	r2, #1
 80150e8:	4619      	mov	r1, r3
 80150ea:	f000 fbc9 	bl	8015880 <prvListTasksWithinSingleList>
 80150ee:	4602      	mov	r2, r0
 80150f0:	697b      	ldr	r3, [r7, #20]
 80150f2:	4413      	add	r3, r2
 80150f4:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d1e2      	bne.n	80150c2 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80150fc:	697a      	ldr	r2, [r7, #20]
 80150fe:	4613      	mov	r3, r2
 8015100:	00db      	lsls	r3, r3, #3
 8015102:	4413      	add	r3, r2
 8015104:	009b      	lsls	r3, r3, #2
 8015106:	461a      	mov	r2, r3
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	4413      	add	r3, r2
 801510c:	4a27      	ldr	r2, [pc, #156]	; (80151ac <uxTaskGetSystemState+0x10c>)
 801510e:	6811      	ldr	r1, [r2, #0]
 8015110:	2202      	movs	r2, #2
 8015112:	4618      	mov	r0, r3
 8015114:	f000 fbb4 	bl	8015880 <prvListTasksWithinSingleList>
 8015118:	4602      	mov	r2, r0
 801511a:	697b      	ldr	r3, [r7, #20]
 801511c:	4413      	add	r3, r2
 801511e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8015120:	697a      	ldr	r2, [r7, #20]
 8015122:	4613      	mov	r3, r2
 8015124:	00db      	lsls	r3, r3, #3
 8015126:	4413      	add	r3, r2
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	461a      	mov	r2, r3
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	4413      	add	r3, r2
 8015130:	4a1f      	ldr	r2, [pc, #124]	; (80151b0 <uxTaskGetSystemState+0x110>)
 8015132:	6811      	ldr	r1, [r2, #0]
 8015134:	2202      	movs	r2, #2
 8015136:	4618      	mov	r0, r3
 8015138:	f000 fba2 	bl	8015880 <prvListTasksWithinSingleList>
 801513c:	4602      	mov	r2, r0
 801513e:	697b      	ldr	r3, [r7, #20]
 8015140:	4413      	add	r3, r2
 8015142:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8015144:	697a      	ldr	r2, [r7, #20]
 8015146:	4613      	mov	r3, r2
 8015148:	00db      	lsls	r3, r3, #3
 801514a:	4413      	add	r3, r2
 801514c:	009b      	lsls	r3, r3, #2
 801514e:	461a      	mov	r2, r3
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	4413      	add	r3, r2
 8015154:	2204      	movs	r2, #4
 8015156:	4917      	ldr	r1, [pc, #92]	; (80151b4 <uxTaskGetSystemState+0x114>)
 8015158:	4618      	mov	r0, r3
 801515a:	f000 fb91 	bl	8015880 <prvListTasksWithinSingleList>
 801515e:	4602      	mov	r2, r0
 8015160:	697b      	ldr	r3, [r7, #20]
 8015162:	4413      	add	r3, r2
 8015164:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8015166:	697a      	ldr	r2, [r7, #20]
 8015168:	4613      	mov	r3, r2
 801516a:	00db      	lsls	r3, r3, #3
 801516c:	4413      	add	r3, r2
 801516e:	009b      	lsls	r3, r3, #2
 8015170:	461a      	mov	r2, r3
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	4413      	add	r3, r2
 8015176:	2203      	movs	r2, #3
 8015178:	490f      	ldr	r1, [pc, #60]	; (80151b8 <uxTaskGetSystemState+0x118>)
 801517a:	4618      	mov	r0, r3
 801517c:	f000 fb80 	bl	8015880 <prvListTasksWithinSingleList>
 8015180:	4602      	mov	r2, r0
 8015182:	697b      	ldr	r3, [r7, #20]
 8015184:	4413      	add	r3, r2
 8015186:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d003      	beq.n	8015196 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801518e:	4b0b      	ldr	r3, [pc, #44]	; (80151bc <uxTaskGetSystemState+0x11c>)
 8015190:	681a      	ldr	r2, [r3, #0]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8015196:	f7ff fed5 	bl	8014f44 <xTaskResumeAll>

		return uxTask;
 801519a:	697b      	ldr	r3, [r7, #20]
	}
 801519c:	4618      	mov	r0, r3
 801519e:	3718      	adds	r7, #24
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	20003444 	.word	0x20003444
 80151a8:	20002f74 	.word	0x20002f74
 80151ac:	200033fc 	.word	0x200033fc
 80151b0:	20003400 	.word	0x20003400
 80151b4:	20003418 	.word	0x20003418
 80151b8:	20003430 	.word	0x20003430
 80151bc:	2000fa9c 	.word	0x2000fa9c

080151c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b086      	sub	sp, #24
 80151c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80151c6:	2300      	movs	r3, #0
 80151c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151ca:	4b4f      	ldr	r3, [pc, #316]	; (8015308 <xTaskIncrementTick+0x148>)
 80151cc:	681b      	ldr	r3, [r3, #0]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	f040 808f 	bne.w	80152f2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80151d4:	4b4d      	ldr	r3, [pc, #308]	; (801530c <xTaskIncrementTick+0x14c>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	3301      	adds	r3, #1
 80151da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80151dc:	4a4b      	ldr	r2, [pc, #300]	; (801530c <xTaskIncrementTick+0x14c>)
 80151de:	693b      	ldr	r3, [r7, #16]
 80151e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d120      	bne.n	801522a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80151e8:	4b49      	ldr	r3, [pc, #292]	; (8015310 <xTaskIncrementTick+0x150>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d00a      	beq.n	8015208 <xTaskIncrementTick+0x48>
	__asm volatile
 80151f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f6:	f383 8811 	msr	BASEPRI, r3
 80151fa:	f3bf 8f6f 	isb	sy
 80151fe:	f3bf 8f4f 	dsb	sy
 8015202:	603b      	str	r3, [r7, #0]
}
 8015204:	bf00      	nop
 8015206:	e7fe      	b.n	8015206 <xTaskIncrementTick+0x46>
 8015208:	4b41      	ldr	r3, [pc, #260]	; (8015310 <xTaskIncrementTick+0x150>)
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	60fb      	str	r3, [r7, #12]
 801520e:	4b41      	ldr	r3, [pc, #260]	; (8015314 <xTaskIncrementTick+0x154>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	4a3f      	ldr	r2, [pc, #252]	; (8015310 <xTaskIncrementTick+0x150>)
 8015214:	6013      	str	r3, [r2, #0]
 8015216:	4a3f      	ldr	r2, [pc, #252]	; (8015314 <xTaskIncrementTick+0x154>)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	6013      	str	r3, [r2, #0]
 801521c:	4b3e      	ldr	r3, [pc, #248]	; (8015318 <xTaskIncrementTick+0x158>)
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	3301      	adds	r3, #1
 8015222:	4a3d      	ldr	r2, [pc, #244]	; (8015318 <xTaskIncrementTick+0x158>)
 8015224:	6013      	str	r3, [r2, #0]
 8015226:	f000 fbcd 	bl	80159c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801522a:	4b3c      	ldr	r3, [pc, #240]	; (801531c <xTaskIncrementTick+0x15c>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	693a      	ldr	r2, [r7, #16]
 8015230:	429a      	cmp	r2, r3
 8015232:	d349      	bcc.n	80152c8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015234:	4b36      	ldr	r3, [pc, #216]	; (8015310 <xTaskIncrementTick+0x150>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d104      	bne.n	8015248 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801523e:	4b37      	ldr	r3, [pc, #220]	; (801531c <xTaskIncrementTick+0x15c>)
 8015240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015244:	601a      	str	r2, [r3, #0]
					break;
 8015246:	e03f      	b.n	80152c8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015248:	4b31      	ldr	r3, [pc, #196]	; (8015310 <xTaskIncrementTick+0x150>)
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	68db      	ldr	r3, [r3, #12]
 801524e:	68db      	ldr	r3, [r3, #12]
 8015250:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015258:	693a      	ldr	r2, [r7, #16]
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	429a      	cmp	r2, r3
 801525e:	d203      	bcs.n	8015268 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015260:	4a2e      	ldr	r2, [pc, #184]	; (801531c <xTaskIncrementTick+0x15c>)
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015266:	e02f      	b.n	80152c8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	3304      	adds	r3, #4
 801526c:	4618      	mov	r0, r3
 801526e:	f7fe fb59 	bl	8013924 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015272:	68bb      	ldr	r3, [r7, #8]
 8015274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015276:	2b00      	cmp	r3, #0
 8015278:	d004      	beq.n	8015284 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801527a:	68bb      	ldr	r3, [r7, #8]
 801527c:	3318      	adds	r3, #24
 801527e:	4618      	mov	r0, r3
 8015280:	f7fe fb50 	bl	8013924 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015288:	4b25      	ldr	r3, [pc, #148]	; (8015320 <xTaskIncrementTick+0x160>)
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	429a      	cmp	r2, r3
 801528e:	d903      	bls.n	8015298 <xTaskIncrementTick+0xd8>
 8015290:	68bb      	ldr	r3, [r7, #8]
 8015292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015294:	4a22      	ldr	r2, [pc, #136]	; (8015320 <xTaskIncrementTick+0x160>)
 8015296:	6013      	str	r3, [r2, #0]
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801529c:	4613      	mov	r3, r2
 801529e:	009b      	lsls	r3, r3, #2
 80152a0:	4413      	add	r3, r2
 80152a2:	009b      	lsls	r3, r3, #2
 80152a4:	4a1f      	ldr	r2, [pc, #124]	; (8015324 <xTaskIncrementTick+0x164>)
 80152a6:	441a      	add	r2, r3
 80152a8:	68bb      	ldr	r3, [r7, #8]
 80152aa:	3304      	adds	r3, #4
 80152ac:	4619      	mov	r1, r3
 80152ae:	4610      	mov	r0, r2
 80152b0:	f7fe fadb 	bl	801386a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80152b4:	68bb      	ldr	r3, [r7, #8]
 80152b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152b8:	4b1b      	ldr	r3, [pc, #108]	; (8015328 <xTaskIncrementTick+0x168>)
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152be:	429a      	cmp	r2, r3
 80152c0:	d3b8      	bcc.n	8015234 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80152c2:	2301      	movs	r3, #1
 80152c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80152c6:	e7b5      	b.n	8015234 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80152c8:	4b17      	ldr	r3, [pc, #92]	; (8015328 <xTaskIncrementTick+0x168>)
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80152ce:	4915      	ldr	r1, [pc, #84]	; (8015324 <xTaskIncrementTick+0x164>)
 80152d0:	4613      	mov	r3, r2
 80152d2:	009b      	lsls	r3, r3, #2
 80152d4:	4413      	add	r3, r2
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	440b      	add	r3, r1
 80152da:	681b      	ldr	r3, [r3, #0]
 80152dc:	2b01      	cmp	r3, #1
 80152de:	d901      	bls.n	80152e4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80152e0:	2301      	movs	r3, #1
 80152e2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80152e4:	4b11      	ldr	r3, [pc, #68]	; (801532c <xTaskIncrementTick+0x16c>)
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d007      	beq.n	80152fc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80152ec:	2301      	movs	r3, #1
 80152ee:	617b      	str	r3, [r7, #20]
 80152f0:	e004      	b.n	80152fc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80152f2:	4b0f      	ldr	r3, [pc, #60]	; (8015330 <xTaskIncrementTick+0x170>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	3301      	adds	r3, #1
 80152f8:	4a0d      	ldr	r2, [pc, #52]	; (8015330 <xTaskIncrementTick+0x170>)
 80152fa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80152fc:	697b      	ldr	r3, [r7, #20]
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3718      	adds	r7, #24
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
 8015306:	bf00      	nop
 8015308:	2000346c 	.word	0x2000346c
 801530c:	20003448 	.word	0x20003448
 8015310:	200033fc 	.word	0x200033fc
 8015314:	20003400 	.word	0x20003400
 8015318:	2000345c 	.word	0x2000345c
 801531c:	20003464 	.word	0x20003464
 8015320:	2000344c 	.word	0x2000344c
 8015324:	20002f74 	.word	0x20002f74
 8015328:	20002f70 	.word	0x20002f70
 801532c:	20003458 	.word	0x20003458
 8015330:	20003454 	.word	0x20003454

08015334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015334:	b480      	push	{r7}
 8015336:	b085      	sub	sp, #20
 8015338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801533a:	4b36      	ldr	r3, [pc, #216]	; (8015414 <vTaskSwitchContext+0xe0>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d003      	beq.n	801534a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015342:	4b35      	ldr	r3, [pc, #212]	; (8015418 <vTaskSwitchContext+0xe4>)
 8015344:	2201      	movs	r2, #1
 8015346:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015348:	e05e      	b.n	8015408 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 801534a:	4b33      	ldr	r3, [pc, #204]	; (8015418 <vTaskSwitchContext+0xe4>)
 801534c:	2200      	movs	r2, #0
 801534e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015350:	4b32      	ldr	r3, [pc, #200]	; (801541c <vTaskSwitchContext+0xe8>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	4a32      	ldr	r2, [pc, #200]	; (8015420 <vTaskSwitchContext+0xec>)
 8015356:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8015358:	4b31      	ldr	r3, [pc, #196]	; (8015420 <vTaskSwitchContext+0xec>)
 801535a:	681a      	ldr	r2, [r3, #0]
 801535c:	4b31      	ldr	r3, [pc, #196]	; (8015424 <vTaskSwitchContext+0xf0>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	429a      	cmp	r2, r3
 8015362:	d909      	bls.n	8015378 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8015364:	4b30      	ldr	r3, [pc, #192]	; (8015428 <vTaskSwitchContext+0xf4>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801536a:	4a2d      	ldr	r2, [pc, #180]	; (8015420 <vTaskSwitchContext+0xec>)
 801536c:	6810      	ldr	r0, [r2, #0]
 801536e:	4a2d      	ldr	r2, [pc, #180]	; (8015424 <vTaskSwitchContext+0xf0>)
 8015370:	6812      	ldr	r2, [r2, #0]
 8015372:	1a82      	subs	r2, r0, r2
 8015374:	440a      	add	r2, r1
 8015376:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8015378:	4b29      	ldr	r3, [pc, #164]	; (8015420 <vTaskSwitchContext+0xec>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	4a29      	ldr	r2, [pc, #164]	; (8015424 <vTaskSwitchContext+0xf0>)
 801537e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015380:	4b2a      	ldr	r3, [pc, #168]	; (801542c <vTaskSwitchContext+0xf8>)
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	60fb      	str	r3, [r7, #12]
 8015386:	e010      	b.n	80153aa <vTaskSwitchContext+0x76>
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d10a      	bne.n	80153a4 <vTaskSwitchContext+0x70>
	__asm volatile
 801538e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015392:	f383 8811 	msr	BASEPRI, r3
 8015396:	f3bf 8f6f 	isb	sy
 801539a:	f3bf 8f4f 	dsb	sy
 801539e:	607b      	str	r3, [r7, #4]
}
 80153a0:	bf00      	nop
 80153a2:	e7fe      	b.n	80153a2 <vTaskSwitchContext+0x6e>
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	3b01      	subs	r3, #1
 80153a8:	60fb      	str	r3, [r7, #12]
 80153aa:	4921      	ldr	r1, [pc, #132]	; (8015430 <vTaskSwitchContext+0xfc>)
 80153ac:	68fa      	ldr	r2, [r7, #12]
 80153ae:	4613      	mov	r3, r2
 80153b0:	009b      	lsls	r3, r3, #2
 80153b2:	4413      	add	r3, r2
 80153b4:	009b      	lsls	r3, r3, #2
 80153b6:	440b      	add	r3, r1
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d0e4      	beq.n	8015388 <vTaskSwitchContext+0x54>
 80153be:	68fa      	ldr	r2, [r7, #12]
 80153c0:	4613      	mov	r3, r2
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	4413      	add	r3, r2
 80153c6:	009b      	lsls	r3, r3, #2
 80153c8:	4a19      	ldr	r2, [pc, #100]	; (8015430 <vTaskSwitchContext+0xfc>)
 80153ca:	4413      	add	r3, r2
 80153cc:	60bb      	str	r3, [r7, #8]
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	685a      	ldr	r2, [r3, #4]
 80153d4:	68bb      	ldr	r3, [r7, #8]
 80153d6:	605a      	str	r2, [r3, #4]
 80153d8:	68bb      	ldr	r3, [r7, #8]
 80153da:	685a      	ldr	r2, [r3, #4]
 80153dc:	68bb      	ldr	r3, [r7, #8]
 80153de:	3308      	adds	r3, #8
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d104      	bne.n	80153ee <vTaskSwitchContext+0xba>
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	685b      	ldr	r3, [r3, #4]
 80153e8:	685a      	ldr	r2, [r3, #4]
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	605a      	str	r2, [r3, #4]
 80153ee:	68bb      	ldr	r3, [r7, #8]
 80153f0:	685b      	ldr	r3, [r3, #4]
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	4a0c      	ldr	r2, [pc, #48]	; (8015428 <vTaskSwitchContext+0xf4>)
 80153f6:	6013      	str	r3, [r2, #0]
 80153f8:	4a0c      	ldr	r2, [pc, #48]	; (801542c <vTaskSwitchContext+0xf8>)
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80153fe:	4b0a      	ldr	r3, [pc, #40]	; (8015428 <vTaskSwitchContext+0xf4>)
 8015400:	681b      	ldr	r3, [r3, #0]
 8015402:	3358      	adds	r3, #88	; 0x58
 8015404:	4a0b      	ldr	r2, [pc, #44]	; (8015434 <vTaskSwitchContext+0x100>)
 8015406:	6013      	str	r3, [r2, #0]
}
 8015408:	bf00      	nop
 801540a:	3714      	adds	r7, #20
 801540c:	46bd      	mov	sp, r7
 801540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015412:	4770      	bx	lr
 8015414:	2000346c 	.word	0x2000346c
 8015418:	20003458 	.word	0x20003458
 801541c:	2000fa9c 	.word	0x2000fa9c
 8015420:	20003474 	.word	0x20003474
 8015424:	20003470 	.word	0x20003470
 8015428:	20002f70 	.word	0x20002f70
 801542c:	2000344c 	.word	0x2000344c
 8015430:	20002f74 	.word	0x20002f74
 8015434:	200001c8 	.word	0x200001c8

08015438 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8015438:	b580      	push	{r7, lr}
 801543a:	b084      	sub	sp, #16
 801543c:	af00      	add	r7, sp, #0
 801543e:	6078      	str	r0, [r7, #4]
 8015440:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d10a      	bne.n	801545e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8015448:	f04f 0350 	mov.w	r3, #80	; 0x50
 801544c:	f383 8811 	msr	BASEPRI, r3
 8015450:	f3bf 8f6f 	isb	sy
 8015454:	f3bf 8f4f 	dsb	sy
 8015458:	60fb      	str	r3, [r7, #12]
}
 801545a:	bf00      	nop
 801545c:	e7fe      	b.n	801545c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801545e:	4b07      	ldr	r3, [pc, #28]	; (801547c <vTaskPlaceOnEventList+0x44>)
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	3318      	adds	r3, #24
 8015464:	4619      	mov	r1, r3
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f7fe fa23 	bl	80138b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801546c:	2101      	movs	r1, #1
 801546e:	6838      	ldr	r0, [r7, #0]
 8015470:	f000 fd92 	bl	8015f98 <prvAddCurrentTaskToDelayedList>
}
 8015474:	bf00      	nop
 8015476:	3710      	adds	r7, #16
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20002f70 	.word	0x20002f70

08015480 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015480:	b580      	push	{r7, lr}
 8015482:	b086      	sub	sp, #24
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d10a      	bne.n	80154a8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8015492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015496:	f383 8811 	msr	BASEPRI, r3
 801549a:	f3bf 8f6f 	isb	sy
 801549e:	f3bf 8f4f 	dsb	sy
 80154a2:	617b      	str	r3, [r7, #20]
}
 80154a4:	bf00      	nop
 80154a6:	e7fe      	b.n	80154a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80154a8:	4b0a      	ldr	r3, [pc, #40]	; (80154d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	3318      	adds	r3, #24
 80154ae:	4619      	mov	r1, r3
 80154b0:	68f8      	ldr	r0, [r7, #12]
 80154b2:	f7fe f9da 	bl	801386a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d002      	beq.n	80154c2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80154bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80154c0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80154c2:	6879      	ldr	r1, [r7, #4]
 80154c4:	68b8      	ldr	r0, [r7, #8]
 80154c6:	f000 fd67 	bl	8015f98 <prvAddCurrentTaskToDelayedList>
	}
 80154ca:	bf00      	nop
 80154cc:	3718      	adds	r7, #24
 80154ce:	46bd      	mov	sp, r7
 80154d0:	bd80      	pop	{r7, pc}
 80154d2:	bf00      	nop
 80154d4:	20002f70 	.word	0x20002f70

080154d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80154d8:	b580      	push	{r7, lr}
 80154da:	b086      	sub	sp, #24
 80154dc:	af00      	add	r7, sp, #0
 80154de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	68db      	ldr	r3, [r3, #12]
 80154e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80154e8:	693b      	ldr	r3, [r7, #16]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d10a      	bne.n	8015504 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80154ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	60fb      	str	r3, [r7, #12]
}
 8015500:	bf00      	nop
 8015502:	e7fe      	b.n	8015502 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	3318      	adds	r3, #24
 8015508:	4618      	mov	r0, r3
 801550a:	f7fe fa0b 	bl	8013924 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801550e:	4b1e      	ldr	r3, [pc, #120]	; (8015588 <xTaskRemoveFromEventList+0xb0>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d11d      	bne.n	8015552 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015516:	693b      	ldr	r3, [r7, #16]
 8015518:	3304      	adds	r3, #4
 801551a:	4618      	mov	r0, r3
 801551c:	f7fe fa02 	bl	8013924 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015520:	693b      	ldr	r3, [r7, #16]
 8015522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015524:	4b19      	ldr	r3, [pc, #100]	; (801558c <xTaskRemoveFromEventList+0xb4>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	429a      	cmp	r2, r3
 801552a:	d903      	bls.n	8015534 <xTaskRemoveFromEventList+0x5c>
 801552c:	693b      	ldr	r3, [r7, #16]
 801552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015530:	4a16      	ldr	r2, [pc, #88]	; (801558c <xTaskRemoveFromEventList+0xb4>)
 8015532:	6013      	str	r3, [r2, #0]
 8015534:	693b      	ldr	r3, [r7, #16]
 8015536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015538:	4613      	mov	r3, r2
 801553a:	009b      	lsls	r3, r3, #2
 801553c:	4413      	add	r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	4a13      	ldr	r2, [pc, #76]	; (8015590 <xTaskRemoveFromEventList+0xb8>)
 8015542:	441a      	add	r2, r3
 8015544:	693b      	ldr	r3, [r7, #16]
 8015546:	3304      	adds	r3, #4
 8015548:	4619      	mov	r1, r3
 801554a:	4610      	mov	r0, r2
 801554c:	f7fe f98d 	bl	801386a <vListInsertEnd>
 8015550:	e005      	b.n	801555e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015552:	693b      	ldr	r3, [r7, #16]
 8015554:	3318      	adds	r3, #24
 8015556:	4619      	mov	r1, r3
 8015558:	480e      	ldr	r0, [pc, #56]	; (8015594 <xTaskRemoveFromEventList+0xbc>)
 801555a:	f7fe f986 	bl	801386a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801555e:	693b      	ldr	r3, [r7, #16]
 8015560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015562:	4b0d      	ldr	r3, [pc, #52]	; (8015598 <xTaskRemoveFromEventList+0xc0>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015568:	429a      	cmp	r2, r3
 801556a:	d905      	bls.n	8015578 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801556c:	2301      	movs	r3, #1
 801556e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015570:	4b0a      	ldr	r3, [pc, #40]	; (801559c <xTaskRemoveFromEventList+0xc4>)
 8015572:	2201      	movs	r2, #1
 8015574:	601a      	str	r2, [r3, #0]
 8015576:	e001      	b.n	801557c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8015578:	2300      	movs	r3, #0
 801557a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801557c:	697b      	ldr	r3, [r7, #20]
}
 801557e:	4618      	mov	r0, r3
 8015580:	3718      	adds	r7, #24
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}
 8015586:	bf00      	nop
 8015588:	2000346c 	.word	0x2000346c
 801558c:	2000344c 	.word	0x2000344c
 8015590:	20002f74 	.word	0x20002f74
 8015594:	20003404 	.word	0x20003404
 8015598:	20002f70 	.word	0x20002f70
 801559c:	20003458 	.word	0x20003458

080155a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80155a0:	b480      	push	{r7}
 80155a2:	b083      	sub	sp, #12
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80155a8:	4b06      	ldr	r3, [pc, #24]	; (80155c4 <vTaskInternalSetTimeOutState+0x24>)
 80155aa:	681a      	ldr	r2, [r3, #0]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80155b0:	4b05      	ldr	r3, [pc, #20]	; (80155c8 <vTaskInternalSetTimeOutState+0x28>)
 80155b2:	681a      	ldr	r2, [r3, #0]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	605a      	str	r2, [r3, #4]
}
 80155b8:	bf00      	nop
 80155ba:	370c      	adds	r7, #12
 80155bc:	46bd      	mov	sp, r7
 80155be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155c2:	4770      	bx	lr
 80155c4:	2000345c 	.word	0x2000345c
 80155c8:	20003448 	.word	0x20003448

080155cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b088      	sub	sp, #32
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
 80155d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d10a      	bne.n	80155f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80155dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155e0:	f383 8811 	msr	BASEPRI, r3
 80155e4:	f3bf 8f6f 	isb	sy
 80155e8:	f3bf 8f4f 	dsb	sy
 80155ec:	613b      	str	r3, [r7, #16]
}
 80155ee:	bf00      	nop
 80155f0:	e7fe      	b.n	80155f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80155f2:	683b      	ldr	r3, [r7, #0]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d10a      	bne.n	801560e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80155f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155fc:	f383 8811 	msr	BASEPRI, r3
 8015600:	f3bf 8f6f 	isb	sy
 8015604:	f3bf 8f4f 	dsb	sy
 8015608:	60fb      	str	r3, [r7, #12]
}
 801560a:	bf00      	nop
 801560c:	e7fe      	b.n	801560c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801560e:	f001 f991 	bl	8016934 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015612:	4b1d      	ldr	r3, [pc, #116]	; (8015688 <xTaskCheckForTimeOut+0xbc>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	685b      	ldr	r3, [r3, #4]
 801561c:	69ba      	ldr	r2, [r7, #24]
 801561e:	1ad3      	subs	r3, r2, r3
 8015620:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801562a:	d102      	bne.n	8015632 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801562c:	2300      	movs	r3, #0
 801562e:	61fb      	str	r3, [r7, #28]
 8015630:	e023      	b.n	801567a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	681a      	ldr	r2, [r3, #0]
 8015636:	4b15      	ldr	r3, [pc, #84]	; (801568c <xTaskCheckForTimeOut+0xc0>)
 8015638:	681b      	ldr	r3, [r3, #0]
 801563a:	429a      	cmp	r2, r3
 801563c:	d007      	beq.n	801564e <xTaskCheckForTimeOut+0x82>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	685b      	ldr	r3, [r3, #4]
 8015642:	69ba      	ldr	r2, [r7, #24]
 8015644:	429a      	cmp	r2, r3
 8015646:	d302      	bcc.n	801564e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8015648:	2301      	movs	r3, #1
 801564a:	61fb      	str	r3, [r7, #28]
 801564c:	e015      	b.n	801567a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801564e:	683b      	ldr	r3, [r7, #0]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	697a      	ldr	r2, [r7, #20]
 8015654:	429a      	cmp	r2, r3
 8015656:	d20b      	bcs.n	8015670 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	681a      	ldr	r2, [r3, #0]
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	1ad2      	subs	r2, r2, r3
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015664:	6878      	ldr	r0, [r7, #4]
 8015666:	f7ff ff9b 	bl	80155a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801566a:	2300      	movs	r3, #0
 801566c:	61fb      	str	r3, [r7, #28]
 801566e:	e004      	b.n	801567a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	2200      	movs	r2, #0
 8015674:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015676:	2301      	movs	r3, #1
 8015678:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801567a:	f001 f98b 	bl	8016994 <vPortExitCritical>

	return xReturn;
 801567e:	69fb      	ldr	r3, [r7, #28]
}
 8015680:	4618      	mov	r0, r3
 8015682:	3720      	adds	r7, #32
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	20003448 	.word	0x20003448
 801568c:	2000345c 	.word	0x2000345c

08015690 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015690:	b480      	push	{r7}
 8015692:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015694:	4b03      	ldr	r3, [pc, #12]	; (80156a4 <vTaskMissedYield+0x14>)
 8015696:	2201      	movs	r2, #1
 8015698:	601a      	str	r2, [r3, #0]
}
 801569a:	bf00      	nop
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr
 80156a4:	20003458 	.word	0x20003458

080156a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80156a8:	b580      	push	{r7, lr}
 80156aa:	b082      	sub	sp, #8
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80156b0:	f000 f852 	bl	8015758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80156b4:	4b06      	ldr	r3, [pc, #24]	; (80156d0 <prvIdleTask+0x28>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	2b01      	cmp	r3, #1
 80156ba:	d9f9      	bls.n	80156b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80156bc:	4b05      	ldr	r3, [pc, #20]	; (80156d4 <prvIdleTask+0x2c>)
 80156be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156c2:	601a      	str	r2, [r3, #0]
 80156c4:	f3bf 8f4f 	dsb	sy
 80156c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80156cc:	e7f0      	b.n	80156b0 <prvIdleTask+0x8>
 80156ce:	bf00      	nop
 80156d0:	20002f74 	.word	0x20002f74
 80156d4:	e000ed04 	.word	0xe000ed04

080156d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80156d8:	b580      	push	{r7, lr}
 80156da:	b082      	sub	sp, #8
 80156dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156de:	2300      	movs	r3, #0
 80156e0:	607b      	str	r3, [r7, #4]
 80156e2:	e00c      	b.n	80156fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80156e4:	687a      	ldr	r2, [r7, #4]
 80156e6:	4613      	mov	r3, r2
 80156e8:	009b      	lsls	r3, r3, #2
 80156ea:	4413      	add	r3, r2
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	4a12      	ldr	r2, [pc, #72]	; (8015738 <prvInitialiseTaskLists+0x60>)
 80156f0:	4413      	add	r3, r2
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fe f88c 	bl	8013810 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	3301      	adds	r3, #1
 80156fc:	607b      	str	r3, [r7, #4]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	2b37      	cmp	r3, #55	; 0x37
 8015702:	d9ef      	bls.n	80156e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015704:	480d      	ldr	r0, [pc, #52]	; (801573c <prvInitialiseTaskLists+0x64>)
 8015706:	f7fe f883 	bl	8013810 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801570a:	480d      	ldr	r0, [pc, #52]	; (8015740 <prvInitialiseTaskLists+0x68>)
 801570c:	f7fe f880 	bl	8013810 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015710:	480c      	ldr	r0, [pc, #48]	; (8015744 <prvInitialiseTaskLists+0x6c>)
 8015712:	f7fe f87d 	bl	8013810 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015716:	480c      	ldr	r0, [pc, #48]	; (8015748 <prvInitialiseTaskLists+0x70>)
 8015718:	f7fe f87a 	bl	8013810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801571c:	480b      	ldr	r0, [pc, #44]	; (801574c <prvInitialiseTaskLists+0x74>)
 801571e:	f7fe f877 	bl	8013810 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015722:	4b0b      	ldr	r3, [pc, #44]	; (8015750 <prvInitialiseTaskLists+0x78>)
 8015724:	4a05      	ldr	r2, [pc, #20]	; (801573c <prvInitialiseTaskLists+0x64>)
 8015726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015728:	4b0a      	ldr	r3, [pc, #40]	; (8015754 <prvInitialiseTaskLists+0x7c>)
 801572a:	4a05      	ldr	r2, [pc, #20]	; (8015740 <prvInitialiseTaskLists+0x68>)
 801572c:	601a      	str	r2, [r3, #0]
}
 801572e:	bf00      	nop
 8015730:	3708      	adds	r7, #8
 8015732:	46bd      	mov	sp, r7
 8015734:	bd80      	pop	{r7, pc}
 8015736:	bf00      	nop
 8015738:	20002f74 	.word	0x20002f74
 801573c:	200033d4 	.word	0x200033d4
 8015740:	200033e8 	.word	0x200033e8
 8015744:	20003404 	.word	0x20003404
 8015748:	20003418 	.word	0x20003418
 801574c:	20003430 	.word	0x20003430
 8015750:	200033fc 	.word	0x200033fc
 8015754:	20003400 	.word	0x20003400

08015758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801575e:	e019      	b.n	8015794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015760:	f001 f8e8 	bl	8016934 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015764:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <prvCheckTasksWaitingTermination+0x50>)
 8015766:	68db      	ldr	r3, [r3, #12]
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	3304      	adds	r3, #4
 8015770:	4618      	mov	r0, r3
 8015772:	f7fe f8d7 	bl	8013924 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015776:	4b0d      	ldr	r3, [pc, #52]	; (80157ac <prvCheckTasksWaitingTermination+0x54>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	3b01      	subs	r3, #1
 801577c:	4a0b      	ldr	r2, [pc, #44]	; (80157ac <prvCheckTasksWaitingTermination+0x54>)
 801577e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015780:	4b0b      	ldr	r3, [pc, #44]	; (80157b0 <prvCheckTasksWaitingTermination+0x58>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	3b01      	subs	r3, #1
 8015786:	4a0a      	ldr	r2, [pc, #40]	; (80157b0 <prvCheckTasksWaitingTermination+0x58>)
 8015788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801578a:	f001 f903 	bl	8016994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801578e:	6878      	ldr	r0, [r7, #4]
 8015790:	f000 f8e4 	bl	801595c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015794:	4b06      	ldr	r3, [pc, #24]	; (80157b0 <prvCheckTasksWaitingTermination+0x58>)
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d1e1      	bne.n	8015760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801579c:	bf00      	nop
 801579e:	bf00      	nop
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	20003418 	.word	0x20003418
 80157ac:	20003444 	.word	0x20003444
 80157b0:	2000342c 	.word	0x2000342c

080157b4 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b086      	sub	sp, #24
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	60f8      	str	r0, [r7, #12]
 80157bc:	60b9      	str	r1, [r7, #8]
 80157be:	607a      	str	r2, [r7, #4]
 80157c0:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d102      	bne.n	80157ce <vTaskGetInfo+0x1a>
 80157c8:	4b2c      	ldr	r3, [pc, #176]	; (801587c <vTaskGetInfo+0xc8>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	e000      	b.n	80157d0 <vTaskGetInfo+0x1c>
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80157d2:	68bb      	ldr	r3, [r7, #8]
 80157d4:	697a      	ldr	r2, [r7, #20]
 80157d6:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80157d8:	697b      	ldr	r3, [r7, #20]
 80157da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80157e2:	697b      	ldr	r3, [r7, #20]
 80157e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157e6:	68bb      	ldr	r3, [r7, #8]
 80157e8:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80157ea:	697b      	ldr	r3, [r7, #20]
 80157ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80157f2:	697b      	ldr	r3, [r7, #20]
 80157f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80157fa:	697b      	ldr	r3, [r7, #20]
 80157fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8015802:	697b      	ldr	r3, [r7, #20]
 8015804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801580a:	78fb      	ldrb	r3, [r7, #3]
 801580c:	2b05      	cmp	r3, #5
 801580e:	d01a      	beq.n	8015846 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8015810:	4b1a      	ldr	r3, [pc, #104]	; (801587c <vTaskGetInfo+0xc8>)
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	697a      	ldr	r2, [r7, #20]
 8015816:	429a      	cmp	r2, r3
 8015818:	d103      	bne.n	8015822 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801581a:	68bb      	ldr	r3, [r7, #8]
 801581c:	2200      	movs	r2, #0
 801581e:	731a      	strb	r2, [r3, #12]
 8015820:	e018      	b.n	8015854 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	78fa      	ldrb	r2, [r7, #3]
 8015826:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8015828:	78fb      	ldrb	r3, [r7, #3]
 801582a:	2b03      	cmp	r3, #3
 801582c:	d112      	bne.n	8015854 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 801582e:	f7ff fb7b 	bl	8014f28 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015832:	697b      	ldr	r3, [r7, #20]
 8015834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015836:	2b00      	cmp	r3, #0
 8015838:	d002      	beq.n	8015840 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801583a:	68bb      	ldr	r3, [r7, #8]
 801583c:	2202      	movs	r2, #2
 801583e:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8015840:	f7ff fb80 	bl	8014f44 <xTaskResumeAll>
 8015844:	e006      	b.n	8015854 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8015846:	6978      	ldr	r0, [r7, #20]
 8015848:	f7ff fa94 	bl	8014d74 <eTaskGetState>
 801584c:	4603      	mov	r3, r0
 801584e:	461a      	mov	r2, r3
 8015850:	68bb      	ldr	r3, [r7, #8]
 8015852:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2b00      	cmp	r3, #0
 8015858:	d009      	beq.n	801586e <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801585a:	697b      	ldr	r3, [r7, #20]
 801585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801585e:	4618      	mov	r0, r3
 8015860:	f000 f860 	bl	8015924 <prvTaskCheckFreeStackSpace>
 8015864:	4603      	mov	r3, r0
 8015866:	461a      	mov	r2, r3
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 801586c:	e002      	b.n	8015874 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	2200      	movs	r2, #0
 8015872:	841a      	strh	r2, [r3, #32]
	}
 8015874:	bf00      	nop
 8015876:	3718      	adds	r7, #24
 8015878:	46bd      	mov	sp, r7
 801587a:	bd80      	pop	{r7, pc}
 801587c:	20002f70 	.word	0x20002f70

08015880 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8015880:	b580      	push	{r7, lr}
 8015882:	b08a      	sub	sp, #40	; 0x28
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	4613      	mov	r3, r2
 801588c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	2b00      	cmp	r3, #0
 8015898:	d03f      	beq.n	801591a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	623b      	str	r3, [r7, #32]
 801589e:	6a3b      	ldr	r3, [r7, #32]
 80158a0:	685b      	ldr	r3, [r3, #4]
 80158a2:	685a      	ldr	r2, [r3, #4]
 80158a4:	6a3b      	ldr	r3, [r7, #32]
 80158a6:	605a      	str	r2, [r3, #4]
 80158a8:	6a3b      	ldr	r3, [r7, #32]
 80158aa:	685a      	ldr	r2, [r3, #4]
 80158ac:	6a3b      	ldr	r3, [r7, #32]
 80158ae:	3308      	adds	r3, #8
 80158b0:	429a      	cmp	r2, r3
 80158b2:	d104      	bne.n	80158be <prvListTasksWithinSingleList+0x3e>
 80158b4:	6a3b      	ldr	r3, [r7, #32]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	685a      	ldr	r2, [r3, #4]
 80158ba:	6a3b      	ldr	r3, [r7, #32]
 80158bc:	605a      	str	r2, [r3, #4]
 80158be:	6a3b      	ldr	r3, [r7, #32]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	68db      	ldr	r3, [r3, #12]
 80158c4:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	61bb      	str	r3, [r7, #24]
 80158ca:	69bb      	ldr	r3, [r7, #24]
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	685a      	ldr	r2, [r3, #4]
 80158d0:	69bb      	ldr	r3, [r7, #24]
 80158d2:	605a      	str	r2, [r3, #4]
 80158d4:	69bb      	ldr	r3, [r7, #24]
 80158d6:	685a      	ldr	r2, [r3, #4]
 80158d8:	69bb      	ldr	r3, [r7, #24]
 80158da:	3308      	adds	r3, #8
 80158dc:	429a      	cmp	r2, r3
 80158de:	d104      	bne.n	80158ea <prvListTasksWithinSingleList+0x6a>
 80158e0:	69bb      	ldr	r3, [r7, #24]
 80158e2:	685b      	ldr	r3, [r3, #4]
 80158e4:	685a      	ldr	r2, [r3, #4]
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	605a      	str	r2, [r3, #4]
 80158ea:	69bb      	ldr	r3, [r7, #24]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	68db      	ldr	r3, [r3, #12]
 80158f0:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80158f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158f4:	4613      	mov	r3, r2
 80158f6:	00db      	lsls	r3, r3, #3
 80158f8:	4413      	add	r3, r2
 80158fa:	009b      	lsls	r3, r3, #2
 80158fc:	461a      	mov	r2, r3
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	1899      	adds	r1, r3, r2
 8015902:	79fb      	ldrb	r3, [r7, #7]
 8015904:	2201      	movs	r2, #1
 8015906:	6978      	ldr	r0, [r7, #20]
 8015908:	f7ff ff54 	bl	80157b4 <vTaskGetInfo>
				uxTask++;
 801590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801590e:	3301      	adds	r3, #1
 8015910:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8015912:	697a      	ldr	r2, [r7, #20]
 8015914:	69fb      	ldr	r3, [r7, #28]
 8015916:	429a      	cmp	r2, r3
 8015918:	d1d5      	bne.n	80158c6 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801591c:	4618      	mov	r0, r3
 801591e:	3728      	adds	r7, #40	; 0x28
 8015920:	46bd      	mov	sp, r7
 8015922:	bd80      	pop	{r7, pc}

08015924 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8015924:	b480      	push	{r7}
 8015926:	b085      	sub	sp, #20
 8015928:	af00      	add	r7, sp, #0
 801592a:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 801592c:	2300      	movs	r3, #0
 801592e:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8015930:	e005      	b.n	801593e <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	3301      	adds	r3, #1
 8015936:	607b      	str	r3, [r7, #4]
			ulCount++;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	3301      	adds	r3, #1
 801593c:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	781b      	ldrb	r3, [r3, #0]
 8015942:	2ba5      	cmp	r3, #165	; 0xa5
 8015944:	d0f5      	beq.n	8015932 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	089b      	lsrs	r3, r3, #2
 801594a:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	b29b      	uxth	r3, r3
	}
 8015950:	4618      	mov	r0, r3
 8015952:	3714      	adds	r7, #20
 8015954:	46bd      	mov	sp, r7
 8015956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595a:	4770      	bx	lr

0801595c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801595c:	b580      	push	{r7, lr}
 801595e:	b084      	sub	sp, #16
 8015960:	af00      	add	r7, sp, #0
 8015962:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	3358      	adds	r3, #88	; 0x58
 8015968:	4618      	mov	r0, r3
 801596a:	f002 fea9 	bl	80186c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8015974:	2b00      	cmp	r3, #0
 8015976:	d108      	bne.n	801598a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801597c:	4618      	mov	r0, r3
 801597e:	f001 f9c7 	bl	8016d10 <vPortFree>
				vPortFree( pxTCB );
 8015982:	6878      	ldr	r0, [r7, #4]
 8015984:	f001 f9c4 	bl	8016d10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015988:	e018      	b.n	80159bc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8015990:	2b01      	cmp	r3, #1
 8015992:	d103      	bne.n	801599c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f001 f9bb 	bl	8016d10 <vPortFree>
	}
 801599a:	e00f      	b.n	80159bc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80159a2:	2b02      	cmp	r3, #2
 80159a4:	d00a      	beq.n	80159bc <prvDeleteTCB+0x60>
	__asm volatile
 80159a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159aa:	f383 8811 	msr	BASEPRI, r3
 80159ae:	f3bf 8f6f 	isb	sy
 80159b2:	f3bf 8f4f 	dsb	sy
 80159b6:	60fb      	str	r3, [r7, #12]
}
 80159b8:	bf00      	nop
 80159ba:	e7fe      	b.n	80159ba <prvDeleteTCB+0x5e>
	}
 80159bc:	bf00      	nop
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80159ca:	4b0c      	ldr	r3, [pc, #48]	; (80159fc <prvResetNextTaskUnblockTime+0x38>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d104      	bne.n	80159de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80159d4:	4b0a      	ldr	r3, [pc, #40]	; (8015a00 <prvResetNextTaskUnblockTime+0x3c>)
 80159d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80159dc:	e008      	b.n	80159f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159de:	4b07      	ldr	r3, [pc, #28]	; (80159fc <prvResetNextTaskUnblockTime+0x38>)
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	68db      	ldr	r3, [r3, #12]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	685b      	ldr	r3, [r3, #4]
 80159ec:	4a04      	ldr	r2, [pc, #16]	; (8015a00 <prvResetNextTaskUnblockTime+0x3c>)
 80159ee:	6013      	str	r3, [r2, #0]
}
 80159f0:	bf00      	nop
 80159f2:	370c      	adds	r7, #12
 80159f4:	46bd      	mov	sp, r7
 80159f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159fa:	4770      	bx	lr
 80159fc:	200033fc 	.word	0x200033fc
 8015a00:	20003464 	.word	0x20003464

08015a04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015a04:	b480      	push	{r7}
 8015a06:	b083      	sub	sp, #12
 8015a08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015a0a:	4b0b      	ldr	r3, [pc, #44]	; (8015a38 <xTaskGetSchedulerState+0x34>)
 8015a0c:	681b      	ldr	r3, [r3, #0]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d102      	bne.n	8015a18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015a12:	2301      	movs	r3, #1
 8015a14:	607b      	str	r3, [r7, #4]
 8015a16:	e008      	b.n	8015a2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015a18:	4b08      	ldr	r3, [pc, #32]	; (8015a3c <xTaskGetSchedulerState+0x38>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d102      	bne.n	8015a26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015a20:	2302      	movs	r3, #2
 8015a22:	607b      	str	r3, [r7, #4]
 8015a24:	e001      	b.n	8015a2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015a26:	2300      	movs	r3, #0
 8015a28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015a2a:	687b      	ldr	r3, [r7, #4]
	}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	370c      	adds	r7, #12
 8015a30:	46bd      	mov	sp, r7
 8015a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a36:	4770      	bx	lr
 8015a38:	20003450 	.word	0x20003450
 8015a3c:	2000346c 	.word	0x2000346c

08015a40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b084      	sub	sp, #16
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d051      	beq.n	8015afa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015a56:	68bb      	ldr	r3, [r7, #8]
 8015a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a5a:	4b2a      	ldr	r3, [pc, #168]	; (8015b04 <xTaskPriorityInherit+0xc4>)
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a60:	429a      	cmp	r2, r3
 8015a62:	d241      	bcs.n	8015ae8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	699b      	ldr	r3, [r3, #24]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	db06      	blt.n	8015a7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a6c:	4b25      	ldr	r3, [pc, #148]	; (8015b04 <xTaskPriorityInherit+0xc4>)
 8015a6e:	681b      	ldr	r3, [r3, #0]
 8015a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015a76:	68bb      	ldr	r3, [r7, #8]
 8015a78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015a7a:	68bb      	ldr	r3, [r7, #8]
 8015a7c:	6959      	ldr	r1, [r3, #20]
 8015a7e:	68bb      	ldr	r3, [r7, #8]
 8015a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015a82:	4613      	mov	r3, r2
 8015a84:	009b      	lsls	r3, r3, #2
 8015a86:	4413      	add	r3, r2
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	4a1f      	ldr	r2, [pc, #124]	; (8015b08 <xTaskPriorityInherit+0xc8>)
 8015a8c:	4413      	add	r3, r2
 8015a8e:	4299      	cmp	r1, r3
 8015a90:	d122      	bne.n	8015ad8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015a92:	68bb      	ldr	r3, [r7, #8]
 8015a94:	3304      	adds	r3, #4
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fd ff44 	bl	8013924 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015a9c:	4b19      	ldr	r3, [pc, #100]	; (8015b04 <xTaskPriorityInherit+0xc4>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aa2:	68bb      	ldr	r3, [r7, #8]
 8015aa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015aaa:	4b18      	ldr	r3, [pc, #96]	; (8015b0c <xTaskPriorityInherit+0xcc>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	429a      	cmp	r2, r3
 8015ab0:	d903      	bls.n	8015aba <xTaskPriorityInherit+0x7a>
 8015ab2:	68bb      	ldr	r3, [r7, #8]
 8015ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015ab6:	4a15      	ldr	r2, [pc, #84]	; (8015b0c <xTaskPriorityInherit+0xcc>)
 8015ab8:	6013      	str	r3, [r2, #0]
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015abe:	4613      	mov	r3, r2
 8015ac0:	009b      	lsls	r3, r3, #2
 8015ac2:	4413      	add	r3, r2
 8015ac4:	009b      	lsls	r3, r3, #2
 8015ac6:	4a10      	ldr	r2, [pc, #64]	; (8015b08 <xTaskPriorityInherit+0xc8>)
 8015ac8:	441a      	add	r2, r3
 8015aca:	68bb      	ldr	r3, [r7, #8]
 8015acc:	3304      	adds	r3, #4
 8015ace:	4619      	mov	r1, r3
 8015ad0:	4610      	mov	r0, r2
 8015ad2:	f7fd feca 	bl	801386a <vListInsertEnd>
 8015ad6:	e004      	b.n	8015ae2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015ad8:	4b0a      	ldr	r3, [pc, #40]	; (8015b04 <xTaskPriorityInherit+0xc4>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ade:	68bb      	ldr	r3, [r7, #8]
 8015ae0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015ae2:	2301      	movs	r3, #1
 8015ae4:	60fb      	str	r3, [r7, #12]
 8015ae6:	e008      	b.n	8015afa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015aec:	4b05      	ldr	r3, [pc, #20]	; (8015b04 <xTaskPriorityInherit+0xc4>)
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015af2:	429a      	cmp	r2, r3
 8015af4:	d201      	bcs.n	8015afa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015af6:	2301      	movs	r3, #1
 8015af8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015afa:	68fb      	ldr	r3, [r7, #12]
	}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3710      	adds	r7, #16
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}
 8015b04:	20002f70 	.word	0x20002f70
 8015b08:	20002f74 	.word	0x20002f74
 8015b0c:	2000344c 	.word	0x2000344c

08015b10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d056      	beq.n	8015bd4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015b26:	4b2e      	ldr	r3, [pc, #184]	; (8015be0 <xTaskPriorityDisinherit+0xd0>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	693a      	ldr	r2, [r7, #16]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d00a      	beq.n	8015b46 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b34:	f383 8811 	msr	BASEPRI, r3
 8015b38:	f3bf 8f6f 	isb	sy
 8015b3c:	f3bf 8f4f 	dsb	sy
 8015b40:	60fb      	str	r3, [r7, #12]
}
 8015b42:	bf00      	nop
 8015b44:	e7fe      	b.n	8015b44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d10a      	bne.n	8015b64 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b52:	f383 8811 	msr	BASEPRI, r3
 8015b56:	f3bf 8f6f 	isb	sy
 8015b5a:	f3bf 8f4f 	dsb	sy
 8015b5e:	60bb      	str	r3, [r7, #8]
}
 8015b60:	bf00      	nop
 8015b62:	e7fe      	b.n	8015b62 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015b64:	693b      	ldr	r3, [r7, #16]
 8015b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b68:	1e5a      	subs	r2, r3, #1
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015b6e:	693b      	ldr	r3, [r7, #16]
 8015b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d02c      	beq.n	8015bd4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d128      	bne.n	8015bd4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015b82:	693b      	ldr	r3, [r7, #16]
 8015b84:	3304      	adds	r3, #4
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fd fecc 	bl	8013924 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015b8c:	693b      	ldr	r3, [r7, #16]
 8015b8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015b90:	693b      	ldr	r3, [r7, #16]
 8015b92:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b98:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015ba0:	693b      	ldr	r3, [r7, #16]
 8015ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ba4:	4b0f      	ldr	r3, [pc, #60]	; (8015be4 <xTaskPriorityDisinherit+0xd4>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d903      	bls.n	8015bb4 <xTaskPriorityDisinherit+0xa4>
 8015bac:	693b      	ldr	r3, [r7, #16]
 8015bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bb0:	4a0c      	ldr	r2, [pc, #48]	; (8015be4 <xTaskPriorityDisinherit+0xd4>)
 8015bb2:	6013      	str	r3, [r2, #0]
 8015bb4:	693b      	ldr	r3, [r7, #16]
 8015bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bb8:	4613      	mov	r3, r2
 8015bba:	009b      	lsls	r3, r3, #2
 8015bbc:	4413      	add	r3, r2
 8015bbe:	009b      	lsls	r3, r3, #2
 8015bc0:	4a09      	ldr	r2, [pc, #36]	; (8015be8 <xTaskPriorityDisinherit+0xd8>)
 8015bc2:	441a      	add	r2, r3
 8015bc4:	693b      	ldr	r3, [r7, #16]
 8015bc6:	3304      	adds	r3, #4
 8015bc8:	4619      	mov	r1, r3
 8015bca:	4610      	mov	r0, r2
 8015bcc:	f7fd fe4d 	bl	801386a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015bd4:	697b      	ldr	r3, [r7, #20]
	}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3718      	adds	r7, #24
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	20002f70 	.word	0x20002f70
 8015be4:	2000344c 	.word	0x2000344c
 8015be8:	20002f74 	.word	0x20002f74

08015bec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b088      	sub	sp, #32
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
 8015bf4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015bfa:	2301      	movs	r3, #1
 8015bfc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d06a      	beq.n	8015cda <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015c04:	69bb      	ldr	r3, [r7, #24]
 8015c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d10a      	bne.n	8015c22 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c10:	f383 8811 	msr	BASEPRI, r3
 8015c14:	f3bf 8f6f 	isb	sy
 8015c18:	f3bf 8f4f 	dsb	sy
 8015c1c:	60fb      	str	r3, [r7, #12]
}
 8015c1e:	bf00      	nop
 8015c20:	e7fe      	b.n	8015c20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015c22:	69bb      	ldr	r3, [r7, #24]
 8015c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c26:	683a      	ldr	r2, [r7, #0]
 8015c28:	429a      	cmp	r2, r3
 8015c2a:	d902      	bls.n	8015c32 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	61fb      	str	r3, [r7, #28]
 8015c30:	e002      	b.n	8015c38 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015c32:	69bb      	ldr	r3, [r7, #24]
 8015c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c36:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015c38:	69bb      	ldr	r3, [r7, #24]
 8015c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c3c:	69fa      	ldr	r2, [r7, #28]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d04b      	beq.n	8015cda <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015c42:	69bb      	ldr	r3, [r7, #24]
 8015c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c46:	697a      	ldr	r2, [r7, #20]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d146      	bne.n	8015cda <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015c4c:	4b25      	ldr	r3, [pc, #148]	; (8015ce4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	69ba      	ldr	r2, [r7, #24]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d10a      	bne.n	8015c6c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8015c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c5a:	f383 8811 	msr	BASEPRI, r3
 8015c5e:	f3bf 8f6f 	isb	sy
 8015c62:	f3bf 8f4f 	dsb	sy
 8015c66:	60bb      	str	r3, [r7, #8]
}
 8015c68:	bf00      	nop
 8015c6a:	e7fe      	b.n	8015c6a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015c6c:	69bb      	ldr	r3, [r7, #24]
 8015c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c70:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015c72:	69bb      	ldr	r3, [r7, #24]
 8015c74:	69fa      	ldr	r2, [r7, #28]
 8015c76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015c78:	69bb      	ldr	r3, [r7, #24]
 8015c7a:	699b      	ldr	r3, [r3, #24]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	db04      	blt.n	8015c8a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c80:	69fb      	ldr	r3, [r7, #28]
 8015c82:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015c8a:	69bb      	ldr	r3, [r7, #24]
 8015c8c:	6959      	ldr	r1, [r3, #20]
 8015c8e:	693a      	ldr	r2, [r7, #16]
 8015c90:	4613      	mov	r3, r2
 8015c92:	009b      	lsls	r3, r3, #2
 8015c94:	4413      	add	r3, r2
 8015c96:	009b      	lsls	r3, r3, #2
 8015c98:	4a13      	ldr	r2, [pc, #76]	; (8015ce8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015c9a:	4413      	add	r3, r2
 8015c9c:	4299      	cmp	r1, r3
 8015c9e:	d11c      	bne.n	8015cda <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ca0:	69bb      	ldr	r3, [r7, #24]
 8015ca2:	3304      	adds	r3, #4
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7fd fe3d 	bl	8013924 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cae:	4b0f      	ldr	r3, [pc, #60]	; (8015cec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d903      	bls.n	8015cbe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cba:	4a0c      	ldr	r2, [pc, #48]	; (8015cec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015cbc:	6013      	str	r3, [r2, #0]
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cc2:	4613      	mov	r3, r2
 8015cc4:	009b      	lsls	r3, r3, #2
 8015cc6:	4413      	add	r3, r2
 8015cc8:	009b      	lsls	r3, r3, #2
 8015cca:	4a07      	ldr	r2, [pc, #28]	; (8015ce8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015ccc:	441a      	add	r2, r3
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	3304      	adds	r3, #4
 8015cd2:	4619      	mov	r1, r3
 8015cd4:	4610      	mov	r0, r2
 8015cd6:	f7fd fdc8 	bl	801386a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015cda:	bf00      	nop
 8015cdc:	3720      	adds	r7, #32
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	20002f70 	.word	0x20002f70
 8015ce8:	20002f74 	.word	0x20002f74
 8015cec:	2000344c 	.word	0x2000344c

08015cf0 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
 8015cf8:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8015cfa:	6839      	ldr	r1, [r7, #0]
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f002 fdbd 	bl	801887c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f7ea fa64 	bl	80001d0 <strlen>
 8015d08:	60f8      	str	r0, [r7, #12]
 8015d0a:	e007      	b.n	8015d1c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8015d0c:	687a      	ldr	r2, [r7, #4]
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	4413      	add	r3, r2
 8015d12:	2220      	movs	r2, #32
 8015d14:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	60fb      	str	r3, [r7, #12]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2b0e      	cmp	r3, #14
 8015d20:	d9f4      	bls.n	8015d0c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8015d22:	687a      	ldr	r2, [r7, #4]
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	4413      	add	r3, r2
 8015d28:	2200      	movs	r2, #0
 8015d2a:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8015d2c:	687a      	ldr	r2, [r7, #4]
 8015d2e:	68fb      	ldr	r3, [r7, #12]
 8015d30:	4413      	add	r3, r2
	}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
	...

08015d3c <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8015d3c:	b590      	push	{r4, r7, lr}
 8015d3e:	b089      	sub	sp, #36	; 0x24
 8015d40:	af02      	add	r7, sp, #8
 8015d42:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8015d4a:	4b45      	ldr	r3, [pc, #276]	; (8015e60 <vTaskList+0x124>)
 8015d4c:	681b      	ldr	r3, [r3, #0]
 8015d4e:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8015d50:	4b43      	ldr	r3, [pc, #268]	; (8015e60 <vTaskList+0x124>)
 8015d52:	681a      	ldr	r2, [r3, #0]
 8015d54:	4613      	mov	r3, r2
 8015d56:	00db      	lsls	r3, r3, #3
 8015d58:	4413      	add	r3, r2
 8015d5a:	009b      	lsls	r3, r3, #2
 8015d5c:	4618      	mov	r0, r3
 8015d5e:	f000 ff0b 	bl	8016b78 <pvPortMalloc>
 8015d62:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8015d64:	68bb      	ldr	r3, [r7, #8]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d076      	beq.n	8015e58 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8015d6a:	2200      	movs	r2, #0
 8015d6c:	68f9      	ldr	r1, [r7, #12]
 8015d6e:	68b8      	ldr	r0, [r7, #8]
 8015d70:	f7ff f996 	bl	80150a0 <uxTaskGetSystemState>
 8015d74:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8015d76:	2300      	movs	r3, #0
 8015d78:	617b      	str	r3, [r7, #20]
 8015d7a:	e066      	b.n	8015e4a <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015d7c:	697a      	ldr	r2, [r7, #20]
 8015d7e:	4613      	mov	r3, r2
 8015d80:	00db      	lsls	r3, r3, #3
 8015d82:	4413      	add	r3, r2
 8015d84:	009b      	lsls	r3, r3, #2
 8015d86:	461a      	mov	r2, r3
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	4413      	add	r3, r2
 8015d8c:	7b1b      	ldrb	r3, [r3, #12]
 8015d8e:	2b04      	cmp	r3, #4
 8015d90:	d81b      	bhi.n	8015dca <vTaskList+0x8e>
 8015d92:	a201      	add	r2, pc, #4	; (adr r2, 8015d98 <vTaskList+0x5c>)
 8015d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d98:	08015dad 	.word	0x08015dad
 8015d9c:	08015db3 	.word	0x08015db3
 8015da0:	08015db9 	.word	0x08015db9
 8015da4:	08015dbf 	.word	0x08015dbf
 8015da8:	08015dc5 	.word	0x08015dc5
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8015dac:	2358      	movs	r3, #88	; 0x58
 8015dae:	74fb      	strb	r3, [r7, #19]
										break;
 8015db0:	e00e      	b.n	8015dd0 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8015db2:	2352      	movs	r3, #82	; 0x52
 8015db4:	74fb      	strb	r3, [r7, #19]
										break;
 8015db6:	e00b      	b.n	8015dd0 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8015db8:	2342      	movs	r3, #66	; 0x42
 8015dba:	74fb      	strb	r3, [r7, #19]
										break;
 8015dbc:	e008      	b.n	8015dd0 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8015dbe:	2353      	movs	r3, #83	; 0x53
 8015dc0:	74fb      	strb	r3, [r7, #19]
										break;
 8015dc2:	e005      	b.n	8015dd0 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8015dc4:	2344      	movs	r3, #68	; 0x44
 8015dc6:	74fb      	strb	r3, [r7, #19]
										break;
 8015dc8:	e002      	b.n	8015dd0 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	74fb      	strb	r3, [r7, #19]
										break;
 8015dce:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015dd0:	697a      	ldr	r2, [r7, #20]
 8015dd2:	4613      	mov	r3, r2
 8015dd4:	00db      	lsls	r3, r3, #3
 8015dd6:	4413      	add	r3, r2
 8015dd8:	009b      	lsls	r3, r3, #2
 8015dda:	461a      	mov	r2, r3
 8015ddc:	68bb      	ldr	r3, [r7, #8]
 8015dde:	4413      	add	r3, r2
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	4619      	mov	r1, r3
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f7ff ff83 	bl	8015cf0 <prvWriteNameToBuffer>
 8015dea:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015dec:	7cf9      	ldrb	r1, [r7, #19]
 8015dee:	697a      	ldr	r2, [r7, #20]
 8015df0:	4613      	mov	r3, r2
 8015df2:	00db      	lsls	r3, r3, #3
 8015df4:	4413      	add	r3, r2
 8015df6:	009b      	lsls	r3, r3, #2
 8015df8:	461a      	mov	r2, r3
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	4413      	add	r3, r2
 8015dfe:	6918      	ldr	r0, [r3, #16]
 8015e00:	697a      	ldr	r2, [r7, #20]
 8015e02:	4613      	mov	r3, r2
 8015e04:	00db      	lsls	r3, r3, #3
 8015e06:	4413      	add	r3, r2
 8015e08:	009b      	lsls	r3, r3, #2
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	68bb      	ldr	r3, [r7, #8]
 8015e0e:	4413      	add	r3, r2
 8015e10:	8c1b      	ldrh	r3, [r3, #32]
 8015e12:	461c      	mov	r4, r3
 8015e14:	697a      	ldr	r2, [r7, #20]
 8015e16:	4613      	mov	r3, r2
 8015e18:	00db      	lsls	r3, r3, #3
 8015e1a:	4413      	add	r3, r2
 8015e1c:	009b      	lsls	r3, r3, #2
 8015e1e:	461a      	mov	r2, r3
 8015e20:	68bb      	ldr	r3, [r7, #8]
 8015e22:	4413      	add	r3, r2
 8015e24:	689b      	ldr	r3, [r3, #8]
 8015e26:	9301      	str	r3, [sp, #4]
 8015e28:	9400      	str	r4, [sp, #0]
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	460a      	mov	r2, r1
 8015e2e:	490d      	ldr	r1, [pc, #52]	; (8015e64 <vTaskList+0x128>)
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f002 fcb1 	bl	8018798 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	f7ea f9ca 	bl	80001d0 <strlen>
 8015e3c:	4602      	mov	r2, r0
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	4413      	add	r3, r2
 8015e42:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	3301      	adds	r3, #1
 8015e48:	617b      	str	r3, [r7, #20]
 8015e4a:	697a      	ldr	r2, [r7, #20]
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	429a      	cmp	r2, r3
 8015e50:	d394      	bcc.n	8015d7c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8015e52:	68b8      	ldr	r0, [r7, #8]
 8015e54:	f000 ff5c 	bl	8016d10 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015e58:	bf00      	nop
 8015e5a:	371c      	adds	r7, #28
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	bd90      	pop	{r4, r7, pc}
 8015e60:	20003444 	.word	0x20003444
 8015e64:	0801b048 	.word	0x0801b048

08015e68 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b088      	sub	sp, #32
 8015e6c:	af00      	add	r7, sp, #0
 8015e6e:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2200      	movs	r2, #0
 8015e74:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8015e76:	4b3a      	ldr	r3, [pc, #232]	; (8015f60 <vTaskGetRunTimeStats+0xf8>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8015e7c:	4b38      	ldr	r3, [pc, #224]	; (8015f60 <vTaskGetRunTimeStats+0xf8>)
 8015e7e:	681a      	ldr	r2, [r3, #0]
 8015e80:	4613      	mov	r3, r2
 8015e82:	00db      	lsls	r3, r3, #3
 8015e84:	4413      	add	r3, r2
 8015e86:	009b      	lsls	r3, r3, #2
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f000 fe75 	bl	8016b78 <pvPortMalloc>
 8015e8e:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8015e90:	697b      	ldr	r3, [r7, #20]
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d05f      	beq.n	8015f56 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8015e96:	f107 030c 	add.w	r3, r7, #12
 8015e9a:	461a      	mov	r2, r3
 8015e9c:	69b9      	ldr	r1, [r7, #24]
 8015e9e:	6978      	ldr	r0, [r7, #20]
 8015ea0:	f7ff f8fe 	bl	80150a0 <uxTaskGetSystemState>
 8015ea4:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	4a2e      	ldr	r2, [pc, #184]	; (8015f64 <vTaskGetRunTimeStats+0xfc>)
 8015eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8015eae:	095b      	lsrs	r3, r3, #5
 8015eb0:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d04b      	beq.n	8015f50 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8015eb8:	2300      	movs	r3, #0
 8015eba:	61fb      	str	r3, [r7, #28]
 8015ebc:	e044      	b.n	8015f48 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8015ebe:	69fa      	ldr	r2, [r7, #28]
 8015ec0:	4613      	mov	r3, r2
 8015ec2:	00db      	lsls	r3, r3, #3
 8015ec4:	4413      	add	r3, r2
 8015ec6:	009b      	lsls	r3, r3, #2
 8015ec8:	461a      	mov	r2, r3
 8015eca:	697b      	ldr	r3, [r7, #20]
 8015ecc:	4413      	add	r3, r2
 8015ece:	699a      	ldr	r2, [r3, #24]
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8015ed6:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015ed8:	69fa      	ldr	r2, [r7, #28]
 8015eda:	4613      	mov	r3, r2
 8015edc:	00db      	lsls	r3, r3, #3
 8015ede:	4413      	add	r3, r2
 8015ee0:	009b      	lsls	r3, r3, #2
 8015ee2:	461a      	mov	r2, r3
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	4413      	add	r3, r2
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	4619      	mov	r1, r3
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7ff feff 	bl	8015cf0 <prvWriteNameToBuffer>
 8015ef2:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8015ef4:	693b      	ldr	r3, [r7, #16]
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d00e      	beq.n	8015f18 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015efa:	69fa      	ldr	r2, [r7, #28]
 8015efc:	4613      	mov	r3, r2
 8015efe:	00db      	lsls	r3, r3, #3
 8015f00:	4413      	add	r3, r2
 8015f02:	009b      	lsls	r3, r3, #2
 8015f04:	461a      	mov	r2, r3
 8015f06:	697b      	ldr	r3, [r7, #20]
 8015f08:	4413      	add	r3, r2
 8015f0a:	699a      	ldr	r2, [r3, #24]
 8015f0c:	693b      	ldr	r3, [r7, #16]
 8015f0e:	4916      	ldr	r1, [pc, #88]	; (8015f68 <vTaskGetRunTimeStats+0x100>)
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f002 fc41 	bl	8018798 <siprintf>
 8015f16:	e00d      	b.n	8015f34 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015f18:	69fa      	ldr	r2, [r7, #28]
 8015f1a:	4613      	mov	r3, r2
 8015f1c:	00db      	lsls	r3, r3, #3
 8015f1e:	4413      	add	r3, r2
 8015f20:	009b      	lsls	r3, r3, #2
 8015f22:	461a      	mov	r2, r3
 8015f24:	697b      	ldr	r3, [r7, #20]
 8015f26:	4413      	add	r3, r2
 8015f28:	699b      	ldr	r3, [r3, #24]
 8015f2a:	461a      	mov	r2, r3
 8015f2c:	490f      	ldr	r1, [pc, #60]	; (8015f6c <vTaskGetRunTimeStats+0x104>)
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f002 fc32 	bl	8018798 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8015f34:	6878      	ldr	r0, [r7, #4]
 8015f36:	f7ea f94b 	bl	80001d0 <strlen>
 8015f3a:	4602      	mov	r2, r0
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	4413      	add	r3, r2
 8015f40:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8015f42:	69fb      	ldr	r3, [r7, #28]
 8015f44:	3301      	adds	r3, #1
 8015f46:	61fb      	str	r3, [r7, #28]
 8015f48:	69fa      	ldr	r2, [r7, #28]
 8015f4a:	69bb      	ldr	r3, [r7, #24]
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d3b6      	bcc.n	8015ebe <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8015f50:	6978      	ldr	r0, [r7, #20]
 8015f52:	f000 fedd 	bl	8016d10 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015f56:	bf00      	nop
 8015f58:	3720      	adds	r7, #32
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bd80      	pop	{r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	20003444 	.word	0x20003444
 8015f64:	51eb851f 	.word	0x51eb851f
 8015f68:	0801b058 	.word	0x0801b058
 8015f6c:	0801b064 	.word	0x0801b064

08015f70 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015f70:	b480      	push	{r7}
 8015f72:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015f74:	4b07      	ldr	r3, [pc, #28]	; (8015f94 <pvTaskIncrementMutexHeldCount+0x24>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d004      	beq.n	8015f86 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015f7c:	4b05      	ldr	r3, [pc, #20]	; (8015f94 <pvTaskIncrementMutexHeldCount+0x24>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015f82:	3201      	adds	r2, #1
 8015f84:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015f86:	4b03      	ldr	r3, [pc, #12]	; (8015f94 <pvTaskIncrementMutexHeldCount+0x24>)
 8015f88:	681b      	ldr	r3, [r3, #0]
	}
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f92:	4770      	bx	lr
 8015f94:	20002f70 	.word	0x20002f70

08015f98 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015fa2:	4b21      	ldr	r3, [pc, #132]	; (8016028 <prvAddCurrentTaskToDelayedList+0x90>)
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015fa8:	4b20      	ldr	r3, [pc, #128]	; (801602c <prvAddCurrentTaskToDelayedList+0x94>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	3304      	adds	r3, #4
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f7fd fcb8 	bl	8013924 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fba:	d10a      	bne.n	8015fd2 <prvAddCurrentTaskToDelayedList+0x3a>
 8015fbc:	683b      	ldr	r3, [r7, #0]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d007      	beq.n	8015fd2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015fc2:	4b1a      	ldr	r3, [pc, #104]	; (801602c <prvAddCurrentTaskToDelayedList+0x94>)
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	3304      	adds	r3, #4
 8015fc8:	4619      	mov	r1, r3
 8015fca:	4819      	ldr	r0, [pc, #100]	; (8016030 <prvAddCurrentTaskToDelayedList+0x98>)
 8015fcc:	f7fd fc4d 	bl	801386a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015fd0:	e026      	b.n	8016020 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015fd2:	68fa      	ldr	r2, [r7, #12]
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	4413      	add	r3, r2
 8015fd8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015fda:	4b14      	ldr	r3, [pc, #80]	; (801602c <prvAddCurrentTaskToDelayedList+0x94>)
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	68ba      	ldr	r2, [r7, #8]
 8015fe0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015fe2:	68ba      	ldr	r2, [r7, #8]
 8015fe4:	68fb      	ldr	r3, [r7, #12]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d209      	bcs.n	8015ffe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015fea:	4b12      	ldr	r3, [pc, #72]	; (8016034 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015fec:	681a      	ldr	r2, [r3, #0]
 8015fee:	4b0f      	ldr	r3, [pc, #60]	; (801602c <prvAddCurrentTaskToDelayedList+0x94>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	3304      	adds	r3, #4
 8015ff4:	4619      	mov	r1, r3
 8015ff6:	4610      	mov	r0, r2
 8015ff8:	f7fd fc5b 	bl	80138b2 <vListInsert>
}
 8015ffc:	e010      	b.n	8016020 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015ffe:	4b0e      	ldr	r3, [pc, #56]	; (8016038 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	4b0a      	ldr	r3, [pc, #40]	; (801602c <prvAddCurrentTaskToDelayedList+0x94>)
 8016004:	681b      	ldr	r3, [r3, #0]
 8016006:	3304      	adds	r3, #4
 8016008:	4619      	mov	r1, r3
 801600a:	4610      	mov	r0, r2
 801600c:	f7fd fc51 	bl	80138b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016010:	4b0a      	ldr	r3, [pc, #40]	; (801603c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	68ba      	ldr	r2, [r7, #8]
 8016016:	429a      	cmp	r2, r3
 8016018:	d202      	bcs.n	8016020 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801601a:	4a08      	ldr	r2, [pc, #32]	; (801603c <prvAddCurrentTaskToDelayedList+0xa4>)
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	6013      	str	r3, [r2, #0]
}
 8016020:	bf00      	nop
 8016022:	3710      	adds	r7, #16
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}
 8016028:	20003448 	.word	0x20003448
 801602c:	20002f70 	.word	0x20002f70
 8016030:	20003430 	.word	0x20003430
 8016034:	20003400 	.word	0x20003400
 8016038:	200033fc 	.word	0x200033fc
 801603c:	20003464 	.word	0x20003464

08016040 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b08a      	sub	sp, #40	; 0x28
 8016044:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016046:	2300      	movs	r3, #0
 8016048:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801604a:	f000 fb07 	bl	801665c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801604e:	4b1c      	ldr	r3, [pc, #112]	; (80160c0 <xTimerCreateTimerTask+0x80>)
 8016050:	681b      	ldr	r3, [r3, #0]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d021      	beq.n	801609a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016056:	2300      	movs	r3, #0
 8016058:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801605a:	2300      	movs	r3, #0
 801605c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801605e:	1d3a      	adds	r2, r7, #4
 8016060:	f107 0108 	add.w	r1, r7, #8
 8016064:	f107 030c 	add.w	r3, r7, #12
 8016068:	4618      	mov	r0, r3
 801606a:	f7fd fbb7 	bl	80137dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801606e:	6879      	ldr	r1, [r7, #4]
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	68fa      	ldr	r2, [r7, #12]
 8016074:	9202      	str	r2, [sp, #8]
 8016076:	9301      	str	r3, [sp, #4]
 8016078:	2302      	movs	r3, #2
 801607a:	9300      	str	r3, [sp, #0]
 801607c:	2300      	movs	r3, #0
 801607e:	460a      	mov	r2, r1
 8016080:	4910      	ldr	r1, [pc, #64]	; (80160c4 <xTimerCreateTimerTask+0x84>)
 8016082:	4811      	ldr	r0, [pc, #68]	; (80160c8 <xTimerCreateTimerTask+0x88>)
 8016084:	f7fe fc86 	bl	8014994 <xTaskCreateStatic>
 8016088:	4603      	mov	r3, r0
 801608a:	4a10      	ldr	r2, [pc, #64]	; (80160cc <xTimerCreateTimerTask+0x8c>)
 801608c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801608e:	4b0f      	ldr	r3, [pc, #60]	; (80160cc <xTimerCreateTimerTask+0x8c>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d001      	beq.n	801609a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016096:	2301      	movs	r3, #1
 8016098:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10a      	bne.n	80160b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80160a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a4:	f383 8811 	msr	BASEPRI, r3
 80160a8:	f3bf 8f6f 	isb	sy
 80160ac:	f3bf 8f4f 	dsb	sy
 80160b0:	613b      	str	r3, [r7, #16]
}
 80160b2:	bf00      	nop
 80160b4:	e7fe      	b.n	80160b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80160b6:	697b      	ldr	r3, [r7, #20]
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3718      	adds	r7, #24
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	200034a8 	.word	0x200034a8
 80160c4:	0801b070 	.word	0x0801b070
 80160c8:	08016205 	.word	0x08016205
 80160cc:	200034ac 	.word	0x200034ac

080160d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b08a      	sub	sp, #40	; 0x28
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	60f8      	str	r0, [r7, #12]
 80160d8:	60b9      	str	r1, [r7, #8]
 80160da:	607a      	str	r2, [r7, #4]
 80160dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80160de:	2300      	movs	r3, #0
 80160e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d10a      	bne.n	80160fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80160e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ec:	f383 8811 	msr	BASEPRI, r3
 80160f0:	f3bf 8f6f 	isb	sy
 80160f4:	f3bf 8f4f 	dsb	sy
 80160f8:	623b      	str	r3, [r7, #32]
}
 80160fa:	bf00      	nop
 80160fc:	e7fe      	b.n	80160fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80160fe:	4b1a      	ldr	r3, [pc, #104]	; (8016168 <xTimerGenericCommand+0x98>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d02a      	beq.n	801615c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	2b05      	cmp	r3, #5
 8016116:	dc18      	bgt.n	801614a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016118:	f7ff fc74 	bl	8015a04 <xTaskGetSchedulerState>
 801611c:	4603      	mov	r3, r0
 801611e:	2b02      	cmp	r3, #2
 8016120:	d109      	bne.n	8016136 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016122:	4b11      	ldr	r3, [pc, #68]	; (8016168 <xTimerGenericCommand+0x98>)
 8016124:	6818      	ldr	r0, [r3, #0]
 8016126:	f107 0110 	add.w	r1, r7, #16
 801612a:	2300      	movs	r3, #0
 801612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801612e:	f7fd fdcb 	bl	8013cc8 <xQueueGenericSend>
 8016132:	6278      	str	r0, [r7, #36]	; 0x24
 8016134:	e012      	b.n	801615c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016136:	4b0c      	ldr	r3, [pc, #48]	; (8016168 <xTimerGenericCommand+0x98>)
 8016138:	6818      	ldr	r0, [r3, #0]
 801613a:	f107 0110 	add.w	r1, r7, #16
 801613e:	2300      	movs	r3, #0
 8016140:	2200      	movs	r2, #0
 8016142:	f7fd fdc1 	bl	8013cc8 <xQueueGenericSend>
 8016146:	6278      	str	r0, [r7, #36]	; 0x24
 8016148:	e008      	b.n	801615c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801614a:	4b07      	ldr	r3, [pc, #28]	; (8016168 <xTimerGenericCommand+0x98>)
 801614c:	6818      	ldr	r0, [r3, #0]
 801614e:	f107 0110 	add.w	r1, r7, #16
 8016152:	2300      	movs	r3, #0
 8016154:	683a      	ldr	r2, [r7, #0]
 8016156:	f7fd feb5 	bl	8013ec4 <xQueueGenericSendFromISR>
 801615a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801615c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801615e:	4618      	mov	r0, r3
 8016160:	3728      	adds	r7, #40	; 0x28
 8016162:	46bd      	mov	sp, r7
 8016164:	bd80      	pop	{r7, pc}
 8016166:	bf00      	nop
 8016168:	200034a8 	.word	0x200034a8

0801616c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801616c:	b580      	push	{r7, lr}
 801616e:	b088      	sub	sp, #32
 8016170:	af02      	add	r7, sp, #8
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016176:	4b22      	ldr	r3, [pc, #136]	; (8016200 <prvProcessExpiredTimer+0x94>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	68db      	ldr	r3, [r3, #12]
 801617c:	68db      	ldr	r3, [r3, #12]
 801617e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016180:	697b      	ldr	r3, [r7, #20]
 8016182:	3304      	adds	r3, #4
 8016184:	4618      	mov	r0, r3
 8016186:	f7fd fbcd 	bl	8013924 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801618a:	697b      	ldr	r3, [r7, #20]
 801618c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016190:	f003 0304 	and.w	r3, r3, #4
 8016194:	2b00      	cmp	r3, #0
 8016196:	d022      	beq.n	80161de <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	699a      	ldr	r2, [r3, #24]
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	18d1      	adds	r1, r2, r3
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	6978      	ldr	r0, [r7, #20]
 80161a6:	f000 f8d1 	bl	801634c <prvInsertTimerInActiveList>
 80161aa:	4603      	mov	r3, r0
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d01f      	beq.n	80161f0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80161b0:	2300      	movs	r3, #0
 80161b2:	9300      	str	r3, [sp, #0]
 80161b4:	2300      	movs	r3, #0
 80161b6:	687a      	ldr	r2, [r7, #4]
 80161b8:	2100      	movs	r1, #0
 80161ba:	6978      	ldr	r0, [r7, #20]
 80161bc:	f7ff ff88 	bl	80160d0 <xTimerGenericCommand>
 80161c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d113      	bne.n	80161f0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80161c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161cc:	f383 8811 	msr	BASEPRI, r3
 80161d0:	f3bf 8f6f 	isb	sy
 80161d4:	f3bf 8f4f 	dsb	sy
 80161d8:	60fb      	str	r3, [r7, #12]
}
 80161da:	bf00      	nop
 80161dc:	e7fe      	b.n	80161dc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80161de:	697b      	ldr	r3, [r7, #20]
 80161e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161e4:	f023 0301 	bic.w	r3, r3, #1
 80161e8:	b2da      	uxtb	r2, r3
 80161ea:	697b      	ldr	r3, [r7, #20]
 80161ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80161f0:	697b      	ldr	r3, [r7, #20]
 80161f2:	6a1b      	ldr	r3, [r3, #32]
 80161f4:	6978      	ldr	r0, [r7, #20]
 80161f6:	4798      	blx	r3
}
 80161f8:	bf00      	nop
 80161fa:	3718      	adds	r7, #24
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}
 8016200:	200034a0 	.word	0x200034a0

08016204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016204:	b580      	push	{r7, lr}
 8016206:	b084      	sub	sp, #16
 8016208:	af00      	add	r7, sp, #0
 801620a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801620c:	f107 0308 	add.w	r3, r7, #8
 8016210:	4618      	mov	r0, r3
 8016212:	f000 f857 	bl	80162c4 <prvGetNextExpireTime>
 8016216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	4619      	mov	r1, r3
 801621c:	68f8      	ldr	r0, [r7, #12]
 801621e:	f000 f803 	bl	8016228 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016222:	f000 f8d5 	bl	80163d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016226:	e7f1      	b.n	801620c <prvTimerTask+0x8>

08016228 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b084      	sub	sp, #16
 801622c:	af00      	add	r7, sp, #0
 801622e:	6078      	str	r0, [r7, #4]
 8016230:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016232:	f7fe fe79 	bl	8014f28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016236:	f107 0308 	add.w	r3, r7, #8
 801623a:	4618      	mov	r0, r3
 801623c:	f000 f866 	bl	801630c <prvSampleTimeNow>
 8016240:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016242:	68bb      	ldr	r3, [r7, #8]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d130      	bne.n	80162aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016248:	683b      	ldr	r3, [r7, #0]
 801624a:	2b00      	cmp	r3, #0
 801624c:	d10a      	bne.n	8016264 <prvProcessTimerOrBlockTask+0x3c>
 801624e:	687a      	ldr	r2, [r7, #4]
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	429a      	cmp	r2, r3
 8016254:	d806      	bhi.n	8016264 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016256:	f7fe fe75 	bl	8014f44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801625a:	68f9      	ldr	r1, [r7, #12]
 801625c:	6878      	ldr	r0, [r7, #4]
 801625e:	f7ff ff85 	bl	801616c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016262:	e024      	b.n	80162ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	2b00      	cmp	r3, #0
 8016268:	d008      	beq.n	801627c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801626a:	4b13      	ldr	r3, [pc, #76]	; (80162b8 <prvProcessTimerOrBlockTask+0x90>)
 801626c:	681b      	ldr	r3, [r3, #0]
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d101      	bne.n	8016278 <prvProcessTimerOrBlockTask+0x50>
 8016274:	2301      	movs	r3, #1
 8016276:	e000      	b.n	801627a <prvProcessTimerOrBlockTask+0x52>
 8016278:	2300      	movs	r3, #0
 801627a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801627c:	4b0f      	ldr	r3, [pc, #60]	; (80162bc <prvProcessTimerOrBlockTask+0x94>)
 801627e:	6818      	ldr	r0, [r3, #0]
 8016280:	687a      	ldr	r2, [r7, #4]
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	1ad3      	subs	r3, r2, r3
 8016286:	683a      	ldr	r2, [r7, #0]
 8016288:	4619      	mov	r1, r3
 801628a:	f7fe fb4f 	bl	801492c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801628e:	f7fe fe59 	bl	8014f44 <xTaskResumeAll>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d10a      	bne.n	80162ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016298:	4b09      	ldr	r3, [pc, #36]	; (80162c0 <prvProcessTimerOrBlockTask+0x98>)
 801629a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801629e:	601a      	str	r2, [r3, #0]
 80162a0:	f3bf 8f4f 	dsb	sy
 80162a4:	f3bf 8f6f 	isb	sy
}
 80162a8:	e001      	b.n	80162ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80162aa:	f7fe fe4b 	bl	8014f44 <xTaskResumeAll>
}
 80162ae:	bf00      	nop
 80162b0:	3710      	adds	r7, #16
 80162b2:	46bd      	mov	sp, r7
 80162b4:	bd80      	pop	{r7, pc}
 80162b6:	bf00      	nop
 80162b8:	200034a4 	.word	0x200034a4
 80162bc:	200034a8 	.word	0x200034a8
 80162c0:	e000ed04 	.word	0xe000ed04

080162c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80162c4:	b480      	push	{r7}
 80162c6:	b085      	sub	sp, #20
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80162cc:	4b0e      	ldr	r3, [pc, #56]	; (8016308 <prvGetNextExpireTime+0x44>)
 80162ce:	681b      	ldr	r3, [r3, #0]
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d101      	bne.n	80162da <prvGetNextExpireTime+0x16>
 80162d6:	2201      	movs	r2, #1
 80162d8:	e000      	b.n	80162dc <prvGetNextExpireTime+0x18>
 80162da:	2200      	movs	r2, #0
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d105      	bne.n	80162f4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162e8:	4b07      	ldr	r3, [pc, #28]	; (8016308 <prvGetNextExpireTime+0x44>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	68db      	ldr	r3, [r3, #12]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	60fb      	str	r3, [r7, #12]
 80162f2:	e001      	b.n	80162f8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80162f4:	2300      	movs	r3, #0
 80162f6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80162f8:	68fb      	ldr	r3, [r7, #12]
}
 80162fa:	4618      	mov	r0, r3
 80162fc:	3714      	adds	r7, #20
 80162fe:	46bd      	mov	sp, r7
 8016300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016304:	4770      	bx	lr
 8016306:	bf00      	nop
 8016308:	200034a0 	.word	0x200034a0

0801630c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801630c:	b580      	push	{r7, lr}
 801630e:	b084      	sub	sp, #16
 8016310:	af00      	add	r7, sp, #0
 8016312:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016314:	f7fe feb4 	bl	8015080 <xTaskGetTickCount>
 8016318:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801631a:	4b0b      	ldr	r3, [pc, #44]	; (8016348 <prvSampleTimeNow+0x3c>)
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	68fa      	ldr	r2, [r7, #12]
 8016320:	429a      	cmp	r2, r3
 8016322:	d205      	bcs.n	8016330 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016324:	f000 f936 	bl	8016594 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	2201      	movs	r2, #1
 801632c:	601a      	str	r2, [r3, #0]
 801632e:	e002      	b.n	8016336 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2200      	movs	r2, #0
 8016334:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016336:	4a04      	ldr	r2, [pc, #16]	; (8016348 <prvSampleTimeNow+0x3c>)
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801633c:	68fb      	ldr	r3, [r7, #12]
}
 801633e:	4618      	mov	r0, r3
 8016340:	3710      	adds	r7, #16
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	200034b0 	.word	0x200034b0

0801634c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	60b9      	str	r1, [r7, #8]
 8016356:	607a      	str	r2, [r7, #4]
 8016358:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801635a:	2300      	movs	r3, #0
 801635c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801635e:	68fb      	ldr	r3, [r7, #12]
 8016360:	68ba      	ldr	r2, [r7, #8]
 8016362:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016364:	68fb      	ldr	r3, [r7, #12]
 8016366:	68fa      	ldr	r2, [r7, #12]
 8016368:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801636a:	68ba      	ldr	r2, [r7, #8]
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	429a      	cmp	r2, r3
 8016370:	d812      	bhi.n	8016398 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016372:	687a      	ldr	r2, [r7, #4]
 8016374:	683b      	ldr	r3, [r7, #0]
 8016376:	1ad2      	subs	r2, r2, r3
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	699b      	ldr	r3, [r3, #24]
 801637c:	429a      	cmp	r2, r3
 801637e:	d302      	bcc.n	8016386 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016380:	2301      	movs	r3, #1
 8016382:	617b      	str	r3, [r7, #20]
 8016384:	e01b      	b.n	80163be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016386:	4b10      	ldr	r3, [pc, #64]	; (80163c8 <prvInsertTimerInActiveList+0x7c>)
 8016388:	681a      	ldr	r2, [r3, #0]
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	3304      	adds	r3, #4
 801638e:	4619      	mov	r1, r3
 8016390:	4610      	mov	r0, r2
 8016392:	f7fd fa8e 	bl	80138b2 <vListInsert>
 8016396:	e012      	b.n	80163be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016398:	687a      	ldr	r2, [r7, #4]
 801639a:	683b      	ldr	r3, [r7, #0]
 801639c:	429a      	cmp	r2, r3
 801639e:	d206      	bcs.n	80163ae <prvInsertTimerInActiveList+0x62>
 80163a0:	68ba      	ldr	r2, [r7, #8]
 80163a2:	683b      	ldr	r3, [r7, #0]
 80163a4:	429a      	cmp	r2, r3
 80163a6:	d302      	bcc.n	80163ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80163a8:	2301      	movs	r3, #1
 80163aa:	617b      	str	r3, [r7, #20]
 80163ac:	e007      	b.n	80163be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80163ae:	4b07      	ldr	r3, [pc, #28]	; (80163cc <prvInsertTimerInActiveList+0x80>)
 80163b0:	681a      	ldr	r2, [r3, #0]
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	3304      	adds	r3, #4
 80163b6:	4619      	mov	r1, r3
 80163b8:	4610      	mov	r0, r2
 80163ba:	f7fd fa7a 	bl	80138b2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80163be:	697b      	ldr	r3, [r7, #20]
}
 80163c0:	4618      	mov	r0, r3
 80163c2:	3718      	adds	r7, #24
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}
 80163c8:	200034a4 	.word	0x200034a4
 80163cc:	200034a0 	.word	0x200034a0

080163d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b08e      	sub	sp, #56	; 0x38
 80163d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80163d6:	e0ca      	b.n	801656e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	da18      	bge.n	8016410 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80163de:	1d3b      	adds	r3, r7, #4
 80163e0:	3304      	adds	r3, #4
 80163e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80163e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d10a      	bne.n	8016400 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80163ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ee:	f383 8811 	msr	BASEPRI, r3
 80163f2:	f3bf 8f6f 	isb	sy
 80163f6:	f3bf 8f4f 	dsb	sy
 80163fa:	61fb      	str	r3, [r7, #28]
}
 80163fc:	bf00      	nop
 80163fe:	e7fe      	b.n	80163fe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016402:	681b      	ldr	r3, [r3, #0]
 8016404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016406:	6850      	ldr	r0, [r2, #4]
 8016408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801640a:	6892      	ldr	r2, [r2, #8]
 801640c:	4611      	mov	r1, r2
 801640e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	2b00      	cmp	r3, #0
 8016414:	f2c0 80aa 	blt.w	801656c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016418:	68fb      	ldr	r3, [r7, #12]
 801641a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801641e:	695b      	ldr	r3, [r3, #20]
 8016420:	2b00      	cmp	r3, #0
 8016422:	d004      	beq.n	801642e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016426:	3304      	adds	r3, #4
 8016428:	4618      	mov	r0, r3
 801642a:	f7fd fa7b 	bl	8013924 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801642e:	463b      	mov	r3, r7
 8016430:	4618      	mov	r0, r3
 8016432:	f7ff ff6b 	bl	801630c <prvSampleTimeNow>
 8016436:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	2b09      	cmp	r3, #9
 801643c:	f200 8097 	bhi.w	801656e <prvProcessReceivedCommands+0x19e>
 8016440:	a201      	add	r2, pc, #4	; (adr r2, 8016448 <prvProcessReceivedCommands+0x78>)
 8016442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016446:	bf00      	nop
 8016448:	08016471 	.word	0x08016471
 801644c:	08016471 	.word	0x08016471
 8016450:	08016471 	.word	0x08016471
 8016454:	080164e5 	.word	0x080164e5
 8016458:	080164f9 	.word	0x080164f9
 801645c:	08016543 	.word	0x08016543
 8016460:	08016471 	.word	0x08016471
 8016464:	08016471 	.word	0x08016471
 8016468:	080164e5 	.word	0x080164e5
 801646c:	080164f9 	.word	0x080164f9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016476:	f043 0301 	orr.w	r3, r3, #1
 801647a:	b2da      	uxtb	r2, r3
 801647c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801647e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016482:	68ba      	ldr	r2, [r7, #8]
 8016484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016486:	699b      	ldr	r3, [r3, #24]
 8016488:	18d1      	adds	r1, r2, r3
 801648a:	68bb      	ldr	r3, [r7, #8]
 801648c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801648e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016490:	f7ff ff5c 	bl	801634c <prvInsertTimerInActiveList>
 8016494:	4603      	mov	r3, r0
 8016496:	2b00      	cmp	r3, #0
 8016498:	d069      	beq.n	801656e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801649c:	6a1b      	ldr	r3, [r3, #32]
 801649e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80164a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164a8:	f003 0304 	and.w	r3, r3, #4
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d05e      	beq.n	801656e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80164b0:	68ba      	ldr	r2, [r7, #8]
 80164b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164b4:	699b      	ldr	r3, [r3, #24]
 80164b6:	441a      	add	r2, r3
 80164b8:	2300      	movs	r3, #0
 80164ba:	9300      	str	r3, [sp, #0]
 80164bc:	2300      	movs	r3, #0
 80164be:	2100      	movs	r1, #0
 80164c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164c2:	f7ff fe05 	bl	80160d0 <xTimerGenericCommand>
 80164c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80164c8:	6a3b      	ldr	r3, [r7, #32]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d14f      	bne.n	801656e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80164ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164d2:	f383 8811 	msr	BASEPRI, r3
 80164d6:	f3bf 8f6f 	isb	sy
 80164da:	f3bf 8f4f 	dsb	sy
 80164de:	61bb      	str	r3, [r7, #24]
}
 80164e0:	bf00      	nop
 80164e2:	e7fe      	b.n	80164e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80164e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164ea:	f023 0301 	bic.w	r3, r3, #1
 80164ee:	b2da      	uxtb	r2, r3
 80164f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80164f6:	e03a      	b.n	801656e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80164f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80164fe:	f043 0301 	orr.w	r3, r3, #1
 8016502:	b2da      	uxtb	r2, r3
 8016504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801650a:	68ba      	ldr	r2, [r7, #8]
 801650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801650e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016512:	699b      	ldr	r3, [r3, #24]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d10a      	bne.n	801652e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8016518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801651c:	f383 8811 	msr	BASEPRI, r3
 8016520:	f3bf 8f6f 	isb	sy
 8016524:	f3bf 8f4f 	dsb	sy
 8016528:	617b      	str	r3, [r7, #20]
}
 801652a:	bf00      	nop
 801652c:	e7fe      	b.n	801652c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016530:	699a      	ldr	r2, [r3, #24]
 8016532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016534:	18d1      	adds	r1, r2, r3
 8016536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801653a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801653c:	f7ff ff06 	bl	801634c <prvInsertTimerInActiveList>
					break;
 8016540:	e015      	b.n	801656e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016548:	f003 0302 	and.w	r3, r3, #2
 801654c:	2b00      	cmp	r3, #0
 801654e:	d103      	bne.n	8016558 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016550:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016552:	f000 fbdd 	bl	8016d10 <vPortFree>
 8016556:	e00a      	b.n	801656e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801655e:	f023 0301 	bic.w	r3, r3, #1
 8016562:	b2da      	uxtb	r2, r3
 8016564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016566:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801656a:	e000      	b.n	801656e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801656c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801656e:	4b08      	ldr	r3, [pc, #32]	; (8016590 <prvProcessReceivedCommands+0x1c0>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	1d39      	adds	r1, r7, #4
 8016574:	2200      	movs	r2, #0
 8016576:	4618      	mov	r0, r3
 8016578:	f7fd fdcc 	bl	8014114 <xQueueReceive>
 801657c:	4603      	mov	r3, r0
 801657e:	2b00      	cmp	r3, #0
 8016580:	f47f af2a 	bne.w	80163d8 <prvProcessReceivedCommands+0x8>
	}
}
 8016584:	bf00      	nop
 8016586:	bf00      	nop
 8016588:	3730      	adds	r7, #48	; 0x30
 801658a:	46bd      	mov	sp, r7
 801658c:	bd80      	pop	{r7, pc}
 801658e:	bf00      	nop
 8016590:	200034a8 	.word	0x200034a8

08016594 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8016594:	b580      	push	{r7, lr}
 8016596:	b088      	sub	sp, #32
 8016598:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801659a:	e048      	b.n	801662e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801659c:	4b2d      	ldr	r3, [pc, #180]	; (8016654 <prvSwitchTimerLists+0xc0>)
 801659e:	681b      	ldr	r3, [r3, #0]
 80165a0:	68db      	ldr	r3, [r3, #12]
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80165a6:	4b2b      	ldr	r3, [pc, #172]	; (8016654 <prvSwitchTimerLists+0xc0>)
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	68db      	ldr	r3, [r3, #12]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	3304      	adds	r3, #4
 80165b4:	4618      	mov	r0, r3
 80165b6:	f7fd f9b5 	bl	8013924 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	6a1b      	ldr	r3, [r3, #32]
 80165be:	68f8      	ldr	r0, [r7, #12]
 80165c0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80165c8:	f003 0304 	and.w	r3, r3, #4
 80165cc:	2b00      	cmp	r3, #0
 80165ce:	d02e      	beq.n	801662e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80165d0:	68fb      	ldr	r3, [r7, #12]
 80165d2:	699b      	ldr	r3, [r3, #24]
 80165d4:	693a      	ldr	r2, [r7, #16]
 80165d6:	4413      	add	r3, r2
 80165d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80165da:	68ba      	ldr	r2, [r7, #8]
 80165dc:	693b      	ldr	r3, [r7, #16]
 80165de:	429a      	cmp	r2, r3
 80165e0:	d90e      	bls.n	8016600 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	68ba      	ldr	r2, [r7, #8]
 80165e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	68fa      	ldr	r2, [r7, #12]
 80165ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80165ee:	4b19      	ldr	r3, [pc, #100]	; (8016654 <prvSwitchTimerLists+0xc0>)
 80165f0:	681a      	ldr	r2, [r3, #0]
 80165f2:	68fb      	ldr	r3, [r7, #12]
 80165f4:	3304      	adds	r3, #4
 80165f6:	4619      	mov	r1, r3
 80165f8:	4610      	mov	r0, r2
 80165fa:	f7fd f95a 	bl	80138b2 <vListInsert>
 80165fe:	e016      	b.n	801662e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016600:	2300      	movs	r3, #0
 8016602:	9300      	str	r3, [sp, #0]
 8016604:	2300      	movs	r3, #0
 8016606:	693a      	ldr	r2, [r7, #16]
 8016608:	2100      	movs	r1, #0
 801660a:	68f8      	ldr	r0, [r7, #12]
 801660c:	f7ff fd60 	bl	80160d0 <xTimerGenericCommand>
 8016610:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d10a      	bne.n	801662e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8016618:	f04f 0350 	mov.w	r3, #80	; 0x50
 801661c:	f383 8811 	msr	BASEPRI, r3
 8016620:	f3bf 8f6f 	isb	sy
 8016624:	f3bf 8f4f 	dsb	sy
 8016628:	603b      	str	r3, [r7, #0]
}
 801662a:	bf00      	nop
 801662c:	e7fe      	b.n	801662c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801662e:	4b09      	ldr	r3, [pc, #36]	; (8016654 <prvSwitchTimerLists+0xc0>)
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d1b1      	bne.n	801659c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016638:	4b06      	ldr	r3, [pc, #24]	; (8016654 <prvSwitchTimerLists+0xc0>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801663e:	4b06      	ldr	r3, [pc, #24]	; (8016658 <prvSwitchTimerLists+0xc4>)
 8016640:	681b      	ldr	r3, [r3, #0]
 8016642:	4a04      	ldr	r2, [pc, #16]	; (8016654 <prvSwitchTimerLists+0xc0>)
 8016644:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016646:	4a04      	ldr	r2, [pc, #16]	; (8016658 <prvSwitchTimerLists+0xc4>)
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	6013      	str	r3, [r2, #0]
}
 801664c:	bf00      	nop
 801664e:	3718      	adds	r7, #24
 8016650:	46bd      	mov	sp, r7
 8016652:	bd80      	pop	{r7, pc}
 8016654:	200034a0 	.word	0x200034a0
 8016658:	200034a4 	.word	0x200034a4

0801665c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016662:	f000 f967 	bl	8016934 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016666:	4b15      	ldr	r3, [pc, #84]	; (80166bc <prvCheckForValidListAndQueue+0x60>)
 8016668:	681b      	ldr	r3, [r3, #0]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d120      	bne.n	80166b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801666e:	4814      	ldr	r0, [pc, #80]	; (80166c0 <prvCheckForValidListAndQueue+0x64>)
 8016670:	f7fd f8ce 	bl	8013810 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016674:	4813      	ldr	r0, [pc, #76]	; (80166c4 <prvCheckForValidListAndQueue+0x68>)
 8016676:	f7fd f8cb 	bl	8013810 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801667a:	4b13      	ldr	r3, [pc, #76]	; (80166c8 <prvCheckForValidListAndQueue+0x6c>)
 801667c:	4a10      	ldr	r2, [pc, #64]	; (80166c0 <prvCheckForValidListAndQueue+0x64>)
 801667e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016680:	4b12      	ldr	r3, [pc, #72]	; (80166cc <prvCheckForValidListAndQueue+0x70>)
 8016682:	4a10      	ldr	r2, [pc, #64]	; (80166c4 <prvCheckForValidListAndQueue+0x68>)
 8016684:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016686:	2300      	movs	r3, #0
 8016688:	9300      	str	r3, [sp, #0]
 801668a:	4b11      	ldr	r3, [pc, #68]	; (80166d0 <prvCheckForValidListAndQueue+0x74>)
 801668c:	4a11      	ldr	r2, [pc, #68]	; (80166d4 <prvCheckForValidListAndQueue+0x78>)
 801668e:	2110      	movs	r1, #16
 8016690:	200a      	movs	r0, #10
 8016692:	f7fd f9d9 	bl	8013a48 <xQueueGenericCreateStatic>
 8016696:	4603      	mov	r3, r0
 8016698:	4a08      	ldr	r2, [pc, #32]	; (80166bc <prvCheckForValidListAndQueue+0x60>)
 801669a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801669c:	4b07      	ldr	r3, [pc, #28]	; (80166bc <prvCheckForValidListAndQueue+0x60>)
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d005      	beq.n	80166b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80166a4:	4b05      	ldr	r3, [pc, #20]	; (80166bc <prvCheckForValidListAndQueue+0x60>)
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	490b      	ldr	r1, [pc, #44]	; (80166d8 <prvCheckForValidListAndQueue+0x7c>)
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7fe f8ea 	bl	8014884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80166b0:	f000 f970 	bl	8016994 <vPortExitCritical>
}
 80166b4:	bf00      	nop
 80166b6:	46bd      	mov	sp, r7
 80166b8:	bd80      	pop	{r7, pc}
 80166ba:	bf00      	nop
 80166bc:	200034a8 	.word	0x200034a8
 80166c0:	20003478 	.word	0x20003478
 80166c4:	2000348c 	.word	0x2000348c
 80166c8:	200034a0 	.word	0x200034a0
 80166cc:	200034a4 	.word	0x200034a4
 80166d0:	20003554 	.word	0x20003554
 80166d4:	200034b4 	.word	0x200034b4
 80166d8:	0801b078 	.word	0x0801b078

080166dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80166dc:	b480      	push	{r7}
 80166de:	b085      	sub	sp, #20
 80166e0:	af00      	add	r7, sp, #0
 80166e2:	60f8      	str	r0, [r7, #12]
 80166e4:	60b9      	str	r1, [r7, #8]
 80166e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80166e8:	68fb      	ldr	r3, [r7, #12]
 80166ea:	3b04      	subs	r3, #4
 80166ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80166f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	3b04      	subs	r3, #4
 80166fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80166fc:	68bb      	ldr	r3, [r7, #8]
 80166fe:	f023 0201 	bic.w	r2, r3, #1
 8016702:	68fb      	ldr	r3, [r7, #12]
 8016704:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	3b04      	subs	r3, #4
 801670a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801670c:	4a0c      	ldr	r2, [pc, #48]	; (8016740 <pxPortInitialiseStack+0x64>)
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	3b14      	subs	r3, #20
 8016716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016718:	687a      	ldr	r2, [r7, #4]
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	3b04      	subs	r3, #4
 8016722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016724:	68fb      	ldr	r3, [r7, #12]
 8016726:	f06f 0202 	mvn.w	r2, #2
 801672a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	3b20      	subs	r3, #32
 8016730:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016732:	68fb      	ldr	r3, [r7, #12]
}
 8016734:	4618      	mov	r0, r3
 8016736:	3714      	adds	r7, #20
 8016738:	46bd      	mov	sp, r7
 801673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801673e:	4770      	bx	lr
 8016740:	08016745 	.word	0x08016745

08016744 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016744:	b480      	push	{r7}
 8016746:	b085      	sub	sp, #20
 8016748:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801674a:	2300      	movs	r3, #0
 801674c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801674e:	4b12      	ldr	r3, [pc, #72]	; (8016798 <prvTaskExitError+0x54>)
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016756:	d00a      	beq.n	801676e <prvTaskExitError+0x2a>
	__asm volatile
 8016758:	f04f 0350 	mov.w	r3, #80	; 0x50
 801675c:	f383 8811 	msr	BASEPRI, r3
 8016760:	f3bf 8f6f 	isb	sy
 8016764:	f3bf 8f4f 	dsb	sy
 8016768:	60fb      	str	r3, [r7, #12]
}
 801676a:	bf00      	nop
 801676c:	e7fe      	b.n	801676c <prvTaskExitError+0x28>
	__asm volatile
 801676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016772:	f383 8811 	msr	BASEPRI, r3
 8016776:	f3bf 8f6f 	isb	sy
 801677a:	f3bf 8f4f 	dsb	sy
 801677e:	60bb      	str	r3, [r7, #8]
}
 8016780:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016782:	bf00      	nop
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d0fc      	beq.n	8016784 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801678a:	bf00      	nop
 801678c:	bf00      	nop
 801678e:	3714      	adds	r7, #20
 8016790:	46bd      	mov	sp, r7
 8016792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016796:	4770      	bx	lr
 8016798:	20000160 	.word	0x20000160
 801679c:	00000000 	.word	0x00000000

080167a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80167a0:	4b07      	ldr	r3, [pc, #28]	; (80167c0 <pxCurrentTCBConst2>)
 80167a2:	6819      	ldr	r1, [r3, #0]
 80167a4:	6808      	ldr	r0, [r1, #0]
 80167a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80167aa:	f380 8809 	msr	PSP, r0
 80167ae:	f3bf 8f6f 	isb	sy
 80167b2:	f04f 0000 	mov.w	r0, #0
 80167b6:	f380 8811 	msr	BASEPRI, r0
 80167ba:	4770      	bx	lr
 80167bc:	f3af 8000 	nop.w

080167c0 <pxCurrentTCBConst2>:
 80167c0:	20002f70 	.word	0x20002f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80167c4:	bf00      	nop
 80167c6:	bf00      	nop

080167c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80167c8:	4808      	ldr	r0, [pc, #32]	; (80167ec <prvPortStartFirstTask+0x24>)
 80167ca:	6800      	ldr	r0, [r0, #0]
 80167cc:	6800      	ldr	r0, [r0, #0]
 80167ce:	f380 8808 	msr	MSP, r0
 80167d2:	f04f 0000 	mov.w	r0, #0
 80167d6:	f380 8814 	msr	CONTROL, r0
 80167da:	b662      	cpsie	i
 80167dc:	b661      	cpsie	f
 80167de:	f3bf 8f4f 	dsb	sy
 80167e2:	f3bf 8f6f 	isb	sy
 80167e6:	df00      	svc	0
 80167e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80167ea:	bf00      	nop
 80167ec:	e000ed08 	.word	0xe000ed08

080167f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80167f0:	b580      	push	{r7, lr}
 80167f2:	b086      	sub	sp, #24
 80167f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80167f6:	4b46      	ldr	r3, [pc, #280]	; (8016910 <xPortStartScheduler+0x120>)
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	4a46      	ldr	r2, [pc, #280]	; (8016914 <xPortStartScheduler+0x124>)
 80167fc:	4293      	cmp	r3, r2
 80167fe:	d10a      	bne.n	8016816 <xPortStartScheduler+0x26>
	__asm volatile
 8016800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016804:	f383 8811 	msr	BASEPRI, r3
 8016808:	f3bf 8f6f 	isb	sy
 801680c:	f3bf 8f4f 	dsb	sy
 8016810:	613b      	str	r3, [r7, #16]
}
 8016812:	bf00      	nop
 8016814:	e7fe      	b.n	8016814 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016816:	4b3e      	ldr	r3, [pc, #248]	; (8016910 <xPortStartScheduler+0x120>)
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	4a3f      	ldr	r2, [pc, #252]	; (8016918 <xPortStartScheduler+0x128>)
 801681c:	4293      	cmp	r3, r2
 801681e:	d10a      	bne.n	8016836 <xPortStartScheduler+0x46>
	__asm volatile
 8016820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016824:	f383 8811 	msr	BASEPRI, r3
 8016828:	f3bf 8f6f 	isb	sy
 801682c:	f3bf 8f4f 	dsb	sy
 8016830:	60fb      	str	r3, [r7, #12]
}
 8016832:	bf00      	nop
 8016834:	e7fe      	b.n	8016834 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016836:	4b39      	ldr	r3, [pc, #228]	; (801691c <xPortStartScheduler+0x12c>)
 8016838:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	781b      	ldrb	r3, [r3, #0]
 801683e:	b2db      	uxtb	r3, r3
 8016840:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	22ff      	movs	r2, #255	; 0xff
 8016846:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	b2db      	uxtb	r3, r3
 801684e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016850:	78fb      	ldrb	r3, [r7, #3]
 8016852:	b2db      	uxtb	r3, r3
 8016854:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016858:	b2da      	uxtb	r2, r3
 801685a:	4b31      	ldr	r3, [pc, #196]	; (8016920 <xPortStartScheduler+0x130>)
 801685c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801685e:	4b31      	ldr	r3, [pc, #196]	; (8016924 <xPortStartScheduler+0x134>)
 8016860:	2207      	movs	r2, #7
 8016862:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016864:	e009      	b.n	801687a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016866:	4b2f      	ldr	r3, [pc, #188]	; (8016924 <xPortStartScheduler+0x134>)
 8016868:	681b      	ldr	r3, [r3, #0]
 801686a:	3b01      	subs	r3, #1
 801686c:	4a2d      	ldr	r2, [pc, #180]	; (8016924 <xPortStartScheduler+0x134>)
 801686e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016870:	78fb      	ldrb	r3, [r7, #3]
 8016872:	b2db      	uxtb	r3, r3
 8016874:	005b      	lsls	r3, r3, #1
 8016876:	b2db      	uxtb	r3, r3
 8016878:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801687a:	78fb      	ldrb	r3, [r7, #3]
 801687c:	b2db      	uxtb	r3, r3
 801687e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016882:	2b80      	cmp	r3, #128	; 0x80
 8016884:	d0ef      	beq.n	8016866 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016886:	4b27      	ldr	r3, [pc, #156]	; (8016924 <xPortStartScheduler+0x134>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	f1c3 0307 	rsb	r3, r3, #7
 801688e:	2b04      	cmp	r3, #4
 8016890:	d00a      	beq.n	80168a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8016892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016896:	f383 8811 	msr	BASEPRI, r3
 801689a:	f3bf 8f6f 	isb	sy
 801689e:	f3bf 8f4f 	dsb	sy
 80168a2:	60bb      	str	r3, [r7, #8]
}
 80168a4:	bf00      	nop
 80168a6:	e7fe      	b.n	80168a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80168a8:	4b1e      	ldr	r3, [pc, #120]	; (8016924 <xPortStartScheduler+0x134>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	021b      	lsls	r3, r3, #8
 80168ae:	4a1d      	ldr	r2, [pc, #116]	; (8016924 <xPortStartScheduler+0x134>)
 80168b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80168b2:	4b1c      	ldr	r3, [pc, #112]	; (8016924 <xPortStartScheduler+0x134>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80168ba:	4a1a      	ldr	r2, [pc, #104]	; (8016924 <xPortStartScheduler+0x134>)
 80168bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	b2da      	uxtb	r2, r3
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80168c6:	4b18      	ldr	r3, [pc, #96]	; (8016928 <xPortStartScheduler+0x138>)
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	4a17      	ldr	r2, [pc, #92]	; (8016928 <xPortStartScheduler+0x138>)
 80168cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80168d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80168d2:	4b15      	ldr	r3, [pc, #84]	; (8016928 <xPortStartScheduler+0x138>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	4a14      	ldr	r2, [pc, #80]	; (8016928 <xPortStartScheduler+0x138>)
 80168d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80168dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80168de:	f000 f8dd 	bl	8016a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80168e2:	4b12      	ldr	r3, [pc, #72]	; (801692c <xPortStartScheduler+0x13c>)
 80168e4:	2200      	movs	r2, #0
 80168e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80168e8:	f000 f8fc 	bl	8016ae4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80168ec:	4b10      	ldr	r3, [pc, #64]	; (8016930 <xPortStartScheduler+0x140>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	4a0f      	ldr	r2, [pc, #60]	; (8016930 <xPortStartScheduler+0x140>)
 80168f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80168f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80168f8:	f7ff ff66 	bl	80167c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80168fc:	f7fe fd1a 	bl	8015334 <vTaskSwitchContext>
	prvTaskExitError();
 8016900:	f7ff ff20 	bl	8016744 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016904:	2300      	movs	r3, #0
}
 8016906:	4618      	mov	r0, r3
 8016908:	3718      	adds	r7, #24
 801690a:	46bd      	mov	sp, r7
 801690c:	bd80      	pop	{r7, pc}
 801690e:	bf00      	nop
 8016910:	e000ed00 	.word	0xe000ed00
 8016914:	410fc271 	.word	0x410fc271
 8016918:	410fc270 	.word	0x410fc270
 801691c:	e000e400 	.word	0xe000e400
 8016920:	200035a4 	.word	0x200035a4
 8016924:	200035a8 	.word	0x200035a8
 8016928:	e000ed20 	.word	0xe000ed20
 801692c:	20000160 	.word	0x20000160
 8016930:	e000ef34 	.word	0xe000ef34

08016934 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016934:	b480      	push	{r7}
 8016936:	b083      	sub	sp, #12
 8016938:	af00      	add	r7, sp, #0
	__asm volatile
 801693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801693e:	f383 8811 	msr	BASEPRI, r3
 8016942:	f3bf 8f6f 	isb	sy
 8016946:	f3bf 8f4f 	dsb	sy
 801694a:	607b      	str	r3, [r7, #4]
}
 801694c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801694e:	4b0f      	ldr	r3, [pc, #60]	; (801698c <vPortEnterCritical+0x58>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	3301      	adds	r3, #1
 8016954:	4a0d      	ldr	r2, [pc, #52]	; (801698c <vPortEnterCritical+0x58>)
 8016956:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016958:	4b0c      	ldr	r3, [pc, #48]	; (801698c <vPortEnterCritical+0x58>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	2b01      	cmp	r3, #1
 801695e:	d10f      	bne.n	8016980 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016960:	4b0b      	ldr	r3, [pc, #44]	; (8016990 <vPortEnterCritical+0x5c>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	b2db      	uxtb	r3, r3
 8016966:	2b00      	cmp	r3, #0
 8016968:	d00a      	beq.n	8016980 <vPortEnterCritical+0x4c>
	__asm volatile
 801696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801696e:	f383 8811 	msr	BASEPRI, r3
 8016972:	f3bf 8f6f 	isb	sy
 8016976:	f3bf 8f4f 	dsb	sy
 801697a:	603b      	str	r3, [r7, #0]
}
 801697c:	bf00      	nop
 801697e:	e7fe      	b.n	801697e <vPortEnterCritical+0x4a>
	}
}
 8016980:	bf00      	nop
 8016982:	370c      	adds	r7, #12
 8016984:	46bd      	mov	sp, r7
 8016986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801698a:	4770      	bx	lr
 801698c:	20000160 	.word	0x20000160
 8016990:	e000ed04 	.word	0xe000ed04

08016994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016994:	b480      	push	{r7}
 8016996:	b083      	sub	sp, #12
 8016998:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801699a:	4b12      	ldr	r3, [pc, #72]	; (80169e4 <vPortExitCritical+0x50>)
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d10a      	bne.n	80169b8 <vPortExitCritical+0x24>
	__asm volatile
 80169a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169a6:	f383 8811 	msr	BASEPRI, r3
 80169aa:	f3bf 8f6f 	isb	sy
 80169ae:	f3bf 8f4f 	dsb	sy
 80169b2:	607b      	str	r3, [r7, #4]
}
 80169b4:	bf00      	nop
 80169b6:	e7fe      	b.n	80169b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80169b8:	4b0a      	ldr	r3, [pc, #40]	; (80169e4 <vPortExitCritical+0x50>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	3b01      	subs	r3, #1
 80169be:	4a09      	ldr	r2, [pc, #36]	; (80169e4 <vPortExitCritical+0x50>)
 80169c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80169c2:	4b08      	ldr	r3, [pc, #32]	; (80169e4 <vPortExitCritical+0x50>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d105      	bne.n	80169d6 <vPortExitCritical+0x42>
 80169ca:	2300      	movs	r3, #0
 80169cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80169ce:	683b      	ldr	r3, [r7, #0]
 80169d0:	f383 8811 	msr	BASEPRI, r3
}
 80169d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80169d6:	bf00      	nop
 80169d8:	370c      	adds	r7, #12
 80169da:	46bd      	mov	sp, r7
 80169dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e0:	4770      	bx	lr
 80169e2:	bf00      	nop
 80169e4:	20000160 	.word	0x20000160
	...

080169f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80169f0:	f3ef 8009 	mrs	r0, PSP
 80169f4:	f3bf 8f6f 	isb	sy
 80169f8:	4b15      	ldr	r3, [pc, #84]	; (8016a50 <pxCurrentTCBConst>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	f01e 0f10 	tst.w	lr, #16
 8016a00:	bf08      	it	eq
 8016a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a0a:	6010      	str	r0, [r2, #0]
 8016a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016a14:	f380 8811 	msr	BASEPRI, r0
 8016a18:	f3bf 8f4f 	dsb	sy
 8016a1c:	f3bf 8f6f 	isb	sy
 8016a20:	f7fe fc88 	bl	8015334 <vTaskSwitchContext>
 8016a24:	f04f 0000 	mov.w	r0, #0
 8016a28:	f380 8811 	msr	BASEPRI, r0
 8016a2c:	bc09      	pop	{r0, r3}
 8016a2e:	6819      	ldr	r1, [r3, #0]
 8016a30:	6808      	ldr	r0, [r1, #0]
 8016a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a36:	f01e 0f10 	tst.w	lr, #16
 8016a3a:	bf08      	it	eq
 8016a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016a40:	f380 8809 	msr	PSP, r0
 8016a44:	f3bf 8f6f 	isb	sy
 8016a48:	4770      	bx	lr
 8016a4a:	bf00      	nop
 8016a4c:	f3af 8000 	nop.w

08016a50 <pxCurrentTCBConst>:
 8016a50:	20002f70 	.word	0x20002f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016a54:	bf00      	nop
 8016a56:	bf00      	nop

08016a58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b082      	sub	sp, #8
 8016a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8016a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a62:	f383 8811 	msr	BASEPRI, r3
 8016a66:	f3bf 8f6f 	isb	sy
 8016a6a:	f3bf 8f4f 	dsb	sy
 8016a6e:	607b      	str	r3, [r7, #4]
}
 8016a70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016a72:	f7fe fba5 	bl	80151c0 <xTaskIncrementTick>
 8016a76:	4603      	mov	r3, r0
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d003      	beq.n	8016a84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016a7c:	4b06      	ldr	r3, [pc, #24]	; (8016a98 <xPortSysTickHandler+0x40>)
 8016a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a82:	601a      	str	r2, [r3, #0]
 8016a84:	2300      	movs	r3, #0
 8016a86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016a88:	683b      	ldr	r3, [r7, #0]
 8016a8a:	f383 8811 	msr	BASEPRI, r3
}
 8016a8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016a90:	bf00      	nop
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	e000ed04 	.word	0xe000ed04

08016a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016a9c:	b480      	push	{r7}
 8016a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016aa0:	4b0b      	ldr	r3, [pc, #44]	; (8016ad0 <vPortSetupTimerInterrupt+0x34>)
 8016aa2:	2200      	movs	r2, #0
 8016aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016aa6:	4b0b      	ldr	r3, [pc, #44]	; (8016ad4 <vPortSetupTimerInterrupt+0x38>)
 8016aa8:	2200      	movs	r2, #0
 8016aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016aac:	4b0a      	ldr	r3, [pc, #40]	; (8016ad8 <vPortSetupTimerInterrupt+0x3c>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4a0a      	ldr	r2, [pc, #40]	; (8016adc <vPortSetupTimerInterrupt+0x40>)
 8016ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ab6:	099b      	lsrs	r3, r3, #6
 8016ab8:	4a09      	ldr	r2, [pc, #36]	; (8016ae0 <vPortSetupTimerInterrupt+0x44>)
 8016aba:	3b01      	subs	r3, #1
 8016abc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016abe:	4b04      	ldr	r3, [pc, #16]	; (8016ad0 <vPortSetupTimerInterrupt+0x34>)
 8016ac0:	2207      	movs	r2, #7
 8016ac2:	601a      	str	r2, [r3, #0]
}
 8016ac4:	bf00      	nop
 8016ac6:	46bd      	mov	sp, r7
 8016ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016acc:	4770      	bx	lr
 8016ace:	bf00      	nop
 8016ad0:	e000e010 	.word	0xe000e010
 8016ad4:	e000e018 	.word	0xe000e018
 8016ad8:	20000030 	.word	0x20000030
 8016adc:	10624dd3 	.word	0x10624dd3
 8016ae0:	e000e014 	.word	0xe000e014

08016ae4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016ae4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016af4 <vPortEnableVFP+0x10>
 8016ae8:	6801      	ldr	r1, [r0, #0]
 8016aea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8016aee:	6001      	str	r1, [r0, #0]
 8016af0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016af2:	bf00      	nop
 8016af4:	e000ed88 	.word	0xe000ed88

08016af8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016af8:	b480      	push	{r7}
 8016afa:	b085      	sub	sp, #20
 8016afc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016afe:	f3ef 8305 	mrs	r3, IPSR
 8016b02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	2b0f      	cmp	r3, #15
 8016b08:	d914      	bls.n	8016b34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016b0a:	4a17      	ldr	r2, [pc, #92]	; (8016b68 <vPortValidateInterruptPriority+0x70>)
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	4413      	add	r3, r2
 8016b10:	781b      	ldrb	r3, [r3, #0]
 8016b12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016b14:	4b15      	ldr	r3, [pc, #84]	; (8016b6c <vPortValidateInterruptPriority+0x74>)
 8016b16:	781b      	ldrb	r3, [r3, #0]
 8016b18:	7afa      	ldrb	r2, [r7, #11]
 8016b1a:	429a      	cmp	r2, r3
 8016b1c:	d20a      	bcs.n	8016b34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8016b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b22:	f383 8811 	msr	BASEPRI, r3
 8016b26:	f3bf 8f6f 	isb	sy
 8016b2a:	f3bf 8f4f 	dsb	sy
 8016b2e:	607b      	str	r3, [r7, #4]
}
 8016b30:	bf00      	nop
 8016b32:	e7fe      	b.n	8016b32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016b34:	4b0e      	ldr	r3, [pc, #56]	; (8016b70 <vPortValidateInterruptPriority+0x78>)
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8016b3c:	4b0d      	ldr	r3, [pc, #52]	; (8016b74 <vPortValidateInterruptPriority+0x7c>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	429a      	cmp	r2, r3
 8016b42:	d90a      	bls.n	8016b5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b48:	f383 8811 	msr	BASEPRI, r3
 8016b4c:	f3bf 8f6f 	isb	sy
 8016b50:	f3bf 8f4f 	dsb	sy
 8016b54:	603b      	str	r3, [r7, #0]
}
 8016b56:	bf00      	nop
 8016b58:	e7fe      	b.n	8016b58 <vPortValidateInterruptPriority+0x60>
	}
 8016b5a:	bf00      	nop
 8016b5c:	3714      	adds	r7, #20
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b64:	4770      	bx	lr
 8016b66:	bf00      	nop
 8016b68:	e000e3f0 	.word	0xe000e3f0
 8016b6c:	200035a4 	.word	0x200035a4
 8016b70:	e000ed0c 	.word	0xe000ed0c
 8016b74:	200035a8 	.word	0x200035a8

08016b78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b08a      	sub	sp, #40	; 0x28
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016b80:	2300      	movs	r3, #0
 8016b82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016b84:	f7fe f9d0 	bl	8014f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016b88:	4b5b      	ldr	r3, [pc, #364]	; (8016cf8 <pvPortMalloc+0x180>)
 8016b8a:	681b      	ldr	r3, [r3, #0]
 8016b8c:	2b00      	cmp	r3, #0
 8016b8e:	d101      	bne.n	8016b94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016b90:	f000 f92c 	bl	8016dec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016b94:	4b59      	ldr	r3, [pc, #356]	; (8016cfc <pvPortMalloc+0x184>)
 8016b96:	681a      	ldr	r2, [r3, #0]
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	f040 8093 	bne.w	8016cc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d01d      	beq.n	8016be4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8016ba8:	2208      	movs	r2, #8
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	4413      	add	r3, r2
 8016bae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f003 0307 	and.w	r3, r3, #7
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d014      	beq.n	8016be4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	f023 0307 	bic.w	r3, r3, #7
 8016bc0:	3308      	adds	r3, #8
 8016bc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f003 0307 	and.w	r3, r3, #7
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d00a      	beq.n	8016be4 <pvPortMalloc+0x6c>
	__asm volatile
 8016bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd2:	f383 8811 	msr	BASEPRI, r3
 8016bd6:	f3bf 8f6f 	isb	sy
 8016bda:	f3bf 8f4f 	dsb	sy
 8016bde:	617b      	str	r3, [r7, #20]
}
 8016be0:	bf00      	nop
 8016be2:	e7fe      	b.n	8016be2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d06e      	beq.n	8016cc8 <pvPortMalloc+0x150>
 8016bea:	4b45      	ldr	r3, [pc, #276]	; (8016d00 <pvPortMalloc+0x188>)
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	429a      	cmp	r2, r3
 8016bf2:	d869      	bhi.n	8016cc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016bf4:	4b43      	ldr	r3, [pc, #268]	; (8016d04 <pvPortMalloc+0x18c>)
 8016bf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016bf8:	4b42      	ldr	r3, [pc, #264]	; (8016d04 <pvPortMalloc+0x18c>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016bfe:	e004      	b.n	8016c0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c0c:	685b      	ldr	r3, [r3, #4]
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	429a      	cmp	r2, r3
 8016c12:	d903      	bls.n	8016c1c <pvPortMalloc+0xa4>
 8016c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d1f1      	bne.n	8016c00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016c1c:	4b36      	ldr	r3, [pc, #216]	; (8016cf8 <pvPortMalloc+0x180>)
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d050      	beq.n	8016cc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016c26:	6a3b      	ldr	r3, [r7, #32]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	2208      	movs	r2, #8
 8016c2c:	4413      	add	r3, r2
 8016c2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c32:	681a      	ldr	r2, [r3, #0]
 8016c34:	6a3b      	ldr	r3, [r7, #32]
 8016c36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3a:	685a      	ldr	r2, [r3, #4]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	1ad2      	subs	r2, r2, r3
 8016c40:	2308      	movs	r3, #8
 8016c42:	005b      	lsls	r3, r3, #1
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d91f      	bls.n	8016c88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	4413      	add	r3, r2
 8016c4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016c50:	69bb      	ldr	r3, [r7, #24]
 8016c52:	f003 0307 	and.w	r3, r3, #7
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d00a      	beq.n	8016c70 <pvPortMalloc+0xf8>
	__asm volatile
 8016c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c5e:	f383 8811 	msr	BASEPRI, r3
 8016c62:	f3bf 8f6f 	isb	sy
 8016c66:	f3bf 8f4f 	dsb	sy
 8016c6a:	613b      	str	r3, [r7, #16]
}
 8016c6c:	bf00      	nop
 8016c6e:	e7fe      	b.n	8016c6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c72:	685a      	ldr	r2, [r3, #4]
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	1ad2      	subs	r2, r2, r3
 8016c78:	69bb      	ldr	r3, [r7, #24]
 8016c7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7e:	687a      	ldr	r2, [r7, #4]
 8016c80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016c82:	69b8      	ldr	r0, [r7, #24]
 8016c84:	f000 f914 	bl	8016eb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016c88:	4b1d      	ldr	r3, [pc, #116]	; (8016d00 <pvPortMalloc+0x188>)
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c8e:	685b      	ldr	r3, [r3, #4]
 8016c90:	1ad3      	subs	r3, r2, r3
 8016c92:	4a1b      	ldr	r2, [pc, #108]	; (8016d00 <pvPortMalloc+0x188>)
 8016c94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016c96:	4b1a      	ldr	r3, [pc, #104]	; (8016d00 <pvPortMalloc+0x188>)
 8016c98:	681a      	ldr	r2, [r3, #0]
 8016c9a:	4b1b      	ldr	r3, [pc, #108]	; (8016d08 <pvPortMalloc+0x190>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	429a      	cmp	r2, r3
 8016ca0:	d203      	bcs.n	8016caa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016ca2:	4b17      	ldr	r3, [pc, #92]	; (8016d00 <pvPortMalloc+0x188>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4a18      	ldr	r2, [pc, #96]	; (8016d08 <pvPortMalloc+0x190>)
 8016ca8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cac:	685a      	ldr	r2, [r3, #4]
 8016cae:	4b13      	ldr	r3, [pc, #76]	; (8016cfc <pvPortMalloc+0x184>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	431a      	orrs	r2, r3
 8016cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cba:	2200      	movs	r2, #0
 8016cbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016cbe:	4b13      	ldr	r3, [pc, #76]	; (8016d0c <pvPortMalloc+0x194>)
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	4a11      	ldr	r2, [pc, #68]	; (8016d0c <pvPortMalloc+0x194>)
 8016cc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016cc8:	f7fe f93c 	bl	8014f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	f003 0307 	and.w	r3, r3, #7
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d00a      	beq.n	8016cec <pvPortMalloc+0x174>
	__asm volatile
 8016cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cda:	f383 8811 	msr	BASEPRI, r3
 8016cde:	f3bf 8f6f 	isb	sy
 8016ce2:	f3bf 8f4f 	dsb	sy
 8016ce6:	60fb      	str	r3, [r7, #12]
}
 8016ce8:	bf00      	nop
 8016cea:	e7fe      	b.n	8016cea <pvPortMalloc+0x172>
	return pvReturn;
 8016cec:	69fb      	ldr	r3, [r7, #28]
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	3728      	adds	r7, #40	; 0x28
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd80      	pop	{r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	20007434 	.word	0x20007434
 8016cfc:	20007448 	.word	0x20007448
 8016d00:	20007438 	.word	0x20007438
 8016d04:	2000742c 	.word	0x2000742c
 8016d08:	2000743c 	.word	0x2000743c
 8016d0c:	20007440 	.word	0x20007440

08016d10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b086      	sub	sp, #24
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d04d      	beq.n	8016dbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016d22:	2308      	movs	r3, #8
 8016d24:	425b      	negs	r3, r3
 8016d26:	697a      	ldr	r2, [r7, #20]
 8016d28:	4413      	add	r3, r2
 8016d2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016d2c:	697b      	ldr	r3, [r7, #20]
 8016d2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016d30:	693b      	ldr	r3, [r7, #16]
 8016d32:	685a      	ldr	r2, [r3, #4]
 8016d34:	4b24      	ldr	r3, [pc, #144]	; (8016dc8 <vPortFree+0xb8>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4013      	ands	r3, r2
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d10a      	bne.n	8016d54 <vPortFree+0x44>
	__asm volatile
 8016d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d42:	f383 8811 	msr	BASEPRI, r3
 8016d46:	f3bf 8f6f 	isb	sy
 8016d4a:	f3bf 8f4f 	dsb	sy
 8016d4e:	60fb      	str	r3, [r7, #12]
}
 8016d50:	bf00      	nop
 8016d52:	e7fe      	b.n	8016d52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016d54:	693b      	ldr	r3, [r7, #16]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d00a      	beq.n	8016d72 <vPortFree+0x62>
	__asm volatile
 8016d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d60:	f383 8811 	msr	BASEPRI, r3
 8016d64:	f3bf 8f6f 	isb	sy
 8016d68:	f3bf 8f4f 	dsb	sy
 8016d6c:	60bb      	str	r3, [r7, #8]
}
 8016d6e:	bf00      	nop
 8016d70:	e7fe      	b.n	8016d70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016d72:	693b      	ldr	r3, [r7, #16]
 8016d74:	685a      	ldr	r2, [r3, #4]
 8016d76:	4b14      	ldr	r3, [pc, #80]	; (8016dc8 <vPortFree+0xb8>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	4013      	ands	r3, r2
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d01e      	beq.n	8016dbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016d80:	693b      	ldr	r3, [r7, #16]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d11a      	bne.n	8016dbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016d88:	693b      	ldr	r3, [r7, #16]
 8016d8a:	685a      	ldr	r2, [r3, #4]
 8016d8c:	4b0e      	ldr	r3, [pc, #56]	; (8016dc8 <vPortFree+0xb8>)
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	43db      	mvns	r3, r3
 8016d92:	401a      	ands	r2, r3
 8016d94:	693b      	ldr	r3, [r7, #16]
 8016d96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016d98:	f7fe f8c6 	bl	8014f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016d9c:	693b      	ldr	r3, [r7, #16]
 8016d9e:	685a      	ldr	r2, [r3, #4]
 8016da0:	4b0a      	ldr	r3, [pc, #40]	; (8016dcc <vPortFree+0xbc>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	4413      	add	r3, r2
 8016da6:	4a09      	ldr	r2, [pc, #36]	; (8016dcc <vPortFree+0xbc>)
 8016da8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016daa:	6938      	ldr	r0, [r7, #16]
 8016dac:	f000 f880 	bl	8016eb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016db0:	4b07      	ldr	r3, [pc, #28]	; (8016dd0 <vPortFree+0xc0>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	3301      	adds	r3, #1
 8016db6:	4a06      	ldr	r2, [pc, #24]	; (8016dd0 <vPortFree+0xc0>)
 8016db8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016dba:	f7fe f8c3 	bl	8014f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016dbe:	bf00      	nop
 8016dc0:	3718      	adds	r7, #24
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bd80      	pop	{r7, pc}
 8016dc6:	bf00      	nop
 8016dc8:	20007448 	.word	0x20007448
 8016dcc:	20007438 	.word	0x20007438
 8016dd0:	20007444 	.word	0x20007444

08016dd4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8016dd4:	b480      	push	{r7}
 8016dd6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8016dd8:	4b03      	ldr	r3, [pc, #12]	; (8016de8 <xPortGetFreeHeapSize+0x14>)
 8016dda:	681b      	ldr	r3, [r3, #0]
}
 8016ddc:	4618      	mov	r0, r3
 8016dde:	46bd      	mov	sp, r7
 8016de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de4:	4770      	bx	lr
 8016de6:	bf00      	nop
 8016de8:	20007438 	.word	0x20007438

08016dec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016dec:	b480      	push	{r7}
 8016dee:	b085      	sub	sp, #20
 8016df0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016df2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8016df6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016df8:	4b27      	ldr	r3, [pc, #156]	; (8016e98 <prvHeapInit+0xac>)
 8016dfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f003 0307 	and.w	r3, r3, #7
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d00c      	beq.n	8016e20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	3307      	adds	r3, #7
 8016e0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	f023 0307 	bic.w	r3, r3, #7
 8016e12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016e14:	68ba      	ldr	r2, [r7, #8]
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	1ad3      	subs	r3, r2, r3
 8016e1a:	4a1f      	ldr	r2, [pc, #124]	; (8016e98 <prvHeapInit+0xac>)
 8016e1c:	4413      	add	r3, r2
 8016e1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016e24:	4a1d      	ldr	r2, [pc, #116]	; (8016e9c <prvHeapInit+0xb0>)
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016e2a:	4b1c      	ldr	r3, [pc, #112]	; (8016e9c <prvHeapInit+0xb0>)
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	68ba      	ldr	r2, [r7, #8]
 8016e34:	4413      	add	r3, r2
 8016e36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016e38:	2208      	movs	r2, #8
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	1a9b      	subs	r3, r3, r2
 8016e3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016e40:	68fb      	ldr	r3, [r7, #12]
 8016e42:	f023 0307 	bic.w	r3, r3, #7
 8016e46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	4a15      	ldr	r2, [pc, #84]	; (8016ea0 <prvHeapInit+0xb4>)
 8016e4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016e4e:	4b14      	ldr	r3, [pc, #80]	; (8016ea0 <prvHeapInit+0xb4>)
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	2200      	movs	r2, #0
 8016e54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016e56:	4b12      	ldr	r3, [pc, #72]	; (8016ea0 <prvHeapInit+0xb4>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	2200      	movs	r2, #0
 8016e5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	68fa      	ldr	r2, [r7, #12]
 8016e66:	1ad2      	subs	r2, r2, r3
 8016e68:	683b      	ldr	r3, [r7, #0]
 8016e6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016e6c:	4b0c      	ldr	r3, [pc, #48]	; (8016ea0 <prvHeapInit+0xb4>)
 8016e6e:	681a      	ldr	r2, [r3, #0]
 8016e70:	683b      	ldr	r3, [r7, #0]
 8016e72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016e74:	683b      	ldr	r3, [r7, #0]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	4a0a      	ldr	r2, [pc, #40]	; (8016ea4 <prvHeapInit+0xb8>)
 8016e7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016e7c:	683b      	ldr	r3, [r7, #0]
 8016e7e:	685b      	ldr	r3, [r3, #4]
 8016e80:	4a09      	ldr	r2, [pc, #36]	; (8016ea8 <prvHeapInit+0xbc>)
 8016e82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016e84:	4b09      	ldr	r3, [pc, #36]	; (8016eac <prvHeapInit+0xc0>)
 8016e86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016e8a:	601a      	str	r2, [r3, #0]
}
 8016e8c:	bf00      	nop
 8016e8e:	3714      	adds	r7, #20
 8016e90:	46bd      	mov	sp, r7
 8016e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e96:	4770      	bx	lr
 8016e98:	200035ac 	.word	0x200035ac
 8016e9c:	2000742c 	.word	0x2000742c
 8016ea0:	20007434 	.word	0x20007434
 8016ea4:	2000743c 	.word	0x2000743c
 8016ea8:	20007438 	.word	0x20007438
 8016eac:	20007448 	.word	0x20007448

08016eb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016eb0:	b480      	push	{r7}
 8016eb2:	b085      	sub	sp, #20
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016eb8:	4b28      	ldr	r3, [pc, #160]	; (8016f5c <prvInsertBlockIntoFreeList+0xac>)
 8016eba:	60fb      	str	r3, [r7, #12]
 8016ebc:	e002      	b.n	8016ec4 <prvInsertBlockIntoFreeList+0x14>
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	60fb      	str	r3, [r7, #12]
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	429a      	cmp	r2, r3
 8016ecc:	d8f7      	bhi.n	8016ebe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016ece:	68fb      	ldr	r3, [r7, #12]
 8016ed0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	685b      	ldr	r3, [r3, #4]
 8016ed6:	68ba      	ldr	r2, [r7, #8]
 8016ed8:	4413      	add	r3, r2
 8016eda:	687a      	ldr	r2, [r7, #4]
 8016edc:	429a      	cmp	r2, r3
 8016ede:	d108      	bne.n	8016ef2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	685a      	ldr	r2, [r3, #4]
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	441a      	add	r2, r3
 8016eea:	68fb      	ldr	r3, [r7, #12]
 8016eec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016ef6:	687b      	ldr	r3, [r7, #4]
 8016ef8:	685b      	ldr	r3, [r3, #4]
 8016efa:	68ba      	ldr	r2, [r7, #8]
 8016efc:	441a      	add	r2, r3
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d118      	bne.n	8016f38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	681a      	ldr	r2, [r3, #0]
 8016f0a:	4b15      	ldr	r3, [pc, #84]	; (8016f60 <prvInsertBlockIntoFreeList+0xb0>)
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	429a      	cmp	r2, r3
 8016f10:	d00d      	beq.n	8016f2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	685a      	ldr	r2, [r3, #4]
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	685b      	ldr	r3, [r3, #4]
 8016f1c:	441a      	add	r2, r3
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	681a      	ldr	r2, [r3, #0]
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	601a      	str	r2, [r3, #0]
 8016f2c:	e008      	b.n	8016f40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016f2e:	4b0c      	ldr	r3, [pc, #48]	; (8016f60 <prvInsertBlockIntoFreeList+0xb0>)
 8016f30:	681a      	ldr	r2, [r3, #0]
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	601a      	str	r2, [r3, #0]
 8016f36:	e003      	b.n	8016f40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016f38:	68fb      	ldr	r3, [r7, #12]
 8016f3a:	681a      	ldr	r2, [r3, #0]
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016f40:	68fa      	ldr	r2, [r7, #12]
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	429a      	cmp	r2, r3
 8016f46:	d002      	beq.n	8016f4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f4e:	bf00      	nop
 8016f50:	3714      	adds	r7, #20
 8016f52:	46bd      	mov	sp, r7
 8016f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f58:	4770      	bx	lr
 8016f5a:	bf00      	nop
 8016f5c:	2000742c 	.word	0x2000742c
 8016f60:	20007434 	.word	0x20007434

08016f64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016f68:	2200      	movs	r2, #0
 8016f6a:	4912      	ldr	r1, [pc, #72]	; (8016fb4 <MX_USB_DEVICE_Init+0x50>)
 8016f6c:	4812      	ldr	r0, [pc, #72]	; (8016fb8 <MX_USB_DEVICE_Init+0x54>)
 8016f6e:	f7f7 fba9 	bl	800e6c4 <USBD_Init>
 8016f72:	4603      	mov	r3, r0
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d001      	beq.n	8016f7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016f78:	f7ed fb96 	bl	80046a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016f7c:	490f      	ldr	r1, [pc, #60]	; (8016fbc <MX_USB_DEVICE_Init+0x58>)
 8016f7e:	480e      	ldr	r0, [pc, #56]	; (8016fb8 <MX_USB_DEVICE_Init+0x54>)
 8016f80:	f7f7 fbd0 	bl	800e724 <USBD_RegisterClass>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d001      	beq.n	8016f8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016f8a:	f7ed fb8d 	bl	80046a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016f8e:	490c      	ldr	r1, [pc, #48]	; (8016fc0 <MX_USB_DEVICE_Init+0x5c>)
 8016f90:	4809      	ldr	r0, [pc, #36]	; (8016fb8 <MX_USB_DEVICE_Init+0x54>)
 8016f92:	f7f7 faf1 	bl	800e578 <USBD_CDC_RegisterInterface>
 8016f96:	4603      	mov	r3, r0
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d001      	beq.n	8016fa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016f9c:	f7ed fb84 	bl	80046a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016fa0:	4805      	ldr	r0, [pc, #20]	; (8016fb8 <MX_USB_DEVICE_Init+0x54>)
 8016fa2:	f7f7 fbe6 	bl	800e772 <USBD_Start>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d001      	beq.n	8016fb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016fac:	f7ed fb7c 	bl	80046a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016fb0:	bf00      	nop
 8016fb2:	bd80      	pop	{r7, pc}
 8016fb4:	20000178 	.word	0x20000178
 8016fb8:	200130a8 	.word	0x200130a8
 8016fbc:	2000005c 	.word	0x2000005c
 8016fc0:	20000164 	.word	0x20000164

08016fc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016fc8:	2200      	movs	r2, #0
 8016fca:	4905      	ldr	r1, [pc, #20]	; (8016fe0 <CDC_Init_FS+0x1c>)
 8016fcc:	4805      	ldr	r0, [pc, #20]	; (8016fe4 <CDC_Init_FS+0x20>)
 8016fce:	f7f7 fae8 	bl	800e5a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016fd2:	4905      	ldr	r1, [pc, #20]	; (8016fe8 <CDC_Init_FS+0x24>)
 8016fd4:	4803      	ldr	r0, [pc, #12]	; (8016fe4 <CDC_Init_FS+0x20>)
 8016fd6:	f7f7 fb02 	bl	800e5de <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016fda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	bd80      	pop	{r7, pc}
 8016fe0:	20013b78 	.word	0x20013b78
 8016fe4:	200130a8 	.word	0x200130a8
 8016fe8:	20013378 	.word	0x20013378

08016fec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016fec:	b480      	push	{r7}
 8016fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016ff0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016ff2:	4618      	mov	r0, r3
 8016ff4:	46bd      	mov	sp, r7
 8016ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ffa:	4770      	bx	lr

08016ffc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016ffc:	b480      	push	{r7}
 8016ffe:	b083      	sub	sp, #12
 8017000:	af00      	add	r7, sp, #0
 8017002:	4603      	mov	r3, r0
 8017004:	6039      	str	r1, [r7, #0]
 8017006:	71fb      	strb	r3, [r7, #7]
 8017008:	4613      	mov	r3, r2
 801700a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801700c:	79fb      	ldrb	r3, [r7, #7]
 801700e:	2b23      	cmp	r3, #35	; 0x23
 8017010:	d84a      	bhi.n	80170a8 <CDC_Control_FS+0xac>
 8017012:	a201      	add	r2, pc, #4	; (adr r2, 8017018 <CDC_Control_FS+0x1c>)
 8017014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017018:	080170a9 	.word	0x080170a9
 801701c:	080170a9 	.word	0x080170a9
 8017020:	080170a9 	.word	0x080170a9
 8017024:	080170a9 	.word	0x080170a9
 8017028:	080170a9 	.word	0x080170a9
 801702c:	080170a9 	.word	0x080170a9
 8017030:	080170a9 	.word	0x080170a9
 8017034:	080170a9 	.word	0x080170a9
 8017038:	080170a9 	.word	0x080170a9
 801703c:	080170a9 	.word	0x080170a9
 8017040:	080170a9 	.word	0x080170a9
 8017044:	080170a9 	.word	0x080170a9
 8017048:	080170a9 	.word	0x080170a9
 801704c:	080170a9 	.word	0x080170a9
 8017050:	080170a9 	.word	0x080170a9
 8017054:	080170a9 	.word	0x080170a9
 8017058:	080170a9 	.word	0x080170a9
 801705c:	080170a9 	.word	0x080170a9
 8017060:	080170a9 	.word	0x080170a9
 8017064:	080170a9 	.word	0x080170a9
 8017068:	080170a9 	.word	0x080170a9
 801706c:	080170a9 	.word	0x080170a9
 8017070:	080170a9 	.word	0x080170a9
 8017074:	080170a9 	.word	0x080170a9
 8017078:	080170a9 	.word	0x080170a9
 801707c:	080170a9 	.word	0x080170a9
 8017080:	080170a9 	.word	0x080170a9
 8017084:	080170a9 	.word	0x080170a9
 8017088:	080170a9 	.word	0x080170a9
 801708c:	080170a9 	.word	0x080170a9
 8017090:	080170a9 	.word	0x080170a9
 8017094:	080170a9 	.word	0x080170a9
 8017098:	080170a9 	.word	0x080170a9
 801709c:	080170a9 	.word	0x080170a9
 80170a0:	080170a9 	.word	0x080170a9
 80170a4:	080170a9 	.word	0x080170a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80170a8:	bf00      	nop
  }

  return (USBD_OK);
 80170aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80170ac:	4618      	mov	r0, r3
 80170ae:	370c      	adds	r7, #12
 80170b0:	46bd      	mov	sp, r7
 80170b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b6:	4770      	bx	lr

080170b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80170b8:	b580      	push	{r7, lr}
 80170ba:	b082      	sub	sp, #8
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80170c2:	6879      	ldr	r1, [r7, #4]
 80170c4:	4805      	ldr	r0, [pc, #20]	; (80170dc <CDC_Receive_FS+0x24>)
 80170c6:	f7f7 fa8a 	bl	800e5de <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80170ca:	4804      	ldr	r0, [pc, #16]	; (80170dc <CDC_Receive_FS+0x24>)
 80170cc:	f7f7 fad0 	bl	800e670 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80170d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3708      	adds	r7, #8
 80170d6:	46bd      	mov	sp, r7
 80170d8:	bd80      	pop	{r7, pc}
 80170da:	bf00      	nop
 80170dc:	200130a8 	.word	0x200130a8

080170e0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b084      	sub	sp, #16
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
 80170e8:	460b      	mov	r3, r1
 80170ea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80170ec:	2300      	movs	r3, #0
 80170ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80170f0:	4b0d      	ldr	r3, [pc, #52]	; (8017128 <CDC_Transmit_FS+0x48>)
 80170f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80170f6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d001      	beq.n	8017106 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017102:	2301      	movs	r3, #1
 8017104:	e00b      	b.n	801711e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017106:	887b      	ldrh	r3, [r7, #2]
 8017108:	461a      	mov	r2, r3
 801710a:	6879      	ldr	r1, [r7, #4]
 801710c:	4806      	ldr	r0, [pc, #24]	; (8017128 <CDC_Transmit_FS+0x48>)
 801710e:	f7f7 fa48 	bl	800e5a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017112:	4805      	ldr	r0, [pc, #20]	; (8017128 <CDC_Transmit_FS+0x48>)
 8017114:	f7f7 fa7c 	bl	800e610 <USBD_CDC_TransmitPacket>
 8017118:	4603      	mov	r3, r0
 801711a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801711c:	7bfb      	ldrb	r3, [r7, #15]
}
 801711e:	4618      	mov	r0, r3
 8017120:	3710      	adds	r7, #16
 8017122:	46bd      	mov	sp, r7
 8017124:	bd80      	pop	{r7, pc}
 8017126:	bf00      	nop
 8017128:	200130a8 	.word	0x200130a8

0801712c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801712c:	b480      	push	{r7}
 801712e:	b087      	sub	sp, #28
 8017130:	af00      	add	r7, sp, #0
 8017132:	60f8      	str	r0, [r7, #12]
 8017134:	60b9      	str	r1, [r7, #8]
 8017136:	4613      	mov	r3, r2
 8017138:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801713a:	2300      	movs	r3, #0
 801713c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801713e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017142:	4618      	mov	r0, r3
 8017144:	371c      	adds	r7, #28
 8017146:	46bd      	mov	sp, r7
 8017148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801714c:	4770      	bx	lr
	...

08017150 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017150:	b480      	push	{r7}
 8017152:	b083      	sub	sp, #12
 8017154:	af00      	add	r7, sp, #0
 8017156:	4603      	mov	r3, r0
 8017158:	6039      	str	r1, [r7, #0]
 801715a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801715c:	683b      	ldr	r3, [r7, #0]
 801715e:	2212      	movs	r2, #18
 8017160:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017162:	4b03      	ldr	r3, [pc, #12]	; (8017170 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017164:	4618      	mov	r0, r3
 8017166:	370c      	adds	r7, #12
 8017168:	46bd      	mov	sp, r7
 801716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801716e:	4770      	bx	lr
 8017170:	20000194 	.word	0x20000194

08017174 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017174:	b480      	push	{r7}
 8017176:	b083      	sub	sp, #12
 8017178:	af00      	add	r7, sp, #0
 801717a:	4603      	mov	r3, r0
 801717c:	6039      	str	r1, [r7, #0]
 801717e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	2204      	movs	r2, #4
 8017184:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017186:	4b03      	ldr	r3, [pc, #12]	; (8017194 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017188:	4618      	mov	r0, r3
 801718a:	370c      	adds	r7, #12
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr
 8017194:	200001a8 	.word	0x200001a8

08017198 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	4603      	mov	r3, r0
 80171a0:	6039      	str	r1, [r7, #0]
 80171a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80171a4:	79fb      	ldrb	r3, [r7, #7]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d105      	bne.n	80171b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171aa:	683a      	ldr	r2, [r7, #0]
 80171ac:	4907      	ldr	r1, [pc, #28]	; (80171cc <USBD_FS_ProductStrDescriptor+0x34>)
 80171ae:	4808      	ldr	r0, [pc, #32]	; (80171d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80171b0:	f7f8 fb11 	bl	800f7d6 <USBD_GetString>
 80171b4:	e004      	b.n	80171c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80171b6:	683a      	ldr	r2, [r7, #0]
 80171b8:	4904      	ldr	r1, [pc, #16]	; (80171cc <USBD_FS_ProductStrDescriptor+0x34>)
 80171ba:	4805      	ldr	r0, [pc, #20]	; (80171d0 <USBD_FS_ProductStrDescriptor+0x38>)
 80171bc:	f7f8 fb0b 	bl	800f7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80171c0:	4b02      	ldr	r3, [pc, #8]	; (80171cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3708      	adds	r7, #8
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	bf00      	nop
 80171cc:	20014378 	.word	0x20014378
 80171d0:	0801b080 	.word	0x0801b080

080171d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171d4:	b580      	push	{r7, lr}
 80171d6:	b082      	sub	sp, #8
 80171d8:	af00      	add	r7, sp, #0
 80171da:	4603      	mov	r3, r0
 80171dc:	6039      	str	r1, [r7, #0]
 80171de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80171e0:	683a      	ldr	r2, [r7, #0]
 80171e2:	4904      	ldr	r1, [pc, #16]	; (80171f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80171e4:	4804      	ldr	r0, [pc, #16]	; (80171f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80171e6:	f7f8 faf6 	bl	800f7d6 <USBD_GetString>
  return USBD_StrDesc;
 80171ea:	4b02      	ldr	r3, [pc, #8]	; (80171f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	3708      	adds	r7, #8
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}
 80171f4:	20014378 	.word	0x20014378
 80171f8:	0801b098 	.word	0x0801b098

080171fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80171fc:	b580      	push	{r7, lr}
 80171fe:	b082      	sub	sp, #8
 8017200:	af00      	add	r7, sp, #0
 8017202:	4603      	mov	r3, r0
 8017204:	6039      	str	r1, [r7, #0]
 8017206:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017208:	683b      	ldr	r3, [r7, #0]
 801720a:	221a      	movs	r2, #26
 801720c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801720e:	f000 f843 	bl	8017298 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017212:	4b02      	ldr	r3, [pc, #8]	; (801721c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017214:	4618      	mov	r0, r3
 8017216:	3708      	adds	r7, #8
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}
 801721c:	200001ac 	.word	0x200001ac

08017220 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b082      	sub	sp, #8
 8017224:	af00      	add	r7, sp, #0
 8017226:	4603      	mov	r3, r0
 8017228:	6039      	str	r1, [r7, #0]
 801722a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801722c:	79fb      	ldrb	r3, [r7, #7]
 801722e:	2b00      	cmp	r3, #0
 8017230:	d105      	bne.n	801723e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017232:	683a      	ldr	r2, [r7, #0]
 8017234:	4907      	ldr	r1, [pc, #28]	; (8017254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017236:	4808      	ldr	r0, [pc, #32]	; (8017258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017238:	f7f8 facd 	bl	800f7d6 <USBD_GetString>
 801723c:	e004      	b.n	8017248 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801723e:	683a      	ldr	r2, [r7, #0]
 8017240:	4904      	ldr	r1, [pc, #16]	; (8017254 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017242:	4805      	ldr	r0, [pc, #20]	; (8017258 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017244:	f7f8 fac7 	bl	800f7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017248:	4b02      	ldr	r3, [pc, #8]	; (8017254 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801724a:	4618      	mov	r0, r3
 801724c:	3708      	adds	r7, #8
 801724e:	46bd      	mov	sp, r7
 8017250:	bd80      	pop	{r7, pc}
 8017252:	bf00      	nop
 8017254:	20014378 	.word	0x20014378
 8017258:	0801b0ac 	.word	0x0801b0ac

0801725c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801725c:	b580      	push	{r7, lr}
 801725e:	b082      	sub	sp, #8
 8017260:	af00      	add	r7, sp, #0
 8017262:	4603      	mov	r3, r0
 8017264:	6039      	str	r1, [r7, #0]
 8017266:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017268:	79fb      	ldrb	r3, [r7, #7]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d105      	bne.n	801727a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801726e:	683a      	ldr	r2, [r7, #0]
 8017270:	4907      	ldr	r1, [pc, #28]	; (8017290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017272:	4808      	ldr	r0, [pc, #32]	; (8017294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017274:	f7f8 faaf 	bl	800f7d6 <USBD_GetString>
 8017278:	e004      	b.n	8017284 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801727a:	683a      	ldr	r2, [r7, #0]
 801727c:	4904      	ldr	r1, [pc, #16]	; (8017290 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801727e:	4805      	ldr	r0, [pc, #20]	; (8017294 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017280:	f7f8 faa9 	bl	800f7d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017284:	4b02      	ldr	r3, [pc, #8]	; (8017290 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017286:	4618      	mov	r0, r3
 8017288:	3708      	adds	r7, #8
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}
 801728e:	bf00      	nop
 8017290:	20014378 	.word	0x20014378
 8017294:	0801b0b8 	.word	0x0801b0b8

08017298 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b084      	sub	sp, #16
 801729c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801729e:	4b0f      	ldr	r3, [pc, #60]	; (80172dc <Get_SerialNum+0x44>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80172a4:	4b0e      	ldr	r3, [pc, #56]	; (80172e0 <Get_SerialNum+0x48>)
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80172aa:	4b0e      	ldr	r3, [pc, #56]	; (80172e4 <Get_SerialNum+0x4c>)
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80172b0:	68fa      	ldr	r2, [r7, #12]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	4413      	add	r3, r2
 80172b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d009      	beq.n	80172d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80172be:	2208      	movs	r2, #8
 80172c0:	4909      	ldr	r1, [pc, #36]	; (80172e8 <Get_SerialNum+0x50>)
 80172c2:	68f8      	ldr	r0, [r7, #12]
 80172c4:	f000 f814 	bl	80172f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80172c8:	2204      	movs	r2, #4
 80172ca:	4908      	ldr	r1, [pc, #32]	; (80172ec <Get_SerialNum+0x54>)
 80172cc:	68b8      	ldr	r0, [r7, #8]
 80172ce:	f000 f80f 	bl	80172f0 <IntToUnicode>
  }
}
 80172d2:	bf00      	nop
 80172d4:	3710      	adds	r7, #16
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	1fff7a10 	.word	0x1fff7a10
 80172e0:	1fff7a14 	.word	0x1fff7a14
 80172e4:	1fff7a18 	.word	0x1fff7a18
 80172e8:	200001ae 	.word	0x200001ae
 80172ec:	200001be 	.word	0x200001be

080172f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80172f0:	b480      	push	{r7}
 80172f2:	b087      	sub	sp, #28
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	60f8      	str	r0, [r7, #12]
 80172f8:	60b9      	str	r1, [r7, #8]
 80172fa:	4613      	mov	r3, r2
 80172fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80172fe:	2300      	movs	r3, #0
 8017300:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017302:	2300      	movs	r3, #0
 8017304:	75fb      	strb	r3, [r7, #23]
 8017306:	e027      	b.n	8017358 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	0f1b      	lsrs	r3, r3, #28
 801730c:	2b09      	cmp	r3, #9
 801730e:	d80b      	bhi.n	8017328 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	0f1b      	lsrs	r3, r3, #28
 8017314:	b2da      	uxtb	r2, r3
 8017316:	7dfb      	ldrb	r3, [r7, #23]
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4619      	mov	r1, r3
 801731c:	68bb      	ldr	r3, [r7, #8]
 801731e:	440b      	add	r3, r1
 8017320:	3230      	adds	r2, #48	; 0x30
 8017322:	b2d2      	uxtb	r2, r2
 8017324:	701a      	strb	r2, [r3, #0]
 8017326:	e00a      	b.n	801733e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	0f1b      	lsrs	r3, r3, #28
 801732c:	b2da      	uxtb	r2, r3
 801732e:	7dfb      	ldrb	r3, [r7, #23]
 8017330:	005b      	lsls	r3, r3, #1
 8017332:	4619      	mov	r1, r3
 8017334:	68bb      	ldr	r3, [r7, #8]
 8017336:	440b      	add	r3, r1
 8017338:	3237      	adds	r2, #55	; 0x37
 801733a:	b2d2      	uxtb	r2, r2
 801733c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801733e:	68fb      	ldr	r3, [r7, #12]
 8017340:	011b      	lsls	r3, r3, #4
 8017342:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017344:	7dfb      	ldrb	r3, [r7, #23]
 8017346:	005b      	lsls	r3, r3, #1
 8017348:	3301      	adds	r3, #1
 801734a:	68ba      	ldr	r2, [r7, #8]
 801734c:	4413      	add	r3, r2
 801734e:	2200      	movs	r2, #0
 8017350:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017352:	7dfb      	ldrb	r3, [r7, #23]
 8017354:	3301      	adds	r3, #1
 8017356:	75fb      	strb	r3, [r7, #23]
 8017358:	7dfa      	ldrb	r2, [r7, #23]
 801735a:	79fb      	ldrb	r3, [r7, #7]
 801735c:	429a      	cmp	r2, r3
 801735e:	d3d3      	bcc.n	8017308 <IntToUnicode+0x18>
  }
}
 8017360:	bf00      	nop
 8017362:	bf00      	nop
 8017364:	371c      	adds	r7, #28
 8017366:	46bd      	mov	sp, r7
 8017368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736c:	4770      	bx	lr
	...

08017370 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b08a      	sub	sp, #40	; 0x28
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017378:	f107 0314 	add.w	r3, r7, #20
 801737c:	2200      	movs	r2, #0
 801737e:	601a      	str	r2, [r3, #0]
 8017380:	605a      	str	r2, [r3, #4]
 8017382:	609a      	str	r2, [r3, #8]
 8017384:	60da      	str	r2, [r3, #12]
 8017386:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017390:	d147      	bne.n	8017422 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017392:	2300      	movs	r3, #0
 8017394:	613b      	str	r3, [r7, #16]
 8017396:	4b25      	ldr	r3, [pc, #148]	; (801742c <HAL_PCD_MspInit+0xbc>)
 8017398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801739a:	4a24      	ldr	r2, [pc, #144]	; (801742c <HAL_PCD_MspInit+0xbc>)
 801739c:	f043 0301 	orr.w	r3, r3, #1
 80173a0:	6313      	str	r3, [r2, #48]	; 0x30
 80173a2:	4b22      	ldr	r3, [pc, #136]	; (801742c <HAL_PCD_MspInit+0xbc>)
 80173a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173a6:	f003 0301 	and.w	r3, r3, #1
 80173aa:	613b      	str	r3, [r7, #16]
 80173ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80173ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80173b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80173b4:	2300      	movs	r3, #0
 80173b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173b8:	2300      	movs	r3, #0
 80173ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80173bc:	f107 0314 	add.w	r3, r7, #20
 80173c0:	4619      	mov	r1, r3
 80173c2:	481b      	ldr	r0, [pc, #108]	; (8017430 <HAL_PCD_MspInit+0xc0>)
 80173c4:	f7ef fdda 	bl	8006f7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80173c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80173cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80173ce:	2302      	movs	r3, #2
 80173d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80173d2:	2300      	movs	r3, #0
 80173d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80173d6:	2300      	movs	r3, #0
 80173d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80173da:	230a      	movs	r3, #10
 80173dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80173de:	f107 0314 	add.w	r3, r7, #20
 80173e2:	4619      	mov	r1, r3
 80173e4:	4812      	ldr	r0, [pc, #72]	; (8017430 <HAL_PCD_MspInit+0xc0>)
 80173e6:	f7ef fdc9 	bl	8006f7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80173ea:	4b10      	ldr	r3, [pc, #64]	; (801742c <HAL_PCD_MspInit+0xbc>)
 80173ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173ee:	4a0f      	ldr	r2, [pc, #60]	; (801742c <HAL_PCD_MspInit+0xbc>)
 80173f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80173f4:	6353      	str	r3, [r2, #52]	; 0x34
 80173f6:	2300      	movs	r3, #0
 80173f8:	60fb      	str	r3, [r7, #12]
 80173fa:	4b0c      	ldr	r3, [pc, #48]	; (801742c <HAL_PCD_MspInit+0xbc>)
 80173fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80173fe:	4a0b      	ldr	r2, [pc, #44]	; (801742c <HAL_PCD_MspInit+0xbc>)
 8017400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017404:	6453      	str	r3, [r2, #68]	; 0x44
 8017406:	4b09      	ldr	r3, [pc, #36]	; (801742c <HAL_PCD_MspInit+0xbc>)
 8017408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801740a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801740e:	60fb      	str	r3, [r7, #12]
 8017410:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017412:	2200      	movs	r2, #0
 8017414:	2105      	movs	r1, #5
 8017416:	2043      	movs	r0, #67	; 0x43
 8017418:	f7ef f918 	bl	800664c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801741c:	2043      	movs	r0, #67	; 0x43
 801741e:	f7ef f931 	bl	8006684 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017422:	bf00      	nop
 8017424:	3728      	adds	r7, #40	; 0x28
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	40023800 	.word	0x40023800
 8017430:	40020000 	.word	0x40020000

08017434 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017448:	4619      	mov	r1, r3
 801744a:	4610      	mov	r0, r2
 801744c:	f7f7 f9dc 	bl	800e808 <USBD_LL_SetupStage>
}
 8017450:	bf00      	nop
 8017452:	3708      	adds	r7, #8
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}

08017458 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017458:	b580      	push	{r7, lr}
 801745a:	b082      	sub	sp, #8
 801745c:	af00      	add	r7, sp, #0
 801745e:	6078      	str	r0, [r7, #4]
 8017460:	460b      	mov	r3, r1
 8017462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801746a:	78fa      	ldrb	r2, [r7, #3]
 801746c:	6879      	ldr	r1, [r7, #4]
 801746e:	4613      	mov	r3, r2
 8017470:	00db      	lsls	r3, r3, #3
 8017472:	1a9b      	subs	r3, r3, r2
 8017474:	009b      	lsls	r3, r3, #2
 8017476:	440b      	add	r3, r1
 8017478:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	78fb      	ldrb	r3, [r7, #3]
 8017480:	4619      	mov	r1, r3
 8017482:	f7f7 fa16 	bl	800e8b2 <USBD_LL_DataOutStage>
}
 8017486:	bf00      	nop
 8017488:	3708      	adds	r7, #8
 801748a:	46bd      	mov	sp, r7
 801748c:	bd80      	pop	{r7, pc}

0801748e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801748e:	b580      	push	{r7, lr}
 8017490:	b082      	sub	sp, #8
 8017492:	af00      	add	r7, sp, #0
 8017494:	6078      	str	r0, [r7, #4]
 8017496:	460b      	mov	r3, r1
 8017498:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80174a0:	78fa      	ldrb	r2, [r7, #3]
 80174a2:	6879      	ldr	r1, [r7, #4]
 80174a4:	4613      	mov	r3, r2
 80174a6:	00db      	lsls	r3, r3, #3
 80174a8:	1a9b      	subs	r3, r3, r2
 80174aa:	009b      	lsls	r3, r3, #2
 80174ac:	440b      	add	r3, r1
 80174ae:	3348      	adds	r3, #72	; 0x48
 80174b0:	681a      	ldr	r2, [r3, #0]
 80174b2:	78fb      	ldrb	r3, [r7, #3]
 80174b4:	4619      	mov	r1, r3
 80174b6:	f7f7 fa5f 	bl	800e978 <USBD_LL_DataInStage>
}
 80174ba:	bf00      	nop
 80174bc:	3708      	adds	r7, #8
 80174be:	46bd      	mov	sp, r7
 80174c0:	bd80      	pop	{r7, pc}

080174c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174c2:	b580      	push	{r7, lr}
 80174c4:	b082      	sub	sp, #8
 80174c6:	af00      	add	r7, sp, #0
 80174c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7f7 fb73 	bl	800ebbc <USBD_LL_SOF>
}
 80174d6:	bf00      	nop
 80174d8:	3708      	adds	r7, #8
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}

080174de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80174de:	b580      	push	{r7, lr}
 80174e0:	b084      	sub	sp, #16
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80174e6:	2301      	movs	r3, #1
 80174e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	68db      	ldr	r3, [r3, #12]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d102      	bne.n	80174f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80174f2:	2300      	movs	r3, #0
 80174f4:	73fb      	strb	r3, [r7, #15]
 80174f6:	e008      	b.n	801750a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	68db      	ldr	r3, [r3, #12]
 80174fc:	2b02      	cmp	r3, #2
 80174fe:	d102      	bne.n	8017506 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017500:	2301      	movs	r3, #1
 8017502:	73fb      	strb	r3, [r7, #15]
 8017504:	e001      	b.n	801750a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017506:	f7ed f8cf 	bl	80046a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017510:	7bfa      	ldrb	r2, [r7, #15]
 8017512:	4611      	mov	r1, r2
 8017514:	4618      	mov	r0, r3
 8017516:	f7f7 fb13 	bl	800eb40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801751a:	687b      	ldr	r3, [r7, #4]
 801751c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017520:	4618      	mov	r0, r3
 8017522:	f7f7 fabf 	bl	800eaa4 <USBD_LL_Reset>
}
 8017526:	bf00      	nop
 8017528:	3710      	adds	r7, #16
 801752a:	46bd      	mov	sp, r7
 801752c:	bd80      	pop	{r7, pc}
	...

08017530 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b082      	sub	sp, #8
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801753e:	4618      	mov	r0, r3
 8017540:	f7f7 fb0e 	bl	800eb60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681b      	ldr	r3, [r3, #0]
 8017548:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	687a      	ldr	r2, [r7, #4]
 8017550:	6812      	ldr	r2, [r2, #0]
 8017552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017556:	f043 0301 	orr.w	r3, r3, #1
 801755a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	6a1b      	ldr	r3, [r3, #32]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d005      	beq.n	8017570 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017564:	4b04      	ldr	r3, [pc, #16]	; (8017578 <HAL_PCD_SuspendCallback+0x48>)
 8017566:	691b      	ldr	r3, [r3, #16]
 8017568:	4a03      	ldr	r2, [pc, #12]	; (8017578 <HAL_PCD_SuspendCallback+0x48>)
 801756a:	f043 0306 	orr.w	r3, r3, #6
 801756e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017570:	bf00      	nop
 8017572:	3708      	adds	r7, #8
 8017574:	46bd      	mov	sp, r7
 8017576:	bd80      	pop	{r7, pc}
 8017578:	e000ed00 	.word	0xe000ed00

0801757c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801758a:	4618      	mov	r0, r3
 801758c:	f7f7 fafe 	bl	800eb8c <USBD_LL_Resume>
}
 8017590:	bf00      	nop
 8017592:	3708      	adds	r7, #8
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	460b      	mov	r3, r1
 80175a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175aa:	78fa      	ldrb	r2, [r7, #3]
 80175ac:	4611      	mov	r1, r2
 80175ae:	4618      	mov	r0, r3
 80175b0:	f7f7 fb4c 	bl	800ec4c <USBD_LL_IsoOUTIncomplete>
}
 80175b4:	bf00      	nop
 80175b6:	3708      	adds	r7, #8
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b082      	sub	sp, #8
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
 80175c4:	460b      	mov	r3, r1
 80175c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175ce:	78fa      	ldrb	r2, [r7, #3]
 80175d0:	4611      	mov	r1, r2
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7f7 fb14 	bl	800ec00 <USBD_LL_IsoINIncomplete>
}
 80175d8:	bf00      	nop
 80175da:	3708      	adds	r7, #8
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b082      	sub	sp, #8
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7f7 fb52 	bl	800ec98 <USBD_LL_DevConnected>
}
 80175f4:	bf00      	nop
 80175f6:	3708      	adds	r7, #8
 80175f8:	46bd      	mov	sp, r7
 80175fa:	bd80      	pop	{r7, pc}

080175fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b082      	sub	sp, #8
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801760a:	4618      	mov	r0, r3
 801760c:	f7f7 fb4f 	bl	800ecae <USBD_LL_DevDisconnected>
}
 8017610:	bf00      	nop
 8017612:	3708      	adds	r7, #8
 8017614:	46bd      	mov	sp, r7
 8017616:	bd80      	pop	{r7, pc}

08017618 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b082      	sub	sp, #8
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d13c      	bne.n	80176a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017628:	4a20      	ldr	r2, [pc, #128]	; (80176ac <USBD_LL_Init+0x94>)
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	4a1e      	ldr	r2, [pc, #120]	; (80176ac <USBD_LL_Init+0x94>)
 8017634:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017638:	4b1c      	ldr	r3, [pc, #112]	; (80176ac <USBD_LL_Init+0x94>)
 801763a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801763e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017640:	4b1a      	ldr	r3, [pc, #104]	; (80176ac <USBD_LL_Init+0x94>)
 8017642:	2204      	movs	r2, #4
 8017644:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017646:	4b19      	ldr	r3, [pc, #100]	; (80176ac <USBD_LL_Init+0x94>)
 8017648:	2202      	movs	r2, #2
 801764a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801764c:	4b17      	ldr	r3, [pc, #92]	; (80176ac <USBD_LL_Init+0x94>)
 801764e:	2200      	movs	r2, #0
 8017650:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017652:	4b16      	ldr	r3, [pc, #88]	; (80176ac <USBD_LL_Init+0x94>)
 8017654:	2202      	movs	r2, #2
 8017656:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017658:	4b14      	ldr	r3, [pc, #80]	; (80176ac <USBD_LL_Init+0x94>)
 801765a:	2200      	movs	r2, #0
 801765c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801765e:	4b13      	ldr	r3, [pc, #76]	; (80176ac <USBD_LL_Init+0x94>)
 8017660:	2200      	movs	r2, #0
 8017662:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017664:	4b11      	ldr	r3, [pc, #68]	; (80176ac <USBD_LL_Init+0x94>)
 8017666:	2200      	movs	r2, #0
 8017668:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801766a:	4b10      	ldr	r3, [pc, #64]	; (80176ac <USBD_LL_Init+0x94>)
 801766c:	2200      	movs	r2, #0
 801766e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017670:	4b0e      	ldr	r3, [pc, #56]	; (80176ac <USBD_LL_Init+0x94>)
 8017672:	2200      	movs	r2, #0
 8017674:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017676:	480d      	ldr	r0, [pc, #52]	; (80176ac <USBD_LL_Init+0x94>)
 8017678:	f7f1 f9ed 	bl	8008a56 <HAL_PCD_Init>
 801767c:	4603      	mov	r3, r0
 801767e:	2b00      	cmp	r3, #0
 8017680:	d001      	beq.n	8017686 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017682:	f7ed f811 	bl	80046a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017686:	2180      	movs	r1, #128	; 0x80
 8017688:	4808      	ldr	r0, [pc, #32]	; (80176ac <USBD_LL_Init+0x94>)
 801768a:	f7f2 fb4a 	bl	8009d22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801768e:	2240      	movs	r2, #64	; 0x40
 8017690:	2100      	movs	r1, #0
 8017692:	4806      	ldr	r0, [pc, #24]	; (80176ac <USBD_LL_Init+0x94>)
 8017694:	f7f2 fafe 	bl	8009c94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017698:	2280      	movs	r2, #128	; 0x80
 801769a:	2101      	movs	r1, #1
 801769c:	4803      	ldr	r0, [pc, #12]	; (80176ac <USBD_LL_Init+0x94>)
 801769e:	f7f2 faf9 	bl	8009c94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80176a2:	2300      	movs	r3, #0
}
 80176a4:	4618      	mov	r0, r3
 80176a6:	3708      	adds	r7, #8
 80176a8:	46bd      	mov	sp, r7
 80176aa:	bd80      	pop	{r7, pc}
 80176ac:	20014578 	.word	0x20014578

080176b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80176b0:	b580      	push	{r7, lr}
 80176b2:	b084      	sub	sp, #16
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176b8:	2300      	movs	r3, #0
 80176ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176bc:	2300      	movs	r3, #0
 80176be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80176c6:	4618      	mov	r0, r3
 80176c8:	f7f1 fae2 	bl	8008c90 <HAL_PCD_Start>
 80176cc:	4603      	mov	r3, r0
 80176ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80176d0:	7bfb      	ldrb	r3, [r7, #15]
 80176d2:	4618      	mov	r0, r3
 80176d4:	f000 f942 	bl	801795c <USBD_Get_USB_Status>
 80176d8:	4603      	mov	r3, r0
 80176da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80176dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80176de:	4618      	mov	r0, r3
 80176e0:	3710      	adds	r7, #16
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bd80      	pop	{r7, pc}

080176e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80176e6:	b580      	push	{r7, lr}
 80176e8:	b084      	sub	sp, #16
 80176ea:	af00      	add	r7, sp, #0
 80176ec:	6078      	str	r0, [r7, #4]
 80176ee:	4608      	mov	r0, r1
 80176f0:	4611      	mov	r1, r2
 80176f2:	461a      	mov	r2, r3
 80176f4:	4603      	mov	r3, r0
 80176f6:	70fb      	strb	r3, [r7, #3]
 80176f8:	460b      	mov	r3, r1
 80176fa:	70bb      	strb	r3, [r7, #2]
 80176fc:	4613      	mov	r3, r2
 80176fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017700:	2300      	movs	r3, #0
 8017702:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017704:	2300      	movs	r3, #0
 8017706:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801770e:	78bb      	ldrb	r3, [r7, #2]
 8017710:	883a      	ldrh	r2, [r7, #0]
 8017712:	78f9      	ldrb	r1, [r7, #3]
 8017714:	f7f1 fec6 	bl	80094a4 <HAL_PCD_EP_Open>
 8017718:	4603      	mov	r3, r0
 801771a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801771c:	7bfb      	ldrb	r3, [r7, #15]
 801771e:	4618      	mov	r0, r3
 8017720:	f000 f91c 	bl	801795c <USBD_Get_USB_Status>
 8017724:	4603      	mov	r3, r0
 8017726:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017728:	7bbb      	ldrb	r3, [r7, #14]
}
 801772a:	4618      	mov	r0, r3
 801772c:	3710      	adds	r7, #16
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}

08017732 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017732:	b580      	push	{r7, lr}
 8017734:	b084      	sub	sp, #16
 8017736:	af00      	add	r7, sp, #0
 8017738:	6078      	str	r0, [r7, #4]
 801773a:	460b      	mov	r3, r1
 801773c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801773e:	2300      	movs	r3, #0
 8017740:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017742:	2300      	movs	r3, #0
 8017744:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801774c:	78fa      	ldrb	r2, [r7, #3]
 801774e:	4611      	mov	r1, r2
 8017750:	4618      	mov	r0, r3
 8017752:	f7f1 ff0f 	bl	8009574 <HAL_PCD_EP_Close>
 8017756:	4603      	mov	r3, r0
 8017758:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801775a:	7bfb      	ldrb	r3, [r7, #15]
 801775c:	4618      	mov	r0, r3
 801775e:	f000 f8fd 	bl	801795c <USBD_Get_USB_Status>
 8017762:	4603      	mov	r3, r0
 8017764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017766:	7bbb      	ldrb	r3, [r7, #14]
}
 8017768:	4618      	mov	r0, r3
 801776a:	3710      	adds	r7, #16
 801776c:	46bd      	mov	sp, r7
 801776e:	bd80      	pop	{r7, pc}

08017770 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b084      	sub	sp, #16
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	460b      	mov	r3, r1
 801777a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801777c:	2300      	movs	r3, #0
 801777e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017780:	2300      	movs	r3, #0
 8017782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801778a:	78fa      	ldrb	r2, [r7, #3]
 801778c:	4611      	mov	r1, r2
 801778e:	4618      	mov	r0, r3
 8017790:	f7f1 ffe7 	bl	8009762 <HAL_PCD_EP_SetStall>
 8017794:	4603      	mov	r3, r0
 8017796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017798:	7bfb      	ldrb	r3, [r7, #15]
 801779a:	4618      	mov	r0, r3
 801779c:	f000 f8de 	bl	801795c <USBD_Get_USB_Status>
 80177a0:	4603      	mov	r3, r0
 80177a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3710      	adds	r7, #16
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}

080177ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177ae:	b580      	push	{r7, lr}
 80177b0:	b084      	sub	sp, #16
 80177b2:	af00      	add	r7, sp, #0
 80177b4:	6078      	str	r0, [r7, #4]
 80177b6:	460b      	mov	r3, r1
 80177b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177ba:	2300      	movs	r3, #0
 80177bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177be:	2300      	movs	r3, #0
 80177c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80177c8:	78fa      	ldrb	r2, [r7, #3]
 80177ca:	4611      	mov	r1, r2
 80177cc:	4618      	mov	r0, r3
 80177ce:	f7f2 f82c 	bl	800982a <HAL_PCD_EP_ClrStall>
 80177d2:	4603      	mov	r3, r0
 80177d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80177d6:	7bfb      	ldrb	r3, [r7, #15]
 80177d8:	4618      	mov	r0, r3
 80177da:	f000 f8bf 	bl	801795c <USBD_Get_USB_Status>
 80177de:	4603      	mov	r3, r0
 80177e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80177e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80177e4:	4618      	mov	r0, r3
 80177e6:	3710      	adds	r7, #16
 80177e8:	46bd      	mov	sp, r7
 80177ea:	bd80      	pop	{r7, pc}

080177ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80177ec:	b480      	push	{r7}
 80177ee:	b085      	sub	sp, #20
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
 80177f4:	460b      	mov	r3, r1
 80177f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80177fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017804:	2b00      	cmp	r3, #0
 8017806:	da0b      	bge.n	8017820 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017808:	78fb      	ldrb	r3, [r7, #3]
 801780a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801780e:	68f9      	ldr	r1, [r7, #12]
 8017810:	4613      	mov	r3, r2
 8017812:	00db      	lsls	r3, r3, #3
 8017814:	1a9b      	subs	r3, r3, r2
 8017816:	009b      	lsls	r3, r3, #2
 8017818:	440b      	add	r3, r1
 801781a:	333e      	adds	r3, #62	; 0x3e
 801781c:	781b      	ldrb	r3, [r3, #0]
 801781e:	e00b      	b.n	8017838 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017820:	78fb      	ldrb	r3, [r7, #3]
 8017822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017826:	68f9      	ldr	r1, [r7, #12]
 8017828:	4613      	mov	r3, r2
 801782a:	00db      	lsls	r3, r3, #3
 801782c:	1a9b      	subs	r3, r3, r2
 801782e:	009b      	lsls	r3, r3, #2
 8017830:	440b      	add	r3, r1
 8017832:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017836:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017838:	4618      	mov	r0, r3
 801783a:	3714      	adds	r7, #20
 801783c:	46bd      	mov	sp, r7
 801783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017842:	4770      	bx	lr

08017844 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	460b      	mov	r3, r1
 801784e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017850:	2300      	movs	r3, #0
 8017852:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017854:	2300      	movs	r3, #0
 8017856:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801785e:	78fa      	ldrb	r2, [r7, #3]
 8017860:	4611      	mov	r1, r2
 8017862:	4618      	mov	r0, r3
 8017864:	f7f1 fdf9 	bl	800945a <HAL_PCD_SetAddress>
 8017868:	4603      	mov	r3, r0
 801786a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801786c:	7bfb      	ldrb	r3, [r7, #15]
 801786e:	4618      	mov	r0, r3
 8017870:	f000 f874 	bl	801795c <USBD_Get_USB_Status>
 8017874:	4603      	mov	r3, r0
 8017876:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017878:	7bbb      	ldrb	r3, [r7, #14]
}
 801787a:	4618      	mov	r0, r3
 801787c:	3710      	adds	r7, #16
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017882:	b580      	push	{r7, lr}
 8017884:	b086      	sub	sp, #24
 8017886:	af00      	add	r7, sp, #0
 8017888:	60f8      	str	r0, [r7, #12]
 801788a:	607a      	str	r2, [r7, #4]
 801788c:	603b      	str	r3, [r7, #0]
 801788e:	460b      	mov	r3, r1
 8017890:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017892:	2300      	movs	r3, #0
 8017894:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017896:	2300      	movs	r3, #0
 8017898:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80178a0:	7af9      	ldrb	r1, [r7, #11]
 80178a2:	683b      	ldr	r3, [r7, #0]
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	f7f1 ff12 	bl	80096ce <HAL_PCD_EP_Transmit>
 80178aa:	4603      	mov	r3, r0
 80178ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178ae:	7dfb      	ldrb	r3, [r7, #23]
 80178b0:	4618      	mov	r0, r3
 80178b2:	f000 f853 	bl	801795c <USBD_Get_USB_Status>
 80178b6:	4603      	mov	r3, r0
 80178b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80178ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80178bc:	4618      	mov	r0, r3
 80178be:	3718      	adds	r7, #24
 80178c0:	46bd      	mov	sp, r7
 80178c2:	bd80      	pop	{r7, pc}

080178c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80178c4:	b580      	push	{r7, lr}
 80178c6:	b086      	sub	sp, #24
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	60f8      	str	r0, [r7, #12]
 80178cc:	607a      	str	r2, [r7, #4]
 80178ce:	603b      	str	r3, [r7, #0]
 80178d0:	460b      	mov	r3, r1
 80178d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178d4:	2300      	movs	r3, #0
 80178d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178d8:	2300      	movs	r3, #0
 80178da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80178dc:	68fb      	ldr	r3, [r7, #12]
 80178de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80178e2:	7af9      	ldrb	r1, [r7, #11]
 80178e4:	683b      	ldr	r3, [r7, #0]
 80178e6:	687a      	ldr	r2, [r7, #4]
 80178e8:	f7f1 fe8e 	bl	8009608 <HAL_PCD_EP_Receive>
 80178ec:	4603      	mov	r3, r0
 80178ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178f0:	7dfb      	ldrb	r3, [r7, #23]
 80178f2:	4618      	mov	r0, r3
 80178f4:	f000 f832 	bl	801795c <USBD_Get_USB_Status>
 80178f8:	4603      	mov	r3, r0
 80178fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80178fc:	7dbb      	ldrb	r3, [r7, #22]
}
 80178fe:	4618      	mov	r0, r3
 8017900:	3718      	adds	r7, #24
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}

08017906 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017906:	b580      	push	{r7, lr}
 8017908:	b082      	sub	sp, #8
 801790a:	af00      	add	r7, sp, #0
 801790c:	6078      	str	r0, [r7, #4]
 801790e:	460b      	mov	r3, r1
 8017910:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017918:	78fa      	ldrb	r2, [r7, #3]
 801791a:	4611      	mov	r1, r2
 801791c:	4618      	mov	r0, r3
 801791e:	f7f1 febe 	bl	800969e <HAL_PCD_EP_GetRxCount>
 8017922:	4603      	mov	r3, r0
}
 8017924:	4618      	mov	r0, r3
 8017926:	3708      	adds	r7, #8
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801792c:	b480      	push	{r7}
 801792e:	b083      	sub	sp, #12
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017934:	4b03      	ldr	r3, [pc, #12]	; (8017944 <USBD_static_malloc+0x18>)
}
 8017936:	4618      	mov	r0, r3
 8017938:	370c      	adds	r7, #12
 801793a:	46bd      	mov	sp, r7
 801793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017940:	4770      	bx	lr
 8017942:	bf00      	nop
 8017944:	2000744c 	.word	0x2000744c

08017948 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017948:	b480      	push	{r7}
 801794a:	b083      	sub	sp, #12
 801794c:	af00      	add	r7, sp, #0
 801794e:	6078      	str	r0, [r7, #4]

}
 8017950:	bf00      	nop
 8017952:	370c      	adds	r7, #12
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr

0801795c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801795c:	b480      	push	{r7}
 801795e:	b085      	sub	sp, #20
 8017960:	af00      	add	r7, sp, #0
 8017962:	4603      	mov	r3, r0
 8017964:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017966:	2300      	movs	r3, #0
 8017968:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801796a:	79fb      	ldrb	r3, [r7, #7]
 801796c:	2b03      	cmp	r3, #3
 801796e:	d817      	bhi.n	80179a0 <USBD_Get_USB_Status+0x44>
 8017970:	a201      	add	r2, pc, #4	; (adr r2, 8017978 <USBD_Get_USB_Status+0x1c>)
 8017972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017976:	bf00      	nop
 8017978:	08017989 	.word	0x08017989
 801797c:	0801798f 	.word	0x0801798f
 8017980:	08017995 	.word	0x08017995
 8017984:	0801799b 	.word	0x0801799b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017988:	2300      	movs	r3, #0
 801798a:	73fb      	strb	r3, [r7, #15]
    break;
 801798c:	e00b      	b.n	80179a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801798e:	2303      	movs	r3, #3
 8017990:	73fb      	strb	r3, [r7, #15]
    break;
 8017992:	e008      	b.n	80179a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017994:	2301      	movs	r3, #1
 8017996:	73fb      	strb	r3, [r7, #15]
    break;
 8017998:	e005      	b.n	80179a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801799a:	2303      	movs	r3, #3
 801799c:	73fb      	strb	r3, [r7, #15]
    break;
 801799e:	e002      	b.n	80179a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80179a0:	2303      	movs	r3, #3
 80179a2:	73fb      	strb	r3, [r7, #15]
    break;
 80179a4:	bf00      	nop
  }
  return usb_status;
 80179a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80179a8:	4618      	mov	r0, r3
 80179aa:	3714      	adds	r7, #20
 80179ac:	46bd      	mov	sp, r7
 80179ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179b2:	4770      	bx	lr

080179b4 <__errno>:
 80179b4:	4b01      	ldr	r3, [pc, #4]	; (80179bc <__errno+0x8>)
 80179b6:	6818      	ldr	r0, [r3, #0]
 80179b8:	4770      	bx	lr
 80179ba:	bf00      	nop
 80179bc:	200001c8 	.word	0x200001c8

080179c0 <std>:
 80179c0:	2300      	movs	r3, #0
 80179c2:	b510      	push	{r4, lr}
 80179c4:	4604      	mov	r4, r0
 80179c6:	e9c0 3300 	strd	r3, r3, [r0]
 80179ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80179ce:	6083      	str	r3, [r0, #8]
 80179d0:	8181      	strh	r1, [r0, #12]
 80179d2:	6643      	str	r3, [r0, #100]	; 0x64
 80179d4:	81c2      	strh	r2, [r0, #14]
 80179d6:	6183      	str	r3, [r0, #24]
 80179d8:	4619      	mov	r1, r3
 80179da:	2208      	movs	r2, #8
 80179dc:	305c      	adds	r0, #92	; 0x5c
 80179de:	f000 f945 	bl	8017c6c <memset>
 80179e2:	4b05      	ldr	r3, [pc, #20]	; (80179f8 <std+0x38>)
 80179e4:	6263      	str	r3, [r4, #36]	; 0x24
 80179e6:	4b05      	ldr	r3, [pc, #20]	; (80179fc <std+0x3c>)
 80179e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80179ea:	4b05      	ldr	r3, [pc, #20]	; (8017a00 <std+0x40>)
 80179ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80179ee:	4b05      	ldr	r3, [pc, #20]	; (8017a04 <std+0x44>)
 80179f0:	6224      	str	r4, [r4, #32]
 80179f2:	6323      	str	r3, [r4, #48]	; 0x30
 80179f4:	bd10      	pop	{r4, pc}
 80179f6:	bf00      	nop
 80179f8:	080187d9 	.word	0x080187d9
 80179fc:	080187fb 	.word	0x080187fb
 8017a00:	08018833 	.word	0x08018833
 8017a04:	08018857 	.word	0x08018857

08017a08 <_cleanup_r>:
 8017a08:	4901      	ldr	r1, [pc, #4]	; (8017a10 <_cleanup_r+0x8>)
 8017a0a:	f000 b8af 	b.w	8017b6c <_fwalk_reent>
 8017a0e:	bf00      	nop
 8017a10:	08019755 	.word	0x08019755

08017a14 <__sfmoreglue>:
 8017a14:	b570      	push	{r4, r5, r6, lr}
 8017a16:	1e4a      	subs	r2, r1, #1
 8017a18:	2568      	movs	r5, #104	; 0x68
 8017a1a:	4355      	muls	r5, r2
 8017a1c:	460e      	mov	r6, r1
 8017a1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017a22:	f000 f97b 	bl	8017d1c <_malloc_r>
 8017a26:	4604      	mov	r4, r0
 8017a28:	b140      	cbz	r0, 8017a3c <__sfmoreglue+0x28>
 8017a2a:	2100      	movs	r1, #0
 8017a2c:	e9c0 1600 	strd	r1, r6, [r0]
 8017a30:	300c      	adds	r0, #12
 8017a32:	60a0      	str	r0, [r4, #8]
 8017a34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017a38:	f000 f918 	bl	8017c6c <memset>
 8017a3c:	4620      	mov	r0, r4
 8017a3e:	bd70      	pop	{r4, r5, r6, pc}

08017a40 <__sfp_lock_acquire>:
 8017a40:	4801      	ldr	r0, [pc, #4]	; (8017a48 <__sfp_lock_acquire+0x8>)
 8017a42:	f000 b8f2 	b.w	8017c2a <__retarget_lock_acquire_recursive>
 8017a46:	bf00      	nop
 8017a48:	20014988 	.word	0x20014988

08017a4c <__sfp_lock_release>:
 8017a4c:	4801      	ldr	r0, [pc, #4]	; (8017a54 <__sfp_lock_release+0x8>)
 8017a4e:	f000 b8ed 	b.w	8017c2c <__retarget_lock_release_recursive>
 8017a52:	bf00      	nop
 8017a54:	20014988 	.word	0x20014988

08017a58 <__sinit_lock_acquire>:
 8017a58:	4801      	ldr	r0, [pc, #4]	; (8017a60 <__sinit_lock_acquire+0x8>)
 8017a5a:	f000 b8e6 	b.w	8017c2a <__retarget_lock_acquire_recursive>
 8017a5e:	bf00      	nop
 8017a60:	20014983 	.word	0x20014983

08017a64 <__sinit_lock_release>:
 8017a64:	4801      	ldr	r0, [pc, #4]	; (8017a6c <__sinit_lock_release+0x8>)
 8017a66:	f000 b8e1 	b.w	8017c2c <__retarget_lock_release_recursive>
 8017a6a:	bf00      	nop
 8017a6c:	20014983 	.word	0x20014983

08017a70 <__sinit>:
 8017a70:	b510      	push	{r4, lr}
 8017a72:	4604      	mov	r4, r0
 8017a74:	f7ff fff0 	bl	8017a58 <__sinit_lock_acquire>
 8017a78:	69a3      	ldr	r3, [r4, #24]
 8017a7a:	b11b      	cbz	r3, 8017a84 <__sinit+0x14>
 8017a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017a80:	f7ff bff0 	b.w	8017a64 <__sinit_lock_release>
 8017a84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017a88:	6523      	str	r3, [r4, #80]	; 0x50
 8017a8a:	4b13      	ldr	r3, [pc, #76]	; (8017ad8 <__sinit+0x68>)
 8017a8c:	4a13      	ldr	r2, [pc, #76]	; (8017adc <__sinit+0x6c>)
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	62a2      	str	r2, [r4, #40]	; 0x28
 8017a92:	42a3      	cmp	r3, r4
 8017a94:	bf04      	itt	eq
 8017a96:	2301      	moveq	r3, #1
 8017a98:	61a3      	streq	r3, [r4, #24]
 8017a9a:	4620      	mov	r0, r4
 8017a9c:	f000 f820 	bl	8017ae0 <__sfp>
 8017aa0:	6060      	str	r0, [r4, #4]
 8017aa2:	4620      	mov	r0, r4
 8017aa4:	f000 f81c 	bl	8017ae0 <__sfp>
 8017aa8:	60a0      	str	r0, [r4, #8]
 8017aaa:	4620      	mov	r0, r4
 8017aac:	f000 f818 	bl	8017ae0 <__sfp>
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	60e0      	str	r0, [r4, #12]
 8017ab4:	2104      	movs	r1, #4
 8017ab6:	6860      	ldr	r0, [r4, #4]
 8017ab8:	f7ff ff82 	bl	80179c0 <std>
 8017abc:	68a0      	ldr	r0, [r4, #8]
 8017abe:	2201      	movs	r2, #1
 8017ac0:	2109      	movs	r1, #9
 8017ac2:	f7ff ff7d 	bl	80179c0 <std>
 8017ac6:	68e0      	ldr	r0, [r4, #12]
 8017ac8:	2202      	movs	r2, #2
 8017aca:	2112      	movs	r1, #18
 8017acc:	f7ff ff78 	bl	80179c0 <std>
 8017ad0:	2301      	movs	r3, #1
 8017ad2:	61a3      	str	r3, [r4, #24]
 8017ad4:	e7d2      	b.n	8017a7c <__sinit+0xc>
 8017ad6:	bf00      	nop
 8017ad8:	0801f3f0 	.word	0x0801f3f0
 8017adc:	08017a09 	.word	0x08017a09

08017ae0 <__sfp>:
 8017ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ae2:	4607      	mov	r7, r0
 8017ae4:	f7ff ffac 	bl	8017a40 <__sfp_lock_acquire>
 8017ae8:	4b1e      	ldr	r3, [pc, #120]	; (8017b64 <__sfp+0x84>)
 8017aea:	681e      	ldr	r6, [r3, #0]
 8017aec:	69b3      	ldr	r3, [r6, #24]
 8017aee:	b913      	cbnz	r3, 8017af6 <__sfp+0x16>
 8017af0:	4630      	mov	r0, r6
 8017af2:	f7ff ffbd 	bl	8017a70 <__sinit>
 8017af6:	3648      	adds	r6, #72	; 0x48
 8017af8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017afc:	3b01      	subs	r3, #1
 8017afe:	d503      	bpl.n	8017b08 <__sfp+0x28>
 8017b00:	6833      	ldr	r3, [r6, #0]
 8017b02:	b30b      	cbz	r3, 8017b48 <__sfp+0x68>
 8017b04:	6836      	ldr	r6, [r6, #0]
 8017b06:	e7f7      	b.n	8017af8 <__sfp+0x18>
 8017b08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017b0c:	b9d5      	cbnz	r5, 8017b44 <__sfp+0x64>
 8017b0e:	4b16      	ldr	r3, [pc, #88]	; (8017b68 <__sfp+0x88>)
 8017b10:	60e3      	str	r3, [r4, #12]
 8017b12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017b16:	6665      	str	r5, [r4, #100]	; 0x64
 8017b18:	f000 f886 	bl	8017c28 <__retarget_lock_init_recursive>
 8017b1c:	f7ff ff96 	bl	8017a4c <__sfp_lock_release>
 8017b20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017b24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017b28:	6025      	str	r5, [r4, #0]
 8017b2a:	61a5      	str	r5, [r4, #24]
 8017b2c:	2208      	movs	r2, #8
 8017b2e:	4629      	mov	r1, r5
 8017b30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017b34:	f000 f89a 	bl	8017c6c <memset>
 8017b38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017b3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017b40:	4620      	mov	r0, r4
 8017b42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b44:	3468      	adds	r4, #104	; 0x68
 8017b46:	e7d9      	b.n	8017afc <__sfp+0x1c>
 8017b48:	2104      	movs	r1, #4
 8017b4a:	4638      	mov	r0, r7
 8017b4c:	f7ff ff62 	bl	8017a14 <__sfmoreglue>
 8017b50:	4604      	mov	r4, r0
 8017b52:	6030      	str	r0, [r6, #0]
 8017b54:	2800      	cmp	r0, #0
 8017b56:	d1d5      	bne.n	8017b04 <__sfp+0x24>
 8017b58:	f7ff ff78 	bl	8017a4c <__sfp_lock_release>
 8017b5c:	230c      	movs	r3, #12
 8017b5e:	603b      	str	r3, [r7, #0]
 8017b60:	e7ee      	b.n	8017b40 <__sfp+0x60>
 8017b62:	bf00      	nop
 8017b64:	0801f3f0 	.word	0x0801f3f0
 8017b68:	ffff0001 	.word	0xffff0001

08017b6c <_fwalk_reent>:
 8017b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017b70:	4606      	mov	r6, r0
 8017b72:	4688      	mov	r8, r1
 8017b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017b78:	2700      	movs	r7, #0
 8017b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8017b82:	d505      	bpl.n	8017b90 <_fwalk_reent+0x24>
 8017b84:	6824      	ldr	r4, [r4, #0]
 8017b86:	2c00      	cmp	r4, #0
 8017b88:	d1f7      	bne.n	8017b7a <_fwalk_reent+0xe>
 8017b8a:	4638      	mov	r0, r7
 8017b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017b90:	89ab      	ldrh	r3, [r5, #12]
 8017b92:	2b01      	cmp	r3, #1
 8017b94:	d907      	bls.n	8017ba6 <_fwalk_reent+0x3a>
 8017b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017b9a:	3301      	adds	r3, #1
 8017b9c:	d003      	beq.n	8017ba6 <_fwalk_reent+0x3a>
 8017b9e:	4629      	mov	r1, r5
 8017ba0:	4630      	mov	r0, r6
 8017ba2:	47c0      	blx	r8
 8017ba4:	4307      	orrs	r7, r0
 8017ba6:	3568      	adds	r5, #104	; 0x68
 8017ba8:	e7e9      	b.n	8017b7e <_fwalk_reent+0x12>
	...

08017bac <__libc_init_array>:
 8017bac:	b570      	push	{r4, r5, r6, lr}
 8017bae:	4d0d      	ldr	r5, [pc, #52]	; (8017be4 <__libc_init_array+0x38>)
 8017bb0:	4c0d      	ldr	r4, [pc, #52]	; (8017be8 <__libc_init_array+0x3c>)
 8017bb2:	1b64      	subs	r4, r4, r5
 8017bb4:	10a4      	asrs	r4, r4, #2
 8017bb6:	2600      	movs	r6, #0
 8017bb8:	42a6      	cmp	r6, r4
 8017bba:	d109      	bne.n	8017bd0 <__libc_init_array+0x24>
 8017bbc:	4d0b      	ldr	r5, [pc, #44]	; (8017bec <__libc_init_array+0x40>)
 8017bbe:	4c0c      	ldr	r4, [pc, #48]	; (8017bf0 <__libc_init_array+0x44>)
 8017bc0:	f002 fea4 	bl	801a90c <_init>
 8017bc4:	1b64      	subs	r4, r4, r5
 8017bc6:	10a4      	asrs	r4, r4, #2
 8017bc8:	2600      	movs	r6, #0
 8017bca:	42a6      	cmp	r6, r4
 8017bcc:	d105      	bne.n	8017bda <__libc_init_array+0x2e>
 8017bce:	bd70      	pop	{r4, r5, r6, pc}
 8017bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bd4:	4798      	blx	r3
 8017bd6:	3601      	adds	r6, #1
 8017bd8:	e7ee      	b.n	8017bb8 <__libc_init_array+0xc>
 8017bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8017bde:	4798      	blx	r3
 8017be0:	3601      	adds	r6, #1
 8017be2:	e7f2      	b.n	8017bca <__libc_init_array+0x1e>
 8017be4:	0801f7a4 	.word	0x0801f7a4
 8017be8:	0801f7a4 	.word	0x0801f7a4
 8017bec:	0801f7a4 	.word	0x0801f7a4
 8017bf0:	0801f7a8 	.word	0x0801f7a8

08017bf4 <__itoa>:
 8017bf4:	1e93      	subs	r3, r2, #2
 8017bf6:	2b22      	cmp	r3, #34	; 0x22
 8017bf8:	b510      	push	{r4, lr}
 8017bfa:	460c      	mov	r4, r1
 8017bfc:	d904      	bls.n	8017c08 <__itoa+0x14>
 8017bfe:	2300      	movs	r3, #0
 8017c00:	700b      	strb	r3, [r1, #0]
 8017c02:	461c      	mov	r4, r3
 8017c04:	4620      	mov	r0, r4
 8017c06:	bd10      	pop	{r4, pc}
 8017c08:	2a0a      	cmp	r2, #10
 8017c0a:	d109      	bne.n	8017c20 <__itoa+0x2c>
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	da07      	bge.n	8017c20 <__itoa+0x2c>
 8017c10:	232d      	movs	r3, #45	; 0x2d
 8017c12:	700b      	strb	r3, [r1, #0]
 8017c14:	4240      	negs	r0, r0
 8017c16:	2101      	movs	r1, #1
 8017c18:	4421      	add	r1, r4
 8017c1a:	f000 fe37 	bl	801888c <__utoa>
 8017c1e:	e7f1      	b.n	8017c04 <__itoa+0x10>
 8017c20:	2100      	movs	r1, #0
 8017c22:	e7f9      	b.n	8017c18 <__itoa+0x24>

08017c24 <itoa>:
 8017c24:	f7ff bfe6 	b.w	8017bf4 <__itoa>

08017c28 <__retarget_lock_init_recursive>:
 8017c28:	4770      	bx	lr

08017c2a <__retarget_lock_acquire_recursive>:
 8017c2a:	4770      	bx	lr

08017c2c <__retarget_lock_release_recursive>:
 8017c2c:	4770      	bx	lr
	...

08017c30 <malloc>:
 8017c30:	4b02      	ldr	r3, [pc, #8]	; (8017c3c <malloc+0xc>)
 8017c32:	4601      	mov	r1, r0
 8017c34:	6818      	ldr	r0, [r3, #0]
 8017c36:	f000 b871 	b.w	8017d1c <_malloc_r>
 8017c3a:	bf00      	nop
 8017c3c:	200001c8 	.word	0x200001c8

08017c40 <free>:
 8017c40:	4b02      	ldr	r3, [pc, #8]	; (8017c4c <free+0xc>)
 8017c42:	4601      	mov	r1, r0
 8017c44:	6818      	ldr	r0, [r3, #0]
 8017c46:	f000 b819 	b.w	8017c7c <_free_r>
 8017c4a:	bf00      	nop
 8017c4c:	200001c8 	.word	0x200001c8

08017c50 <memcpy>:
 8017c50:	440a      	add	r2, r1
 8017c52:	4291      	cmp	r1, r2
 8017c54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017c58:	d100      	bne.n	8017c5c <memcpy+0xc>
 8017c5a:	4770      	bx	lr
 8017c5c:	b510      	push	{r4, lr}
 8017c5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017c62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017c66:	4291      	cmp	r1, r2
 8017c68:	d1f9      	bne.n	8017c5e <memcpy+0xe>
 8017c6a:	bd10      	pop	{r4, pc}

08017c6c <memset>:
 8017c6c:	4402      	add	r2, r0
 8017c6e:	4603      	mov	r3, r0
 8017c70:	4293      	cmp	r3, r2
 8017c72:	d100      	bne.n	8017c76 <memset+0xa>
 8017c74:	4770      	bx	lr
 8017c76:	f803 1b01 	strb.w	r1, [r3], #1
 8017c7a:	e7f9      	b.n	8017c70 <memset+0x4>

08017c7c <_free_r>:
 8017c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017c7e:	2900      	cmp	r1, #0
 8017c80:	d048      	beq.n	8017d14 <_free_r+0x98>
 8017c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017c86:	9001      	str	r0, [sp, #4]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8017c8e:	bfb8      	it	lt
 8017c90:	18e4      	addlt	r4, r4, r3
 8017c92:	f001 fdb1 	bl	80197f8 <__malloc_lock>
 8017c96:	4a20      	ldr	r2, [pc, #128]	; (8017d18 <_free_r+0x9c>)
 8017c98:	9801      	ldr	r0, [sp, #4]
 8017c9a:	6813      	ldr	r3, [r2, #0]
 8017c9c:	4615      	mov	r5, r2
 8017c9e:	b933      	cbnz	r3, 8017cae <_free_r+0x32>
 8017ca0:	6063      	str	r3, [r4, #4]
 8017ca2:	6014      	str	r4, [r2, #0]
 8017ca4:	b003      	add	sp, #12
 8017ca6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017caa:	f001 bdab 	b.w	8019804 <__malloc_unlock>
 8017cae:	42a3      	cmp	r3, r4
 8017cb0:	d90b      	bls.n	8017cca <_free_r+0x4e>
 8017cb2:	6821      	ldr	r1, [r4, #0]
 8017cb4:	1862      	adds	r2, r4, r1
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	bf04      	itt	eq
 8017cba:	681a      	ldreq	r2, [r3, #0]
 8017cbc:	685b      	ldreq	r3, [r3, #4]
 8017cbe:	6063      	str	r3, [r4, #4]
 8017cc0:	bf04      	itt	eq
 8017cc2:	1852      	addeq	r2, r2, r1
 8017cc4:	6022      	streq	r2, [r4, #0]
 8017cc6:	602c      	str	r4, [r5, #0]
 8017cc8:	e7ec      	b.n	8017ca4 <_free_r+0x28>
 8017cca:	461a      	mov	r2, r3
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	b10b      	cbz	r3, 8017cd4 <_free_r+0x58>
 8017cd0:	42a3      	cmp	r3, r4
 8017cd2:	d9fa      	bls.n	8017cca <_free_r+0x4e>
 8017cd4:	6811      	ldr	r1, [r2, #0]
 8017cd6:	1855      	adds	r5, r2, r1
 8017cd8:	42a5      	cmp	r5, r4
 8017cda:	d10b      	bne.n	8017cf4 <_free_r+0x78>
 8017cdc:	6824      	ldr	r4, [r4, #0]
 8017cde:	4421      	add	r1, r4
 8017ce0:	1854      	adds	r4, r2, r1
 8017ce2:	42a3      	cmp	r3, r4
 8017ce4:	6011      	str	r1, [r2, #0]
 8017ce6:	d1dd      	bne.n	8017ca4 <_free_r+0x28>
 8017ce8:	681c      	ldr	r4, [r3, #0]
 8017cea:	685b      	ldr	r3, [r3, #4]
 8017cec:	6053      	str	r3, [r2, #4]
 8017cee:	4421      	add	r1, r4
 8017cf0:	6011      	str	r1, [r2, #0]
 8017cf2:	e7d7      	b.n	8017ca4 <_free_r+0x28>
 8017cf4:	d902      	bls.n	8017cfc <_free_r+0x80>
 8017cf6:	230c      	movs	r3, #12
 8017cf8:	6003      	str	r3, [r0, #0]
 8017cfa:	e7d3      	b.n	8017ca4 <_free_r+0x28>
 8017cfc:	6825      	ldr	r5, [r4, #0]
 8017cfe:	1961      	adds	r1, r4, r5
 8017d00:	428b      	cmp	r3, r1
 8017d02:	bf04      	itt	eq
 8017d04:	6819      	ldreq	r1, [r3, #0]
 8017d06:	685b      	ldreq	r3, [r3, #4]
 8017d08:	6063      	str	r3, [r4, #4]
 8017d0a:	bf04      	itt	eq
 8017d0c:	1949      	addeq	r1, r1, r5
 8017d0e:	6021      	streq	r1, [r4, #0]
 8017d10:	6054      	str	r4, [r2, #4]
 8017d12:	e7c7      	b.n	8017ca4 <_free_r+0x28>
 8017d14:	b003      	add	sp, #12
 8017d16:	bd30      	pop	{r4, r5, pc}
 8017d18:	2000766c 	.word	0x2000766c

08017d1c <_malloc_r>:
 8017d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d1e:	1ccd      	adds	r5, r1, #3
 8017d20:	f025 0503 	bic.w	r5, r5, #3
 8017d24:	3508      	adds	r5, #8
 8017d26:	2d0c      	cmp	r5, #12
 8017d28:	bf38      	it	cc
 8017d2a:	250c      	movcc	r5, #12
 8017d2c:	2d00      	cmp	r5, #0
 8017d2e:	4606      	mov	r6, r0
 8017d30:	db01      	blt.n	8017d36 <_malloc_r+0x1a>
 8017d32:	42a9      	cmp	r1, r5
 8017d34:	d903      	bls.n	8017d3e <_malloc_r+0x22>
 8017d36:	230c      	movs	r3, #12
 8017d38:	6033      	str	r3, [r6, #0]
 8017d3a:	2000      	movs	r0, #0
 8017d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d3e:	f001 fd5b 	bl	80197f8 <__malloc_lock>
 8017d42:	4921      	ldr	r1, [pc, #132]	; (8017dc8 <_malloc_r+0xac>)
 8017d44:	680a      	ldr	r2, [r1, #0]
 8017d46:	4614      	mov	r4, r2
 8017d48:	b99c      	cbnz	r4, 8017d72 <_malloc_r+0x56>
 8017d4a:	4f20      	ldr	r7, [pc, #128]	; (8017dcc <_malloc_r+0xb0>)
 8017d4c:	683b      	ldr	r3, [r7, #0]
 8017d4e:	b923      	cbnz	r3, 8017d5a <_malloc_r+0x3e>
 8017d50:	4621      	mov	r1, r4
 8017d52:	4630      	mov	r0, r6
 8017d54:	f000 fd10 	bl	8018778 <_sbrk_r>
 8017d58:	6038      	str	r0, [r7, #0]
 8017d5a:	4629      	mov	r1, r5
 8017d5c:	4630      	mov	r0, r6
 8017d5e:	f000 fd0b 	bl	8018778 <_sbrk_r>
 8017d62:	1c43      	adds	r3, r0, #1
 8017d64:	d123      	bne.n	8017dae <_malloc_r+0x92>
 8017d66:	230c      	movs	r3, #12
 8017d68:	6033      	str	r3, [r6, #0]
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	f001 fd4a 	bl	8019804 <__malloc_unlock>
 8017d70:	e7e3      	b.n	8017d3a <_malloc_r+0x1e>
 8017d72:	6823      	ldr	r3, [r4, #0]
 8017d74:	1b5b      	subs	r3, r3, r5
 8017d76:	d417      	bmi.n	8017da8 <_malloc_r+0x8c>
 8017d78:	2b0b      	cmp	r3, #11
 8017d7a:	d903      	bls.n	8017d84 <_malloc_r+0x68>
 8017d7c:	6023      	str	r3, [r4, #0]
 8017d7e:	441c      	add	r4, r3
 8017d80:	6025      	str	r5, [r4, #0]
 8017d82:	e004      	b.n	8017d8e <_malloc_r+0x72>
 8017d84:	6863      	ldr	r3, [r4, #4]
 8017d86:	42a2      	cmp	r2, r4
 8017d88:	bf0c      	ite	eq
 8017d8a:	600b      	streq	r3, [r1, #0]
 8017d8c:	6053      	strne	r3, [r2, #4]
 8017d8e:	4630      	mov	r0, r6
 8017d90:	f001 fd38 	bl	8019804 <__malloc_unlock>
 8017d94:	f104 000b 	add.w	r0, r4, #11
 8017d98:	1d23      	adds	r3, r4, #4
 8017d9a:	f020 0007 	bic.w	r0, r0, #7
 8017d9e:	1ac2      	subs	r2, r0, r3
 8017da0:	d0cc      	beq.n	8017d3c <_malloc_r+0x20>
 8017da2:	1a1b      	subs	r3, r3, r0
 8017da4:	50a3      	str	r3, [r4, r2]
 8017da6:	e7c9      	b.n	8017d3c <_malloc_r+0x20>
 8017da8:	4622      	mov	r2, r4
 8017daa:	6864      	ldr	r4, [r4, #4]
 8017dac:	e7cc      	b.n	8017d48 <_malloc_r+0x2c>
 8017dae:	1cc4      	adds	r4, r0, #3
 8017db0:	f024 0403 	bic.w	r4, r4, #3
 8017db4:	42a0      	cmp	r0, r4
 8017db6:	d0e3      	beq.n	8017d80 <_malloc_r+0x64>
 8017db8:	1a21      	subs	r1, r4, r0
 8017dba:	4630      	mov	r0, r6
 8017dbc:	f000 fcdc 	bl	8018778 <_sbrk_r>
 8017dc0:	3001      	adds	r0, #1
 8017dc2:	d1dd      	bne.n	8017d80 <_malloc_r+0x64>
 8017dc4:	e7cf      	b.n	8017d66 <_malloc_r+0x4a>
 8017dc6:	bf00      	nop
 8017dc8:	2000766c 	.word	0x2000766c
 8017dcc:	20007670 	.word	0x20007670

08017dd0 <__cvt>:
 8017dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017dd4:	ec55 4b10 	vmov	r4, r5, d0
 8017dd8:	2d00      	cmp	r5, #0
 8017dda:	460e      	mov	r6, r1
 8017ddc:	4619      	mov	r1, r3
 8017dde:	462b      	mov	r3, r5
 8017de0:	bfbb      	ittet	lt
 8017de2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017de6:	461d      	movlt	r5, r3
 8017de8:	2300      	movge	r3, #0
 8017dea:	232d      	movlt	r3, #45	; 0x2d
 8017dec:	700b      	strb	r3, [r1, #0]
 8017dee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017df4:	4691      	mov	r9, r2
 8017df6:	f023 0820 	bic.w	r8, r3, #32
 8017dfa:	bfbc      	itt	lt
 8017dfc:	4622      	movlt	r2, r4
 8017dfe:	4614      	movlt	r4, r2
 8017e00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017e04:	d005      	beq.n	8017e12 <__cvt+0x42>
 8017e06:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017e0a:	d100      	bne.n	8017e0e <__cvt+0x3e>
 8017e0c:	3601      	adds	r6, #1
 8017e0e:	2102      	movs	r1, #2
 8017e10:	e000      	b.n	8017e14 <__cvt+0x44>
 8017e12:	2103      	movs	r1, #3
 8017e14:	ab03      	add	r3, sp, #12
 8017e16:	9301      	str	r3, [sp, #4]
 8017e18:	ab02      	add	r3, sp, #8
 8017e1a:	9300      	str	r3, [sp, #0]
 8017e1c:	ec45 4b10 	vmov	d0, r4, r5
 8017e20:	4653      	mov	r3, sl
 8017e22:	4632      	mov	r2, r6
 8017e24:	f000 fe24 	bl	8018a70 <_dtoa_r>
 8017e28:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017e2c:	4607      	mov	r7, r0
 8017e2e:	d102      	bne.n	8017e36 <__cvt+0x66>
 8017e30:	f019 0f01 	tst.w	r9, #1
 8017e34:	d022      	beq.n	8017e7c <__cvt+0xac>
 8017e36:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017e3a:	eb07 0906 	add.w	r9, r7, r6
 8017e3e:	d110      	bne.n	8017e62 <__cvt+0x92>
 8017e40:	783b      	ldrb	r3, [r7, #0]
 8017e42:	2b30      	cmp	r3, #48	; 0x30
 8017e44:	d10a      	bne.n	8017e5c <__cvt+0x8c>
 8017e46:	2200      	movs	r2, #0
 8017e48:	2300      	movs	r3, #0
 8017e4a:	4620      	mov	r0, r4
 8017e4c:	4629      	mov	r1, r5
 8017e4e:	f7e8 fe3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e52:	b918      	cbnz	r0, 8017e5c <__cvt+0x8c>
 8017e54:	f1c6 0601 	rsb	r6, r6, #1
 8017e58:	f8ca 6000 	str.w	r6, [sl]
 8017e5c:	f8da 3000 	ldr.w	r3, [sl]
 8017e60:	4499      	add	r9, r3
 8017e62:	2200      	movs	r2, #0
 8017e64:	2300      	movs	r3, #0
 8017e66:	4620      	mov	r0, r4
 8017e68:	4629      	mov	r1, r5
 8017e6a:	f7e8 fe2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e6e:	b108      	cbz	r0, 8017e74 <__cvt+0xa4>
 8017e70:	f8cd 900c 	str.w	r9, [sp, #12]
 8017e74:	2230      	movs	r2, #48	; 0x30
 8017e76:	9b03      	ldr	r3, [sp, #12]
 8017e78:	454b      	cmp	r3, r9
 8017e7a:	d307      	bcc.n	8017e8c <__cvt+0xbc>
 8017e7c:	9b03      	ldr	r3, [sp, #12]
 8017e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017e80:	1bdb      	subs	r3, r3, r7
 8017e82:	4638      	mov	r0, r7
 8017e84:	6013      	str	r3, [r2, #0]
 8017e86:	b004      	add	sp, #16
 8017e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e8c:	1c59      	adds	r1, r3, #1
 8017e8e:	9103      	str	r1, [sp, #12]
 8017e90:	701a      	strb	r2, [r3, #0]
 8017e92:	e7f0      	b.n	8017e76 <__cvt+0xa6>

08017e94 <__exponent>:
 8017e94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e96:	4603      	mov	r3, r0
 8017e98:	2900      	cmp	r1, #0
 8017e9a:	bfb8      	it	lt
 8017e9c:	4249      	neglt	r1, r1
 8017e9e:	f803 2b02 	strb.w	r2, [r3], #2
 8017ea2:	bfb4      	ite	lt
 8017ea4:	222d      	movlt	r2, #45	; 0x2d
 8017ea6:	222b      	movge	r2, #43	; 0x2b
 8017ea8:	2909      	cmp	r1, #9
 8017eaa:	7042      	strb	r2, [r0, #1]
 8017eac:	dd2a      	ble.n	8017f04 <__exponent+0x70>
 8017eae:	f10d 0407 	add.w	r4, sp, #7
 8017eb2:	46a4      	mov	ip, r4
 8017eb4:	270a      	movs	r7, #10
 8017eb6:	46a6      	mov	lr, r4
 8017eb8:	460a      	mov	r2, r1
 8017eba:	fb91 f6f7 	sdiv	r6, r1, r7
 8017ebe:	fb07 1516 	mls	r5, r7, r6, r1
 8017ec2:	3530      	adds	r5, #48	; 0x30
 8017ec4:	2a63      	cmp	r2, #99	; 0x63
 8017ec6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8017eca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017ece:	4631      	mov	r1, r6
 8017ed0:	dcf1      	bgt.n	8017eb6 <__exponent+0x22>
 8017ed2:	3130      	adds	r1, #48	; 0x30
 8017ed4:	f1ae 0502 	sub.w	r5, lr, #2
 8017ed8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017edc:	1c44      	adds	r4, r0, #1
 8017ede:	4629      	mov	r1, r5
 8017ee0:	4561      	cmp	r1, ip
 8017ee2:	d30a      	bcc.n	8017efa <__exponent+0x66>
 8017ee4:	f10d 0209 	add.w	r2, sp, #9
 8017ee8:	eba2 020e 	sub.w	r2, r2, lr
 8017eec:	4565      	cmp	r5, ip
 8017eee:	bf88      	it	hi
 8017ef0:	2200      	movhi	r2, #0
 8017ef2:	4413      	add	r3, r2
 8017ef4:	1a18      	subs	r0, r3, r0
 8017ef6:	b003      	add	sp, #12
 8017ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017efe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017f02:	e7ed      	b.n	8017ee0 <__exponent+0x4c>
 8017f04:	2330      	movs	r3, #48	; 0x30
 8017f06:	3130      	adds	r1, #48	; 0x30
 8017f08:	7083      	strb	r3, [r0, #2]
 8017f0a:	70c1      	strb	r1, [r0, #3]
 8017f0c:	1d03      	adds	r3, r0, #4
 8017f0e:	e7f1      	b.n	8017ef4 <__exponent+0x60>

08017f10 <_printf_float>:
 8017f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f14:	ed2d 8b02 	vpush	{d8}
 8017f18:	b08d      	sub	sp, #52	; 0x34
 8017f1a:	460c      	mov	r4, r1
 8017f1c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017f20:	4616      	mov	r6, r2
 8017f22:	461f      	mov	r7, r3
 8017f24:	4605      	mov	r5, r0
 8017f26:	f001 fc51 	bl	80197cc <_localeconv_r>
 8017f2a:	f8d0 a000 	ldr.w	sl, [r0]
 8017f2e:	4650      	mov	r0, sl
 8017f30:	f7e8 f94e 	bl	80001d0 <strlen>
 8017f34:	2300      	movs	r3, #0
 8017f36:	930a      	str	r3, [sp, #40]	; 0x28
 8017f38:	6823      	ldr	r3, [r4, #0]
 8017f3a:	9305      	str	r3, [sp, #20]
 8017f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8017f40:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017f44:	3307      	adds	r3, #7
 8017f46:	f023 0307 	bic.w	r3, r3, #7
 8017f4a:	f103 0208 	add.w	r2, r3, #8
 8017f4e:	f8c8 2000 	str.w	r2, [r8]
 8017f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f56:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017f5a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017f5e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017f62:	9307      	str	r3, [sp, #28]
 8017f64:	f8cd 8018 	str.w	r8, [sp, #24]
 8017f68:	ee08 0a10 	vmov	s16, r0
 8017f6c:	4b9f      	ldr	r3, [pc, #636]	; (80181ec <_printf_float+0x2dc>)
 8017f6e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017f72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f76:	f7e8 fdd9 	bl	8000b2c <__aeabi_dcmpun>
 8017f7a:	bb88      	cbnz	r0, 8017fe0 <_printf_float+0xd0>
 8017f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017f80:	4b9a      	ldr	r3, [pc, #616]	; (80181ec <_printf_float+0x2dc>)
 8017f82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017f86:	f7e8 fdb3 	bl	8000af0 <__aeabi_dcmple>
 8017f8a:	bb48      	cbnz	r0, 8017fe0 <_printf_float+0xd0>
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	2300      	movs	r3, #0
 8017f90:	4640      	mov	r0, r8
 8017f92:	4649      	mov	r1, r9
 8017f94:	f7e8 fda2 	bl	8000adc <__aeabi_dcmplt>
 8017f98:	b110      	cbz	r0, 8017fa0 <_printf_float+0x90>
 8017f9a:	232d      	movs	r3, #45	; 0x2d
 8017f9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017fa0:	4b93      	ldr	r3, [pc, #588]	; (80181f0 <_printf_float+0x2e0>)
 8017fa2:	4894      	ldr	r0, [pc, #592]	; (80181f4 <_printf_float+0x2e4>)
 8017fa4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017fa8:	bf94      	ite	ls
 8017faa:	4698      	movls	r8, r3
 8017fac:	4680      	movhi	r8, r0
 8017fae:	2303      	movs	r3, #3
 8017fb0:	6123      	str	r3, [r4, #16]
 8017fb2:	9b05      	ldr	r3, [sp, #20]
 8017fb4:	f023 0204 	bic.w	r2, r3, #4
 8017fb8:	6022      	str	r2, [r4, #0]
 8017fba:	f04f 0900 	mov.w	r9, #0
 8017fbe:	9700      	str	r7, [sp, #0]
 8017fc0:	4633      	mov	r3, r6
 8017fc2:	aa0b      	add	r2, sp, #44	; 0x2c
 8017fc4:	4621      	mov	r1, r4
 8017fc6:	4628      	mov	r0, r5
 8017fc8:	f000 f9d8 	bl	801837c <_printf_common>
 8017fcc:	3001      	adds	r0, #1
 8017fce:	f040 8090 	bne.w	80180f2 <_printf_float+0x1e2>
 8017fd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017fd6:	b00d      	add	sp, #52	; 0x34
 8017fd8:	ecbd 8b02 	vpop	{d8}
 8017fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fe0:	4642      	mov	r2, r8
 8017fe2:	464b      	mov	r3, r9
 8017fe4:	4640      	mov	r0, r8
 8017fe6:	4649      	mov	r1, r9
 8017fe8:	f7e8 fda0 	bl	8000b2c <__aeabi_dcmpun>
 8017fec:	b140      	cbz	r0, 8018000 <_printf_float+0xf0>
 8017fee:	464b      	mov	r3, r9
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	bfbc      	itt	lt
 8017ff4:	232d      	movlt	r3, #45	; 0x2d
 8017ff6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017ffa:	487f      	ldr	r0, [pc, #508]	; (80181f8 <_printf_float+0x2e8>)
 8017ffc:	4b7f      	ldr	r3, [pc, #508]	; (80181fc <_printf_float+0x2ec>)
 8017ffe:	e7d1      	b.n	8017fa4 <_printf_float+0x94>
 8018000:	6863      	ldr	r3, [r4, #4]
 8018002:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8018006:	9206      	str	r2, [sp, #24]
 8018008:	1c5a      	adds	r2, r3, #1
 801800a:	d13f      	bne.n	801808c <_printf_float+0x17c>
 801800c:	2306      	movs	r3, #6
 801800e:	6063      	str	r3, [r4, #4]
 8018010:	9b05      	ldr	r3, [sp, #20]
 8018012:	6861      	ldr	r1, [r4, #4]
 8018014:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018018:	2300      	movs	r3, #0
 801801a:	9303      	str	r3, [sp, #12]
 801801c:	ab0a      	add	r3, sp, #40	; 0x28
 801801e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8018022:	ab09      	add	r3, sp, #36	; 0x24
 8018024:	ec49 8b10 	vmov	d0, r8, r9
 8018028:	9300      	str	r3, [sp, #0]
 801802a:	6022      	str	r2, [r4, #0]
 801802c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018030:	4628      	mov	r0, r5
 8018032:	f7ff fecd 	bl	8017dd0 <__cvt>
 8018036:	9b06      	ldr	r3, [sp, #24]
 8018038:	9909      	ldr	r1, [sp, #36]	; 0x24
 801803a:	2b47      	cmp	r3, #71	; 0x47
 801803c:	4680      	mov	r8, r0
 801803e:	d108      	bne.n	8018052 <_printf_float+0x142>
 8018040:	1cc8      	adds	r0, r1, #3
 8018042:	db02      	blt.n	801804a <_printf_float+0x13a>
 8018044:	6863      	ldr	r3, [r4, #4]
 8018046:	4299      	cmp	r1, r3
 8018048:	dd41      	ble.n	80180ce <_printf_float+0x1be>
 801804a:	f1ab 0b02 	sub.w	fp, fp, #2
 801804e:	fa5f fb8b 	uxtb.w	fp, fp
 8018052:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018056:	d820      	bhi.n	801809a <_printf_float+0x18a>
 8018058:	3901      	subs	r1, #1
 801805a:	465a      	mov	r2, fp
 801805c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018060:	9109      	str	r1, [sp, #36]	; 0x24
 8018062:	f7ff ff17 	bl	8017e94 <__exponent>
 8018066:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018068:	1813      	adds	r3, r2, r0
 801806a:	2a01      	cmp	r2, #1
 801806c:	4681      	mov	r9, r0
 801806e:	6123      	str	r3, [r4, #16]
 8018070:	dc02      	bgt.n	8018078 <_printf_float+0x168>
 8018072:	6822      	ldr	r2, [r4, #0]
 8018074:	07d2      	lsls	r2, r2, #31
 8018076:	d501      	bpl.n	801807c <_printf_float+0x16c>
 8018078:	3301      	adds	r3, #1
 801807a:	6123      	str	r3, [r4, #16]
 801807c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018080:	2b00      	cmp	r3, #0
 8018082:	d09c      	beq.n	8017fbe <_printf_float+0xae>
 8018084:	232d      	movs	r3, #45	; 0x2d
 8018086:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801808a:	e798      	b.n	8017fbe <_printf_float+0xae>
 801808c:	9a06      	ldr	r2, [sp, #24]
 801808e:	2a47      	cmp	r2, #71	; 0x47
 8018090:	d1be      	bne.n	8018010 <_printf_float+0x100>
 8018092:	2b00      	cmp	r3, #0
 8018094:	d1bc      	bne.n	8018010 <_printf_float+0x100>
 8018096:	2301      	movs	r3, #1
 8018098:	e7b9      	b.n	801800e <_printf_float+0xfe>
 801809a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801809e:	d118      	bne.n	80180d2 <_printf_float+0x1c2>
 80180a0:	2900      	cmp	r1, #0
 80180a2:	6863      	ldr	r3, [r4, #4]
 80180a4:	dd0b      	ble.n	80180be <_printf_float+0x1ae>
 80180a6:	6121      	str	r1, [r4, #16]
 80180a8:	b913      	cbnz	r3, 80180b0 <_printf_float+0x1a0>
 80180aa:	6822      	ldr	r2, [r4, #0]
 80180ac:	07d0      	lsls	r0, r2, #31
 80180ae:	d502      	bpl.n	80180b6 <_printf_float+0x1a6>
 80180b0:	3301      	adds	r3, #1
 80180b2:	440b      	add	r3, r1
 80180b4:	6123      	str	r3, [r4, #16]
 80180b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80180b8:	f04f 0900 	mov.w	r9, #0
 80180bc:	e7de      	b.n	801807c <_printf_float+0x16c>
 80180be:	b913      	cbnz	r3, 80180c6 <_printf_float+0x1b6>
 80180c0:	6822      	ldr	r2, [r4, #0]
 80180c2:	07d2      	lsls	r2, r2, #31
 80180c4:	d501      	bpl.n	80180ca <_printf_float+0x1ba>
 80180c6:	3302      	adds	r3, #2
 80180c8:	e7f4      	b.n	80180b4 <_printf_float+0x1a4>
 80180ca:	2301      	movs	r3, #1
 80180cc:	e7f2      	b.n	80180b4 <_printf_float+0x1a4>
 80180ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80180d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80180d4:	4299      	cmp	r1, r3
 80180d6:	db05      	blt.n	80180e4 <_printf_float+0x1d4>
 80180d8:	6823      	ldr	r3, [r4, #0]
 80180da:	6121      	str	r1, [r4, #16]
 80180dc:	07d8      	lsls	r0, r3, #31
 80180de:	d5ea      	bpl.n	80180b6 <_printf_float+0x1a6>
 80180e0:	1c4b      	adds	r3, r1, #1
 80180e2:	e7e7      	b.n	80180b4 <_printf_float+0x1a4>
 80180e4:	2900      	cmp	r1, #0
 80180e6:	bfd4      	ite	le
 80180e8:	f1c1 0202 	rsble	r2, r1, #2
 80180ec:	2201      	movgt	r2, #1
 80180ee:	4413      	add	r3, r2
 80180f0:	e7e0      	b.n	80180b4 <_printf_float+0x1a4>
 80180f2:	6823      	ldr	r3, [r4, #0]
 80180f4:	055a      	lsls	r2, r3, #21
 80180f6:	d407      	bmi.n	8018108 <_printf_float+0x1f8>
 80180f8:	6923      	ldr	r3, [r4, #16]
 80180fa:	4642      	mov	r2, r8
 80180fc:	4631      	mov	r1, r6
 80180fe:	4628      	mov	r0, r5
 8018100:	47b8      	blx	r7
 8018102:	3001      	adds	r0, #1
 8018104:	d12c      	bne.n	8018160 <_printf_float+0x250>
 8018106:	e764      	b.n	8017fd2 <_printf_float+0xc2>
 8018108:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801810c:	f240 80e0 	bls.w	80182d0 <_printf_float+0x3c0>
 8018110:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018114:	2200      	movs	r2, #0
 8018116:	2300      	movs	r3, #0
 8018118:	f7e8 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801811c:	2800      	cmp	r0, #0
 801811e:	d034      	beq.n	801818a <_printf_float+0x27a>
 8018120:	4a37      	ldr	r2, [pc, #220]	; (8018200 <_printf_float+0x2f0>)
 8018122:	2301      	movs	r3, #1
 8018124:	4631      	mov	r1, r6
 8018126:	4628      	mov	r0, r5
 8018128:	47b8      	blx	r7
 801812a:	3001      	adds	r0, #1
 801812c:	f43f af51 	beq.w	8017fd2 <_printf_float+0xc2>
 8018130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018134:	429a      	cmp	r2, r3
 8018136:	db02      	blt.n	801813e <_printf_float+0x22e>
 8018138:	6823      	ldr	r3, [r4, #0]
 801813a:	07d8      	lsls	r0, r3, #31
 801813c:	d510      	bpl.n	8018160 <_printf_float+0x250>
 801813e:	ee18 3a10 	vmov	r3, s16
 8018142:	4652      	mov	r2, sl
 8018144:	4631      	mov	r1, r6
 8018146:	4628      	mov	r0, r5
 8018148:	47b8      	blx	r7
 801814a:	3001      	adds	r0, #1
 801814c:	f43f af41 	beq.w	8017fd2 <_printf_float+0xc2>
 8018150:	f04f 0800 	mov.w	r8, #0
 8018154:	f104 091a 	add.w	r9, r4, #26
 8018158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801815a:	3b01      	subs	r3, #1
 801815c:	4543      	cmp	r3, r8
 801815e:	dc09      	bgt.n	8018174 <_printf_float+0x264>
 8018160:	6823      	ldr	r3, [r4, #0]
 8018162:	079b      	lsls	r3, r3, #30
 8018164:	f100 8105 	bmi.w	8018372 <_printf_float+0x462>
 8018168:	68e0      	ldr	r0, [r4, #12]
 801816a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801816c:	4298      	cmp	r0, r3
 801816e:	bfb8      	it	lt
 8018170:	4618      	movlt	r0, r3
 8018172:	e730      	b.n	8017fd6 <_printf_float+0xc6>
 8018174:	2301      	movs	r3, #1
 8018176:	464a      	mov	r2, r9
 8018178:	4631      	mov	r1, r6
 801817a:	4628      	mov	r0, r5
 801817c:	47b8      	blx	r7
 801817e:	3001      	adds	r0, #1
 8018180:	f43f af27 	beq.w	8017fd2 <_printf_float+0xc2>
 8018184:	f108 0801 	add.w	r8, r8, #1
 8018188:	e7e6      	b.n	8018158 <_printf_float+0x248>
 801818a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801818c:	2b00      	cmp	r3, #0
 801818e:	dc39      	bgt.n	8018204 <_printf_float+0x2f4>
 8018190:	4a1b      	ldr	r2, [pc, #108]	; (8018200 <_printf_float+0x2f0>)
 8018192:	2301      	movs	r3, #1
 8018194:	4631      	mov	r1, r6
 8018196:	4628      	mov	r0, r5
 8018198:	47b8      	blx	r7
 801819a:	3001      	adds	r0, #1
 801819c:	f43f af19 	beq.w	8017fd2 <_printf_float+0xc2>
 80181a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80181a4:	4313      	orrs	r3, r2
 80181a6:	d102      	bne.n	80181ae <_printf_float+0x29e>
 80181a8:	6823      	ldr	r3, [r4, #0]
 80181aa:	07d9      	lsls	r1, r3, #31
 80181ac:	d5d8      	bpl.n	8018160 <_printf_float+0x250>
 80181ae:	ee18 3a10 	vmov	r3, s16
 80181b2:	4652      	mov	r2, sl
 80181b4:	4631      	mov	r1, r6
 80181b6:	4628      	mov	r0, r5
 80181b8:	47b8      	blx	r7
 80181ba:	3001      	adds	r0, #1
 80181bc:	f43f af09 	beq.w	8017fd2 <_printf_float+0xc2>
 80181c0:	f04f 0900 	mov.w	r9, #0
 80181c4:	f104 0a1a 	add.w	sl, r4, #26
 80181c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80181ca:	425b      	negs	r3, r3
 80181cc:	454b      	cmp	r3, r9
 80181ce:	dc01      	bgt.n	80181d4 <_printf_float+0x2c4>
 80181d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181d2:	e792      	b.n	80180fa <_printf_float+0x1ea>
 80181d4:	2301      	movs	r3, #1
 80181d6:	4652      	mov	r2, sl
 80181d8:	4631      	mov	r1, r6
 80181da:	4628      	mov	r0, r5
 80181dc:	47b8      	blx	r7
 80181de:	3001      	adds	r0, #1
 80181e0:	f43f aef7 	beq.w	8017fd2 <_printf_float+0xc2>
 80181e4:	f109 0901 	add.w	r9, r9, #1
 80181e8:	e7ee      	b.n	80181c8 <_printf_float+0x2b8>
 80181ea:	bf00      	nop
 80181ec:	7fefffff 	.word	0x7fefffff
 80181f0:	0801f3f4 	.word	0x0801f3f4
 80181f4:	0801f3f8 	.word	0x0801f3f8
 80181f8:	0801f400 	.word	0x0801f400
 80181fc:	0801f3fc 	.word	0x0801f3fc
 8018200:	0801f404 	.word	0x0801f404
 8018204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018206:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018208:	429a      	cmp	r2, r3
 801820a:	bfa8      	it	ge
 801820c:	461a      	movge	r2, r3
 801820e:	2a00      	cmp	r2, #0
 8018210:	4691      	mov	r9, r2
 8018212:	dc37      	bgt.n	8018284 <_printf_float+0x374>
 8018214:	f04f 0b00 	mov.w	fp, #0
 8018218:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801821c:	f104 021a 	add.w	r2, r4, #26
 8018220:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018222:	9305      	str	r3, [sp, #20]
 8018224:	eba3 0309 	sub.w	r3, r3, r9
 8018228:	455b      	cmp	r3, fp
 801822a:	dc33      	bgt.n	8018294 <_printf_float+0x384>
 801822c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018230:	429a      	cmp	r2, r3
 8018232:	db3b      	blt.n	80182ac <_printf_float+0x39c>
 8018234:	6823      	ldr	r3, [r4, #0]
 8018236:	07da      	lsls	r2, r3, #31
 8018238:	d438      	bmi.n	80182ac <_printf_float+0x39c>
 801823a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801823c:	9b05      	ldr	r3, [sp, #20]
 801823e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018240:	1ad3      	subs	r3, r2, r3
 8018242:	eba2 0901 	sub.w	r9, r2, r1
 8018246:	4599      	cmp	r9, r3
 8018248:	bfa8      	it	ge
 801824a:	4699      	movge	r9, r3
 801824c:	f1b9 0f00 	cmp.w	r9, #0
 8018250:	dc35      	bgt.n	80182be <_printf_float+0x3ae>
 8018252:	f04f 0800 	mov.w	r8, #0
 8018256:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801825a:	f104 0a1a 	add.w	sl, r4, #26
 801825e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018262:	1a9b      	subs	r3, r3, r2
 8018264:	eba3 0309 	sub.w	r3, r3, r9
 8018268:	4543      	cmp	r3, r8
 801826a:	f77f af79 	ble.w	8018160 <_printf_float+0x250>
 801826e:	2301      	movs	r3, #1
 8018270:	4652      	mov	r2, sl
 8018272:	4631      	mov	r1, r6
 8018274:	4628      	mov	r0, r5
 8018276:	47b8      	blx	r7
 8018278:	3001      	adds	r0, #1
 801827a:	f43f aeaa 	beq.w	8017fd2 <_printf_float+0xc2>
 801827e:	f108 0801 	add.w	r8, r8, #1
 8018282:	e7ec      	b.n	801825e <_printf_float+0x34e>
 8018284:	4613      	mov	r3, r2
 8018286:	4631      	mov	r1, r6
 8018288:	4642      	mov	r2, r8
 801828a:	4628      	mov	r0, r5
 801828c:	47b8      	blx	r7
 801828e:	3001      	adds	r0, #1
 8018290:	d1c0      	bne.n	8018214 <_printf_float+0x304>
 8018292:	e69e      	b.n	8017fd2 <_printf_float+0xc2>
 8018294:	2301      	movs	r3, #1
 8018296:	4631      	mov	r1, r6
 8018298:	4628      	mov	r0, r5
 801829a:	9205      	str	r2, [sp, #20]
 801829c:	47b8      	blx	r7
 801829e:	3001      	adds	r0, #1
 80182a0:	f43f ae97 	beq.w	8017fd2 <_printf_float+0xc2>
 80182a4:	9a05      	ldr	r2, [sp, #20]
 80182a6:	f10b 0b01 	add.w	fp, fp, #1
 80182aa:	e7b9      	b.n	8018220 <_printf_float+0x310>
 80182ac:	ee18 3a10 	vmov	r3, s16
 80182b0:	4652      	mov	r2, sl
 80182b2:	4631      	mov	r1, r6
 80182b4:	4628      	mov	r0, r5
 80182b6:	47b8      	blx	r7
 80182b8:	3001      	adds	r0, #1
 80182ba:	d1be      	bne.n	801823a <_printf_float+0x32a>
 80182bc:	e689      	b.n	8017fd2 <_printf_float+0xc2>
 80182be:	9a05      	ldr	r2, [sp, #20]
 80182c0:	464b      	mov	r3, r9
 80182c2:	4442      	add	r2, r8
 80182c4:	4631      	mov	r1, r6
 80182c6:	4628      	mov	r0, r5
 80182c8:	47b8      	blx	r7
 80182ca:	3001      	adds	r0, #1
 80182cc:	d1c1      	bne.n	8018252 <_printf_float+0x342>
 80182ce:	e680      	b.n	8017fd2 <_printf_float+0xc2>
 80182d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80182d2:	2a01      	cmp	r2, #1
 80182d4:	dc01      	bgt.n	80182da <_printf_float+0x3ca>
 80182d6:	07db      	lsls	r3, r3, #31
 80182d8:	d538      	bpl.n	801834c <_printf_float+0x43c>
 80182da:	2301      	movs	r3, #1
 80182dc:	4642      	mov	r2, r8
 80182de:	4631      	mov	r1, r6
 80182e0:	4628      	mov	r0, r5
 80182e2:	47b8      	blx	r7
 80182e4:	3001      	adds	r0, #1
 80182e6:	f43f ae74 	beq.w	8017fd2 <_printf_float+0xc2>
 80182ea:	ee18 3a10 	vmov	r3, s16
 80182ee:	4652      	mov	r2, sl
 80182f0:	4631      	mov	r1, r6
 80182f2:	4628      	mov	r0, r5
 80182f4:	47b8      	blx	r7
 80182f6:	3001      	adds	r0, #1
 80182f8:	f43f ae6b 	beq.w	8017fd2 <_printf_float+0xc2>
 80182fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018300:	2200      	movs	r2, #0
 8018302:	2300      	movs	r3, #0
 8018304:	f7e8 fbe0 	bl	8000ac8 <__aeabi_dcmpeq>
 8018308:	b9d8      	cbnz	r0, 8018342 <_printf_float+0x432>
 801830a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801830c:	f108 0201 	add.w	r2, r8, #1
 8018310:	3b01      	subs	r3, #1
 8018312:	4631      	mov	r1, r6
 8018314:	4628      	mov	r0, r5
 8018316:	47b8      	blx	r7
 8018318:	3001      	adds	r0, #1
 801831a:	d10e      	bne.n	801833a <_printf_float+0x42a>
 801831c:	e659      	b.n	8017fd2 <_printf_float+0xc2>
 801831e:	2301      	movs	r3, #1
 8018320:	4652      	mov	r2, sl
 8018322:	4631      	mov	r1, r6
 8018324:	4628      	mov	r0, r5
 8018326:	47b8      	blx	r7
 8018328:	3001      	adds	r0, #1
 801832a:	f43f ae52 	beq.w	8017fd2 <_printf_float+0xc2>
 801832e:	f108 0801 	add.w	r8, r8, #1
 8018332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018334:	3b01      	subs	r3, #1
 8018336:	4543      	cmp	r3, r8
 8018338:	dcf1      	bgt.n	801831e <_printf_float+0x40e>
 801833a:	464b      	mov	r3, r9
 801833c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018340:	e6dc      	b.n	80180fc <_printf_float+0x1ec>
 8018342:	f04f 0800 	mov.w	r8, #0
 8018346:	f104 0a1a 	add.w	sl, r4, #26
 801834a:	e7f2      	b.n	8018332 <_printf_float+0x422>
 801834c:	2301      	movs	r3, #1
 801834e:	4642      	mov	r2, r8
 8018350:	e7df      	b.n	8018312 <_printf_float+0x402>
 8018352:	2301      	movs	r3, #1
 8018354:	464a      	mov	r2, r9
 8018356:	4631      	mov	r1, r6
 8018358:	4628      	mov	r0, r5
 801835a:	47b8      	blx	r7
 801835c:	3001      	adds	r0, #1
 801835e:	f43f ae38 	beq.w	8017fd2 <_printf_float+0xc2>
 8018362:	f108 0801 	add.w	r8, r8, #1
 8018366:	68e3      	ldr	r3, [r4, #12]
 8018368:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801836a:	1a5b      	subs	r3, r3, r1
 801836c:	4543      	cmp	r3, r8
 801836e:	dcf0      	bgt.n	8018352 <_printf_float+0x442>
 8018370:	e6fa      	b.n	8018168 <_printf_float+0x258>
 8018372:	f04f 0800 	mov.w	r8, #0
 8018376:	f104 0919 	add.w	r9, r4, #25
 801837a:	e7f4      	b.n	8018366 <_printf_float+0x456>

0801837c <_printf_common>:
 801837c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018380:	4616      	mov	r6, r2
 8018382:	4699      	mov	r9, r3
 8018384:	688a      	ldr	r2, [r1, #8]
 8018386:	690b      	ldr	r3, [r1, #16]
 8018388:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801838c:	4293      	cmp	r3, r2
 801838e:	bfb8      	it	lt
 8018390:	4613      	movlt	r3, r2
 8018392:	6033      	str	r3, [r6, #0]
 8018394:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018398:	4607      	mov	r7, r0
 801839a:	460c      	mov	r4, r1
 801839c:	b10a      	cbz	r2, 80183a2 <_printf_common+0x26>
 801839e:	3301      	adds	r3, #1
 80183a0:	6033      	str	r3, [r6, #0]
 80183a2:	6823      	ldr	r3, [r4, #0]
 80183a4:	0699      	lsls	r1, r3, #26
 80183a6:	bf42      	ittt	mi
 80183a8:	6833      	ldrmi	r3, [r6, #0]
 80183aa:	3302      	addmi	r3, #2
 80183ac:	6033      	strmi	r3, [r6, #0]
 80183ae:	6825      	ldr	r5, [r4, #0]
 80183b0:	f015 0506 	ands.w	r5, r5, #6
 80183b4:	d106      	bne.n	80183c4 <_printf_common+0x48>
 80183b6:	f104 0a19 	add.w	sl, r4, #25
 80183ba:	68e3      	ldr	r3, [r4, #12]
 80183bc:	6832      	ldr	r2, [r6, #0]
 80183be:	1a9b      	subs	r3, r3, r2
 80183c0:	42ab      	cmp	r3, r5
 80183c2:	dc26      	bgt.n	8018412 <_printf_common+0x96>
 80183c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80183c8:	1e13      	subs	r3, r2, #0
 80183ca:	6822      	ldr	r2, [r4, #0]
 80183cc:	bf18      	it	ne
 80183ce:	2301      	movne	r3, #1
 80183d0:	0692      	lsls	r2, r2, #26
 80183d2:	d42b      	bmi.n	801842c <_printf_common+0xb0>
 80183d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80183d8:	4649      	mov	r1, r9
 80183da:	4638      	mov	r0, r7
 80183dc:	47c0      	blx	r8
 80183de:	3001      	adds	r0, #1
 80183e0:	d01e      	beq.n	8018420 <_printf_common+0xa4>
 80183e2:	6823      	ldr	r3, [r4, #0]
 80183e4:	68e5      	ldr	r5, [r4, #12]
 80183e6:	6832      	ldr	r2, [r6, #0]
 80183e8:	f003 0306 	and.w	r3, r3, #6
 80183ec:	2b04      	cmp	r3, #4
 80183ee:	bf08      	it	eq
 80183f0:	1aad      	subeq	r5, r5, r2
 80183f2:	68a3      	ldr	r3, [r4, #8]
 80183f4:	6922      	ldr	r2, [r4, #16]
 80183f6:	bf0c      	ite	eq
 80183f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183fc:	2500      	movne	r5, #0
 80183fe:	4293      	cmp	r3, r2
 8018400:	bfc4      	itt	gt
 8018402:	1a9b      	subgt	r3, r3, r2
 8018404:	18ed      	addgt	r5, r5, r3
 8018406:	2600      	movs	r6, #0
 8018408:	341a      	adds	r4, #26
 801840a:	42b5      	cmp	r5, r6
 801840c:	d11a      	bne.n	8018444 <_printf_common+0xc8>
 801840e:	2000      	movs	r0, #0
 8018410:	e008      	b.n	8018424 <_printf_common+0xa8>
 8018412:	2301      	movs	r3, #1
 8018414:	4652      	mov	r2, sl
 8018416:	4649      	mov	r1, r9
 8018418:	4638      	mov	r0, r7
 801841a:	47c0      	blx	r8
 801841c:	3001      	adds	r0, #1
 801841e:	d103      	bne.n	8018428 <_printf_common+0xac>
 8018420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018428:	3501      	adds	r5, #1
 801842a:	e7c6      	b.n	80183ba <_printf_common+0x3e>
 801842c:	18e1      	adds	r1, r4, r3
 801842e:	1c5a      	adds	r2, r3, #1
 8018430:	2030      	movs	r0, #48	; 0x30
 8018432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018436:	4422      	add	r2, r4
 8018438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801843c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018440:	3302      	adds	r3, #2
 8018442:	e7c7      	b.n	80183d4 <_printf_common+0x58>
 8018444:	2301      	movs	r3, #1
 8018446:	4622      	mov	r2, r4
 8018448:	4649      	mov	r1, r9
 801844a:	4638      	mov	r0, r7
 801844c:	47c0      	blx	r8
 801844e:	3001      	adds	r0, #1
 8018450:	d0e6      	beq.n	8018420 <_printf_common+0xa4>
 8018452:	3601      	adds	r6, #1
 8018454:	e7d9      	b.n	801840a <_printf_common+0x8e>
	...

08018458 <_printf_i>:
 8018458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801845c:	460c      	mov	r4, r1
 801845e:	4691      	mov	r9, r2
 8018460:	7e27      	ldrb	r7, [r4, #24]
 8018462:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018464:	2f78      	cmp	r7, #120	; 0x78
 8018466:	4680      	mov	r8, r0
 8018468:	469a      	mov	sl, r3
 801846a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801846e:	d807      	bhi.n	8018480 <_printf_i+0x28>
 8018470:	2f62      	cmp	r7, #98	; 0x62
 8018472:	d80a      	bhi.n	801848a <_printf_i+0x32>
 8018474:	2f00      	cmp	r7, #0
 8018476:	f000 80d8 	beq.w	801862a <_printf_i+0x1d2>
 801847a:	2f58      	cmp	r7, #88	; 0x58
 801847c:	f000 80a3 	beq.w	80185c6 <_printf_i+0x16e>
 8018480:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018488:	e03a      	b.n	8018500 <_printf_i+0xa8>
 801848a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801848e:	2b15      	cmp	r3, #21
 8018490:	d8f6      	bhi.n	8018480 <_printf_i+0x28>
 8018492:	a001      	add	r0, pc, #4	; (adr r0, 8018498 <_printf_i+0x40>)
 8018494:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018498:	080184f1 	.word	0x080184f1
 801849c:	08018505 	.word	0x08018505
 80184a0:	08018481 	.word	0x08018481
 80184a4:	08018481 	.word	0x08018481
 80184a8:	08018481 	.word	0x08018481
 80184ac:	08018481 	.word	0x08018481
 80184b0:	08018505 	.word	0x08018505
 80184b4:	08018481 	.word	0x08018481
 80184b8:	08018481 	.word	0x08018481
 80184bc:	08018481 	.word	0x08018481
 80184c0:	08018481 	.word	0x08018481
 80184c4:	08018611 	.word	0x08018611
 80184c8:	08018535 	.word	0x08018535
 80184cc:	080185f3 	.word	0x080185f3
 80184d0:	08018481 	.word	0x08018481
 80184d4:	08018481 	.word	0x08018481
 80184d8:	08018633 	.word	0x08018633
 80184dc:	08018481 	.word	0x08018481
 80184e0:	08018535 	.word	0x08018535
 80184e4:	08018481 	.word	0x08018481
 80184e8:	08018481 	.word	0x08018481
 80184ec:	080185fb 	.word	0x080185fb
 80184f0:	680b      	ldr	r3, [r1, #0]
 80184f2:	1d1a      	adds	r2, r3, #4
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	600a      	str	r2, [r1, #0]
 80184f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80184fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018500:	2301      	movs	r3, #1
 8018502:	e0a3      	b.n	801864c <_printf_i+0x1f4>
 8018504:	6825      	ldr	r5, [r4, #0]
 8018506:	6808      	ldr	r0, [r1, #0]
 8018508:	062e      	lsls	r6, r5, #24
 801850a:	f100 0304 	add.w	r3, r0, #4
 801850e:	d50a      	bpl.n	8018526 <_printf_i+0xce>
 8018510:	6805      	ldr	r5, [r0, #0]
 8018512:	600b      	str	r3, [r1, #0]
 8018514:	2d00      	cmp	r5, #0
 8018516:	da03      	bge.n	8018520 <_printf_i+0xc8>
 8018518:	232d      	movs	r3, #45	; 0x2d
 801851a:	426d      	negs	r5, r5
 801851c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018520:	485e      	ldr	r0, [pc, #376]	; (801869c <_printf_i+0x244>)
 8018522:	230a      	movs	r3, #10
 8018524:	e019      	b.n	801855a <_printf_i+0x102>
 8018526:	f015 0f40 	tst.w	r5, #64	; 0x40
 801852a:	6805      	ldr	r5, [r0, #0]
 801852c:	600b      	str	r3, [r1, #0]
 801852e:	bf18      	it	ne
 8018530:	b22d      	sxthne	r5, r5
 8018532:	e7ef      	b.n	8018514 <_printf_i+0xbc>
 8018534:	680b      	ldr	r3, [r1, #0]
 8018536:	6825      	ldr	r5, [r4, #0]
 8018538:	1d18      	adds	r0, r3, #4
 801853a:	6008      	str	r0, [r1, #0]
 801853c:	0628      	lsls	r0, r5, #24
 801853e:	d501      	bpl.n	8018544 <_printf_i+0xec>
 8018540:	681d      	ldr	r5, [r3, #0]
 8018542:	e002      	b.n	801854a <_printf_i+0xf2>
 8018544:	0669      	lsls	r1, r5, #25
 8018546:	d5fb      	bpl.n	8018540 <_printf_i+0xe8>
 8018548:	881d      	ldrh	r5, [r3, #0]
 801854a:	4854      	ldr	r0, [pc, #336]	; (801869c <_printf_i+0x244>)
 801854c:	2f6f      	cmp	r7, #111	; 0x6f
 801854e:	bf0c      	ite	eq
 8018550:	2308      	moveq	r3, #8
 8018552:	230a      	movne	r3, #10
 8018554:	2100      	movs	r1, #0
 8018556:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801855a:	6866      	ldr	r6, [r4, #4]
 801855c:	60a6      	str	r6, [r4, #8]
 801855e:	2e00      	cmp	r6, #0
 8018560:	bfa2      	ittt	ge
 8018562:	6821      	ldrge	r1, [r4, #0]
 8018564:	f021 0104 	bicge.w	r1, r1, #4
 8018568:	6021      	strge	r1, [r4, #0]
 801856a:	b90d      	cbnz	r5, 8018570 <_printf_i+0x118>
 801856c:	2e00      	cmp	r6, #0
 801856e:	d04d      	beq.n	801860c <_printf_i+0x1b4>
 8018570:	4616      	mov	r6, r2
 8018572:	fbb5 f1f3 	udiv	r1, r5, r3
 8018576:	fb03 5711 	mls	r7, r3, r1, r5
 801857a:	5dc7      	ldrb	r7, [r0, r7]
 801857c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018580:	462f      	mov	r7, r5
 8018582:	42bb      	cmp	r3, r7
 8018584:	460d      	mov	r5, r1
 8018586:	d9f4      	bls.n	8018572 <_printf_i+0x11a>
 8018588:	2b08      	cmp	r3, #8
 801858a:	d10b      	bne.n	80185a4 <_printf_i+0x14c>
 801858c:	6823      	ldr	r3, [r4, #0]
 801858e:	07df      	lsls	r7, r3, #31
 8018590:	d508      	bpl.n	80185a4 <_printf_i+0x14c>
 8018592:	6923      	ldr	r3, [r4, #16]
 8018594:	6861      	ldr	r1, [r4, #4]
 8018596:	4299      	cmp	r1, r3
 8018598:	bfde      	ittt	le
 801859a:	2330      	movle	r3, #48	; 0x30
 801859c:	f806 3c01 	strble.w	r3, [r6, #-1]
 80185a0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80185a4:	1b92      	subs	r2, r2, r6
 80185a6:	6122      	str	r2, [r4, #16]
 80185a8:	f8cd a000 	str.w	sl, [sp]
 80185ac:	464b      	mov	r3, r9
 80185ae:	aa03      	add	r2, sp, #12
 80185b0:	4621      	mov	r1, r4
 80185b2:	4640      	mov	r0, r8
 80185b4:	f7ff fee2 	bl	801837c <_printf_common>
 80185b8:	3001      	adds	r0, #1
 80185ba:	d14c      	bne.n	8018656 <_printf_i+0x1fe>
 80185bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80185c0:	b004      	add	sp, #16
 80185c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185c6:	4835      	ldr	r0, [pc, #212]	; (801869c <_printf_i+0x244>)
 80185c8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80185cc:	6823      	ldr	r3, [r4, #0]
 80185ce:	680e      	ldr	r6, [r1, #0]
 80185d0:	061f      	lsls	r7, r3, #24
 80185d2:	f856 5b04 	ldr.w	r5, [r6], #4
 80185d6:	600e      	str	r6, [r1, #0]
 80185d8:	d514      	bpl.n	8018604 <_printf_i+0x1ac>
 80185da:	07d9      	lsls	r1, r3, #31
 80185dc:	bf44      	itt	mi
 80185de:	f043 0320 	orrmi.w	r3, r3, #32
 80185e2:	6023      	strmi	r3, [r4, #0]
 80185e4:	b91d      	cbnz	r5, 80185ee <_printf_i+0x196>
 80185e6:	6823      	ldr	r3, [r4, #0]
 80185e8:	f023 0320 	bic.w	r3, r3, #32
 80185ec:	6023      	str	r3, [r4, #0]
 80185ee:	2310      	movs	r3, #16
 80185f0:	e7b0      	b.n	8018554 <_printf_i+0xfc>
 80185f2:	6823      	ldr	r3, [r4, #0]
 80185f4:	f043 0320 	orr.w	r3, r3, #32
 80185f8:	6023      	str	r3, [r4, #0]
 80185fa:	2378      	movs	r3, #120	; 0x78
 80185fc:	4828      	ldr	r0, [pc, #160]	; (80186a0 <_printf_i+0x248>)
 80185fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018602:	e7e3      	b.n	80185cc <_printf_i+0x174>
 8018604:	065e      	lsls	r6, r3, #25
 8018606:	bf48      	it	mi
 8018608:	b2ad      	uxthmi	r5, r5
 801860a:	e7e6      	b.n	80185da <_printf_i+0x182>
 801860c:	4616      	mov	r6, r2
 801860e:	e7bb      	b.n	8018588 <_printf_i+0x130>
 8018610:	680b      	ldr	r3, [r1, #0]
 8018612:	6826      	ldr	r6, [r4, #0]
 8018614:	6960      	ldr	r0, [r4, #20]
 8018616:	1d1d      	adds	r5, r3, #4
 8018618:	600d      	str	r5, [r1, #0]
 801861a:	0635      	lsls	r5, r6, #24
 801861c:	681b      	ldr	r3, [r3, #0]
 801861e:	d501      	bpl.n	8018624 <_printf_i+0x1cc>
 8018620:	6018      	str	r0, [r3, #0]
 8018622:	e002      	b.n	801862a <_printf_i+0x1d2>
 8018624:	0671      	lsls	r1, r6, #25
 8018626:	d5fb      	bpl.n	8018620 <_printf_i+0x1c8>
 8018628:	8018      	strh	r0, [r3, #0]
 801862a:	2300      	movs	r3, #0
 801862c:	6123      	str	r3, [r4, #16]
 801862e:	4616      	mov	r6, r2
 8018630:	e7ba      	b.n	80185a8 <_printf_i+0x150>
 8018632:	680b      	ldr	r3, [r1, #0]
 8018634:	1d1a      	adds	r2, r3, #4
 8018636:	600a      	str	r2, [r1, #0]
 8018638:	681e      	ldr	r6, [r3, #0]
 801863a:	6862      	ldr	r2, [r4, #4]
 801863c:	2100      	movs	r1, #0
 801863e:	4630      	mov	r0, r6
 8018640:	f7e7 fdce 	bl	80001e0 <memchr>
 8018644:	b108      	cbz	r0, 801864a <_printf_i+0x1f2>
 8018646:	1b80      	subs	r0, r0, r6
 8018648:	6060      	str	r0, [r4, #4]
 801864a:	6863      	ldr	r3, [r4, #4]
 801864c:	6123      	str	r3, [r4, #16]
 801864e:	2300      	movs	r3, #0
 8018650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018654:	e7a8      	b.n	80185a8 <_printf_i+0x150>
 8018656:	6923      	ldr	r3, [r4, #16]
 8018658:	4632      	mov	r2, r6
 801865a:	4649      	mov	r1, r9
 801865c:	4640      	mov	r0, r8
 801865e:	47d0      	blx	sl
 8018660:	3001      	adds	r0, #1
 8018662:	d0ab      	beq.n	80185bc <_printf_i+0x164>
 8018664:	6823      	ldr	r3, [r4, #0]
 8018666:	079b      	lsls	r3, r3, #30
 8018668:	d413      	bmi.n	8018692 <_printf_i+0x23a>
 801866a:	68e0      	ldr	r0, [r4, #12]
 801866c:	9b03      	ldr	r3, [sp, #12]
 801866e:	4298      	cmp	r0, r3
 8018670:	bfb8      	it	lt
 8018672:	4618      	movlt	r0, r3
 8018674:	e7a4      	b.n	80185c0 <_printf_i+0x168>
 8018676:	2301      	movs	r3, #1
 8018678:	4632      	mov	r2, r6
 801867a:	4649      	mov	r1, r9
 801867c:	4640      	mov	r0, r8
 801867e:	47d0      	blx	sl
 8018680:	3001      	adds	r0, #1
 8018682:	d09b      	beq.n	80185bc <_printf_i+0x164>
 8018684:	3501      	adds	r5, #1
 8018686:	68e3      	ldr	r3, [r4, #12]
 8018688:	9903      	ldr	r1, [sp, #12]
 801868a:	1a5b      	subs	r3, r3, r1
 801868c:	42ab      	cmp	r3, r5
 801868e:	dcf2      	bgt.n	8018676 <_printf_i+0x21e>
 8018690:	e7eb      	b.n	801866a <_printf_i+0x212>
 8018692:	2500      	movs	r5, #0
 8018694:	f104 0619 	add.w	r6, r4, #25
 8018698:	e7f5      	b.n	8018686 <_printf_i+0x22e>
 801869a:	bf00      	nop
 801869c:	0801f406 	.word	0x0801f406
 80186a0:	0801f417 	.word	0x0801f417

080186a4 <cleanup_glue>:
 80186a4:	b538      	push	{r3, r4, r5, lr}
 80186a6:	460c      	mov	r4, r1
 80186a8:	6809      	ldr	r1, [r1, #0]
 80186aa:	4605      	mov	r5, r0
 80186ac:	b109      	cbz	r1, 80186b2 <cleanup_glue+0xe>
 80186ae:	f7ff fff9 	bl	80186a4 <cleanup_glue>
 80186b2:	4621      	mov	r1, r4
 80186b4:	4628      	mov	r0, r5
 80186b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186ba:	f7ff badf 	b.w	8017c7c <_free_r>
	...

080186c0 <_reclaim_reent>:
 80186c0:	4b2c      	ldr	r3, [pc, #176]	; (8018774 <_reclaim_reent+0xb4>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	4283      	cmp	r3, r0
 80186c6:	b570      	push	{r4, r5, r6, lr}
 80186c8:	4604      	mov	r4, r0
 80186ca:	d051      	beq.n	8018770 <_reclaim_reent+0xb0>
 80186cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80186ce:	b143      	cbz	r3, 80186e2 <_reclaim_reent+0x22>
 80186d0:	68db      	ldr	r3, [r3, #12]
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d14a      	bne.n	801876c <_reclaim_reent+0xac>
 80186d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186d8:	6819      	ldr	r1, [r3, #0]
 80186da:	b111      	cbz	r1, 80186e2 <_reclaim_reent+0x22>
 80186dc:	4620      	mov	r0, r4
 80186de:	f7ff facd 	bl	8017c7c <_free_r>
 80186e2:	6961      	ldr	r1, [r4, #20]
 80186e4:	b111      	cbz	r1, 80186ec <_reclaim_reent+0x2c>
 80186e6:	4620      	mov	r0, r4
 80186e8:	f7ff fac8 	bl	8017c7c <_free_r>
 80186ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80186ee:	b111      	cbz	r1, 80186f6 <_reclaim_reent+0x36>
 80186f0:	4620      	mov	r0, r4
 80186f2:	f7ff fac3 	bl	8017c7c <_free_r>
 80186f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186f8:	b111      	cbz	r1, 8018700 <_reclaim_reent+0x40>
 80186fa:	4620      	mov	r0, r4
 80186fc:	f7ff fabe 	bl	8017c7c <_free_r>
 8018700:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018702:	b111      	cbz	r1, 801870a <_reclaim_reent+0x4a>
 8018704:	4620      	mov	r0, r4
 8018706:	f7ff fab9 	bl	8017c7c <_free_r>
 801870a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801870c:	b111      	cbz	r1, 8018714 <_reclaim_reent+0x54>
 801870e:	4620      	mov	r0, r4
 8018710:	f7ff fab4 	bl	8017c7c <_free_r>
 8018714:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018716:	b111      	cbz	r1, 801871e <_reclaim_reent+0x5e>
 8018718:	4620      	mov	r0, r4
 801871a:	f7ff faaf 	bl	8017c7c <_free_r>
 801871e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018720:	b111      	cbz	r1, 8018728 <_reclaim_reent+0x68>
 8018722:	4620      	mov	r0, r4
 8018724:	f7ff faaa 	bl	8017c7c <_free_r>
 8018728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801872a:	b111      	cbz	r1, 8018732 <_reclaim_reent+0x72>
 801872c:	4620      	mov	r0, r4
 801872e:	f7ff faa5 	bl	8017c7c <_free_r>
 8018732:	69a3      	ldr	r3, [r4, #24]
 8018734:	b1e3      	cbz	r3, 8018770 <_reclaim_reent+0xb0>
 8018736:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018738:	4620      	mov	r0, r4
 801873a:	4798      	blx	r3
 801873c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801873e:	b1b9      	cbz	r1, 8018770 <_reclaim_reent+0xb0>
 8018740:	4620      	mov	r0, r4
 8018742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018746:	f7ff bfad 	b.w	80186a4 <cleanup_glue>
 801874a:	5949      	ldr	r1, [r1, r5]
 801874c:	b941      	cbnz	r1, 8018760 <_reclaim_reent+0xa0>
 801874e:	3504      	adds	r5, #4
 8018750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018752:	2d80      	cmp	r5, #128	; 0x80
 8018754:	68d9      	ldr	r1, [r3, #12]
 8018756:	d1f8      	bne.n	801874a <_reclaim_reent+0x8a>
 8018758:	4620      	mov	r0, r4
 801875a:	f7ff fa8f 	bl	8017c7c <_free_r>
 801875e:	e7ba      	b.n	80186d6 <_reclaim_reent+0x16>
 8018760:	680e      	ldr	r6, [r1, #0]
 8018762:	4620      	mov	r0, r4
 8018764:	f7ff fa8a 	bl	8017c7c <_free_r>
 8018768:	4631      	mov	r1, r6
 801876a:	e7ef      	b.n	801874c <_reclaim_reent+0x8c>
 801876c:	2500      	movs	r5, #0
 801876e:	e7ef      	b.n	8018750 <_reclaim_reent+0x90>
 8018770:	bd70      	pop	{r4, r5, r6, pc}
 8018772:	bf00      	nop
 8018774:	200001c8 	.word	0x200001c8

08018778 <_sbrk_r>:
 8018778:	b538      	push	{r3, r4, r5, lr}
 801877a:	4d06      	ldr	r5, [pc, #24]	; (8018794 <_sbrk_r+0x1c>)
 801877c:	2300      	movs	r3, #0
 801877e:	4604      	mov	r4, r0
 8018780:	4608      	mov	r0, r1
 8018782:	602b      	str	r3, [r5, #0]
 8018784:	f7ec fb92 	bl	8004eac <_sbrk>
 8018788:	1c43      	adds	r3, r0, #1
 801878a:	d102      	bne.n	8018792 <_sbrk_r+0x1a>
 801878c:	682b      	ldr	r3, [r5, #0]
 801878e:	b103      	cbz	r3, 8018792 <_sbrk_r+0x1a>
 8018790:	6023      	str	r3, [r4, #0]
 8018792:	bd38      	pop	{r3, r4, r5, pc}
 8018794:	2001498c 	.word	0x2001498c

08018798 <siprintf>:
 8018798:	b40e      	push	{r1, r2, r3}
 801879a:	b500      	push	{lr}
 801879c:	b09c      	sub	sp, #112	; 0x70
 801879e:	ab1d      	add	r3, sp, #116	; 0x74
 80187a0:	9002      	str	r0, [sp, #8]
 80187a2:	9006      	str	r0, [sp, #24]
 80187a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80187a8:	4809      	ldr	r0, [pc, #36]	; (80187d0 <siprintf+0x38>)
 80187aa:	9107      	str	r1, [sp, #28]
 80187ac:	9104      	str	r1, [sp, #16]
 80187ae:	4909      	ldr	r1, [pc, #36]	; (80187d4 <siprintf+0x3c>)
 80187b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80187b4:	9105      	str	r1, [sp, #20]
 80187b6:	6800      	ldr	r0, [r0, #0]
 80187b8:	9301      	str	r3, [sp, #4]
 80187ba:	a902      	add	r1, sp, #8
 80187bc:	f001 fc10 	bl	8019fe0 <_svfiprintf_r>
 80187c0:	9b02      	ldr	r3, [sp, #8]
 80187c2:	2200      	movs	r2, #0
 80187c4:	701a      	strb	r2, [r3, #0]
 80187c6:	b01c      	add	sp, #112	; 0x70
 80187c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80187cc:	b003      	add	sp, #12
 80187ce:	4770      	bx	lr
 80187d0:	200001c8 	.word	0x200001c8
 80187d4:	ffff0208 	.word	0xffff0208

080187d8 <__sread>:
 80187d8:	b510      	push	{r4, lr}
 80187da:	460c      	mov	r4, r1
 80187dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80187e0:	f001 fcfe 	bl	801a1e0 <_read_r>
 80187e4:	2800      	cmp	r0, #0
 80187e6:	bfab      	itete	ge
 80187e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80187ea:	89a3      	ldrhlt	r3, [r4, #12]
 80187ec:	181b      	addge	r3, r3, r0
 80187ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80187f2:	bfac      	ite	ge
 80187f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80187f6:	81a3      	strhlt	r3, [r4, #12]
 80187f8:	bd10      	pop	{r4, pc}

080187fa <__swrite>:
 80187fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187fe:	461f      	mov	r7, r3
 8018800:	898b      	ldrh	r3, [r1, #12]
 8018802:	05db      	lsls	r3, r3, #23
 8018804:	4605      	mov	r5, r0
 8018806:	460c      	mov	r4, r1
 8018808:	4616      	mov	r6, r2
 801880a:	d505      	bpl.n	8018818 <__swrite+0x1e>
 801880c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018810:	2302      	movs	r3, #2
 8018812:	2200      	movs	r2, #0
 8018814:	f000 ffde 	bl	80197d4 <_lseek_r>
 8018818:	89a3      	ldrh	r3, [r4, #12]
 801881a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801881e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018822:	81a3      	strh	r3, [r4, #12]
 8018824:	4632      	mov	r2, r6
 8018826:	463b      	mov	r3, r7
 8018828:	4628      	mov	r0, r5
 801882a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801882e:	f000 b86f 	b.w	8018910 <_write_r>

08018832 <__sseek>:
 8018832:	b510      	push	{r4, lr}
 8018834:	460c      	mov	r4, r1
 8018836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801883a:	f000 ffcb 	bl	80197d4 <_lseek_r>
 801883e:	1c43      	adds	r3, r0, #1
 8018840:	89a3      	ldrh	r3, [r4, #12]
 8018842:	bf15      	itete	ne
 8018844:	6560      	strne	r0, [r4, #84]	; 0x54
 8018846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801884a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801884e:	81a3      	strheq	r3, [r4, #12]
 8018850:	bf18      	it	ne
 8018852:	81a3      	strhne	r3, [r4, #12]
 8018854:	bd10      	pop	{r4, pc}

08018856 <__sclose>:
 8018856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801885a:	f000 b86b 	b.w	8018934 <_close_r>

0801885e <strcat>:
 801885e:	b510      	push	{r4, lr}
 8018860:	4602      	mov	r2, r0
 8018862:	7814      	ldrb	r4, [r2, #0]
 8018864:	4613      	mov	r3, r2
 8018866:	3201      	adds	r2, #1
 8018868:	2c00      	cmp	r4, #0
 801886a:	d1fa      	bne.n	8018862 <strcat+0x4>
 801886c:	3b01      	subs	r3, #1
 801886e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018876:	2a00      	cmp	r2, #0
 8018878:	d1f9      	bne.n	801886e <strcat+0x10>
 801887a:	bd10      	pop	{r4, pc}

0801887c <strcpy>:
 801887c:	4603      	mov	r3, r0
 801887e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018882:	f803 2b01 	strb.w	r2, [r3], #1
 8018886:	2a00      	cmp	r2, #0
 8018888:	d1f9      	bne.n	801887e <strcpy+0x2>
 801888a:	4770      	bx	lr

0801888c <__utoa>:
 801888c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801888e:	4c1f      	ldr	r4, [pc, #124]	; (801890c <__utoa+0x80>)
 8018890:	b08b      	sub	sp, #44	; 0x2c
 8018892:	4605      	mov	r5, r0
 8018894:	460b      	mov	r3, r1
 8018896:	466e      	mov	r6, sp
 8018898:	f104 0c20 	add.w	ip, r4, #32
 801889c:	6820      	ldr	r0, [r4, #0]
 801889e:	6861      	ldr	r1, [r4, #4]
 80188a0:	4637      	mov	r7, r6
 80188a2:	c703      	stmia	r7!, {r0, r1}
 80188a4:	3408      	adds	r4, #8
 80188a6:	4564      	cmp	r4, ip
 80188a8:	463e      	mov	r6, r7
 80188aa:	d1f7      	bne.n	801889c <__utoa+0x10>
 80188ac:	7921      	ldrb	r1, [r4, #4]
 80188ae:	7139      	strb	r1, [r7, #4]
 80188b0:	1e91      	subs	r1, r2, #2
 80188b2:	6820      	ldr	r0, [r4, #0]
 80188b4:	6038      	str	r0, [r7, #0]
 80188b6:	2922      	cmp	r1, #34	; 0x22
 80188b8:	f04f 0100 	mov.w	r1, #0
 80188bc:	d904      	bls.n	80188c8 <__utoa+0x3c>
 80188be:	7019      	strb	r1, [r3, #0]
 80188c0:	460b      	mov	r3, r1
 80188c2:	4618      	mov	r0, r3
 80188c4:	b00b      	add	sp, #44	; 0x2c
 80188c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80188c8:	1e58      	subs	r0, r3, #1
 80188ca:	4684      	mov	ip, r0
 80188cc:	fbb5 f7f2 	udiv	r7, r5, r2
 80188d0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80188d4:	fb02 5617 	mls	r6, r2, r7, r5
 80188d8:	4476      	add	r6, lr
 80188da:	460c      	mov	r4, r1
 80188dc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80188e0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80188e4:	462e      	mov	r6, r5
 80188e6:	42b2      	cmp	r2, r6
 80188e8:	f101 0101 	add.w	r1, r1, #1
 80188ec:	463d      	mov	r5, r7
 80188ee:	d9ed      	bls.n	80188cc <__utoa+0x40>
 80188f0:	2200      	movs	r2, #0
 80188f2:	545a      	strb	r2, [r3, r1]
 80188f4:	1919      	adds	r1, r3, r4
 80188f6:	1aa5      	subs	r5, r4, r2
 80188f8:	42aa      	cmp	r2, r5
 80188fa:	dae2      	bge.n	80188c2 <__utoa+0x36>
 80188fc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8018900:	780e      	ldrb	r6, [r1, #0]
 8018902:	7006      	strb	r6, [r0, #0]
 8018904:	3201      	adds	r2, #1
 8018906:	f801 5901 	strb.w	r5, [r1], #-1
 801890a:	e7f4      	b.n	80188f6 <__utoa+0x6a>
 801890c:	0801f428 	.word	0x0801f428

08018910 <_write_r>:
 8018910:	b538      	push	{r3, r4, r5, lr}
 8018912:	4d07      	ldr	r5, [pc, #28]	; (8018930 <_write_r+0x20>)
 8018914:	4604      	mov	r4, r0
 8018916:	4608      	mov	r0, r1
 8018918:	4611      	mov	r1, r2
 801891a:	2200      	movs	r2, #0
 801891c:	602a      	str	r2, [r5, #0]
 801891e:	461a      	mov	r2, r3
 8018920:	f7ec fa73 	bl	8004e0a <_write>
 8018924:	1c43      	adds	r3, r0, #1
 8018926:	d102      	bne.n	801892e <_write_r+0x1e>
 8018928:	682b      	ldr	r3, [r5, #0]
 801892a:	b103      	cbz	r3, 801892e <_write_r+0x1e>
 801892c:	6023      	str	r3, [r4, #0]
 801892e:	bd38      	pop	{r3, r4, r5, pc}
 8018930:	2001498c 	.word	0x2001498c

08018934 <_close_r>:
 8018934:	b538      	push	{r3, r4, r5, lr}
 8018936:	4d06      	ldr	r5, [pc, #24]	; (8018950 <_close_r+0x1c>)
 8018938:	2300      	movs	r3, #0
 801893a:	4604      	mov	r4, r0
 801893c:	4608      	mov	r0, r1
 801893e:	602b      	str	r3, [r5, #0]
 8018940:	f7ec fa7f 	bl	8004e42 <_close>
 8018944:	1c43      	adds	r3, r0, #1
 8018946:	d102      	bne.n	801894e <_close_r+0x1a>
 8018948:	682b      	ldr	r3, [r5, #0]
 801894a:	b103      	cbz	r3, 801894e <_close_r+0x1a>
 801894c:	6023      	str	r3, [r4, #0]
 801894e:	bd38      	pop	{r3, r4, r5, pc}
 8018950:	2001498c 	.word	0x2001498c

08018954 <quorem>:
 8018954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018958:	6903      	ldr	r3, [r0, #16]
 801895a:	690c      	ldr	r4, [r1, #16]
 801895c:	42a3      	cmp	r3, r4
 801895e:	4607      	mov	r7, r0
 8018960:	f2c0 8081 	blt.w	8018a66 <quorem+0x112>
 8018964:	3c01      	subs	r4, #1
 8018966:	f101 0814 	add.w	r8, r1, #20
 801896a:	f100 0514 	add.w	r5, r0, #20
 801896e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018972:	9301      	str	r3, [sp, #4]
 8018974:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018978:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801897c:	3301      	adds	r3, #1
 801897e:	429a      	cmp	r2, r3
 8018980:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018984:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018988:	fbb2 f6f3 	udiv	r6, r2, r3
 801898c:	d331      	bcc.n	80189f2 <quorem+0x9e>
 801898e:	f04f 0e00 	mov.w	lr, #0
 8018992:	4640      	mov	r0, r8
 8018994:	46ac      	mov	ip, r5
 8018996:	46f2      	mov	sl, lr
 8018998:	f850 2b04 	ldr.w	r2, [r0], #4
 801899c:	b293      	uxth	r3, r2
 801899e:	fb06 e303 	mla	r3, r6, r3, lr
 80189a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80189a6:	b29b      	uxth	r3, r3
 80189a8:	ebaa 0303 	sub.w	r3, sl, r3
 80189ac:	0c12      	lsrs	r2, r2, #16
 80189ae:	f8dc a000 	ldr.w	sl, [ip]
 80189b2:	fb06 e202 	mla	r2, r6, r2, lr
 80189b6:	fa13 f38a 	uxtah	r3, r3, sl
 80189ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80189be:	fa1f fa82 	uxth.w	sl, r2
 80189c2:	f8dc 2000 	ldr.w	r2, [ip]
 80189c6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80189ca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80189ce:	b29b      	uxth	r3, r3
 80189d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80189d4:	4581      	cmp	r9, r0
 80189d6:	f84c 3b04 	str.w	r3, [ip], #4
 80189da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80189de:	d2db      	bcs.n	8018998 <quorem+0x44>
 80189e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80189e4:	b92b      	cbnz	r3, 80189f2 <quorem+0x9e>
 80189e6:	9b01      	ldr	r3, [sp, #4]
 80189e8:	3b04      	subs	r3, #4
 80189ea:	429d      	cmp	r5, r3
 80189ec:	461a      	mov	r2, r3
 80189ee:	d32e      	bcc.n	8018a4e <quorem+0xfa>
 80189f0:	613c      	str	r4, [r7, #16]
 80189f2:	4638      	mov	r0, r7
 80189f4:	f001 f98a 	bl	8019d0c <__mcmp>
 80189f8:	2800      	cmp	r0, #0
 80189fa:	db24      	blt.n	8018a46 <quorem+0xf2>
 80189fc:	3601      	adds	r6, #1
 80189fe:	4628      	mov	r0, r5
 8018a00:	f04f 0c00 	mov.w	ip, #0
 8018a04:	f858 2b04 	ldr.w	r2, [r8], #4
 8018a08:	f8d0 e000 	ldr.w	lr, [r0]
 8018a0c:	b293      	uxth	r3, r2
 8018a0e:	ebac 0303 	sub.w	r3, ip, r3
 8018a12:	0c12      	lsrs	r2, r2, #16
 8018a14:	fa13 f38e 	uxtah	r3, r3, lr
 8018a18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018a1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018a20:	b29b      	uxth	r3, r3
 8018a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018a26:	45c1      	cmp	r9, r8
 8018a28:	f840 3b04 	str.w	r3, [r0], #4
 8018a2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018a30:	d2e8      	bcs.n	8018a04 <quorem+0xb0>
 8018a32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018a36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018a3a:	b922      	cbnz	r2, 8018a46 <quorem+0xf2>
 8018a3c:	3b04      	subs	r3, #4
 8018a3e:	429d      	cmp	r5, r3
 8018a40:	461a      	mov	r2, r3
 8018a42:	d30a      	bcc.n	8018a5a <quorem+0x106>
 8018a44:	613c      	str	r4, [r7, #16]
 8018a46:	4630      	mov	r0, r6
 8018a48:	b003      	add	sp, #12
 8018a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4e:	6812      	ldr	r2, [r2, #0]
 8018a50:	3b04      	subs	r3, #4
 8018a52:	2a00      	cmp	r2, #0
 8018a54:	d1cc      	bne.n	80189f0 <quorem+0x9c>
 8018a56:	3c01      	subs	r4, #1
 8018a58:	e7c7      	b.n	80189ea <quorem+0x96>
 8018a5a:	6812      	ldr	r2, [r2, #0]
 8018a5c:	3b04      	subs	r3, #4
 8018a5e:	2a00      	cmp	r2, #0
 8018a60:	d1f0      	bne.n	8018a44 <quorem+0xf0>
 8018a62:	3c01      	subs	r4, #1
 8018a64:	e7eb      	b.n	8018a3e <quorem+0xea>
 8018a66:	2000      	movs	r0, #0
 8018a68:	e7ee      	b.n	8018a48 <quorem+0xf4>
 8018a6a:	0000      	movs	r0, r0
 8018a6c:	0000      	movs	r0, r0
	...

08018a70 <_dtoa_r>:
 8018a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a74:	ed2d 8b02 	vpush	{d8}
 8018a78:	ec57 6b10 	vmov	r6, r7, d0
 8018a7c:	b095      	sub	sp, #84	; 0x54
 8018a7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018a80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018a84:	9105      	str	r1, [sp, #20]
 8018a86:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	9209      	str	r2, [sp, #36]	; 0x24
 8018a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018a90:	b975      	cbnz	r5, 8018ab0 <_dtoa_r+0x40>
 8018a92:	2010      	movs	r0, #16
 8018a94:	f7ff f8cc 	bl	8017c30 <malloc>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	6260      	str	r0, [r4, #36]	; 0x24
 8018a9c:	b920      	cbnz	r0, 8018aa8 <_dtoa_r+0x38>
 8018a9e:	4bb2      	ldr	r3, [pc, #712]	; (8018d68 <_dtoa_r+0x2f8>)
 8018aa0:	21ea      	movs	r1, #234	; 0xea
 8018aa2:	48b2      	ldr	r0, [pc, #712]	; (8018d6c <_dtoa_r+0x2fc>)
 8018aa4:	f001 fbae 	bl	801a204 <__assert_func>
 8018aa8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018aac:	6005      	str	r5, [r0, #0]
 8018aae:	60c5      	str	r5, [r0, #12]
 8018ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ab2:	6819      	ldr	r1, [r3, #0]
 8018ab4:	b151      	cbz	r1, 8018acc <_dtoa_r+0x5c>
 8018ab6:	685a      	ldr	r2, [r3, #4]
 8018ab8:	604a      	str	r2, [r1, #4]
 8018aba:	2301      	movs	r3, #1
 8018abc:	4093      	lsls	r3, r2
 8018abe:	608b      	str	r3, [r1, #8]
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	f000 fee5 	bl	8019890 <_Bfree>
 8018ac6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018ac8:	2200      	movs	r2, #0
 8018aca:	601a      	str	r2, [r3, #0]
 8018acc:	1e3b      	subs	r3, r7, #0
 8018ace:	bfb9      	ittee	lt
 8018ad0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018ad4:	9303      	strlt	r3, [sp, #12]
 8018ad6:	2300      	movge	r3, #0
 8018ad8:	f8c8 3000 	strge.w	r3, [r8]
 8018adc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018ae0:	4ba3      	ldr	r3, [pc, #652]	; (8018d70 <_dtoa_r+0x300>)
 8018ae2:	bfbc      	itt	lt
 8018ae4:	2201      	movlt	r2, #1
 8018ae6:	f8c8 2000 	strlt.w	r2, [r8]
 8018aea:	ea33 0309 	bics.w	r3, r3, r9
 8018aee:	d11b      	bne.n	8018b28 <_dtoa_r+0xb8>
 8018af0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018af2:	f242 730f 	movw	r3, #9999	; 0x270f
 8018af6:	6013      	str	r3, [r2, #0]
 8018af8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018afc:	4333      	orrs	r3, r6
 8018afe:	f000 857a 	beq.w	80195f6 <_dtoa_r+0xb86>
 8018b02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b04:	b963      	cbnz	r3, 8018b20 <_dtoa_r+0xb0>
 8018b06:	4b9b      	ldr	r3, [pc, #620]	; (8018d74 <_dtoa_r+0x304>)
 8018b08:	e024      	b.n	8018b54 <_dtoa_r+0xe4>
 8018b0a:	4b9b      	ldr	r3, [pc, #620]	; (8018d78 <_dtoa_r+0x308>)
 8018b0c:	9300      	str	r3, [sp, #0]
 8018b0e:	3308      	adds	r3, #8
 8018b10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018b12:	6013      	str	r3, [r2, #0]
 8018b14:	9800      	ldr	r0, [sp, #0]
 8018b16:	b015      	add	sp, #84	; 0x54
 8018b18:	ecbd 8b02 	vpop	{d8}
 8018b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b20:	4b94      	ldr	r3, [pc, #592]	; (8018d74 <_dtoa_r+0x304>)
 8018b22:	9300      	str	r3, [sp, #0]
 8018b24:	3303      	adds	r3, #3
 8018b26:	e7f3      	b.n	8018b10 <_dtoa_r+0xa0>
 8018b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018b2c:	2200      	movs	r2, #0
 8018b2e:	ec51 0b17 	vmov	r0, r1, d7
 8018b32:	2300      	movs	r3, #0
 8018b34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018b38:	f7e7 ffc6 	bl	8000ac8 <__aeabi_dcmpeq>
 8018b3c:	4680      	mov	r8, r0
 8018b3e:	b158      	cbz	r0, 8018b58 <_dtoa_r+0xe8>
 8018b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018b42:	2301      	movs	r3, #1
 8018b44:	6013      	str	r3, [r2, #0]
 8018b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	f000 8551 	beq.w	80195f0 <_dtoa_r+0xb80>
 8018b4e:	488b      	ldr	r0, [pc, #556]	; (8018d7c <_dtoa_r+0x30c>)
 8018b50:	6018      	str	r0, [r3, #0]
 8018b52:	1e43      	subs	r3, r0, #1
 8018b54:	9300      	str	r3, [sp, #0]
 8018b56:	e7dd      	b.n	8018b14 <_dtoa_r+0xa4>
 8018b58:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018b5c:	aa12      	add	r2, sp, #72	; 0x48
 8018b5e:	a913      	add	r1, sp, #76	; 0x4c
 8018b60:	4620      	mov	r0, r4
 8018b62:	f001 f977 	bl	8019e54 <__d2b>
 8018b66:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018b6a:	4683      	mov	fp, r0
 8018b6c:	2d00      	cmp	r5, #0
 8018b6e:	d07c      	beq.n	8018c6a <_dtoa_r+0x1fa>
 8018b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018b72:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018b7a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018b7e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018b82:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018b86:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018b8a:	4b7d      	ldr	r3, [pc, #500]	; (8018d80 <_dtoa_r+0x310>)
 8018b8c:	2200      	movs	r2, #0
 8018b8e:	4630      	mov	r0, r6
 8018b90:	4639      	mov	r1, r7
 8018b92:	f7e7 fb79 	bl	8000288 <__aeabi_dsub>
 8018b96:	a36e      	add	r3, pc, #440	; (adr r3, 8018d50 <_dtoa_r+0x2e0>)
 8018b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b9c:	f7e7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8018ba0:	a36d      	add	r3, pc, #436	; (adr r3, 8018d58 <_dtoa_r+0x2e8>)
 8018ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ba6:	f7e7 fb71 	bl	800028c <__adddf3>
 8018baa:	4606      	mov	r6, r0
 8018bac:	4628      	mov	r0, r5
 8018bae:	460f      	mov	r7, r1
 8018bb0:	f7e7 fcb8 	bl	8000524 <__aeabi_i2d>
 8018bb4:	a36a      	add	r3, pc, #424	; (adr r3, 8018d60 <_dtoa_r+0x2f0>)
 8018bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bba:	f7e7 fd1d 	bl	80005f8 <__aeabi_dmul>
 8018bbe:	4602      	mov	r2, r0
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	4639      	mov	r1, r7
 8018bc6:	f7e7 fb61 	bl	800028c <__adddf3>
 8018bca:	4606      	mov	r6, r0
 8018bcc:	460f      	mov	r7, r1
 8018bce:	f7e7 ffc3 	bl	8000b58 <__aeabi_d2iz>
 8018bd2:	2200      	movs	r2, #0
 8018bd4:	4682      	mov	sl, r0
 8018bd6:	2300      	movs	r3, #0
 8018bd8:	4630      	mov	r0, r6
 8018bda:	4639      	mov	r1, r7
 8018bdc:	f7e7 ff7e 	bl	8000adc <__aeabi_dcmplt>
 8018be0:	b148      	cbz	r0, 8018bf6 <_dtoa_r+0x186>
 8018be2:	4650      	mov	r0, sl
 8018be4:	f7e7 fc9e 	bl	8000524 <__aeabi_i2d>
 8018be8:	4632      	mov	r2, r6
 8018bea:	463b      	mov	r3, r7
 8018bec:	f7e7 ff6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018bf0:	b908      	cbnz	r0, 8018bf6 <_dtoa_r+0x186>
 8018bf2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018bf6:	f1ba 0f16 	cmp.w	sl, #22
 8018bfa:	d854      	bhi.n	8018ca6 <_dtoa_r+0x236>
 8018bfc:	4b61      	ldr	r3, [pc, #388]	; (8018d84 <_dtoa_r+0x314>)
 8018bfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018c0a:	f7e7 ff67 	bl	8000adc <__aeabi_dcmplt>
 8018c0e:	2800      	cmp	r0, #0
 8018c10:	d04b      	beq.n	8018caa <_dtoa_r+0x23a>
 8018c12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018c16:	2300      	movs	r3, #0
 8018c18:	930e      	str	r3, [sp, #56]	; 0x38
 8018c1a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018c1c:	1b5d      	subs	r5, r3, r5
 8018c1e:	1e6b      	subs	r3, r5, #1
 8018c20:	9304      	str	r3, [sp, #16]
 8018c22:	bf43      	ittte	mi
 8018c24:	2300      	movmi	r3, #0
 8018c26:	f1c5 0801 	rsbmi	r8, r5, #1
 8018c2a:	9304      	strmi	r3, [sp, #16]
 8018c2c:	f04f 0800 	movpl.w	r8, #0
 8018c30:	f1ba 0f00 	cmp.w	sl, #0
 8018c34:	db3b      	blt.n	8018cae <_dtoa_r+0x23e>
 8018c36:	9b04      	ldr	r3, [sp, #16]
 8018c38:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018c3c:	4453      	add	r3, sl
 8018c3e:	9304      	str	r3, [sp, #16]
 8018c40:	2300      	movs	r3, #0
 8018c42:	9306      	str	r3, [sp, #24]
 8018c44:	9b05      	ldr	r3, [sp, #20]
 8018c46:	2b09      	cmp	r3, #9
 8018c48:	d869      	bhi.n	8018d1e <_dtoa_r+0x2ae>
 8018c4a:	2b05      	cmp	r3, #5
 8018c4c:	bfc4      	itt	gt
 8018c4e:	3b04      	subgt	r3, #4
 8018c50:	9305      	strgt	r3, [sp, #20]
 8018c52:	9b05      	ldr	r3, [sp, #20]
 8018c54:	f1a3 0302 	sub.w	r3, r3, #2
 8018c58:	bfcc      	ite	gt
 8018c5a:	2500      	movgt	r5, #0
 8018c5c:	2501      	movle	r5, #1
 8018c5e:	2b03      	cmp	r3, #3
 8018c60:	d869      	bhi.n	8018d36 <_dtoa_r+0x2c6>
 8018c62:	e8df f003 	tbb	[pc, r3]
 8018c66:	4e2c      	.short	0x4e2c
 8018c68:	5a4c      	.short	0x5a4c
 8018c6a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018c6e:	441d      	add	r5, r3
 8018c70:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018c74:	2b20      	cmp	r3, #32
 8018c76:	bfc1      	itttt	gt
 8018c78:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018c7c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018c80:	fa09 f303 	lslgt.w	r3, r9, r3
 8018c84:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018c88:	bfda      	itte	le
 8018c8a:	f1c3 0320 	rsble	r3, r3, #32
 8018c8e:	fa06 f003 	lslle.w	r0, r6, r3
 8018c92:	4318      	orrgt	r0, r3
 8018c94:	f7e7 fc36 	bl	8000504 <__aeabi_ui2d>
 8018c98:	2301      	movs	r3, #1
 8018c9a:	4606      	mov	r6, r0
 8018c9c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8018ca0:	3d01      	subs	r5, #1
 8018ca2:	9310      	str	r3, [sp, #64]	; 0x40
 8018ca4:	e771      	b.n	8018b8a <_dtoa_r+0x11a>
 8018ca6:	2301      	movs	r3, #1
 8018ca8:	e7b6      	b.n	8018c18 <_dtoa_r+0x1a8>
 8018caa:	900e      	str	r0, [sp, #56]	; 0x38
 8018cac:	e7b5      	b.n	8018c1a <_dtoa_r+0x1aa>
 8018cae:	f1ca 0300 	rsb	r3, sl, #0
 8018cb2:	9306      	str	r3, [sp, #24]
 8018cb4:	2300      	movs	r3, #0
 8018cb6:	eba8 080a 	sub.w	r8, r8, sl
 8018cba:	930d      	str	r3, [sp, #52]	; 0x34
 8018cbc:	e7c2      	b.n	8018c44 <_dtoa_r+0x1d4>
 8018cbe:	2300      	movs	r3, #0
 8018cc0:	9308      	str	r3, [sp, #32]
 8018cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cc4:	2b00      	cmp	r3, #0
 8018cc6:	dc39      	bgt.n	8018d3c <_dtoa_r+0x2cc>
 8018cc8:	f04f 0901 	mov.w	r9, #1
 8018ccc:	f8cd 9004 	str.w	r9, [sp, #4]
 8018cd0:	464b      	mov	r3, r9
 8018cd2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018cd6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018cd8:	2200      	movs	r2, #0
 8018cda:	6042      	str	r2, [r0, #4]
 8018cdc:	2204      	movs	r2, #4
 8018cde:	f102 0614 	add.w	r6, r2, #20
 8018ce2:	429e      	cmp	r6, r3
 8018ce4:	6841      	ldr	r1, [r0, #4]
 8018ce6:	d92f      	bls.n	8018d48 <_dtoa_r+0x2d8>
 8018ce8:	4620      	mov	r0, r4
 8018cea:	f000 fd91 	bl	8019810 <_Balloc>
 8018cee:	9000      	str	r0, [sp, #0]
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	d14b      	bne.n	8018d8c <_dtoa_r+0x31c>
 8018cf4:	4b24      	ldr	r3, [pc, #144]	; (8018d88 <_dtoa_r+0x318>)
 8018cf6:	4602      	mov	r2, r0
 8018cf8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018cfc:	e6d1      	b.n	8018aa2 <_dtoa_r+0x32>
 8018cfe:	2301      	movs	r3, #1
 8018d00:	e7de      	b.n	8018cc0 <_dtoa_r+0x250>
 8018d02:	2300      	movs	r3, #0
 8018d04:	9308      	str	r3, [sp, #32]
 8018d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d08:	eb0a 0903 	add.w	r9, sl, r3
 8018d0c:	f109 0301 	add.w	r3, r9, #1
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	9301      	str	r3, [sp, #4]
 8018d14:	bfb8      	it	lt
 8018d16:	2301      	movlt	r3, #1
 8018d18:	e7dd      	b.n	8018cd6 <_dtoa_r+0x266>
 8018d1a:	2301      	movs	r3, #1
 8018d1c:	e7f2      	b.n	8018d04 <_dtoa_r+0x294>
 8018d1e:	2501      	movs	r5, #1
 8018d20:	2300      	movs	r3, #0
 8018d22:	9305      	str	r3, [sp, #20]
 8018d24:	9508      	str	r5, [sp, #32]
 8018d26:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8018d2a:	2200      	movs	r2, #0
 8018d2c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018d30:	2312      	movs	r3, #18
 8018d32:	9209      	str	r2, [sp, #36]	; 0x24
 8018d34:	e7cf      	b.n	8018cd6 <_dtoa_r+0x266>
 8018d36:	2301      	movs	r3, #1
 8018d38:	9308      	str	r3, [sp, #32]
 8018d3a:	e7f4      	b.n	8018d26 <_dtoa_r+0x2b6>
 8018d3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018d40:	f8cd 9004 	str.w	r9, [sp, #4]
 8018d44:	464b      	mov	r3, r9
 8018d46:	e7c6      	b.n	8018cd6 <_dtoa_r+0x266>
 8018d48:	3101      	adds	r1, #1
 8018d4a:	6041      	str	r1, [r0, #4]
 8018d4c:	0052      	lsls	r2, r2, #1
 8018d4e:	e7c6      	b.n	8018cde <_dtoa_r+0x26e>
 8018d50:	636f4361 	.word	0x636f4361
 8018d54:	3fd287a7 	.word	0x3fd287a7
 8018d58:	8b60c8b3 	.word	0x8b60c8b3
 8018d5c:	3fc68a28 	.word	0x3fc68a28
 8018d60:	509f79fb 	.word	0x509f79fb
 8018d64:	3fd34413 	.word	0x3fd34413
 8018d68:	0801f45a 	.word	0x0801f45a
 8018d6c:	0801f471 	.word	0x0801f471
 8018d70:	7ff00000 	.word	0x7ff00000
 8018d74:	0801f456 	.word	0x0801f456
 8018d78:	0801f44d 	.word	0x0801f44d
 8018d7c:	0801f405 	.word	0x0801f405
 8018d80:	3ff80000 	.word	0x3ff80000
 8018d84:	0801f570 	.word	0x0801f570
 8018d88:	0801f4d0 	.word	0x0801f4d0
 8018d8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018d8e:	9a00      	ldr	r2, [sp, #0]
 8018d90:	601a      	str	r2, [r3, #0]
 8018d92:	9b01      	ldr	r3, [sp, #4]
 8018d94:	2b0e      	cmp	r3, #14
 8018d96:	f200 80ad 	bhi.w	8018ef4 <_dtoa_r+0x484>
 8018d9a:	2d00      	cmp	r5, #0
 8018d9c:	f000 80aa 	beq.w	8018ef4 <_dtoa_r+0x484>
 8018da0:	f1ba 0f00 	cmp.w	sl, #0
 8018da4:	dd36      	ble.n	8018e14 <_dtoa_r+0x3a4>
 8018da6:	4ac3      	ldr	r2, [pc, #780]	; (80190b4 <_dtoa_r+0x644>)
 8018da8:	f00a 030f 	and.w	r3, sl, #15
 8018dac:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018db0:	ed93 7b00 	vldr	d7, [r3]
 8018db4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018db8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018dbc:	eeb0 8a47 	vmov.f32	s16, s14
 8018dc0:	eef0 8a67 	vmov.f32	s17, s15
 8018dc4:	d016      	beq.n	8018df4 <_dtoa_r+0x384>
 8018dc6:	4bbc      	ldr	r3, [pc, #752]	; (80190b8 <_dtoa_r+0x648>)
 8018dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018dcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018dd0:	f7e7 fd3c 	bl	800084c <__aeabi_ddiv>
 8018dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018dd8:	f007 070f 	and.w	r7, r7, #15
 8018ddc:	2503      	movs	r5, #3
 8018dde:	4eb6      	ldr	r6, [pc, #728]	; (80190b8 <_dtoa_r+0x648>)
 8018de0:	b957      	cbnz	r7, 8018df8 <_dtoa_r+0x388>
 8018de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018de6:	ec53 2b18 	vmov	r2, r3, d8
 8018dea:	f7e7 fd2f 	bl	800084c <__aeabi_ddiv>
 8018dee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018df2:	e029      	b.n	8018e48 <_dtoa_r+0x3d8>
 8018df4:	2502      	movs	r5, #2
 8018df6:	e7f2      	b.n	8018dde <_dtoa_r+0x36e>
 8018df8:	07f9      	lsls	r1, r7, #31
 8018dfa:	d508      	bpl.n	8018e0e <_dtoa_r+0x39e>
 8018dfc:	ec51 0b18 	vmov	r0, r1, d8
 8018e00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018e04:	f7e7 fbf8 	bl	80005f8 <__aeabi_dmul>
 8018e08:	ec41 0b18 	vmov	d8, r0, r1
 8018e0c:	3501      	adds	r5, #1
 8018e0e:	107f      	asrs	r7, r7, #1
 8018e10:	3608      	adds	r6, #8
 8018e12:	e7e5      	b.n	8018de0 <_dtoa_r+0x370>
 8018e14:	f000 80a6 	beq.w	8018f64 <_dtoa_r+0x4f4>
 8018e18:	f1ca 0600 	rsb	r6, sl, #0
 8018e1c:	4ba5      	ldr	r3, [pc, #660]	; (80190b4 <_dtoa_r+0x644>)
 8018e1e:	4fa6      	ldr	r7, [pc, #664]	; (80190b8 <_dtoa_r+0x648>)
 8018e20:	f006 020f 	and.w	r2, r6, #15
 8018e24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e2c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018e30:	f7e7 fbe2 	bl	80005f8 <__aeabi_dmul>
 8018e34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e38:	1136      	asrs	r6, r6, #4
 8018e3a:	2300      	movs	r3, #0
 8018e3c:	2502      	movs	r5, #2
 8018e3e:	2e00      	cmp	r6, #0
 8018e40:	f040 8085 	bne.w	8018f4e <_dtoa_r+0x4de>
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d1d2      	bne.n	8018dee <_dtoa_r+0x37e>
 8018e48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	f000 808c 	beq.w	8018f68 <_dtoa_r+0x4f8>
 8018e50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018e54:	4b99      	ldr	r3, [pc, #612]	; (80190bc <_dtoa_r+0x64c>)
 8018e56:	2200      	movs	r2, #0
 8018e58:	4630      	mov	r0, r6
 8018e5a:	4639      	mov	r1, r7
 8018e5c:	f7e7 fe3e 	bl	8000adc <__aeabi_dcmplt>
 8018e60:	2800      	cmp	r0, #0
 8018e62:	f000 8081 	beq.w	8018f68 <_dtoa_r+0x4f8>
 8018e66:	9b01      	ldr	r3, [sp, #4]
 8018e68:	2b00      	cmp	r3, #0
 8018e6a:	d07d      	beq.n	8018f68 <_dtoa_r+0x4f8>
 8018e6c:	f1b9 0f00 	cmp.w	r9, #0
 8018e70:	dd3c      	ble.n	8018eec <_dtoa_r+0x47c>
 8018e72:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8018e76:	9307      	str	r3, [sp, #28]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	4b91      	ldr	r3, [pc, #580]	; (80190c0 <_dtoa_r+0x650>)
 8018e7c:	4630      	mov	r0, r6
 8018e7e:	4639      	mov	r1, r7
 8018e80:	f7e7 fbba 	bl	80005f8 <__aeabi_dmul>
 8018e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018e88:	3501      	adds	r5, #1
 8018e8a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018e8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018e92:	4628      	mov	r0, r5
 8018e94:	f7e7 fb46 	bl	8000524 <__aeabi_i2d>
 8018e98:	4632      	mov	r2, r6
 8018e9a:	463b      	mov	r3, r7
 8018e9c:	f7e7 fbac 	bl	80005f8 <__aeabi_dmul>
 8018ea0:	4b88      	ldr	r3, [pc, #544]	; (80190c4 <_dtoa_r+0x654>)
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f7e7 f9f2 	bl	800028c <__adddf3>
 8018ea8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018eac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018eb0:	9303      	str	r3, [sp, #12]
 8018eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d15c      	bne.n	8018f72 <_dtoa_r+0x502>
 8018eb8:	4b83      	ldr	r3, [pc, #524]	; (80190c8 <_dtoa_r+0x658>)
 8018eba:	2200      	movs	r2, #0
 8018ebc:	4630      	mov	r0, r6
 8018ebe:	4639      	mov	r1, r7
 8018ec0:	f7e7 f9e2 	bl	8000288 <__aeabi_dsub>
 8018ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018ec8:	4606      	mov	r6, r0
 8018eca:	460f      	mov	r7, r1
 8018ecc:	f7e7 fe24 	bl	8000b18 <__aeabi_dcmpgt>
 8018ed0:	2800      	cmp	r0, #0
 8018ed2:	f040 8296 	bne.w	8019402 <_dtoa_r+0x992>
 8018ed6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018eda:	4630      	mov	r0, r6
 8018edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018ee0:	4639      	mov	r1, r7
 8018ee2:	f7e7 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8018ee6:	2800      	cmp	r0, #0
 8018ee8:	f040 8288 	bne.w	80193fc <_dtoa_r+0x98c>
 8018eec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018ef0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018ef4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	f2c0 8158 	blt.w	80191ac <_dtoa_r+0x73c>
 8018efc:	f1ba 0f0e 	cmp.w	sl, #14
 8018f00:	f300 8154 	bgt.w	80191ac <_dtoa_r+0x73c>
 8018f04:	4b6b      	ldr	r3, [pc, #428]	; (80190b4 <_dtoa_r+0x644>)
 8018f06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018f0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	f280 80e3 	bge.w	80190dc <_dtoa_r+0x66c>
 8018f16:	9b01      	ldr	r3, [sp, #4]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	f300 80df 	bgt.w	80190dc <_dtoa_r+0x66c>
 8018f1e:	f040 826d 	bne.w	80193fc <_dtoa_r+0x98c>
 8018f22:	4b69      	ldr	r3, [pc, #420]	; (80190c8 <_dtoa_r+0x658>)
 8018f24:	2200      	movs	r2, #0
 8018f26:	4640      	mov	r0, r8
 8018f28:	4649      	mov	r1, r9
 8018f2a:	f7e7 fb65 	bl	80005f8 <__aeabi_dmul>
 8018f2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018f32:	f7e7 fde7 	bl	8000b04 <__aeabi_dcmpge>
 8018f36:	9e01      	ldr	r6, [sp, #4]
 8018f38:	4637      	mov	r7, r6
 8018f3a:	2800      	cmp	r0, #0
 8018f3c:	f040 8243 	bne.w	80193c6 <_dtoa_r+0x956>
 8018f40:	9d00      	ldr	r5, [sp, #0]
 8018f42:	2331      	movs	r3, #49	; 0x31
 8018f44:	f805 3b01 	strb.w	r3, [r5], #1
 8018f48:	f10a 0a01 	add.w	sl, sl, #1
 8018f4c:	e23f      	b.n	80193ce <_dtoa_r+0x95e>
 8018f4e:	07f2      	lsls	r2, r6, #31
 8018f50:	d505      	bpl.n	8018f5e <_dtoa_r+0x4ee>
 8018f52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018f56:	f7e7 fb4f 	bl	80005f8 <__aeabi_dmul>
 8018f5a:	3501      	adds	r5, #1
 8018f5c:	2301      	movs	r3, #1
 8018f5e:	1076      	asrs	r6, r6, #1
 8018f60:	3708      	adds	r7, #8
 8018f62:	e76c      	b.n	8018e3e <_dtoa_r+0x3ce>
 8018f64:	2502      	movs	r5, #2
 8018f66:	e76f      	b.n	8018e48 <_dtoa_r+0x3d8>
 8018f68:	9b01      	ldr	r3, [sp, #4]
 8018f6a:	f8cd a01c 	str.w	sl, [sp, #28]
 8018f6e:	930c      	str	r3, [sp, #48]	; 0x30
 8018f70:	e78d      	b.n	8018e8e <_dtoa_r+0x41e>
 8018f72:	9900      	ldr	r1, [sp, #0]
 8018f74:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018f76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f78:	4b4e      	ldr	r3, [pc, #312]	; (80190b4 <_dtoa_r+0x644>)
 8018f7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018f7e:	4401      	add	r1, r0
 8018f80:	9102      	str	r1, [sp, #8]
 8018f82:	9908      	ldr	r1, [sp, #32]
 8018f84:	eeb0 8a47 	vmov.f32	s16, s14
 8018f88:	eef0 8a67 	vmov.f32	s17, s15
 8018f8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018f90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018f94:	2900      	cmp	r1, #0
 8018f96:	d045      	beq.n	8019024 <_dtoa_r+0x5b4>
 8018f98:	494c      	ldr	r1, [pc, #304]	; (80190cc <_dtoa_r+0x65c>)
 8018f9a:	2000      	movs	r0, #0
 8018f9c:	f7e7 fc56 	bl	800084c <__aeabi_ddiv>
 8018fa0:	ec53 2b18 	vmov	r2, r3, d8
 8018fa4:	f7e7 f970 	bl	8000288 <__aeabi_dsub>
 8018fa8:	9d00      	ldr	r5, [sp, #0]
 8018faa:	ec41 0b18 	vmov	d8, r0, r1
 8018fae:	4639      	mov	r1, r7
 8018fb0:	4630      	mov	r0, r6
 8018fb2:	f7e7 fdd1 	bl	8000b58 <__aeabi_d2iz>
 8018fb6:	900c      	str	r0, [sp, #48]	; 0x30
 8018fb8:	f7e7 fab4 	bl	8000524 <__aeabi_i2d>
 8018fbc:	4602      	mov	r2, r0
 8018fbe:	460b      	mov	r3, r1
 8018fc0:	4630      	mov	r0, r6
 8018fc2:	4639      	mov	r1, r7
 8018fc4:	f7e7 f960 	bl	8000288 <__aeabi_dsub>
 8018fc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018fca:	3330      	adds	r3, #48	; 0x30
 8018fcc:	f805 3b01 	strb.w	r3, [r5], #1
 8018fd0:	ec53 2b18 	vmov	r2, r3, d8
 8018fd4:	4606      	mov	r6, r0
 8018fd6:	460f      	mov	r7, r1
 8018fd8:	f7e7 fd80 	bl	8000adc <__aeabi_dcmplt>
 8018fdc:	2800      	cmp	r0, #0
 8018fde:	d165      	bne.n	80190ac <_dtoa_r+0x63c>
 8018fe0:	4632      	mov	r2, r6
 8018fe2:	463b      	mov	r3, r7
 8018fe4:	4935      	ldr	r1, [pc, #212]	; (80190bc <_dtoa_r+0x64c>)
 8018fe6:	2000      	movs	r0, #0
 8018fe8:	f7e7 f94e 	bl	8000288 <__aeabi_dsub>
 8018fec:	ec53 2b18 	vmov	r2, r3, d8
 8018ff0:	f7e7 fd74 	bl	8000adc <__aeabi_dcmplt>
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	f040 80b9 	bne.w	801916c <_dtoa_r+0x6fc>
 8018ffa:	9b02      	ldr	r3, [sp, #8]
 8018ffc:	429d      	cmp	r5, r3
 8018ffe:	f43f af75 	beq.w	8018eec <_dtoa_r+0x47c>
 8019002:	4b2f      	ldr	r3, [pc, #188]	; (80190c0 <_dtoa_r+0x650>)
 8019004:	ec51 0b18 	vmov	r0, r1, d8
 8019008:	2200      	movs	r2, #0
 801900a:	f7e7 faf5 	bl	80005f8 <__aeabi_dmul>
 801900e:	4b2c      	ldr	r3, [pc, #176]	; (80190c0 <_dtoa_r+0x650>)
 8019010:	ec41 0b18 	vmov	d8, r0, r1
 8019014:	2200      	movs	r2, #0
 8019016:	4630      	mov	r0, r6
 8019018:	4639      	mov	r1, r7
 801901a:	f7e7 faed 	bl	80005f8 <__aeabi_dmul>
 801901e:	4606      	mov	r6, r0
 8019020:	460f      	mov	r7, r1
 8019022:	e7c4      	b.n	8018fae <_dtoa_r+0x53e>
 8019024:	ec51 0b17 	vmov	r0, r1, d7
 8019028:	f7e7 fae6 	bl	80005f8 <__aeabi_dmul>
 801902c:	9b02      	ldr	r3, [sp, #8]
 801902e:	9d00      	ldr	r5, [sp, #0]
 8019030:	930c      	str	r3, [sp, #48]	; 0x30
 8019032:	ec41 0b18 	vmov	d8, r0, r1
 8019036:	4639      	mov	r1, r7
 8019038:	4630      	mov	r0, r6
 801903a:	f7e7 fd8d 	bl	8000b58 <__aeabi_d2iz>
 801903e:	9011      	str	r0, [sp, #68]	; 0x44
 8019040:	f7e7 fa70 	bl	8000524 <__aeabi_i2d>
 8019044:	4602      	mov	r2, r0
 8019046:	460b      	mov	r3, r1
 8019048:	4630      	mov	r0, r6
 801904a:	4639      	mov	r1, r7
 801904c:	f7e7 f91c 	bl	8000288 <__aeabi_dsub>
 8019050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019052:	3330      	adds	r3, #48	; 0x30
 8019054:	f805 3b01 	strb.w	r3, [r5], #1
 8019058:	9b02      	ldr	r3, [sp, #8]
 801905a:	429d      	cmp	r5, r3
 801905c:	4606      	mov	r6, r0
 801905e:	460f      	mov	r7, r1
 8019060:	f04f 0200 	mov.w	r2, #0
 8019064:	d134      	bne.n	80190d0 <_dtoa_r+0x660>
 8019066:	4b19      	ldr	r3, [pc, #100]	; (80190cc <_dtoa_r+0x65c>)
 8019068:	ec51 0b18 	vmov	r0, r1, d8
 801906c:	f7e7 f90e 	bl	800028c <__adddf3>
 8019070:	4602      	mov	r2, r0
 8019072:	460b      	mov	r3, r1
 8019074:	4630      	mov	r0, r6
 8019076:	4639      	mov	r1, r7
 8019078:	f7e7 fd4e 	bl	8000b18 <__aeabi_dcmpgt>
 801907c:	2800      	cmp	r0, #0
 801907e:	d175      	bne.n	801916c <_dtoa_r+0x6fc>
 8019080:	ec53 2b18 	vmov	r2, r3, d8
 8019084:	4911      	ldr	r1, [pc, #68]	; (80190cc <_dtoa_r+0x65c>)
 8019086:	2000      	movs	r0, #0
 8019088:	f7e7 f8fe 	bl	8000288 <__aeabi_dsub>
 801908c:	4602      	mov	r2, r0
 801908e:	460b      	mov	r3, r1
 8019090:	4630      	mov	r0, r6
 8019092:	4639      	mov	r1, r7
 8019094:	f7e7 fd22 	bl	8000adc <__aeabi_dcmplt>
 8019098:	2800      	cmp	r0, #0
 801909a:	f43f af27 	beq.w	8018eec <_dtoa_r+0x47c>
 801909e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80190a0:	1e6b      	subs	r3, r5, #1
 80190a2:	930c      	str	r3, [sp, #48]	; 0x30
 80190a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80190a8:	2b30      	cmp	r3, #48	; 0x30
 80190aa:	d0f8      	beq.n	801909e <_dtoa_r+0x62e>
 80190ac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80190b0:	e04a      	b.n	8019148 <_dtoa_r+0x6d8>
 80190b2:	bf00      	nop
 80190b4:	0801f570 	.word	0x0801f570
 80190b8:	0801f548 	.word	0x0801f548
 80190bc:	3ff00000 	.word	0x3ff00000
 80190c0:	40240000 	.word	0x40240000
 80190c4:	401c0000 	.word	0x401c0000
 80190c8:	40140000 	.word	0x40140000
 80190cc:	3fe00000 	.word	0x3fe00000
 80190d0:	4baf      	ldr	r3, [pc, #700]	; (8019390 <_dtoa_r+0x920>)
 80190d2:	f7e7 fa91 	bl	80005f8 <__aeabi_dmul>
 80190d6:	4606      	mov	r6, r0
 80190d8:	460f      	mov	r7, r1
 80190da:	e7ac      	b.n	8019036 <_dtoa_r+0x5c6>
 80190dc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80190e0:	9d00      	ldr	r5, [sp, #0]
 80190e2:	4642      	mov	r2, r8
 80190e4:	464b      	mov	r3, r9
 80190e6:	4630      	mov	r0, r6
 80190e8:	4639      	mov	r1, r7
 80190ea:	f7e7 fbaf 	bl	800084c <__aeabi_ddiv>
 80190ee:	f7e7 fd33 	bl	8000b58 <__aeabi_d2iz>
 80190f2:	9002      	str	r0, [sp, #8]
 80190f4:	f7e7 fa16 	bl	8000524 <__aeabi_i2d>
 80190f8:	4642      	mov	r2, r8
 80190fa:	464b      	mov	r3, r9
 80190fc:	f7e7 fa7c 	bl	80005f8 <__aeabi_dmul>
 8019100:	4602      	mov	r2, r0
 8019102:	460b      	mov	r3, r1
 8019104:	4630      	mov	r0, r6
 8019106:	4639      	mov	r1, r7
 8019108:	f7e7 f8be 	bl	8000288 <__aeabi_dsub>
 801910c:	9e02      	ldr	r6, [sp, #8]
 801910e:	9f01      	ldr	r7, [sp, #4]
 8019110:	3630      	adds	r6, #48	; 0x30
 8019112:	f805 6b01 	strb.w	r6, [r5], #1
 8019116:	9e00      	ldr	r6, [sp, #0]
 8019118:	1bae      	subs	r6, r5, r6
 801911a:	42b7      	cmp	r7, r6
 801911c:	4602      	mov	r2, r0
 801911e:	460b      	mov	r3, r1
 8019120:	d137      	bne.n	8019192 <_dtoa_r+0x722>
 8019122:	f7e7 f8b3 	bl	800028c <__adddf3>
 8019126:	4642      	mov	r2, r8
 8019128:	464b      	mov	r3, r9
 801912a:	4606      	mov	r6, r0
 801912c:	460f      	mov	r7, r1
 801912e:	f7e7 fcf3 	bl	8000b18 <__aeabi_dcmpgt>
 8019132:	b9c8      	cbnz	r0, 8019168 <_dtoa_r+0x6f8>
 8019134:	4642      	mov	r2, r8
 8019136:	464b      	mov	r3, r9
 8019138:	4630      	mov	r0, r6
 801913a:	4639      	mov	r1, r7
 801913c:	f7e7 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8019140:	b110      	cbz	r0, 8019148 <_dtoa_r+0x6d8>
 8019142:	9b02      	ldr	r3, [sp, #8]
 8019144:	07d9      	lsls	r1, r3, #31
 8019146:	d40f      	bmi.n	8019168 <_dtoa_r+0x6f8>
 8019148:	4620      	mov	r0, r4
 801914a:	4659      	mov	r1, fp
 801914c:	f000 fba0 	bl	8019890 <_Bfree>
 8019150:	2300      	movs	r3, #0
 8019152:	702b      	strb	r3, [r5, #0]
 8019154:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019156:	f10a 0001 	add.w	r0, sl, #1
 801915a:	6018      	str	r0, [r3, #0]
 801915c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801915e:	2b00      	cmp	r3, #0
 8019160:	f43f acd8 	beq.w	8018b14 <_dtoa_r+0xa4>
 8019164:	601d      	str	r5, [r3, #0]
 8019166:	e4d5      	b.n	8018b14 <_dtoa_r+0xa4>
 8019168:	f8cd a01c 	str.w	sl, [sp, #28]
 801916c:	462b      	mov	r3, r5
 801916e:	461d      	mov	r5, r3
 8019170:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019174:	2a39      	cmp	r2, #57	; 0x39
 8019176:	d108      	bne.n	801918a <_dtoa_r+0x71a>
 8019178:	9a00      	ldr	r2, [sp, #0]
 801917a:	429a      	cmp	r2, r3
 801917c:	d1f7      	bne.n	801916e <_dtoa_r+0x6fe>
 801917e:	9a07      	ldr	r2, [sp, #28]
 8019180:	9900      	ldr	r1, [sp, #0]
 8019182:	3201      	adds	r2, #1
 8019184:	9207      	str	r2, [sp, #28]
 8019186:	2230      	movs	r2, #48	; 0x30
 8019188:	700a      	strb	r2, [r1, #0]
 801918a:	781a      	ldrb	r2, [r3, #0]
 801918c:	3201      	adds	r2, #1
 801918e:	701a      	strb	r2, [r3, #0]
 8019190:	e78c      	b.n	80190ac <_dtoa_r+0x63c>
 8019192:	4b7f      	ldr	r3, [pc, #508]	; (8019390 <_dtoa_r+0x920>)
 8019194:	2200      	movs	r2, #0
 8019196:	f7e7 fa2f 	bl	80005f8 <__aeabi_dmul>
 801919a:	2200      	movs	r2, #0
 801919c:	2300      	movs	r3, #0
 801919e:	4606      	mov	r6, r0
 80191a0:	460f      	mov	r7, r1
 80191a2:	f7e7 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80191a6:	2800      	cmp	r0, #0
 80191a8:	d09b      	beq.n	80190e2 <_dtoa_r+0x672>
 80191aa:	e7cd      	b.n	8019148 <_dtoa_r+0x6d8>
 80191ac:	9a08      	ldr	r2, [sp, #32]
 80191ae:	2a00      	cmp	r2, #0
 80191b0:	f000 80c4 	beq.w	801933c <_dtoa_r+0x8cc>
 80191b4:	9a05      	ldr	r2, [sp, #20]
 80191b6:	2a01      	cmp	r2, #1
 80191b8:	f300 80a8 	bgt.w	801930c <_dtoa_r+0x89c>
 80191bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80191be:	2a00      	cmp	r2, #0
 80191c0:	f000 80a0 	beq.w	8019304 <_dtoa_r+0x894>
 80191c4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80191c8:	9e06      	ldr	r6, [sp, #24]
 80191ca:	4645      	mov	r5, r8
 80191cc:	9a04      	ldr	r2, [sp, #16]
 80191ce:	2101      	movs	r1, #1
 80191d0:	441a      	add	r2, r3
 80191d2:	4620      	mov	r0, r4
 80191d4:	4498      	add	r8, r3
 80191d6:	9204      	str	r2, [sp, #16]
 80191d8:	f000 fc16 	bl	8019a08 <__i2b>
 80191dc:	4607      	mov	r7, r0
 80191de:	2d00      	cmp	r5, #0
 80191e0:	dd0b      	ble.n	80191fa <_dtoa_r+0x78a>
 80191e2:	9b04      	ldr	r3, [sp, #16]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	dd08      	ble.n	80191fa <_dtoa_r+0x78a>
 80191e8:	42ab      	cmp	r3, r5
 80191ea:	9a04      	ldr	r2, [sp, #16]
 80191ec:	bfa8      	it	ge
 80191ee:	462b      	movge	r3, r5
 80191f0:	eba8 0803 	sub.w	r8, r8, r3
 80191f4:	1aed      	subs	r5, r5, r3
 80191f6:	1ad3      	subs	r3, r2, r3
 80191f8:	9304      	str	r3, [sp, #16]
 80191fa:	9b06      	ldr	r3, [sp, #24]
 80191fc:	b1fb      	cbz	r3, 801923e <_dtoa_r+0x7ce>
 80191fe:	9b08      	ldr	r3, [sp, #32]
 8019200:	2b00      	cmp	r3, #0
 8019202:	f000 809f 	beq.w	8019344 <_dtoa_r+0x8d4>
 8019206:	2e00      	cmp	r6, #0
 8019208:	dd11      	ble.n	801922e <_dtoa_r+0x7be>
 801920a:	4639      	mov	r1, r7
 801920c:	4632      	mov	r2, r6
 801920e:	4620      	mov	r0, r4
 8019210:	f000 fcb6 	bl	8019b80 <__pow5mult>
 8019214:	465a      	mov	r2, fp
 8019216:	4601      	mov	r1, r0
 8019218:	4607      	mov	r7, r0
 801921a:	4620      	mov	r0, r4
 801921c:	f000 fc0a 	bl	8019a34 <__multiply>
 8019220:	4659      	mov	r1, fp
 8019222:	9007      	str	r0, [sp, #28]
 8019224:	4620      	mov	r0, r4
 8019226:	f000 fb33 	bl	8019890 <_Bfree>
 801922a:	9b07      	ldr	r3, [sp, #28]
 801922c:	469b      	mov	fp, r3
 801922e:	9b06      	ldr	r3, [sp, #24]
 8019230:	1b9a      	subs	r2, r3, r6
 8019232:	d004      	beq.n	801923e <_dtoa_r+0x7ce>
 8019234:	4659      	mov	r1, fp
 8019236:	4620      	mov	r0, r4
 8019238:	f000 fca2 	bl	8019b80 <__pow5mult>
 801923c:	4683      	mov	fp, r0
 801923e:	2101      	movs	r1, #1
 8019240:	4620      	mov	r0, r4
 8019242:	f000 fbe1 	bl	8019a08 <__i2b>
 8019246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019248:	2b00      	cmp	r3, #0
 801924a:	4606      	mov	r6, r0
 801924c:	dd7c      	ble.n	8019348 <_dtoa_r+0x8d8>
 801924e:	461a      	mov	r2, r3
 8019250:	4601      	mov	r1, r0
 8019252:	4620      	mov	r0, r4
 8019254:	f000 fc94 	bl	8019b80 <__pow5mult>
 8019258:	9b05      	ldr	r3, [sp, #20]
 801925a:	2b01      	cmp	r3, #1
 801925c:	4606      	mov	r6, r0
 801925e:	dd76      	ble.n	801934e <_dtoa_r+0x8de>
 8019260:	2300      	movs	r3, #0
 8019262:	9306      	str	r3, [sp, #24]
 8019264:	6933      	ldr	r3, [r6, #16]
 8019266:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801926a:	6918      	ldr	r0, [r3, #16]
 801926c:	f000 fb7c 	bl	8019968 <__hi0bits>
 8019270:	f1c0 0020 	rsb	r0, r0, #32
 8019274:	9b04      	ldr	r3, [sp, #16]
 8019276:	4418      	add	r0, r3
 8019278:	f010 001f 	ands.w	r0, r0, #31
 801927c:	f000 8086 	beq.w	801938c <_dtoa_r+0x91c>
 8019280:	f1c0 0320 	rsb	r3, r0, #32
 8019284:	2b04      	cmp	r3, #4
 8019286:	dd7f      	ble.n	8019388 <_dtoa_r+0x918>
 8019288:	f1c0 001c 	rsb	r0, r0, #28
 801928c:	9b04      	ldr	r3, [sp, #16]
 801928e:	4403      	add	r3, r0
 8019290:	4480      	add	r8, r0
 8019292:	4405      	add	r5, r0
 8019294:	9304      	str	r3, [sp, #16]
 8019296:	f1b8 0f00 	cmp.w	r8, #0
 801929a:	dd05      	ble.n	80192a8 <_dtoa_r+0x838>
 801929c:	4659      	mov	r1, fp
 801929e:	4642      	mov	r2, r8
 80192a0:	4620      	mov	r0, r4
 80192a2:	f000 fcc7 	bl	8019c34 <__lshift>
 80192a6:	4683      	mov	fp, r0
 80192a8:	9b04      	ldr	r3, [sp, #16]
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	dd05      	ble.n	80192ba <_dtoa_r+0x84a>
 80192ae:	4631      	mov	r1, r6
 80192b0:	461a      	mov	r2, r3
 80192b2:	4620      	mov	r0, r4
 80192b4:	f000 fcbe 	bl	8019c34 <__lshift>
 80192b8:	4606      	mov	r6, r0
 80192ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d069      	beq.n	8019394 <_dtoa_r+0x924>
 80192c0:	4631      	mov	r1, r6
 80192c2:	4658      	mov	r0, fp
 80192c4:	f000 fd22 	bl	8019d0c <__mcmp>
 80192c8:	2800      	cmp	r0, #0
 80192ca:	da63      	bge.n	8019394 <_dtoa_r+0x924>
 80192cc:	2300      	movs	r3, #0
 80192ce:	4659      	mov	r1, fp
 80192d0:	220a      	movs	r2, #10
 80192d2:	4620      	mov	r0, r4
 80192d4:	f000 fafe 	bl	80198d4 <__multadd>
 80192d8:	9b08      	ldr	r3, [sp, #32]
 80192da:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80192de:	4683      	mov	fp, r0
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	f000 818f 	beq.w	8019604 <_dtoa_r+0xb94>
 80192e6:	4639      	mov	r1, r7
 80192e8:	2300      	movs	r3, #0
 80192ea:	220a      	movs	r2, #10
 80192ec:	4620      	mov	r0, r4
 80192ee:	f000 faf1 	bl	80198d4 <__multadd>
 80192f2:	f1b9 0f00 	cmp.w	r9, #0
 80192f6:	4607      	mov	r7, r0
 80192f8:	f300 808e 	bgt.w	8019418 <_dtoa_r+0x9a8>
 80192fc:	9b05      	ldr	r3, [sp, #20]
 80192fe:	2b02      	cmp	r3, #2
 8019300:	dc50      	bgt.n	80193a4 <_dtoa_r+0x934>
 8019302:	e089      	b.n	8019418 <_dtoa_r+0x9a8>
 8019304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801930a:	e75d      	b.n	80191c8 <_dtoa_r+0x758>
 801930c:	9b01      	ldr	r3, [sp, #4]
 801930e:	1e5e      	subs	r6, r3, #1
 8019310:	9b06      	ldr	r3, [sp, #24]
 8019312:	42b3      	cmp	r3, r6
 8019314:	bfbf      	itttt	lt
 8019316:	9b06      	ldrlt	r3, [sp, #24]
 8019318:	9606      	strlt	r6, [sp, #24]
 801931a:	1af2      	sublt	r2, r6, r3
 801931c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801931e:	bfb6      	itet	lt
 8019320:	189b      	addlt	r3, r3, r2
 8019322:	1b9e      	subge	r6, r3, r6
 8019324:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019326:	9b01      	ldr	r3, [sp, #4]
 8019328:	bfb8      	it	lt
 801932a:	2600      	movlt	r6, #0
 801932c:	2b00      	cmp	r3, #0
 801932e:	bfb5      	itete	lt
 8019330:	eba8 0503 	sublt.w	r5, r8, r3
 8019334:	9b01      	ldrge	r3, [sp, #4]
 8019336:	2300      	movlt	r3, #0
 8019338:	4645      	movge	r5, r8
 801933a:	e747      	b.n	80191cc <_dtoa_r+0x75c>
 801933c:	9e06      	ldr	r6, [sp, #24]
 801933e:	9f08      	ldr	r7, [sp, #32]
 8019340:	4645      	mov	r5, r8
 8019342:	e74c      	b.n	80191de <_dtoa_r+0x76e>
 8019344:	9a06      	ldr	r2, [sp, #24]
 8019346:	e775      	b.n	8019234 <_dtoa_r+0x7c4>
 8019348:	9b05      	ldr	r3, [sp, #20]
 801934a:	2b01      	cmp	r3, #1
 801934c:	dc18      	bgt.n	8019380 <_dtoa_r+0x910>
 801934e:	9b02      	ldr	r3, [sp, #8]
 8019350:	b9b3      	cbnz	r3, 8019380 <_dtoa_r+0x910>
 8019352:	9b03      	ldr	r3, [sp, #12]
 8019354:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019358:	b9a3      	cbnz	r3, 8019384 <_dtoa_r+0x914>
 801935a:	9b03      	ldr	r3, [sp, #12]
 801935c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019360:	0d1b      	lsrs	r3, r3, #20
 8019362:	051b      	lsls	r3, r3, #20
 8019364:	b12b      	cbz	r3, 8019372 <_dtoa_r+0x902>
 8019366:	9b04      	ldr	r3, [sp, #16]
 8019368:	3301      	adds	r3, #1
 801936a:	9304      	str	r3, [sp, #16]
 801936c:	f108 0801 	add.w	r8, r8, #1
 8019370:	2301      	movs	r3, #1
 8019372:	9306      	str	r3, [sp, #24]
 8019374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019376:	2b00      	cmp	r3, #0
 8019378:	f47f af74 	bne.w	8019264 <_dtoa_r+0x7f4>
 801937c:	2001      	movs	r0, #1
 801937e:	e779      	b.n	8019274 <_dtoa_r+0x804>
 8019380:	2300      	movs	r3, #0
 8019382:	e7f6      	b.n	8019372 <_dtoa_r+0x902>
 8019384:	9b02      	ldr	r3, [sp, #8]
 8019386:	e7f4      	b.n	8019372 <_dtoa_r+0x902>
 8019388:	d085      	beq.n	8019296 <_dtoa_r+0x826>
 801938a:	4618      	mov	r0, r3
 801938c:	301c      	adds	r0, #28
 801938e:	e77d      	b.n	801928c <_dtoa_r+0x81c>
 8019390:	40240000 	.word	0x40240000
 8019394:	9b01      	ldr	r3, [sp, #4]
 8019396:	2b00      	cmp	r3, #0
 8019398:	dc38      	bgt.n	801940c <_dtoa_r+0x99c>
 801939a:	9b05      	ldr	r3, [sp, #20]
 801939c:	2b02      	cmp	r3, #2
 801939e:	dd35      	ble.n	801940c <_dtoa_r+0x99c>
 80193a0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80193a4:	f1b9 0f00 	cmp.w	r9, #0
 80193a8:	d10d      	bne.n	80193c6 <_dtoa_r+0x956>
 80193aa:	4631      	mov	r1, r6
 80193ac:	464b      	mov	r3, r9
 80193ae:	2205      	movs	r2, #5
 80193b0:	4620      	mov	r0, r4
 80193b2:	f000 fa8f 	bl	80198d4 <__multadd>
 80193b6:	4601      	mov	r1, r0
 80193b8:	4606      	mov	r6, r0
 80193ba:	4658      	mov	r0, fp
 80193bc:	f000 fca6 	bl	8019d0c <__mcmp>
 80193c0:	2800      	cmp	r0, #0
 80193c2:	f73f adbd 	bgt.w	8018f40 <_dtoa_r+0x4d0>
 80193c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80193c8:	9d00      	ldr	r5, [sp, #0]
 80193ca:	ea6f 0a03 	mvn.w	sl, r3
 80193ce:	f04f 0800 	mov.w	r8, #0
 80193d2:	4631      	mov	r1, r6
 80193d4:	4620      	mov	r0, r4
 80193d6:	f000 fa5b 	bl	8019890 <_Bfree>
 80193da:	2f00      	cmp	r7, #0
 80193dc:	f43f aeb4 	beq.w	8019148 <_dtoa_r+0x6d8>
 80193e0:	f1b8 0f00 	cmp.w	r8, #0
 80193e4:	d005      	beq.n	80193f2 <_dtoa_r+0x982>
 80193e6:	45b8      	cmp	r8, r7
 80193e8:	d003      	beq.n	80193f2 <_dtoa_r+0x982>
 80193ea:	4641      	mov	r1, r8
 80193ec:	4620      	mov	r0, r4
 80193ee:	f000 fa4f 	bl	8019890 <_Bfree>
 80193f2:	4639      	mov	r1, r7
 80193f4:	4620      	mov	r0, r4
 80193f6:	f000 fa4b 	bl	8019890 <_Bfree>
 80193fa:	e6a5      	b.n	8019148 <_dtoa_r+0x6d8>
 80193fc:	2600      	movs	r6, #0
 80193fe:	4637      	mov	r7, r6
 8019400:	e7e1      	b.n	80193c6 <_dtoa_r+0x956>
 8019402:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019404:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019408:	4637      	mov	r7, r6
 801940a:	e599      	b.n	8018f40 <_dtoa_r+0x4d0>
 801940c:	9b08      	ldr	r3, [sp, #32]
 801940e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019412:	2b00      	cmp	r3, #0
 8019414:	f000 80fd 	beq.w	8019612 <_dtoa_r+0xba2>
 8019418:	2d00      	cmp	r5, #0
 801941a:	dd05      	ble.n	8019428 <_dtoa_r+0x9b8>
 801941c:	4639      	mov	r1, r7
 801941e:	462a      	mov	r2, r5
 8019420:	4620      	mov	r0, r4
 8019422:	f000 fc07 	bl	8019c34 <__lshift>
 8019426:	4607      	mov	r7, r0
 8019428:	9b06      	ldr	r3, [sp, #24]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d05c      	beq.n	80194e8 <_dtoa_r+0xa78>
 801942e:	6879      	ldr	r1, [r7, #4]
 8019430:	4620      	mov	r0, r4
 8019432:	f000 f9ed 	bl	8019810 <_Balloc>
 8019436:	4605      	mov	r5, r0
 8019438:	b928      	cbnz	r0, 8019446 <_dtoa_r+0x9d6>
 801943a:	4b80      	ldr	r3, [pc, #512]	; (801963c <_dtoa_r+0xbcc>)
 801943c:	4602      	mov	r2, r0
 801943e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019442:	f7ff bb2e 	b.w	8018aa2 <_dtoa_r+0x32>
 8019446:	693a      	ldr	r2, [r7, #16]
 8019448:	3202      	adds	r2, #2
 801944a:	0092      	lsls	r2, r2, #2
 801944c:	f107 010c 	add.w	r1, r7, #12
 8019450:	300c      	adds	r0, #12
 8019452:	f7fe fbfd 	bl	8017c50 <memcpy>
 8019456:	2201      	movs	r2, #1
 8019458:	4629      	mov	r1, r5
 801945a:	4620      	mov	r0, r4
 801945c:	f000 fbea 	bl	8019c34 <__lshift>
 8019460:	9b00      	ldr	r3, [sp, #0]
 8019462:	3301      	adds	r3, #1
 8019464:	9301      	str	r3, [sp, #4]
 8019466:	9b00      	ldr	r3, [sp, #0]
 8019468:	444b      	add	r3, r9
 801946a:	9307      	str	r3, [sp, #28]
 801946c:	9b02      	ldr	r3, [sp, #8]
 801946e:	f003 0301 	and.w	r3, r3, #1
 8019472:	46b8      	mov	r8, r7
 8019474:	9306      	str	r3, [sp, #24]
 8019476:	4607      	mov	r7, r0
 8019478:	9b01      	ldr	r3, [sp, #4]
 801947a:	4631      	mov	r1, r6
 801947c:	3b01      	subs	r3, #1
 801947e:	4658      	mov	r0, fp
 8019480:	9302      	str	r3, [sp, #8]
 8019482:	f7ff fa67 	bl	8018954 <quorem>
 8019486:	4603      	mov	r3, r0
 8019488:	3330      	adds	r3, #48	; 0x30
 801948a:	9004      	str	r0, [sp, #16]
 801948c:	4641      	mov	r1, r8
 801948e:	4658      	mov	r0, fp
 8019490:	9308      	str	r3, [sp, #32]
 8019492:	f000 fc3b 	bl	8019d0c <__mcmp>
 8019496:	463a      	mov	r2, r7
 8019498:	4681      	mov	r9, r0
 801949a:	4631      	mov	r1, r6
 801949c:	4620      	mov	r0, r4
 801949e:	f000 fc51 	bl	8019d44 <__mdiff>
 80194a2:	68c2      	ldr	r2, [r0, #12]
 80194a4:	9b08      	ldr	r3, [sp, #32]
 80194a6:	4605      	mov	r5, r0
 80194a8:	bb02      	cbnz	r2, 80194ec <_dtoa_r+0xa7c>
 80194aa:	4601      	mov	r1, r0
 80194ac:	4658      	mov	r0, fp
 80194ae:	f000 fc2d 	bl	8019d0c <__mcmp>
 80194b2:	9b08      	ldr	r3, [sp, #32]
 80194b4:	4602      	mov	r2, r0
 80194b6:	4629      	mov	r1, r5
 80194b8:	4620      	mov	r0, r4
 80194ba:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80194be:	f000 f9e7 	bl	8019890 <_Bfree>
 80194c2:	9b05      	ldr	r3, [sp, #20]
 80194c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194c6:	9d01      	ldr	r5, [sp, #4]
 80194c8:	ea43 0102 	orr.w	r1, r3, r2
 80194cc:	9b06      	ldr	r3, [sp, #24]
 80194ce:	430b      	orrs	r3, r1
 80194d0:	9b08      	ldr	r3, [sp, #32]
 80194d2:	d10d      	bne.n	80194f0 <_dtoa_r+0xa80>
 80194d4:	2b39      	cmp	r3, #57	; 0x39
 80194d6:	d029      	beq.n	801952c <_dtoa_r+0xabc>
 80194d8:	f1b9 0f00 	cmp.w	r9, #0
 80194dc:	dd01      	ble.n	80194e2 <_dtoa_r+0xa72>
 80194de:	9b04      	ldr	r3, [sp, #16]
 80194e0:	3331      	adds	r3, #49	; 0x31
 80194e2:	9a02      	ldr	r2, [sp, #8]
 80194e4:	7013      	strb	r3, [r2, #0]
 80194e6:	e774      	b.n	80193d2 <_dtoa_r+0x962>
 80194e8:	4638      	mov	r0, r7
 80194ea:	e7b9      	b.n	8019460 <_dtoa_r+0x9f0>
 80194ec:	2201      	movs	r2, #1
 80194ee:	e7e2      	b.n	80194b6 <_dtoa_r+0xa46>
 80194f0:	f1b9 0f00 	cmp.w	r9, #0
 80194f4:	db06      	blt.n	8019504 <_dtoa_r+0xa94>
 80194f6:	9905      	ldr	r1, [sp, #20]
 80194f8:	ea41 0909 	orr.w	r9, r1, r9
 80194fc:	9906      	ldr	r1, [sp, #24]
 80194fe:	ea59 0101 	orrs.w	r1, r9, r1
 8019502:	d120      	bne.n	8019546 <_dtoa_r+0xad6>
 8019504:	2a00      	cmp	r2, #0
 8019506:	ddec      	ble.n	80194e2 <_dtoa_r+0xa72>
 8019508:	4659      	mov	r1, fp
 801950a:	2201      	movs	r2, #1
 801950c:	4620      	mov	r0, r4
 801950e:	9301      	str	r3, [sp, #4]
 8019510:	f000 fb90 	bl	8019c34 <__lshift>
 8019514:	4631      	mov	r1, r6
 8019516:	4683      	mov	fp, r0
 8019518:	f000 fbf8 	bl	8019d0c <__mcmp>
 801951c:	2800      	cmp	r0, #0
 801951e:	9b01      	ldr	r3, [sp, #4]
 8019520:	dc02      	bgt.n	8019528 <_dtoa_r+0xab8>
 8019522:	d1de      	bne.n	80194e2 <_dtoa_r+0xa72>
 8019524:	07da      	lsls	r2, r3, #31
 8019526:	d5dc      	bpl.n	80194e2 <_dtoa_r+0xa72>
 8019528:	2b39      	cmp	r3, #57	; 0x39
 801952a:	d1d8      	bne.n	80194de <_dtoa_r+0xa6e>
 801952c:	9a02      	ldr	r2, [sp, #8]
 801952e:	2339      	movs	r3, #57	; 0x39
 8019530:	7013      	strb	r3, [r2, #0]
 8019532:	462b      	mov	r3, r5
 8019534:	461d      	mov	r5, r3
 8019536:	3b01      	subs	r3, #1
 8019538:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801953c:	2a39      	cmp	r2, #57	; 0x39
 801953e:	d050      	beq.n	80195e2 <_dtoa_r+0xb72>
 8019540:	3201      	adds	r2, #1
 8019542:	701a      	strb	r2, [r3, #0]
 8019544:	e745      	b.n	80193d2 <_dtoa_r+0x962>
 8019546:	2a00      	cmp	r2, #0
 8019548:	dd03      	ble.n	8019552 <_dtoa_r+0xae2>
 801954a:	2b39      	cmp	r3, #57	; 0x39
 801954c:	d0ee      	beq.n	801952c <_dtoa_r+0xabc>
 801954e:	3301      	adds	r3, #1
 8019550:	e7c7      	b.n	80194e2 <_dtoa_r+0xa72>
 8019552:	9a01      	ldr	r2, [sp, #4]
 8019554:	9907      	ldr	r1, [sp, #28]
 8019556:	f802 3c01 	strb.w	r3, [r2, #-1]
 801955a:	428a      	cmp	r2, r1
 801955c:	d02a      	beq.n	80195b4 <_dtoa_r+0xb44>
 801955e:	4659      	mov	r1, fp
 8019560:	2300      	movs	r3, #0
 8019562:	220a      	movs	r2, #10
 8019564:	4620      	mov	r0, r4
 8019566:	f000 f9b5 	bl	80198d4 <__multadd>
 801956a:	45b8      	cmp	r8, r7
 801956c:	4683      	mov	fp, r0
 801956e:	f04f 0300 	mov.w	r3, #0
 8019572:	f04f 020a 	mov.w	r2, #10
 8019576:	4641      	mov	r1, r8
 8019578:	4620      	mov	r0, r4
 801957a:	d107      	bne.n	801958c <_dtoa_r+0xb1c>
 801957c:	f000 f9aa 	bl	80198d4 <__multadd>
 8019580:	4680      	mov	r8, r0
 8019582:	4607      	mov	r7, r0
 8019584:	9b01      	ldr	r3, [sp, #4]
 8019586:	3301      	adds	r3, #1
 8019588:	9301      	str	r3, [sp, #4]
 801958a:	e775      	b.n	8019478 <_dtoa_r+0xa08>
 801958c:	f000 f9a2 	bl	80198d4 <__multadd>
 8019590:	4639      	mov	r1, r7
 8019592:	4680      	mov	r8, r0
 8019594:	2300      	movs	r3, #0
 8019596:	220a      	movs	r2, #10
 8019598:	4620      	mov	r0, r4
 801959a:	f000 f99b 	bl	80198d4 <__multadd>
 801959e:	4607      	mov	r7, r0
 80195a0:	e7f0      	b.n	8019584 <_dtoa_r+0xb14>
 80195a2:	f1b9 0f00 	cmp.w	r9, #0
 80195a6:	9a00      	ldr	r2, [sp, #0]
 80195a8:	bfcc      	ite	gt
 80195aa:	464d      	movgt	r5, r9
 80195ac:	2501      	movle	r5, #1
 80195ae:	4415      	add	r5, r2
 80195b0:	f04f 0800 	mov.w	r8, #0
 80195b4:	4659      	mov	r1, fp
 80195b6:	2201      	movs	r2, #1
 80195b8:	4620      	mov	r0, r4
 80195ba:	9301      	str	r3, [sp, #4]
 80195bc:	f000 fb3a 	bl	8019c34 <__lshift>
 80195c0:	4631      	mov	r1, r6
 80195c2:	4683      	mov	fp, r0
 80195c4:	f000 fba2 	bl	8019d0c <__mcmp>
 80195c8:	2800      	cmp	r0, #0
 80195ca:	dcb2      	bgt.n	8019532 <_dtoa_r+0xac2>
 80195cc:	d102      	bne.n	80195d4 <_dtoa_r+0xb64>
 80195ce:	9b01      	ldr	r3, [sp, #4]
 80195d0:	07db      	lsls	r3, r3, #31
 80195d2:	d4ae      	bmi.n	8019532 <_dtoa_r+0xac2>
 80195d4:	462b      	mov	r3, r5
 80195d6:	461d      	mov	r5, r3
 80195d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80195dc:	2a30      	cmp	r2, #48	; 0x30
 80195de:	d0fa      	beq.n	80195d6 <_dtoa_r+0xb66>
 80195e0:	e6f7      	b.n	80193d2 <_dtoa_r+0x962>
 80195e2:	9a00      	ldr	r2, [sp, #0]
 80195e4:	429a      	cmp	r2, r3
 80195e6:	d1a5      	bne.n	8019534 <_dtoa_r+0xac4>
 80195e8:	f10a 0a01 	add.w	sl, sl, #1
 80195ec:	2331      	movs	r3, #49	; 0x31
 80195ee:	e779      	b.n	80194e4 <_dtoa_r+0xa74>
 80195f0:	4b13      	ldr	r3, [pc, #76]	; (8019640 <_dtoa_r+0xbd0>)
 80195f2:	f7ff baaf 	b.w	8018b54 <_dtoa_r+0xe4>
 80195f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	f47f aa86 	bne.w	8018b0a <_dtoa_r+0x9a>
 80195fe:	4b11      	ldr	r3, [pc, #68]	; (8019644 <_dtoa_r+0xbd4>)
 8019600:	f7ff baa8 	b.w	8018b54 <_dtoa_r+0xe4>
 8019604:	f1b9 0f00 	cmp.w	r9, #0
 8019608:	dc03      	bgt.n	8019612 <_dtoa_r+0xba2>
 801960a:	9b05      	ldr	r3, [sp, #20]
 801960c:	2b02      	cmp	r3, #2
 801960e:	f73f aec9 	bgt.w	80193a4 <_dtoa_r+0x934>
 8019612:	9d00      	ldr	r5, [sp, #0]
 8019614:	4631      	mov	r1, r6
 8019616:	4658      	mov	r0, fp
 8019618:	f7ff f99c 	bl	8018954 <quorem>
 801961c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019620:	f805 3b01 	strb.w	r3, [r5], #1
 8019624:	9a00      	ldr	r2, [sp, #0]
 8019626:	1aaa      	subs	r2, r5, r2
 8019628:	4591      	cmp	r9, r2
 801962a:	ddba      	ble.n	80195a2 <_dtoa_r+0xb32>
 801962c:	4659      	mov	r1, fp
 801962e:	2300      	movs	r3, #0
 8019630:	220a      	movs	r2, #10
 8019632:	4620      	mov	r0, r4
 8019634:	f000 f94e 	bl	80198d4 <__multadd>
 8019638:	4683      	mov	fp, r0
 801963a:	e7eb      	b.n	8019614 <_dtoa_r+0xba4>
 801963c:	0801f4d0 	.word	0x0801f4d0
 8019640:	0801f404 	.word	0x0801f404
 8019644:	0801f44d 	.word	0x0801f44d

08019648 <__sflush_r>:
 8019648:	898a      	ldrh	r2, [r1, #12]
 801964a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801964e:	4605      	mov	r5, r0
 8019650:	0710      	lsls	r0, r2, #28
 8019652:	460c      	mov	r4, r1
 8019654:	d458      	bmi.n	8019708 <__sflush_r+0xc0>
 8019656:	684b      	ldr	r3, [r1, #4]
 8019658:	2b00      	cmp	r3, #0
 801965a:	dc05      	bgt.n	8019668 <__sflush_r+0x20>
 801965c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801965e:	2b00      	cmp	r3, #0
 8019660:	dc02      	bgt.n	8019668 <__sflush_r+0x20>
 8019662:	2000      	movs	r0, #0
 8019664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801966a:	2e00      	cmp	r6, #0
 801966c:	d0f9      	beq.n	8019662 <__sflush_r+0x1a>
 801966e:	2300      	movs	r3, #0
 8019670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019674:	682f      	ldr	r7, [r5, #0]
 8019676:	602b      	str	r3, [r5, #0]
 8019678:	d032      	beq.n	80196e0 <__sflush_r+0x98>
 801967a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801967c:	89a3      	ldrh	r3, [r4, #12]
 801967e:	075a      	lsls	r2, r3, #29
 8019680:	d505      	bpl.n	801968e <__sflush_r+0x46>
 8019682:	6863      	ldr	r3, [r4, #4]
 8019684:	1ac0      	subs	r0, r0, r3
 8019686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019688:	b10b      	cbz	r3, 801968e <__sflush_r+0x46>
 801968a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801968c:	1ac0      	subs	r0, r0, r3
 801968e:	2300      	movs	r3, #0
 8019690:	4602      	mov	r2, r0
 8019692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019694:	6a21      	ldr	r1, [r4, #32]
 8019696:	4628      	mov	r0, r5
 8019698:	47b0      	blx	r6
 801969a:	1c43      	adds	r3, r0, #1
 801969c:	89a3      	ldrh	r3, [r4, #12]
 801969e:	d106      	bne.n	80196ae <__sflush_r+0x66>
 80196a0:	6829      	ldr	r1, [r5, #0]
 80196a2:	291d      	cmp	r1, #29
 80196a4:	d82c      	bhi.n	8019700 <__sflush_r+0xb8>
 80196a6:	4a2a      	ldr	r2, [pc, #168]	; (8019750 <__sflush_r+0x108>)
 80196a8:	40ca      	lsrs	r2, r1
 80196aa:	07d6      	lsls	r6, r2, #31
 80196ac:	d528      	bpl.n	8019700 <__sflush_r+0xb8>
 80196ae:	2200      	movs	r2, #0
 80196b0:	6062      	str	r2, [r4, #4]
 80196b2:	04d9      	lsls	r1, r3, #19
 80196b4:	6922      	ldr	r2, [r4, #16]
 80196b6:	6022      	str	r2, [r4, #0]
 80196b8:	d504      	bpl.n	80196c4 <__sflush_r+0x7c>
 80196ba:	1c42      	adds	r2, r0, #1
 80196bc:	d101      	bne.n	80196c2 <__sflush_r+0x7a>
 80196be:	682b      	ldr	r3, [r5, #0]
 80196c0:	b903      	cbnz	r3, 80196c4 <__sflush_r+0x7c>
 80196c2:	6560      	str	r0, [r4, #84]	; 0x54
 80196c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196c6:	602f      	str	r7, [r5, #0]
 80196c8:	2900      	cmp	r1, #0
 80196ca:	d0ca      	beq.n	8019662 <__sflush_r+0x1a>
 80196cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80196d0:	4299      	cmp	r1, r3
 80196d2:	d002      	beq.n	80196da <__sflush_r+0x92>
 80196d4:	4628      	mov	r0, r5
 80196d6:	f7fe fad1 	bl	8017c7c <_free_r>
 80196da:	2000      	movs	r0, #0
 80196dc:	6360      	str	r0, [r4, #52]	; 0x34
 80196de:	e7c1      	b.n	8019664 <__sflush_r+0x1c>
 80196e0:	6a21      	ldr	r1, [r4, #32]
 80196e2:	2301      	movs	r3, #1
 80196e4:	4628      	mov	r0, r5
 80196e6:	47b0      	blx	r6
 80196e8:	1c41      	adds	r1, r0, #1
 80196ea:	d1c7      	bne.n	801967c <__sflush_r+0x34>
 80196ec:	682b      	ldr	r3, [r5, #0]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d0c4      	beq.n	801967c <__sflush_r+0x34>
 80196f2:	2b1d      	cmp	r3, #29
 80196f4:	d001      	beq.n	80196fa <__sflush_r+0xb2>
 80196f6:	2b16      	cmp	r3, #22
 80196f8:	d101      	bne.n	80196fe <__sflush_r+0xb6>
 80196fa:	602f      	str	r7, [r5, #0]
 80196fc:	e7b1      	b.n	8019662 <__sflush_r+0x1a>
 80196fe:	89a3      	ldrh	r3, [r4, #12]
 8019700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019704:	81a3      	strh	r3, [r4, #12]
 8019706:	e7ad      	b.n	8019664 <__sflush_r+0x1c>
 8019708:	690f      	ldr	r7, [r1, #16]
 801970a:	2f00      	cmp	r7, #0
 801970c:	d0a9      	beq.n	8019662 <__sflush_r+0x1a>
 801970e:	0793      	lsls	r3, r2, #30
 8019710:	680e      	ldr	r6, [r1, #0]
 8019712:	bf08      	it	eq
 8019714:	694b      	ldreq	r3, [r1, #20]
 8019716:	600f      	str	r7, [r1, #0]
 8019718:	bf18      	it	ne
 801971a:	2300      	movne	r3, #0
 801971c:	eba6 0807 	sub.w	r8, r6, r7
 8019720:	608b      	str	r3, [r1, #8]
 8019722:	f1b8 0f00 	cmp.w	r8, #0
 8019726:	dd9c      	ble.n	8019662 <__sflush_r+0x1a>
 8019728:	6a21      	ldr	r1, [r4, #32]
 801972a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801972c:	4643      	mov	r3, r8
 801972e:	463a      	mov	r2, r7
 8019730:	4628      	mov	r0, r5
 8019732:	47b0      	blx	r6
 8019734:	2800      	cmp	r0, #0
 8019736:	dc06      	bgt.n	8019746 <__sflush_r+0xfe>
 8019738:	89a3      	ldrh	r3, [r4, #12]
 801973a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801973e:	81a3      	strh	r3, [r4, #12]
 8019740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019744:	e78e      	b.n	8019664 <__sflush_r+0x1c>
 8019746:	4407      	add	r7, r0
 8019748:	eba8 0800 	sub.w	r8, r8, r0
 801974c:	e7e9      	b.n	8019722 <__sflush_r+0xda>
 801974e:	bf00      	nop
 8019750:	20400001 	.word	0x20400001

08019754 <_fflush_r>:
 8019754:	b538      	push	{r3, r4, r5, lr}
 8019756:	690b      	ldr	r3, [r1, #16]
 8019758:	4605      	mov	r5, r0
 801975a:	460c      	mov	r4, r1
 801975c:	b913      	cbnz	r3, 8019764 <_fflush_r+0x10>
 801975e:	2500      	movs	r5, #0
 8019760:	4628      	mov	r0, r5
 8019762:	bd38      	pop	{r3, r4, r5, pc}
 8019764:	b118      	cbz	r0, 801976e <_fflush_r+0x1a>
 8019766:	6983      	ldr	r3, [r0, #24]
 8019768:	b90b      	cbnz	r3, 801976e <_fflush_r+0x1a>
 801976a:	f7fe f981 	bl	8017a70 <__sinit>
 801976e:	4b14      	ldr	r3, [pc, #80]	; (80197c0 <_fflush_r+0x6c>)
 8019770:	429c      	cmp	r4, r3
 8019772:	d11b      	bne.n	80197ac <_fflush_r+0x58>
 8019774:	686c      	ldr	r4, [r5, #4]
 8019776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d0ef      	beq.n	801975e <_fflush_r+0xa>
 801977e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019780:	07d0      	lsls	r0, r2, #31
 8019782:	d404      	bmi.n	801978e <_fflush_r+0x3a>
 8019784:	0599      	lsls	r1, r3, #22
 8019786:	d402      	bmi.n	801978e <_fflush_r+0x3a>
 8019788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801978a:	f7fe fa4e 	bl	8017c2a <__retarget_lock_acquire_recursive>
 801978e:	4628      	mov	r0, r5
 8019790:	4621      	mov	r1, r4
 8019792:	f7ff ff59 	bl	8019648 <__sflush_r>
 8019796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019798:	07da      	lsls	r2, r3, #31
 801979a:	4605      	mov	r5, r0
 801979c:	d4e0      	bmi.n	8019760 <_fflush_r+0xc>
 801979e:	89a3      	ldrh	r3, [r4, #12]
 80197a0:	059b      	lsls	r3, r3, #22
 80197a2:	d4dd      	bmi.n	8019760 <_fflush_r+0xc>
 80197a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80197a6:	f7fe fa41 	bl	8017c2c <__retarget_lock_release_recursive>
 80197aa:	e7d9      	b.n	8019760 <_fflush_r+0xc>
 80197ac:	4b05      	ldr	r3, [pc, #20]	; (80197c4 <_fflush_r+0x70>)
 80197ae:	429c      	cmp	r4, r3
 80197b0:	d101      	bne.n	80197b6 <_fflush_r+0x62>
 80197b2:	68ac      	ldr	r4, [r5, #8]
 80197b4:	e7df      	b.n	8019776 <_fflush_r+0x22>
 80197b6:	4b04      	ldr	r3, [pc, #16]	; (80197c8 <_fflush_r+0x74>)
 80197b8:	429c      	cmp	r4, r3
 80197ba:	bf08      	it	eq
 80197bc:	68ec      	ldreq	r4, [r5, #12]
 80197be:	e7da      	b.n	8019776 <_fflush_r+0x22>
 80197c0:	0801f3b0 	.word	0x0801f3b0
 80197c4:	0801f3d0 	.word	0x0801f3d0
 80197c8:	0801f390 	.word	0x0801f390

080197cc <_localeconv_r>:
 80197cc:	4800      	ldr	r0, [pc, #0]	; (80197d0 <_localeconv_r+0x4>)
 80197ce:	4770      	bx	lr
 80197d0:	2000031c 	.word	0x2000031c

080197d4 <_lseek_r>:
 80197d4:	b538      	push	{r3, r4, r5, lr}
 80197d6:	4d07      	ldr	r5, [pc, #28]	; (80197f4 <_lseek_r+0x20>)
 80197d8:	4604      	mov	r4, r0
 80197da:	4608      	mov	r0, r1
 80197dc:	4611      	mov	r1, r2
 80197de:	2200      	movs	r2, #0
 80197e0:	602a      	str	r2, [r5, #0]
 80197e2:	461a      	mov	r2, r3
 80197e4:	f7eb fb54 	bl	8004e90 <_lseek>
 80197e8:	1c43      	adds	r3, r0, #1
 80197ea:	d102      	bne.n	80197f2 <_lseek_r+0x1e>
 80197ec:	682b      	ldr	r3, [r5, #0]
 80197ee:	b103      	cbz	r3, 80197f2 <_lseek_r+0x1e>
 80197f0:	6023      	str	r3, [r4, #0]
 80197f2:	bd38      	pop	{r3, r4, r5, pc}
 80197f4:	2001498c 	.word	0x2001498c

080197f8 <__malloc_lock>:
 80197f8:	4801      	ldr	r0, [pc, #4]	; (8019800 <__malloc_lock+0x8>)
 80197fa:	f7fe ba16 	b.w	8017c2a <__retarget_lock_acquire_recursive>
 80197fe:	bf00      	nop
 8019800:	20014984 	.word	0x20014984

08019804 <__malloc_unlock>:
 8019804:	4801      	ldr	r0, [pc, #4]	; (801980c <__malloc_unlock+0x8>)
 8019806:	f7fe ba11 	b.w	8017c2c <__retarget_lock_release_recursive>
 801980a:	bf00      	nop
 801980c:	20014984 	.word	0x20014984

08019810 <_Balloc>:
 8019810:	b570      	push	{r4, r5, r6, lr}
 8019812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019814:	4604      	mov	r4, r0
 8019816:	460d      	mov	r5, r1
 8019818:	b976      	cbnz	r6, 8019838 <_Balloc+0x28>
 801981a:	2010      	movs	r0, #16
 801981c:	f7fe fa08 	bl	8017c30 <malloc>
 8019820:	4602      	mov	r2, r0
 8019822:	6260      	str	r0, [r4, #36]	; 0x24
 8019824:	b920      	cbnz	r0, 8019830 <_Balloc+0x20>
 8019826:	4b18      	ldr	r3, [pc, #96]	; (8019888 <_Balloc+0x78>)
 8019828:	4818      	ldr	r0, [pc, #96]	; (801988c <_Balloc+0x7c>)
 801982a:	2166      	movs	r1, #102	; 0x66
 801982c:	f000 fcea 	bl	801a204 <__assert_func>
 8019830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019834:	6006      	str	r6, [r0, #0]
 8019836:	60c6      	str	r6, [r0, #12]
 8019838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801983a:	68f3      	ldr	r3, [r6, #12]
 801983c:	b183      	cbz	r3, 8019860 <_Balloc+0x50>
 801983e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019846:	b9b8      	cbnz	r0, 8019878 <_Balloc+0x68>
 8019848:	2101      	movs	r1, #1
 801984a:	fa01 f605 	lsl.w	r6, r1, r5
 801984e:	1d72      	adds	r2, r6, #5
 8019850:	0092      	lsls	r2, r2, #2
 8019852:	4620      	mov	r0, r4
 8019854:	f000 fb5a 	bl	8019f0c <_calloc_r>
 8019858:	b160      	cbz	r0, 8019874 <_Balloc+0x64>
 801985a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801985e:	e00e      	b.n	801987e <_Balloc+0x6e>
 8019860:	2221      	movs	r2, #33	; 0x21
 8019862:	2104      	movs	r1, #4
 8019864:	4620      	mov	r0, r4
 8019866:	f000 fb51 	bl	8019f0c <_calloc_r>
 801986a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801986c:	60f0      	str	r0, [r6, #12]
 801986e:	68db      	ldr	r3, [r3, #12]
 8019870:	2b00      	cmp	r3, #0
 8019872:	d1e4      	bne.n	801983e <_Balloc+0x2e>
 8019874:	2000      	movs	r0, #0
 8019876:	bd70      	pop	{r4, r5, r6, pc}
 8019878:	6802      	ldr	r2, [r0, #0]
 801987a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801987e:	2300      	movs	r3, #0
 8019880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019884:	e7f7      	b.n	8019876 <_Balloc+0x66>
 8019886:	bf00      	nop
 8019888:	0801f45a 	.word	0x0801f45a
 801988c:	0801f4e1 	.word	0x0801f4e1

08019890 <_Bfree>:
 8019890:	b570      	push	{r4, r5, r6, lr}
 8019892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019894:	4605      	mov	r5, r0
 8019896:	460c      	mov	r4, r1
 8019898:	b976      	cbnz	r6, 80198b8 <_Bfree+0x28>
 801989a:	2010      	movs	r0, #16
 801989c:	f7fe f9c8 	bl	8017c30 <malloc>
 80198a0:	4602      	mov	r2, r0
 80198a2:	6268      	str	r0, [r5, #36]	; 0x24
 80198a4:	b920      	cbnz	r0, 80198b0 <_Bfree+0x20>
 80198a6:	4b09      	ldr	r3, [pc, #36]	; (80198cc <_Bfree+0x3c>)
 80198a8:	4809      	ldr	r0, [pc, #36]	; (80198d0 <_Bfree+0x40>)
 80198aa:	218a      	movs	r1, #138	; 0x8a
 80198ac:	f000 fcaa 	bl	801a204 <__assert_func>
 80198b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80198b4:	6006      	str	r6, [r0, #0]
 80198b6:	60c6      	str	r6, [r0, #12]
 80198b8:	b13c      	cbz	r4, 80198ca <_Bfree+0x3a>
 80198ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80198bc:	6862      	ldr	r2, [r4, #4]
 80198be:	68db      	ldr	r3, [r3, #12]
 80198c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80198c4:	6021      	str	r1, [r4, #0]
 80198c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80198ca:	bd70      	pop	{r4, r5, r6, pc}
 80198cc:	0801f45a 	.word	0x0801f45a
 80198d0:	0801f4e1 	.word	0x0801f4e1

080198d4 <__multadd>:
 80198d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198d8:	690e      	ldr	r6, [r1, #16]
 80198da:	4607      	mov	r7, r0
 80198dc:	4698      	mov	r8, r3
 80198de:	460c      	mov	r4, r1
 80198e0:	f101 0014 	add.w	r0, r1, #20
 80198e4:	2300      	movs	r3, #0
 80198e6:	6805      	ldr	r5, [r0, #0]
 80198e8:	b2a9      	uxth	r1, r5
 80198ea:	fb02 8101 	mla	r1, r2, r1, r8
 80198ee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80198f2:	0c2d      	lsrs	r5, r5, #16
 80198f4:	fb02 c505 	mla	r5, r2, r5, ip
 80198f8:	b289      	uxth	r1, r1
 80198fa:	3301      	adds	r3, #1
 80198fc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019900:	429e      	cmp	r6, r3
 8019902:	f840 1b04 	str.w	r1, [r0], #4
 8019906:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801990a:	dcec      	bgt.n	80198e6 <__multadd+0x12>
 801990c:	f1b8 0f00 	cmp.w	r8, #0
 8019910:	d022      	beq.n	8019958 <__multadd+0x84>
 8019912:	68a3      	ldr	r3, [r4, #8]
 8019914:	42b3      	cmp	r3, r6
 8019916:	dc19      	bgt.n	801994c <__multadd+0x78>
 8019918:	6861      	ldr	r1, [r4, #4]
 801991a:	4638      	mov	r0, r7
 801991c:	3101      	adds	r1, #1
 801991e:	f7ff ff77 	bl	8019810 <_Balloc>
 8019922:	4605      	mov	r5, r0
 8019924:	b928      	cbnz	r0, 8019932 <__multadd+0x5e>
 8019926:	4602      	mov	r2, r0
 8019928:	4b0d      	ldr	r3, [pc, #52]	; (8019960 <__multadd+0x8c>)
 801992a:	480e      	ldr	r0, [pc, #56]	; (8019964 <__multadd+0x90>)
 801992c:	21b5      	movs	r1, #181	; 0xb5
 801992e:	f000 fc69 	bl	801a204 <__assert_func>
 8019932:	6922      	ldr	r2, [r4, #16]
 8019934:	3202      	adds	r2, #2
 8019936:	f104 010c 	add.w	r1, r4, #12
 801993a:	0092      	lsls	r2, r2, #2
 801993c:	300c      	adds	r0, #12
 801993e:	f7fe f987 	bl	8017c50 <memcpy>
 8019942:	4621      	mov	r1, r4
 8019944:	4638      	mov	r0, r7
 8019946:	f7ff ffa3 	bl	8019890 <_Bfree>
 801994a:	462c      	mov	r4, r5
 801994c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019950:	3601      	adds	r6, #1
 8019952:	f8c3 8014 	str.w	r8, [r3, #20]
 8019956:	6126      	str	r6, [r4, #16]
 8019958:	4620      	mov	r0, r4
 801995a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801995e:	bf00      	nop
 8019960:	0801f4d0 	.word	0x0801f4d0
 8019964:	0801f4e1 	.word	0x0801f4e1

08019968 <__hi0bits>:
 8019968:	0c03      	lsrs	r3, r0, #16
 801996a:	041b      	lsls	r3, r3, #16
 801996c:	b9d3      	cbnz	r3, 80199a4 <__hi0bits+0x3c>
 801996e:	0400      	lsls	r0, r0, #16
 8019970:	2310      	movs	r3, #16
 8019972:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019976:	bf04      	itt	eq
 8019978:	0200      	lsleq	r0, r0, #8
 801997a:	3308      	addeq	r3, #8
 801997c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019980:	bf04      	itt	eq
 8019982:	0100      	lsleq	r0, r0, #4
 8019984:	3304      	addeq	r3, #4
 8019986:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801998a:	bf04      	itt	eq
 801998c:	0080      	lsleq	r0, r0, #2
 801998e:	3302      	addeq	r3, #2
 8019990:	2800      	cmp	r0, #0
 8019992:	db05      	blt.n	80199a0 <__hi0bits+0x38>
 8019994:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019998:	f103 0301 	add.w	r3, r3, #1
 801999c:	bf08      	it	eq
 801999e:	2320      	moveq	r3, #32
 80199a0:	4618      	mov	r0, r3
 80199a2:	4770      	bx	lr
 80199a4:	2300      	movs	r3, #0
 80199a6:	e7e4      	b.n	8019972 <__hi0bits+0xa>

080199a8 <__lo0bits>:
 80199a8:	6803      	ldr	r3, [r0, #0]
 80199aa:	f013 0207 	ands.w	r2, r3, #7
 80199ae:	4601      	mov	r1, r0
 80199b0:	d00b      	beq.n	80199ca <__lo0bits+0x22>
 80199b2:	07da      	lsls	r2, r3, #31
 80199b4:	d424      	bmi.n	8019a00 <__lo0bits+0x58>
 80199b6:	0798      	lsls	r0, r3, #30
 80199b8:	bf49      	itett	mi
 80199ba:	085b      	lsrmi	r3, r3, #1
 80199bc:	089b      	lsrpl	r3, r3, #2
 80199be:	2001      	movmi	r0, #1
 80199c0:	600b      	strmi	r3, [r1, #0]
 80199c2:	bf5c      	itt	pl
 80199c4:	600b      	strpl	r3, [r1, #0]
 80199c6:	2002      	movpl	r0, #2
 80199c8:	4770      	bx	lr
 80199ca:	b298      	uxth	r0, r3
 80199cc:	b9b0      	cbnz	r0, 80199fc <__lo0bits+0x54>
 80199ce:	0c1b      	lsrs	r3, r3, #16
 80199d0:	2010      	movs	r0, #16
 80199d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80199d6:	bf04      	itt	eq
 80199d8:	0a1b      	lsreq	r3, r3, #8
 80199da:	3008      	addeq	r0, #8
 80199dc:	071a      	lsls	r2, r3, #28
 80199de:	bf04      	itt	eq
 80199e0:	091b      	lsreq	r3, r3, #4
 80199e2:	3004      	addeq	r0, #4
 80199e4:	079a      	lsls	r2, r3, #30
 80199e6:	bf04      	itt	eq
 80199e8:	089b      	lsreq	r3, r3, #2
 80199ea:	3002      	addeq	r0, #2
 80199ec:	07da      	lsls	r2, r3, #31
 80199ee:	d403      	bmi.n	80199f8 <__lo0bits+0x50>
 80199f0:	085b      	lsrs	r3, r3, #1
 80199f2:	f100 0001 	add.w	r0, r0, #1
 80199f6:	d005      	beq.n	8019a04 <__lo0bits+0x5c>
 80199f8:	600b      	str	r3, [r1, #0]
 80199fa:	4770      	bx	lr
 80199fc:	4610      	mov	r0, r2
 80199fe:	e7e8      	b.n	80199d2 <__lo0bits+0x2a>
 8019a00:	2000      	movs	r0, #0
 8019a02:	4770      	bx	lr
 8019a04:	2020      	movs	r0, #32
 8019a06:	4770      	bx	lr

08019a08 <__i2b>:
 8019a08:	b510      	push	{r4, lr}
 8019a0a:	460c      	mov	r4, r1
 8019a0c:	2101      	movs	r1, #1
 8019a0e:	f7ff feff 	bl	8019810 <_Balloc>
 8019a12:	4602      	mov	r2, r0
 8019a14:	b928      	cbnz	r0, 8019a22 <__i2b+0x1a>
 8019a16:	4b05      	ldr	r3, [pc, #20]	; (8019a2c <__i2b+0x24>)
 8019a18:	4805      	ldr	r0, [pc, #20]	; (8019a30 <__i2b+0x28>)
 8019a1a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019a1e:	f000 fbf1 	bl	801a204 <__assert_func>
 8019a22:	2301      	movs	r3, #1
 8019a24:	6144      	str	r4, [r0, #20]
 8019a26:	6103      	str	r3, [r0, #16]
 8019a28:	bd10      	pop	{r4, pc}
 8019a2a:	bf00      	nop
 8019a2c:	0801f4d0 	.word	0x0801f4d0
 8019a30:	0801f4e1 	.word	0x0801f4e1

08019a34 <__multiply>:
 8019a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a38:	4614      	mov	r4, r2
 8019a3a:	690a      	ldr	r2, [r1, #16]
 8019a3c:	6923      	ldr	r3, [r4, #16]
 8019a3e:	429a      	cmp	r2, r3
 8019a40:	bfb8      	it	lt
 8019a42:	460b      	movlt	r3, r1
 8019a44:	460d      	mov	r5, r1
 8019a46:	bfbc      	itt	lt
 8019a48:	4625      	movlt	r5, r4
 8019a4a:	461c      	movlt	r4, r3
 8019a4c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019a50:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019a54:	68ab      	ldr	r3, [r5, #8]
 8019a56:	6869      	ldr	r1, [r5, #4]
 8019a58:	eb0a 0709 	add.w	r7, sl, r9
 8019a5c:	42bb      	cmp	r3, r7
 8019a5e:	b085      	sub	sp, #20
 8019a60:	bfb8      	it	lt
 8019a62:	3101      	addlt	r1, #1
 8019a64:	f7ff fed4 	bl	8019810 <_Balloc>
 8019a68:	b930      	cbnz	r0, 8019a78 <__multiply+0x44>
 8019a6a:	4602      	mov	r2, r0
 8019a6c:	4b42      	ldr	r3, [pc, #264]	; (8019b78 <__multiply+0x144>)
 8019a6e:	4843      	ldr	r0, [pc, #268]	; (8019b7c <__multiply+0x148>)
 8019a70:	f240 115d 	movw	r1, #349	; 0x15d
 8019a74:	f000 fbc6 	bl	801a204 <__assert_func>
 8019a78:	f100 0614 	add.w	r6, r0, #20
 8019a7c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019a80:	4633      	mov	r3, r6
 8019a82:	2200      	movs	r2, #0
 8019a84:	4543      	cmp	r3, r8
 8019a86:	d31e      	bcc.n	8019ac6 <__multiply+0x92>
 8019a88:	f105 0c14 	add.w	ip, r5, #20
 8019a8c:	f104 0314 	add.w	r3, r4, #20
 8019a90:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019a94:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019a98:	9202      	str	r2, [sp, #8]
 8019a9a:	ebac 0205 	sub.w	r2, ip, r5
 8019a9e:	3a15      	subs	r2, #21
 8019aa0:	f022 0203 	bic.w	r2, r2, #3
 8019aa4:	3204      	adds	r2, #4
 8019aa6:	f105 0115 	add.w	r1, r5, #21
 8019aaa:	458c      	cmp	ip, r1
 8019aac:	bf38      	it	cc
 8019aae:	2204      	movcc	r2, #4
 8019ab0:	9201      	str	r2, [sp, #4]
 8019ab2:	9a02      	ldr	r2, [sp, #8]
 8019ab4:	9303      	str	r3, [sp, #12]
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d808      	bhi.n	8019acc <__multiply+0x98>
 8019aba:	2f00      	cmp	r7, #0
 8019abc:	dc55      	bgt.n	8019b6a <__multiply+0x136>
 8019abe:	6107      	str	r7, [r0, #16]
 8019ac0:	b005      	add	sp, #20
 8019ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ac6:	f843 2b04 	str.w	r2, [r3], #4
 8019aca:	e7db      	b.n	8019a84 <__multiply+0x50>
 8019acc:	f8b3 a000 	ldrh.w	sl, [r3]
 8019ad0:	f1ba 0f00 	cmp.w	sl, #0
 8019ad4:	d020      	beq.n	8019b18 <__multiply+0xe4>
 8019ad6:	f105 0e14 	add.w	lr, r5, #20
 8019ada:	46b1      	mov	r9, r6
 8019adc:	2200      	movs	r2, #0
 8019ade:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019ae2:	f8d9 b000 	ldr.w	fp, [r9]
 8019ae6:	b2a1      	uxth	r1, r4
 8019ae8:	fa1f fb8b 	uxth.w	fp, fp
 8019aec:	fb0a b101 	mla	r1, sl, r1, fp
 8019af0:	4411      	add	r1, r2
 8019af2:	f8d9 2000 	ldr.w	r2, [r9]
 8019af6:	0c24      	lsrs	r4, r4, #16
 8019af8:	0c12      	lsrs	r2, r2, #16
 8019afa:	fb0a 2404 	mla	r4, sl, r4, r2
 8019afe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019b02:	b289      	uxth	r1, r1
 8019b04:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019b08:	45f4      	cmp	ip, lr
 8019b0a:	f849 1b04 	str.w	r1, [r9], #4
 8019b0e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019b12:	d8e4      	bhi.n	8019ade <__multiply+0xaa>
 8019b14:	9901      	ldr	r1, [sp, #4]
 8019b16:	5072      	str	r2, [r6, r1]
 8019b18:	9a03      	ldr	r2, [sp, #12]
 8019b1a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019b1e:	3304      	adds	r3, #4
 8019b20:	f1b9 0f00 	cmp.w	r9, #0
 8019b24:	d01f      	beq.n	8019b66 <__multiply+0x132>
 8019b26:	6834      	ldr	r4, [r6, #0]
 8019b28:	f105 0114 	add.w	r1, r5, #20
 8019b2c:	46b6      	mov	lr, r6
 8019b2e:	f04f 0a00 	mov.w	sl, #0
 8019b32:	880a      	ldrh	r2, [r1, #0]
 8019b34:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019b38:	fb09 b202 	mla	r2, r9, r2, fp
 8019b3c:	4492      	add	sl, r2
 8019b3e:	b2a4      	uxth	r4, r4
 8019b40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019b44:	f84e 4b04 	str.w	r4, [lr], #4
 8019b48:	f851 4b04 	ldr.w	r4, [r1], #4
 8019b4c:	f8be 2000 	ldrh.w	r2, [lr]
 8019b50:	0c24      	lsrs	r4, r4, #16
 8019b52:	fb09 2404 	mla	r4, r9, r4, r2
 8019b56:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019b5a:	458c      	cmp	ip, r1
 8019b5c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019b60:	d8e7      	bhi.n	8019b32 <__multiply+0xfe>
 8019b62:	9a01      	ldr	r2, [sp, #4]
 8019b64:	50b4      	str	r4, [r6, r2]
 8019b66:	3604      	adds	r6, #4
 8019b68:	e7a3      	b.n	8019ab2 <__multiply+0x7e>
 8019b6a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d1a5      	bne.n	8019abe <__multiply+0x8a>
 8019b72:	3f01      	subs	r7, #1
 8019b74:	e7a1      	b.n	8019aba <__multiply+0x86>
 8019b76:	bf00      	nop
 8019b78:	0801f4d0 	.word	0x0801f4d0
 8019b7c:	0801f4e1 	.word	0x0801f4e1

08019b80 <__pow5mult>:
 8019b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b84:	4615      	mov	r5, r2
 8019b86:	f012 0203 	ands.w	r2, r2, #3
 8019b8a:	4606      	mov	r6, r0
 8019b8c:	460f      	mov	r7, r1
 8019b8e:	d007      	beq.n	8019ba0 <__pow5mult+0x20>
 8019b90:	4c25      	ldr	r4, [pc, #148]	; (8019c28 <__pow5mult+0xa8>)
 8019b92:	3a01      	subs	r2, #1
 8019b94:	2300      	movs	r3, #0
 8019b96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019b9a:	f7ff fe9b 	bl	80198d4 <__multadd>
 8019b9e:	4607      	mov	r7, r0
 8019ba0:	10ad      	asrs	r5, r5, #2
 8019ba2:	d03d      	beq.n	8019c20 <__pow5mult+0xa0>
 8019ba4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019ba6:	b97c      	cbnz	r4, 8019bc8 <__pow5mult+0x48>
 8019ba8:	2010      	movs	r0, #16
 8019baa:	f7fe f841 	bl	8017c30 <malloc>
 8019bae:	4602      	mov	r2, r0
 8019bb0:	6270      	str	r0, [r6, #36]	; 0x24
 8019bb2:	b928      	cbnz	r0, 8019bc0 <__pow5mult+0x40>
 8019bb4:	4b1d      	ldr	r3, [pc, #116]	; (8019c2c <__pow5mult+0xac>)
 8019bb6:	481e      	ldr	r0, [pc, #120]	; (8019c30 <__pow5mult+0xb0>)
 8019bb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019bbc:	f000 fb22 	bl	801a204 <__assert_func>
 8019bc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019bc4:	6004      	str	r4, [r0, #0]
 8019bc6:	60c4      	str	r4, [r0, #12]
 8019bc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019bcc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019bd0:	b94c      	cbnz	r4, 8019be6 <__pow5mult+0x66>
 8019bd2:	f240 2171 	movw	r1, #625	; 0x271
 8019bd6:	4630      	mov	r0, r6
 8019bd8:	f7ff ff16 	bl	8019a08 <__i2b>
 8019bdc:	2300      	movs	r3, #0
 8019bde:	f8c8 0008 	str.w	r0, [r8, #8]
 8019be2:	4604      	mov	r4, r0
 8019be4:	6003      	str	r3, [r0, #0]
 8019be6:	f04f 0900 	mov.w	r9, #0
 8019bea:	07eb      	lsls	r3, r5, #31
 8019bec:	d50a      	bpl.n	8019c04 <__pow5mult+0x84>
 8019bee:	4639      	mov	r1, r7
 8019bf0:	4622      	mov	r2, r4
 8019bf2:	4630      	mov	r0, r6
 8019bf4:	f7ff ff1e 	bl	8019a34 <__multiply>
 8019bf8:	4639      	mov	r1, r7
 8019bfa:	4680      	mov	r8, r0
 8019bfc:	4630      	mov	r0, r6
 8019bfe:	f7ff fe47 	bl	8019890 <_Bfree>
 8019c02:	4647      	mov	r7, r8
 8019c04:	106d      	asrs	r5, r5, #1
 8019c06:	d00b      	beq.n	8019c20 <__pow5mult+0xa0>
 8019c08:	6820      	ldr	r0, [r4, #0]
 8019c0a:	b938      	cbnz	r0, 8019c1c <__pow5mult+0x9c>
 8019c0c:	4622      	mov	r2, r4
 8019c0e:	4621      	mov	r1, r4
 8019c10:	4630      	mov	r0, r6
 8019c12:	f7ff ff0f 	bl	8019a34 <__multiply>
 8019c16:	6020      	str	r0, [r4, #0]
 8019c18:	f8c0 9000 	str.w	r9, [r0]
 8019c1c:	4604      	mov	r4, r0
 8019c1e:	e7e4      	b.n	8019bea <__pow5mult+0x6a>
 8019c20:	4638      	mov	r0, r7
 8019c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019c26:	bf00      	nop
 8019c28:	0801f638 	.word	0x0801f638
 8019c2c:	0801f45a 	.word	0x0801f45a
 8019c30:	0801f4e1 	.word	0x0801f4e1

08019c34 <__lshift>:
 8019c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c38:	460c      	mov	r4, r1
 8019c3a:	6849      	ldr	r1, [r1, #4]
 8019c3c:	6923      	ldr	r3, [r4, #16]
 8019c3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019c42:	68a3      	ldr	r3, [r4, #8]
 8019c44:	4607      	mov	r7, r0
 8019c46:	4691      	mov	r9, r2
 8019c48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019c4c:	f108 0601 	add.w	r6, r8, #1
 8019c50:	42b3      	cmp	r3, r6
 8019c52:	db0b      	blt.n	8019c6c <__lshift+0x38>
 8019c54:	4638      	mov	r0, r7
 8019c56:	f7ff fddb 	bl	8019810 <_Balloc>
 8019c5a:	4605      	mov	r5, r0
 8019c5c:	b948      	cbnz	r0, 8019c72 <__lshift+0x3e>
 8019c5e:	4602      	mov	r2, r0
 8019c60:	4b28      	ldr	r3, [pc, #160]	; (8019d04 <__lshift+0xd0>)
 8019c62:	4829      	ldr	r0, [pc, #164]	; (8019d08 <__lshift+0xd4>)
 8019c64:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019c68:	f000 facc 	bl	801a204 <__assert_func>
 8019c6c:	3101      	adds	r1, #1
 8019c6e:	005b      	lsls	r3, r3, #1
 8019c70:	e7ee      	b.n	8019c50 <__lshift+0x1c>
 8019c72:	2300      	movs	r3, #0
 8019c74:	f100 0114 	add.w	r1, r0, #20
 8019c78:	f100 0210 	add.w	r2, r0, #16
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	4553      	cmp	r3, sl
 8019c80:	db33      	blt.n	8019cea <__lshift+0xb6>
 8019c82:	6920      	ldr	r0, [r4, #16]
 8019c84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019c88:	f104 0314 	add.w	r3, r4, #20
 8019c8c:	f019 091f 	ands.w	r9, r9, #31
 8019c90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019c94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019c98:	d02b      	beq.n	8019cf2 <__lshift+0xbe>
 8019c9a:	f1c9 0e20 	rsb	lr, r9, #32
 8019c9e:	468a      	mov	sl, r1
 8019ca0:	2200      	movs	r2, #0
 8019ca2:	6818      	ldr	r0, [r3, #0]
 8019ca4:	fa00 f009 	lsl.w	r0, r0, r9
 8019ca8:	4302      	orrs	r2, r0
 8019caa:	f84a 2b04 	str.w	r2, [sl], #4
 8019cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cb2:	459c      	cmp	ip, r3
 8019cb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8019cb8:	d8f3      	bhi.n	8019ca2 <__lshift+0x6e>
 8019cba:	ebac 0304 	sub.w	r3, ip, r4
 8019cbe:	3b15      	subs	r3, #21
 8019cc0:	f023 0303 	bic.w	r3, r3, #3
 8019cc4:	3304      	adds	r3, #4
 8019cc6:	f104 0015 	add.w	r0, r4, #21
 8019cca:	4584      	cmp	ip, r0
 8019ccc:	bf38      	it	cc
 8019cce:	2304      	movcc	r3, #4
 8019cd0:	50ca      	str	r2, [r1, r3]
 8019cd2:	b10a      	cbz	r2, 8019cd8 <__lshift+0xa4>
 8019cd4:	f108 0602 	add.w	r6, r8, #2
 8019cd8:	3e01      	subs	r6, #1
 8019cda:	4638      	mov	r0, r7
 8019cdc:	612e      	str	r6, [r5, #16]
 8019cde:	4621      	mov	r1, r4
 8019ce0:	f7ff fdd6 	bl	8019890 <_Bfree>
 8019ce4:	4628      	mov	r0, r5
 8019ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cea:	f842 0f04 	str.w	r0, [r2, #4]!
 8019cee:	3301      	adds	r3, #1
 8019cf0:	e7c5      	b.n	8019c7e <__lshift+0x4a>
 8019cf2:	3904      	subs	r1, #4
 8019cf4:	f853 2b04 	ldr.w	r2, [r3], #4
 8019cf8:	f841 2f04 	str.w	r2, [r1, #4]!
 8019cfc:	459c      	cmp	ip, r3
 8019cfe:	d8f9      	bhi.n	8019cf4 <__lshift+0xc0>
 8019d00:	e7ea      	b.n	8019cd8 <__lshift+0xa4>
 8019d02:	bf00      	nop
 8019d04:	0801f4d0 	.word	0x0801f4d0
 8019d08:	0801f4e1 	.word	0x0801f4e1

08019d0c <__mcmp>:
 8019d0c:	b530      	push	{r4, r5, lr}
 8019d0e:	6902      	ldr	r2, [r0, #16]
 8019d10:	690c      	ldr	r4, [r1, #16]
 8019d12:	1b12      	subs	r2, r2, r4
 8019d14:	d10e      	bne.n	8019d34 <__mcmp+0x28>
 8019d16:	f100 0314 	add.w	r3, r0, #20
 8019d1a:	3114      	adds	r1, #20
 8019d1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019d20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019d24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019d28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019d2c:	42a5      	cmp	r5, r4
 8019d2e:	d003      	beq.n	8019d38 <__mcmp+0x2c>
 8019d30:	d305      	bcc.n	8019d3e <__mcmp+0x32>
 8019d32:	2201      	movs	r2, #1
 8019d34:	4610      	mov	r0, r2
 8019d36:	bd30      	pop	{r4, r5, pc}
 8019d38:	4283      	cmp	r3, r0
 8019d3a:	d3f3      	bcc.n	8019d24 <__mcmp+0x18>
 8019d3c:	e7fa      	b.n	8019d34 <__mcmp+0x28>
 8019d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d42:	e7f7      	b.n	8019d34 <__mcmp+0x28>

08019d44 <__mdiff>:
 8019d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d48:	460c      	mov	r4, r1
 8019d4a:	4606      	mov	r6, r0
 8019d4c:	4611      	mov	r1, r2
 8019d4e:	4620      	mov	r0, r4
 8019d50:	4617      	mov	r7, r2
 8019d52:	f7ff ffdb 	bl	8019d0c <__mcmp>
 8019d56:	1e05      	subs	r5, r0, #0
 8019d58:	d110      	bne.n	8019d7c <__mdiff+0x38>
 8019d5a:	4629      	mov	r1, r5
 8019d5c:	4630      	mov	r0, r6
 8019d5e:	f7ff fd57 	bl	8019810 <_Balloc>
 8019d62:	b930      	cbnz	r0, 8019d72 <__mdiff+0x2e>
 8019d64:	4b39      	ldr	r3, [pc, #228]	; (8019e4c <__mdiff+0x108>)
 8019d66:	4602      	mov	r2, r0
 8019d68:	f240 2132 	movw	r1, #562	; 0x232
 8019d6c:	4838      	ldr	r0, [pc, #224]	; (8019e50 <__mdiff+0x10c>)
 8019d6e:	f000 fa49 	bl	801a204 <__assert_func>
 8019d72:	2301      	movs	r3, #1
 8019d74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019d78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d7c:	bfa4      	itt	ge
 8019d7e:	463b      	movge	r3, r7
 8019d80:	4627      	movge	r7, r4
 8019d82:	4630      	mov	r0, r6
 8019d84:	6879      	ldr	r1, [r7, #4]
 8019d86:	bfa6      	itte	ge
 8019d88:	461c      	movge	r4, r3
 8019d8a:	2500      	movge	r5, #0
 8019d8c:	2501      	movlt	r5, #1
 8019d8e:	f7ff fd3f 	bl	8019810 <_Balloc>
 8019d92:	b920      	cbnz	r0, 8019d9e <__mdiff+0x5a>
 8019d94:	4b2d      	ldr	r3, [pc, #180]	; (8019e4c <__mdiff+0x108>)
 8019d96:	4602      	mov	r2, r0
 8019d98:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019d9c:	e7e6      	b.n	8019d6c <__mdiff+0x28>
 8019d9e:	693e      	ldr	r6, [r7, #16]
 8019da0:	60c5      	str	r5, [r0, #12]
 8019da2:	6925      	ldr	r5, [r4, #16]
 8019da4:	f107 0114 	add.w	r1, r7, #20
 8019da8:	f104 0914 	add.w	r9, r4, #20
 8019dac:	f100 0e14 	add.w	lr, r0, #20
 8019db0:	f107 0210 	add.w	r2, r7, #16
 8019db4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019db8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019dbc:	46f2      	mov	sl, lr
 8019dbe:	2700      	movs	r7, #0
 8019dc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8019dc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019dc8:	fa1f f883 	uxth.w	r8, r3
 8019dcc:	fa17 f78b 	uxtah	r7, r7, fp
 8019dd0:	0c1b      	lsrs	r3, r3, #16
 8019dd2:	eba7 0808 	sub.w	r8, r7, r8
 8019dd6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019dda:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019dde:	fa1f f888 	uxth.w	r8, r8
 8019de2:	141f      	asrs	r7, r3, #16
 8019de4:	454d      	cmp	r5, r9
 8019de6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019dea:	f84a 3b04 	str.w	r3, [sl], #4
 8019dee:	d8e7      	bhi.n	8019dc0 <__mdiff+0x7c>
 8019df0:	1b2b      	subs	r3, r5, r4
 8019df2:	3b15      	subs	r3, #21
 8019df4:	f023 0303 	bic.w	r3, r3, #3
 8019df8:	3304      	adds	r3, #4
 8019dfa:	3415      	adds	r4, #21
 8019dfc:	42a5      	cmp	r5, r4
 8019dfe:	bf38      	it	cc
 8019e00:	2304      	movcc	r3, #4
 8019e02:	4419      	add	r1, r3
 8019e04:	4473      	add	r3, lr
 8019e06:	469e      	mov	lr, r3
 8019e08:	460d      	mov	r5, r1
 8019e0a:	4565      	cmp	r5, ip
 8019e0c:	d30e      	bcc.n	8019e2c <__mdiff+0xe8>
 8019e0e:	f10c 0203 	add.w	r2, ip, #3
 8019e12:	1a52      	subs	r2, r2, r1
 8019e14:	f022 0203 	bic.w	r2, r2, #3
 8019e18:	3903      	subs	r1, #3
 8019e1a:	458c      	cmp	ip, r1
 8019e1c:	bf38      	it	cc
 8019e1e:	2200      	movcc	r2, #0
 8019e20:	441a      	add	r2, r3
 8019e22:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019e26:	b17b      	cbz	r3, 8019e48 <__mdiff+0x104>
 8019e28:	6106      	str	r6, [r0, #16]
 8019e2a:	e7a5      	b.n	8019d78 <__mdiff+0x34>
 8019e2c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019e30:	fa17 f488 	uxtah	r4, r7, r8
 8019e34:	1422      	asrs	r2, r4, #16
 8019e36:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019e3a:	b2a4      	uxth	r4, r4
 8019e3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019e40:	f84e 4b04 	str.w	r4, [lr], #4
 8019e44:	1417      	asrs	r7, r2, #16
 8019e46:	e7e0      	b.n	8019e0a <__mdiff+0xc6>
 8019e48:	3e01      	subs	r6, #1
 8019e4a:	e7ea      	b.n	8019e22 <__mdiff+0xde>
 8019e4c:	0801f4d0 	.word	0x0801f4d0
 8019e50:	0801f4e1 	.word	0x0801f4e1

08019e54 <__d2b>:
 8019e54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019e58:	4689      	mov	r9, r1
 8019e5a:	2101      	movs	r1, #1
 8019e5c:	ec57 6b10 	vmov	r6, r7, d0
 8019e60:	4690      	mov	r8, r2
 8019e62:	f7ff fcd5 	bl	8019810 <_Balloc>
 8019e66:	4604      	mov	r4, r0
 8019e68:	b930      	cbnz	r0, 8019e78 <__d2b+0x24>
 8019e6a:	4602      	mov	r2, r0
 8019e6c:	4b25      	ldr	r3, [pc, #148]	; (8019f04 <__d2b+0xb0>)
 8019e6e:	4826      	ldr	r0, [pc, #152]	; (8019f08 <__d2b+0xb4>)
 8019e70:	f240 310a 	movw	r1, #778	; 0x30a
 8019e74:	f000 f9c6 	bl	801a204 <__assert_func>
 8019e78:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019e7c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019e80:	bb35      	cbnz	r5, 8019ed0 <__d2b+0x7c>
 8019e82:	2e00      	cmp	r6, #0
 8019e84:	9301      	str	r3, [sp, #4]
 8019e86:	d028      	beq.n	8019eda <__d2b+0x86>
 8019e88:	4668      	mov	r0, sp
 8019e8a:	9600      	str	r6, [sp, #0]
 8019e8c:	f7ff fd8c 	bl	80199a8 <__lo0bits>
 8019e90:	9900      	ldr	r1, [sp, #0]
 8019e92:	b300      	cbz	r0, 8019ed6 <__d2b+0x82>
 8019e94:	9a01      	ldr	r2, [sp, #4]
 8019e96:	f1c0 0320 	rsb	r3, r0, #32
 8019e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8019e9e:	430b      	orrs	r3, r1
 8019ea0:	40c2      	lsrs	r2, r0
 8019ea2:	6163      	str	r3, [r4, #20]
 8019ea4:	9201      	str	r2, [sp, #4]
 8019ea6:	9b01      	ldr	r3, [sp, #4]
 8019ea8:	61a3      	str	r3, [r4, #24]
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	bf14      	ite	ne
 8019eae:	2202      	movne	r2, #2
 8019eb0:	2201      	moveq	r2, #1
 8019eb2:	6122      	str	r2, [r4, #16]
 8019eb4:	b1d5      	cbz	r5, 8019eec <__d2b+0x98>
 8019eb6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019eba:	4405      	add	r5, r0
 8019ebc:	f8c9 5000 	str.w	r5, [r9]
 8019ec0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019ec4:	f8c8 0000 	str.w	r0, [r8]
 8019ec8:	4620      	mov	r0, r4
 8019eca:	b003      	add	sp, #12
 8019ecc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ed0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019ed4:	e7d5      	b.n	8019e82 <__d2b+0x2e>
 8019ed6:	6161      	str	r1, [r4, #20]
 8019ed8:	e7e5      	b.n	8019ea6 <__d2b+0x52>
 8019eda:	a801      	add	r0, sp, #4
 8019edc:	f7ff fd64 	bl	80199a8 <__lo0bits>
 8019ee0:	9b01      	ldr	r3, [sp, #4]
 8019ee2:	6163      	str	r3, [r4, #20]
 8019ee4:	2201      	movs	r2, #1
 8019ee6:	6122      	str	r2, [r4, #16]
 8019ee8:	3020      	adds	r0, #32
 8019eea:	e7e3      	b.n	8019eb4 <__d2b+0x60>
 8019eec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019ef0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019ef4:	f8c9 0000 	str.w	r0, [r9]
 8019ef8:	6918      	ldr	r0, [r3, #16]
 8019efa:	f7ff fd35 	bl	8019968 <__hi0bits>
 8019efe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019f02:	e7df      	b.n	8019ec4 <__d2b+0x70>
 8019f04:	0801f4d0 	.word	0x0801f4d0
 8019f08:	0801f4e1 	.word	0x0801f4e1

08019f0c <_calloc_r>:
 8019f0c:	b513      	push	{r0, r1, r4, lr}
 8019f0e:	434a      	muls	r2, r1
 8019f10:	4611      	mov	r1, r2
 8019f12:	9201      	str	r2, [sp, #4]
 8019f14:	f7fd ff02 	bl	8017d1c <_malloc_r>
 8019f18:	4604      	mov	r4, r0
 8019f1a:	b118      	cbz	r0, 8019f24 <_calloc_r+0x18>
 8019f1c:	9a01      	ldr	r2, [sp, #4]
 8019f1e:	2100      	movs	r1, #0
 8019f20:	f7fd fea4 	bl	8017c6c <memset>
 8019f24:	4620      	mov	r0, r4
 8019f26:	b002      	add	sp, #8
 8019f28:	bd10      	pop	{r4, pc}

08019f2a <__ssputs_r>:
 8019f2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019f2e:	688e      	ldr	r6, [r1, #8]
 8019f30:	429e      	cmp	r6, r3
 8019f32:	4682      	mov	sl, r0
 8019f34:	460c      	mov	r4, r1
 8019f36:	4690      	mov	r8, r2
 8019f38:	461f      	mov	r7, r3
 8019f3a:	d838      	bhi.n	8019fae <__ssputs_r+0x84>
 8019f3c:	898a      	ldrh	r2, [r1, #12]
 8019f3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019f42:	d032      	beq.n	8019faa <__ssputs_r+0x80>
 8019f44:	6825      	ldr	r5, [r4, #0]
 8019f46:	6909      	ldr	r1, [r1, #16]
 8019f48:	eba5 0901 	sub.w	r9, r5, r1
 8019f4c:	6965      	ldr	r5, [r4, #20]
 8019f4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019f52:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019f56:	3301      	adds	r3, #1
 8019f58:	444b      	add	r3, r9
 8019f5a:	106d      	asrs	r5, r5, #1
 8019f5c:	429d      	cmp	r5, r3
 8019f5e:	bf38      	it	cc
 8019f60:	461d      	movcc	r5, r3
 8019f62:	0553      	lsls	r3, r2, #21
 8019f64:	d531      	bpl.n	8019fca <__ssputs_r+0xa0>
 8019f66:	4629      	mov	r1, r5
 8019f68:	f7fd fed8 	bl	8017d1c <_malloc_r>
 8019f6c:	4606      	mov	r6, r0
 8019f6e:	b950      	cbnz	r0, 8019f86 <__ssputs_r+0x5c>
 8019f70:	230c      	movs	r3, #12
 8019f72:	f8ca 3000 	str.w	r3, [sl]
 8019f76:	89a3      	ldrh	r3, [r4, #12]
 8019f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019f7c:	81a3      	strh	r3, [r4, #12]
 8019f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f86:	6921      	ldr	r1, [r4, #16]
 8019f88:	464a      	mov	r2, r9
 8019f8a:	f7fd fe61 	bl	8017c50 <memcpy>
 8019f8e:	89a3      	ldrh	r3, [r4, #12]
 8019f90:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f98:	81a3      	strh	r3, [r4, #12]
 8019f9a:	6126      	str	r6, [r4, #16]
 8019f9c:	6165      	str	r5, [r4, #20]
 8019f9e:	444e      	add	r6, r9
 8019fa0:	eba5 0509 	sub.w	r5, r5, r9
 8019fa4:	6026      	str	r6, [r4, #0]
 8019fa6:	60a5      	str	r5, [r4, #8]
 8019fa8:	463e      	mov	r6, r7
 8019faa:	42be      	cmp	r6, r7
 8019fac:	d900      	bls.n	8019fb0 <__ssputs_r+0x86>
 8019fae:	463e      	mov	r6, r7
 8019fb0:	4632      	mov	r2, r6
 8019fb2:	6820      	ldr	r0, [r4, #0]
 8019fb4:	4641      	mov	r1, r8
 8019fb6:	f000 f967 	bl	801a288 <memmove>
 8019fba:	68a3      	ldr	r3, [r4, #8]
 8019fbc:	6822      	ldr	r2, [r4, #0]
 8019fbe:	1b9b      	subs	r3, r3, r6
 8019fc0:	4432      	add	r2, r6
 8019fc2:	60a3      	str	r3, [r4, #8]
 8019fc4:	6022      	str	r2, [r4, #0]
 8019fc6:	2000      	movs	r0, #0
 8019fc8:	e7db      	b.n	8019f82 <__ssputs_r+0x58>
 8019fca:	462a      	mov	r2, r5
 8019fcc:	f000 f976 	bl	801a2bc <_realloc_r>
 8019fd0:	4606      	mov	r6, r0
 8019fd2:	2800      	cmp	r0, #0
 8019fd4:	d1e1      	bne.n	8019f9a <__ssputs_r+0x70>
 8019fd6:	6921      	ldr	r1, [r4, #16]
 8019fd8:	4650      	mov	r0, sl
 8019fda:	f7fd fe4f 	bl	8017c7c <_free_r>
 8019fde:	e7c7      	b.n	8019f70 <__ssputs_r+0x46>

08019fe0 <_svfiprintf_r>:
 8019fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fe4:	4698      	mov	r8, r3
 8019fe6:	898b      	ldrh	r3, [r1, #12]
 8019fe8:	061b      	lsls	r3, r3, #24
 8019fea:	b09d      	sub	sp, #116	; 0x74
 8019fec:	4607      	mov	r7, r0
 8019fee:	460d      	mov	r5, r1
 8019ff0:	4614      	mov	r4, r2
 8019ff2:	d50e      	bpl.n	801a012 <_svfiprintf_r+0x32>
 8019ff4:	690b      	ldr	r3, [r1, #16]
 8019ff6:	b963      	cbnz	r3, 801a012 <_svfiprintf_r+0x32>
 8019ff8:	2140      	movs	r1, #64	; 0x40
 8019ffa:	f7fd fe8f 	bl	8017d1c <_malloc_r>
 8019ffe:	6028      	str	r0, [r5, #0]
 801a000:	6128      	str	r0, [r5, #16]
 801a002:	b920      	cbnz	r0, 801a00e <_svfiprintf_r+0x2e>
 801a004:	230c      	movs	r3, #12
 801a006:	603b      	str	r3, [r7, #0]
 801a008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a00c:	e0d1      	b.n	801a1b2 <_svfiprintf_r+0x1d2>
 801a00e:	2340      	movs	r3, #64	; 0x40
 801a010:	616b      	str	r3, [r5, #20]
 801a012:	2300      	movs	r3, #0
 801a014:	9309      	str	r3, [sp, #36]	; 0x24
 801a016:	2320      	movs	r3, #32
 801a018:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a01c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a020:	2330      	movs	r3, #48	; 0x30
 801a022:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a1cc <_svfiprintf_r+0x1ec>
 801a026:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a02a:	f04f 0901 	mov.w	r9, #1
 801a02e:	4623      	mov	r3, r4
 801a030:	469a      	mov	sl, r3
 801a032:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a036:	b10a      	cbz	r2, 801a03c <_svfiprintf_r+0x5c>
 801a038:	2a25      	cmp	r2, #37	; 0x25
 801a03a:	d1f9      	bne.n	801a030 <_svfiprintf_r+0x50>
 801a03c:	ebba 0b04 	subs.w	fp, sl, r4
 801a040:	d00b      	beq.n	801a05a <_svfiprintf_r+0x7a>
 801a042:	465b      	mov	r3, fp
 801a044:	4622      	mov	r2, r4
 801a046:	4629      	mov	r1, r5
 801a048:	4638      	mov	r0, r7
 801a04a:	f7ff ff6e 	bl	8019f2a <__ssputs_r>
 801a04e:	3001      	adds	r0, #1
 801a050:	f000 80aa 	beq.w	801a1a8 <_svfiprintf_r+0x1c8>
 801a054:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a056:	445a      	add	r2, fp
 801a058:	9209      	str	r2, [sp, #36]	; 0x24
 801a05a:	f89a 3000 	ldrb.w	r3, [sl]
 801a05e:	2b00      	cmp	r3, #0
 801a060:	f000 80a2 	beq.w	801a1a8 <_svfiprintf_r+0x1c8>
 801a064:	2300      	movs	r3, #0
 801a066:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a06a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a06e:	f10a 0a01 	add.w	sl, sl, #1
 801a072:	9304      	str	r3, [sp, #16]
 801a074:	9307      	str	r3, [sp, #28]
 801a076:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a07a:	931a      	str	r3, [sp, #104]	; 0x68
 801a07c:	4654      	mov	r4, sl
 801a07e:	2205      	movs	r2, #5
 801a080:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a084:	4851      	ldr	r0, [pc, #324]	; (801a1cc <_svfiprintf_r+0x1ec>)
 801a086:	f7e6 f8ab 	bl	80001e0 <memchr>
 801a08a:	9a04      	ldr	r2, [sp, #16]
 801a08c:	b9d8      	cbnz	r0, 801a0c6 <_svfiprintf_r+0xe6>
 801a08e:	06d0      	lsls	r0, r2, #27
 801a090:	bf44      	itt	mi
 801a092:	2320      	movmi	r3, #32
 801a094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a098:	0711      	lsls	r1, r2, #28
 801a09a:	bf44      	itt	mi
 801a09c:	232b      	movmi	r3, #43	; 0x2b
 801a09e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a0a2:	f89a 3000 	ldrb.w	r3, [sl]
 801a0a6:	2b2a      	cmp	r3, #42	; 0x2a
 801a0a8:	d015      	beq.n	801a0d6 <_svfiprintf_r+0xf6>
 801a0aa:	9a07      	ldr	r2, [sp, #28]
 801a0ac:	4654      	mov	r4, sl
 801a0ae:	2000      	movs	r0, #0
 801a0b0:	f04f 0c0a 	mov.w	ip, #10
 801a0b4:	4621      	mov	r1, r4
 801a0b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a0ba:	3b30      	subs	r3, #48	; 0x30
 801a0bc:	2b09      	cmp	r3, #9
 801a0be:	d94e      	bls.n	801a15e <_svfiprintf_r+0x17e>
 801a0c0:	b1b0      	cbz	r0, 801a0f0 <_svfiprintf_r+0x110>
 801a0c2:	9207      	str	r2, [sp, #28]
 801a0c4:	e014      	b.n	801a0f0 <_svfiprintf_r+0x110>
 801a0c6:	eba0 0308 	sub.w	r3, r0, r8
 801a0ca:	fa09 f303 	lsl.w	r3, r9, r3
 801a0ce:	4313      	orrs	r3, r2
 801a0d0:	9304      	str	r3, [sp, #16]
 801a0d2:	46a2      	mov	sl, r4
 801a0d4:	e7d2      	b.n	801a07c <_svfiprintf_r+0x9c>
 801a0d6:	9b03      	ldr	r3, [sp, #12]
 801a0d8:	1d19      	adds	r1, r3, #4
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	9103      	str	r1, [sp, #12]
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	bfbb      	ittet	lt
 801a0e2:	425b      	neglt	r3, r3
 801a0e4:	f042 0202 	orrlt.w	r2, r2, #2
 801a0e8:	9307      	strge	r3, [sp, #28]
 801a0ea:	9307      	strlt	r3, [sp, #28]
 801a0ec:	bfb8      	it	lt
 801a0ee:	9204      	strlt	r2, [sp, #16]
 801a0f0:	7823      	ldrb	r3, [r4, #0]
 801a0f2:	2b2e      	cmp	r3, #46	; 0x2e
 801a0f4:	d10c      	bne.n	801a110 <_svfiprintf_r+0x130>
 801a0f6:	7863      	ldrb	r3, [r4, #1]
 801a0f8:	2b2a      	cmp	r3, #42	; 0x2a
 801a0fa:	d135      	bne.n	801a168 <_svfiprintf_r+0x188>
 801a0fc:	9b03      	ldr	r3, [sp, #12]
 801a0fe:	1d1a      	adds	r2, r3, #4
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	9203      	str	r2, [sp, #12]
 801a104:	2b00      	cmp	r3, #0
 801a106:	bfb8      	it	lt
 801a108:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a10c:	3402      	adds	r4, #2
 801a10e:	9305      	str	r3, [sp, #20]
 801a110:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a1dc <_svfiprintf_r+0x1fc>
 801a114:	7821      	ldrb	r1, [r4, #0]
 801a116:	2203      	movs	r2, #3
 801a118:	4650      	mov	r0, sl
 801a11a:	f7e6 f861 	bl	80001e0 <memchr>
 801a11e:	b140      	cbz	r0, 801a132 <_svfiprintf_r+0x152>
 801a120:	2340      	movs	r3, #64	; 0x40
 801a122:	eba0 000a 	sub.w	r0, r0, sl
 801a126:	fa03 f000 	lsl.w	r0, r3, r0
 801a12a:	9b04      	ldr	r3, [sp, #16]
 801a12c:	4303      	orrs	r3, r0
 801a12e:	3401      	adds	r4, #1
 801a130:	9304      	str	r3, [sp, #16]
 801a132:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a136:	4826      	ldr	r0, [pc, #152]	; (801a1d0 <_svfiprintf_r+0x1f0>)
 801a138:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a13c:	2206      	movs	r2, #6
 801a13e:	f7e6 f84f 	bl	80001e0 <memchr>
 801a142:	2800      	cmp	r0, #0
 801a144:	d038      	beq.n	801a1b8 <_svfiprintf_r+0x1d8>
 801a146:	4b23      	ldr	r3, [pc, #140]	; (801a1d4 <_svfiprintf_r+0x1f4>)
 801a148:	bb1b      	cbnz	r3, 801a192 <_svfiprintf_r+0x1b2>
 801a14a:	9b03      	ldr	r3, [sp, #12]
 801a14c:	3307      	adds	r3, #7
 801a14e:	f023 0307 	bic.w	r3, r3, #7
 801a152:	3308      	adds	r3, #8
 801a154:	9303      	str	r3, [sp, #12]
 801a156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a158:	4433      	add	r3, r6
 801a15a:	9309      	str	r3, [sp, #36]	; 0x24
 801a15c:	e767      	b.n	801a02e <_svfiprintf_r+0x4e>
 801a15e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a162:	460c      	mov	r4, r1
 801a164:	2001      	movs	r0, #1
 801a166:	e7a5      	b.n	801a0b4 <_svfiprintf_r+0xd4>
 801a168:	2300      	movs	r3, #0
 801a16a:	3401      	adds	r4, #1
 801a16c:	9305      	str	r3, [sp, #20]
 801a16e:	4619      	mov	r1, r3
 801a170:	f04f 0c0a 	mov.w	ip, #10
 801a174:	4620      	mov	r0, r4
 801a176:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a17a:	3a30      	subs	r2, #48	; 0x30
 801a17c:	2a09      	cmp	r2, #9
 801a17e:	d903      	bls.n	801a188 <_svfiprintf_r+0x1a8>
 801a180:	2b00      	cmp	r3, #0
 801a182:	d0c5      	beq.n	801a110 <_svfiprintf_r+0x130>
 801a184:	9105      	str	r1, [sp, #20]
 801a186:	e7c3      	b.n	801a110 <_svfiprintf_r+0x130>
 801a188:	fb0c 2101 	mla	r1, ip, r1, r2
 801a18c:	4604      	mov	r4, r0
 801a18e:	2301      	movs	r3, #1
 801a190:	e7f0      	b.n	801a174 <_svfiprintf_r+0x194>
 801a192:	ab03      	add	r3, sp, #12
 801a194:	9300      	str	r3, [sp, #0]
 801a196:	462a      	mov	r2, r5
 801a198:	4b0f      	ldr	r3, [pc, #60]	; (801a1d8 <_svfiprintf_r+0x1f8>)
 801a19a:	a904      	add	r1, sp, #16
 801a19c:	4638      	mov	r0, r7
 801a19e:	f7fd feb7 	bl	8017f10 <_printf_float>
 801a1a2:	1c42      	adds	r2, r0, #1
 801a1a4:	4606      	mov	r6, r0
 801a1a6:	d1d6      	bne.n	801a156 <_svfiprintf_r+0x176>
 801a1a8:	89ab      	ldrh	r3, [r5, #12]
 801a1aa:	065b      	lsls	r3, r3, #25
 801a1ac:	f53f af2c 	bmi.w	801a008 <_svfiprintf_r+0x28>
 801a1b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a1b2:	b01d      	add	sp, #116	; 0x74
 801a1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1b8:	ab03      	add	r3, sp, #12
 801a1ba:	9300      	str	r3, [sp, #0]
 801a1bc:	462a      	mov	r2, r5
 801a1be:	4b06      	ldr	r3, [pc, #24]	; (801a1d8 <_svfiprintf_r+0x1f8>)
 801a1c0:	a904      	add	r1, sp, #16
 801a1c2:	4638      	mov	r0, r7
 801a1c4:	f7fe f948 	bl	8018458 <_printf_i>
 801a1c8:	e7eb      	b.n	801a1a2 <_svfiprintf_r+0x1c2>
 801a1ca:	bf00      	nop
 801a1cc:	0801f644 	.word	0x0801f644
 801a1d0:	0801f64e 	.word	0x0801f64e
 801a1d4:	08017f11 	.word	0x08017f11
 801a1d8:	08019f2b 	.word	0x08019f2b
 801a1dc:	0801f64a 	.word	0x0801f64a

0801a1e0 <_read_r>:
 801a1e0:	b538      	push	{r3, r4, r5, lr}
 801a1e2:	4d07      	ldr	r5, [pc, #28]	; (801a200 <_read_r+0x20>)
 801a1e4:	4604      	mov	r4, r0
 801a1e6:	4608      	mov	r0, r1
 801a1e8:	4611      	mov	r1, r2
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	602a      	str	r2, [r5, #0]
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	f7ea fdee 	bl	8004dd0 <_read>
 801a1f4:	1c43      	adds	r3, r0, #1
 801a1f6:	d102      	bne.n	801a1fe <_read_r+0x1e>
 801a1f8:	682b      	ldr	r3, [r5, #0]
 801a1fa:	b103      	cbz	r3, 801a1fe <_read_r+0x1e>
 801a1fc:	6023      	str	r3, [r4, #0]
 801a1fe:	bd38      	pop	{r3, r4, r5, pc}
 801a200:	2001498c 	.word	0x2001498c

0801a204 <__assert_func>:
 801a204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a206:	4614      	mov	r4, r2
 801a208:	461a      	mov	r2, r3
 801a20a:	4b09      	ldr	r3, [pc, #36]	; (801a230 <__assert_func+0x2c>)
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4605      	mov	r5, r0
 801a210:	68d8      	ldr	r0, [r3, #12]
 801a212:	b14c      	cbz	r4, 801a228 <__assert_func+0x24>
 801a214:	4b07      	ldr	r3, [pc, #28]	; (801a234 <__assert_func+0x30>)
 801a216:	9100      	str	r1, [sp, #0]
 801a218:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a21c:	4906      	ldr	r1, [pc, #24]	; (801a238 <__assert_func+0x34>)
 801a21e:	462b      	mov	r3, r5
 801a220:	f000 f80e 	bl	801a240 <fiprintf>
 801a224:	f000 fa98 	bl	801a758 <abort>
 801a228:	4b04      	ldr	r3, [pc, #16]	; (801a23c <__assert_func+0x38>)
 801a22a:	461c      	mov	r4, r3
 801a22c:	e7f3      	b.n	801a216 <__assert_func+0x12>
 801a22e:	bf00      	nop
 801a230:	200001c8 	.word	0x200001c8
 801a234:	0801f655 	.word	0x0801f655
 801a238:	0801f662 	.word	0x0801f662
 801a23c:	0801f690 	.word	0x0801f690

0801a240 <fiprintf>:
 801a240:	b40e      	push	{r1, r2, r3}
 801a242:	b503      	push	{r0, r1, lr}
 801a244:	4601      	mov	r1, r0
 801a246:	ab03      	add	r3, sp, #12
 801a248:	4805      	ldr	r0, [pc, #20]	; (801a260 <fiprintf+0x20>)
 801a24a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a24e:	6800      	ldr	r0, [r0, #0]
 801a250:	9301      	str	r3, [sp, #4]
 801a252:	f000 f883 	bl	801a35c <_vfiprintf_r>
 801a256:	b002      	add	sp, #8
 801a258:	f85d eb04 	ldr.w	lr, [sp], #4
 801a25c:	b003      	add	sp, #12
 801a25e:	4770      	bx	lr
 801a260:	200001c8 	.word	0x200001c8

0801a264 <__ascii_mbtowc>:
 801a264:	b082      	sub	sp, #8
 801a266:	b901      	cbnz	r1, 801a26a <__ascii_mbtowc+0x6>
 801a268:	a901      	add	r1, sp, #4
 801a26a:	b142      	cbz	r2, 801a27e <__ascii_mbtowc+0x1a>
 801a26c:	b14b      	cbz	r3, 801a282 <__ascii_mbtowc+0x1e>
 801a26e:	7813      	ldrb	r3, [r2, #0]
 801a270:	600b      	str	r3, [r1, #0]
 801a272:	7812      	ldrb	r2, [r2, #0]
 801a274:	1e10      	subs	r0, r2, #0
 801a276:	bf18      	it	ne
 801a278:	2001      	movne	r0, #1
 801a27a:	b002      	add	sp, #8
 801a27c:	4770      	bx	lr
 801a27e:	4610      	mov	r0, r2
 801a280:	e7fb      	b.n	801a27a <__ascii_mbtowc+0x16>
 801a282:	f06f 0001 	mvn.w	r0, #1
 801a286:	e7f8      	b.n	801a27a <__ascii_mbtowc+0x16>

0801a288 <memmove>:
 801a288:	4288      	cmp	r0, r1
 801a28a:	b510      	push	{r4, lr}
 801a28c:	eb01 0402 	add.w	r4, r1, r2
 801a290:	d902      	bls.n	801a298 <memmove+0x10>
 801a292:	4284      	cmp	r4, r0
 801a294:	4623      	mov	r3, r4
 801a296:	d807      	bhi.n	801a2a8 <memmove+0x20>
 801a298:	1e43      	subs	r3, r0, #1
 801a29a:	42a1      	cmp	r1, r4
 801a29c:	d008      	beq.n	801a2b0 <memmove+0x28>
 801a29e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a2a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a2a6:	e7f8      	b.n	801a29a <memmove+0x12>
 801a2a8:	4402      	add	r2, r0
 801a2aa:	4601      	mov	r1, r0
 801a2ac:	428a      	cmp	r2, r1
 801a2ae:	d100      	bne.n	801a2b2 <memmove+0x2a>
 801a2b0:	bd10      	pop	{r4, pc}
 801a2b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a2b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a2ba:	e7f7      	b.n	801a2ac <memmove+0x24>

0801a2bc <_realloc_r>:
 801a2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2be:	4607      	mov	r7, r0
 801a2c0:	4614      	mov	r4, r2
 801a2c2:	460e      	mov	r6, r1
 801a2c4:	b921      	cbnz	r1, 801a2d0 <_realloc_r+0x14>
 801a2c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a2ca:	4611      	mov	r1, r2
 801a2cc:	f7fd bd26 	b.w	8017d1c <_malloc_r>
 801a2d0:	b922      	cbnz	r2, 801a2dc <_realloc_r+0x20>
 801a2d2:	f7fd fcd3 	bl	8017c7c <_free_r>
 801a2d6:	4625      	mov	r5, r4
 801a2d8:	4628      	mov	r0, r5
 801a2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a2dc:	f000 faa8 	bl	801a830 <_malloc_usable_size_r>
 801a2e0:	42a0      	cmp	r0, r4
 801a2e2:	d20f      	bcs.n	801a304 <_realloc_r+0x48>
 801a2e4:	4621      	mov	r1, r4
 801a2e6:	4638      	mov	r0, r7
 801a2e8:	f7fd fd18 	bl	8017d1c <_malloc_r>
 801a2ec:	4605      	mov	r5, r0
 801a2ee:	2800      	cmp	r0, #0
 801a2f0:	d0f2      	beq.n	801a2d8 <_realloc_r+0x1c>
 801a2f2:	4631      	mov	r1, r6
 801a2f4:	4622      	mov	r2, r4
 801a2f6:	f7fd fcab 	bl	8017c50 <memcpy>
 801a2fa:	4631      	mov	r1, r6
 801a2fc:	4638      	mov	r0, r7
 801a2fe:	f7fd fcbd 	bl	8017c7c <_free_r>
 801a302:	e7e9      	b.n	801a2d8 <_realloc_r+0x1c>
 801a304:	4635      	mov	r5, r6
 801a306:	e7e7      	b.n	801a2d8 <_realloc_r+0x1c>

0801a308 <__sfputc_r>:
 801a308:	6893      	ldr	r3, [r2, #8]
 801a30a:	3b01      	subs	r3, #1
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	b410      	push	{r4}
 801a310:	6093      	str	r3, [r2, #8]
 801a312:	da08      	bge.n	801a326 <__sfputc_r+0x1e>
 801a314:	6994      	ldr	r4, [r2, #24]
 801a316:	42a3      	cmp	r3, r4
 801a318:	db01      	blt.n	801a31e <__sfputc_r+0x16>
 801a31a:	290a      	cmp	r1, #10
 801a31c:	d103      	bne.n	801a326 <__sfputc_r+0x1e>
 801a31e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a322:	f000 b94b 	b.w	801a5bc <__swbuf_r>
 801a326:	6813      	ldr	r3, [r2, #0]
 801a328:	1c58      	adds	r0, r3, #1
 801a32a:	6010      	str	r0, [r2, #0]
 801a32c:	7019      	strb	r1, [r3, #0]
 801a32e:	4608      	mov	r0, r1
 801a330:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a334:	4770      	bx	lr

0801a336 <__sfputs_r>:
 801a336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a338:	4606      	mov	r6, r0
 801a33a:	460f      	mov	r7, r1
 801a33c:	4614      	mov	r4, r2
 801a33e:	18d5      	adds	r5, r2, r3
 801a340:	42ac      	cmp	r4, r5
 801a342:	d101      	bne.n	801a348 <__sfputs_r+0x12>
 801a344:	2000      	movs	r0, #0
 801a346:	e007      	b.n	801a358 <__sfputs_r+0x22>
 801a348:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a34c:	463a      	mov	r2, r7
 801a34e:	4630      	mov	r0, r6
 801a350:	f7ff ffda 	bl	801a308 <__sfputc_r>
 801a354:	1c43      	adds	r3, r0, #1
 801a356:	d1f3      	bne.n	801a340 <__sfputs_r+0xa>
 801a358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a35c <_vfiprintf_r>:
 801a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a360:	460d      	mov	r5, r1
 801a362:	b09d      	sub	sp, #116	; 0x74
 801a364:	4614      	mov	r4, r2
 801a366:	4698      	mov	r8, r3
 801a368:	4606      	mov	r6, r0
 801a36a:	b118      	cbz	r0, 801a374 <_vfiprintf_r+0x18>
 801a36c:	6983      	ldr	r3, [r0, #24]
 801a36e:	b90b      	cbnz	r3, 801a374 <_vfiprintf_r+0x18>
 801a370:	f7fd fb7e 	bl	8017a70 <__sinit>
 801a374:	4b89      	ldr	r3, [pc, #548]	; (801a59c <_vfiprintf_r+0x240>)
 801a376:	429d      	cmp	r5, r3
 801a378:	d11b      	bne.n	801a3b2 <_vfiprintf_r+0x56>
 801a37a:	6875      	ldr	r5, [r6, #4]
 801a37c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a37e:	07d9      	lsls	r1, r3, #31
 801a380:	d405      	bmi.n	801a38e <_vfiprintf_r+0x32>
 801a382:	89ab      	ldrh	r3, [r5, #12]
 801a384:	059a      	lsls	r2, r3, #22
 801a386:	d402      	bmi.n	801a38e <_vfiprintf_r+0x32>
 801a388:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a38a:	f7fd fc4e 	bl	8017c2a <__retarget_lock_acquire_recursive>
 801a38e:	89ab      	ldrh	r3, [r5, #12]
 801a390:	071b      	lsls	r3, r3, #28
 801a392:	d501      	bpl.n	801a398 <_vfiprintf_r+0x3c>
 801a394:	692b      	ldr	r3, [r5, #16]
 801a396:	b9eb      	cbnz	r3, 801a3d4 <_vfiprintf_r+0x78>
 801a398:	4629      	mov	r1, r5
 801a39a:	4630      	mov	r0, r6
 801a39c:	f000 f96e 	bl	801a67c <__swsetup_r>
 801a3a0:	b1c0      	cbz	r0, 801a3d4 <_vfiprintf_r+0x78>
 801a3a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a3a4:	07dc      	lsls	r4, r3, #31
 801a3a6:	d50e      	bpl.n	801a3c6 <_vfiprintf_r+0x6a>
 801a3a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3ac:	b01d      	add	sp, #116	; 0x74
 801a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3b2:	4b7b      	ldr	r3, [pc, #492]	; (801a5a0 <_vfiprintf_r+0x244>)
 801a3b4:	429d      	cmp	r5, r3
 801a3b6:	d101      	bne.n	801a3bc <_vfiprintf_r+0x60>
 801a3b8:	68b5      	ldr	r5, [r6, #8]
 801a3ba:	e7df      	b.n	801a37c <_vfiprintf_r+0x20>
 801a3bc:	4b79      	ldr	r3, [pc, #484]	; (801a5a4 <_vfiprintf_r+0x248>)
 801a3be:	429d      	cmp	r5, r3
 801a3c0:	bf08      	it	eq
 801a3c2:	68f5      	ldreq	r5, [r6, #12]
 801a3c4:	e7da      	b.n	801a37c <_vfiprintf_r+0x20>
 801a3c6:	89ab      	ldrh	r3, [r5, #12]
 801a3c8:	0598      	lsls	r0, r3, #22
 801a3ca:	d4ed      	bmi.n	801a3a8 <_vfiprintf_r+0x4c>
 801a3cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3ce:	f7fd fc2d 	bl	8017c2c <__retarget_lock_release_recursive>
 801a3d2:	e7e9      	b.n	801a3a8 <_vfiprintf_r+0x4c>
 801a3d4:	2300      	movs	r3, #0
 801a3d6:	9309      	str	r3, [sp, #36]	; 0x24
 801a3d8:	2320      	movs	r3, #32
 801a3da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a3de:	f8cd 800c 	str.w	r8, [sp, #12]
 801a3e2:	2330      	movs	r3, #48	; 0x30
 801a3e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a5a8 <_vfiprintf_r+0x24c>
 801a3e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a3ec:	f04f 0901 	mov.w	r9, #1
 801a3f0:	4623      	mov	r3, r4
 801a3f2:	469a      	mov	sl, r3
 801a3f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3f8:	b10a      	cbz	r2, 801a3fe <_vfiprintf_r+0xa2>
 801a3fa:	2a25      	cmp	r2, #37	; 0x25
 801a3fc:	d1f9      	bne.n	801a3f2 <_vfiprintf_r+0x96>
 801a3fe:	ebba 0b04 	subs.w	fp, sl, r4
 801a402:	d00b      	beq.n	801a41c <_vfiprintf_r+0xc0>
 801a404:	465b      	mov	r3, fp
 801a406:	4622      	mov	r2, r4
 801a408:	4629      	mov	r1, r5
 801a40a:	4630      	mov	r0, r6
 801a40c:	f7ff ff93 	bl	801a336 <__sfputs_r>
 801a410:	3001      	adds	r0, #1
 801a412:	f000 80aa 	beq.w	801a56a <_vfiprintf_r+0x20e>
 801a416:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a418:	445a      	add	r2, fp
 801a41a:	9209      	str	r2, [sp, #36]	; 0x24
 801a41c:	f89a 3000 	ldrb.w	r3, [sl]
 801a420:	2b00      	cmp	r3, #0
 801a422:	f000 80a2 	beq.w	801a56a <_vfiprintf_r+0x20e>
 801a426:	2300      	movs	r3, #0
 801a428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a42c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a430:	f10a 0a01 	add.w	sl, sl, #1
 801a434:	9304      	str	r3, [sp, #16]
 801a436:	9307      	str	r3, [sp, #28]
 801a438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a43c:	931a      	str	r3, [sp, #104]	; 0x68
 801a43e:	4654      	mov	r4, sl
 801a440:	2205      	movs	r2, #5
 801a442:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a446:	4858      	ldr	r0, [pc, #352]	; (801a5a8 <_vfiprintf_r+0x24c>)
 801a448:	f7e5 feca 	bl	80001e0 <memchr>
 801a44c:	9a04      	ldr	r2, [sp, #16]
 801a44e:	b9d8      	cbnz	r0, 801a488 <_vfiprintf_r+0x12c>
 801a450:	06d1      	lsls	r1, r2, #27
 801a452:	bf44      	itt	mi
 801a454:	2320      	movmi	r3, #32
 801a456:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a45a:	0713      	lsls	r3, r2, #28
 801a45c:	bf44      	itt	mi
 801a45e:	232b      	movmi	r3, #43	; 0x2b
 801a460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a464:	f89a 3000 	ldrb.w	r3, [sl]
 801a468:	2b2a      	cmp	r3, #42	; 0x2a
 801a46a:	d015      	beq.n	801a498 <_vfiprintf_r+0x13c>
 801a46c:	9a07      	ldr	r2, [sp, #28]
 801a46e:	4654      	mov	r4, sl
 801a470:	2000      	movs	r0, #0
 801a472:	f04f 0c0a 	mov.w	ip, #10
 801a476:	4621      	mov	r1, r4
 801a478:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a47c:	3b30      	subs	r3, #48	; 0x30
 801a47e:	2b09      	cmp	r3, #9
 801a480:	d94e      	bls.n	801a520 <_vfiprintf_r+0x1c4>
 801a482:	b1b0      	cbz	r0, 801a4b2 <_vfiprintf_r+0x156>
 801a484:	9207      	str	r2, [sp, #28]
 801a486:	e014      	b.n	801a4b2 <_vfiprintf_r+0x156>
 801a488:	eba0 0308 	sub.w	r3, r0, r8
 801a48c:	fa09 f303 	lsl.w	r3, r9, r3
 801a490:	4313      	orrs	r3, r2
 801a492:	9304      	str	r3, [sp, #16]
 801a494:	46a2      	mov	sl, r4
 801a496:	e7d2      	b.n	801a43e <_vfiprintf_r+0xe2>
 801a498:	9b03      	ldr	r3, [sp, #12]
 801a49a:	1d19      	adds	r1, r3, #4
 801a49c:	681b      	ldr	r3, [r3, #0]
 801a49e:	9103      	str	r1, [sp, #12]
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	bfbb      	ittet	lt
 801a4a4:	425b      	neglt	r3, r3
 801a4a6:	f042 0202 	orrlt.w	r2, r2, #2
 801a4aa:	9307      	strge	r3, [sp, #28]
 801a4ac:	9307      	strlt	r3, [sp, #28]
 801a4ae:	bfb8      	it	lt
 801a4b0:	9204      	strlt	r2, [sp, #16]
 801a4b2:	7823      	ldrb	r3, [r4, #0]
 801a4b4:	2b2e      	cmp	r3, #46	; 0x2e
 801a4b6:	d10c      	bne.n	801a4d2 <_vfiprintf_r+0x176>
 801a4b8:	7863      	ldrb	r3, [r4, #1]
 801a4ba:	2b2a      	cmp	r3, #42	; 0x2a
 801a4bc:	d135      	bne.n	801a52a <_vfiprintf_r+0x1ce>
 801a4be:	9b03      	ldr	r3, [sp, #12]
 801a4c0:	1d1a      	adds	r2, r3, #4
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	9203      	str	r2, [sp, #12]
 801a4c6:	2b00      	cmp	r3, #0
 801a4c8:	bfb8      	it	lt
 801a4ca:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a4ce:	3402      	adds	r4, #2
 801a4d0:	9305      	str	r3, [sp, #20]
 801a4d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a5b8 <_vfiprintf_r+0x25c>
 801a4d6:	7821      	ldrb	r1, [r4, #0]
 801a4d8:	2203      	movs	r2, #3
 801a4da:	4650      	mov	r0, sl
 801a4dc:	f7e5 fe80 	bl	80001e0 <memchr>
 801a4e0:	b140      	cbz	r0, 801a4f4 <_vfiprintf_r+0x198>
 801a4e2:	2340      	movs	r3, #64	; 0x40
 801a4e4:	eba0 000a 	sub.w	r0, r0, sl
 801a4e8:	fa03 f000 	lsl.w	r0, r3, r0
 801a4ec:	9b04      	ldr	r3, [sp, #16]
 801a4ee:	4303      	orrs	r3, r0
 801a4f0:	3401      	adds	r4, #1
 801a4f2:	9304      	str	r3, [sp, #16]
 801a4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4f8:	482c      	ldr	r0, [pc, #176]	; (801a5ac <_vfiprintf_r+0x250>)
 801a4fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4fe:	2206      	movs	r2, #6
 801a500:	f7e5 fe6e 	bl	80001e0 <memchr>
 801a504:	2800      	cmp	r0, #0
 801a506:	d03f      	beq.n	801a588 <_vfiprintf_r+0x22c>
 801a508:	4b29      	ldr	r3, [pc, #164]	; (801a5b0 <_vfiprintf_r+0x254>)
 801a50a:	bb1b      	cbnz	r3, 801a554 <_vfiprintf_r+0x1f8>
 801a50c:	9b03      	ldr	r3, [sp, #12]
 801a50e:	3307      	adds	r3, #7
 801a510:	f023 0307 	bic.w	r3, r3, #7
 801a514:	3308      	adds	r3, #8
 801a516:	9303      	str	r3, [sp, #12]
 801a518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a51a:	443b      	add	r3, r7
 801a51c:	9309      	str	r3, [sp, #36]	; 0x24
 801a51e:	e767      	b.n	801a3f0 <_vfiprintf_r+0x94>
 801a520:	fb0c 3202 	mla	r2, ip, r2, r3
 801a524:	460c      	mov	r4, r1
 801a526:	2001      	movs	r0, #1
 801a528:	e7a5      	b.n	801a476 <_vfiprintf_r+0x11a>
 801a52a:	2300      	movs	r3, #0
 801a52c:	3401      	adds	r4, #1
 801a52e:	9305      	str	r3, [sp, #20]
 801a530:	4619      	mov	r1, r3
 801a532:	f04f 0c0a 	mov.w	ip, #10
 801a536:	4620      	mov	r0, r4
 801a538:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a53c:	3a30      	subs	r2, #48	; 0x30
 801a53e:	2a09      	cmp	r2, #9
 801a540:	d903      	bls.n	801a54a <_vfiprintf_r+0x1ee>
 801a542:	2b00      	cmp	r3, #0
 801a544:	d0c5      	beq.n	801a4d2 <_vfiprintf_r+0x176>
 801a546:	9105      	str	r1, [sp, #20]
 801a548:	e7c3      	b.n	801a4d2 <_vfiprintf_r+0x176>
 801a54a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a54e:	4604      	mov	r4, r0
 801a550:	2301      	movs	r3, #1
 801a552:	e7f0      	b.n	801a536 <_vfiprintf_r+0x1da>
 801a554:	ab03      	add	r3, sp, #12
 801a556:	9300      	str	r3, [sp, #0]
 801a558:	462a      	mov	r2, r5
 801a55a:	4b16      	ldr	r3, [pc, #88]	; (801a5b4 <_vfiprintf_r+0x258>)
 801a55c:	a904      	add	r1, sp, #16
 801a55e:	4630      	mov	r0, r6
 801a560:	f7fd fcd6 	bl	8017f10 <_printf_float>
 801a564:	4607      	mov	r7, r0
 801a566:	1c78      	adds	r0, r7, #1
 801a568:	d1d6      	bne.n	801a518 <_vfiprintf_r+0x1bc>
 801a56a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a56c:	07d9      	lsls	r1, r3, #31
 801a56e:	d405      	bmi.n	801a57c <_vfiprintf_r+0x220>
 801a570:	89ab      	ldrh	r3, [r5, #12]
 801a572:	059a      	lsls	r2, r3, #22
 801a574:	d402      	bmi.n	801a57c <_vfiprintf_r+0x220>
 801a576:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a578:	f7fd fb58 	bl	8017c2c <__retarget_lock_release_recursive>
 801a57c:	89ab      	ldrh	r3, [r5, #12]
 801a57e:	065b      	lsls	r3, r3, #25
 801a580:	f53f af12 	bmi.w	801a3a8 <_vfiprintf_r+0x4c>
 801a584:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a586:	e711      	b.n	801a3ac <_vfiprintf_r+0x50>
 801a588:	ab03      	add	r3, sp, #12
 801a58a:	9300      	str	r3, [sp, #0]
 801a58c:	462a      	mov	r2, r5
 801a58e:	4b09      	ldr	r3, [pc, #36]	; (801a5b4 <_vfiprintf_r+0x258>)
 801a590:	a904      	add	r1, sp, #16
 801a592:	4630      	mov	r0, r6
 801a594:	f7fd ff60 	bl	8018458 <_printf_i>
 801a598:	e7e4      	b.n	801a564 <_vfiprintf_r+0x208>
 801a59a:	bf00      	nop
 801a59c:	0801f3b0 	.word	0x0801f3b0
 801a5a0:	0801f3d0 	.word	0x0801f3d0
 801a5a4:	0801f390 	.word	0x0801f390
 801a5a8:	0801f644 	.word	0x0801f644
 801a5ac:	0801f64e 	.word	0x0801f64e
 801a5b0:	08017f11 	.word	0x08017f11
 801a5b4:	0801a337 	.word	0x0801a337
 801a5b8:	0801f64a 	.word	0x0801f64a

0801a5bc <__swbuf_r>:
 801a5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5be:	460e      	mov	r6, r1
 801a5c0:	4614      	mov	r4, r2
 801a5c2:	4605      	mov	r5, r0
 801a5c4:	b118      	cbz	r0, 801a5ce <__swbuf_r+0x12>
 801a5c6:	6983      	ldr	r3, [r0, #24]
 801a5c8:	b90b      	cbnz	r3, 801a5ce <__swbuf_r+0x12>
 801a5ca:	f7fd fa51 	bl	8017a70 <__sinit>
 801a5ce:	4b21      	ldr	r3, [pc, #132]	; (801a654 <__swbuf_r+0x98>)
 801a5d0:	429c      	cmp	r4, r3
 801a5d2:	d12b      	bne.n	801a62c <__swbuf_r+0x70>
 801a5d4:	686c      	ldr	r4, [r5, #4]
 801a5d6:	69a3      	ldr	r3, [r4, #24]
 801a5d8:	60a3      	str	r3, [r4, #8]
 801a5da:	89a3      	ldrh	r3, [r4, #12]
 801a5dc:	071a      	lsls	r2, r3, #28
 801a5de:	d52f      	bpl.n	801a640 <__swbuf_r+0x84>
 801a5e0:	6923      	ldr	r3, [r4, #16]
 801a5e2:	b36b      	cbz	r3, 801a640 <__swbuf_r+0x84>
 801a5e4:	6923      	ldr	r3, [r4, #16]
 801a5e6:	6820      	ldr	r0, [r4, #0]
 801a5e8:	1ac0      	subs	r0, r0, r3
 801a5ea:	6963      	ldr	r3, [r4, #20]
 801a5ec:	b2f6      	uxtb	r6, r6
 801a5ee:	4283      	cmp	r3, r0
 801a5f0:	4637      	mov	r7, r6
 801a5f2:	dc04      	bgt.n	801a5fe <__swbuf_r+0x42>
 801a5f4:	4621      	mov	r1, r4
 801a5f6:	4628      	mov	r0, r5
 801a5f8:	f7ff f8ac 	bl	8019754 <_fflush_r>
 801a5fc:	bb30      	cbnz	r0, 801a64c <__swbuf_r+0x90>
 801a5fe:	68a3      	ldr	r3, [r4, #8]
 801a600:	3b01      	subs	r3, #1
 801a602:	60a3      	str	r3, [r4, #8]
 801a604:	6823      	ldr	r3, [r4, #0]
 801a606:	1c5a      	adds	r2, r3, #1
 801a608:	6022      	str	r2, [r4, #0]
 801a60a:	701e      	strb	r6, [r3, #0]
 801a60c:	6963      	ldr	r3, [r4, #20]
 801a60e:	3001      	adds	r0, #1
 801a610:	4283      	cmp	r3, r0
 801a612:	d004      	beq.n	801a61e <__swbuf_r+0x62>
 801a614:	89a3      	ldrh	r3, [r4, #12]
 801a616:	07db      	lsls	r3, r3, #31
 801a618:	d506      	bpl.n	801a628 <__swbuf_r+0x6c>
 801a61a:	2e0a      	cmp	r6, #10
 801a61c:	d104      	bne.n	801a628 <__swbuf_r+0x6c>
 801a61e:	4621      	mov	r1, r4
 801a620:	4628      	mov	r0, r5
 801a622:	f7ff f897 	bl	8019754 <_fflush_r>
 801a626:	b988      	cbnz	r0, 801a64c <__swbuf_r+0x90>
 801a628:	4638      	mov	r0, r7
 801a62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a62c:	4b0a      	ldr	r3, [pc, #40]	; (801a658 <__swbuf_r+0x9c>)
 801a62e:	429c      	cmp	r4, r3
 801a630:	d101      	bne.n	801a636 <__swbuf_r+0x7a>
 801a632:	68ac      	ldr	r4, [r5, #8]
 801a634:	e7cf      	b.n	801a5d6 <__swbuf_r+0x1a>
 801a636:	4b09      	ldr	r3, [pc, #36]	; (801a65c <__swbuf_r+0xa0>)
 801a638:	429c      	cmp	r4, r3
 801a63a:	bf08      	it	eq
 801a63c:	68ec      	ldreq	r4, [r5, #12]
 801a63e:	e7ca      	b.n	801a5d6 <__swbuf_r+0x1a>
 801a640:	4621      	mov	r1, r4
 801a642:	4628      	mov	r0, r5
 801a644:	f000 f81a 	bl	801a67c <__swsetup_r>
 801a648:	2800      	cmp	r0, #0
 801a64a:	d0cb      	beq.n	801a5e4 <__swbuf_r+0x28>
 801a64c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a650:	e7ea      	b.n	801a628 <__swbuf_r+0x6c>
 801a652:	bf00      	nop
 801a654:	0801f3b0 	.word	0x0801f3b0
 801a658:	0801f3d0 	.word	0x0801f3d0
 801a65c:	0801f390 	.word	0x0801f390

0801a660 <__ascii_wctomb>:
 801a660:	b149      	cbz	r1, 801a676 <__ascii_wctomb+0x16>
 801a662:	2aff      	cmp	r2, #255	; 0xff
 801a664:	bf85      	ittet	hi
 801a666:	238a      	movhi	r3, #138	; 0x8a
 801a668:	6003      	strhi	r3, [r0, #0]
 801a66a:	700a      	strbls	r2, [r1, #0]
 801a66c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a670:	bf98      	it	ls
 801a672:	2001      	movls	r0, #1
 801a674:	4770      	bx	lr
 801a676:	4608      	mov	r0, r1
 801a678:	4770      	bx	lr
	...

0801a67c <__swsetup_r>:
 801a67c:	4b32      	ldr	r3, [pc, #200]	; (801a748 <__swsetup_r+0xcc>)
 801a67e:	b570      	push	{r4, r5, r6, lr}
 801a680:	681d      	ldr	r5, [r3, #0]
 801a682:	4606      	mov	r6, r0
 801a684:	460c      	mov	r4, r1
 801a686:	b125      	cbz	r5, 801a692 <__swsetup_r+0x16>
 801a688:	69ab      	ldr	r3, [r5, #24]
 801a68a:	b913      	cbnz	r3, 801a692 <__swsetup_r+0x16>
 801a68c:	4628      	mov	r0, r5
 801a68e:	f7fd f9ef 	bl	8017a70 <__sinit>
 801a692:	4b2e      	ldr	r3, [pc, #184]	; (801a74c <__swsetup_r+0xd0>)
 801a694:	429c      	cmp	r4, r3
 801a696:	d10f      	bne.n	801a6b8 <__swsetup_r+0x3c>
 801a698:	686c      	ldr	r4, [r5, #4]
 801a69a:	89a3      	ldrh	r3, [r4, #12]
 801a69c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a6a0:	0719      	lsls	r1, r3, #28
 801a6a2:	d42c      	bmi.n	801a6fe <__swsetup_r+0x82>
 801a6a4:	06dd      	lsls	r5, r3, #27
 801a6a6:	d411      	bmi.n	801a6cc <__swsetup_r+0x50>
 801a6a8:	2309      	movs	r3, #9
 801a6aa:	6033      	str	r3, [r6, #0]
 801a6ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a6b0:	81a3      	strh	r3, [r4, #12]
 801a6b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6b6:	e03e      	b.n	801a736 <__swsetup_r+0xba>
 801a6b8:	4b25      	ldr	r3, [pc, #148]	; (801a750 <__swsetup_r+0xd4>)
 801a6ba:	429c      	cmp	r4, r3
 801a6bc:	d101      	bne.n	801a6c2 <__swsetup_r+0x46>
 801a6be:	68ac      	ldr	r4, [r5, #8]
 801a6c0:	e7eb      	b.n	801a69a <__swsetup_r+0x1e>
 801a6c2:	4b24      	ldr	r3, [pc, #144]	; (801a754 <__swsetup_r+0xd8>)
 801a6c4:	429c      	cmp	r4, r3
 801a6c6:	bf08      	it	eq
 801a6c8:	68ec      	ldreq	r4, [r5, #12]
 801a6ca:	e7e6      	b.n	801a69a <__swsetup_r+0x1e>
 801a6cc:	0758      	lsls	r0, r3, #29
 801a6ce:	d512      	bpl.n	801a6f6 <__swsetup_r+0x7a>
 801a6d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a6d2:	b141      	cbz	r1, 801a6e6 <__swsetup_r+0x6a>
 801a6d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a6d8:	4299      	cmp	r1, r3
 801a6da:	d002      	beq.n	801a6e2 <__swsetup_r+0x66>
 801a6dc:	4630      	mov	r0, r6
 801a6de:	f7fd facd 	bl	8017c7c <_free_r>
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	6363      	str	r3, [r4, #52]	; 0x34
 801a6e6:	89a3      	ldrh	r3, [r4, #12]
 801a6e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a6ec:	81a3      	strh	r3, [r4, #12]
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	6063      	str	r3, [r4, #4]
 801a6f2:	6923      	ldr	r3, [r4, #16]
 801a6f4:	6023      	str	r3, [r4, #0]
 801a6f6:	89a3      	ldrh	r3, [r4, #12]
 801a6f8:	f043 0308 	orr.w	r3, r3, #8
 801a6fc:	81a3      	strh	r3, [r4, #12]
 801a6fe:	6923      	ldr	r3, [r4, #16]
 801a700:	b94b      	cbnz	r3, 801a716 <__swsetup_r+0x9a>
 801a702:	89a3      	ldrh	r3, [r4, #12]
 801a704:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a708:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a70c:	d003      	beq.n	801a716 <__swsetup_r+0x9a>
 801a70e:	4621      	mov	r1, r4
 801a710:	4630      	mov	r0, r6
 801a712:	f000 f84d 	bl	801a7b0 <__smakebuf_r>
 801a716:	89a0      	ldrh	r0, [r4, #12]
 801a718:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a71c:	f010 0301 	ands.w	r3, r0, #1
 801a720:	d00a      	beq.n	801a738 <__swsetup_r+0xbc>
 801a722:	2300      	movs	r3, #0
 801a724:	60a3      	str	r3, [r4, #8]
 801a726:	6963      	ldr	r3, [r4, #20]
 801a728:	425b      	negs	r3, r3
 801a72a:	61a3      	str	r3, [r4, #24]
 801a72c:	6923      	ldr	r3, [r4, #16]
 801a72e:	b943      	cbnz	r3, 801a742 <__swsetup_r+0xc6>
 801a730:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a734:	d1ba      	bne.n	801a6ac <__swsetup_r+0x30>
 801a736:	bd70      	pop	{r4, r5, r6, pc}
 801a738:	0781      	lsls	r1, r0, #30
 801a73a:	bf58      	it	pl
 801a73c:	6963      	ldrpl	r3, [r4, #20]
 801a73e:	60a3      	str	r3, [r4, #8]
 801a740:	e7f4      	b.n	801a72c <__swsetup_r+0xb0>
 801a742:	2000      	movs	r0, #0
 801a744:	e7f7      	b.n	801a736 <__swsetup_r+0xba>
 801a746:	bf00      	nop
 801a748:	200001c8 	.word	0x200001c8
 801a74c:	0801f3b0 	.word	0x0801f3b0
 801a750:	0801f3d0 	.word	0x0801f3d0
 801a754:	0801f390 	.word	0x0801f390

0801a758 <abort>:
 801a758:	b508      	push	{r3, lr}
 801a75a:	2006      	movs	r0, #6
 801a75c:	f000 f898 	bl	801a890 <raise>
 801a760:	2001      	movs	r0, #1
 801a762:	f7ea fb2b 	bl	8004dbc <_exit>

0801a766 <__swhatbuf_r>:
 801a766:	b570      	push	{r4, r5, r6, lr}
 801a768:	460e      	mov	r6, r1
 801a76a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a76e:	2900      	cmp	r1, #0
 801a770:	b096      	sub	sp, #88	; 0x58
 801a772:	4614      	mov	r4, r2
 801a774:	461d      	mov	r5, r3
 801a776:	da07      	bge.n	801a788 <__swhatbuf_r+0x22>
 801a778:	2300      	movs	r3, #0
 801a77a:	602b      	str	r3, [r5, #0]
 801a77c:	89b3      	ldrh	r3, [r6, #12]
 801a77e:	061a      	lsls	r2, r3, #24
 801a780:	d410      	bmi.n	801a7a4 <__swhatbuf_r+0x3e>
 801a782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a786:	e00e      	b.n	801a7a6 <__swhatbuf_r+0x40>
 801a788:	466a      	mov	r2, sp
 801a78a:	f000 f89d 	bl	801a8c8 <_fstat_r>
 801a78e:	2800      	cmp	r0, #0
 801a790:	dbf2      	blt.n	801a778 <__swhatbuf_r+0x12>
 801a792:	9a01      	ldr	r2, [sp, #4]
 801a794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a79c:	425a      	negs	r2, r3
 801a79e:	415a      	adcs	r2, r3
 801a7a0:	602a      	str	r2, [r5, #0]
 801a7a2:	e7ee      	b.n	801a782 <__swhatbuf_r+0x1c>
 801a7a4:	2340      	movs	r3, #64	; 0x40
 801a7a6:	2000      	movs	r0, #0
 801a7a8:	6023      	str	r3, [r4, #0]
 801a7aa:	b016      	add	sp, #88	; 0x58
 801a7ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a7b0 <__smakebuf_r>:
 801a7b0:	898b      	ldrh	r3, [r1, #12]
 801a7b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a7b4:	079d      	lsls	r5, r3, #30
 801a7b6:	4606      	mov	r6, r0
 801a7b8:	460c      	mov	r4, r1
 801a7ba:	d507      	bpl.n	801a7cc <__smakebuf_r+0x1c>
 801a7bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a7c0:	6023      	str	r3, [r4, #0]
 801a7c2:	6123      	str	r3, [r4, #16]
 801a7c4:	2301      	movs	r3, #1
 801a7c6:	6163      	str	r3, [r4, #20]
 801a7c8:	b002      	add	sp, #8
 801a7ca:	bd70      	pop	{r4, r5, r6, pc}
 801a7cc:	ab01      	add	r3, sp, #4
 801a7ce:	466a      	mov	r2, sp
 801a7d0:	f7ff ffc9 	bl	801a766 <__swhatbuf_r>
 801a7d4:	9900      	ldr	r1, [sp, #0]
 801a7d6:	4605      	mov	r5, r0
 801a7d8:	4630      	mov	r0, r6
 801a7da:	f7fd fa9f 	bl	8017d1c <_malloc_r>
 801a7de:	b948      	cbnz	r0, 801a7f4 <__smakebuf_r+0x44>
 801a7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a7e4:	059a      	lsls	r2, r3, #22
 801a7e6:	d4ef      	bmi.n	801a7c8 <__smakebuf_r+0x18>
 801a7e8:	f023 0303 	bic.w	r3, r3, #3
 801a7ec:	f043 0302 	orr.w	r3, r3, #2
 801a7f0:	81a3      	strh	r3, [r4, #12]
 801a7f2:	e7e3      	b.n	801a7bc <__smakebuf_r+0xc>
 801a7f4:	4b0d      	ldr	r3, [pc, #52]	; (801a82c <__smakebuf_r+0x7c>)
 801a7f6:	62b3      	str	r3, [r6, #40]	; 0x28
 801a7f8:	89a3      	ldrh	r3, [r4, #12]
 801a7fa:	6020      	str	r0, [r4, #0]
 801a7fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a800:	81a3      	strh	r3, [r4, #12]
 801a802:	9b00      	ldr	r3, [sp, #0]
 801a804:	6163      	str	r3, [r4, #20]
 801a806:	9b01      	ldr	r3, [sp, #4]
 801a808:	6120      	str	r0, [r4, #16]
 801a80a:	b15b      	cbz	r3, 801a824 <__smakebuf_r+0x74>
 801a80c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a810:	4630      	mov	r0, r6
 801a812:	f000 f86b 	bl	801a8ec <_isatty_r>
 801a816:	b128      	cbz	r0, 801a824 <__smakebuf_r+0x74>
 801a818:	89a3      	ldrh	r3, [r4, #12]
 801a81a:	f023 0303 	bic.w	r3, r3, #3
 801a81e:	f043 0301 	orr.w	r3, r3, #1
 801a822:	81a3      	strh	r3, [r4, #12]
 801a824:	89a0      	ldrh	r0, [r4, #12]
 801a826:	4305      	orrs	r5, r0
 801a828:	81a5      	strh	r5, [r4, #12]
 801a82a:	e7cd      	b.n	801a7c8 <__smakebuf_r+0x18>
 801a82c:	08017a09 	.word	0x08017a09

0801a830 <_malloc_usable_size_r>:
 801a830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a834:	1f18      	subs	r0, r3, #4
 801a836:	2b00      	cmp	r3, #0
 801a838:	bfbc      	itt	lt
 801a83a:	580b      	ldrlt	r3, [r1, r0]
 801a83c:	18c0      	addlt	r0, r0, r3
 801a83e:	4770      	bx	lr

0801a840 <_raise_r>:
 801a840:	291f      	cmp	r1, #31
 801a842:	b538      	push	{r3, r4, r5, lr}
 801a844:	4604      	mov	r4, r0
 801a846:	460d      	mov	r5, r1
 801a848:	d904      	bls.n	801a854 <_raise_r+0x14>
 801a84a:	2316      	movs	r3, #22
 801a84c:	6003      	str	r3, [r0, #0]
 801a84e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a852:	bd38      	pop	{r3, r4, r5, pc}
 801a854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a856:	b112      	cbz	r2, 801a85e <_raise_r+0x1e>
 801a858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a85c:	b94b      	cbnz	r3, 801a872 <_raise_r+0x32>
 801a85e:	4620      	mov	r0, r4
 801a860:	f000 f830 	bl	801a8c4 <_getpid_r>
 801a864:	462a      	mov	r2, r5
 801a866:	4601      	mov	r1, r0
 801a868:	4620      	mov	r0, r4
 801a86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a86e:	f000 b817 	b.w	801a8a0 <_kill_r>
 801a872:	2b01      	cmp	r3, #1
 801a874:	d00a      	beq.n	801a88c <_raise_r+0x4c>
 801a876:	1c59      	adds	r1, r3, #1
 801a878:	d103      	bne.n	801a882 <_raise_r+0x42>
 801a87a:	2316      	movs	r3, #22
 801a87c:	6003      	str	r3, [r0, #0]
 801a87e:	2001      	movs	r0, #1
 801a880:	e7e7      	b.n	801a852 <_raise_r+0x12>
 801a882:	2400      	movs	r4, #0
 801a884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a888:	4628      	mov	r0, r5
 801a88a:	4798      	blx	r3
 801a88c:	2000      	movs	r0, #0
 801a88e:	e7e0      	b.n	801a852 <_raise_r+0x12>

0801a890 <raise>:
 801a890:	4b02      	ldr	r3, [pc, #8]	; (801a89c <raise+0xc>)
 801a892:	4601      	mov	r1, r0
 801a894:	6818      	ldr	r0, [r3, #0]
 801a896:	f7ff bfd3 	b.w	801a840 <_raise_r>
 801a89a:	bf00      	nop
 801a89c:	200001c8 	.word	0x200001c8

0801a8a0 <_kill_r>:
 801a8a0:	b538      	push	{r3, r4, r5, lr}
 801a8a2:	4d07      	ldr	r5, [pc, #28]	; (801a8c0 <_kill_r+0x20>)
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	4604      	mov	r4, r0
 801a8a8:	4608      	mov	r0, r1
 801a8aa:	4611      	mov	r1, r2
 801a8ac:	602b      	str	r3, [r5, #0]
 801a8ae:	f7ea fa75 	bl	8004d9c <_kill>
 801a8b2:	1c43      	adds	r3, r0, #1
 801a8b4:	d102      	bne.n	801a8bc <_kill_r+0x1c>
 801a8b6:	682b      	ldr	r3, [r5, #0]
 801a8b8:	b103      	cbz	r3, 801a8bc <_kill_r+0x1c>
 801a8ba:	6023      	str	r3, [r4, #0]
 801a8bc:	bd38      	pop	{r3, r4, r5, pc}
 801a8be:	bf00      	nop
 801a8c0:	2001498c 	.word	0x2001498c

0801a8c4 <_getpid_r>:
 801a8c4:	f7ea ba62 	b.w	8004d8c <_getpid>

0801a8c8 <_fstat_r>:
 801a8c8:	b538      	push	{r3, r4, r5, lr}
 801a8ca:	4d07      	ldr	r5, [pc, #28]	; (801a8e8 <_fstat_r+0x20>)
 801a8cc:	2300      	movs	r3, #0
 801a8ce:	4604      	mov	r4, r0
 801a8d0:	4608      	mov	r0, r1
 801a8d2:	4611      	mov	r1, r2
 801a8d4:	602b      	str	r3, [r5, #0]
 801a8d6:	f7ea fac0 	bl	8004e5a <_fstat>
 801a8da:	1c43      	adds	r3, r0, #1
 801a8dc:	d102      	bne.n	801a8e4 <_fstat_r+0x1c>
 801a8de:	682b      	ldr	r3, [r5, #0]
 801a8e0:	b103      	cbz	r3, 801a8e4 <_fstat_r+0x1c>
 801a8e2:	6023      	str	r3, [r4, #0]
 801a8e4:	bd38      	pop	{r3, r4, r5, pc}
 801a8e6:	bf00      	nop
 801a8e8:	2001498c 	.word	0x2001498c

0801a8ec <_isatty_r>:
 801a8ec:	b538      	push	{r3, r4, r5, lr}
 801a8ee:	4d06      	ldr	r5, [pc, #24]	; (801a908 <_isatty_r+0x1c>)
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	4608      	mov	r0, r1
 801a8f6:	602b      	str	r3, [r5, #0]
 801a8f8:	f7ea fabf 	bl	8004e7a <_isatty>
 801a8fc:	1c43      	adds	r3, r0, #1
 801a8fe:	d102      	bne.n	801a906 <_isatty_r+0x1a>
 801a900:	682b      	ldr	r3, [r5, #0]
 801a902:	b103      	cbz	r3, 801a906 <_isatty_r+0x1a>
 801a904:	6023      	str	r3, [r4, #0]
 801a906:	bd38      	pop	{r3, r4, r5, pc}
 801a908:	2001498c 	.word	0x2001498c

0801a90c <_init>:
 801a90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a90e:	bf00      	nop
 801a910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a912:	bc08      	pop	{r3}
 801a914:	469e      	mov	lr, r3
 801a916:	4770      	bx	lr

0801a918 <_fini>:
 801a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a91a:	bf00      	nop
 801a91c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a91e:	bc08      	pop	{r3}
 801a920:	469e      	mov	lr, r3
 801a922:	4770      	bx	lr

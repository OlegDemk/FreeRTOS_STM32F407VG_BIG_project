
FreeRTOS_STM32F407VG_BIG_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005080  0801d4d8  0801d4d8  0002d4d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022558  08022558  00040434  2**0
                  CONTENTS
  4 .ARM          00000008  08022558  08022558  00032558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022560  08022560  00040434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022560  08022560  00032560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022564  08022564  00032564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000434  20000000  08022568  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040434  2**0
                  CONTENTS
 10 .bss          00016620  20000438  20000438  00040438  2**3
                  ALLOC
 11 ._user_heap_stack 00001100  20016a58  20016a58  00040438  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040434  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042270  00000000  00000000  00040464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000085fb  00000000  00000000  000826d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002a58  00000000  00000000  0008acd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000026e8  00000000  00000000  0008d728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002edf4  00000000  00000000  0008fe10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003e537  00000000  00000000  000bec04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4d89  00000000  00000000  000fd13b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f1ec4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c2f0  00000000  00000000  001f1f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000438 	.word	0x20000438
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d4bc 	.word	0x0801d4bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000043c 	.word	0x2000043c
 80001cc:	0801d4bc 	.word	0x0801d4bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000f86:	2310      	movs	r3, #16
 8000f88:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000f8e:	e019      	b.n	8000fc4 <TP_Read+0x44>
    {
        value <<= 1;
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <TP_Read+0x54>)
 8000f9c:	f008 fb84 	bl	80096a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <TP_Read+0x54>)
 8000fa6:	f008 fb7f 	bl	80096a8 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000faa:	2101      	movs	r1, #1
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <TP_Read+0x58>)
 8000fae:	f008 fb63 	bl	8009678 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <TP_Read+0x3e>
        {
            value++;
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e2      	bne.n	8000f90 <TP_Read+0x10>
    };

    return value;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	4815      	ldr	r0, [pc, #84]	; (8001044 <TP_Write+0x68>)
 8000ff0:	f008 fb5a 	bl	80096a8 <HAL_GPIO_WritePin>

    while(i > 0)
 8000ff4:	e01e      	b.n	8001034 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da05      	bge.n	800100a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2104      	movs	r1, #4
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <TP_Write+0x6c>)
 8001004:	f008 fb50 	bl	80096a8 <HAL_GPIO_WritePin>
 8001008:	e004      	b.n	8001014 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2104      	movs	r1, #4
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <TP_Write+0x6c>)
 8001010:	f008 fb4a 	bl	80096a8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <TP_Write+0x68>)
 8001020:	f008 fb42 	bl	80096a8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <TP_Write+0x68>)
 800102a:	f008 fb3d 	bl	80096a8 <HAL_GPIO_WritePin>
        i--;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1dd      	bne.n	8000ff6 <TP_Write+0x1a>
    };
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400
 8001048:	40021000 	.word	0x40021000
 800104c:	00000000 	.word	0x00000000

08001050 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	4862      	ldr	r0, [pc, #392]	; (80011e8 <TP_Read_Coordinates+0x198>)
 800105e:	f008 fb23 	bl	80096a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2104      	movs	r1, #4
 8001066:	4861      	ldr	r0, [pc, #388]	; (80011ec <TP_Read_Coordinates+0x19c>)
 8001068:	f008 fb1e 	bl	80096a8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	485d      	ldr	r0, [pc, #372]	; (80011e8 <TP_Read_Coordinates+0x198>)
 8001074:	f008 fb18 	bl	80096a8 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	4851      	ldr	r0, [pc, #324]	; (80011e8 <TP_Read_Coordinates+0x198>)
 80010a2:	f008 fb01 	bl	80096a8 <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80010a6:	e023      	b.n	80010f0 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 80010a8:	2090      	movs	r0, #144	; 0x90
 80010aa:	f7ff ff97 	bl	8000fdc <TP_Write>

		rawy = TP_Read();
 80010ae:	f7ff ff67 	bl	8000f80 <TP_Read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	4413      	add	r3, r2
 80010bc:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4413      	add	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 80010c6:	20d0      	movs	r0, #208	; 0xd0
 80010c8:	f7ff ff88 	bl	8000fdc <TP_Write>
        rawx = TP_Read();
 80010cc:	f7ff ff58 	bl	8000f80 <TP_Read>
 80010d0:	4603      	mov	r3, r0
 80010d2:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	4413      	add	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
        samples--;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3301      	adds	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <TP_Read_Coordinates+0xb6>
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	483d      	ldr	r0, [pc, #244]	; (80011f0 <TP_Read_Coordinates+0x1a0>)
 80010fc:	f008 fabc 	bl	8009678 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0d0      	beq.n	80010a8 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4836      	ldr	r0, [pc, #216]	; (80011e8 <TP_Read_Coordinates+0x198>)
 800110e:	f008 facb 	bl	80096a8 <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001118:	d154      	bne.n	80011c4 <TP_Read_Coordinates+0x174>
 800111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111e:	4834      	ldr	r0, [pc, #208]	; (80011f0 <TP_Read_Coordinates+0x1a0>)
 8001120:	f008 faaa 	bl	8009678 <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d14c      	bne.n	80011c4 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	425b      	negs	r3, r3
 800114a:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 800114c:	89bb      	ldrh	r3, [r7, #12]
 800114e:	425b      	negs	r3, r3
 8001150:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8001152:	89fa      	ldrh	r2, [r7, #14]
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <TP_Read_Coordinates+0x1a4>)
 8001156:	fba3 1302 	umull	r1, r3, r3, r2
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	0852      	lsrs	r2, r2, #1
 800115e:	4413      	add	r3, r2
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9db 	bl	8000524 <__aeabi_i2d>
 800116e:	a31c      	add	r3, pc, #112	; (adr r3, 80011e0 <TP_Read_Coordinates+0x190>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa40 	bl	80005f8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1c9c      	adds	r4, r3, #2
 8001184:	f7ff fd10 	bl	8000ba8 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	b29b      	uxth	r3, r3
 800118c:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <TP_Read_Coordinates+0x1a8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	09db      	lsrs	r3, r3, #7
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b0f      	subs	r3, #15
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9c1 	bl	8000524 <__aeabi_i2d>
 80011a2:	a30f      	add	r3, pc, #60	; (adr r3, 80011e0 <TP_Read_Coordinates+0x190>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fcf8 	bl	8000ba8 <__aeabi_d2uiz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e007      	b.n	80011d4 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3302      	adds	r3, #2
 80011ce:	2200      	movs	r2, #0
 80011d0:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80011d2:	2300      	movs	r3, #0
		}
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	372c      	adds	r7, #44	; 0x2c
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	28f5c28f 	.word	0x28f5c28f
 80011e4:	3ff28f5c 	.word	0x3ff28f5c
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40020800 	.word	0x40020800
 80011f4:	e01e01e1 	.word	0xe01e01e1
 80011f8:	a0a0a0a1 	.word	0xa0a0a0a1

080011fc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <TP_Touchpad_Pressed+0x20>)
 8001206:	f008 fa37 	bl	8009678 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001214:	2300      	movs	r3, #0
	}
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800

08001220 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <TFT9341_FontsIni+0x60>)
 8001226:	2208      	movs	r2, #8
 8001228:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <TFT9341_FontsIni+0x60>)
 800122c:	2205      	movs	r2, #5
 800122e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <TFT9341_FontsIni+0x64>)
 8001232:	220c      	movs	r2, #12
 8001234:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <TFT9341_FontsIni+0x64>)
 8001238:	2207      	movs	r2, #7
 800123a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <TFT9341_FontsIni+0x68>)
 800123e:	2210      	movs	r2, #16
 8001240:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <TFT9341_FontsIni+0x68>)
 8001244:	220b      	movs	r2, #11
 8001246:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <TFT9341_FontsIni+0x6c>)
 800124a:	2214      	movs	r2, #20
 800124c:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <TFT9341_FontsIni+0x6c>)
 8001250:	220e      	movs	r2, #14
 8001252:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <TFT9341_FontsIni+0x70>)
 8001256:	2218      	movs	r2, #24
 8001258:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <TFT9341_FontsIni+0x70>)
 800125c:	2211      	movs	r2, #17
 800125e:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001268:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800126c:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <TFT9341_FontsIni+0x68>)
 8001272:	605a      	str	r2, [r3, #4]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000020 	.word	0x20000020
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000010 	.word	0x20000010
 8001290:	20000018 	.word	0x20000018
 8001294:	20007718 	.word	0x20007718

08001298 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 80012a2:	2201      	movs	r2, #1
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <TFT9341_SendData+0x2c>)
 80012a8:	f008 f9fe 	bl	80096a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 80012ac:	1df9      	adds	r1, r7, #7
 80012ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b2:	2201      	movs	r2, #1
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <TFT9341_SendData+0x30>)
 80012b6:	f00c fa60 	bl	800d77a <HAL_SPI_Transmit>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	2000ab34 	.word	0x2000ab34

080012cc <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <TFT9341_SendCommand+0x2c>)
 80012dc:	f008 f9e4 	bl	80096a8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 80012e0:	1df9      	adds	r1, r7, #7
 80012e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e6:	2201      	movs	r2, #1
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <TFT9341_SendCommand+0x30>)
 80012ea:	f00c fa46 	bl	800d77a <HAL_SPI_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	2000ab34 	.word	0x2000ab34

08001300 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <TFT9341_reset+0x24>)
 800130a:	f008 f9cd 	bl	80096a8 <HAL_GPIO_WritePin>
	osDelay(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f014 fa30 	bl	8015774 <osDelay>
	RESET_IDLE();
 8001314:	2201      	movs	r2, #1
 8001316:	2120      	movs	r1, #32
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TFT9341_reset+0x24>)
 800131a:	f008 f9c5 	bl	80096a8 <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	80fb      	strh	r3, [r7, #6]
 8001334:	4613      	mov	r3, r2
 8001336:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	48a3      	ldr	r0, [pc, #652]	; (80015cc <TFT9341_ini+0x2a4>)
 800133e:	f008 f9b3 	bl	80096a8 <HAL_GPIO_WritePin>
  TFT9341_reset();
 8001342:	f7ff ffdd 	bl	8001300 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ffc0 	bl	80012cc <TFT9341_SendCommand>
  osDelay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f014 fa10 	bl	8015774 <osDelay>

  //Power Control A
    data[0] = 0x39;
 8001354:	2339      	movs	r3, #57	; 0x39
 8001356:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 8001358:	232c      	movs	r3, #44	; 0x2c
 800135a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 800135c:	2300      	movs	r3, #0
 800135e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 8001360:	2334      	movs	r3, #52	; 0x34
 8001362:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 8001364:	2302      	movs	r3, #2
 8001366:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 8001368:	20cb      	movs	r0, #203	; 0xcb
 800136a:	f7ff ffaf 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2105      	movs	r1, #5
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f92f 	bl	80015d8 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 800137e:	23c1      	movs	r3, #193	; 0xc1
 8001380:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 8001382:	2330      	movs	r3, #48	; 0x30
 8001384:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 8001386:	20cf      	movs	r0, #207	; 0xcf
 8001388:	f7ff ffa0 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2103      	movs	r1, #3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f920 	bl	80015d8 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 8001398:	2385      	movs	r3, #133	; 0x85
 800139a:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 80013a0:	2378      	movs	r3, #120	; 0x78
 80013a2:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 80013a4:	20e8      	movs	r0, #232	; 0xe8
 80013a6:	f7ff ff91 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2103      	movs	r1, #3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f911 	bl	80015d8 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 80013be:	20ea      	movs	r0, #234	; 0xea
 80013c0:	f7ff ff84 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f904 	bl	80015d8 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 80013d4:	2303      	movs	r3, #3
 80013d6:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 80013d8:	2312      	movs	r3, #18
 80013da:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 80013dc:	2381      	movs	r3, #129	; 0x81
 80013de:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 80013e0:	20ed      	movs	r0, #237	; 0xed
 80013e2:	f7ff ff73 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f8f3 	bl	80015d8 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 80013f2:	2320      	movs	r3, #32
 80013f4:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 80013f6:	20f7      	movs	r0, #247	; 0xf7
 80013f8:	f7ff ff68 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f8e8 	bl	80015d8 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001408:	2310      	movs	r3, #16
 800140a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800140c:	20c0      	movs	r0, #192	; 0xc0
 800140e:	f7ff ff5d 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8dd 	bl	80015d8 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800141e:	2310      	movs	r3, #16
 8001420:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001422:	20c1      	movs	r0, #193	; 0xc1
 8001424:	f7ff ff52 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f8d2 	bl	80015d8 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001434:	233e      	movs	r3, #62	; 0x3e
 8001436:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001438:	2328      	movs	r3, #40	; 0x28
 800143a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800143c:	20c5      	movs	r0, #197	; 0xc5
 800143e:	f7ff ff45 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2102      	movs	r1, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f8c5 	bl	80015d8 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 800144e:	2386      	movs	r3, #134	; 0x86
 8001450:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 8001452:	20c7      	movs	r0, #199	; 0xc7
 8001454:	f7ff ff3a 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8ba 	bl	80015d8 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 8001464:	2348      	movs	r3, #72	; 0x48
 8001466:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f7ff ff2f 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f8af 	bl	80015d8 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 800147a:	2355      	movs	r3, #85	; 0x55
 800147c:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 800147e:	203a      	movs	r0, #58	; 0x3a
 8001480:	f7ff ff24 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f8a4 	bl	80015d8 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 8001494:	2318      	movs	r3, #24
 8001496:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 8001498:	20b1      	movs	r0, #177	; 0xb1
 800149a:	f7ff ff17 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	2102      	movs	r1, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f897 	bl	80015d8 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 80014aa:	2308      	movs	r3, #8
 80014ac:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 80014ae:	2382      	movs	r3, #130	; 0x82
 80014b0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 80014b2:	2327      	movs	r3, #39	; 0x27
 80014b4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 80014b6:	20b6      	movs	r0, #182	; 0xb6
 80014b8:	f7ff ff08 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2103      	movs	r1, #3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f888 	bl	80015d8 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 80014c8:	2300      	movs	r3, #0
 80014ca:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 80014cc:	20f2      	movs	r0, #242	; 0xf2
 80014ce:	f7ff fefd 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2101      	movs	r1, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f87d 	bl	80015d8 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 80014de:	2301      	movs	r3, #1
 80014e0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 80014e2:	2026      	movs	r0, #38	; 0x26
 80014e4:	f7ff fef2 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f872 	bl	80015d8 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 80014f4:	230f      	movs	r3, #15
 80014f6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 80014f8:	2331      	movs	r3, #49	; 0x31
 80014fa:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 80014fc:	232b      	movs	r3, #43	; 0x2b
 80014fe:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001500:	230c      	movs	r3, #12
 8001502:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001504:	230e      	movs	r3, #14
 8001506:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001508:	2308      	movs	r3, #8
 800150a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800150c:	234e      	movs	r3, #78	; 0x4e
 800150e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001510:	23f1      	movs	r3, #241	; 0xf1
 8001512:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001514:	2337      	movs	r3, #55	; 0x37
 8001516:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001518:	2307      	movs	r3, #7
 800151a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800151c:	2310      	movs	r3, #16
 800151e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001520:	2303      	movs	r3, #3
 8001522:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001524:	230e      	movs	r3, #14
 8001526:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001528:	2309      	movs	r3, #9
 800152a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001530:	20e0      	movs	r0, #224	; 0xe0
 8001532:	f7ff fecb 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	210f      	movs	r1, #15
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f84b 	bl	80015d8 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 800154a:	2314      	movs	r3, #20
 800154c:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 800154e:	2303      	movs	r3, #3
 8001550:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 8001552:	2311      	movs	r3, #17
 8001554:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 8001556:	2307      	movs	r3, #7
 8001558:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 800155a:	2331      	movs	r3, #49	; 0x31
 800155c:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 800155e:	23c1      	movs	r3, #193	; 0xc1
 8001560:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 8001562:	2348      	movs	r3, #72	; 0x48
 8001564:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 8001566:	2308      	movs	r3, #8
 8001568:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 800156a:	230f      	movs	r3, #15
 800156c:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 800156e:	230c      	movs	r3, #12
 8001570:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 8001572:	2331      	movs	r3, #49	; 0x31
 8001574:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 8001576:	2336      	movs	r3, #54	; 0x36
 8001578:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 800157a:	230f      	movs	r3, #15
 800157c:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 800157e:	20e1      	movs	r0, #225	; 0xe1
 8001580:	f7ff fea4 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	210f      	movs	r1, #15
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f824 	bl	80015d8 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8001590:	2011      	movs	r0, #17
 8001592:	f7ff fe9b 	bl	80012cc <TFT9341_SendCommand>

    osDelay(120);
 8001596:	2078      	movs	r0, #120	; 0x78
 8001598:	f014 f8ec 	bl	8015774 <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 800159c:	2348      	movs	r3, #72	; 0x48
 800159e:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 80015a0:	2029      	movs	r0, #41	; 0x29
 80015a2:	f7ff fe93 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f813 	bl	80015d8 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <TFT9341_ini+0x2a8>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <TFT9341_ini+0x2ac>)
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 80015be:	f7ff fe2f 	bl	8001220 <TFT9341_FontsIni>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	20007716 	.word	0x20007716
 80015d4:	20007714 	.word	0x20007714

080015d8 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80015e2:	2201      	movs	r2, #1
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <TFT9341_WriteData+0x54>)
 80015e8:	f008 f85e 	bl	80096a8 <HAL_GPIO_WritePin>
	while(buff_size > 0)
 80015ec:	e015      	b.n	800161a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015f4:	bf28      	it	cs
 80015f6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80015fa:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <TFT9341_WriteData+0x58>)
 8001606:	f00c f8b8 	bl	800d77a <HAL_SPI_Transmit>
		buff += chunk_size;
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e6      	bne.n	80015ee <TFT9341_WriteData+0x16>
	}
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	2000ab34 	.word	0x2000ab34

08001634 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8001652:	202a      	movs	r0, #42	; 0x2a
 8001654:	f7ff fe3a 	bl	80012cc <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	733b      	strb	r3, [r7, #12]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	737b      	strb	r3, [r7, #13]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	73bb      	strb	r3, [r7, #14]
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2104      	movs	r1, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffaa 	bl	80015d8 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8001684:	202b      	movs	r0, #43	; 0x2b
 8001686:	f7ff fe21 	bl	80012cc <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	723b      	strb	r3, [r7, #8]
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	727b      	strb	r3, [r7, #9]
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	72bb      	strb	r3, [r7, #10]
 80016a4:	883b      	ldrh	r3, [r7, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2104      	movs	r1, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff91 	bl	80015d8 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f7ff fe08 	bl	80012cc <TFT9341_SendCommand>
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <TFT9341_FillScreen+0x90>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <TFT9341_FillScreen+0x94>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffa7 	bl	8001634 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e011      	b.n	8001710 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	b2d1      	uxtb	r1, r2
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <TFT9341_FillScreen+0x98>)
 80016fa:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	3301      	adds	r3, #1
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	b2d1      	uxtb	r1, r2
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <TFT9341_FillScreen+0x98>)
 8001708:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001716:	d3e9      	bcc.n	80016ec <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001718:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800171c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <TFT9341_FillScreen+0x9c>)
 8001724:	f007 ffc0 	bl	80096a8 <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <TFT9341_FillScreen+0xa0>)
 800172a:	2218      	movs	r2, #24
 800172c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <TFT9341_FillScreen+0x98>)
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <TFT9341_FillScreen+0xa4>)
 8001738:	f00c fafe 	bl	800dd38 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800173c:	bf00      	nop
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <TFT9341_FillScreen+0xa8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0fb      	beq.n	800173e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <TFT9341_FillScreen+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20007716 	.word	0x20007716
 8001758:	20007714 	.word	0x20007714
 800175c:	20000454 	.word	0x20000454
 8001760:	40021000 	.word	0x40021000
 8001764:	2000002c 	.word	0x2000002c
 8001768:	2000ab34 	.word	0x2000ab34
 800176c:	20002848 	.word	0x20002848

08001770 <TFT9341_DrawPixel>:
{
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db28      	blt.n	80017d6 <TFT9341_DrawPixel+0x66>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db25      	blt.n	80017d6 <TFT9341_DrawPixel+0x66>
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <TFT9341_DrawPixel+0x70>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4293      	cmp	r3, r2
 8001794:	da1f      	bge.n	80017d6 <TFT9341_DrawPixel+0x66>
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <TFT9341_DrawPixel+0x74>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4293      	cmp	r3, r2
 80017a0:	da19      	bge.n	80017d6 <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b298      	uxth	r0, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	b299      	uxth	r1, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f7ff ff3f 	bl	8001634 <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 80017b6:	202c      	movs	r0, #44	; 0x2c
 80017b8:	f7ff fd88 	bl	80012cc <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fd67 	bl	8001298 <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fd62 	bl	8001298 <TFT9341_SendData>
 80017d4:	e000      	b.n	80017d8 <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 80017d6:	bf00      	nop
}
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20007716 	.word	0x20007716
 80017e4:	20007714 	.word	0x20007714

080017e8 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <TFT9341_SetTextColor+0x1c>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	8013      	strh	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20007718 	.word	0x20007718

08001808 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <TFT9341_SetBackColor+0x1c>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	8053      	strh	r3, [r2, #2]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20007718 	.word	0x20007718

08001828 <TFT9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	460b      	mov	r3, r1
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  height = lcdprop.pFont->Height;
 8001846:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	88db      	ldrh	r3, [r3, #6]
 800184c:	837b      	strh	r3, [r7, #26]
  width  = lcdprop.pFont->Width;
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	833b      	strh	r3, [r7, #24]
  offset = 8 *((width + 7)/8) -  width ;
 8001856:	8b3b      	ldrh	r3, [r7, #24]
 8001858:	3307      	adds	r3, #7
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <TFT9341_DrawChar+0x38>
 800185e:	3307      	adds	r3, #7
 8001860:	10db      	asrs	r3, r3, #3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	75fb      	strb	r3, [r7, #23]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);	// c_t =0
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	3b20      	subs	r3, #32
 800187a:	4941      	ldr	r1, [pc, #260]	; (8001980 <TFT9341_DrawChar+0x158>)
 800187c:	6849      	ldr	r1, [r1, #4]
 800187e:	88c9      	ldrh	r1, [r1, #6]
 8001880:	fb01 f103 	mul.w	r1, r1, r3
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	3307      	adds	r3, #7
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <TFT9341_DrawChar+0x6a>
 8001890:	3307      	adds	r3, #7
 8001892:	10db      	asrs	r3, r3, #3
 8001894:	fb03 f301 	mul.w	r3, r3, r1
 8001898:	4413      	add	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

  for(i = 0; i < height; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e065      	b.n	800196e <TFT9341_DrawChar+0x146>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 80018a2:	8b3b      	ldrh	r3, [r7, #24]
 80018a4:	3307      	adds	r3, #7
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da00      	bge.n	80018ac <TFT9341_DrawChar+0x84>
 80018aa:	3307      	adds	r3, #7
 80018ac:	10db      	asrs	r3, r3, #3
 80018ae:	461a      	mov	r2, r3
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fb03 f302 	mul.w	r3, r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
    switch(((width + 7)/8))
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	3307      	adds	r3, #7
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <TFT9341_DrawChar+0x9e>
 80018c4:	3307      	adds	r3, #7
 80018c6:	10db      	asrs	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <TFT9341_DrawChar+0xaa>
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d004      	beq.n	80018da <TFT9341_DrawChar+0xb2>
 80018d0:	e00c      	b.n	80018ec <TFT9341_DrawChar+0xc4>
    {
      case 1:
          line =  pchar[0];
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	61fb      	str	r3, [r7, #28]
          break;
 80018d8:	e016      	b.n	8001908 <TFT9341_DrawChar+0xe0>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	3201      	adds	r2, #1
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
          break;
 80018ea:	e00d      	b.n	8001908 <TFT9341_DrawChar+0xe0>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	4313      	orrs	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	3202      	adds	r2, #2
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	61fb      	str	r3, [r7, #28]
        break;
 8001906:	bf00      	nop
    }
    for (j = 0; j < width; j++)								// print row pixel by pixel
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	e025      	b.n	800195a <TFT9341_DrawChar+0x132>
    {
      if(line & (1 << (width- j + offset- 1)))
 800190e:	8b3a      	ldrh	r2, [r7, #24]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4413      	add	r3, r2
 8001918:	3b01      	subs	r3, #1
 800191a:	2201      	movs	r2, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	461a      	mov	r2, r3
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <TFT9341_DrawChar+0x118>
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.TextColor);	// Print text pixel
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	4413      	add	r3, r2
 8001930:	4618      	mov	r0, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001936:	8812      	ldrh	r2, [r2, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff ff19 	bl	8001770 <TFT9341_DrawPixel>
 800193e:	e009      	b.n	8001954 <TFT9341_DrawChar+0x12c>
      }
      else
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.BackColor);	// Print background pixel
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	4413      	add	r3, r2
 8001946:	4618      	mov	r0, r3
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <TFT9341_DrawChar+0x158>)
 800194c:	8852      	ldrh	r2, [r2, #2]
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff ff0e 	bl	8001770 <TFT9341_DrawPixel>
    for (j = 0; j < width; j++)								// print row pixel by pixel
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	3301      	adds	r3, #1
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	8b3b      	ldrh	r3, [r7, #24]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3d5      	bcc.n	800190e <TFT9341_DrawChar+0xe6>
      }
    }
    y++;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	8b7b      	ldrh	r3, [r7, #26]
 8001970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001972:	429a      	cmp	r2, r3
 8001974:	d395      	bcc.n	80018a2 <TFT9341_DrawChar+0x7a>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20007718 	.word	0x20007718

08001984 <TFT9341_DrawChar_DMA>:
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
 800198e:	460b      	mov	r3, r1
 8001990:	80bb      	strh	r3, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	88db      	ldrh	r3, [r3, #6]
 80019a8:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 80019aa:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 80019b2:	8b3b      	ldrh	r3, [r7, #24]
 80019b4:	3307      	adds	r3, #7
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da00      	bge.n	80019bc <TFT9341_DrawChar_DMA+0x38>
 80019ba:	3307      	adds	r3, #7
 80019bc:	10db      	asrs	r3, r3, #3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	8b3b      	ldrh	r3, [r7, #24]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	3b20      	subs	r3, #32
 80019d6:	4965      	ldr	r1, [pc, #404]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019d8:	6849      	ldr	r1, [r1, #4]
 80019da:	88c9      	ldrh	r1, [r1, #6]
 80019dc:	fb01 f103 	mul.w	r1, r1, r3
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	889b      	ldrh	r3, [r3, #4]
 80019e6:	3307      	adds	r3, #7
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <TFT9341_DrawChar_DMA+0x6a>
 80019ec:	3307      	adds	r3, #7
 80019ee:	10db      	asrs	r3, r3, #3
 80019f0:	fb03 f301 	mul.w	r3, r3, r1
 80019f4:	4413      	add	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 80019f8:	88ba      	ldrh	r2, [r7, #4]
 80019fa:	8b7b      	ldrh	r3, [r7, #26]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e07c      	b.n	8001b00 <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001a06:	8b3b      	ldrh	r3, [r7, #24]
 8001a08:	3307      	adds	r3, #7
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <TFT9341_DrawChar_DMA+0x8c>
 8001a0e:	3307      	adds	r3, #7
 8001a10:	10db      	asrs	r3, r3, #3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	fb03 f302 	mul.w	r3, r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 8001a20:	8b3b      	ldrh	r3, [r7, #24]
 8001a22:	3307      	adds	r3, #7
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da00      	bge.n	8001a2a <TFT9341_DrawChar_DMA+0xa6>
 8001a28:	3307      	adds	r3, #7
 8001a2a:	10db      	asrs	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d002      	beq.n	8001a36 <TFT9341_DrawChar_DMA+0xb2>
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d004      	beq.n	8001a3e <TFT9341_DrawChar_DMA+0xba>
 8001a34:	e00c      	b.n	8001a50 <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	61fb      	str	r3, [r7, #28]
				break;
 8001a3c:	e016      	b.n	8001a6c <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	3201      	adds	r2, #1
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]
				break;
 8001a4e:	e00d      	b.n	8001a6c <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	3202      	adds	r2, #2
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]
				break;
 8001a6a:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	e03c      	b.n	8001aec <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 8001a72:	8b3b      	ldrh	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	4413      	add	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001a84:	8b3a      	ldrh	r2, [r7, #24]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	2201      	movs	r2, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d011      	beq.n	8001ac4 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b2d1      	uxtb	r1, r2
 8001aae:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ab0:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2d1      	uxtb	r1, r2
 8001abe:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ac0:	54d1      	strb	r1, [r2, r3]
 8001ac2:	e010      	b.n	8001ae6 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ac6:	885b      	ldrh	r3, [r3, #2]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ad4:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ad8:	885a      	ldrh	r2, [r3, #2]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2d1      	uxtb	r1, r2
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ae4:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	8b3b      	ldrh	r3, [r7, #24]
 8001aee:	6a3a      	ldr	r2, [r7, #32]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3be      	bcc.n	8001a72 <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	3301      	adds	r3, #1
 8001af8:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3301      	adds	r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	8b7b      	ldrh	r3, [r7, #26]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f4ff af7e 	bcc.w	8001a06 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	8b3b      	ldrh	r3, [r7, #24]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29c      	uxth	r4, r3
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	8b7b      	ldrh	r3, [r7, #26]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	88b9      	ldrh	r1, [r7, #4]
 8001b1c:	88f8      	ldrh	r0, [r7, #6]
 8001b1e:	4622      	mov	r2, r4
 8001b20:	f7ff fd88 	bl	8001634 <TFT9341_SetAddrWindow>
	DC_DATA();
 8001b24:	2201      	movs	r2, #1
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <TFT9341_DrawChar_DMA+0x1f0>)
 8001b2a:	f007 fdbd 	bl	80096a8 <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <TFT9341_DrawChar_DMA+0x1f4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 8001b34:	8b3b      	ldrh	r3, [r7, #24]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	8b7b      	ldrh	r3, [r7, #26]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	fb12 f303 	smulbb	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4908      	ldr	r1, [pc, #32]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <TFT9341_DrawChar_DMA+0x1f8>)
 8001b50:	f00c f8f2 	bl	800dd38 <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 8001b54:	bf00      	nop
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <TFT9341_DrawChar_DMA+0x1fc>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0fb      	beq.n	8001b56 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <TFT9341_DrawChar_DMA+0x1fc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	372c      	adds	r7, #44	; 0x2c
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	20007718 	.word	0x20007718
 8001b70:	20000454 	.word	0x20000454
 8001b74:	40021000 	.word	0x40021000
 8001b78:	2000002c 	.word	0x2000002c
 8001b7c:	2000ab34 	.word	0x2000ab34
 8001b80:	20002848 	.word	0x20002848

08001b84 <TFT9341_String>:
// ---------------------------------------------------------------------------------
void TFT9341_String(uint16_t x,uint16_t y, char *str)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	603a      	str	r2, [r7, #0]
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	460b      	mov	r3, r1
 8001b92:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001b94:	e00f      	b.n	8001bb6 <TFT9341_String+0x32>
  {
    TFT9341_DrawChar(x,y,str[0]);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	88b9      	ldrh	r1, [r7, #4]
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe42 	bl	8001828 <TFT9341_DrawChar>
    x+=lcdprop.pFont->Width;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <TFT9341_String+0x44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	889a      	ldrh	r2, [r3, #4]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
  while(*str)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1eb      	bne.n	8001b96 <TFT9341_String+0x12>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20007718 	.word	0x20007718

08001bcc <TFT9341_String_DMA>:
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	603a      	str	r2, [r7, #0]
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001bdc:	e00f      	b.n	8001bfe <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	88b9      	ldrh	r1, [r7, #4]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fecc 	bl	8001984 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <TFT9341_String_DMA+0x44>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	889a      	ldrh	r2, [r3, #4]
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]
  while(*str)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1eb      	bne.n	8001bde <TFT9341_String_DMA+0x12>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20007718 	.word	0x20007718

08001c14 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001c1e:	2036      	movs	r0, #54	; 0x36
 8001c20:	f7ff fb54 	bl	80012cc <TFT9341_SendCommand>
  switch(r)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d836      	bhi.n	8001c98 <TFT9341_SetRotation+0x84>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <TFT9341_SetRotation+0x1c>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001c41 	.word	0x08001c41
 8001c34:	08001c57 	.word	0x08001c57
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001c83 	.word	0x08001c83
  {
    case 0:
      TFT9341_SendData(0x48);
 8001c40:	2048      	movs	r0, #72	; 0x48
 8001c42:	f7ff fb29 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c52:	801a      	strh	r2, [r3, #0]
      break;
 8001c54:	e020      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f7ff fb1e 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c62:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c66:	22f0      	movs	r2, #240	; 0xf0
 8001c68:	801a      	strh	r2, [r3, #0]
      break;
 8001c6a:	e015      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 8001c6c:	2088      	movs	r0, #136	; 0x88
 8001c6e:	f7ff fb13 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c7e:	801a      	strh	r2, [r3, #0]
      break;
 8001c80:	e00a      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 8001c82:	20e8      	movs	r0, #232	; 0xe8
 8001c84:	f7ff fb08 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c8e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	801a      	strh	r2, [r3, #0]
      break;
 8001c96:	bf00      	nop
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20007716 	.word	0x20007716
 8001ca4:	20007714 	.word	0x20007714

08001ca8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <Mount_SD+0x38>)
 8001cca:	f012 fbdd 	bl	8014488 <f_mount>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <Mount_SD+0x3c>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <Mount_SD+0x3c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <Mount_SD+0x40>)
 8001ce0:	f7ff ffe2 	bl	8001ca8 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 8001ce4:	e002      	b.n	8001cec <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <Mount_SD+0x44>)
 8001ce8:	f7ff ffde 	bl	8001ca8 <Send_Uart>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	2000783c 	.word	0x2000783c
 8001cf8:	20008888 	.word	0x20008888
 8001cfc:	0801d4d8 	.word	0x0801d4d8
 8001d00:	0801d4fc 	.word	0x0801d4fc

08001d04 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2000      	movs	r0, #0
 8001d12:	f012 fbb9 	bl	8014488 <f_mount>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <Unmount_SD+0x38>)
 8001d1c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <Unmount_SD+0x38>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <Unmount_SD+0x2a>
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <Unmount_SD+0x3c>)
 8001d28:	f7ff ffbe 	bl	8001ca8 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001d2c:	e002      	b.n	8001d34 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <Unmount_SD+0x40>)
 8001d30:	f7ff ffba 	bl	8001ca8 <Send_Uart>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20008888 	.word	0x20008888
 8001d40:	0801d520 	.word	0x0801d520
 8001d44:	0801d548 	.word	0x0801d548

08001d48 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001d50:	4940      	ldr	r1, [pc, #256]	; (8001e54 <Create_File+0x10c>)
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f013 f8da 	bl	8014f0c <f_stat>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <Create_File+0x110>)
 8001d5e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <Create_File+0x110>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	f017 f97d 	bl	8019068 <pvPortMalloc>
 8001d6e:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	493a      	ldr	r1, [pc, #232]	; (8001e5c <Create_File+0x114>)
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f018 ff87 	bl	801ac88 <siprintf>
		Send_Uart(buf);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff ff94 	bl	8001ca8 <Send_Uart>
		vPortFree(buf);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f017 fa3d 	bl	8019200 <vPortFree>
	    return fresult;
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <Create_File+0x110>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	e05f      	b.n	8001e4c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001d8c:	220b      	movs	r2, #11
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4833      	ldr	r0, [pc, #204]	; (8001e60 <Create_File+0x118>)
 8001d92:	f012 fbdd 	bl	8014550 <f_open>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <Create_File+0x110>)
 8001d9c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <Create_File+0x110>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f017 f95e 	bl	8019068 <pvPortMalloc>
 8001dac:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <Create_File+0x110>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	492b      	ldr	r1, [pc, #172]	; (8001e64 <Create_File+0x11c>)
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	f018 ff65 	bl	801ac88 <siprintf>
			Send_Uart(buf);
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f7ff ff72 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001dc4:	6938      	ldr	r0, [r7, #16]
 8001dc6:	f017 fa1b 	bl	8019200 <vPortFree>
		    return fresult;
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <Create_File+0x110>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	e03d      	b.n	8001e4c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f017 f949 	bl	8019068 <pvPortMalloc>
 8001dd6:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4923      	ldr	r1, [pc, #140]	; (8001e68 <Create_File+0x120>)
 8001ddc:	69f8      	ldr	r0, [r7, #28]
 8001dde:	f018 ff53 	bl	801ac88 <siprintf>
			Send_Uart(buf);
 8001de2:	69f8      	ldr	r0, [r7, #28]
 8001de4:	f7ff ff60 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f017 fa09 	bl	8019200 <vPortFree>
		}

		fresult = f_close(&fil);
 8001dee:	481c      	ldr	r0, [pc, #112]	; (8001e60 <Create_File+0x118>)
 8001df0:	f013 f85d 	bl	8014eae <f_close>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <Create_File+0x110>)
 8001dfa:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <Create_File+0x110>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f017 f92f 	bl	8019068 <pvPortMalloc>
 8001e0a:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <Create_File+0x110>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4915      	ldr	r1, [pc, #84]	; (8001e6c <Create_File+0x124>)
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f018 ff36 	bl	801ac88 <siprintf>
			Send_Uart(buf);
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f7ff ff43 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f017 f9ec 	bl	8019200 <vPortFree>
 8001e28:	e00e      	b.n	8001e48 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001e2a:	2064      	movs	r0, #100	; 0x64
 8001e2c:	f017 f91c 	bl	8019068 <pvPortMalloc>
 8001e30:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <Create_File+0x128>)
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	f018 ff26 	bl	801ac88 <siprintf>
			Send_Uart(buf);
 8001e3c:	69b8      	ldr	r0, [r7, #24]
 8001e3e:	f7ff ff33 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001e42:	69b8      	ldr	r0, [r7, #24]
 8001e44:	f017 f9dc 	bl	8019200 <vPortFree>
		}
	}
    return fresult;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <Create_File+0x110>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20007724 	.word	0x20007724
 8001e58:	20008888 	.word	0x20008888
 8001e5c:	0801d718 	.word	0x0801d718
 8001e60:	20008890 	.word	0x20008890
 8001e64:	0801d750 	.word	0x0801d750
 8001e68:	0801d778 	.word	0x0801d778
 8001e6c:	0801d7b8 	.word	0x0801d7b8
 8001e70:	0801d6f8 	.word	0x0801d6f8

08001e74 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001e7e:	4953      	ldr	r1, [pc, #332]	; (8001fcc <Update_File+0x158>)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f013 f843 	bl	8014f0c <f_stat>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <Update_File+0x15c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <Update_File+0x15c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d011      	beq.n	8001eba <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001e96:	2064      	movs	r0, #100	; 0x64
 8001e98:	f017 f8e6 	bl	8019068 <pvPortMalloc>
 8001e9c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <Update_File+0x160>)
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f018 fef0 	bl	801ac88 <siprintf>
		Send_Uart (buf);
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f7ff fefd 	bl	8001ca8 <Send_Uart>
		vPortFree(buf);
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f017 f9a6 	bl	8019200 <vPortFree>
	    return fresult;
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <Update_File+0x15c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	e083      	b.n	8001fc2 <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001eba:	2232      	movs	r2, #50	; 0x32
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4846      	ldr	r0, [pc, #280]	; (8001fd8 <Update_File+0x164>)
 8001ec0:	f012 fb46 	bl	8014550 <f_open>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <Update_File+0x15c>)
 8001eca:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <Update_File+0x15c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	f017 f8c7 	bl	8019068 <pvPortMalloc>
 8001eda:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <Update_File+0x15c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	493d      	ldr	r1, [pc, #244]	; (8001fdc <Update_File+0x168>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f018 fece 	bl	801ac88 <siprintf>
	    	Send_Uart(buf);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fedb 	bl	8001ca8 <Send_Uart>
	        vPortFree(buf);
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f017 f984 	bl	8019200 <vPortFree>
	        return fresult;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <Update_File+0x15c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	e061      	b.n	8001fc2 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7fe f966 	bl	80001d0 <strlen>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <Update_File+0x16c>)
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <Update_File+0x164>)
 8001f0c:	f012 fd83 	bl	8014a16 <f_write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <Update_File+0x15c>)
 8001f16:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <Update_File+0x15c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f017 f8a1 	bl	8019068 <pvPortMalloc>
 8001f26:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <Update_File+0x15c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <Update_File+0x170>)
 8001f32:	69b8      	ldr	r0, [r7, #24]
 8001f34:	f018 fea8 	bl	801ac88 <siprintf>
	    	Send_Uart(buf);
 8001f38:	69b8      	ldr	r0, [r7, #24]
 8001f3a:	f7ff feb5 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f3e:	69b8      	ldr	r0, [r7, #24]
 8001f40:	f017 f95e 	bl	8019200 <vPortFree>
 8001f44:	e00e      	b.n	8001f64 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f46:	2064      	movs	r0, #100	; 0x64
 8001f48:	f017 f88e 	bl	8019068 <pvPortMalloc>
 8001f4c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4925      	ldr	r1, [pc, #148]	; (8001fe8 <Update_File+0x174>)
 8001f52:	69f8      	ldr	r0, [r7, #28]
 8001f54:	f018 fe98 	bl	801ac88 <siprintf>
	    	Send_Uart(buf);
 8001f58:	69f8      	ldr	r0, [r7, #28]
 8001f5a:	f7ff fea5 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f5e:	69f8      	ldr	r0, [r7, #28]
 8001f60:	f017 f94e 	bl	8019200 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <Update_File+0x164>)
 8001f66:	f012 ffa2 	bl	8014eae <f_close>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <Update_File+0x15c>)
 8001f70:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <Update_File+0x15c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f017 f874 	bl	8019068 <pvPortMalloc>
 8001f80:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <Update_File+0x15c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <Update_File+0x178>)
 8001f8c:	6938      	ldr	r0, [r7, #16]
 8001f8e:	f018 fe7b 	bl	801ac88 <siprintf>
	    	Send_Uart(buf);
 8001f92:	6938      	ldr	r0, [r7, #16]
 8001f94:	f7ff fe88 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f98:	6938      	ldr	r0, [r7, #16]
 8001f9a:	f017 f931 	bl	8019200 <vPortFree>
 8001f9e:	e00e      	b.n	8001fbe <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	f017 f861 	bl	8019068 <pvPortMalloc>
 8001fa6:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <Update_File+0x17c>)
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f018 fe6b 	bl	801ac88 <siprintf>
	    	Send_Uart(buf);
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff fe78 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001fb8:	6978      	ldr	r0, [r7, #20]
 8001fba:	f017 f921 	bl	8019200 <vPortFree>
	     }
	}
    return fresult;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <Update_File+0x15c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20007724 	.word	0x20007724
 8001fd0:	20008888 	.word	0x20008888
 8001fd4:	0801d5a0 	.word	0x0801d5a0
 8001fd8:	20008890 	.word	0x20008890
 8001fdc:	0801d5c0 	.word	0x0801d5c0
 8001fe0:	20008880 	.word	0x20008880
 8001fe4:	0801d7dc 	.word	0x0801d7dc
 8001fe8:	0801d804 	.word	0x0801d804
 8001fec:	0801d6d0 	.word	0x0801d6d0
 8001ff0:	0801d6f8 	.word	0x0801d6f8

08001ff4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f012 ffd2 	bl	8014fa6 <f_mkdir>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <Create_Dir+0x70>)
 8002008:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <Create_Dir+0x70>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f017 f828 	bl	8019068 <pvPortMalloc>
 8002018:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4912      	ldr	r1, [pc, #72]	; (8002068 <Create_Dir+0x74>)
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f018 fe32 	bl	801ac88 <siprintf>
    	Send_Uart (buf);
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f7ff fe3f 	bl	8001ca8 <Send_Uart>
    	vPortFree(buf);
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f017 f8e8 	bl	8019200 <vPortFree>
 8002030:	e011      	b.n	8002056 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8002032:	2064      	movs	r0, #100	; 0x64
 8002034:	f017 f818 	bl	8019068 <pvPortMalloc>
 8002038:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <Create_Dir+0x70>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <Create_Dir+0x78>)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f018 fe1f 	bl	801ac88 <siprintf>
    	Send_Uart(buf);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fe2c 	bl	8001ca8 <Send_Uart>
    	vPortFree(buf);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f017 f8d5 	bl	8019200 <vPortFree>
    }
    return fresult;
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <Create_Dir+0x70>)
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20008888 	.word	0x20008888
 8002068:	0801d864 	.word	0x0801d864
 800206c:	0801d888 	.word	0x0801d888

08002070 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <SELECT+0x14>)
 800207a:	f007 fb15 	bl	80096a8 <HAL_GPIO_WritePin>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020800 	.word	0x40020800

08002088 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DESELECT+0x14>)
 8002092:	f007 fb09 	bl	80096a8 <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40020800 	.word	0x40020800

080020a0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80020aa:	bf00      	nop
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <SPI_TxByte+0x30>)
 80020ae:	f00c f84d 	bl	800e14c <HAL_SPI_GetState>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d1f9      	bne.n	80020ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80020b8:	1df9      	adds	r1, r7, #7
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	2201      	movs	r2, #1
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <SPI_TxByte+0x30>)
 80020c2:	f00b fb5a 	bl	800d77a <HAL_SPI_Transmit>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200116d0 	.word	0x200116d0

080020d4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80020e2:	bf00      	nop
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <SPI_RxByte+0x38>)
 80020e6:	f00c f831 	bl	800e14c <HAL_SPI_GetState>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d1f9      	bne.n	80020e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80020f0:	1dba      	adds	r2, r7, #6
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <SPI_RxByte+0x38>)
 80020fe:	f00b fc78 	bl	800d9f2 <HAL_SPI_TransmitReceive>
  
  return data;
 8002102:	79bb      	ldrb	r3, [r7, #6]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200116d0 	.word	0x200116d0

08002110 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002118:	f7ff ffdc 	bl	80020d4 <SPI_RxByte>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	701a      	strb	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <SD_ReadyWait+0x34>)
 8002134:	2232      	movs	r2, #50	; 0x32
 8002136:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002138:	f7ff ffcc 	bl	80020d4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800213c:	f7ff ffca 	bl	80020d4 <SPI_RxByte>
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d004      	beq.n	8002154 <SD_ReadyWait+0x28>
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SD_ReadyWait+0x34>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f3      	bne.n	800213c <SD_ReadyWait+0x10>
  
  return res;
 8002154:	79fb      	ldrb	r3, [r7, #7]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200116c8 	.word	0x200116c8

08002164 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800216a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800216e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8002170:	f7ff ff8a 	bl	8002088 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e005      	b.n	8002186 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800217a:	20ff      	movs	r0, #255	; 0xff
 800217c:	f7ff ff90 	bl	80020a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b09      	cmp	r3, #9
 800218a:	ddf6      	ble.n	800217a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800218c:	f7ff ff70 	bl	8002070 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80021a4:	2395      	movs	r3, #149	; 0x95
 80021a6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80021ae:	1d3a      	adds	r2, r7, #4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff72 	bl	80020a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	ddf2      	ble.n	80021ae <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80021c8:	e002      	b.n	80021d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80021d0:	f7ff ff80 	bl	80020d4 <SPI_RxByte>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d002      	beq.n	80021e0 <SD_PowerOn+0x7c>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f4      	bne.n	80021ca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80021e0:	f7ff ff52 	bl	8002088 <DESELECT>
  SPI_TxByte(0XFF);
 80021e4:	20ff      	movs	r0, #255	; 0xff
 80021e6:	f7ff ff5b 	bl	80020a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <SD_PowerOn+0x94>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20002455 	.word	0x20002455

080021fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <SD_PowerOff+0x14>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20002455 	.word	0x20002455

08002214 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <SD_CheckPower+0x14>)
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20002455 	.word	0x20002455

0800222c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <SD_RxDataBlock+0x68>)
 8002238:	220a      	movs	r2, #10
 800223a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800223c:	f7ff ff4a 	bl	80020d4 <SPI_RxByte>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d104      	bne.n	8002254 <SD_RxDataBlock+0x28>
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <SD_RxDataBlock+0x68>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f3      	bne.n	800223c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2bfe      	cmp	r3, #254	; 0xfe
 8002258:	d001      	beq.n	800225e <SD_RxDataBlock+0x32>
    return FALSE;
 800225a:	2300      	movs	r3, #0
 800225c:	e016      	b.n	800228c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff53 	bl	8002110 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff4d 	bl	8002110 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	3b02      	subs	r3, #2
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ed      	bne.n	800225e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8002282:	f7ff ff27 	bl	80020d4 <SPI_RxByte>
  SPI_RxByte();
 8002286:	f7ff ff25 	bl	80020d4 <SPI_RxByte>
  
  return TRUE;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20012684 	.word	0x20012684

08002298 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80022a8:	f7ff ff40 	bl	800212c <SD_ReadyWait>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d001      	beq.n	80022b6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e040      	b.n	8002338 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fef1 	bl	80020a0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	2bfd      	cmp	r3, #253	; 0xfd
 80022c2:	d031      	beq.n	8002328 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fee5 	bl	80020a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fede 	bl	80020a0 <SPI_TxByte>
    } while (--wc);
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	73bb      	strb	r3, [r7, #14]
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1eb      	bne.n	80022c8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80022f0:	f7ff fef0 	bl	80020d4 <SPI_RxByte>
    SPI_RxByte();
 80022f4:	f7ff feee 	bl	80020d4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80022f8:	e00b      	b.n	8002312 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80022fa:	f7ff feeb 	bl	80020d4 <SPI_RxByte>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2b05      	cmp	r3, #5
 800230a:	d006      	beq.n	800231a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	3301      	adds	r3, #1
 8002310:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d9f0      	bls.n	80022fa <SD_TxDataBlock+0x62>
 8002318:	e000      	b.n	800231c <SD_TxDataBlock+0x84>
        break;
 800231a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800231c:	bf00      	nop
 800231e:	f7ff fed9 	bl	80020d4 <SPI_RxByte>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0fa      	beq.n	800231e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2b05      	cmp	r3, #5
 8002330:	d101      	bne.n	8002336 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800234c:	f7ff feee 	bl	800212c <SD_ReadyWait>
 8002350:	4603      	mov	r3, r0
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d001      	beq.n	800235a <SD_SendCmd+0x1a>
    return 0xFF;
 8002356:	23ff      	movs	r3, #255	; 0xff
 8002358:	e040      	b.n	80023dc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe9f 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0e1b      	lsrs	r3, r3, #24
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe99 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe93 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe8d 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe88 	bl	80020a0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d101      	bne.n	800239e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800239a:	2395      	movs	r3, #149	; 0x95
 800239c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b48      	cmp	r3, #72	; 0x48
 80023a2:	d101      	bne.n	80023a8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80023a4:	2387      	movs	r3, #135	; 0x87
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe78 	bl	80020a0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	2b4c      	cmp	r3, #76	; 0x4c
 80023b4:	d101      	bne.n	80023ba <SD_SendCmd+0x7a>
    SPI_RxByte();
 80023b6:	f7ff fe8d 	bl	80020d4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80023ba:	230a      	movs	r3, #10
 80023bc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80023be:	f7ff fe89 	bl	80020d4 <SPI_RxByte>
 80023c2:	4603      	mov	r3, r0
 80023c4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80023c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da05      	bge.n	80023da <SD_SendCmd+0x9a>
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	73bb      	strb	r3, [r7, #14]
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f1      	bne.n	80023be <SD_SendCmd+0x7e>
  
  return res;
 80023da:	7b7b      	ldrb	r3, [r7, #13]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d5      	b.n	80025a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <SD_disk_initialize+0x1c8>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <SD_disk_initialize+0x2a>
    return Stat;        
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <SD_disk_initialize+0x1c8>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e0ca      	b.n	80025a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800240e:	f7ff fea9 	bl	8002164 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002412:	f7ff fe2d 	bl	8002070 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800241a:	2100      	movs	r1, #0
 800241c:	2040      	movs	r0, #64	; 0x40
 800241e:	f7ff ff8f 	bl	8002340 <SD_SendCmd>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80a5 	bne.w	8002574 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800242a:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <SD_disk_initialize+0x1cc>)
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002430:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002434:	2048      	movs	r0, #72	; 0x48
 8002436:	f7ff ff83 	bl	8002340 <SD_SendCmd>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d158      	bne.n	80024f2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e00c      	b.n	8002460 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002446:	7bfc      	ldrb	r4, [r7, #15]
 8002448:	f7ff fe44 	bl	80020d4 <SPI_RxByte>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4423      	add	r3, r4
 8002456:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d9ef      	bls.n	8002446 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002466:	7abb      	ldrb	r3, [r7, #10]
 8002468:	2b01      	cmp	r3, #1
 800246a:	f040 8083 	bne.w	8002574 <SD_disk_initialize+0x190>
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	2baa      	cmp	r3, #170	; 0xaa
 8002472:	d17f      	bne.n	8002574 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002474:	2100      	movs	r1, #0
 8002476:	2077      	movs	r0, #119	; 0x77
 8002478:	f7ff ff62 	bl	8002340 <SD_SendCmd>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d807      	bhi.n	8002492 <SD_disk_initialize+0xae>
 8002482:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002486:	2069      	movs	r0, #105	; 0x69
 8002488:	f7ff ff5a 	bl	8002340 <SD_SendCmd>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <SD_disk_initialize+0x1cc>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1eb      	bne.n	8002474 <SD_disk_initialize+0x90>
 800249c:	e000      	b.n	80024a0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800249e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <SD_disk_initialize+0x1cc>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d064      	beq.n	8002574 <SD_disk_initialize+0x190>
 80024aa:	2100      	movs	r1, #0
 80024ac:	207a      	movs	r0, #122	; 0x7a
 80024ae:	f7ff ff47 	bl	8002340 <SD_SendCmd>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d15d      	bne.n	8002574 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e00c      	b.n	80024d8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80024be:	7bfc      	ldrb	r4, [r7, #15]
 80024c0:	f7ff fe08 	bl	80020d4 <SPI_RxByte>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4423      	add	r3, r4
 80024ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d9ef      	bls.n	80024be <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80024de:	7a3b      	ldrb	r3, [r7, #8]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SD_disk_initialize+0x108>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e000      	b.n	80024ee <SD_disk_initialize+0x10a>
 80024ec:	2302      	movs	r3, #2
 80024ee:	73bb      	strb	r3, [r7, #14]
 80024f0:	e040      	b.n	8002574 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80024f2:	2100      	movs	r1, #0
 80024f4:	2077      	movs	r0, #119	; 0x77
 80024f6:	f7ff ff23 	bl	8002340 <SD_SendCmd>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d808      	bhi.n	8002512 <SD_disk_initialize+0x12e>
 8002500:	2100      	movs	r1, #0
 8002502:	2069      	movs	r0, #105	; 0x69
 8002504:	f7ff ff1c 	bl	8002340 <SD_SendCmd>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d801      	bhi.n	8002512 <SD_disk_initialize+0x12e>
 800250e:	2302      	movs	r3, #2
 8002510:	e000      	b.n	8002514 <SD_disk_initialize+0x130>
 8002512:	2301      	movs	r3, #1
 8002514:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d10e      	bne.n	800253a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800251c:	2100      	movs	r1, #0
 800251e:	2077      	movs	r0, #119	; 0x77
 8002520:	f7ff ff0e 	bl	8002340 <SD_SendCmd>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d80e      	bhi.n	8002548 <SD_disk_initialize+0x164>
 800252a:	2100      	movs	r1, #0
 800252c:	2069      	movs	r0, #105	; 0x69
 800252e:	f7ff ff07 	bl	8002340 <SD_SendCmd>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002538:	e00d      	b.n	8002556 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800253a:	2100      	movs	r1, #0
 800253c:	2041      	movs	r0, #65	; 0x41
 800253e:	f7ff feff 	bl	8002340 <SD_SendCmd>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <SD_disk_initialize+0x1cc>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e1      	bne.n	8002516 <SD_disk_initialize+0x132>
 8002552:	e000      	b.n	8002556 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002554:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <SD_disk_initialize+0x1cc>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <SD_disk_initialize+0x18c>
 8002560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002564:	2050      	movs	r0, #80	; 0x50
 8002566:	f7ff feeb 	bl	8002340 <SD_SendCmd>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <SD_disk_initialize+0x1d0>)
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800257a:	f7ff fd85 	bl	8002088 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800257e:	f7ff fda9 	bl	80020d4 <SPI_RxByte>
  
  if (type) 
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <SD_disk_initialize+0x1c8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SD_disk_initialize+0x1c8>)
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e001      	b.n	800259e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800259a:	f7ff fe2f 	bl	80021fc <SD_PowerOff>
  }
  
  return Stat;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <SD_disk_initialize+0x1c8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	20000028 	.word	0x20000028
 80025b0:	20012684 	.word	0x20012684
 80025b4:	20002454 	.word	0x20002454

080025b8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SD_disk_status+0x14>
    return STA_NOINIT; 
 80025c8:	2301      	movs	r3, #1
 80025ca:	e002      	b.n	80025d2 <SD_disk_status+0x1a>
  
  return Stat;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SD_disk_status+0x28>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000028 	.word	0x20000028

080025e4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <SD_disk_read+0x1c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <SD_disk_read+0x20>
    return RES_PARERR;
 8002600:	2304      	movs	r3, #4
 8002602:	e051      	b.n	80026a8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <SD_disk_read+0xcc>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002612:	2303      	movs	r3, #3
 8002614:	e048      	b.n	80026a8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <SD_disk_read+0xd0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002628:	f7ff fd22 	bl	8002070 <SELECT>
  
  if (count == 1) 
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d111      	bne.n	8002656 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	2051      	movs	r0, #81	; 0x51
 8002636:	f7ff fe83 	bl	8002340 <SD_SendCmd>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d129      	bne.n	8002694 <SD_disk_read+0xb0>
 8002640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002644:	68b8      	ldr	r0, [r7, #8]
 8002646:	f7ff fdf1 	bl	800222c <SD_RxDataBlock>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d021      	beq.n	8002694 <SD_disk_read+0xb0>
      count = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	e01e      	b.n	8002694 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	2052      	movs	r0, #82	; 0x52
 800265a:	f7ff fe71 	bl	8002340 <SD_SendCmd>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d117      	bne.n	8002694 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f7ff fddf 	bl	800222c <SD_RxDataBlock>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800267a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ed      	bne.n	8002664 <SD_disk_read+0x80>
 8002688:	e000      	b.n	800268c <SD_disk_read+0xa8>
          break;
 800268a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 800268c:	2100      	movs	r1, #0
 800268e:	204c      	movs	r0, #76	; 0x4c
 8002690:	f7ff fe56 	bl	8002340 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002694:	f7ff fcf8 	bl	8002088 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002698:	f7ff fd1c 	bl	80020d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000028 	.word	0x20000028
 80026b4:	20002454 	.word	0x20002454

080026b8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <SD_disk_write+0x1c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <SD_disk_write+0x20>
    return RES_PARERR;
 80026d4:	2304      	movs	r3, #4
 80026d6:	e06b      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <SD_disk_write+0x100>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <SD_disk_write+0x32>
    return RES_NOTRDY;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e062      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <SD_disk_write+0x100>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SD_disk_write+0x44>
    return RES_WRPRT;
 80026f8:	2302      	movs	r3, #2
 80026fa:	e059      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <SD_disk_write+0x104>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800270e:	f7ff fcaf 	bl	8002070 <SELECT>
  
  if (count == 1) 
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d110      	bne.n	800273a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	2058      	movs	r0, #88	; 0x58
 800271c:	f7ff fe10 	bl	8002340 <SD_SendCmd>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13a      	bne.n	800279c <SD_disk_write+0xe4>
 8002726:	21fe      	movs	r1, #254	; 0xfe
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f7ff fdb5 	bl	8002298 <SD_TxDataBlock>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d033      	beq.n	800279c <SD_disk_write+0xe4>
      count = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	e030      	b.n	800279c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <SD_disk_write+0x104>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002746:	2100      	movs	r1, #0
 8002748:	2077      	movs	r0, #119	; 0x77
 800274a:	f7ff fdf9 	bl	8002340 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	2057      	movs	r0, #87	; 0x57
 8002752:	f7ff fdf5 	bl	8002340 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	2059      	movs	r0, #89	; 0x59
 800275a:	f7ff fdf1 	bl	8002340 <SD_SendCmd>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11b      	bne.n	800279c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002764:	21fc      	movs	r1, #252	; 0xfc
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	f7ff fd96 	bl	8002298 <SD_TxDataBlock>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002778:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ee      	bne.n	8002764 <SD_disk_write+0xac>
 8002786:	e000      	b.n	800278a <SD_disk_write+0xd2>
          break;
 8002788:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800278a:	21fd      	movs	r1, #253	; 0xfd
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff fd83 	bl	8002298 <SD_TxDataBlock>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SD_disk_write+0xe4>
      {        
        count = 1;
 8002798:	2301      	movs	r3, #1
 800279a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800279c:	f7ff fc74 	bl	8002088 <DESELECT>
  SPI_RxByte();
 80027a0:	f7ff fc98 	bl	80020d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000028 	.word	0x20000028
 80027bc:	20002454 	.word	0x20002454

080027c0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b08b      	sub	sp, #44	; 0x2c
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	460b      	mov	r3, r1
 80027ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80027da:	2304      	movs	r3, #4
 80027dc:	e11b      	b.n	8002a16 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d129      	bne.n	800283e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d017      	beq.n	8002822 <SD_disk_ioctl+0x62>
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	dc1f      	bgt.n	8002836 <SD_disk_ioctl+0x76>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <SD_disk_ioctl+0x40>
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d00b      	beq.n	8002816 <SD_disk_ioctl+0x56>
 80027fe:	e01a      	b.n	8002836 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002800:	f7ff fd08 	bl	8002214 <SD_CheckPower>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800280a:	f7ff fcf7 	bl	80021fc <SD_PowerOff>
      res = RES_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002814:	e0fd      	b.n	8002a12 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002816:	f7ff fca5 	bl	8002164 <SD_PowerOn>
      res = RES_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002820:	e0f7      	b.n	8002a12 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	1c5c      	adds	r4, r3, #1
 8002826:	f7ff fcf5 	bl	8002214 <SD_CheckPower>
 800282a:	4603      	mov	r3, r0
 800282c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002834:	e0ed      	b.n	8002a12 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002836:	2304      	movs	r3, #4
 8002838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800283c:	e0e9      	b.n	8002a12 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800283e:	4b78      	ldr	r3, [pc, #480]	; (8002a20 <SD_disk_ioctl+0x260>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800284c:	2303      	movs	r3, #3
 800284e:	e0e2      	b.n	8002a16 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002850:	f7ff fc0e 	bl	8002070 <SELECT>
    
    switch (ctrl) 
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	2b0d      	cmp	r3, #13
 8002858:	f200 80cc 	bhi.w	80029f4 <SD_disk_ioctl+0x234>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <SD_disk_ioctl+0xa4>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	0800295f 	.word	0x0800295f
 8002868:	0800289d 	.word	0x0800289d
 800286c:	0800294f 	.word	0x0800294f
 8002870:	080029f5 	.word	0x080029f5
 8002874:	080029f5 	.word	0x080029f5
 8002878:	080029f5 	.word	0x080029f5
 800287c:	080029f5 	.word	0x080029f5
 8002880:	080029f5 	.word	0x080029f5
 8002884:	080029f5 	.word	0x080029f5
 8002888:	080029f5 	.word	0x080029f5
 800288c:	080029f5 	.word	0x080029f5
 8002890:	08002971 	.word	0x08002971
 8002894:	08002995 	.word	0x08002995
 8002898:	080029b9 	.word	0x080029b9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800289c:	2100      	movs	r1, #0
 800289e:	2049      	movs	r0, #73	; 0x49
 80028a0:	f7ff fd4e 	bl	8002340 <SD_SendCmd>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80a8 	bne.w	80029fc <SD_disk_ioctl+0x23c>
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2110      	movs	r1, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fcba 	bl	800222c <SD_RxDataBlock>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 809e 	beq.w	80029fc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80028c0:	7b3b      	ldrb	r3, [r7, #12]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10e      	bne.n	80028e8 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	7d3b      	ldrb	r3, [r7, #20]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80028de:	8bfb      	ldrh	r3, [r7, #30]
 80028e0:	029a      	lsls	r2, r3, #10
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e02e      	b.n	8002946 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	09db      	lsrs	r3, r3, #7
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	7d7b      	ldrb	r3, [r7, #21]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 0306 	and.w	r3, r3, #6
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	3302      	adds	r3, #2
 800290c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002910:	7d3b      	ldrb	r3, [r7, #20]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	b2db      	uxtb	r3, r3
 8002916:	b29a      	uxth	r2, r3
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	b29b      	uxth	r3, r3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	b29b      	uxth	r3, r3
 8002920:	4413      	add	r3, r2
 8002922:	b29a      	uxth	r2, r3
 8002924:	7cbb      	ldrb	r3, [r7, #18]
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	b29b      	uxth	r3, r3
 800292a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800292e:	b29b      	uxth	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002938:	8bfa      	ldrh	r2, [r7, #30]
 800293a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800293e:	3b09      	subs	r3, #9
 8002940:	409a      	lsls	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800294c:	e056      	b.n	80029fc <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800295c:	e055      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800295e:	f7ff fbe5 	bl	800212c <SD_ReadyWait>
 8002962:	4603      	mov	r3, r0
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d14b      	bne.n	8002a00 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800296e:	e047      	b.n	8002a00 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002970:	2100      	movs	r1, #0
 8002972:	2049      	movs	r0, #73	; 0x49
 8002974:	f7ff fce4 	bl	8002340 <SD_SendCmd>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d142      	bne.n	8002a04 <SD_disk_ioctl+0x244>
 800297e:	2110      	movs	r1, #16
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f7ff fc53 	bl	800222c <SD_RxDataBlock>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03b      	beq.n	8002a04 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002992:	e037      	b.n	8002a04 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002994:	2100      	movs	r1, #0
 8002996:	204a      	movs	r0, #74	; 0x4a
 8002998:	f7ff fcd2 	bl	8002340 <SD_SendCmd>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d132      	bne.n	8002a08 <SD_disk_ioctl+0x248>
 80029a2:	2110      	movs	r1, #16
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f7ff fc41 	bl	800222c <SD_RxDataBlock>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80029b6:	e027      	b.n	8002a08 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80029b8:	2100      	movs	r1, #0
 80029ba:	207a      	movs	r0, #122	; 0x7a
 80029bc:	f7ff fcc0 	bl	8002340 <SD_SendCmd>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029cc:	e00b      	b.n	80029e6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80029ce:	6a3c      	ldr	r4, [r7, #32]
 80029d0:	1c63      	adds	r3, r4, #1
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	f7ff fb7e 	bl	80020d4 <SPI_RxByte>
 80029d8:	4603      	mov	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80029dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029e0:	3301      	adds	r3, #1
 80029e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d9ef      	bls.n	80029ce <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029fa:	e006      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 80029fc:	bf00      	nop
 80029fe:	e004      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a00:	bf00      	nop
 8002a02:	e002      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a08:	bf00      	nop
    }
    
    DESELECT();
 8002a0a:	f7ff fb3d 	bl	8002088 <DESELECT>
    SPI_RxByte();
 8002a0e:	f7ff fb61 	bl	80020d4 <SPI_RxByte>
  }
  
  return res;
 8002a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	372c      	adds	r7, #44	; 0x2c
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000028 	.word	0x20000028

08002a24 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	603a      	str	r2, [r7, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	460b      	mov	r3, r1
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	b299      	uxth	r1, r3
 8002a42:	1dba      	adds	r2, r7, #6
 8002a44:	230a      	movs	r3, #10
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4811      	ldr	r0, [pc, #68]	; (8002a90 <user_i2c_read+0x6c>)
 8002a4c:	f006 ff8a 	bl	8009964 <HAL_I2C_Master_Transmit>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <user_i2c_read+0x38>
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a5a:	e014      	b.n	8002a86 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	88bb      	ldrh	r3, [r7, #4]
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4807      	ldr	r0, [pc, #28]	; (8002a90 <user_i2c_read+0x6c>)
 8002a74:	f007 f874 	bl	8009b60 <HAL_I2C_Master_Receive>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <user_i2c_read+0x60>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e000      	b.n	8002a86 <user_i2c_read+0x62>

  return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20009a1c 	.word	0x20009a1c

08002a94 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f005 f9bb 	bl	8007e18 <HAL_Delay>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	603a      	str	r2, [r7, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	460b      	mov	r3, r1
 8002abc:	71bb      	strb	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002ac2:	88bb      	ldrh	r3, [r7, #4]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f017 fb2a 	bl	801a120 <malloc>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002ad0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	88ba      	ldrh	r2, [r7, #4]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f017 fb2d 	bl	801a140 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	b299      	uxth	r1, r3
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4808      	ldr	r0, [pc, #32]	; (8002b20 <user_i2c_write+0x74>)
 8002afe:	f006 ff31 	bl	8009964 <HAL_I2C_Master_Transmit>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <user_i2c_write+0x62>
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0c:	e003      	b.n	8002b16 <user_i2c_write+0x6a>

  free(buf);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f017 fb0e 	bl	801a130 <free>
  return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20009a1c 	.word	0x20009a1c

08002b24 <delay_us>:
// End BME280 part/////////////////////////////////////////////////////////////////////////////////////

// ---------------------------------------------------------------------------------
// Function for generate dalay more than 10 us (using for AM2302 T and H sensor)
bool delay_us(uint16_t us)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <delay_us+0x50>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <delay_us+0x54>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <delay_us+0x58>)
 8002b46:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <delay_us+0x50>)
 8002b4a:	f00b fcbd 	bl	800e4c8 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 8002b4e:	bf00      	nop
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <delay_us+0x58>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1fb      	bne.n	8002b50 <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <delay_us+0x50>)
 8002b5a:	f00b fd25 	bl	800e5a8 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <delay_us+0x58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
	int s = 99;
 8002b64:	2363      	movs	r3, #99	; 0x63
 8002b66:	60fb      	str	r3, [r7, #12]
	return true;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000ac48 	.word	0x2000ac48
 8002b78:	cccccccd 	.word	0xcccccccd
 8002b7c:	20002844 	.word	0x20002844

08002b80 <HAL_SPI_TxCpltCallback>:
// ---------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_SPI_TxCpltCallback+0x3c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d111      	bne.n	8002bb4 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b98:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <HAL_SPI_TxCpltCallback+0x3c>)
 8002ba4:	f00b f97e 	bl	800dea4 <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_SPI_TxCpltCallback+0x44>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000ab34 	.word	0x2000ab34
 8002bc0:	2000002c 	.word	0x2000002c
 8002bc4:	20002848 	.word	0x20002848

08002bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bcc:	f005 f8e2 	bl	8007d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd0:	f000 f942 	bl	8002e58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd4:	f000 fc96 	bl	8003504 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002bd8:	f000 fc04 	bl	80033e4 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002bdc:	f000 fa28 	bl	8003030 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002be0:	f000 fbb4 	bl	800334c <MX_TIM2_Init>
  MX_TIM10_Init();
 8002be4:	f000 fc4c 	bl	8003480 <MX_TIM10_Init>
  MX_SPI1_Init();
 8002be8:	f000 faf2 	bl	80031d0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002bec:	f00d fc46 	bl	801047c <MX_FATFS_Init>
  MX_TIM1_Init();
 8002bf0:	f000 fb5a 	bl	80032a8 <MX_TIM1_Init>
  MX_RTC_Init();
 8002bf4:	f000 fa5e 	bl	80030b4 <MX_RTC_Init>
  MX_SPI2_Init();
 8002bf8:	f000 fb20 	bl	800323c <MX_SPI2_Init>
  MX_DMA_Init();
 8002bfc:	f000 fc62 	bl	80034c4 <MX_DMA_Init>
  MX_RNG_Init();
 8002c00:	f000 fa44 	bl	800308c <MX_RNG_Init>
  MX_I2C2_Init();
 8002c04:	f000 f9e6 	bl	8002fd4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8002c08:	f000 f992 	bl	8002f30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8002c0c:	485a      	ldr	r0, [pc, #360]	; (8002d78 <main+0x1b0>)
 8002c0e:	f00b fc5b 	bl	800e4c8 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8002c12:	485a      	ldr	r0, [pc, #360]	; (8002d7c <main+0x1b4>)
 8002c14:	f00b fc58 	bl	800e4c8 <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 8002c18:	4859      	ldr	r0, [pc, #356]	; (8002d80 <main+0x1b8>)
 8002c1a:	f005 fee3 	bl	80089e4 <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8002c1e:	4859      	ldr	r0, [pc, #356]	; (8002d84 <main+0x1bc>)
 8002c20:	f00a fd83 	bl	800d72a <HAL_SPI_DeInit>
  MX_DMA_Init();
 8002c24:	f000 fc4e 	bl	80034c4 <MX_DMA_Init>
  MX_SPI2_Init();
 8002c28:	f000 fb08 	bl	800323c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c2c:	f012 fcc6 	bl	80155bc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8002c30:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <main+0x1c0>)
 8002c32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c36:	200a      	movs	r0, #10
 8002c38:	f012 fefa 	bl	8015a30 <osMessageQueueNew>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	4a53      	ldr	r2, [pc, #332]	; (8002d8c <main+0x1c4>)
 8002c40:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 8002c42:	4a53      	ldr	r2, [pc, #332]	; (8002d90 <main+0x1c8>)
 8002c44:	2164      	movs	r1, #100	; 0x64
 8002c46:	2001      	movs	r0, #1
 8002c48:	f012 fef2 	bl	8015a30 <osMessageQueueNew>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	4a51      	ldr	r2, [pc, #324]	; (8002d94 <main+0x1cc>)
 8002c50:	6013      	str	r3, [r2, #0]

  /* creation of BME280_Queue */
  BME280_QueueHandle = osMessageQueueNew (2, sizeof(BME280QUEUE), &BME280_Queue_attributes);
 8002c52:	4a51      	ldr	r2, [pc, #324]	; (8002d98 <main+0x1d0>)
 8002c54:	2114      	movs	r1, #20
 8002c56:	2002      	movs	r0, #2
 8002c58:	f012 feea 	bl	8015a30 <osMessageQueueNew>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4a4f      	ldr	r2, [pc, #316]	; (8002d9c <main+0x1d4>)
 8002c60:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050_Acc_Queue */
  MPU6050_Acc_QueueHandle = osMessageQueueNew (1, sizeof(MPU6050ACCQUEUE), &MPU6050_Acc_Queue_attributes);
 8002c62:	4a4f      	ldr	r2, [pc, #316]	; (8002da0 <main+0x1d8>)
 8002c64:	211e      	movs	r1, #30
 8002c66:	2001      	movs	r0, #1
 8002c68:	f012 fee2 	bl	8015a30 <osMessageQueueNew>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4a4d      	ldr	r2, [pc, #308]	; (8002da4 <main+0x1dc>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050_Gyro_Queue */
  MPU6050_Gyro_QueueHandle = osMessageQueueNew (1, sizeof(MPU6050GYROQUEUE), &MPU6050_Gyro_Queue_attributes);
 8002c72:	4a4d      	ldr	r2, [pc, #308]	; (8002da8 <main+0x1e0>)
 8002c74:	211e      	movs	r1, #30
 8002c76:	2001      	movs	r0, #1
 8002c78:	f012 feda 	bl	8015a30 <osMessageQueueNew>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	4a4b      	ldr	r2, [pc, #300]	; (8002dac <main+0x1e4>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050_Temp_Queue */
  MPU6050_Temp_QueueHandle = osMessageQueueNew (1, sizeof(MPU6050TEMPQUEUE), &MPU6050_Temp_Queue_attributes);
 8002c82:	4a4b      	ldr	r2, [pc, #300]	; (8002db0 <main+0x1e8>)
 8002c84:	210a      	movs	r1, #10
 8002c86:	2001      	movs	r0, #1
 8002c88:	f012 fed2 	bl	8015a30 <osMessageQueueNew>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4a49      	ldr	r2, [pc, #292]	; (8002db4 <main+0x1ec>)
 8002c90:	6013      	str	r3, [r2, #0]

  /* creation of MS5611_mag_Queue */
  MS5611_mag_QueueHandle = osMessageQueueNew (1, sizeof(MS5611QUEUE), &MS5611_mag_Queue_attributes);
 8002c92:	4a49      	ldr	r2, [pc, #292]	; (8002db8 <main+0x1f0>)
 8002c94:	211e      	movs	r1, #30
 8002c96:	2001      	movs	r0, #1
 8002c98:	f012 feca 	bl	8015a30 <osMessageQueueNew>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <main+0x1f4>)
 8002ca0:	6013      	str	r3, [r2, #0]

  /* creation of ADC_Queue */
  ADC_QueueHandle = osMessageQueueNew (3, sizeof(ADCQUEUE), &ADC_Queue_attributes);
 8002ca2:	4a47      	ldr	r2, [pc, #284]	; (8002dc0 <main+0x1f8>)
 8002ca4:	211e      	movs	r1, #30
 8002ca6:	2003      	movs	r0, #3
 8002ca8:	f012 fec2 	bl	8015a30 <osMessageQueueNew>
 8002cac:	4603      	mov	r3, r0
 8002cae:	4a45      	ldr	r2, [pc, #276]	; (8002dc4 <main+0x1fc>)
 8002cb0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cb2:	4a45      	ldr	r2, [pc, #276]	; (8002dc8 <main+0x200>)
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4845      	ldr	r0, [pc, #276]	; (8002dcc <main+0x204>)
 8002cb8:	f012 fcca 	bl	8015650 <osThreadNew>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4a44      	ldr	r2, [pc, #272]	; (8002dd0 <main+0x208>)
 8002cc0:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8002cc2:	4a44      	ldr	r2, [pc, #272]	; (8002dd4 <main+0x20c>)
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4844      	ldr	r0, [pc, #272]	; (8002dd8 <main+0x210>)
 8002cc8:	f012 fcc2 	bl	8015650 <osThreadNew>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4a43      	ldr	r2, [pc, #268]	; (8002ddc <main+0x214>)
 8002cd0:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8002cd2:	4a43      	ldr	r2, [pc, #268]	; (8002de0 <main+0x218>)
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	4843      	ldr	r0, [pc, #268]	; (8002de4 <main+0x21c>)
 8002cd8:	f012 fcba 	bl	8015650 <osThreadNew>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4a42      	ldr	r2, [pc, #264]	; (8002de8 <main+0x220>)
 8002ce0:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002ce2:	4a42      	ldr	r2, [pc, #264]	; (8002dec <main+0x224>)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4842      	ldr	r0, [pc, #264]	; (8002df0 <main+0x228>)
 8002ce8:	f012 fcb2 	bl	8015650 <osThreadNew>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4a41      	ldr	r2, [pc, #260]	; (8002df4 <main+0x22c>)
 8002cf0:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 8002cf2:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <main+0x230>)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4841      	ldr	r0, [pc, #260]	; (8002dfc <main+0x234>)
 8002cf8:	f012 fcaa 	bl	8015650 <osThreadNew>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a40      	ldr	r2, [pc, #256]	; (8002e00 <main+0x238>)
 8002d00:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 8002d02:	4a40      	ldr	r2, [pc, #256]	; (8002e04 <main+0x23c>)
 8002d04:	2100      	movs	r1, #0
 8002d06:	4840      	ldr	r0, [pc, #256]	; (8002e08 <main+0x240>)
 8002d08:	f012 fca2 	bl	8015650 <osThreadNew>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	4a3f      	ldr	r2, [pc, #252]	; (8002e0c <main+0x244>)
 8002d10:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 8002d12:	4a3f      	ldr	r2, [pc, #252]	; (8002e10 <main+0x248>)
 8002d14:	2100      	movs	r1, #0
 8002d16:	483f      	ldr	r0, [pc, #252]	; (8002e14 <main+0x24c>)
 8002d18:	f012 fc9a 	bl	8015650 <osThreadNew>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4a3e      	ldr	r2, [pc, #248]	; (8002e18 <main+0x250>)
 8002d20:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8002d22:	4a3e      	ldr	r2, [pc, #248]	; (8002e1c <main+0x254>)
 8002d24:	2100      	movs	r1, #0
 8002d26:	483e      	ldr	r0, [pc, #248]	; (8002e20 <main+0x258>)
 8002d28:	f012 fc92 	bl	8015650 <osThreadNew>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	4a3d      	ldr	r2, [pc, #244]	; (8002e24 <main+0x25c>)
 8002d30:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8002d32:	4a3d      	ldr	r2, [pc, #244]	; (8002e28 <main+0x260>)
 8002d34:	2100      	movs	r1, #0
 8002d36:	483d      	ldr	r0, [pc, #244]	; (8002e2c <main+0x264>)
 8002d38:	f012 fc8a 	bl	8015650 <osThreadNew>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4a3c      	ldr	r2, [pc, #240]	; (8002e30 <main+0x268>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050 */
  MPU6050Handle = osThreadNew(Start_MPU6050, NULL, &MPU6050_attributes);
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <main+0x26c>)
 8002d44:	2100      	movs	r1, #0
 8002d46:	483c      	ldr	r0, [pc, #240]	; (8002e38 <main+0x270>)
 8002d48:	f012 fc82 	bl	8015650 <osThreadNew>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	4a3b      	ldr	r2, [pc, #236]	; (8002e3c <main+0x274>)
 8002d50:	6013      	str	r3, [r2, #0]

  /* creation of MS5611 */
  MS5611Handle = osThreadNew(Start_MS5611, NULL, &MS5611_attributes);
 8002d52:	4a3b      	ldr	r2, [pc, #236]	; (8002e40 <main+0x278>)
 8002d54:	2100      	movs	r1, #0
 8002d56:	483b      	ldr	r0, [pc, #236]	; (8002e44 <main+0x27c>)
 8002d58:	f012 fc7a 	bl	8015650 <osThreadNew>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	4a3a      	ldr	r2, [pc, #232]	; (8002e48 <main+0x280>)
 8002d60:	6013      	str	r3, [r2, #0]

  /* creation of ADC */
  ADCHandle = osThreadNew(Start_ADC, NULL, &ADC_attributes);
 8002d62:	4a3a      	ldr	r2, [pc, #232]	; (8002e4c <main+0x284>)
 8002d64:	2100      	movs	r1, #0
 8002d66:	483a      	ldr	r0, [pc, #232]	; (8002e50 <main+0x288>)
 8002d68:	f012 fc72 	bl	8015650 <osThreadNew>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4a39      	ldr	r2, [pc, #228]	; (8002e54 <main+0x28c>)
 8002d70:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d72:	f012 fc47 	bl	8015604 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <main+0x1ae>
 8002d78:	2000e8bc 	.word	0x2000e8bc
 8002d7c:	20011410 	.word	0x20011410
 8002d80:	20012624 	.word	0x20012624
 8002d84:	2000ab34 	.word	0x2000ab34
 8002d88:	08021bb8 	.word	0x08021bb8
 8002d8c:	2000b768 	.word	0x2000b768
 8002d90:	08021bd0 	.word	0x08021bd0
 8002d94:	20010a14 	.word	0x20010a14
 8002d98:	08021be8 	.word	0x08021be8
 8002d9c:	2000e904 	.word	0x2000e904
 8002da0:	08021c00 	.word	0x08021c00
 8002da4:	20009914 	.word	0x20009914
 8002da8:	08021c18 	.word	0x08021c18
 8002dac:	200116bc 	.word	0x200116bc
 8002db0:	08021c30 	.word	0x08021c30
 8002db4:	200116c4 	.word	0x200116c4
 8002db8:	08021c48 	.word	0x08021c48
 8002dbc:	200098c0 	.word	0x200098c0
 8002dc0:	08021c60 	.word	0x08021c60
 8002dc4:	20012f8c 	.word	0x20012f8c
 8002dc8:	08021a08 	.word	0x08021a08
 8002dcc:	080037e1 	.word	0x080037e1
 8002dd0:	200099d8 	.word	0x200099d8
 8002dd4:	08021a2c 	.word	0x08021a2c
 8002dd8:	080037f5 	.word	0x080037f5
 8002ddc:	20013050 	.word	0x20013050
 8002de0:	08021a50 	.word	0x08021a50
 8002de4:	08003a71 	.word	0x08003a71
 8002de8:	200116cc 	.word	0x200116cc
 8002dec:	08021a74 	.word	0x08021a74
 8002df0:	08003ced 	.word	0x08003ced
 8002df4:	2000ea10 	.word	0x2000ea10
 8002df8:	08021a98 	.word	0x08021a98
 8002dfc:	08003d49 	.word	0x08003d49
 8002e00:	20013054 	.word	0x20013054
 8002e04:	08021abc 	.word	0x08021abc
 8002e08:	08004021 	.word	0x08004021
 8002e0c:	200116c0 	.word	0x200116c0
 8002e10:	08021ae0 	.word	0x08021ae0
 8002e14:	080043d9 	.word	0x080043d9
 8002e18:	2000b590 	.word	0x2000b590
 8002e1c:	08021b04 	.word	0x08021b04
 8002e20:	0800449d 	.word	0x0800449d
 8002e24:	20010a1c 	.word	0x20010a1c
 8002e28:	08021b28 	.word	0x08021b28
 8002e2c:	08004625 	.word	0x08004625
 8002e30:	20010a18 	.word	0x20010a18
 8002e34:	08021b4c 	.word	0x08021b4c
 8002e38:	0800480d 	.word	0x0800480d
 8002e3c:	2000b594 	.word	0x2000b594
 8002e40:	08021b70 	.word	0x08021b70
 8002e44:	08004dd9 	.word	0x08004dd9
 8002e48:	20012f18 	.word	0x20012f18
 8002e4c:	08021b94 	.word	0x08021b94
 8002e50:	08005039 	.word	0x08005039
 8002e54:	20011a30 	.word	0x20011a30

08002e58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b094      	sub	sp, #80	; 0x50
 8002e5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e5e:	f107 0320 	add.w	r3, r7, #32
 8002e62:	2230      	movs	r2, #48	; 0x30
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f017 f978 	bl	801a15c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	605a      	str	r2, [r3, #4]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	60da      	str	r2, [r3, #12]
 8002e7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
 8002e80:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <SystemClock_Config+0xd0>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	4a28      	ldr	r2, [pc, #160]	; (8002f28 <SystemClock_Config+0xd0>)
 8002e86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8c:	4b26      	ldr	r3, [pc, #152]	; (8002f28 <SystemClock_Config+0xd0>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	607b      	str	r3, [r7, #4]
 8002e9c:	4b23      	ldr	r3, [pc, #140]	; (8002f2c <SystemClock_Config+0xd4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a22      	ldr	r2, [pc, #136]	; (8002f2c <SystemClock_Config+0xd4>)
 8002ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea6:	6013      	str	r3, [r2, #0]
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <SystemClock_Config+0xd4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002eb4:	2305      	movs	r3, #5
 8002eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ec6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002ed0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002ed4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002eda:	2307      	movs	r3, #7
 8002edc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ede:	f107 0320 	add.w	r3, r7, #32
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f009 f9b0 	bl	800c248 <HAL_RCC_OscConfig>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002eee:	f002 f99b 	bl	8005228 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002efe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002f02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	2105      	movs	r1, #5
 8002f10:	4618      	mov	r0, r3
 8002f12:	f009 fc11 	bl	800c738 <HAL_RCC_ClockConfig>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002f1c:	f002 f984 	bl	8005228 <Error_Handler>
  }
}
 8002f20:	bf00      	nop
 8002f22:	3750      	adds	r7, #80	; 0x50
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	40007000 	.word	0x40007000

08002f30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f36:	463b      	mov	r3, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002f42:	4b21      	ldr	r3, [pc, #132]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f44:	4a21      	ldr	r2, [pc, #132]	; (8002fcc <MX_ADC1_Init+0x9c>)
 8002f46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f48:	4b1f      	ldr	r3, [pc, #124]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002f50:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002f56:	4b1c      	ldr	r3, [pc, #112]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f5c:	4b1a      	ldr	r3, [pc, #104]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f62:	4b19      	ldr	r3, [pc, #100]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f6a:	4b17      	ldr	r3, [pc, #92]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f70:	4b15      	ldr	r3, [pc, #84]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <MX_ADC1_Init+0xa0>)
 8002f74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002f7c:	4b12      	ldr	r3, [pc, #72]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f8a:	4b0f      	ldr	r3, [pc, #60]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f90:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002f92:	f004 ff65 	bl	8007e60 <HAL_ADC_Init>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002f9c:	f002 f944 	bl	8005228 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8002fa0:	2309      	movs	r3, #9
 8002fa2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002fac:	463b      	mov	r3, r7
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	; (8002fc8 <MX_ADC1_Init+0x98>)
 8002fb2:	f005 f937 	bl	8008224 <HAL_ADC_ConfigChannel>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002fbc:	f002 f934 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	2000e908 	.word	0x2000e908
 8002fcc:	40012000 	.word	0x40012000
 8002fd0:	0f000001 	.word	0x0f000001

08002fd4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002fd8:	4b12      	ldr	r3, [pc, #72]	; (8003024 <MX_I2C2_Init+0x50>)
 8002fda:	4a13      	ldr	r2, [pc, #76]	; (8003028 <MX_I2C2_Init+0x54>)
 8002fdc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002fde:	4b11      	ldr	r3, [pc, #68]	; (8003024 <MX_I2C2_Init+0x50>)
 8002fe0:	4a12      	ldr	r2, [pc, #72]	; (800302c <MX_I2C2_Init+0x58>)
 8002fe2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <MX_I2C2_Init+0x50>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002fea:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <MX_I2C2_Init+0x50>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ff0:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <MX_I2C2_Init+0x50>)
 8002ff2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ff6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <MX_I2C2_Init+0x50>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <MX_I2C2_Init+0x50>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003004:	4b07      	ldr	r3, [pc, #28]	; (8003024 <MX_I2C2_Init+0x50>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <MX_I2C2_Init+0x50>)
 800300c:	2200      	movs	r2, #0
 800300e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003010:	4804      	ldr	r0, [pc, #16]	; (8003024 <MX_I2C2_Init+0x50>)
 8003012:	f006 fb63 	bl	80096dc <HAL_I2C_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800301c:	f002 f904 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003020:	bf00      	nop
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2000ac90 	.word	0x2000ac90
 8003028:	40005800 	.word	0x40005800
 800302c:	000186a0 	.word	0x000186a0

08003030 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003034:	4b12      	ldr	r3, [pc, #72]	; (8003080 <MX_I2C3_Init+0x50>)
 8003036:	4a13      	ldr	r2, [pc, #76]	; (8003084 <MX_I2C3_Init+0x54>)
 8003038:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800303a:	4b11      	ldr	r3, [pc, #68]	; (8003080 <MX_I2C3_Init+0x50>)
 800303c:	4a12      	ldr	r2, [pc, #72]	; (8003088 <MX_I2C3_Init+0x58>)
 800303e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <MX_I2C3_Init+0x50>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <MX_I2C3_Init+0x50>)
 8003048:	2200      	movs	r2, #0
 800304a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <MX_I2C3_Init+0x50>)
 800304e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003052:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003054:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <MX_I2C3_Init+0x50>)
 8003056:	2200      	movs	r2, #0
 8003058:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <MX_I2C3_Init+0x50>)
 800305c:	2200      	movs	r2, #0
 800305e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003060:	4b07      	ldr	r3, [pc, #28]	; (8003080 <MX_I2C3_Init+0x50>)
 8003062:	2200      	movs	r2, #0
 8003064:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <MX_I2C3_Init+0x50>)
 8003068:	2200      	movs	r2, #0
 800306a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800306c:	4804      	ldr	r0, [pc, #16]	; (8003080 <MX_I2C3_Init+0x50>)
 800306e:	f006 fb35 	bl	80096dc <HAL_I2C_Init>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003078:	f002 f8d6 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800307c:	bf00      	nop
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20009a1c 	.word	0x20009a1c
 8003084:	40005c00 	.word	0x40005c00
 8003088:	000186a0 	.word	0x000186a0

0800308c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <MX_RNG_Init+0x20>)
 8003092:	4a07      	ldr	r2, [pc, #28]	; (80030b0 <MX_RNG_Init+0x24>)
 8003094:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003096:	4805      	ldr	r0, [pc, #20]	; (80030ac <MX_RNG_Init+0x20>)
 8003098:	f009 fe4a 	bl	800cd30 <HAL_RNG_Init>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80030a2:	f002 f8c1 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80030a6:	bf00      	nop
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	2001165c 	.word	0x2001165c
 80030b0:	50060800 	.word	0x50060800

080030b4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b090      	sub	sp, #64	; 0x40
 80030b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80030ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80030ca:	2300      	movs	r3, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80030ce:	463b      	mov	r3, r7
 80030d0:	2228      	movs	r2, #40	; 0x28
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f017 f841 	bl	801a15c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80030da:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <MX_RTC_Init+0x114>)
 80030dc:	4a3b      	ldr	r2, [pc, #236]	; (80031cc <MX_RTC_Init+0x118>)
 80030de:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80030e0:	4b39      	ldr	r3, [pc, #228]	; (80031c8 <MX_RTC_Init+0x114>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80030e6:	4b38      	ldr	r3, [pc, #224]	; (80031c8 <MX_RTC_Init+0x114>)
 80030e8:	227f      	movs	r2, #127	; 0x7f
 80030ea:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <MX_RTC_Init+0x114>)
 80030ee:	22ff      	movs	r2, #255	; 0xff
 80030f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80030f2:	4b35      	ldr	r3, [pc, #212]	; (80031c8 <MX_RTC_Init+0x114>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80030f8:	4b33      	ldr	r3, [pc, #204]	; (80031c8 <MX_RTC_Init+0x114>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80030fe:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <MX_RTC_Init+0x114>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003104:	4830      	ldr	r0, [pc, #192]	; (80031c8 <MX_RTC_Init+0x114>)
 8003106:	f009 fe3d 	bl	800cd84 <HAL_RTC_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003110:	f002 f88a 	bl	8005228 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8003114:	2323      	movs	r3, #35	; 0x23
 8003116:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 800311a:	2359      	movs	r3, #89	; 0x59
 800311c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8003120:	2345      	movs	r3, #69	; 0x45
 8003122:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003126:	2300      	movs	r3, #0
 8003128:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800312e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003132:	2201      	movs	r2, #1
 8003134:	4619      	mov	r1, r3
 8003136:	4824      	ldr	r0, [pc, #144]	; (80031c8 <MX_RTC_Init+0x114>)
 8003138:	f009 feb5 	bl	800cea6 <HAL_RTC_SetTime>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003142:	f002 f871 	bl	8005228 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003146:	2302      	movs	r3, #2
 8003148:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 800314c:	2312      	movs	r3, #18
 800314e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 8003152:	2328      	movs	r3, #40	; 0x28
 8003154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800315e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003162:	2201      	movs	r2, #1
 8003164:	4619      	mov	r1, r3
 8003166:	4818      	ldr	r0, [pc, #96]	; (80031c8 <MX_RTC_Init+0x114>)
 8003168:	f009 ffb8 	bl	800d0dc <HAL_RTC_SetDate>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003172:	f002 f859 	bl	8005228 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003176:	2300      	movs	r3, #0
 8003178:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800317a:	2300      	movs	r3, #0
 800317c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800317e:	2310      	movs	r3, #16
 8003180:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003182:	2300      	movs	r3, #0
 8003184:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800319a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80031a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80031a8:	463b      	mov	r3, r7
 80031aa:	2201      	movs	r2, #1
 80031ac:	4619      	mov	r1, r3
 80031ae:	4806      	ldr	r0, [pc, #24]	; (80031c8 <MX_RTC_Init+0x114>)
 80031b0:	f00a f88a 	bl	800d2c8 <HAL_RTC_SetAlarm>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80031ba:	f002 f835 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80031be:	bf00      	nop
 80031c0:	3740      	adds	r7, #64	; 0x40
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20010a40 	.word	0x20010a40
 80031cc:	40002800 	.word	0x40002800

080031d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_SPI1_Init+0x64>)
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <MX_SPI1_Init+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <MX_SPI1_Init+0x64>)
 80031dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80031e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <MX_SPI1_Init+0x64>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_SPI1_Init+0x64>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_SPI1_Init+0x64>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_SPI1_Init+0x64>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_SPI1_Init+0x64>)
 80031fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003200:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_SPI1_Init+0x64>)
 8003204:	2220      	movs	r2, #32
 8003206:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <MX_SPI1_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_SPI1_Init+0x64>)
 8003210:	2200      	movs	r2, #0
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <MX_SPI1_Init+0x64>)
 8003216:	2200      	movs	r2, #0
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <MX_SPI1_Init+0x64>)
 800321c:	220a      	movs	r2, #10
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003220:	4804      	ldr	r0, [pc, #16]	; (8003234 <MX_SPI1_Init+0x64>)
 8003222:	f00a f9f9 	bl	800d618 <HAL_SPI_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800322c:	f001 fffc 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	200116d0 	.word	0x200116d0
 8003238:	40013000 	.word	0x40013000

0800323c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003240:	4b17      	ldr	r3, [pc, #92]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003242:	4a18      	ldr	r2, [pc, #96]	; (80032a4 <MX_SPI2_Init+0x68>)
 8003244:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003248:	f44f 7282 	mov.w	r2, #260	; 0x104
 800324c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003250:	2200      	movs	r2, #0
 8003252:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003256:	2200      	movs	r2, #0
 8003258:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800325a:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <MX_SPI2_Init+0x64>)
 800325c:	2200      	movs	r2, #0
 800325e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003262:	2200      	movs	r2, #0
 8003264:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800326c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003270:	2200      	movs	r2, #0
 8003272:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003276:	2200      	movs	r2, #0
 8003278:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800327a:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <MX_SPI2_Init+0x64>)
 800327c:	2200      	movs	r2, #0
 800327e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003280:	4b07      	ldr	r3, [pc, #28]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003282:	2200      	movs	r2, #0
 8003284:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <MX_SPI2_Init+0x64>)
 8003288:	220a      	movs	r2, #10
 800328a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800328c:	4804      	ldr	r0, [pc, #16]	; (80032a0 <MX_SPI2_Init+0x64>)
 800328e:	f00a f9c3 	bl	800d618 <HAL_SPI_Init>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d001      	beq.n	800329c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003298:	f001 ffc6 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000ab34 	.word	0x2000ab34
 80032a4:	40003800 	.word	0x40003800

080032a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032ae:	f107 0308 	add.w	r3, r7, #8
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	609a      	str	r2, [r3, #8]
 80032ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032bc:	463b      	mov	r3, r7
 80032be:	2200      	movs	r2, #0
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80032c4:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032c6:	4a20      	ldr	r2, [pc, #128]	; (8003348 <MX_TIM1_Init+0xa0>)
 80032c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032cc:	f244 129f 	movw	r2, #16799	; 0x419f
 80032d0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d2:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032da:	f242 7210 	movw	r2, #10000	; 0x2710
 80032de:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e0:	4b18      	ldr	r3, [pc, #96]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032e6:	4b17      	ldr	r3, [pc, #92]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ec:	4b15      	ldr	r3, [pc, #84]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032f2:	4814      	ldr	r0, [pc, #80]	; (8003344 <MX_TIM1_Init+0x9c>)
 80032f4:	f00b f898 	bl	800e428 <HAL_TIM_Base_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80032fe:	f001 ff93 	bl	8005228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003306:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003308:	f107 0308 	add.w	r3, r7, #8
 800330c:	4619      	mov	r1, r3
 800330e:	480d      	ldr	r0, [pc, #52]	; (8003344 <MX_TIM1_Init+0x9c>)
 8003310:	f00b fa81 	bl	800e816 <HAL_TIM_ConfigClockSource>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800331a:	f001 ff85 	bl	8005228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800331e:	2320      	movs	r3, #32
 8003320:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003326:	463b      	mov	r3, r7
 8003328:	4619      	mov	r1, r3
 800332a:	4806      	ldr	r0, [pc, #24]	; (8003344 <MX_TIM1_Init+0x9c>)
 800332c:	f00b fc9c 	bl	800ec68 <HAL_TIMEx_MasterConfigSynchronization>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003336:	f001 ff77 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800333a:	bf00      	nop
 800333c:	3718      	adds	r7, #24
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20011410 	.word	0x20011410
 8003348:	40010000 	.word	0x40010000

0800334c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003352:	f107 0308 	add.w	r3, r7, #8
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	609a      	str	r2, [r3, #8]
 800335e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003360:	463b      	mov	r3, r7
 8003362:	2200      	movs	r2, #0
 8003364:	601a      	str	r2, [r3, #0]
 8003366:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003368:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <MX_TIM2_Init+0x94>)
 800336a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800336e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <MX_TIM2_Init+0x94>)
 8003372:	220a      	movs	r2, #10
 8003374:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <MX_TIM2_Init+0x94>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <MX_TIM2_Init+0x94>)
 800337e:	220a      	movs	r2, #10
 8003380:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <MX_TIM2_Init+0x94>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <MX_TIM2_Init+0x94>)
 800338a:	2200      	movs	r2, #0
 800338c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800338e:	4814      	ldr	r0, [pc, #80]	; (80033e0 <MX_TIM2_Init+0x94>)
 8003390:	f00b f84a 	bl	800e428 <HAL_TIM_Base_Init>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800339a:	f001 ff45 	bl	8005228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	4619      	mov	r1, r3
 80033aa:	480d      	ldr	r0, [pc, #52]	; (80033e0 <MX_TIM2_Init+0x94>)
 80033ac:	f00b fa33 	bl	800e816 <HAL_TIM_ConfigClockSource>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80033b6:	f001 ff37 	bl	8005228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033be:	2300      	movs	r3, #0
 80033c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80033c2:	463b      	mov	r3, r7
 80033c4:	4619      	mov	r1, r3
 80033c6:	4806      	ldr	r0, [pc, #24]	; (80033e0 <MX_TIM2_Init+0x94>)
 80033c8:	f00b fc4e 	bl	800ec68 <HAL_TIMEx_MasterConfigSynchronization>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80033d2:	f001 ff29 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80033d6:	bf00      	nop
 80033d8:	3718      	adds	r7, #24
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200117e8 	.word	0x200117e8

080033e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033ea:	f107 0308 	add.w	r3, r7, #8
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033f8:	463b      	mov	r3, r7
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003400:	4b1d      	ldr	r3, [pc, #116]	; (8003478 <MX_TIM3_Init+0x94>)
 8003402:	4a1e      	ldr	r2, [pc, #120]	; (800347c <MX_TIM3_Init+0x98>)
 8003404:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <MX_TIM3_Init+0x94>)
 8003408:	f240 3247 	movw	r2, #839	; 0x347
 800340c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800340e:	4b1a      	ldr	r3, [pc, #104]	; (8003478 <MX_TIM3_Init+0x94>)
 8003410:	2200      	movs	r2, #0
 8003412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003414:	4b18      	ldr	r3, [pc, #96]	; (8003478 <MX_TIM3_Init+0x94>)
 8003416:	220a      	movs	r2, #10
 8003418:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <MX_TIM3_Init+0x94>)
 800341c:	2200      	movs	r2, #0
 800341e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003420:	4b15      	ldr	r3, [pc, #84]	; (8003478 <MX_TIM3_Init+0x94>)
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003426:	4814      	ldr	r0, [pc, #80]	; (8003478 <MX_TIM3_Init+0x94>)
 8003428:	f00a fffe 	bl	800e428 <HAL_TIM_Base_Init>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003432:	f001 fef9 	bl	8005228 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800343a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	4619      	mov	r1, r3
 8003442:	480d      	ldr	r0, [pc, #52]	; (8003478 <MX_TIM3_Init+0x94>)
 8003444:	f00b f9e7 	bl	800e816 <HAL_TIM_ConfigClockSource>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800344e:	f001 feeb 	bl	8005228 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003452:	2300      	movs	r3, #0
 8003454:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800345a:	463b      	mov	r3, r7
 800345c:	4619      	mov	r1, r3
 800345e:	4806      	ldr	r0, [pc, #24]	; (8003478 <MX_TIM3_Init+0x94>)
 8003460:	f00b fc02 	bl	800ec68 <HAL_TIMEx_MasterConfigSynchronization>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800346a:	f001 fedd 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	2000e8bc 	.word	0x2000e8bc
 800347c:	40000400 	.word	0x40000400

08003480 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <MX_TIM10_Init+0x3c>)
 8003486:	4a0e      	ldr	r2, [pc, #56]	; (80034c0 <MX_TIM10_Init+0x40>)
 8003488:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <MX_TIM10_Init+0x3c>)
 800348c:	22a7      	movs	r2, #167	; 0xa7
 800348e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <MX_TIM10_Init+0x3c>)
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <MX_TIM10_Init+0x3c>)
 8003498:	2209      	movs	r2, #9
 800349a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <MX_TIM10_Init+0x3c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <MX_TIM10_Init+0x3c>)
 80034a4:	2280      	movs	r2, #128	; 0x80
 80034a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80034a8:	4804      	ldr	r0, [pc, #16]	; (80034bc <MX_TIM10_Init+0x3c>)
 80034aa:	f00a ffbd 	bl	800e428 <HAL_TIM_Base_Init>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80034b4:	f001 feb8 	bl	8005228 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80034b8:	bf00      	nop
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000ac48 	.word	0x2000ac48
 80034c0:	40014400 	.word	0x40014400

080034c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	607b      	str	r3, [r7, #4]
 80034ce:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <MX_DMA_Init+0x3c>)
 80034d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <MX_DMA_Init+0x3c>)
 80034d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034d8:	6313      	str	r3, [r2, #48]	; 0x30
 80034da:	4b09      	ldr	r3, [pc, #36]	; (8003500 <MX_DMA_Init+0x3c>)
 80034dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2105      	movs	r1, #5
 80034ea:	200f      	movs	r0, #15
 80034ec:	f005 f994 	bl	8008818 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80034f0:	200f      	movs	r0, #15
 80034f2:	f005 f9ad 	bl	8008850 <HAL_NVIC_EnableIRQ>

}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	40023800 	.word	0x40023800

08003504 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b08c      	sub	sp, #48	; 0x30
 8003508:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800350a:	f107 031c 	add.w	r3, r7, #28
 800350e:	2200      	movs	r2, #0
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	605a      	str	r2, [r3, #4]
 8003514:	609a      	str	r2, [r3, #8]
 8003516:	60da      	str	r2, [r3, #12]
 8003518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800351a:	2300      	movs	r3, #0
 800351c:	61bb      	str	r3, [r7, #24]
 800351e:	4baa      	ldr	r3, [pc, #680]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	4aa9      	ldr	r2, [pc, #676]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003524:	f043 0310 	orr.w	r3, r3, #16
 8003528:	6313      	str	r3, [r2, #48]	; 0x30
 800352a:	4ba7      	ldr	r3, [pc, #668]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	61bb      	str	r3, [r7, #24]
 8003534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	617b      	str	r3, [r7, #20]
 800353a:	4ba3      	ldr	r3, [pc, #652]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 800353c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353e:	4aa2      	ldr	r2, [pc, #648]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003540:	f043 0304 	orr.w	r3, r3, #4
 8003544:	6313      	str	r3, [r2, #48]	; 0x30
 8003546:	4ba0      	ldr	r3, [pc, #640]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	4b9c      	ldr	r3, [pc, #624]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a9b      	ldr	r2, [pc, #620]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 800355c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b99      	ldr	r3, [pc, #612]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b95      	ldr	r3, [pc, #596]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	4a94      	ldr	r2, [pc, #592]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6313      	str	r3, [r2, #48]	; 0x30
 800357e:	4b92      	ldr	r3, [pc, #584]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	4b8e      	ldr	r3, [pc, #568]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003592:	4a8d      	ldr	r2, [pc, #564]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 8003594:	f043 0302 	orr.w	r3, r3, #2
 8003598:	6313      	str	r3, [r2, #48]	; 0x30
 800359a:	4b8b      	ldr	r3, [pc, #556]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	60bb      	str	r3, [r7, #8]
 80035a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a6:	2300      	movs	r3, #0
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	4b87      	ldr	r3, [pc, #540]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	4a86      	ldr	r2, [pc, #536]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 80035b0:	f043 0308 	orr.w	r3, r3, #8
 80035b4:	6313      	str	r3, [r2, #48]	; 0x30
 80035b6:	4b84      	ldr	r3, [pc, #528]	; (80037c8 <MX_GPIO_Init+0x2c4>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f003 0308 	and.w	r3, r3, #8
 80035be:	607b      	str	r3, [r7, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80035c2:	2200      	movs	r2, #0
 80035c4:	217c      	movs	r1, #124	; 0x7c
 80035c6:	4881      	ldr	r0, [pc, #516]	; (80037cc <MX_GPIO_Init+0x2c8>)
 80035c8:	f006 f86e 	bl	80096a8 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80035cc:	2201      	movs	r2, #1
 80035ce:	2101      	movs	r1, #1
 80035d0:	487f      	ldr	r0, [pc, #508]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 80035d2:	f006 f869 	bl	80096a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 80035d6:	2200      	movs	r2, #0
 80035d8:	2142      	movs	r1, #66	; 0x42
 80035da:	487d      	ldr	r0, [pc, #500]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 80035dc:	f006 f864 	bl	80096a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80035e0:	2200      	movs	r2, #0
 80035e2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80035e6:	487b      	ldr	r0, [pc, #492]	; (80037d4 <MX_GPIO_Init+0x2d0>)
 80035e8:	f006 f85e 	bl	80096a8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80035ec:	2200      	movs	r2, #0
 80035ee:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80035f2:	4879      	ldr	r0, [pc, #484]	; (80037d8 <MX_GPIO_Init+0x2d4>)
 80035f4:	f006 f858 	bl	80096a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 80035f8:	231c      	movs	r3, #28
 80035fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035fc:	2301      	movs	r3, #1
 80035fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003600:	2300      	movs	r3, #0
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003604:	2300      	movs	r3, #0
 8003606:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003608:	f107 031c 	add.w	r3, r7, #28
 800360c:	4619      	mov	r1, r3
 800360e:	486f      	ldr	r0, [pc, #444]	; (80037cc <MX_GPIO_Init+0x2c8>)
 8003610:	f005 fd9a 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8003614:	2360      	movs	r3, #96	; 0x60
 8003616:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003618:	2301      	movs	r3, #1
 800361a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361c:	2300      	movs	r3, #0
 800361e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003620:	2303      	movs	r3, #3
 8003622:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003624:	f107 031c 	add.w	r3, r7, #28
 8003628:	4619      	mov	r1, r3
 800362a:	4868      	ldr	r0, [pc, #416]	; (80037cc <MX_GPIO_Init+0x2c8>)
 800362c:	f005 fd8c 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8003630:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003636:	2300      	movs	r3, #0
 8003638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800363e:	f107 031c 	add.w	r3, r7, #28
 8003642:	4619      	mov	r1, r3
 8003644:	4862      	ldr	r0, [pc, #392]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 8003646:	f005 fd7f 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 800364a:	2303      	movs	r3, #3
 800364c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800364e:	2301      	movs	r3, #1
 8003650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003652:	2300      	movs	r3, #0
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003656:	2300      	movs	r3, #0
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4619      	mov	r1, r3
 8003660:	485b      	ldr	r0, [pc, #364]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 8003662:	f005 fd71 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003666:	2308      	movs	r3, #8
 8003668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366a:	2302      	movs	r3, #2
 800366c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366e:	2300      	movs	r3, #0
 8003670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003672:	2300      	movs	r3, #0
 8003674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003676:	2305      	movs	r3, #5
 8003678:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800367a:	f107 031c 	add.w	r3, r7, #28
 800367e:	4619      	mov	r1, r3
 8003680:	4853      	ldr	r0, [pc, #332]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 8003682:	f005 fd61 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003686:	2301      	movs	r3, #1
 8003688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800368a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800368e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003690:	2300      	movs	r3, #0
 8003692:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003694:	f107 031c 	add.w	r3, r7, #28
 8003698:	4619      	mov	r1, r3
 800369a:	4850      	ldr	r0, [pc, #320]	; (80037dc <MX_GPIO_Init+0x2d8>)
 800369c:	f005 fd54 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80036a0:	2310      	movs	r3, #16
 80036a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a4:	2302      	movs	r3, #2
 80036a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a8:	2300      	movs	r3, #0
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ac:	2300      	movs	r3, #0
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80036b0:	2306      	movs	r3, #6
 80036b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80036b4:	f107 031c 	add.w	r3, r7, #28
 80036b8:	4619      	mov	r1, r3
 80036ba:	4848      	ldr	r0, [pc, #288]	; (80037dc <MX_GPIO_Init+0x2d8>)
 80036bc:	f005 fd44 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80036c0:	2304      	movs	r3, #4
 80036c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c8:	2300      	movs	r3, #0
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80036cc:	f107 031c 	add.w	r3, r7, #28
 80036d0:	4619      	mov	r1, r3
 80036d2:	4841      	ldr	r0, [pc, #260]	; (80037d8 <MX_GPIO_Init+0x2d4>)
 80036d4:	f005 fd38 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80036d8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80036dc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036de:	2301      	movs	r3, #1
 80036e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e6:	2300      	movs	r3, #0
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ea:	f107 031c 	add.w	r3, r7, #28
 80036ee:	4619      	mov	r1, r3
 80036f0:	4838      	ldr	r0, [pc, #224]	; (80037d4 <MX_GPIO_Init+0x2d0>)
 80036f2:	f005 fd29 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 80036f6:	2340      	movs	r3, #64	; 0x40
 80036f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036fa:	2301      	movs	r3, #1
 80036fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003702:	2302      	movs	r3, #2
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003706:	f107 031c 	add.w	r3, r7, #28
 800370a:	4619      	mov	r1, r3
 800370c:	4830      	ldr	r0, [pc, #192]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 800370e:	f005 fd1b 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003712:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003718:	2302      	movs	r3, #2
 800371a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371c:	2300      	movs	r3, #0
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003720:	2300      	movs	r3, #0
 8003722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003724:	2306      	movs	r3, #6
 8003726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003728:	f107 031c 	add.w	r3, r7, #28
 800372c:	4619      	mov	r1, r3
 800372e:	4828      	ldr	r0, [pc, #160]	; (80037d0 <MX_GPIO_Init+0x2cc>)
 8003730:	f005 fd0a 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003734:	2320      	movs	r3, #32
 8003736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003738:	2300      	movs	r3, #0
 800373a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373c:	2300      	movs	r3, #0
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003740:	f107 031c 	add.w	r3, r7, #28
 8003744:	4619      	mov	r1, r3
 8003746:	4823      	ldr	r0, [pc, #140]	; (80037d4 <MX_GPIO_Init+0x2d0>)
 8003748:	f005 fcfe 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800374c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003752:	2312      	movs	r3, #18
 8003754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003756:	2301      	movs	r3, #1
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800375a:	2300      	movs	r3, #0
 800375c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800375e:	2304      	movs	r3, #4
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003762:	f107 031c 	add.w	r3, r7, #28
 8003766:	4619      	mov	r1, r3
 8003768:	481b      	ldr	r0, [pc, #108]	; (80037d8 <MX_GPIO_Init+0x2d4>)
 800376a:	f005 fced 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 800376e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003772:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003774:	2301      	movs	r3, #1
 8003776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	2300      	movs	r3, #0
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800377c:	2303      	movs	r3, #3
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	4619      	mov	r1, r3
 8003786:	4814      	ldr	r0, [pc, #80]	; (80037d8 <MX_GPIO_Init+0x2d4>)
 8003788:	f005 fcde 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800378c:	2301      	movs	r3, #1
 800378e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003790:	2300      	movs	r3, #0
 8003792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003798:	f107 031c 	add.w	r3, r7, #28
 800379c:	4619      	mov	r1, r3
 800379e:	480b      	ldr	r0, [pc, #44]	; (80037cc <MX_GPIO_Init+0x2c8>)
 80037a0:	f005 fcd2 	bl	8009148 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80037a8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80037ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	4619      	mov	r1, r3
 80037b8:	4804      	ldr	r0, [pc, #16]	; (80037cc <MX_GPIO_Init+0x2c8>)
 80037ba:	f005 fcc5 	bl	8009148 <HAL_GPIO_Init>

}
 80037be:	bf00      	nop
 80037c0:	3730      	adds	r7, #48	; 0x30
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40020800 	.word	0x40020800
 80037d4:	40020c00 	.word	0x40020c00
 80037d8:	40020400 	.word	0x40020400
 80037dc:	40020000 	.word	0x40020000

080037e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80037e8:	f015 fe34 	bl	8019454 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80037ec:	200a      	movs	r0, #10
 80037ee:	f011 ffc1 	bl	8015774 <osDelay>
 80037f2:	e7fb      	b.n	80037ec <StartDefaultTask+0xc>

080037f4 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 80037f4:	b5b0      	push	{r4, r5, r7, lr}
 80037f6:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	6018      	str	r0, [r3, #0]
		 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
		 * Also, need solder the LF Crystal and two capacitors.
		 */

		// 1. Set time
		  RTC_TimeTypeDef sTime = {0};
 8003800:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
	//	  sTime.Minutes = 33;
	//	  sTime.Seconds = 00;
	//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		  // Set date

		  RTC_DateTypeDef sDate = {0};
 8003810:	2300      	movs	r3, #0
 8003812:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003816:	f107 0314 	add.w	r3, r7, #20
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	3304      	adds	r3, #4
 8003820:	222e      	movs	r2, #46	; 0x2e
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f016 fc99 	bl	801a15c <memset>
	char buf[5] = {0};
 800382a:	f107 030c 	add.w	r3, r7, #12
 800382e:	2200      	movs	r2, #0
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	f640 220d 	movw	r2, #2573	; 0xa0d
 800383e:	601a      	str	r2, [r3, #0]

	static uint8_t i = 1;
	for(;;)
	{
		// Blue LED blink//
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003840:	2201      	movs	r2, #1
 8003842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003846:	4883      	ldr	r0, [pc, #524]	; (8003a54 <Start_RTC+0x260>)
 8003848:	f005 ff2e 	bl	80096a8 <HAL_GPIO_WritePin>
		osDelay(100);
 800384c:	2064      	movs	r0, #100	; 0x64
 800384e:	f011 ff91 	bl	8015774 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003852:	2200      	movs	r2, #0
 8003854:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003858:	487e      	ldr	r0, [pc, #504]	; (8003a54 <Start_RTC+0x260>)
 800385a:	f005 ff25 	bl	80096a8 <HAL_GPIO_WritePin>
		osDelay(900);
 800385e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003862:	f011 ff87 	bl	8015774 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003866:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800386a:	2200      	movs	r2, #0
 800386c:	4619      	mov	r1, r3
 800386e:	487a      	ldr	r0, [pc, #488]	; (8003a58 <Start_RTC+0x264>)
 8003870:	f009 fbd6 	bl	800d020 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003874:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003878:	2200      	movs	r2, #0
 800387a:	4619      	mov	r1, r3
 800387c:	4876      	ldr	r0, [pc, #472]	; (8003a58 <Start_RTC+0x264>)
 800387e:	f009 fcd4 	bl	800d22a <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003882:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f016 fc65 	bl	801a15c <memset>
		memset(buff, 0, sizeof(buff));
 8003892:	f107 0314 	add.w	r3, r7, #20
 8003896:	2232      	movs	r2, #50	; 0x32
 8003898:	2100      	movs	r1, #0
 800389a:	4618      	mov	r0, r3
 800389c:	f016 fc5e 	bl	801a15c <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 80038a0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fc93 	bl	80001d0 <strlen>
 80038aa:	4603      	mov	r3, r0
 80038ac:	461a      	mov	r2, r3
 80038ae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b2:	4413      	add	r3, r2
 80038b4:	4a69      	ldr	r2, [pc, #420]	; (8003a5c <Start_RTC+0x268>)
 80038b6:	461d      	mov	r5, r3
 80038b8:	4614      	mov	r4, r2
 80038ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038bc:	6028      	str	r0, [r5, #0]
 80038be:	6069      	str	r1, [r5, #4]
 80038c0:	60aa      	str	r2, [r5, #8]
 80038c2:	60eb      	str	r3, [r5, #12]
 80038c4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80038c6:	6128      	str	r0, [r5, #16]
 80038c8:	6169      	str	r1, [r5, #20]
 80038ca:	61aa      	str	r2, [r5, #24]
 80038cc:	8823      	ldrh	r3, [r4, #0]
 80038ce:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 80038d0:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 80038d4:	4618      	mov	r0, r3
 80038d6:	f107 030c 	add.w	r3, r7, #12
 80038da:	220a      	movs	r2, #10
 80038dc:	4619      	mov	r1, r3
 80038de:	f016 fc19 	bl	801a114 <itoa>
		strcat(msg.Buf, buf);
 80038e2:	f107 020c 	add.w	r2, r7, #12
 80038e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f017 fa2e 	bl	801ad4e <strcat>

		itoa(sDate.Month, buf, 10);
 80038f2:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 80038f6:	4618      	mov	r0, r3
 80038f8:	f107 030c 	add.w	r3, r7, #12
 80038fc:	220a      	movs	r2, #10
 80038fe:	4619      	mov	r1, r3
 8003900:	f016 fc08 	bl	801a114 <itoa>
		strcat(msg.Buf, "-");
 8003904:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003908:	4618      	mov	r0, r3
 800390a:	f7fc fc61 	bl	80001d0 <strlen>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003916:	4413      	add	r3, r2
 8003918:	4951      	ldr	r1, [pc, #324]	; (8003a60 <Start_RTC+0x26c>)
 800391a:	461a      	mov	r2, r3
 800391c:	460b      	mov	r3, r1
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003922:	f107 020c 	add.w	r2, r7, #12
 8003926:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f017 fa0e 	bl	801ad4e <strcat>

		itoa(sDate.Date, buf, 10);
 8003932:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003936:	4618      	mov	r0, r3
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	220a      	movs	r2, #10
 800393e:	4619      	mov	r1, r3
 8003940:	f016 fbe8 	bl	801a114 <itoa>
		strcat(msg.Buf, "-");
 8003944:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003948:	4618      	mov	r0, r3
 800394a:	f7fc fc41 	bl	80001d0 <strlen>
 800394e:	4603      	mov	r3, r0
 8003950:	461a      	mov	r2, r3
 8003952:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003956:	4413      	add	r3, r2
 8003958:	4941      	ldr	r1, [pc, #260]	; (8003a60 <Start_RTC+0x26c>)
 800395a:	461a      	mov	r2, r3
 800395c:	460b      	mov	r3, r1
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003962:	f107 020c 	add.w	r2, r7, #12
 8003966:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800396a:	4611      	mov	r1, r2
 800396c:	4618      	mov	r0, r3
 800396e:	f017 f9ee 	bl	801ad4e <strcat>

		strcat(msg.Buf, " | ");
 8003972:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fc2a 	bl	80001d0 <strlen>
 800397c:	4603      	mov	r3, r0
 800397e:	461a      	mov	r2, r3
 8003980:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003984:	4413      	add	r3, r2
 8003986:	4a37      	ldr	r2, [pc, #220]	; (8003a64 <Start_RTC+0x270>)
 8003988:	6810      	ldr	r0, [r2, #0]
 800398a:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 800398c:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003990:	4618      	mov	r0, r3
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	220a      	movs	r2, #10
 8003998:	4619      	mov	r1, r3
 800399a:	f016 fbbb 	bl	801a114 <itoa>
		strcat(msg.Buf, buf);
 800399e:	f107 020c 	add.w	r2, r7, #12
 80039a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f017 f9d0 	bl	801ad4e <strcat>

		itoa(sTime.Minutes, buf, 10);
 80039ae:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 80039b2:	4618      	mov	r0, r3
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	220a      	movs	r2, #10
 80039ba:	4619      	mov	r1, r3
 80039bc:	f016 fbaa 	bl	801a114 <itoa>
		strcat(msg.Buf, ":");
 80039c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fc fc03 	bl	80001d0 <strlen>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039d2:	4413      	add	r3, r2
 80039d4:	4924      	ldr	r1, [pc, #144]	; (8003a68 <Start_RTC+0x274>)
 80039d6:	461a      	mov	r2, r3
 80039d8:	460b      	mov	r3, r1
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 80039de:	f107 020c 	add.w	r2, r7, #12
 80039e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f017 f9b0 	bl	801ad4e <strcat>

		itoa(sTime.Seconds, buf, 10);
 80039ee:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 80039f2:	4618      	mov	r0, r3
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	220a      	movs	r2, #10
 80039fa:	4619      	mov	r1, r3
 80039fc:	f016 fb8a 	bl	801a114 <itoa>
		strcat(msg.Buf, ":");
 8003a00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fc fbe3 	bl	80001d0 <strlen>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a12:	4413      	add	r3, r2
 8003a14:	4914      	ldr	r1, [pc, #80]	; (8003a68 <Start_RTC+0x274>)
 8003a16:	461a      	mov	r2, r3
 8003a18:	460b      	mov	r3, r1
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003a1e:	f107 020c 	add.w	r2, r7, #12
 8003a22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a26:	4611      	mov	r1, r2
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f017 f990 	bl	801ad4e <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003a2e:	f107 0208 	add.w	r2, r7, #8
 8003a32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a36:	4611      	mov	r1, r2
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f017 f988 	bl	801ad4e <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003a3e:	4b0b      	ldr	r3, [pc, #44]	; (8003a6c <Start_RTC+0x278>)
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f012 f864 	bl	8015b18 <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003a50:	e6f6      	b.n	8003840 <Start_RTC+0x4c>
 8003a52:	bf00      	nop
 8003a54:	40020c00 	.word	0x40020c00
 8003a58:	20010a40 	.word	0x20010a40
 8003a5c:	0801d9e0 	.word	0x0801d9e0
 8003a60:	0801da00 	.word	0x0801da00
 8003a64:	0801da04 	.word	0x0801da04
 8003a68:	0801da08 	.word	0x0801da08
 8003a6c:	2000b768 	.word	0x2000b768

08003a70 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a72:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003a7c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003a80:	f011 fe78 	bl	8015774 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003a84:	4a90      	ldr	r2, [pc, #576]	; (8003cc8 <Start_Show_Resources+0x258>)
 8003a86:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8003a8a:	6812      	ldr	r2, [r2, #0]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	8019      	strh	r1, [r3, #0]
 8003a90:	3302      	adds	r3, #2
 8003a92:	0c12      	lsrs	r2, r2, #16
 8003a94:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003a96:	232d      	movs	r3, #45	; 0x2d
 8003a98:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8003aa2:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003aac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f016 fb50 	bl	801a15c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003abc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fc fb85 	bl	80001d0 <strlen>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	461a      	mov	r2, r3
 8003aca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ace:	4413      	add	r3, r2
 8003ad0:	4a7e      	ldr	r2, [pc, #504]	; (8003ccc <Start_Show_Resources+0x25c>)
 8003ad2:	461d      	mov	r5, r3
 8003ad4:	4614      	mov	r4, r2
 8003ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad8:	6028      	str	r0, [r5, #0]
 8003ada:	6069      	str	r1, [r5, #4]
 8003adc:	60aa      	str	r2, [r5, #8]
 8003ade:	60eb      	str	r3, [r5, #12]
 8003ae0:	cc03      	ldmia	r4!, {r0, r1}
 8003ae2:	6128      	str	r0, [r5, #16]
 8003ae4:	6169      	str	r1, [r5, #20]
 8003ae6:	7823      	ldrb	r3, [r4, #0]
 8003ae8:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003aea:	f015 fbeb 	bl	80192c4 <xPortGetFreeHeapSize>
 8003aee:	4603      	mov	r3, r0
 8003af0:	461a      	mov	r2, r3
 8003af2:	4b77      	ldr	r3, [pc, #476]	; (8003cd0 <Start_Show_Resources+0x260>)
 8003af4:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003af6:	4b76      	ldr	r3, [pc, #472]	; (8003cd0 <Start_Show_Resources+0x260>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 8003afe:	220a      	movs	r2, #10
 8003b00:	4618      	mov	r0, r3
 8003b02:	f016 fb07 	bl	801a114 <itoa>
	  strcat(msg.Buf, buff);
 8003b06:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 8003b0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f017 f91c 	bl	801ad4e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003b16:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8003b1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	f017 f914 	bl	801ad4e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8003b26:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fc fb50 	bl	80001d0 <strlen>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b38:	4413      	add	r3, r2
 8003b3a:	4a66      	ldr	r2, [pc, #408]	; (8003cd4 <Start_Show_Resources+0x264>)
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	469c      	mov	ip, r3
 8003b40:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003b44:	4665      	mov	r5, ip
 8003b46:	4626      	mov	r6, r4
 8003b48:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b4a:	6028      	str	r0, [r5, #0]
 8003b4c:	6069      	str	r1, [r5, #4]
 8003b4e:	60aa      	str	r2, [r5, #8]
 8003b50:	60eb      	str	r3, [r5, #12]
 8003b52:	3410      	adds	r4, #16
 8003b54:	f10c 0c10 	add.w	ip, ip, #16
 8003b58:	4574      	cmp	r4, lr
 8003b5a:	d1f3      	bne.n	8003b44 <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003b5c:	485e      	ldr	r0, [pc, #376]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003b5e:	f014 fb63 	bl	8018228 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003b62:	2300      	movs	r3, #0
 8003b64:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8003b68:	e004      	b.n	8003b74 <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8003b6a:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003b6e:	3301      	adds	r3, #1
 8003b70:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8003b74:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003b78:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b7c:	5cd3      	ldrb	r3, [r2, r3]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f3      	bne.n	8003b6a <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003b88:	2300      	movs	r3, #0
 8003b8a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003b8e:	e011      	b.n	8003bb4 <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003b90:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003b94:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003b98:	4413      	add	r3, r2
 8003b9a:	494f      	ldr	r1, [pc, #316]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003b9c:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003ba0:	440a      	add	r2, r1
 8003ba2:	7811      	ldrb	r1, [r2, #0]
 8003ba4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ba8:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003baa:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003bb4:	4a48      	ldr	r2, [pc, #288]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003bb6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003bba:	4413      	add	r3, r2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d1e6      	bne.n	8003b90 <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003bc2:	4b46      	ldr	r3, [pc, #280]	; (8003cdc <Start_Show_Resources+0x26c>)
 8003bc4:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8003bc8:	461d      	mov	r5, r3
 8003bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003bd2:	c403      	stmia	r4!, {r0, r1}
 8003bd4:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	4a41      	ldr	r2, [pc, #260]	; (8003ce0 <Start_Show_Resources+0x270>)
 8003bdc:	461c      	mov	r4, r3
 8003bde:	4615      	mov	r5, r2
 8003be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003be8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003bec:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8003bf0:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8003bf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f017 f8a7 	bl	801ad4e <strcat>
	  strcat(msg.Buf, str_head_2);
 8003c00:	f107 020c 	add.w	r2, r7, #12
 8003c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f017 f89f 	bl	801ad4e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8003c10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c14:	2100      	movs	r1, #0
 8003c16:	4830      	ldr	r0, [pc, #192]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003c18:	f016 faa0 	bl	801a15c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8003c1c:	482e      	ldr	r0, [pc, #184]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003c1e:	f014 fb99 	bl	8018354 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8003c22:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3340      	adds	r3, #64	; 0x40
 8003c32:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003c3c:	e011      	b.n	8003c62 <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003c3e:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003c42:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003c46:	4413      	add	r3, r2
 8003c48:	4923      	ldr	r1, [pc, #140]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003c4a:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003c4e:	440a      	add	r2, r1
 8003c50:	7811      	ldrb	r1, [r2, #0]
 8003c52:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003c56:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003c58:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003c62:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <Start_Show_Resources+0x268>)
 8003c64:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003c68:	4413      	add	r3, r2
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e6      	bne.n	8003c3e <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8003c70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc faab 	bl	80001d0 <strlen>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c82:	4413      	add	r3, r2
 8003c84:	4a17      	ldr	r2, [pc, #92]	; (8003ce4 <Start_Show_Resources+0x274>)
 8003c86:	4614      	mov	r4, r2
 8003c88:	469c      	mov	ip, r3
 8003c8a:	f104 0e20 	add.w	lr, r4, #32
 8003c8e:	4665      	mov	r5, ip
 8003c90:	4626      	mov	r6, r4
 8003c92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003c94:	6028      	str	r0, [r5, #0]
 8003c96:	6069      	str	r1, [r5, #4]
 8003c98:	60aa      	str	r2, [r5, #8]
 8003c9a:	60eb      	str	r3, [r5, #12]
 8003c9c:	3410      	adds	r4, #16
 8003c9e:	f10c 0c10 	add.w	ip, ip, #16
 8003ca2:	4574      	cmp	r4, lr
 8003ca4:	d1f3      	bne.n	8003c8e <Start_Show_Resources+0x21e>
 8003ca6:	4665      	mov	r5, ip
 8003ca8:	4623      	mov	r3, r4
 8003caa:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003cac:	6028      	str	r0, [r5, #0]
 8003cae:	6069      	str	r1, [r5, #4]
 8003cb0:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003cb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ce8 <Start_Show_Resources+0x278>)
 8003cb4:	6818      	ldr	r0, [r3, #0]
 8003cb6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f011 ff2a 	bl	8015b18 <osMessageQueuePut>
  {
 8003cc4:	e6da      	b.n	8003a7c <Start_Show_Resources+0xc>
 8003cc6:	bf00      	nop
 8003cc8:	0801da88 	.word	0x0801da88
 8003ccc:	0801da0c 	.word	0x0801da0c
 8003cd0:	20002840 	.word	0x20002840
 8003cd4:	0801da28 	.word	0x0801da28
 8003cd8:	20002458 	.word	0x20002458
 8003cdc:	0801da8c 	.word	0x0801da8c
 8003ce0:	0801daa8 	.word	0x0801daa8
 8003ce4:	0801da5c 	.word	0x0801da5c
 8003ce8:	2000b768 	.word	0x2000b768

08003cec <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	1d3b      	adds	r3, r7, #4
 8003cf6:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8003cf8:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <Start_UART_Task+0x58>)
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	f107 010c 	add.w	r1, r7, #12
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d04:	2200      	movs	r2, #0
 8003d06:	f011 ff67 	bl	8015bd8 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003d10:	e004      	b.n	8003d1c <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8003d12:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003d16:	3301      	adds	r3, #1
 8003d18:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003d1c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003d20:	f107 020c 	add.w	r2, r7, #12
 8003d24:	5cd3      	ldrb	r3, [r2, r3]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f3      	bne.n	8003d12 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8003d2a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8003d2e:	f107 030c 	add.w	r3, r7, #12
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f015 fc4b 	bl	80195d0 <CDC_Transmit_FS>
    osDelay(1);
 8003d3a:	2001      	movs	r0, #1
 8003d3c:	f011 fd1a 	bl	8015774 <osDelay>
  {
 8003d40:	e7da      	b.n	8003cf8 <Start_UART_Task+0xc>
 8003d42:	bf00      	nop
 8003d44:	2000b768 	.word	0x2000b768

08003d48 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b0a4      	sub	sp, #144	; 0x90
 8003d4c:	af04      	add	r7, sp, #16
 8003d4e:	6078      	str	r0, [r7, #4]
	//QUEUE_t msg;												// Make a queue

	BME280QUEUE bme280_meg;
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	uint16_t addres_device = 0x76;  		 	// BME280
 8003d56:	2376      	movs	r3, #118	; 0x76
 8003d58:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t id_addr = 0xD0;
 8003d5c:	23d0      	movs	r3, #208	; 0xd0
 8003d5e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint8_t id = 96;							// in hex form
 8003d62:	2360      	movs	r3, #96	; 0x60
 8003d64:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8003d6e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	b299      	uxth	r1, r3
 8003d76:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8003d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d7e:	9302      	str	r3, [sp, #8]
 8003d80:	2301      	movs	r3, #1
 8003d82:	9301      	str	r3, [sp, #4]
 8003d84:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	4895      	ldr	r0, [pc, #596]	; (8003fe4 <Start_bme280+0x29c>)
 8003d8e:	f006 fa07 	bl	800a1a0 <HAL_I2C_Mem_Read>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8003d98:	4b93      	ldr	r3, [pc, #588]	; (8003fe8 <Start_bme280+0x2a0>)
 8003d9a:	2276      	movs	r2, #118	; 0x76
 8003d9c:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8003d9e:	4b92      	ldr	r3, [pc, #584]	; (8003fe8 <Start_bme280+0x2a0>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8003da4:	4b90      	ldr	r3, [pc, #576]	; (8003fe8 <Start_bme280+0x2a0>)
 8003da6:	4a91      	ldr	r2, [pc, #580]	; (8003fec <Start_bme280+0x2a4>)
 8003da8:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8003daa:	4b8f      	ldr	r3, [pc, #572]	; (8003fe8 <Start_bme280+0x2a0>)
 8003dac:	4a90      	ldr	r2, [pc, #576]	; (8003ff0 <Start_bme280+0x2a8>)
 8003dae:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8003db0:	4b8d      	ldr	r3, [pc, #564]	; (8003fe8 <Start_bme280+0x2a0>)
 8003db2:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <Start_bme280+0x2ac>)
 8003db4:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8003db6:	488c      	ldr	r0, [pc, #560]	; (8003fe8 <Start_bme280+0x2a0>)
 8003db8:	f001 fec4 	bl	8005b44 <bme280_init>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b8d      	ldr	r3, [pc, #564]	; (8003ff8 <Start_bme280+0x2b0>)
 8003dc2:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003dc4:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <Start_bme280+0x2a0>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8003dcc:	4b86      	ldr	r3, [pc, #536]	; (8003fe8 <Start_bme280+0x2a0>)
 8003dce:	2205      	movs	r2, #5
 8003dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003dd4:	4b84      	ldr	r3, [pc, #528]	; (8003fe8 <Start_bme280+0x2a0>)
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8003ddc:	4b82      	ldr	r3, [pc, #520]	; (8003fe8 <Start_bme280+0x2a0>)
 8003dde:	2204      	movs	r2, #4
 8003de0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003de4:	4980      	ldr	r1, [pc, #512]	; (8003fe8 <Start_bme280+0x2a0>)
 8003de6:	200f      	movs	r0, #15
 8003de8:	f001 ff9e 	bl	8005d28 <bme280_set_sensor_settings>
 8003dec:	4603      	mov	r3, r0
 8003dee:	461a      	mov	r2, r3
 8003df0:	4b81      	ldr	r3, [pc, #516]	; (8003ff8 <Start_bme280+0x2b0>)
 8003df2:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8003df4:	497c      	ldr	r1, [pc, #496]	; (8003fe8 <Start_bme280+0x2a0>)
 8003df6:	2003      	movs	r0, #3
 8003df8:	f001 ffeb 	bl	8005dd2 <bme280_set_sensor_mode>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4b7d      	ldr	r3, [pc, #500]	; (8003ff8 <Start_bme280+0x2b0>)
 8003e02:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8003e04:	4b78      	ldr	r3, [pc, #480]	; (8003fe8 <Start_bme280+0x2a0>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2028      	movs	r0, #40	; 0x28
 8003e0a:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8003e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e10:	f011 fcb0 	bl	8015774 <osDelay>

	  char str_t_h_and_p[60] = {0};
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	f107 0310 	add.w	r3, r7, #16
 8003e1c:	2238      	movs	r2, #56	; 0x38
 8003e1e:	2100      	movs	r1, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f016 f99b 	bl	801a15c <memset>
	  char str_thp_buffer[12] = {0};
 8003e26:	2300      	movs	r3, #0
 8003e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	605a      	str	r2, [r3, #4]

	//  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
	  memset(bme280_meg.bme280_temperature_and_humidity, 0, sizeof(bme280_meg.bme280_temperature_and_humidity));								// Fill in buff '\0'
 8003e34:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e38:	2214      	movs	r2, #20
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f016 f98d 	bl	801a15c <memset>

	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 8003e42:	4a69      	ldr	r2, [pc, #420]	; (8003fe8 <Start_bme280+0x2a0>)
 8003e44:	496d      	ldr	r1, [pc, #436]	; (8003ffc <Start_bme280+0x2b4>)
 8003e46:	2007      	movs	r0, #7
 8003e48:	f002 f83f 	bl	8005eca <bme280_get_sensor_data>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <Start_bme280+0x2b0>)
 8003e52:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8003e54:	4b68      	ldr	r3, [pc, #416]	; (8003ff8 <Start_bme280+0x2b0>)
 8003e56:	f993 3000 	ldrsb.w	r3, [r3]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	f040 80a5 	bne.w	8003faa <Start_bme280+0x262>
	  {
	  		// Save data variables
	  		int BME280_temperature = comp_data.temperature;
 8003e60:	4b66      	ldr	r3, [pc, #408]	; (8003ffc <Start_bme280+0x2b4>)
 8003e62:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003e66:	4610      	mov	r0, r2
 8003e68:	4619      	mov	r1, r3
 8003e6a:	f7fc fe75 	bl	8000b58 <__aeabi_d2iz>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	677b      	str	r3, [r7, #116]	; 0x74
	  		int BME280_humidity = comp_data.humidity;
 8003e72:	4b62      	ldr	r3, [pc, #392]	; (8003ffc <Start_bme280+0x2b4>)
 8003e74:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	f7fc fe6c 	bl	8000b58 <__aeabi_d2iz>
 8003e80:	4603      	mov	r3, r0
 8003e82:	673b      	str	r3, [r7, #112]	; 0x70
	  		int BME280_preasure = comp_data.pressure;
 8003e84:	4b5d      	ldr	r3, [pc, #372]	; (8003ffc <Start_bme280+0x2b4>)
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	f7fc fe63 	bl	8000b58 <__aeabi_d2iz>
 8003e92:	4603      	mov	r3, r0
 8003e94:	66fb      	str	r3, [r7, #108]	; 0x6c

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
//	  		strcat(str_t_h_and_p, "      BME280: \n\r");
	  		strcat(str_t_h_and_p, "T");
 8003e96:	f107 030c 	add.w	r3, r7, #12
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fc f998 	bl	80001d0 <strlen>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4955      	ldr	r1, [pc, #340]	; (8004000 <Start_bme280+0x2b8>)
 8003eac:	461a      	mov	r2, r3
 8003eae:	460b      	mov	r3, r1
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_temperature);
 8003eb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003eba:	4952      	ldr	r1, [pc, #328]	; (8004004 <Start_bme280+0x2bc>)
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f016 fee3 	bl	801ac88 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003ec2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ec6:	f107 030c 	add.w	r3, r7, #12
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f016 ff3e 	bl	801ad4e <strcat>
	  		strcat(str_t_h_and_p, "C ");
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fc f97a 	bl	80001d0 <strlen>
 8003edc:	4603      	mov	r3, r0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f107 030c 	add.w	r3, r7, #12
 8003ee4:	4413      	add	r3, r2
 8003ee6:	4a48      	ldr	r2, [pc, #288]	; (8004008 <Start_bme280+0x2c0>)
 8003ee8:	8811      	ldrh	r1, [r2, #0]
 8003eea:	7892      	ldrb	r2, [r2, #2]
 8003eec:	8019      	strh	r1, [r3, #0]
 8003eee:	709a      	strb	r2, [r3, #2]

	  		// Write HUMIDYTY
	  		// memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
	  		strcat(str_t_h_and_p, "H");
 8003ef0:	f107 030c 	add.w	r3, r7, #12
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7fc f96b 	bl	80001d0 <strlen>
 8003efa:	4603      	mov	r3, r0
 8003efc:	461a      	mov	r2, r3
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	4413      	add	r3, r2
 8003f04:	4941      	ldr	r1, [pc, #260]	; (800400c <Start_bme280+0x2c4>)
 8003f06:	461a      	mov	r2, r3
 8003f08:	460b      	mov	r3, r1
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_humidity);
 8003f0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f12:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f14:	493b      	ldr	r1, [pc, #236]	; (8004004 <Start_bme280+0x2bc>)
 8003f16:	4618      	mov	r0, r3
 8003f18:	f016 feb6 	bl	801ac88 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003f1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f016 ff11 	bl	801ad4e <strcat>
	  		strcat(str_t_h_and_p, "% ");
 8003f2c:	f107 030c 	add.w	r3, r7, #12
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc f94d 	bl	80001d0 <strlen>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	f107 030c 	add.w	r3, r7, #12
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a33      	ldr	r2, [pc, #204]	; (8004010 <Start_bme280+0x2c8>)
 8003f42:	8811      	ldrh	r1, [r2, #0]
 8003f44:	7892      	ldrb	r2, [r2, #2]
 8003f46:	8019      	strh	r1, [r3, #0]
 8003f48:	709a      	strb	r2, [r3, #2]

	  		// Write PRERASURE
	  		//memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
	  		strcat(str_t_h_and_p, "P");
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fc f93e 	bl	80001d0 <strlen>
 8003f54:	4603      	mov	r3, r0
 8003f56:	461a      	mov	r2, r3
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	4413      	add	r3, r2
 8003f5e:	492d      	ldr	r1, [pc, #180]	; (8004014 <Start_bme280+0x2cc>)
 8003f60:	461a      	mov	r2, r3
 8003f62:	460b      	mov	r3, r1
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_preasure);
 8003f68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f6e:	4925      	ldr	r1, [pc, #148]	; (8004004 <Start_bme280+0x2bc>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f016 fe89 	bl	801ac88 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003f76:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f7a:	f107 030c 	add.w	r3, r7, #12
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f016 fee4 	bl	801ad4e <strcat>
	  		//strcat(str_t_h_and_p, " mm\n\r\0");

//	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
//	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)

	  		strcat(bme280_meg.bme280_temperature_and_humidity, str_t_h_and_p);
 8003f86:	f107 020c 	add.w	r2, r7, #12
 8003f8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003f8e:	4611      	mov	r1, r2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f016 fedc 	bl	801ad4e <strcat>
	  		osMessageQueuePut(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 8003f96:	4b20      	ldr	r3, [pc, #128]	; (8004018 <Start_bme280+0x2d0>)
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f011 fdb8 	bl	8015b18 <osMessageQueuePut>
 8003fa8:	e730      	b.n	8003e0c <Start_bme280+0xc4>
	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!!");
 8003faa:	f107 030c 	add.w	r3, r7, #12
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc f90e 	bl	80001d0 <strlen>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f107 030c 	add.w	r3, r7, #12
 8003fbc:	4413      	add	r3, r2
 8003fbe:	4917      	ldr	r1, [pc, #92]	; (800401c <Start_bme280+0x2d4>)
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	cb03      	ldmia	r3!, {r0, r1}
 8003fc6:	6010      	str	r0, [r2, #0]
 8003fc8:	6051      	str	r1, [r2, #4]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	7213      	strb	r3, [r2, #8]
		  osMessageQueuePut(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8003fce:	4b12      	ldr	r3, [pc, #72]	; (8004018 <Start_bme280+0x2d0>)
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f011 fd9c 	bl	8015b18 <osMessageQueuePut>
  {
 8003fe0:	e714      	b.n	8003e0c <Start_bme280+0xc4>
 8003fe2:	bf00      	nop
 8003fe4:	20009a1c 	.word	0x20009a1c
 8003fe8:	200099dc 	.word	0x200099dc
 8003fec:	08002a25 	.word	0x08002a25
 8003ff0:	08002aad 	.word	0x08002aad
 8003ff4:	08002a95 	.word	0x08002a95
 8003ff8:	2000ac2c 	.word	0x2000ac2c
 8003ffc:	2000ac30 	.word	0x2000ac30
 8004000:	0801dad0 	.word	0x0801dad0
 8004004:	0801dad4 	.word	0x0801dad4
 8004008:	0801dad8 	.word	0x0801dad8
 800400c:	0801dadc 	.word	0x0801dadc
 8004010:	0801dae0 	.word	0x0801dae0
 8004014:	0801dae4 	.word	0x0801dae4
 8004018:	2000e904 	.word	0x2000e904
 800401c:	0801dae8 	.word	0x0801dae8

08004020 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 8004020:	b5b0      	push	{r4, r5, r7, lr}
 8004022:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8004026:	af00      	add	r7, sp, #0
 8004028:	1d3b      	adds	r3, r7, #4
 800402a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 800402c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004030:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f016 f890 	bl	801a15c <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 800403c:	4b48      	ldr	r3, [pc, #288]	; (8004160 <Start_AM2302+0x140>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a47      	ldr	r2, [pc, #284]	; (8004160 <Start_AM2302+0x140>)
 8004042:	f043 0304 	orr.w	r3, r3, #4
 8004046:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004048:	4b45      	ldr	r3, [pc, #276]	; (8004160 <Start_AM2302+0x140>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4a44      	ldr	r2, [pc, #272]	; (8004160 <Start_AM2302+0x140>)
 800404e:	f023 0302 	bic.w	r3, r3, #2
 8004052:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004054:	4b42      	ldr	r3, [pc, #264]	; (8004160 <Start_AM2302+0x140>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a41      	ldr	r2, [pc, #260]	; (8004160 <Start_AM2302+0x140>)
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8004060:	4b3f      	ldr	r3, [pc, #252]	; (8004160 <Start_AM2302+0x140>)
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	4a3e      	ldr	r2, [pc, #248]	; (8004160 <Start_AM2302+0x140>)
 8004066:	f083 0302 	eor.w	r3, r3, #2
 800406a:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 800406c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004070:	f011 fb80 	bl	8015774 <osDelay>

  for(;;)
  {
	  osDelay(3500);			// Measure every 3 seconds
 8004074:	f640 50ac 	movw	r0, #3500	; 0xdac
 8004078:	f011 fb7c 	bl	8015774 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 800407c:	2300      	movs	r3, #0
 800407e:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	int j = 0;   							// Counter bytes
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  	int i = 0;								// Counter bits
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 800408e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004096:	4b32      	ldr	r3, [pc, #200]	; (8004160 <Start_AM2302+0x140>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a31      	ldr	r2, [pc, #196]	; (8004160 <Start_AM2302+0x140>)
 800409c:	f043 0304 	orr.w	r3, r3, #4
 80040a0:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80040a2:	4b2f      	ldr	r3, [pc, #188]	; (8004160 <Start_AM2302+0x140>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <Start_AM2302+0x140>)
 80040a8:	f023 0302 	bic.w	r3, r3, #2
 80040ac:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80040ae:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <Start_AM2302+0x140>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	4a2b      	ldr	r2, [pc, #172]	; (8004160 <Start_AM2302+0x140>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 80040ba:	4b29      	ldr	r3, [pc, #164]	; (8004160 <Start_AM2302+0x140>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4a28      	ldr	r2, [pc, #160]	; (8004160 <Start_AM2302+0x140>)
 80040c0:	f023 0302 	bic.w	r3, r3, #2
 80040c4:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 80040c6:	2012      	movs	r0, #18
 80040c8:	f011 fb54 	bl	8015774 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 80040cc:	4b24      	ldr	r3, [pc, #144]	; (8004160 <Start_AM2302+0x140>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	4a23      	ldr	r2, [pc, #140]	; (8004160 <Start_AM2302+0x140>)
 80040d2:	f083 0302 	eor.w	r3, r3, #2
 80040d6:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 80040d8:	2028      	movs	r0, #40	; 0x28
 80040da:	f7fe fd23 	bl	8002b24 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 80040de:	4b20      	ldr	r3, [pc, #128]	; (8004160 <Start_AM2302+0x140>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1f      	ldr	r2, [pc, #124]	; (8004160 <Start_AM2302+0x140>)
 80040e4:	f023 0304 	bic.w	r3, r3, #4
 80040e8:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 80040ea:	4b1d      	ldr	r3, [pc, #116]	; (8004160 <Start_AM2302+0x140>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	4a1c      	ldr	r2, [pc, #112]	; (8004160 <Start_AM2302+0x140>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 80040f6:	4b1a      	ldr	r3, [pc, #104]	; (8004160 <Start_AM2302+0x140>)
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8004102:	2300      	movs	r3, #0
 8004104:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8004108:	e002      	b.n	8004110 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}

	  	delay_us(80);
 8004110:	2050      	movs	r0, #80	; 0x50
 8004112:	f7fe fd07 	bl	8002b24 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <Start_AM2302+0x140>)
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d103      	bne.n	800412a <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8004122:	2300      	movs	r3, #0
 8004124:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8004128:	e002      	b.n	8004130 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 800412a:	2301      	movs	r3, #1
 800412c:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}
	  	delay_us(80);
 8004130:	2050      	movs	r0, #80	; 0x50
 8004132:	f7fe fcf7 	bl	8002b24 <delay_us>

	  	if(get_data_status == true)
 8004136:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 800413a:	2b00      	cmp	r3, #0
 800413c:	d09a      	beq.n	8004074 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 800413e:	2300      	movs	r3, #0
 8004140:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8004144:	e050      	b.n	80041e8 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 8004146:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800414a:	f1c3 0304 	rsb	r3, r3, #4
 800414e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004152:	2100      	movs	r1, #0
 8004154:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004156:	2300      	movs	r3, #0
 8004158:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800415c:	e038      	b.n	80041d0 <Start_AM2302+0x1b0>
 800415e:	bf00      	nop
 8004160:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8004164:	bf00      	nop
 8004166:	4b94      	ldr	r3, [pc, #592]	; (80043b8 <Start_AM2302+0x398>)
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f9      	beq.n	8004166 <Start_AM2302+0x146>
	  				delay_us(30);
 8004172:	201e      	movs	r0, #30
 8004174:	f7fe fcd6 	bl	8002b24 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8004178:	4b8f      	ldr	r3, [pc, #572]	; (80043b8 <Start_AM2302+0x398>)
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8004184:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004188:	f1c3 0304 	rsb	r3, r3, #4
 800418c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004190:	5cd3      	ldrb	r3, [r2, r3]
 8004192:	b25a      	sxtb	r2, r3
 8004194:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8004198:	f1c3 0307 	rsb	r3, r3, #7
 800419c:	2101      	movs	r1, #1
 800419e:	fa01 f303 	lsl.w	r3, r1, r3
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	4313      	orrs	r3, r2
 80041a6:	b25a      	sxtb	r2, r3
 80041a8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80041ac:	f1c3 0304 	rsb	r3, r3, #4
 80041b0:	b2d1      	uxtb	r1, r2
 80041b2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80041b6:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 80041b8:	bf00      	nop
 80041ba:	4b7f      	ldr	r3, [pc, #508]	; (80043b8 <Start_AM2302+0x398>)
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1f9      	bne.n	80041ba <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 80041c6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80041ca:	3301      	adds	r3, #1
 80041cc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80041d0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80041d4:	2b07      	cmp	r3, #7
 80041d6:	ddc5      	ble.n	8004164 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80041de:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80041e2:	3301      	adds	r3, #1
 80041e4:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80041e8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80041ec:	2b04      	cmp	r3, #4
 80041ee:	ddaa      	ble.n	8004146 <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80041f0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80041f4:	3301      	adds	r3, #1
 80041f6:	881b      	ldrh	r3, [r3, #0]
 80041f8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80041fc:	ee07 3a90 	vmov	s15, r3
 8004200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004204:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800420c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004210:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8004214:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004218:	3301      	adds	r3, #1
 800421a:	881b      	ldrh	r3, [r3, #0]
 800421c:	b21b      	sxth	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	da13      	bge.n	800424a <Start_AM2302+0x22a>
 8004222:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004226:	6818      	ldr	r0, [r3, #0]
 8004228:	f7fc f98e 	bl	8000548 <__aeabi_f2d>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	f7fc fcd8 	bl	8000be8 <__aeabi_d2f>
 8004238:	4603      	mov	r3, r0
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef1 7a67 	vneg.f32	s15, s15
 8004242:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004246:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 800424a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800424e:	3303      	adds	r3, #3
 8004250:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004254:	ee07 3a90 	vmov	s15, r3
 8004258:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800425c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004260:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004264:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004268:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[60] = {0};
 800426c:	f107 0308 	add.w	r3, r7, #8
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	3304      	adds	r3, #4
 8004276:	2238      	movs	r2, #56	; 0x38
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f015 ff6e 	bl	801a15c <memset>
	  		char str_t_and_h_buffer[12] = {0};
 8004280:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	3304      	adds	r3, #4
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004290:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004294:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004298:	2100      	movs	r1, #0
 800429a:	4618      	mov	r0, r3
 800429c:	f015 ff5e 	bl	801a15c <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "     AM2302: \n\r");
 80042a0:	f107 0308 	add.w	r3, r7, #8
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fb ff93 	bl	80001d0 <strlen>
 80042aa:	4603      	mov	r3, r0
 80042ac:	461a      	mov	r2, r3
 80042ae:	f107 0308 	add.w	r3, r7, #8
 80042b2:	4413      	add	r3, r2
 80042b4:	4a41      	ldr	r2, [pc, #260]	; (80043bc <Start_AM2302+0x39c>)
 80042b6:	461c      	mov	r4, r3
 80042b8:	4615      	mov	r5, r2
 80042ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042bc:	6020      	str	r0, [r4, #0]
 80042be:	6061      	str	r1, [r4, #4]
 80042c0:	60a2      	str	r2, [r4, #8]
 80042c2:	60e3      	str	r3, [r4, #12]
	  		strcat(str_t_and_h, "T: ");
 80042c4:	f107 0308 	add.w	r3, r7, #8
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7fb ff81 	bl	80001d0 <strlen>
 80042ce:	4603      	mov	r3, r0
 80042d0:	461a      	mov	r2, r3
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	4413      	add	r3, r2
 80042d8:	4a39      	ldr	r2, [pc, #228]	; (80043c0 <Start_AM2302+0x3a0>)
 80042da:	6810      	ldr	r0, [r2, #0]
 80042dc:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 80042de:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	f7fc f930 	bl	8000548 <__aeabi_f2d>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80042f0:	4934      	ldr	r1, [pc, #208]	; (80043c4 <Start_AM2302+0x3a4>)
 80042f2:	f016 fcc9 	bl	801ac88 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80042f6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80042fa:	f107 0308 	add.w	r3, r7, #8
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f016 fd24 	bl	801ad4e <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	4618      	mov	r0, r3
 800430c:	f7fb ff60 	bl	80001d0 <strlen>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	f107 0308 	add.w	r3, r7, #8
 8004318:	4413      	add	r3, r2
 800431a:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <Start_AM2302+0x3a8>)
 800431c:	6810      	ldr	r0, [r2, #0]
 800431e:	6018      	str	r0, [r3, #0]
 8004320:	7912      	ldrb	r2, [r2, #4]
 8004322:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 8004324:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004328:	220c      	movs	r2, #12
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f015 ff15 	bl	801a15c <memset>

	  		strcat(str_t_and_h, "H: ");
 8004332:	f107 0308 	add.w	r3, r7, #8
 8004336:	4618      	mov	r0, r3
 8004338:	f7fb ff4a 	bl	80001d0 <strlen>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4413      	add	r3, r2
 8004346:	4a21      	ldr	r2, [pc, #132]	; (80043cc <Start_AM2302+0x3ac>)
 8004348:	6810      	ldr	r0, [r2, #0]
 800434a:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 800434c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	f7fc f8f9 	bl	8000548 <__aeabi_f2d>
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800435e:	4919      	ldr	r1, [pc, #100]	; (80043c4 <Start_AM2302+0x3a4>)
 8004360:	f016 fc92 	bl	801ac88 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004364:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004368:	f107 0308 	add.w	r3, r7, #8
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f016 fced 	bl	801ad4e <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004374:	f107 0308 	add.w	r3, r7, #8
 8004378:	4618      	mov	r0, r3
 800437a:	f7fb ff29 	bl	80001d0 <strlen>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	f107 0308 	add.w	r3, r7, #8
 8004386:	4413      	add	r3, r2
 8004388:	4a11      	ldr	r2, [pc, #68]	; (80043d0 <Start_AM2302+0x3b0>)
 800438a:	6810      	ldr	r0, [r2, #0]
 800438c:	6018      	str	r0, [r3, #0]
 800438e:	7912      	ldrb	r2, [r2, #4]
 8004390:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 8004392:	f107 0208 	add.w	r2, r7, #8
 8004396:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f016 fcd6 	bl	801ad4e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80043a2:	4b0c      	ldr	r3, [pc, #48]	; (80043d4 <Start_AM2302+0x3b4>)
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80043aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043ae:	2200      	movs	r2, #0
 80043b0:	f011 fbb2 	bl	8015b18 <osMessageQueuePut>
  {
 80043b4:	e65e      	b.n	8004074 <Start_AM2302+0x54>
 80043b6:	bf00      	nop
 80043b8:	40020800 	.word	0x40020800
 80043bc:	0801daf4 	.word	0x0801daf4
 80043c0:	0801db04 	.word	0x0801db04
 80043c4:	0801db08 	.word	0x0801db08
 80043c8:	0801db0c 	.word	0x0801db0c
 80043cc:	0801db14 	.word	0x0801db14
 80043d0:	0801db18 	.word	0x0801db18
 80043d4:	2000b768 	.word	0x2000b768

080043d8 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	osDelay(1000);
 80043e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043e4:	f011 f9c6 	bl	8015774 <osDelay>
	Mount_SD("/");
 80043e8:	4823      	ldr	r0, [pc, #140]	; (8004478 <Start_SD_CARD+0xa0>)
 80043ea:	f7fd fc67 	bl	8001cbc <Mount_SD>

	Create_File("test_data_1.txt");
 80043ee:	4823      	ldr	r0, [pc, #140]	; (800447c <Start_SD_CARD+0xa4>)
 80043f0:	f7fd fcaa 	bl	8001d48 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 80043f4:	4922      	ldr	r1, [pc, #136]	; (8004480 <Start_SD_CARD+0xa8>)
 80043f6:	4821      	ldr	r0, [pc, #132]	; (800447c <Start_SD_CARD+0xa4>)
 80043f8:	f7fd fd3c 	bl	8001e74 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 80043fc:	4821      	ldr	r0, [pc, #132]	; (8004484 <Start_SD_CARD+0xac>)
 80043fe:	f7fd fdf9 	bl	8001ff4 <Create_Dir>
	Create_Dir("test_folder_2");
 8004402:	4821      	ldr	r0, [pc, #132]	; (8004488 <Start_SD_CARD+0xb0>)
 8004404:	f7fd fdf6 	bl	8001ff4 <Create_Dir>
	Create_Dir("test_folder_3");
 8004408:	4820      	ldr	r0, [pc, #128]	; (800448c <Start_SD_CARD+0xb4>)
 800440a:	f7fd fdf3 	bl	8001ff4 <Create_Dir>

	Unmount_SD("/");
 800440e:	481a      	ldr	r0, [pc, #104]	; (8004478 <Start_SD_CARD+0xa0>)
 8004410:	f7fd fc78 	bl	8001d04 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 8004414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004418:	f011 f9ac 	bl	8015774 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 800441c:	2201      	movs	r2, #1
 800441e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004422:	481b      	ldr	r0, [pc, #108]	; (8004490 <Start_SD_CARD+0xb8>)
 8004424:	f005 f940 	bl	80096a8 <HAL_GPIO_WritePin>

	  Mount_SD("/");
 8004428:	4813      	ldr	r0, [pc, #76]	; (8004478 <Start_SD_CARD+0xa0>)
 800442a:	f7fd fc47 	bl	8001cbc <Mount_SD>

	  char data[10] = {0};
 800442e:	2300      	movs	r3, #0
 8004430:	60fb      	str	r3, [r7, #12]
 8004432:	f107 0310 	add.w	r3, r7, #16
 8004436:	2200      	movs	r2, #0
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 800443c:	4b15      	ldr	r3, [pc, #84]	; (8004494 <Start_SD_CARD+0xbc>)
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	f107 030c 	add.w	r3, r7, #12
 8004444:	4914      	ldr	r1, [pc, #80]	; (8004498 <Start_SD_CARD+0xc0>)
 8004446:	4618      	mov	r0, r3
 8004448:	f016 fc1e 	bl	801ac88 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 800444c:	f107 030c 	add.w	r3, r7, #12
 8004450:	4619      	mov	r1, r3
 8004452:	480a      	ldr	r0, [pc, #40]	; (800447c <Start_SD_CARD+0xa4>)
 8004454:	f7fd fd0e 	bl	8001e74 <Update_File>
	  i++;
 8004458:	4b0e      	ldr	r3, [pc, #56]	; (8004494 <Start_SD_CARD+0xbc>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3301      	adds	r3, #1
 800445e:	4a0d      	ldr	r2, [pc, #52]	; (8004494 <Start_SD_CARD+0xbc>)
 8004460:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 8004462:	4805      	ldr	r0, [pc, #20]	; (8004478 <Start_SD_CARD+0xa0>)
 8004464:	f7fd fc4e 	bl	8001d04 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 8004468:	2200      	movs	r2, #0
 800446a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800446e:	4808      	ldr	r0, [pc, #32]	; (8004490 <Start_SD_CARD+0xb8>)
 8004470:	f005 f91a 	bl	80096a8 <HAL_GPIO_WritePin>
  {
 8004474:	e7ce      	b.n	8004414 <Start_SD_CARD+0x3c>
 8004476:	bf00      	nop
 8004478:	0801db20 	.word	0x0801db20
 800447c:	0801db24 	.word	0x0801db24
 8004480:	0801db34 	.word	0x0801db34
 8004484:	0801db48 	.word	0x0801db48
 8004488:	0801db58 	.word	0x0801db58
 800448c:	0801db68 	.word	0x0801db68
 8004490:	40020c00 	.word	0x40020c00
 8004494:	2000284c 	.word	0x2000284c
 8004498:	0801db78 	.word	0x0801db78

0800449c <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b0ac      	sub	sp, #176	; 0xb0
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
	MS5611QUEUE ms6050_temperature_and_pressure_meg;
	ADCQUEUE adc_meg;


	// Init LCD
	TFT9341_ini(240, 320);
 80044a4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80044a8:	20f0      	movs	r0, #240	; 0xf0
 80044aa:	f7fc ff3d 	bl	8001328 <TFT9341_ini>
	TFT9341_SetRotation(3);
 80044ae:	2003      	movs	r0, #3
 80044b0:	f7fd fbb0 	bl	8001c14 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 80044b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80044b8:	f7fd f996 	bl	80017e8 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 80044bc:	201f      	movs	r0, #31
 80044be:	f7fd f9a3 	bl	8001808 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 80044c2:	201f      	movs	r0, #31
 80044c4:	f7fd f8fe 	bl	80016c4 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "1.RTC ");
 80044c8:	4a47      	ldr	r2, [pc, #284]	; (80045e8 <Start_LCD+0x14c>)
 80044ca:	211e      	movs	r1, #30
 80044cc:	2002      	movs	r0, #2
 80044ce:	f7fd fb7d 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,45, "2.AM2302");
 80044d2:	4a46      	ldr	r2, [pc, #280]	; (80045ec <Start_LCD+0x150>)
 80044d4:	212d      	movs	r1, #45	; 0x2d
 80044d6:	2002      	movs	r0, #2
 80044d8:	f7fd fb78 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,60, "3.BME280");
 80044dc:	4a44      	ldr	r2, [pc, #272]	; (80045f0 <Start_LCD+0x154>)
 80044de:	213c      	movs	r1, #60	; 0x3c
 80044e0:	2002      	movs	r0, #2
 80044e2:	f7fd fb73 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,75, "4.MPU6050a");
 80044e6:	4a43      	ldr	r2, [pc, #268]	; (80045f4 <Start_LCD+0x158>)
 80044e8:	214b      	movs	r1, #75	; 0x4b
 80044ea:	2002      	movs	r0, #2
 80044ec:	f7fd fb6e 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,90, "5.MPU6050g");
 80044f0:	4a41      	ldr	r2, [pc, #260]	; (80045f8 <Start_LCD+0x15c>)
 80044f2:	215a      	movs	r1, #90	; 0x5a
 80044f4:	2002      	movs	r0, #2
 80044f6:	f7fd fb69 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,105, "6.MPU6050t");
 80044fa:	4a40      	ldr	r2, [pc, #256]	; (80045fc <Start_LCD+0x160>)
 80044fc:	2169      	movs	r1, #105	; 0x69
 80044fe:	2002      	movs	r0, #2
 8004500:	f7fd fb64 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,120, "7.L883");
 8004504:	4a3e      	ldr	r2, [pc, #248]	; (8004600 <Start_LCD+0x164>)
 8004506:	2178      	movs	r1, #120	; 0x78
 8004508:	2002      	movs	r0, #2
 800450a:	f7fd fb5f 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,135, "8.MS5611");
 800450e:	4a3d      	ldr	r2, [pc, #244]	; (8004604 <Start_LCD+0x168>)
 8004510:	2187      	movs	r1, #135	; 0x87
 8004512:	2002      	movs	r0, #2
 8004514:	f7fd fb5a 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,150, "8.APDS9960");
 8004518:	4a3b      	ldr	r2, [pc, #236]	; (8004608 <Start_LCD+0x16c>)
 800451a:	2196      	movs	r1, #150	; 0x96
 800451c:	2002      	movs	r0, #2
 800451e:	f7fd fb55 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,165, "9.ADC");
 8004522:	4a3a      	ldr	r2, [pc, #232]	; (800460c <Start_LCD+0x170>)
 8004524:	21a5      	movs	r1, #165	; 0xa5
 8004526:	2002      	movs	r0, #2
 8004528:	f7fd fb50 	bl	8001bcc <TFT9341_String_DMA>

	for(;;)
	{
		// Waiting on BME280 data in queue
		osMessageQueueGet(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 800452c:	4b38      	ldr	r3, [pc, #224]	; (8004610 <Start_LCD+0x174>)
 800452e:	6818      	ldr	r0, [r3, #0]
 8004530:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8004534:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004538:	2200      	movs	r2, #0
 800453a:	f011 fb4d 	bl	8015bd8 <osMessageQueueGet>
		TFT9341_String(120, 60, bme280_meg.bme280_temperature_and_humidity);
 800453e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004542:	461a      	mov	r2, r3
 8004544:	213c      	movs	r1, #60	; 0x3c
 8004546:	2078      	movs	r0, #120	; 0x78
 8004548:	f7fd fb1c 	bl	8001b84 <TFT9341_String>

		// Waiting on MPU6050 Acc data in queue
		osMessageQueueGet(MPU6050_Acc_QueueHandle, &mpu6050_acc_meg, 0, osWaitForever);
 800454c:	4b31      	ldr	r3, [pc, #196]	; (8004614 <Start_LCD+0x178>)
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004558:	2200      	movs	r2, #0
 800455a:	f011 fb3d 	bl	8015bd8 <osMessageQueueGet>
		TFT9341_String_DMA(120,75, mpu6050_acc_meg.mpu6050_acc_x_y_z);
 800455e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004562:	461a      	mov	r2, r3
 8004564:	214b      	movs	r1, #75	; 0x4b
 8004566:	2078      	movs	r0, #120	; 0x78
 8004568:	f7fd fb30 	bl	8001bcc <TFT9341_String_DMA>

		// Waiting on MPU6050 Gyro data in queue
		osMessageQueueGet(MPU6050_Gyro_QueueHandle, &mpu6050_gyro_meg, 0, osWaitForever);   // ??????
 800456c:	4b2a      	ldr	r3, [pc, #168]	; (8004618 <Start_LCD+0x17c>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004578:	2200      	movs	r2, #0
 800457a:	f011 fb2d 	bl	8015bd8 <osMessageQueueGet>
		TFT9341_String_DMA(120,90, mpu6050_gyro_meg.mpu6050_gyro_x_y_z);
 800457e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004582:	461a      	mov	r2, r3
 8004584:	215a      	movs	r1, #90	; 0x5a
 8004586:	2078      	movs	r0, #120	; 0x78
 8004588:	f7fd fb20 	bl	8001bcc <TFT9341_String_DMA>
		if(mpu6050_gyro_meg.mpu6050_gyro_x_y_z[2] != '\0')
 800458c:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8004590:	2b00      	cmp	r3, #0
 8004592:	d003      	beq.n	800459c <Start_LCD+0x100>
		{
			int gggggg =  9999;
 8004594:	f242 730f 	movw	r3, #9999	; 0x270f
 8004598:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		// Waiting on MPU6050 Temperature data in queue
		osMessageQueueGet(MPU6050_Temp_QueueHandle, &mpu6050_temperature_meg, 0, osWaitForever);
 800459c:	4b1f      	ldr	r3, [pc, #124]	; (800461c <Start_LCD+0x180>)
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80045a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a8:	2200      	movs	r2, #0
 80045aa:	f011 fb15 	bl	8015bd8 <osMessageQueueGet>
		TFT9341_String_DMA(120,105, mpu6050_temperature_meg.mpu6050_temp);
 80045ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045b2:	461a      	mov	r2, r3
 80045b4:	2169      	movs	r1, #105	; 0x69
 80045b6:	2078      	movs	r0, #120	; 0x78
 80045b8:	f7fd fb08 	bl	8001bcc <TFT9341_String_DMA>

		// Waiting on MS5611 temperature and pressure data in queue
		osMessageQueueGet(MS5611_mag_QueueHandle, &ms6050_temperature_and_pressure_meg, 0, osWaitForever);
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <Start_LCD+0x184>)
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80045c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045c8:	2200      	movs	r2, #0
 80045ca:	f011 fb05 	bl	8015bd8 <osMessageQueueGet>
		TFT9341_String_DMA(120,135, ms6050_temperature_and_pressure_meg.MS5611_mag_x_y_z_temp_and_pressure);
 80045ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045d2:	461a      	mov	r2, r3
 80045d4:	2187      	movs	r1, #135	; 0x87
 80045d6:	2078      	movs	r0, #120	; 0x78
 80045d8:	f7fd faf8 	bl	8001bcc <TFT9341_String_DMA>
		// Waiting on MS5611 temperature and pressure data in queue

//		osMessageQueueGet(ADC_QueueHandle, &adc_meg, 0, osWaitForever);
//		TFT9341_String_DMA(120,165, adc_meg.ADC_value_and_voltage);

		osDelay(1000);
 80045dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045e0:	f011 f8c8 	bl	8015774 <osDelay>
		osMessageQueueGet(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 80045e4:	e7a2      	b.n	800452c <Start_LCD+0x90>
 80045e6:	bf00      	nop
 80045e8:	0801db7c 	.word	0x0801db7c
 80045ec:	0801db84 	.word	0x0801db84
 80045f0:	0801db90 	.word	0x0801db90
 80045f4:	0801db9c 	.word	0x0801db9c
 80045f8:	0801dba8 	.word	0x0801dba8
 80045fc:	0801dbb4 	.word	0x0801dbb4
 8004600:	0801dbc0 	.word	0x0801dbc0
 8004604:	0801dbc8 	.word	0x0801dbc8
 8004608:	0801dbd4 	.word	0x0801dbd4
 800460c:	0801dbe0 	.word	0x0801dbe0
 8004610:	2000e904 	.word	0x2000e904
 8004614:	20009914 	.word	0x20009914
 8004618:	200116bc 	.word	0x200116bc
 800461c:	200116c4 	.word	0x200116c4
 8004620:	200098c0 	.word	0x200098c0

08004624 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8004624:	b5b0      	push	{r4, r5, r7, lr}
 8004626:	b0b2      	sub	sp, #200	; 0xc8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 800462c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004630:	2264      	movs	r2, #100	; 0x64
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f015 fd91 	bl	801a15c <memset>
	char buffer[50] = {0};
 800463a:	2300      	movs	r3, #0
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004642:	222e      	movs	r2, #46	; 0x2e
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f015 fd88 	bl	801a15c <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 800464c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004650:	2264      	movs	r2, #100	; 0x64
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f015 fd81 	bl	801a15c <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 800465a:	f7fc fdcf 	bl	80011fc <TP_Touchpad_Pressed>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	f040 8091 	bne.w	8004788 <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 8004666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800466a:	4618      	mov	r0, r3
 800466c:	f7fb fdb0 	bl	80001d0 <strlen>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004678:	4413      	add	r3, r2
 800467a:	495e      	ldr	r1, [pc, #376]	; (80047f4 <Start_LCD_touchscreen+0x1d0>)
 800467c:	461a      	mov	r2, r3
 800467e:	460b      	mov	r3, r1
 8004680:	cb03      	ldmia	r3!, {r0, r1}
 8004682:	6010      	str	r0, [r2, #0]
 8004684:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 8004686:	2300      	movs	r3, #0
 8004688:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 800468a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800468e:	4618      	mov	r0, r3
 8004690:	f7fc fcde 	bl	8001050 <TP_Read_Coordinates>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 800469a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800469e:	2b01      	cmp	r3, #1
 80046a0:	f040 808c 	bne.w	80047bc <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 80046a4:	2300      	movs	r3, #0
 80046a6:	623b      	str	r3, [r7, #32]
 80046a8:	2300      	movs	r3, #0
 80046aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 80046ac:	2300      	movs	r3, #0
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	2300      	movs	r3, #0
 80046b2:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 80046b4:	2300      	movs	r3, #0
 80046b6:	60bb      	str	r3, [r7, #8]
 80046b8:	f107 030c 	add.w	r3, r7, #12
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	605a      	str	r2, [r3, #4]
 80046c2:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 80046c6:	f107 0320 	add.w	r3, r7, #32
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fb fd80 	bl	80001d0 <strlen>
 80046d0:	4603      	mov	r3, r0
 80046d2:	461a      	mov	r2, r3
 80046d4:	f107 0320 	add.w	r3, r7, #32
 80046d8:	4413      	add	r3, r2
 80046da:	4a47      	ldr	r2, [pc, #284]	; (80047f8 <Start_LCD_touchscreen+0x1d4>)
 80046dc:	6810      	ldr	r0, [r2, #0]
 80046de:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 80046e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80046e2:	4618      	mov	r0, r3
 80046e4:	f107 0320 	add.w	r3, r7, #32
 80046e8:	220a      	movs	r2, #10
 80046ea:	4619      	mov	r1, r3
 80046ec:	f015 fd12 	bl	801a114 <itoa>
			  strcat(buff_x_coordinates, " ");
 80046f0:	f107 0320 	add.w	r3, r7, #32
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fb fd6b 	bl	80001d0 <strlen>
 80046fa:	4603      	mov	r3, r0
 80046fc:	461a      	mov	r2, r3
 80046fe:	f107 0320 	add.w	r3, r7, #32
 8004702:	4413      	add	r3, r2
 8004704:	493d      	ldr	r1, [pc, #244]	; (80047fc <Start_LCD_touchscreen+0x1d8>)
 8004706:	461a      	mov	r2, r3
 8004708:	460b      	mov	r3, r1
 800470a:	881b      	ldrh	r3, [r3, #0]
 800470c:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 800470e:	f107 0318 	add.w	r3, r7, #24
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb fd5c 	bl	80001d0 <strlen>
 8004718:	4603      	mov	r3, r0
 800471a:	461a      	mov	r2, r3
 800471c:	f107 0318 	add.w	r3, r7, #24
 8004720:	4413      	add	r3, r2
 8004722:	4a37      	ldr	r2, [pc, #220]	; (8004800 <Start_LCD_touchscreen+0x1dc>)
 8004724:	6810      	ldr	r0, [r2, #0]
 8004726:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 8004728:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800472a:	4618      	mov	r0, r3
 800472c:	f107 0318 	add.w	r3, r7, #24
 8004730:	220a      	movs	r2, #10
 8004732:	4619      	mov	r1, r3
 8004734:	f015 fcee 	bl	801a114 <itoa>
			  strcat(buff_y_coordinates, " ");
 8004738:	f107 0318 	add.w	r3, r7, #24
 800473c:	4618      	mov	r0, r3
 800473e:	f7fb fd47 	bl	80001d0 <strlen>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	f107 0318 	add.w	r3, r7, #24
 800474a:	4413      	add	r3, r2
 800474c:	492b      	ldr	r1, [pc, #172]	; (80047fc <Start_LCD_touchscreen+0x1d8>)
 800474e:	461a      	mov	r2, r3
 8004750:	460b      	mov	r3, r1
 8004752:	881b      	ldrh	r3, [r3, #0]
 8004754:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 8004756:	f107 0220 	add.w	r2, r7, #32
 800475a:	f107 0308 	add.w	r3, r7, #8
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f016 faf4 	bl	801ad4e <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 8004766:	f107 0218 	add.w	r2, r7, #24
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	4611      	mov	r1, r2
 8004770:	4618      	mov	r0, r3
 8004772:	f016 faec 	bl	801ad4e <strcat>
			  strcat(buffer, buff_coordinates);
 8004776:	f107 0208 	add.w	r2, r7, #8
 800477a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f016 fae4 	bl	801ad4e <strcat>
 8004786:	e019      	b.n	80047bc <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 8004788:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800478c:	4618      	mov	r0, r3
 800478e:	f7fb fd1f 	bl	80001d0 <strlen>
 8004792:	4603      	mov	r3, r0
 8004794:	461a      	mov	r2, r3
 8004796:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800479a:	4413      	add	r3, r2
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <Start_LCD_touchscreen+0x1e0>)
 800479e:	461d      	mov	r5, r3
 80047a0:	4614      	mov	r4, r2
 80047a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a4:	6028      	str	r0, [r5, #0]
 80047a6:	6069      	str	r1, [r5, #4]
 80047a8:	60aa      	str	r2, [r5, #8]
 80047aa:	60eb      	str	r3, [r5, #12]
 80047ac:	cc03      	ldmia	r4!, {r0, r1}
 80047ae:	6128      	str	r0, [r5, #16]
 80047b0:	6169      	str	r1, [r5, #20]
 80047b2:	8823      	ldrh	r3, [r4, #0]
 80047b4:	78a2      	ldrb	r2, [r4, #2]
 80047b6:	832b      	strh	r3, [r5, #24]
 80047b8:	4613      	mov	r3, r2
 80047ba:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 80047bc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80047c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f016 fac1 	bl	801ad4e <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 80047cc:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <Start_LCD_touchscreen+0x1e4>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80047d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047d8:	2200      	movs	r2, #0
 80047da:	f011 f99d 	bl	8015b18 <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 80047de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047e2:	2232      	movs	r2, #50	; 0x32
 80047e4:	2100      	movs	r1, #0
 80047e6:	4618      	mov	r0, r3
 80047e8:	f015 fcb8 	bl	801a15c <memset>

	  osDelay(200);
 80047ec:	20c8      	movs	r0, #200	; 0xc8
 80047ee:	f010 ffc1 	bl	8015774 <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 80047f2:	e72b      	b.n	800464c <Start_LCD_touchscreen+0x28>
 80047f4:	0801dbe8 	.word	0x0801dbe8
 80047f8:	0801dbf0 	.word	0x0801dbf0
 80047fc:	0801dbf4 	.word	0x0801dbf4
 8004800:	0801dbf8 	.word	0x0801dbf8
 8004804:	0801dbfc 	.word	0x0801dbfc
 8004808:	20010a14 	.word	0x20010a14

0800480c <Start_MPU6050>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_MPU6050 */
void Start_MPU6050(void *argument)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b0c0      	sub	sp, #256	; 0x100
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  MPU6050TEMPQUEUE msg_temp;

	//char mpu6050_gyro_x_y_z[30];


  char mpu6050_acc[20] = {0};
 8004814:	2300      	movs	r3, #0
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
 8004818:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	609a      	str	r2, [r3, #8]
 8004824:	60da      	str	r2, [r3, #12]
  char mpu6050_gyro[20] = {0};
 8004826:	2300      	movs	r3, #0
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
 800482a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	60da      	str	r2, [r3, #12]
  char mpu6050_temp[10] = {0};
 8004838:	2300      	movs	r3, #0
 800483a:	61bb      	str	r3, [r7, #24]
 800483c:	f107 031c 	add.w	r3, r7, #28
 8004840:	2200      	movs	r2, #0
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	809a      	strh	r2, [r3, #4]

  osDelay(500);
 8004846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800484a:	f010 ff93 	bl	8015774 <osDelay>

  MPU6050_Init(&hi2c2);
 800484e:	48d4      	ldr	r0, [pc, #848]	; (8004ba0 <Start_MPU6050+0x394>)
 8004850:	f002 fb94 	bl	8006f7c <MPU6050_Init>
  osDelay(500);
 8004854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004858:	f010 ff8c 	bl	8015774 <osDelay>

  //uint8_t pissition = 0;

  for(;;)
  {
	  int i = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  uint8_t start_pissition = 1;
 8004862:	2301      	movs	r3, #1
 8004864:	f887 30fa 	strb.w	r3, [r7, #250]	; 0xfa
	  char mpu6050_buf[10] = {0};
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	f107 0310 	add.w	r3, r7, #16
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	809a      	strh	r2, [r3, #4]
	  memset(msg_acc.mpu6050_acc_x_y_z, 0, sizeof(msg_acc.mpu6050_acc_x_y_z));
 8004876:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800487a:	221e      	movs	r2, #30
 800487c:	2100      	movs	r1, #0
 800487e:	4618      	mov	r0, r3
 8004880:	f015 fc6c 	bl	801a15c <memset>
	  memset(msg_gyro.mpu6050_gyro_x_y_z, 0, sizeof(msg_gyro.mpu6050_gyro_x_y_z));
 8004884:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004888:	221e      	movs	r2, #30
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f015 fc65 	bl	801a15c <memset>
	  memset(msg_temp.mpu6050_temp, 0, sizeof(msg_temp.mpu6050_temp));
 8004892:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004896:	220a      	movs	r2, #10
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f015 fc5e 	bl	801a15c <memset>

	  MPU6050_Read_All(&hi2c2, &MPU6050);					// Writr data in MPU6050 struct
 80048a0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80048a4:	4619      	mov	r1, r3
 80048a6:	48be      	ldr	r0, [pc, #760]	; (8004ba0 <Start_MPU6050+0x394>)
 80048a8:	f002 fbc2 	bl	8007030 <MPU6050_Read_All>

	  ////////////////// ACCELERATION
	  // X
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Ax);
 80048ac:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80048b0:	f107 000c 	add.w	r0, r7, #12
 80048b4:	49bb      	ldr	r1, [pc, #748]	; (8004ba4 <Start_MPU6050+0x398>)
 80048b6:	f016 f9e7 	bl	801ac88 <siprintf>
	  strcat(mpu6050_acc, "X");
 80048ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fb fc86 	bl	80001d0 <strlen>
 80048c4:	4603      	mov	r3, r0
 80048c6:	461a      	mov	r2, r3
 80048c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80048cc:	4413      	add	r3, r2
 80048ce:	49b6      	ldr	r1, [pc, #728]	; (8004ba8 <Start_MPU6050+0x39c>)
 80048d0:	461a      	mov	r2, r3
 80048d2:	460b      	mov	r3, r1
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	8013      	strh	r3, [r2, #0]
	  // Read only first digits
	  i = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  uint8_t j = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  do{
		  i++;
 80048e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e8:	3301      	adds	r3, #1
 80048ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_acc[i] != '\0');
 80048ee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80048f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048f6:	4413      	add	r3, r2
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f2      	bne.n	80048e4 <Start_MPU6050+0xd8>

	  do{
		  mpu6050_acc[i] = mpu6050_buf[j];
 80048fe:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004902:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004906:	4413      	add	r3, r2
 8004908:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 800490c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004914:	4413      	add	r3, r2
 8004916:	460a      	mov	r2, r1
 8004918:	701a      	strb	r2, [r3, #0]
		  i++;
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800491e:	3301      	adds	r3, #1
 8004920:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  j++;
 8004924:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004928:	3301      	adds	r3, #1
 800492a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j <= 3);										// Read only first digits
 800492e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004932:	2b03      	cmp	r3, #3
 8004934:	d9e3      	bls.n	80048fe <Start_MPU6050+0xf2>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004936:	f107 030c 	add.w	r3, r7, #12
 800493a:	220a      	movs	r2, #10
 800493c:	2100      	movs	r1, #0
 800493e:	4618      	mov	r0, r3
 8004940:	f015 fc0c 	bl	801a15c <memset>

	  // Y
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Ay);
 8004944:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004948:	f107 000c 	add.w	r0, r7, #12
 800494c:	4995      	ldr	r1, [pc, #596]	; (8004ba4 <Start_MPU6050+0x398>)
 800494e:	f016 f99b 	bl	801ac88 <siprintf>
	  strcat(mpu6050_acc, " Y");
 8004952:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004956:	4618      	mov	r0, r3
 8004958:	f7fb fc3a 	bl	80001d0 <strlen>
 800495c:	4603      	mov	r3, r0
 800495e:	461a      	mov	r2, r3
 8004960:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004964:	4413      	add	r3, r2
 8004966:	4a91      	ldr	r2, [pc, #580]	; (8004bac <Start_MPU6050+0x3a0>)
 8004968:	8811      	ldrh	r1, [r2, #0]
 800496a:	7892      	ldrb	r2, [r2, #2]
 800496c:	8019      	strh	r1, [r3, #0]
 800496e:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  do{
		  i++;
 8004976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497a:	3301      	adds	r3, #1
 800497c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_acc[i] != '\0');
 8004980:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004988:	4413      	add	r3, r2
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f2      	bne.n	8004976 <Start_MPU6050+0x16a>

	  j = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  do{
		  mpu6050_acc[i] = mpu6050_buf[j];
 8004996:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800499a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800499e:	4413      	add	r3, r2
 80049a0:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 80049a4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80049a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ac:	4413      	add	r3, r2
 80049ae:	460a      	mov	r2, r1
 80049b0:	701a      	strb	r2, [r3, #0]
		  i++;
 80049b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b6:	3301      	adds	r3, #1
 80049b8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  j++;
 80049bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80049c0:	3301      	adds	r3, #1
 80049c2:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j<=3);											// Read only first digits
 80049c6:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d9e3      	bls.n	8004996 <Start_MPU6050+0x18a>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 80049ce:	f107 030c 	add.w	r3, r7, #12
 80049d2:	220a      	movs	r2, #10
 80049d4:	2100      	movs	r1, #0
 80049d6:	4618      	mov	r0, r3
 80049d8:	f015 fbc0 	bl	801a15c <memset>

	  // Z
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Az);
 80049dc:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 80049e0:	f107 000c 	add.w	r0, r7, #12
 80049e4:	496f      	ldr	r1, [pc, #444]	; (8004ba4 <Start_MPU6050+0x398>)
 80049e6:	f016 f94f 	bl	801ac88 <siprintf>
	  strcat(mpu6050_acc, " Z");
 80049ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fb fbee 	bl	80001d0 <strlen>
 80049f4:	4603      	mov	r3, r0
 80049f6:	461a      	mov	r2, r3
 80049f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80049fc:	4413      	add	r3, r2
 80049fe:	4a6c      	ldr	r2, [pc, #432]	; (8004bb0 <Start_MPU6050+0x3a4>)
 8004a00:	8811      	ldrh	r1, [r2, #0]
 8004a02:	7892      	ldrb	r2, [r2, #2]
 8004a04:	8019      	strh	r1, [r3, #0]
 8004a06:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  do{
		  i++;
 8004a0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a12:	3301      	adds	r3, #1
 8004a14:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_acc[i] != '\0');
 8004a18:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a20:	4413      	add	r3, r2
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1f2      	bne.n	8004a0e <Start_MPU6050+0x202>

	  j = 0;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  do{
	  	mpu6050_acc[i] = mpu6050_buf[j];
 8004a2e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004a32:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004a36:	4413      	add	r3, r2
 8004a38:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 8004a3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a44:	4413      	add	r3, r2
 8004a46:	460a      	mov	r2, r1
 8004a48:	701a      	strb	r2, [r3, #0]
	  	i++;
 8004a4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a4e:	3301      	adds	r3, #1
 8004a50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  	j++;
 8004a54:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004a58:	3301      	adds	r3, #1
 8004a5a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j<=3);											// Read only first digits
 8004a5e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d9e3      	bls.n	8004a2e <Start_MPU6050+0x222>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004a66:	f107 030c 	add.w	r3, r7, #12
 8004a6a:	220a      	movs	r2, #10
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f015 fb74 	bl	801a15c <memset>

	  // Write in the acc queue
	  strcat(msg_acc.mpu6050_acc_x_y_z, mpu6050_acc);
 8004a74:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004a78:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f016 f965 	bl	801ad4e <strcat>
	  memset(mpu6050_acc, 0, sizeof(mpu6050_acc));
 8004a84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004a88:	2214      	movs	r2, #20
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f015 fb65 	bl	801a15c <memset>
	  osMessageQueuePut(MPU6050_Acc_QueueHandle, &msg_acc, 0, osWaitForever);
 8004a92:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <Start_MPU6050+0x3a8>)
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004a9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f011 f83a 	bl	8015b18 <osMessageQueuePut>

	  ////////////////// GYRO
	  memset(mpu6050_gyro, 0, sizeof(mpu6050_gyro));
 8004aa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004aa8:	2214      	movs	r2, #20
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f015 fb55 	bl	801a15c <memset>
	  // X
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Gx);
 8004ab2:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004ab6:	f107 000c 	add.w	r0, r7, #12
 8004aba:	493a      	ldr	r1, [pc, #232]	; (8004ba4 <Start_MPU6050+0x398>)
 8004abc:	f016 f8e4 	bl	801ac88 <siprintf>
	  strcat(mpu6050_gyro, "X");
 8004ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fb fb83 	bl	80001d0 <strlen>
 8004aca:	4603      	mov	r3, r0
 8004acc:	461a      	mov	r2, r3
 8004ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ad2:	4413      	add	r3, r2
 8004ad4:	4934      	ldr	r1, [pc, #208]	; (8004ba8 <Start_MPU6050+0x39c>)
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	460b      	mov	r3, r1
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	8013      	strh	r3, [r2, #0]
	  // Read only first digits
	  i = 0;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  j = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  do{
		  i++;
 8004aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aee:	3301      	adds	r3, #1
 8004af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_gyro[i] != '\0');
 8004af4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afc:	4413      	add	r3, r2
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f2      	bne.n	8004aea <Start_MPU6050+0x2de>

	  do{
		 mpu6050_gyro[i] = mpu6050_buf[j];
 8004b04:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004b08:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 8004b12:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	4413      	add	r3, r2
 8004b1c:	460a      	mov	r2, r1
 8004b1e:	701a      	strb	r2, [r3, #0]
	  	 i++;
 8004b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b24:	3301      	adds	r3, #1
 8004b26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  	 j++;
 8004b2a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004b2e:	3301      	adds	r3, #1
 8004b30:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j <= 3);										// Read only first digits
 8004b34:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004b38:	2b03      	cmp	r3, #3
 8004b3a:	d9e3      	bls.n	8004b04 <Start_MPU6050+0x2f8>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	220a      	movs	r2, #10
 8004b42:	2100      	movs	r1, #0
 8004b44:	4618      	mov	r0, r3
 8004b46:	f015 fb09 	bl	801a15c <memset>

	  // Y
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Gy);
 8004b4a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8004b4e:	f107 000c 	add.w	r0, r7, #12
 8004b52:	4914      	ldr	r1, [pc, #80]	; (8004ba4 <Start_MPU6050+0x398>)
 8004b54:	f016 f898 	bl	801ac88 <siprintf>
	  strcat(mpu6050_gyro, " Y");
 8004b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fb fb37 	bl	80001d0 <strlen>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b6a:	4413      	add	r3, r2
 8004b6c:	4a0f      	ldr	r2, [pc, #60]	; (8004bac <Start_MPU6050+0x3a0>)
 8004b6e:	8811      	ldrh	r1, [r2, #0]
 8004b70:	7892      	ldrb	r2, [r2, #2]
 8004b72:	8019      	strh	r1, [r3, #0]
 8004b74:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  do{
		  i++;
 8004b7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b80:	3301      	adds	r3, #1
 8004b82:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_gyro[i] != '\0');
 8004b86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b8e:	4413      	add	r3, r2
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f2      	bne.n	8004b7c <Start_MPU6050+0x370>

	  j = 0;
 8004b96:	2300      	movs	r3, #0
 8004b98:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
 8004b9c:	e00c      	b.n	8004bb8 <Start_MPU6050+0x3ac>
 8004b9e:	bf00      	nop
 8004ba0:	2000ac90 	.word	0x2000ac90
 8004ba4:	0801db08 	.word	0x0801db08
 8004ba8:	0801dc18 	.word	0x0801dc18
 8004bac:	0801dc1c 	.word	0x0801dc1c
 8004bb0:	0801dc20 	.word	0x0801dc20
 8004bb4:	20009914 	.word	0x20009914
	  do{
		  mpu6050_gyro[i] = mpu6050_buf[j];
 8004bb8:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004bbc:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 8004bc6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bce:	4413      	add	r3, r2
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	701a      	strb	r2, [r3, #0]
		  i++;
 8004bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
		  j++;
 8004bde:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004be2:	3301      	adds	r3, #1
 8004be4:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j<=3);											// Read only first digits
 8004be8:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	d9e3      	bls.n	8004bb8 <Start_MPU6050+0x3ac>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004bf0:	f107 030c 	add.w	r3, r7, #12
 8004bf4:	220a      	movs	r2, #10
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f015 faaf 	bl	801a15c <memset>

	  // Z
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Gz);
 8004bfe:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004c02:	f107 000c 	add.w	r0, r7, #12
 8004c06:	496f      	ldr	r1, [pc, #444]	; (8004dc4 <Start_MPU6050+0x5b8>)
 8004c08:	f016 f83e 	bl	801ac88 <siprintf>
	  strcat(mpu6050_gyro, " Z");
 8004c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fb fadd 	bl	80001d0 <strlen>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c1e:	4413      	add	r3, r2
 8004c20:	4a69      	ldr	r2, [pc, #420]	; (8004dc8 <Start_MPU6050+0x5bc>)
 8004c22:	8811      	ldrh	r1, [r2, #0]
 8004c24:	7892      	ldrb	r2, [r2, #2]
 8004c26:	8019      	strh	r1, [r3, #0]
 8004c28:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  do{
		  i++;
 8004c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c34:	3301      	adds	r3, #1
 8004c36:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_gyro[i] != '\0');
 8004c3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c42:	4413      	add	r3, r2
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f2      	bne.n	8004c30 <Start_MPU6050+0x424>

	  j = 0;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  do{
		  mpu6050_gyro[i] = mpu6050_buf[j];
 8004c50:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004c54:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004c58:	4413      	add	r3, r2
 8004c5a:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 8004c5e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c66:	4413      	add	r3, r2
 8004c68:	460a      	mov	r2, r1
 8004c6a:	701a      	strb	r2, [r3, #0]
		  i++;
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c70:	3301      	adds	r3, #1
 8004c72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  	  j++;
 8004c76:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j<=3);											// Read only first digits
 8004c80:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d9e3      	bls.n	8004c50 <Start_MPU6050+0x444>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004c88:	f107 030c 	add.w	r3, r7, #12
 8004c8c:	220a      	movs	r2, #10
 8004c8e:	2100      	movs	r1, #0
 8004c90:	4618      	mov	r0, r3
 8004c92:	f015 fa63 	bl	801a15c <memset>


		if(mpu6050_gyro[2] != '\0')
 8004c96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <Start_MPU6050+0x49a>
		{
			int gggggg =  9999;
 8004c9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ca2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
		}

	  // Write in the acc queue
	  strcat(msg_gyro.mpu6050_gyro_x_y_z, mpu6050_gyro);
 8004ca6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004caa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f016 f84c 	bl	801ad4e <strcat>
	  memset(mpu6050_gyro, 0, sizeof(mpu6050_gyro));
 8004cb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cba:	2214      	movs	r2, #20
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f015 fa4c 	bl	801a15c <memset>


	  if(msg_gyro.mpu6050_gyro_x_y_z[2] != '\0')
 8004cc4:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <Start_MPU6050+0x4c8>
	  {
	  			int gggggg =  9999;
 8004ccc:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cd0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	  }
	  osMessageQueuePut(MPU6050_Gyro_QueueHandle, &msg_gyro, 0, osWaitForever);
 8004cd4:	4b3d      	ldr	r3, [pc, #244]	; (8004dcc <Start_MPU6050+0x5c0>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f010 ff19 	bl	8015b18 <osMessageQueuePut>

	  ////////////////// TEMPERATURE
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Temperature);
 8004ce6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fb fc2c 	bl	8000548 <__aeabi_f2d>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	f107 000c 	add.w	r0, r7, #12
 8004cf8:	4932      	ldr	r1, [pc, #200]	; (8004dc4 <Start_MPU6050+0x5b8>)
 8004cfa:	f015 ffc5 	bl	801ac88 <siprintf>
	  strcat(mpu6050_temp, "T ");
 8004cfe:	f107 0318 	add.w	r3, r7, #24
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fb fa64 	bl	80001d0 <strlen>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f107 0318 	add.w	r3, r7, #24
 8004d10:	4413      	add	r3, r2
 8004d12:	4a2f      	ldr	r2, [pc, #188]	; (8004dd0 <Start_MPU6050+0x5c4>)
 8004d14:	8811      	ldrh	r1, [r2, #0]
 8004d16:	7892      	ldrb	r2, [r2, #2]
 8004d18:	8019      	strh	r1, [r3, #0]
 8004d1a:	709a      	strb	r2, [r3, #2]
	  // Read only first digits
	  i = 0;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  do{
	 	i++;
 8004d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d26:	3301      	adds	r3, #1
 8004d28:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	  }while(mpu6050_temp[i] != '\0');
 8004d2c:	f107 0218 	add.w	r2, r7, #24
 8004d30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d34:	4413      	add	r3, r2
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f2      	bne.n	8004d22 <Start_MPU6050+0x516>

	  j = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  do{
		  mpu6050_temp[i] = mpu6050_buf[j];
 8004d42:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004d46:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8004d4a:	4413      	add	r3, r2
 8004d4c:	f813 1cf4 	ldrb.w	r1, [r3, #-244]
 8004d50:	f107 0218 	add.w	r2, r7, #24
 8004d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d58:	4413      	add	r3, r2
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	701a      	strb	r2, [r3, #0]
	 	  i++;
 8004d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d62:	3301      	adds	r3, #1
 8004d64:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	 	  j++;
 8004d68:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	  }while(j <= 4);										// Read only first digits
 8004d72:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d9e3      	bls.n	8004d42 <Start_MPU6050+0x536>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004d7a:	f107 030c 	add.w	r3, r7, #12
 8004d7e:	220a      	movs	r2, #10
 8004d80:	2100      	movs	r1, #0
 8004d82:	4618      	mov	r0, r3
 8004d84:	f015 f9ea 	bl	801a15c <memset>

	  // Write in the acc queue
	  strcat(msg_temp.mpu6050_temp, mpu6050_temp);
 8004d88:	f107 0218 	add.w	r2, r7, #24
 8004d8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f015 ffdb 	bl	801ad4e <strcat>
	  memset(mpu6050_temp, 0, sizeof(mpu6050_temp));
 8004d98:	f107 0318 	add.w	r3, r7, #24
 8004d9c:	220a      	movs	r2, #10
 8004d9e:	2100      	movs	r1, #0
 8004da0:	4618      	mov	r0, r3
 8004da2:	f015 f9db 	bl	801a15c <memset>
	  osMessageQueuePut(MPU6050_Temp_QueueHandle, &msg_temp, 0, osWaitForever);
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <Start_MPU6050+0x5c8>)
 8004da8:	6818      	ldr	r0, [r3, #0]
 8004daa:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004db2:	2200      	movs	r2, #0
 8004db4:	f010 feb0 	bl	8015b18 <osMessageQueuePut>

      osDelay(1000);
 8004db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004dbc:	f010 fcda 	bl	8015774 <osDelay>
  {
 8004dc0:	e54c      	b.n	800485c <Start_MPU6050+0x50>
 8004dc2:	bf00      	nop
 8004dc4:	0801db08 	.word	0x0801db08
 8004dc8:	0801dc20 	.word	0x0801dc20
 8004dcc:	200116bc 	.word	0x200116bc
 8004dd0:	0801dc24 	.word	0x0801dc24
 8004dd4:	200116c4 	.word	0x200116c4

08004dd8 <Start_MS5611>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_MS5611 */
void Start_MS5611(void *argument)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b09e      	sub	sp, #120	; 0x78
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_MS5611 */
  /* Infinite loop */
	MS5611QUEUE msg_mag;

	osDelay(500);
 8004de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004de4:	f010 fcc6 	bl	8015774 <osDelay>
	for(;;)
	{
//		ms5611_init();
		//osDelay(100);

		double temperature = 0;
 8004de8:	f04f 0200 	mov.w	r2, #0
 8004dec:	f04f 0300 	mov.w	r3, #0
 8004df0:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
		double pressure = 0;
 8004df4:	f04f 0200 	mov.w	r2, #0
 8004df8:	f04f 0300 	mov.w	r3, #0
 8004dfc:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
		char ms5611_buf[30] = {0};
 8004e00:	2300      	movs	r3, #0
 8004e02:	623b      	str	r3, [r7, #32]
 8004e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	609a      	str	r2, [r3, #8]
 8004e10:	60da      	str	r2, [r3, #12]
 8004e12:	611a      	str	r2, [r3, #16]
 8004e14:	615a      	str	r2, [r3, #20]
 8004e16:	831a      	strh	r2, [r3, #24]
		char buff[20] = {0};
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	f107 0310 	add.w	r3, r7, #16
 8004e20:	2200      	movs	r2, #0
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	609a      	str	r2, [r3, #8]
 8004e28:	60da      	str	r2, [r3, #12]
		uint8_t i = 0;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		memset(msg_mag.MS5611_mag_x_y_z_temp_and_pressure, 0, sizeof(msg_mag.MS5611_mag_x_y_z_temp_and_pressure));
 8004e30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004e34:	221e      	movs	r2, #30
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f015 f98f 	bl	801a15c <memset>

		// Measure T and P from MS5611 sensor
		ms5611_init();
 8004e3e:	f002 fc7d 	bl	800773c <ms5611_init>
		ms5611_update();
 8004e42:	f002 fd19 	bl	8007878 <ms5611_update>

		strcat(ms5611_buf, "T:");
 8004e46:	f107 0320 	add.w	r3, r7, #32
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f7fb f9c0 	bl	80001d0 <strlen>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	f107 0320 	add.w	r3, r7, #32
 8004e58:	4413      	add	r3, r2
 8004e5a:	4a6f      	ldr	r2, [pc, #444]	; (8005018 <Start_MS5611+0x240>)
 8004e5c:	8811      	ldrh	r1, [r2, #0]
 8004e5e:	7892      	ldrb	r2, [r2, #2]
 8004e60:	8019      	strh	r1, [r3, #0]
 8004e62:	709a      	strb	r2, [r3, #2]

		// Get data
		temperature = ms5611_get_temperature();
 8004e64:	f002 fd10 	bl	8007888 <ms5611_get_temperature>
 8004e68:	ed87 0b1a 	vstr	d0, [r7, #104]	; 0x68
		pressure = ms5611_get_pressure();
 8004e6c:	f002 fd8c 	bl	8007988 <ms5611_get_pressure>
 8004e70:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
		pressure = (pressure*100) / 133.3;		// Convert
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	4b68      	ldr	r3, [pc, #416]	; (800501c <Start_MS5611+0x244>)
 8004e7a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004e7e:	f7fb fbbb 	bl	80005f8 <__aeabi_dmul>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4610      	mov	r0, r2
 8004e88:	4619      	mov	r1, r3
 8004e8a:	a361      	add	r3, pc, #388	; (adr r3, 8005010 <Start_MS5611+0x238>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb fcdc 	bl	800084c <__aeabi_ddiv>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

		// Add temperature data in string
		sprintf(buff, "%0.1f", temperature);
 8004e9c:	f107 000c 	add.w	r0, r7, #12
 8004ea0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004ea4:	495e      	ldr	r1, [pc, #376]	; (8005020 <Start_MS5611+0x248>)
 8004ea6:	f015 feef 	bl	801ac88 <siprintf>
		i = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		do{
			i++;
 8004eb0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}while(ms5611_buf[i] != '\0');
 8004eba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004ebe:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f1      	bne.n	8004eb0 <Start_MS5611+0xd8>

		uint8_t j = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		do
		{
			ms5611_buf[i] = buff[j];
 8004ed2:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004ed6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004eda:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004ede:	440a      	add	r2, r1
 8004ee0:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8004ee4:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004ee8:	440b      	add	r3, r1
 8004eea:	f803 2c58 	strb.w	r2, [r3, #-88]
			i++;
 8004eee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			j++;
 8004ef8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004efc:	3301      	adds	r3, #1
 8004efe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		}while(j <= 5);
 8004f02:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d9e3      	bls.n	8004ed2 <Start_MS5611+0xfa>
		memset(buff, 0, sizeof(buff));
 8004f0a:	f107 030c 	add.w	r3, r7, #12
 8004f0e:	2214      	movs	r2, #20
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f015 f922 	bl	801a15c <memset>
		//strcat(ms5611_buf, " C");

		// Add pressure data in string
		strcat(ms5611_buf, " P:");
 8004f18:	f107 0320 	add.w	r3, r7, #32
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fb f957 	bl	80001d0 <strlen>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	f107 0320 	add.w	r3, r7, #32
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a3d      	ldr	r2, [pc, #244]	; (8005024 <Start_MS5611+0x24c>)
 8004f2e:	6810      	ldr	r0, [r2, #0]
 8004f30:	6018      	str	r0, [r3, #0]
		sprintf(buff, "%.0f", pressure);
 8004f32:	f107 000c 	add.w	r0, r7, #12
 8004f36:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004f3a:	493b      	ldr	r1, [pc, #236]	; (8005028 <Start_MS5611+0x250>)
 8004f3c:	f015 fea4 	bl	801ac88 <siprintf>
		i = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		do{
			i++;
 8004f46:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}while(ms5611_buf[i] != '\0');
 8004f50:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f54:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004f58:	4413      	add	r3, r2
 8004f5a:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f1      	bne.n	8004f46 <Start_MS5611+0x16e>

		j = 0;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		do
		{
			ms5611_buf[i] = buff[j];
 8004f68:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8004f6c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f70:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004f74:	440a      	add	r2, r1
 8004f76:	f812 2c6c 	ldrb.w	r2, [r2, #-108]
 8004f7a:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8004f7e:	440b      	add	r3, r1
 8004f80:	f803 2c58 	strb.w	r2, [r3, #-88]
			i++;
 8004f84:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8004f88:	3301      	adds	r3, #1
 8004f8a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			j++;
 8004f8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004f92:	3301      	adds	r3, #1
 8004f94:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
		}while(buff[j] != '\0');				// Read all digits
 8004f98:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8004f9c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f813 3c6c 	ldrb.w	r3, [r3, #-108]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1de      	bne.n	8004f68 <Start_MS5611+0x190>
		memset(buff, 0, sizeof(buff));
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	2214      	movs	r2, #20
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f015 f8d2 	bl	801a15c <memset>
		strcat(ms5611_buf, " mm  ");
 8004fb8:	f107 0320 	add.w	r3, r7, #32
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7fb f907 	bl	80001d0 <strlen>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	461a      	mov	r2, r3
 8004fc6:	f107 0320 	add.w	r3, r7, #32
 8004fca:	4413      	add	r3, r2
 8004fcc:	4a17      	ldr	r2, [pc, #92]	; (800502c <Start_MS5611+0x254>)
 8004fce:	6810      	ldr	r0, [r2, #0]
 8004fd0:	6018      	str	r0, [r3, #0]
 8004fd2:	8892      	ldrh	r2, [r2, #4]
 8004fd4:	809a      	strh	r2, [r3, #4]

		// Write in the queue
		strcat(msg_mag.MS5611_mag_x_y_z_temp_and_pressure, ms5611_buf);
 8004fd6:	f107 0220 	add.w	r2, r7, #32
 8004fda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f015 feb4 	bl	801ad4e <strcat>
		memset(ms5611_buf, 0, sizeof(ms5611_buf));
 8004fe6:	f107 0320 	add.w	r3, r7, #32
 8004fea:	221e      	movs	r2, #30
 8004fec:	2100      	movs	r1, #0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f015 f8b4 	bl	801a15c <memset>
		osMessageQueuePut(MS5611_mag_QueueHandle, &msg_mag, 0, osWaitForever);
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <Start_MS5611+0x258>)
 8004ff6:	6818      	ldr	r0, [r3, #0]
 8004ff8:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005000:	2200      	movs	r2, #0
 8005002:	f010 fd89 	bl	8015b18 <osMessageQueuePut>

		osDelay(500);
 8005006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800500a:	f010 fbb3 	bl	8015774 <osDelay>
	{
 800500e:	e6eb      	b.n	8004de8 <Start_MS5611+0x10>
 8005010:	9999999a 	.word	0x9999999a
 8005014:	4060a999 	.word	0x4060a999
 8005018:	0801dc28 	.word	0x0801dc28
 800501c:	40590000 	.word	0x40590000
 8005020:	0801dc2c 	.word	0x0801dc2c
 8005024:	0801dc34 	.word	0x0801dc34
 8005028:	0801dc38 	.word	0x0801dc38
 800502c:	0801dc40 	.word	0x0801dc40
 8005030:	200098c0 	.word	0x200098c0
 8005034:	00000000 	.word	0x00000000

08005038 <Start_ADC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ADC */
void Start_ADC(void *argument)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b098      	sub	sp, #96	; 0x60
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	//osDelay(2000);

	ADCQUEUE msg;

	HAL_ADC_Start(&hadc1);
 8005040:	4849      	ldr	r0, [pc, #292]	; (8005168 <Start_ADC+0x130>)
 8005042:	f002 ff51 	bl	8007ee8 <HAL_ADC_Start>

  for(;;)
  {
	  char adc_buff[30] = {0};
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	f107 031c 	add.w	r3, r7, #28
 800504e:	2200      	movs	r2, #0
 8005050:	601a      	str	r2, [r3, #0]
 8005052:	605a      	str	r2, [r3, #4]
 8005054:	609a      	str	r2, [r3, #8]
 8005056:	60da      	str	r2, [r3, #12]
 8005058:	611a      	str	r2, [r3, #16]
 800505a:	615a      	str	r2, [r3, #20]
 800505c:	831a      	strh	r2, [r3, #24]
	  char adc_buff_2[10] = {0};
 800505e:	2300      	movs	r3, #0
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	f107 0310 	add.w	r3, r7, #16
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	809a      	strh	r2, [r3, #4]
	  memset(msg.ADC_value_and_voltage, 0, sizeof(msg.ADC_value_and_voltage));
 800506c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005070:	221e      	movs	r2, #30
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f015 f871 	bl	801a15c <memset>

	  HAL_ADC_Start(&hadc1);
 800507a:	483b      	ldr	r0, [pc, #236]	; (8005168 <Start_ADC+0x130>)
 800507c:	f002 ff34 	bl	8007ee8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8005080:	2164      	movs	r1, #100	; 0x64
 8005082:	4839      	ldr	r0, [pc, #228]	; (8005168 <Start_ADC+0x130>)
 8005084:	f003 f835 	bl	80080f2 <HAL_ADC_PollForConversion>
	  uint32_t adc_data = HAL_ADC_GetValue(&hadc1);
 8005088:	4837      	ldr	r0, [pc, #220]	; (8005168 <Start_ADC+0x130>)
 800508a:	f003 f8bd 	bl	8008208 <HAL_ADC_GetValue>
 800508e:	65f8      	str	r0, [r7, #92]	; 0x5c
	  // Convert in voltage
	  float adc_voltage = adc_data*(3.3/4096);
 8005090:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8005092:	f7fb fa37 	bl	8000504 <__aeabi_ui2d>
 8005096:	a332      	add	r3, pc, #200	; (adr r3, 8005160 <Start_ADC+0x128>)
 8005098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509c:	f7fb faac 	bl	80005f8 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4610      	mov	r0, r2
 80050a6:	4619      	mov	r1, r3
 80050a8:	f7fb fd9e 	bl	8000be8 <__aeabi_d2f>
 80050ac:	4603      	mov	r3, r0
 80050ae:	65bb      	str	r3, [r7, #88]	; 0x58
	  HAL_ADC_Stop(&hadc1);
 80050b0:	482d      	ldr	r0, [pc, #180]	; (8005168 <Start_ADC+0x130>)
 80050b2:	f002 ffeb 	bl	800808c <HAL_ADC_Stop>

	  sprintf(adc_buff,"%d",adc_data);
 80050b6:	f107 0318 	add.w	r3, r7, #24
 80050ba:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050bc:	492b      	ldr	r1, [pc, #172]	; (800516c <Start_ADC+0x134>)
 80050be:	4618      	mov	r0, r3
 80050c0:	f015 fde2 	bl	801ac88 <siprintf>
	  strcat(adc_buff, "  ");
 80050c4:	f107 0318 	add.w	r3, r7, #24
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7fb f881 	bl	80001d0 <strlen>
 80050ce:	4603      	mov	r3, r0
 80050d0:	461a      	mov	r2, r3
 80050d2:	f107 0318 	add.w	r3, r7, #24
 80050d6:	4413      	add	r3, r2
 80050d8:	4a25      	ldr	r2, [pc, #148]	; (8005170 <Start_ADC+0x138>)
 80050da:	8811      	ldrh	r1, [r2, #0]
 80050dc:	7892      	ldrb	r2, [r2, #2]
 80050de:	8019      	strh	r1, [r3, #0]
 80050e0:	709a      	strb	r2, [r3, #2]
	  sprintf(adc_buff_2,"%.4f",adc_voltage);
 80050e2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80050e4:	f7fb fa30 	bl	8000548 <__aeabi_f2d>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	f107 000c 	add.w	r0, r7, #12
 80050f0:	4920      	ldr	r1, [pc, #128]	; (8005174 <Start_ADC+0x13c>)
 80050f2:	f015 fdc9 	bl	801ac88 <siprintf>
	  strcat(adc_buff, adc_buff_2);
 80050f6:	f107 020c 	add.w	r2, r7, #12
 80050fa:	f107 0318 	add.w	r3, r7, #24
 80050fe:	4611      	mov	r1, r2
 8005100:	4618      	mov	r0, r3
 8005102:	f015 fe24 	bl	801ad4e <strcat>
	  strcat(adc_buff, " V");
 8005106:	f107 0318 	add.w	r3, r7, #24
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb f860 	bl	80001d0 <strlen>
 8005110:	4603      	mov	r3, r0
 8005112:	461a      	mov	r2, r3
 8005114:	f107 0318 	add.w	r3, r7, #24
 8005118:	4413      	add	r3, r2
 800511a:	4a17      	ldr	r2, [pc, #92]	; (8005178 <Start_ADC+0x140>)
 800511c:	8811      	ldrh	r1, [r2, #0]
 800511e:	7892      	ldrb	r2, [r2, #2]
 8005120:	8019      	strh	r1, [r3, #0]
 8005122:	709a      	strb	r2, [r3, #2]

	  // Write in the queue
	  strcat(msg.ADC_value_and_voltage, adc_buff);
 8005124:	f107 0218 	add.w	r2, r7, #24
 8005128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800512c:	4611      	mov	r1, r2
 800512e:	4618      	mov	r0, r3
 8005130:	f015 fe0d 	bl	801ad4e <strcat>
	  memset(adc_buff, 0, sizeof(adc_buff));
 8005134:	f107 0318 	add.w	r3, r7, #24
 8005138:	221e      	movs	r2, #30
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f015 f80d 	bl	801a15c <memset>
	  memset(adc_buff_2, 0, sizeof(adc_buff_2));
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	220a      	movs	r2, #10
 8005148:	2100      	movs	r1, #0
 800514a:	4618      	mov	r0, r3
 800514c:	f015 f806 	bl	801a15c <memset>
	  //osMessageQueuePut(ADCHandle , &msg, 0, osWaitForever);

	  osDelay(1000);
 8005150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005154:	f010 fb0e 	bl	8015774 <osDelay>
  {
 8005158:	e775      	b.n	8005046 <Start_ADC+0xe>
 800515a:	bf00      	nop
 800515c:	f3af 8000 	nop.w
 8005160:	66666666 	.word	0x66666666
 8005164:	3f4a6666 	.word	0x3f4a6666
 8005168:	2000e908 	.word	0x2000e908
 800516c:	0801dad4 	.word	0x0801dad4
 8005170:	0801dc48 	.word	0x0801dc48
 8005174:	0801dc4c 	.word	0x0801dc4c
 8005178:	0801dc54 	.word	0x0801dc54

0800517c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b082      	sub	sp, #8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a20      	ldr	r2, [pc, #128]	; (800520c <HAL_TIM_PeriodElapsedCallback+0x90>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10c      	bne.n	80051a8 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 800518e:	4b20      	ldr	r3, [pc, #128]	; (8005210 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8005196:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	3b01      	subs	r3, #1
 800519c:	4a1c      	ldr	r2, [pc, #112]	; (8005210 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	e002      	b.n	80051a8 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 80051a2:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
	{
		//HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a19      	ldr	r2, [pc, #100]	; (8005214 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d104      	bne.n	80051bc <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 80051b2:	4b19      	ldr	r3, [pc, #100]	; (8005218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3301      	adds	r3, #1
 80051b8:	4a17      	ldr	r2, [pc, #92]	; (8005218 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80051ba:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a16      	ldr	r2, [pc, #88]	; (800521c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 80051c6:	f002 fe07 	bl	8007dd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d117      	bne.n	8005204 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		if(Timer1 > 0)
 80051d4:	4b12      	ldr	r3, [pc, #72]	; (8005220 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_TIM_PeriodElapsedCallback+0x70>
		    Timer1--;
 80051de:	4b10      	ldr	r3, [pc, #64]	; (8005220 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80051ea:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 80051ec:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d006      	beq.n	8005204 <HAL_TIM_PeriodElapsedCallback+0x88>
		    Timer2--;
 80051f6:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	4b08      	ldr	r3, [pc, #32]	; (8005224 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005202:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40014400 	.word	0x40014400
 8005210:	20002844 	.word	0x20002844
 8005214:	40000400 	.word	0x40000400
 8005218:	20011658 	.word	0x20011658
 800521c:	40002000 	.word	0x40002000
 8005220:	20012684 	.word	0x20012684
 8005224:	200116c8 	.word	0x200116c8

08005228 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800522c:	b672      	cpsid	i
}
 800522e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005230:	e7fe      	b.n	8005230 <Error_Handler+0x8>
	...

08005234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	4b12      	ldr	r3, [pc, #72]	; (8005288 <HAL_MspInit+0x54>)
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	4a11      	ldr	r2, [pc, #68]	; (8005288 <HAL_MspInit+0x54>)
 8005244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005248:	6453      	str	r3, [r2, #68]	; 0x44
 800524a:	4b0f      	ldr	r3, [pc, #60]	; (8005288 <HAL_MspInit+0x54>)
 800524c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005256:	2300      	movs	r3, #0
 8005258:	603b      	str	r3, [r7, #0]
 800525a:	4b0b      	ldr	r3, [pc, #44]	; (8005288 <HAL_MspInit+0x54>)
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_MspInit+0x54>)
 8005260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005264:	6413      	str	r3, [r2, #64]	; 0x40
 8005266:	4b08      	ldr	r3, [pc, #32]	; (8005288 <HAL_MspInit+0x54>)
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005272:	2200      	movs	r2, #0
 8005274:	210f      	movs	r1, #15
 8005276:	f06f 0001 	mvn.w	r0, #1
 800527a:	f003 facd 	bl	8008818 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40023800 	.word	0x40023800

0800528c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	; 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 0314 	add.w	r3, r7, #20
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a17      	ldr	r2, [pc, #92]	; (8005308 <HAL_ADC_MspInit+0x7c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d127      	bne.n	80052fe <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_ADC_MspInit+0x80>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	4a15      	ldr	r2, [pc, #84]	; (800530c <HAL_ADC_MspInit+0x80>)
 80052b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052bc:	6453      	str	r3, [r2, #68]	; 0x44
 80052be:	4b13      	ldr	r3, [pc, #76]	; (800530c <HAL_ADC_MspInit+0x80>)
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ca:	2300      	movs	r3, #0
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	4b0f      	ldr	r3, [pc, #60]	; (800530c <HAL_ADC_MspInit+0x80>)
 80052d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d2:	4a0e      	ldr	r2, [pc, #56]	; (800530c <HAL_ADC_MspInit+0x80>)
 80052d4:	f043 0302 	orr.w	r3, r3, #2
 80052d8:	6313      	str	r3, [r2, #48]	; 0x30
 80052da:	4b0c      	ldr	r3, [pc, #48]	; (800530c <HAL_ADC_MspInit+0x80>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80052e6:	2302      	movs	r3, #2
 80052e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052ea:	2303      	movs	r3, #3
 80052ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	4619      	mov	r1, r3
 80052f8:	4805      	ldr	r0, [pc, #20]	; (8005310 <HAL_ADC_MspInit+0x84>)
 80052fa:	f003 ff25 	bl	8009148 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80052fe:	bf00      	nop
 8005300:	3728      	adds	r7, #40	; 0x28
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	40012000 	.word	0x40012000
 800530c:	40023800 	.word	0x40023800
 8005310:	40020400 	.word	0x40020400

08005314 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b08c      	sub	sp, #48	; 0x30
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531c:	f107 031c 	add.w	r3, r7, #28
 8005320:	2200      	movs	r2, #0
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	605a      	str	r2, [r3, #4]
 8005326:	609a      	str	r2, [r3, #8]
 8005328:	60da      	str	r2, [r3, #12]
 800532a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a42      	ldr	r2, [pc, #264]	; (800543c <HAL_I2C_MspInit+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d12d      	bne.n	8005392 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	4b41      	ldr	r3, [pc, #260]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4a40      	ldr	r2, [pc, #256]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	6313      	str	r3, [r2, #48]	; 0x30
 8005346:	4b3e      	ldr	r3, [pc, #248]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005352:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005358:	2312      	movs	r3, #18
 800535a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535c:	2300      	movs	r3, #0
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005360:	2303      	movs	r3, #3
 8005362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005364:	2304      	movs	r3, #4
 8005366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005368:	f107 031c 	add.w	r3, r7, #28
 800536c:	4619      	mov	r1, r3
 800536e:	4835      	ldr	r0, [pc, #212]	; (8005444 <HAL_I2C_MspInit+0x130>)
 8005370:	f003 feea 	bl	8009148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	4b31      	ldr	r3, [pc, #196]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 800537a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537c:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 800537e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005382:	6413      	str	r3, [r2, #64]	; 0x40
 8005384:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 8005386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8005390:	e050      	b.n	8005434 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2c      	ldr	r2, [pc, #176]	; (8005448 <HAL_I2C_MspInit+0x134>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d14b      	bne.n	8005434 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800539c:	2300      	movs	r3, #0
 800539e:	613b      	str	r3, [r7, #16]
 80053a0:	4b27      	ldr	r3, [pc, #156]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	4a26      	ldr	r2, [pc, #152]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6313      	str	r3, [r2, #48]	; 0x30
 80053ac:	4b24      	ldr	r3, [pc, #144]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 80053ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	613b      	str	r3, [r7, #16]
 80053b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
 80053bc:	4b20      	ldr	r3, [pc, #128]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 80053be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6313      	str	r3, [r2, #48]	; 0x30
 80053c8:	4b1d      	ldr	r3, [pc, #116]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053da:	2312      	movs	r3, #18
 80053dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053e2:	2303      	movs	r3, #3
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80053e6:	2304      	movs	r3, #4
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053ea:	f107 031c 	add.w	r3, r7, #28
 80053ee:	4619      	mov	r1, r3
 80053f0:	4816      	ldr	r0, [pc, #88]	; (800544c <HAL_I2C_MspInit+0x138>)
 80053f2:	f003 fea9 	bl	8009148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80053f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80053fc:	2312      	movs	r3, #18
 80053fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005400:	2300      	movs	r3, #0
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005404:	2303      	movs	r3, #3
 8005406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005408:	2304      	movs	r3, #4
 800540a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800540c:	f107 031c 	add.w	r3, r7, #28
 8005410:	4619      	mov	r1, r3
 8005412:	480f      	ldr	r0, [pc, #60]	; (8005450 <HAL_I2C_MspInit+0x13c>)
 8005414:	f003 fe98 	bl	8009148 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	4b08      	ldr	r3, [pc, #32]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 800541e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005420:	4a07      	ldr	r2, [pc, #28]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 8005422:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005426:	6413      	str	r3, [r2, #64]	; 0x40
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_I2C_MspInit+0x12c>)
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005430:	60bb      	str	r3, [r7, #8]
 8005432:	68bb      	ldr	r3, [r7, #8]
}
 8005434:	bf00      	nop
 8005436:	3730      	adds	r7, #48	; 0x30
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}
 800543c:	40005800 	.word	0x40005800
 8005440:	40023800 	.word	0x40023800
 8005444:	40020400 	.word	0x40020400
 8005448:	40005c00 	.word	0x40005c00
 800544c:	40020800 	.word	0x40020800
 8005450:	40020000 	.word	0x40020000

08005454 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a0b      	ldr	r2, [pc, #44]	; (8005490 <HAL_RNG_MspInit+0x3c>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d10d      	bne.n	8005482 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8005466:	2300      	movs	r3, #0
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <HAL_RNG_MspInit+0x40>)
 800546c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800546e:	4a09      	ldr	r2, [pc, #36]	; (8005494 <HAL_RNG_MspInit+0x40>)
 8005470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005474:	6353      	str	r3, [r2, #52]	; 0x34
 8005476:	4b07      	ldr	r3, [pc, #28]	; (8005494 <HAL_RNG_MspInit+0x40>)
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	50060800 	.word	0x50060800
 8005494:	40023800 	.word	0x40023800

08005498 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054a0:	f107 0308 	add.w	r3, r7, #8
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	605a      	str	r2, [r3, #4]
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a0c      	ldr	r2, [pc, #48]	; (80054e4 <HAL_RTC_MspInit+0x4c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d111      	bne.n	80054dc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80054b8:	2302      	movs	r3, #2
 80054ba:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80054bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054c0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054c2:	f107 0308 	add.w	r3, r7, #8
 80054c6:	4618      	mov	r0, r3
 80054c8:	f007 fb50 	bl	800cb6c <HAL_RCCEx_PeriphCLKConfig>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80054d2:	f7ff fea9 	bl	8005228 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80054d6:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <HAL_RTC_MspInit+0x50>)
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80054dc:	bf00      	nop
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40002800 	.word	0x40002800
 80054e8:	42470e3c 	.word	0x42470e3c

080054ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08c      	sub	sp, #48	; 0x30
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 031c 	add.w	r3, r7, #28
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a5d      	ldr	r2, [pc, #372]	; (8005680 <HAL_SPI_MspInit+0x194>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d12c      	bne.n	8005568 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	4b5c      	ldr	r3, [pc, #368]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	4a5b      	ldr	r2, [pc, #364]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005518:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800551c:	6453      	str	r3, [r2, #68]	; 0x44
 800551e:	4b59      	ldr	r3, [pc, #356]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	4b55      	ldr	r3, [pc, #340]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005532:	4a54      	ldr	r2, [pc, #336]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005534:	f043 0301 	orr.w	r3, r3, #1
 8005538:	6313      	str	r3, [r2, #48]	; 0x30
 800553a:	4b52      	ldr	r3, [pc, #328]	; (8005684 <HAL_SPI_MspInit+0x198>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8005546:	23e0      	movs	r3, #224	; 0xe0
 8005548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800554a:	2302      	movs	r3, #2
 800554c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	2300      	movs	r3, #0
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005552:	2302      	movs	r3, #2
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005556:	2305      	movs	r3, #5
 8005558:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555a:	f107 031c 	add.w	r3, r7, #28
 800555e:	4619      	mov	r1, r3
 8005560:	4849      	ldr	r0, [pc, #292]	; (8005688 <HAL_SPI_MspInit+0x19c>)
 8005562:	f003 fdf1 	bl	8009148 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005566:	e086      	b.n	8005676 <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a47      	ldr	r2, [pc, #284]	; (800568c <HAL_SPI_MspInit+0x1a0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	f040 8081 	bne.w	8005676 <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	4b42      	ldr	r3, [pc, #264]	; (8005684 <HAL_SPI_MspInit+0x198>)
 800557a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557c:	4a41      	ldr	r2, [pc, #260]	; (8005684 <HAL_SPI_MspInit+0x198>)
 800557e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005582:	6413      	str	r3, [r2, #64]	; 0x40
 8005584:	4b3f      	ldr	r3, [pc, #252]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <HAL_SPI_MspInit+0x198>)
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	4a3a      	ldr	r2, [pc, #232]	; (8005684 <HAL_SPI_MspInit+0x198>)
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	6313      	str	r3, [r2, #48]	; 0x30
 80055a0:	4b38      	ldr	r3, [pc, #224]	; (8005684 <HAL_SPI_MspInit+0x198>)
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	60fb      	str	r3, [r7, #12]
 80055aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ac:	2300      	movs	r3, #0
 80055ae:	60bb      	str	r3, [r7, #8]
 80055b0:	4b34      	ldr	r3, [pc, #208]	; (8005684 <HAL_SPI_MspInit+0x198>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055b4:	4a33      	ldr	r2, [pc, #204]	; (8005684 <HAL_SPI_MspInit+0x198>)
 80055b6:	f043 0302 	orr.w	r3, r3, #2
 80055ba:	6313      	str	r3, [r2, #48]	; 0x30
 80055bc:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_SPI_MspInit+0x198>)
 80055be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	60bb      	str	r3, [r7, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055c8:	2304      	movs	r3, #4
 80055ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055cc:	2302      	movs	r3, #2
 80055ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055d4:	2303      	movs	r3, #3
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055d8:	2305      	movs	r3, #5
 80055da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055dc:	f107 031c 	add.w	r3, r7, #28
 80055e0:	4619      	mov	r1, r3
 80055e2:	482b      	ldr	r0, [pc, #172]	; (8005690 <HAL_SPI_MspInit+0x1a4>)
 80055e4:	f003 fdb0 	bl	8009148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80055e8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80055ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80055fa:	2305      	movs	r3, #5
 80055fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fe:	f107 031c 	add.w	r3, r7, #28
 8005602:	4619      	mov	r1, r3
 8005604:	4823      	ldr	r0, [pc, #140]	; (8005694 <HAL_SPI_MspInit+0x1a8>)
 8005606:	f003 fd9f 	bl	8009148 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 800560c:	4a23      	ldr	r2, [pc, #140]	; (800569c <HAL_SPI_MspInit+0x1b0>)
 800560e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005610:	4b21      	ldr	r3, [pc, #132]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005612:	2200      	movs	r2, #0
 8005614:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005616:	4b20      	ldr	r3, [pc, #128]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005618:	2240      	movs	r2, #64	; 0x40
 800561a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 800561e:	2200      	movs	r2, #0
 8005620:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005622:	4b1d      	ldr	r3, [pc, #116]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005628:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 800562c:	2200      	movs	r2, #0
 800562e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005630:	4b19      	ldr	r3, [pc, #100]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005632:	2200      	movs	r2, #0
 8005634:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8005636:	4b18      	ldr	r3, [pc, #96]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800563e:	4b16      	ldr	r3, [pc, #88]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005646:	2200      	movs	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800564a:	4813      	ldr	r0, [pc, #76]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 800564c:	f003 f91c 	bl	8008888 <HAL_DMA_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 8005656:	f7ff fde7 	bl	8005228 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 800565e:	649a      	str	r2, [r3, #72]	; 0x48
 8005660:	4a0d      	ldr	r2, [pc, #52]	; (8005698 <HAL_SPI_MspInit+0x1ac>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005666:	2200      	movs	r2, #0
 8005668:	2105      	movs	r1, #5
 800566a:	2024      	movs	r0, #36	; 0x24
 800566c:	f003 f8d4 	bl	8008818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005670:	2024      	movs	r0, #36	; 0x24
 8005672:	f003 f8ed 	bl	8008850 <HAL_NVIC_EnableIRQ>
}
 8005676:	bf00      	nop
 8005678:	3730      	adds	r7, #48	; 0x30
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40013000 	.word	0x40013000
 8005684:	40023800 	.word	0x40023800
 8005688:	40020000 	.word	0x40020000
 800568c:	40003800 	.word	0x40003800
 8005690:	40020800 	.word	0x40020800
 8005694:	40020400 	.word	0x40020400
 8005698:	20012624 	.word	0x20012624
 800569c:	40026070 	.word	0x40026070

080056a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a16      	ldr	r2, [pc, #88]	; (8005708 <HAL_SPI_MspDeInit+0x68>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d10a      	bne.n	80056c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <HAL_SPI_MspDeInit+0x6c>)
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	4a15      	ldr	r2, [pc, #84]	; (800570c <HAL_SPI_MspDeInit+0x6c>)
 80056b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056bc:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 80056be:	21e0      	movs	r1, #224	; 0xe0
 80056c0:	4813      	ldr	r0, [pc, #76]	; (8005710 <HAL_SPI_MspDeInit+0x70>)
 80056c2:	f003 fedd 	bl	8009480 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80056c6:	e01b      	b.n	8005700 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a11      	ldr	r2, [pc, #68]	; (8005714 <HAL_SPI_MspDeInit+0x74>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d116      	bne.n	8005700 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80056d2:	4b0e      	ldr	r3, [pc, #56]	; (800570c <HAL_SPI_MspDeInit+0x6c>)
 80056d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d6:	4a0d      	ldr	r2, [pc, #52]	; (800570c <HAL_SPI_MspDeInit+0x6c>)
 80056d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056dc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 80056de:	2104      	movs	r1, #4
 80056e0:	480d      	ldr	r0, [pc, #52]	; (8005718 <HAL_SPI_MspDeInit+0x78>)
 80056e2:	f003 fecd 	bl	8009480 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 80056e6:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 80056ea:	480c      	ldr	r0, [pc, #48]	; (800571c <HAL_SPI_MspDeInit+0x7c>)
 80056ec:	f003 fec8 	bl	8009480 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f4:	4618      	mov	r0, r3
 80056f6:	f003 f975 	bl	80089e4 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 80056fa:	2024      	movs	r0, #36	; 0x24
 80056fc:	f003 f8b6 	bl	800886c <HAL_NVIC_DisableIRQ>
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	40013000 	.word	0x40013000
 800570c:	40023800 	.word	0x40023800
 8005710:	40020000 	.word	0x40020000
 8005714:	40003800 	.word	0x40003800
 8005718:	40020800 	.word	0x40020800
 800571c:	40020400 	.word	0x40020400

08005720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a38      	ldr	r2, [pc, #224]	; (8005810 <HAL_TIM_Base_MspInit+0xf0>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d116      	bne.n	8005760 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005732:	2300      	movs	r3, #0
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	4b37      	ldr	r3, [pc, #220]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 8005738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573a:	4a36      	ldr	r2, [pc, #216]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 800573c:	f043 0301 	orr.w	r3, r3, #1
 8005740:	6453      	str	r3, [r2, #68]	; 0x44
 8005742:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 8005744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800574e:	2200      	movs	r2, #0
 8005750:	2105      	movs	r1, #5
 8005752:	2019      	movs	r0, #25
 8005754:	f003 f860 	bl	8008818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005758:	2019      	movs	r0, #25
 800575a:	f003 f879 	bl	8008850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800575e:	e052      	b.n	8005806 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005768:	d116      	bne.n	8005798 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800576a:	2300      	movs	r3, #0
 800576c:	613b      	str	r3, [r7, #16]
 800576e:	4b29      	ldr	r3, [pc, #164]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	4a28      	ldr	r2, [pc, #160]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	6413      	str	r3, [r2, #64]	; 0x40
 800577a:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 800577c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8005786:	2200      	movs	r2, #0
 8005788:	2105      	movs	r1, #5
 800578a:	201c      	movs	r0, #28
 800578c:	f003 f844 	bl	8008818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005790:	201c      	movs	r0, #28
 8005792:	f003 f85d 	bl	8008850 <HAL_NVIC_EnableIRQ>
}
 8005796:	e036      	b.n	8005806 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1e      	ldr	r2, [pc, #120]	; (8005818 <HAL_TIM_Base_MspInit+0xf8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d116      	bne.n	80057d0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	4b1b      	ldr	r3, [pc, #108]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	4a1a      	ldr	r2, [pc, #104]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 80057ac:	f043 0302 	orr.w	r3, r3, #2
 80057b0:	6413      	str	r3, [r2, #64]	; 0x40
 80057b2:	4b18      	ldr	r3, [pc, #96]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80057be:	2200      	movs	r2, #0
 80057c0:	2105      	movs	r1, #5
 80057c2:	201d      	movs	r0, #29
 80057c4:	f003 f828 	bl	8008818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80057c8:	201d      	movs	r0, #29
 80057ca:	f003 f841 	bl	8008850 <HAL_NVIC_EnableIRQ>
}
 80057ce:	e01a      	b.n	8005806 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a11      	ldr	r2, [pc, #68]	; (800581c <HAL_TIM_Base_MspInit+0xfc>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d115      	bne.n	8005806 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]
 80057de:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 80057e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e2:	4a0c      	ldr	r2, [pc, #48]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 80057e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e8:	6453      	str	r3, [r2, #68]	; 0x44
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <HAL_TIM_Base_MspInit+0xf4>)
 80057ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80057f6:	2200      	movs	r2, #0
 80057f8:	2105      	movs	r1, #5
 80057fa:	2019      	movs	r0, #25
 80057fc:	f003 f80c 	bl	8008818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005800:	2019      	movs	r0, #25
 8005802:	f003 f825 	bl	8008850 <HAL_NVIC_EnableIRQ>
}
 8005806:	bf00      	nop
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40010000 	.word	0x40010000
 8005814:	40023800 	.word	0x40023800
 8005818:	40000400 	.word	0x40000400
 800581c:	40014400 	.word	0x40014400

08005820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	; 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8005830:	2200      	movs	r2, #0
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	202d      	movs	r0, #45	; 0x2d
 8005836:	f002 ffef 	bl	8008818 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800583a:	202d      	movs	r0, #45	; 0x2d
 800583c:	f003 f808 	bl	8008850 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	4b1f      	ldr	r3, [pc, #124]	; (80058c4 <HAL_InitTick+0xa4>)
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <HAL_InitTick+0xa4>)
 800584a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800584e:	6413      	str	r3, [r2, #64]	; 0x40
 8005850:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_InitTick+0xa4>)
 8005852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005854:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800585c:	f107 0210 	add.w	r2, r7, #16
 8005860:	f107 0314 	add.w	r3, r7, #20
 8005864:	4611      	mov	r1, r2
 8005866:	4618      	mov	r0, r3
 8005868:	f007 f94e 	bl	800cb08 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800586c:	f007 f938 	bl	800cae0 <HAL_RCC_GetPCLK1Freq>
 8005870:	4603      	mov	r3, r0
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	4a13      	ldr	r2, [pc, #76]	; (80058c8 <HAL_InitTick+0xa8>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	0c9b      	lsrs	r3, r3, #18
 8005880:	3b01      	subs	r3, #1
 8005882:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8005884:	4b11      	ldr	r3, [pc, #68]	; (80058cc <HAL_InitTick+0xac>)
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_InitTick+0xb0>)
 8005888:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 800588a:	4b10      	ldr	r3, [pc, #64]	; (80058cc <HAL_InitTick+0xac>)
 800588c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005890:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8005892:	4a0e      	ldr	r2, [pc, #56]	; (80058cc <HAL_InitTick+0xac>)
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8005898:	4b0c      	ldr	r3, [pc, #48]	; (80058cc <HAL_InitTick+0xac>)
 800589a:	2200      	movs	r2, #0
 800589c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800589e:	4b0b      	ldr	r3, [pc, #44]	; (80058cc <HAL_InitTick+0xac>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80058a4:	4809      	ldr	r0, [pc, #36]	; (80058cc <HAL_InitTick+0xac>)
 80058a6:	f008 fdbf 	bl	800e428 <HAL_TIM_Base_Init>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d104      	bne.n	80058ba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80058b0:	4806      	ldr	r0, [pc, #24]	; (80058cc <HAL_InitTick+0xac>)
 80058b2:	f008 fe09 	bl	800e4c8 <HAL_TIM_Base_Start_IT>
 80058b6:	4603      	mov	r3, r0
 80058b8:	e000      	b.n	80058bc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3730      	adds	r7, #48	; 0x30
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40023800 	.word	0x40023800
 80058c8:	431bde83 	.word	0x431bde83
 80058cc:	20013058 	.word	0x20013058
 80058d0:	40002000 	.word	0x40002000

080058d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058d4:	b480      	push	{r7}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80058d8:	e7fe      	b.n	80058d8 <NMI_Handler+0x4>

080058da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058da:	b480      	push	{r7}
 80058dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058de:	e7fe      	b.n	80058de <HardFault_Handler+0x4>

080058e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80058e4:	e7fe      	b.n	80058e4 <MemManage_Handler+0x4>

080058e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80058e6:	b480      	push	{r7}
 80058e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80058ea:	e7fe      	b.n	80058ea <BusFault_Handler+0x4>

080058ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80058ec:	b480      	push	{r7}
 80058ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80058f0:	e7fe      	b.n	80058f0 <UsageFault_Handler+0x4>

080058f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80058f2:	b480      	push	{r7}
 80058f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80058f6:	bf00      	nop
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005904:	4802      	ldr	r0, [pc, #8]	; (8005910 <DMA1_Stream4_IRQHandler+0x10>)
 8005906:	f003 f9b5 	bl	8008c74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800590a:	bf00      	nop
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20012624 	.word	0x20012624

08005914 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005918:	4803      	ldr	r0, [pc, #12]	; (8005928 <TIM1_UP_TIM10_IRQHandler+0x14>)
 800591a:	f008 fe74 	bl	800e606 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800591e:	4803      	ldr	r0, [pc, #12]	; (800592c <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005920:	f008 fe71 	bl	800e606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005924:	bf00      	nop
 8005926:	bd80      	pop	{r7, pc}
 8005928:	20011410 	.word	0x20011410
 800592c:	2000ac48 	.word	0x2000ac48

08005930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005934:	4802      	ldr	r0, [pc, #8]	; (8005940 <TIM2_IRQHandler+0x10>)
 8005936:	f008 fe66 	bl	800e606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200117e8 	.word	0x200117e8

08005944 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <TIM3_IRQHandler+0x10>)
 800594a:	f008 fe5c 	bl	800e606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000e8bc 	.word	0x2000e8bc

08005958 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <SPI2_IRQHandler+0x10>)
 800595e:	f008 fae1 	bl	800df24 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	2000ab34 	.word	0x2000ab34

0800596c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005970:	4802      	ldr	r0, [pc, #8]	; (800597c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005972:	f008 fe48 	bl	800e606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005976:	bf00      	nop
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20013058 	.word	0x20013058

08005980 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005984:	4802      	ldr	r0, [pc, #8]	; (8005990 <OTG_FS_IRQHandler+0x10>)
 8005986:	f005 fc2c 	bl	800b1e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800598a:	bf00      	nop
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	20016640 	.word	0x20016640

08005994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
	return 1;
 8005998:	2301      	movs	r3, #1
}
 800599a:	4618      	mov	r0, r3
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <_kill>:

int _kill(int pid, int sig)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80059ae:	f014 fa79 	bl	8019ea4 <__errno>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2216      	movs	r2, #22
 80059b6:	601a      	str	r2, [r3, #0]
	return -1;
 80059b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3708      	adds	r7, #8
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <_exit>:

void _exit (int status)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80059cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7ff ffe7 	bl	80059a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80059d6:	e7fe      	b.n	80059d6 <_exit+0x12>

080059d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059e4:	2300      	movs	r3, #0
 80059e6:	617b      	str	r3, [r7, #20]
 80059e8:	e00a      	b.n	8005a00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80059ea:	f3af 8000 	nop.w
 80059ee:	4601      	mov	r1, r0
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	1c5a      	adds	r2, r3, #1
 80059f4:	60ba      	str	r2, [r7, #8]
 80059f6:	b2ca      	uxtb	r2, r1
 80059f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3301      	adds	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	dbf0      	blt.n	80059ea <_read+0x12>
	}

return len;
 8005a08:	687b      	ldr	r3, [r7, #4]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3718      	adds	r7, #24
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	e009      	b.n	8005a38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	1c5a      	adds	r2, r3, #1
 8005a28:	60ba      	str	r2, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	3301      	adds	r3, #1
 8005a36:	617b      	str	r3, [r7, #20]
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	dbf1      	blt.n	8005a24 <_write+0x12>
	}
	return len;
 8005a40:	687b      	ldr	r3, [r7, #4]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <_close>:

int _close(int file)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
	return -1;
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005a62:	b480      	push	{r7}
 8005a64:	b083      	sub	sp, #12
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	6078      	str	r0, [r7, #4]
 8005a6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005a72:	605a      	str	r2, [r3, #4]
	return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <_isatty>:

int _isatty(int file)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
	return 1;
 8005a8a:	2301      	movs	r3, #1
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
	return 0;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005abc:	4a14      	ldr	r2, [pc, #80]	; (8005b10 <_sbrk+0x5c>)
 8005abe:	4b15      	ldr	r3, [pc, #84]	; (8005b14 <_sbrk+0x60>)
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ac8:	4b13      	ldr	r3, [pc, #76]	; (8005b18 <_sbrk+0x64>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ad0:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <_sbrk+0x64>)
 8005ad2:	4a12      	ldr	r2, [pc, #72]	; (8005b1c <_sbrk+0x68>)
 8005ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005ad6:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <_sbrk+0x64>)
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4413      	add	r3, r2
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d207      	bcs.n	8005af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ae4:	f014 f9de 	bl	8019ea4 <__errno>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	220c      	movs	r2, #12
 8005aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005af2:	e009      	b.n	8005b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005af4:	4b08      	ldr	r3, [pc, #32]	; (8005b18 <_sbrk+0x64>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <_sbrk+0x64>)
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4413      	add	r3, r2
 8005b02:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <_sbrk+0x64>)
 8005b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005b06:	68fb      	ldr	r3, [r7, #12]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3718      	adds	r7, #24
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20020000 	.word	0x20020000
 8005b14:	00000900 	.word	0x00000900
 8005b18:	20002850 	.word	0x20002850
 8005b1c:	20016a58 	.word	0x20016a58

08005b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005b20:	b480      	push	{r7}
 8005b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <SystemInit+0x20>)
 8005b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2a:	4a05      	ldr	r2, [pc, #20]	; (8005b40 <SystemInit+0x20>)
 8005b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	e000ed00 	.word	0xe000ed00

08005b44 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8005b4c:	2305      	movs	r3, #5
 8005b4e:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f001 f9f1 	bl	8006f3c <null_ptr_check>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8005b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d133      	bne.n	8005bce <bme280_init+0x8a>
		while (try_count) {
 8005b66:	e028      	b.n	8005bba <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8005b68:	f107 010d 	add.w	r1, r7, #13
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	20d0      	movs	r0, #208	; 0xd0
 8005b72:	f000 f832 	bl	8005bda <bme280_get_regs>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8005b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d114      	bne.n	8005bac <bme280_init+0x68>
 8005b82:	7b7b      	ldrb	r3, [r7, #13]
 8005b84:	2b60      	cmp	r3, #96	; 0x60
 8005b86:	d111      	bne.n	8005bac <bme280_init+0x68>
				dev->chip_id = chip_id;
 8005b88:	7b7a      	ldrb	r2, [r7, #13]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f976 	bl	8005e80 <bme280_soft_reset>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8005b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d110      	bne.n	8005bc2 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 f841 	bl	8006c28 <get_calib_data>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8005baa:	e00a      	b.n	8005bc2 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	2001      	movs	r0, #1
 8005bb2:	4798      	blx	r3
			--try_count;
 8005bb4:	7bbb      	ldrb	r3, [r7, #14]
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1d3      	bne.n	8005b68 <bme280_init+0x24>
 8005bc0:	e000      	b.n	8005bc4 <bme280_init+0x80>
				break;
 8005bc2:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8005bc4:	7bbb      	ldrb	r3, [r7, #14]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8005bca:	23fe      	movs	r3, #254	; 0xfe
 8005bcc:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8005bda:	b590      	push	{r4, r7, lr}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607b      	str	r3, [r7, #4]
 8005be4:	4603      	mov	r3, r0
 8005be6:	73fb      	strb	r3, [r7, #15]
 8005be8:	4613      	mov	r3, r2
 8005bea:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f001 f9a5 	bl	8006f3c <null_ptr_check>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8005bf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d117      	bne.n	8005c2e <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	789b      	ldrb	r3, [r3, #2]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d003      	beq.n	8005c0e <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c0c:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685c      	ldr	r4, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	7858      	ldrb	r0, [r3, #1]
 8005c16:	89bb      	ldrh	r3, [r7, #12]
 8005c18:	7bf9      	ldrb	r1, [r7, #15]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	47a0      	blx	r4
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8005c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8005c2a:	23fc      	movs	r3, #252	; 0xfc
 8005c2c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	371c      	adds	r7, #28
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd90      	pop	{r4, r7, pc}

08005c3a <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8005c3a:	b590      	push	{r4, r7, lr}
 8005c3c:	b08d      	sub	sp, #52	; 0x34
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	60f8      	str	r0, [r7, #12]
 8005c42:	60b9      	str	r1, [r7, #8]
 8005c44:	603b      	str	r3, [r7, #0]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8005c4a:	79fb      	ldrb	r3, [r7, #7]
 8005c4c:	2b0a      	cmp	r3, #10
 8005c4e:	d901      	bls.n	8005c54 <bme280_set_regs+0x1a>
		len = 10;
 8005c50:	230a      	movs	r3, #10
 8005c52:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005c54:	6838      	ldr	r0, [r7, #0]
 8005c56:	f001 f971 	bl	8006f3c <null_ptr_check>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8005c60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d154      	bne.n	8005d12 <bme280_set_regs+0xd8>
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d051      	beq.n	8005d12 <bme280_set_regs+0xd8>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d04e      	beq.n	8005d12 <bme280_set_regs+0xd8>
		if (len != 0) {
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d047      	beq.n	8005d0a <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	789b      	ldrb	r3, [r3, #2]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d01a      	beq.n	8005cbe <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c8e:	e011      	b.n	8005cb4 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8005c90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c9e:	68f9      	ldr	r1, [r7, #12]
 8005ca0:	440b      	add	r3, r1
 8005ca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8005caa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005cae:	3301      	adds	r3, #1
 8005cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005cb8:	79fb      	ldrb	r3, [r7, #7]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d3e8      	bcc.n	8005c90 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	d90b      	bls.n	8005cdc <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8005cc4:	79fb      	ldrb	r3, [r7, #7]
 8005cc6:	f107 0114 	add.w	r1, r7, #20
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 fff0 	bl	8006cb2 <interleave_reg_addr>
				temp_len = len * 2;
 8005cd2:	79fb      	ldrb	r3, [r7, #7]
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005cda:	e001      	b.n	8005ce0 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	689c      	ldr	r4, [r3, #8]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	7858      	ldrb	r0, [r3, #1]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	7819      	ldrb	r1, [r3, #0]
 8005cec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005cee:	f107 0214 	add.w	r2, r7, #20
 8005cf2:	47a0      	blx	r4
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8005cfa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8005d02:	23fc      	movs	r3, #252	; 0xfc
 8005d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8005d08:	e007      	b.n	8005d1a <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8005d0a:	23fd      	movs	r3, #253	; 0xfd
 8005d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8005d10:	e003      	b.n	8005d1a <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8005d12:	23ff      	movs	r3, #255	; 0xff
 8005d14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005d18:	e000      	b.n	8005d1c <bme280_set_regs+0xe2>
		if (len != 0) {
 8005d1a:	bf00      	nop
	}


	return rslt;
 8005d1c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3734      	adds	r7, #52	; 0x34
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd90      	pop	{r4, r7, pc}

08005d28 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	6039      	str	r1, [r7, #0]
 8005d32:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005d34:	6838      	ldr	r0, [r7, #0]
 8005d36:	f001 f901 	bl	8006f3c <null_ptr_check>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8005d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d13f      	bne.n	8005dc6 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8005d46:	f107 030e 	add.w	r3, r7, #14
 8005d4a:	6839      	ldr	r1, [r7, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 f874 	bl	8005e3a <bme280_get_sensor_mode>
 8005d52:	4603      	mov	r3, r0
 8005d54:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8005d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <bme280_set_sensor_settings+0x46>
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d004      	beq.n	8005d6e <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8005d64:	6838      	ldr	r0, [r7, #0]
 8005d66:	f000 fb4e 	bl	8006406 <put_device_to_sleep>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8005d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d127      	bne.n	8005dc6 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	2007      	movs	r0, #7
 8005d7c:	f001 f8c2 	bl	8006f04 <are_settings_changed>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	683a      	ldr	r2, [r7, #0]
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f98a 	bl	80060aa <set_osr_settings>
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8005d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d111      	bne.n	8005dc6 <bme280_set_sensor_settings+0x9e>
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	4619      	mov	r1, r3
 8005da6:	2018      	movs	r0, #24
 8005da8:	f001 f8ac 	bl	8006f04 <are_settings_changed>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fa11 	bl	80061e4 <set_filter_standby_settings>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8005dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b084      	sub	sp, #16
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	4603      	mov	r3, r0
 8005dda:	6039      	str	r1, [r7, #0]
 8005ddc:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005dde:	6838      	ldr	r0, [r7, #0]
 8005de0:	f001 f8ac 	bl	8006f3c <null_ptr_check>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8005de8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d11e      	bne.n	8005e2e <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8005df0:	f107 030e 	add.w	r3, r7, #14
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f81f 	bl	8005e3a <bme280_get_sensor_mode>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8005e00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d107      	bne.n	8005e18 <bme280_set_sensor_mode+0x46>
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d004      	beq.n	8005e18 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8005e0e:	6838      	ldr	r0, [r7, #0]
 8005e10:	f000 faf9 	bl	8006406 <put_device_to_sleep>
 8005e14:	4603      	mov	r3, r0
 8005e16:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8005e18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d106      	bne.n	8005e2e <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fabb 	bl	80063a0 <write_power_mode>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005e44:	6838      	ldr	r0, [r7, #0]
 8005e46:	f001 f879 	bl	8006f3c <null_ptr_check>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8005e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10e      	bne.n	8005e74 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	20f4      	movs	r0, #244	; 0xf4
 8005e5e:	f7ff febc 	bl	8005bda <bme280_get_regs>
 8005e62:	4603      	mov	r3, r0
 8005e64:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8005e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3710      	adds	r7, #16
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8005e88:	23e0      	movs	r3, #224	; 0xe0
 8005e8a:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8005e8c:	23b6      	movs	r3, #182	; 0xb6
 8005e8e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f001 f853 	bl	8006f3c <null_ptr_check>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8005e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10d      	bne.n	8005ebe <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8005ea2:	f107 010d 	add.w	r1, r7, #13
 8005ea6:	f107 000e 	add.w	r0, r7, #14
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f7ff fec4 	bl	8005c3a <bme280_set_regs>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	2002      	movs	r0, #2
 8005ebc:	4798      	blx	r3
	}

	return rslt;
 8005ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b08a      	sub	sp, #40	; 0x28
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8005ed8:	2300      	movs	r3, #0
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	2300      	movs	r3, #0
 8005ede:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8005ee0:	f107 0310 	add.w	r3, r7, #16
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f001 f825 	bl	8006f3c <null_ptr_check>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8005ef8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d124      	bne.n	8005f4a <bme280_get_sensor_data+0x80>
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d021      	beq.n	8005f4a <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8005f06:	f107 011c 	add.w	r1, r7, #28
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	20f7      	movs	r0, #247	; 0xf7
 8005f10:	f7ff fe63 	bl	8005bda <bme280_get_regs>
 8005f14:	4603      	mov	r3, r0
 8005f16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8005f1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d116      	bne.n	8005f50 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8005f22:	f107 0210 	add.w	r2, r7, #16
 8005f26:	f107 031c 	add.w	r3, r7, #28
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 f815 	bl	8005f5c <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	3310      	adds	r3, #16
 8005f36:	f107 0110 	add.w	r1, r7, #16
 8005f3a:	7bf8      	ldrb	r0, [r7, #15]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	f000 f853 	bl	8005fe8 <bme280_compensate_data>
 8005f42:	4603      	mov	r3, r0
 8005f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8005f48:	e002      	b.n	8005f50 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8005f4a:	23ff      	movs	r3, #255	; 0xff
 8005f4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8005f50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3728      	adds	r7, #40	; 0x28
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	031b      	lsls	r3, r3, #12
 8005f6c:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	3301      	adds	r3, #1
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	091b      	lsrs	r3, r3, #4
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3303      	adds	r3, #3
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	031b      	lsls	r3, r3, #12
 8005f9a:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	3305      	adds	r3, #5
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	091b      	lsrs	r3, r3, #4
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	3306      	adds	r3, #6
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	021b      	lsls	r3, r3, #8
 8005fc8:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3307      	adds	r3, #7
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	609a      	str	r2, [r3, #8]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d04b      	beq.n	800609a <bme280_compensate_data+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d048      	beq.n	800609a <bme280_compensate_data+0xb2>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d045      	beq.n	800609a <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 800601c:	6879      	ldr	r1, [r7, #4]
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800602a:	6879      	ldr	r1, [r7, #4]
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8006038:	7bfb      	ldrb	r3, [r7, #15]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	68b8      	ldr	r0, [r7, #8]
 8006046:	f000 fa2b 	bl	80064a0 <compensate_temperature>
 800604a:	eeb0 7a40 	vmov.f32	s14, s0
 800604e:	eef0 7a60 	vmov.f32	s15, s1
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 faef 	bl	8006648 <compensate_pressure>
 800606a:	eeb0 7a40 	vmov.f32	s14, s0
 800606e:	eef0 7a60 	vmov.f32	s15, s1
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	f003 0304 	and.w	r3, r3, #4
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00d      	beq.n	800609e <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8006082:	6839      	ldr	r1, [r7, #0]
 8006084:	68b8      	ldr	r0, [r7, #8]
 8006086:	f000 fcaf 	bl	80069e8 <compensate_humidity>
 800608a:	eeb0 7a40 	vmov.f32	s14, s0
 800608e:	eef0 7a60 	vmov.f32	s15, s1
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8006098:	e001      	b.n	800609e <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800609a:	23ff      	movs	r3, #255	; 0xff
 800609c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800609e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3718      	adds	r7, #24
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	4603      	mov	r3, r0
 80060b2:	60b9      	str	r1, [r7, #8]
 80060b4:	607a      	str	r2, [r7, #4]
 80060b6:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80060b8:	2301      	movs	r3, #1
 80060ba:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	f003 0304 	and.w	r3, r3, #4
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	68b8      	ldr	r0, [r7, #8]
 80060ca:	f000 f815 	bl	80060f8 <set_osr_humidity_settings>
 80060ce:	4603      	mov	r3, r0
 80060d0:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	f003 0303 	and.w	r3, r3, #3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80060dc:	7bfb      	ldrb	r3, [r7, #15]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68b9      	ldr	r1, [r7, #8]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 f842 	bl	800616c <set_osr_press_temp_settings>
 80060e8:	4603      	mov	r3, r0
 80060ea:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80060ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3718      	adds	r7, #24
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8006102:	23f2      	movs	r3, #242	; 0xf2
 8006104:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	789b      	ldrb	r3, [r3, #2]
 800610a:	f003 0307 	and.w	r3, r3, #7
 800610e:	b2db      	uxtb	r3, r3
 8006110:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8006112:	f107 010e 	add.w	r1, r7, #14
 8006116:	f107 000c 	add.w	r0, r7, #12
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	2201      	movs	r2, #1
 800611e:	f7ff fd8c 	bl	8005c3a <bme280_set_regs>
 8006122:	4603      	mov	r3, r0
 8006124:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8006126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d118      	bne.n	8006160 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800612e:	23f4      	movs	r3, #244	; 0xf4
 8006130:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8006132:	7b38      	ldrb	r0, [r7, #12]
 8006134:	f107 010d 	add.w	r1, r7, #13
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2201      	movs	r2, #1
 800613c:	f7ff fd4d 	bl	8005bda <bme280_get_regs>
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8006144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d109      	bne.n	8006160 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 800614c:	f107 010d 	add.w	r1, r7, #13
 8006150:	f107 000c 	add.w	r0, r7, #12
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2201      	movs	r2, #1
 8006158:	f7ff fd6f 	bl	8005c3a <bme280_set_regs>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8006160:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b086      	sub	sp, #24
 8006170:	af00      	add	r7, sp, #0
 8006172:	4603      	mov	r3, r0
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 800617a:	23f4      	movs	r3, #244	; 0xf4
 800617c:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800617e:	7db8      	ldrb	r0, [r7, #22]
 8006180:	f107 0115 	add.w	r1, r7, #21
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f7ff fd27 	bl	8005bda <bme280_get_regs>
 800618c:	4603      	mov	r3, r0
 800618e:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8006190:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d11f      	bne.n	80061d8 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8006198:	7bfb      	ldrb	r3, [r7, #15]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80061a2:	f107 0315 	add.w	r3, r7, #21
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f000 f88e 	bl	80062ca <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	f003 0302 	and.w	r3, r3, #2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d005      	beq.n	80061c4 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80061b8:	f107 0315 	add.w	r3, r7, #21
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 f8a0 	bl	8006304 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80061c4:	f107 0115 	add.w	r1, r7, #21
 80061c8:	f107 0016 	add.w	r0, r7, #22
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f7ff fd33 	bl	8005c3a <bme280_set_regs>
 80061d4:	4603      	mov	r3, r0
 80061d6:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80061d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
 80061f0:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80061f2:	23f5      	movs	r3, #245	; 0xf5
 80061f4:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80061f6:	7db8      	ldrb	r0, [r7, #22]
 80061f8:	f107 0115 	add.w	r1, r7, #21
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f7ff fceb 	bl	8005bda <bme280_get_regs>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8006208:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11f      	bne.n	8006250 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d005      	beq.n	8006226 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 800621a:	f107 0315 	add.w	r3, r7, #21
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	4618      	mov	r0, r3
 8006222:	f000 f81b 	bl	800625c <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8006226:	7bfb      	ldrb	r3, [r7, #15]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	d005      	beq.n	800623c <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8006230:	f107 0315 	add.w	r3, r7, #21
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	4618      	mov	r0, r3
 8006238:	f000 f82d 	bl	8006296 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800623c:	f107 0115 	add.w	r1, r7, #21
 8006240:	f107 0016 	add.w	r0, r7, #22
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f7ff fcf7 	bl	8005c3a <bme280_set_regs>
 800624c:	4603      	mov	r3, r0
 800624e:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8006250:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800625c:	b480      	push	{r7}
 800625e:	b083      	sub	sp, #12
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	b25b      	sxtb	r3, r3
 800626c:	f023 031c 	bic.w	r3, r3, #28
 8006270:	b25a      	sxtb	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	78db      	ldrb	r3, [r3, #3]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	b25b      	sxtb	r3, r3
 800627a:	f003 031c 	and.w	r3, r3, #28
 800627e:	b25b      	sxtb	r3, r3
 8006280:	4313      	orrs	r3, r2
 8006282:	b25b      	sxtb	r3, r3
 8006284:	b2da      	uxtb	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	701a      	strb	r2, [r3, #0]
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8006296:	b480      	push	{r7}
 8006298:	b083      	sub	sp, #12
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
 800629e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	b25b      	sxtb	r3, r3
 80062a6:	f003 031f 	and.w	r3, r3, #31
 80062aa:	b25a      	sxtb	r2, r3
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	791b      	ldrb	r3, [r3, #4]
 80062b0:	015b      	lsls	r3, r3, #5
 80062b2:	b25b      	sxtb	r3, r3
 80062b4:	4313      	orrs	r3, r2
 80062b6:	b25b      	sxtb	r3, r3
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	701a      	strb	r2, [r3, #0]
}
 80062be:	bf00      	nop
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b083      	sub	sp, #12
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	f023 031c 	bic.w	r3, r3, #28
 80062de:	b25a      	sxtb	r2, r3
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	b25b      	sxtb	r3, r3
 80062e8:	f003 031c 	and.w	r3, r3, #28
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	4313      	orrs	r3, r2
 80062f0:	b25b      	sxtb	r3, r3
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	701a      	strb	r2, [r3, #0]
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f003 031f 	and.w	r3, r3, #31
 8006318:	b25a      	sxtb	r2, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	785b      	ldrb	r3, [r3, #1]
 800631e:	015b      	lsls	r3, r3, #5
 8006320:	b25b      	sxtb	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b25b      	sxtb	r3, r3
 8006326:	b2da      	uxtb	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	701a      	strb	r2, [r3, #0]
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f003 0307 	and.w	r3, r3, #7
 800634a:	b2da      	uxtb	r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	3302      	adds	r3, #2
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	109b      	asrs	r3, r3, #2
 8006358:	b2db      	uxtb	r3, r3
 800635a:	f003 0307 	and.w	r3, r3, #7
 800635e:	b2da      	uxtb	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	3302      	adds	r3, #2
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	095b      	lsrs	r3, r3, #5
 800636c:	b2da      	uxtb	r2, r3
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	3303      	adds	r3, #3
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	109b      	asrs	r3, r3, #2
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	b2da      	uxtb	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	3303      	adds	r3, #3
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	095b      	lsrs	r3, r3, #5
 800638e:	b2da      	uxtb	r2, r3
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	711a      	strb	r2, [r3, #4]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	4603      	mov	r3, r0
 80063a8:	6039      	str	r1, [r7, #0]
 80063aa:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80063ac:	23f4      	movs	r3, #244	; 0xf4
 80063ae:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80063b0:	7bb8      	ldrb	r0, [r7, #14]
 80063b2:	f107 010d 	add.w	r1, r7, #13
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f7ff fc0e 	bl	8005bda <bme280_get_regs>
 80063be:	4603      	mov	r3, r0
 80063c0:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80063c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d117      	bne.n	80063fa <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80063ca:	7b7b      	ldrb	r3, [r7, #13]
 80063cc:	b25b      	sxtb	r3, r3
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	b25a      	sxtb	r2, r3
 80063d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d8:	f003 0303 	and.w	r3, r3, #3
 80063dc:	b25b      	sxtb	r3, r3
 80063de:	4313      	orrs	r3, r2
 80063e0:	b25b      	sxtb	r3, r3
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80063e6:	f107 010d 	add.w	r1, r7, #13
 80063ea:	f107 000e 	add.w	r0, r7, #14
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f7ff fc22 	bl	8005c3a <bme280_set_regs>
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80063fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b086      	sub	sp, #24
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800640e:	f107 0110 	add.w	r1, r7, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2204      	movs	r2, #4
 8006416:	20f2      	movs	r0, #242	; 0xf2
 8006418:	f7ff fbdf 	bl	8005bda <bme280_get_regs>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8006420:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d118      	bne.n	800645a <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8006428:	f107 0208 	add.w	r2, r7, #8
 800642c:	f107 0310 	add.w	r3, r7, #16
 8006430:	4611      	mov	r1, r2
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff ff80 	bl	8006338 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff fd21 	bl	8005e80 <bme280_soft_reset>
 800643e:	4603      	mov	r3, r0
 8006440:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8006442:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d107      	bne.n	800645a <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 800644a:	f107 0308 	add.w	r3, r7, #8
 800644e:	6879      	ldr	r1, [r7, #4]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f808 	bl	8006466 <reload_device_settings>
 8006456:	4603      	mov	r3, r0
 8006458:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800645a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3718      	adds	r7, #24
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b084      	sub	sp, #16
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	6879      	ldr	r1, [r7, #4]
 8006474:	201f      	movs	r0, #31
 8006476:	f7ff fe18 	bl	80060aa <set_osr_settings>
 800647a:	4603      	mov	r3, r0
 800647c:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800647e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	201f      	movs	r0, #31
 800648c:	f7ff feaa 	bl	80061e4 <set_filter_standby_settings>
 8006490:	4603      	mov	r3, r0
 8006492:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8006494:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80064a0:	b5b0      	push	{r4, r5, r7, lr}
 80064a2:	b08c      	sub	sp, #48	; 0x30
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	4b5f      	ldr	r3, [pc, #380]	; (800662c <compensate_temperature+0x18c>)
 80064b0:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	4b5d      	ldr	r3, [pc, #372]	; (8006630 <compensate_temperature+0x190>)
 80064ba:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f7fa f81e 	bl	8000504 <__aeabi_ui2d>
 80064c8:	f04f 0200 	mov.w	r2, #0
 80064cc:	4b59      	ldr	r3, [pc, #356]	; (8006634 <compensate_temperature+0x194>)
 80064ce:	f7fa f9bd 	bl	800084c <__aeabi_ddiv>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4614      	mov	r4, r2
 80064d8:	461d      	mov	r5, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	881b      	ldrh	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f7fa f810 	bl	8000504 <__aeabi_ui2d>
 80064e4:	f04f 0200 	mov.w	r2, #0
 80064e8:	4b53      	ldr	r3, [pc, #332]	; (8006638 <compensate_temperature+0x198>)
 80064ea:	f7fa f9af 	bl	800084c <__aeabi_ddiv>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4620      	mov	r0, r4
 80064f4:	4629      	mov	r1, r5
 80064f6:	f7f9 fec7 	bl	8000288 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006508:	4618      	mov	r0, r3
 800650a:	f7fa f80b 	bl	8000524 <__aeabi_i2d>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	4618      	mov	r0, r3
 8006528:	f7f9 ffec 	bl	8000504 <__aeabi_ui2d>
 800652c:	f04f 0200 	mov.w	r2, #0
 8006530:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8006534:	f7fa f98a 	bl	800084c <__aeabi_ddiv>
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	4614      	mov	r4, r2
 800653e:	461d      	mov	r5, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7f9 ffdd 	bl	8000504 <__aeabi_ui2d>
 800654a:	f04f 0200 	mov.w	r2, #0
 800654e:	4b3b      	ldr	r3, [pc, #236]	; (800663c <compensate_temperature+0x19c>)
 8006550:	f7fa f97c 	bl	800084c <__aeabi_ddiv>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4620      	mov	r0, r4
 800655a:	4629      	mov	r1, r5
 800655c:	f7f9 fe94 	bl	8000288 <__aeabi_dsub>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
 8006564:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8006568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800656c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006570:	f7fa f842 	bl	80005f8 <__aeabi_dmul>
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	4614      	mov	r4, r2
 800657a:	461d      	mov	r5, r3
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006582:	4618      	mov	r0, r3
 8006584:	f7f9 ffce 	bl	8000524 <__aeabi_i2d>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4620      	mov	r0, r4
 800658e:	4629      	mov	r1, r5
 8006590:	f7fa f832 	bl	80005f8 <__aeabi_dmul>
 8006594:	4602      	mov	r2, r0
 8006596:	460b      	mov	r3, r1
 8006598:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 800659c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065a4:	f7f9 fe72 	bl	800028c <__adddf3>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	f7fa fad2 	bl	8000b58 <__aeabi_d2iz>
 80065b4:	4602      	mov	r2, r0
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80065ba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80065c2:	f7f9 fe63 	bl	800028c <__adddf3>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	4610      	mov	r0, r2
 80065cc:	4619      	mov	r1, r3
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	4b1b      	ldr	r3, [pc, #108]	; (8006640 <compensate_temperature+0x1a0>)
 80065d4:	f7fa f93a 	bl	800084c <__aeabi_ddiv>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80065e0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80065e8:	f7fa fa78 	bl	8000adc <__aeabi_dcmplt>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <compensate_temperature+0x15c>
		temperature = temperature_min;
 80065f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065f6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80065fa:	e00c      	b.n	8006616 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80065fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006600:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006604:	f7fa fa88 	bl	8000b18 <__aeabi_dcmpgt>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d003      	beq.n	8006616 <compensate_temperature+0x176>
		temperature = temperature_max;
 800660e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006612:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8006616:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800661a:	ec43 2b17 	vmov	d7, r2, r3
}
 800661e:	eeb0 0a47 	vmov.f32	s0, s14
 8006622:	eef0 0a67 	vmov.f32	s1, s15
 8006626:	3730      	adds	r7, #48	; 0x30
 8006628:	46bd      	mov	sp, r7
 800662a:	bdb0      	pop	{r4, r5, r7, pc}
 800662c:	c0440000 	.word	0xc0440000
 8006630:	40554000 	.word	0x40554000
 8006634:	40d00000 	.word	0x40d00000
 8006638:	40900000 	.word	0x40900000
 800663c:	40c00000 	.word	0x40c00000
 8006640:	40b40000 	.word	0x40b40000
 8006644:	00000000 	.word	0x00000000

08006648 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8006648:	b5b0      	push	{r4, r5, r7, lr}
 800664a:	b08e      	sub	sp, #56	; 0x38
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8006652:	a3d9      	add	r3, pc, #868	; (adr r3, 80069b8 <compensate_pressure+0x370>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 800665c:	a3d8      	add	r3, pc, #864	; (adr r3, 80069c0 <compensate_pressure+0x378>)
 800665e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006662:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 ff5a 	bl	8000524 <__aeabi_i2d>
 8006670:	f04f 0200 	mov.w	r2, #0
 8006674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006678:	f7fa f8e8 	bl	800084c <__aeabi_ddiv>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	4610      	mov	r0, r2
 8006682:	4619      	mov	r1, r3
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	4bc1      	ldr	r3, [pc, #772]	; (8006990 <compensate_pressure+0x348>)
 800668a:	f7f9 fdfd 	bl	8000288 <__aeabi_dsub>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8006696:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800669e:	f7f9 ffab 	bl	80005f8 <__aeabi_dmul>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4614      	mov	r4, r2
 80066a8:	461d      	mov	r5, r3
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f7f9 ff37 	bl	8000524 <__aeabi_i2d>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4620      	mov	r0, r4
 80066bc:	4629      	mov	r1, r5
 80066be:	f7f9 ff9b 	bl	80005f8 <__aeabi_dmul>
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	f04f 0200 	mov.w	r2, #0
 80066ce:	4bb1      	ldr	r3, [pc, #708]	; (8006994 <compensate_pressure+0x34c>)
 80066d0:	f7fa f8bc 	bl	800084c <__aeabi_ddiv>
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7f9 ff1e 	bl	8000524 <__aeabi_i2d>
 80066e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066ec:	f7f9 ff84 	bl	80005f8 <__aeabi_dmul>
 80066f0:	4602      	mov	r2, r0
 80066f2:	460b      	mov	r3, r1
 80066f4:	4610      	mov	r0, r2
 80066f6:	4619      	mov	r1, r3
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	f7f9 fdc6 	bl	800028c <__adddf3>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
 8006704:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006708:	f7f9 fdc0 	bl	800028c <__adddf3>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	4b9f      	ldr	r3, [pc, #636]	; (8006998 <compensate_pressure+0x350>)
 800671a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800671e:	f7fa f895 	bl	800084c <__aeabi_ddiv>
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	4614      	mov	r4, r2
 8006728:	461d      	mov	r5, r3
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006730:	4618      	mov	r0, r3
 8006732:	f7f9 fef7 	bl	8000524 <__aeabi_i2d>
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	4b98      	ldr	r3, [pc, #608]	; (800699c <compensate_pressure+0x354>)
 800673c:	f7f9 ff5c 	bl	80005f8 <__aeabi_dmul>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 fda0 	bl	800028c <__adddf3>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800675a:	4618      	mov	r0, r3
 800675c:	f7f9 fee2 	bl	8000524 <__aeabi_i2d>
 8006760:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006764:	f7f9 ff48 	bl	80005f8 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4610      	mov	r0, r2
 800676e:	4619      	mov	r1, r3
 8006770:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006774:	f7f9 ff40 	bl	80005f8 <__aeabi_dmul>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4610      	mov	r0, r2
 800677e:	4619      	mov	r1, r3
 8006780:	f04f 0200 	mov.w	r2, #0
 8006784:	4b86      	ldr	r3, [pc, #536]	; (80069a0 <compensate_pressure+0x358>)
 8006786:	f7fa f861 	bl	800084c <__aeabi_ddiv>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006798:	4618      	mov	r0, r3
 800679a:	f7f9 fec3 	bl	8000524 <__aeabi_i2d>
 800679e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80067a2:	f7f9 ff29 	bl	80005f8 <__aeabi_dmul>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4610      	mov	r0, r2
 80067ac:	4619      	mov	r1, r3
 80067ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067b2:	f7f9 fd6b 	bl	800028c <__adddf3>
 80067b6:	4602      	mov	r2, r0
 80067b8:	460b      	mov	r3, r1
 80067ba:	4610      	mov	r0, r2
 80067bc:	4619      	mov	r1, r3
 80067be:	f04f 0200 	mov.w	r2, #0
 80067c2:	4b77      	ldr	r3, [pc, #476]	; (80069a0 <compensate_pressure+0x358>)
 80067c4:	f7fa f842 	bl	800084c <__aeabi_ddiv>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80067d0:	f04f 0200 	mov.w	r2, #0
 80067d4:	4b6f      	ldr	r3, [pc, #444]	; (8006994 <compensate_pressure+0x34c>)
 80067d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80067da:	f7fa f837 	bl	800084c <__aeabi_ddiv>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	4610      	mov	r0, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	f04f 0200 	mov.w	r2, #0
 80067ea:	4b6e      	ldr	r3, [pc, #440]	; (80069a4 <compensate_pressure+0x35c>)
 80067ec:	f7f9 fd4e 	bl	800028c <__adddf3>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4614      	mov	r4, r2
 80067f6:	461d      	mov	r5, r3
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	88db      	ldrh	r3, [r3, #6]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7f9 fe81 	bl	8000504 <__aeabi_ui2d>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4620      	mov	r0, r4
 8006808:	4629      	mov	r1, r5
 800680a:	f7f9 fef5 	bl	80005f8 <__aeabi_dmul>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8006816:	f04f 0200 	mov.w	r2, #0
 800681a:	f04f 0300 	mov.w	r3, #0
 800681e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006822:	f7fa f951 	bl	8000ac8 <__aeabi_dcmpeq>
 8006826:	4603      	mov	r3, r0
 8006828:	2b00      	cmp	r3, #0
 800682a:	f040 80cd 	bne.w	80069c8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7f9 fe66 	bl	8000504 <__aeabi_ui2d>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	f04f 0000 	mov.w	r0, #0
 8006840:	4959      	ldr	r1, [pc, #356]	; (80069a8 <compensate_pressure+0x360>)
 8006842:	f7f9 fd21 	bl	8000288 <__aeabi_dsub>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800684e:	f04f 0200 	mov.w	r2, #0
 8006852:	4b56      	ldr	r3, [pc, #344]	; (80069ac <compensate_pressure+0x364>)
 8006854:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006858:	f7f9 fff8 	bl	800084c <__aeabi_ddiv>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006864:	f7f9 fd10 	bl	8000288 <__aeabi_dsub>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4610      	mov	r0, r2
 800686e:	4619      	mov	r1, r3
 8006870:	a345      	add	r3, pc, #276	; (adr r3, 8006988 <compensate_pressure+0x340>)
 8006872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006876:	f7f9 febf 	bl	80005f8 <__aeabi_dmul>
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	4610      	mov	r0, r2
 8006880:	4619      	mov	r1, r3
 8006882:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006886:	f7f9 ffe1 	bl	800084c <__aeabi_ddiv>
 800688a:	4602      	mov	r2, r0
 800688c:	460b      	mov	r3, r1
 800688e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006898:	4618      	mov	r0, r3
 800689a:	f7f9 fe43 	bl	8000524 <__aeabi_i2d>
 800689e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068a2:	f7f9 fea9 	bl	80005f8 <__aeabi_dmul>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4610      	mov	r0, r2
 80068bc:	4619      	mov	r1, r3
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	4b3b      	ldr	r3, [pc, #236]	; (80069b0 <compensate_pressure+0x368>)
 80068c4:	f7f9 ffc2 	bl	800084c <__aeabi_ddiv>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7f9 fe24 	bl	8000524 <__aeabi_i2d>
 80068dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068e0:	f7f9 fe8a 	bl	80005f8 <__aeabi_dmul>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4610      	mov	r0, r2
 80068ea:	4619      	mov	r1, r3
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	4b28      	ldr	r3, [pc, #160]	; (8006994 <compensate_pressure+0x34c>)
 80068f2:	f7f9 ffab 	bl	800084c <__aeabi_ddiv>
 80068f6:	4602      	mov	r2, r0
 80068f8:	460b      	mov	r3, r1
 80068fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 80068fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006902:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006906:	f7f9 fcc1 	bl	800028c <__adddf3>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4614      	mov	r4, r2
 8006910:	461d      	mov	r5, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006918:	4618      	mov	r0, r3
 800691a:	f7f9 fe03 	bl	8000524 <__aeabi_i2d>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	4620      	mov	r0, r4
 8006924:	4629      	mov	r1, r5
 8006926:	f7f9 fcb1 	bl	800028c <__adddf3>
 800692a:	4602      	mov	r2, r0
 800692c:	460b      	mov	r3, r1
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	4b1f      	ldr	r3, [pc, #124]	; (80069b4 <compensate_pressure+0x36c>)
 8006938:	f7f9 ff88 	bl	800084c <__aeabi_ddiv>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006944:	f7f9 fca2 	bl	800028c <__adddf3>
 8006948:	4602      	mov	r2, r0
 800694a:	460b      	mov	r3, r1
 800694c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8006950:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006954:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006958:	f7fa f8c0 	bl	8000adc <__aeabi_dcmplt>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d004      	beq.n	800696c <compensate_pressure+0x324>
			pressure = pressure_min;
 8006962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006966:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800696a:	e031      	b.n	80069d0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 800696c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006970:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006974:	f7fa f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d028      	beq.n	80069d0 <compensate_pressure+0x388>
			pressure = pressure_max;
 800697e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006982:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8006986:	e023      	b.n	80069d0 <compensate_pressure+0x388>
 8006988:	00000000 	.word	0x00000000
 800698c:	40b86a00 	.word	0x40b86a00
 8006990:	40ef4000 	.word	0x40ef4000
 8006994:	40e00000 	.word	0x40e00000
 8006998:	40100000 	.word	0x40100000
 800699c:	40f00000 	.word	0x40f00000
 80069a0:	41200000 	.word	0x41200000
 80069a4:	3ff00000 	.word	0x3ff00000
 80069a8:	41300000 	.word	0x41300000
 80069ac:	40b00000 	.word	0x40b00000
 80069b0:	41e00000 	.word	0x41e00000
 80069b4:	40300000 	.word	0x40300000
 80069b8:	00000000 	.word	0x00000000
 80069bc:	40dd4c00 	.word	0x40dd4c00
 80069c0:	00000000 	.word	0x00000000
 80069c4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80069c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80069d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80069d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80069d8:	eeb0 0a47 	vmov.f32	s0, s14
 80069dc:	eef0 0a67 	vmov.f32	s1, s15
 80069e0:	3738      	adds	r7, #56	; 0x38
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bdb0      	pop	{r4, r5, r7, pc}
 80069e6:	bf00      	nop

080069e8 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 80069e8:	b5b0      	push	{r4, r5, r7, lr}
 80069ea:	b094      	sub	sp, #80	; 0x50
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 80069f2:	f04f 0200 	mov.w	r2, #0
 80069f6:	f04f 0300 	mov.w	r3, #0
 80069fa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	4b81      	ldr	r3, [pc, #516]	; (8006c08 <compensate_humidity+0x220>)
 8006a04:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7f9 fd89 	bl	8000524 <__aeabi_i2d>
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	4b7d      	ldr	r3, [pc, #500]	; (8006c0c <compensate_humidity+0x224>)
 8006a18:	f7f9 fc36 	bl	8000288 <__aeabi_dsub>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	460b      	mov	r3, r1
 8006a20:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7f9 fd7a 	bl	8000524 <__aeabi_i2d>
 8006a30:	f04f 0200 	mov.w	r2, #0
 8006a34:	4b76      	ldr	r3, [pc, #472]	; (8006c10 <compensate_humidity+0x228>)
 8006a36:	f7f9 fddf 	bl	80005f8 <__aeabi_dmul>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461d      	mov	r5, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7f9 fd6b 	bl	8000524 <__aeabi_i2d>
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	4b70      	ldr	r3, [pc, #448]	; (8006c14 <compensate_humidity+0x22c>)
 8006a54:	f7f9 fefa 	bl	800084c <__aeabi_ddiv>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	4619      	mov	r1, r3
 8006a60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	4629      	mov	r1, r5
 8006a70:	f7f9 fc0c 	bl	800028c <__adddf3>
 8006a74:	4602      	mov	r2, r0
 8006a76:	460b      	mov	r3, r1
 8006a78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7f9 fd3f 	bl	8000504 <__aeabi_ui2d>
 8006a86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a8a:	f7f9 fbfd 	bl	8000288 <__aeabi_dsub>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7f9 fd41 	bl	8000524 <__aeabi_i2d>
 8006aa2:	f04f 0200 	mov.w	r2, #0
 8006aa6:	4b5c      	ldr	r3, [pc, #368]	; (8006c18 <compensate_humidity+0x230>)
 8006aa8:	f7f9 fed0 	bl	800084c <__aeabi_ddiv>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	7f1b      	ldrb	r3, [r3, #28]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7f9 fd23 	bl	8000504 <__aeabi_ui2d>
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	4b56      	ldr	r3, [pc, #344]	; (8006c1c <compensate_humidity+0x234>)
 8006ac4:	f7f9 fec2 	bl	800084c <__aeabi_ddiv>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ad4:	f7f9 fd90 	bl	80005f8 <__aeabi_dmul>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	4610      	mov	r0, r2
 8006ade:	4619      	mov	r1, r3
 8006ae0:	f04f 0200 	mov.w	r2, #0
 8006ae4:	4b4e      	ldr	r3, [pc, #312]	; (8006c20 <compensate_humidity+0x238>)
 8006ae6:	f7f9 fbd1 	bl	800028c <__adddf3>
 8006aea:	4602      	mov	r2, r0
 8006aec:	460b      	mov	r3, r1
 8006aee:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7f9 fd13 	bl	8000524 <__aeabi_i2d>
 8006afe:	f04f 0200 	mov.w	r2, #0
 8006b02:	4b46      	ldr	r3, [pc, #280]	; (8006c1c <compensate_humidity+0x234>)
 8006b04:	f7f9 fea2 	bl	800084c <__aeabi_ddiv>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4610      	mov	r0, r2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006b14:	f7f9 fd70 	bl	80005f8 <__aeabi_dmul>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	4619      	mov	r1, r3
 8006b20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006b24:	f7f9 fd68 	bl	80005f8 <__aeabi_dmul>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4619      	mov	r1, r3
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	4b3a      	ldr	r3, [pc, #232]	; (8006c20 <compensate_humidity+0x238>)
 8006b36:	f7f9 fba9 	bl	800028c <__adddf3>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8006b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b46:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b4a:	f7f9 fd55 	bl	80005f8 <__aeabi_dmul>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4614      	mov	r4, r2
 8006b54:	461d      	mov	r5, r3
 8006b56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b5a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006b5e:	f7f9 fd4b 	bl	80005f8 <__aeabi_dmul>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4620      	mov	r0, r4
 8006b68:	4629      	mov	r1, r5
 8006b6a:	f7f9 fd45 	bl	80005f8 <__aeabi_dmul>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	7e1b      	ldrb	r3, [r3, #24]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7f9 fcc2 	bl	8000504 <__aeabi_ui2d>
 8006b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b84:	f7f9 fd38 	bl	80005f8 <__aeabi_dmul>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	4b23      	ldr	r3, [pc, #140]	; (8006c24 <compensate_humidity+0x23c>)
 8006b96:	f7f9 fe59 	bl	800084c <__aeabi_ddiv>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	f04f 0000 	mov.w	r0, #0
 8006ba2:	491f      	ldr	r1, [pc, #124]	; (8006c20 <compensate_humidity+0x238>)
 8006ba4:	f7f9 fb70 	bl	8000288 <__aeabi_dsub>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	460b      	mov	r3, r1
 8006bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006bb0:	f7f9 fd22 	bl	80005f8 <__aeabi_dmul>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8006bbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bc0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006bc4:	f7f9 ffa8 	bl	8000b18 <__aeabi_dcmpgt>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d004      	beq.n	8006bd8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8006bce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bd2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8006bd6:	e00c      	b.n	8006bf2 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8006bd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bdc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006be0:	f7f9 ff7c 	bl	8000adc <__aeabi_dcmplt>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d003      	beq.n	8006bf2 <compensate_humidity+0x20a>
		humidity = humidity_min;
 8006bea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006bee:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8006bf2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006bf6:	ec43 2b17 	vmov	d7, r2, r3
}
 8006bfa:	eeb0 0a47 	vmov.f32	s0, s14
 8006bfe:	eef0 0a67 	vmov.f32	s1, s15
 8006c02:	3750      	adds	r7, #80	; 0x50
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bdb0      	pop	{r4, r5, r7, pc}
 8006c08:	40590000 	.word	0x40590000
 8006c0c:	40f2c000 	.word	0x40f2c000
 8006c10:	40500000 	.word	0x40500000
 8006c14:	40d00000 	.word	0x40d00000
 8006c18:	40f00000 	.word	0x40f00000
 8006c1c:	41900000 	.word	0x41900000
 8006c20:	3ff00000 	.word	0x3ff00000
 8006c24:	41200000 	.word	0x41200000

08006c28 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b08a      	sub	sp, #40	; 0x28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8006c30:	2388      	movs	r3, #136	; 0x88
 8006c32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	f107 0310 	add.w	r3, r7, #16
 8006c3e:	2200      	movs	r2, #0
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	605a      	str	r2, [r3, #4]
 8006c44:	609a      	str	r2, [r3, #8]
 8006c46:	60da      	str	r2, [r3, #12]
 8006c48:	611a      	str	r2, [r3, #16]
 8006c4a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8006c4c:	f107 010c 	add.w	r1, r7, #12
 8006c50:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	221a      	movs	r2, #26
 8006c58:	f7fe ffbf 	bl	8005bda <bme280_get_regs>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8006c62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d11d      	bne.n	8006ca6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8006c6a:	f107 030c 	add.w	r3, r7, #12
 8006c6e:	6879      	ldr	r1, [r7, #4]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f000 f84a 	bl	8006d0a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8006c76:	23e1      	movs	r3, #225	; 0xe1
 8006c78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8006c7c:	f107 010c 	add.w	r1, r7, #12
 8006c80:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2207      	movs	r2, #7
 8006c88:	f7fe ffa7 	bl	8005bda <bme280_get_regs>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8006c92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d105      	bne.n	8006ca6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8006c9a:	f107 030c 	add.w	r3, r7, #12
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f000 f8e1 	bl	8006e68 <parse_humidity_calib_data>
		}
	}

	return rslt;
 8006ca6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3728      	adds	r7, #40	; 0x28
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8006cb2:	b480      	push	{r7}
 8006cb4:	b087      	sub	sp, #28
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	60f8      	str	r0, [r7, #12]
 8006cba:	60b9      	str	r1, [r7, #8]
 8006cbc:	607a      	str	r2, [r7, #4]
 8006cbe:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	75fb      	strb	r3, [r7, #23]
 8006cc4:	e016      	b.n	8006cf4 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	441a      	add	r2, r3
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	005b      	lsls	r3, r3, #1
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	68b9      	ldr	r1, [r7, #8]
 8006cd4:	440b      	add	r3, r1
 8006cd6:	7812      	ldrb	r2, [r2, #0]
 8006cd8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	441a      	add	r2, r3
 8006ce0:	7dfb      	ldrb	r3, [r7, #23]
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	440b      	add	r3, r1
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8006cee:	7dfb      	ldrb	r3, [r7, #23]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
 8006cf4:	7dfa      	ldrb	r2, [r7, #23]
 8006cf6:	78fb      	ldrb	r3, [r7, #3]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d3e4      	bcc.n	8006cc6 <interleave_reg_addr+0x14>
	}
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	371c      	adds	r7, #28
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr

08006d0a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b085      	sub	sp, #20
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]
 8006d12:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	3310      	adds	r3, #16
 8006d18:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	b21a      	sxth	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	b21b      	sxth	r3, r3
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	b21b      	sxth	r3, r3
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3303      	adds	r3, #3
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	021b      	lsls	r3, r3, #8
 8006d3c:	b21a      	sxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	3302      	adds	r3, #2
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	b21b      	sxth	r3, r3
 8006d46:	4313      	orrs	r3, r2
 8006d48:	b21a      	sxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3305      	adds	r3, #5
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	b21a      	sxth	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b21b      	sxth	r3, r3
 8006d60:	4313      	orrs	r3, r2
 8006d62:	b21a      	sxth	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	3307      	adds	r3, #7
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	021b      	lsls	r3, r3, #8
 8006d70:	b21a      	sxth	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3306      	adds	r3, #6
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	b21b      	sxth	r3, r3
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	b21b      	sxth	r3, r3
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3309      	adds	r3, #9
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	b21a      	sxth	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	3308      	adds	r3, #8
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	b21b      	sxth	r3, r3
 8006d96:	4313      	orrs	r3, r2
 8006d98:	b21a      	sxth	r2, r3
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	330b      	adds	r3, #11
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	021b      	lsls	r3, r3, #8
 8006da6:	b21a      	sxth	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	330a      	adds	r3, #10
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	b21b      	sxth	r3, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	b21a      	sxth	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	330d      	adds	r3, #13
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	021b      	lsls	r3, r3, #8
 8006dc0:	b21a      	sxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	330c      	adds	r3, #12
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b21b      	sxth	r3, r3
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	b21a      	sxth	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	330f      	adds	r3, #15
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	021b      	lsls	r3, r3, #8
 8006dda:	b21a      	sxth	r2, r3
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	330e      	adds	r3, #14
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b21b      	sxth	r3, r3
 8006de4:	4313      	orrs	r3, r2
 8006de6:	b21a      	sxth	r2, r3
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3311      	adds	r3, #17
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	b21a      	sxth	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3310      	adds	r3, #16
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b21b      	sxth	r3, r3
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	b21a      	sxth	r2, r3
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3313      	adds	r3, #19
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	021b      	lsls	r3, r3, #8
 8006e0e:	b21a      	sxth	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	3312      	adds	r3, #18
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	b21b      	sxth	r3, r3
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	b21a      	sxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3315      	adds	r3, #21
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	021b      	lsls	r3, r3, #8
 8006e28:	b21a      	sxth	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	3314      	adds	r3, #20
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	b21b      	sxth	r3, r3
 8006e32:	4313      	orrs	r3, r2
 8006e34:	b21a      	sxth	r2, r3
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	3317      	adds	r3, #23
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	b21a      	sxth	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	3316      	adds	r3, #22
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	b21b      	sxth	r3, r3
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	b21a      	sxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	7e5a      	ldrb	r2, [r3, #25]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	761a      	strb	r2, [r3, #24]

}
 8006e5c:	bf00      	nop
 8006e5e:	3714      	adds	r7, #20
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b087      	sub	sp, #28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	3310      	adds	r3, #16
 8006e76:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	021b      	lsls	r3, r3, #8
 8006e80:	b21a      	sxth	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	b21b      	sxth	r3, r3
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	b21a      	sxth	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	789a      	ldrb	r2, [r3, #2]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	3303      	adds	r3, #3
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	b25b      	sxtb	r3, r3
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	011b      	lsls	r3, r3, #4
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8006eb6:	8a7a      	ldrh	r2, [r7, #18]
 8006eb8:	8a3b      	ldrh	r3, [r7, #16]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	b21a      	sxth	r2, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3305      	adds	r3, #5
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	b25b      	sxtb	r3, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	011b      	lsls	r3, r3, #4
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	091b      	lsrs	r3, r3, #4
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8006ede:	89fa      	ldrh	r2, [r7, #14]
 8006ee0:	89bb      	ldrh	r3, [r7, #12]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	b21a      	sxth	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3306      	adds	r3, #6
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	b25a      	sxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b085      	sub	sp, #20
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	460a      	mov	r2, r1
 8006f0e:	71fb      	strb	r3, [r7, #7]
 8006f10:	4613      	mov	r3, r2
 8006f12:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8006f14:	2300      	movs	r3, #0
 8006f16:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8006f18:	79fa      	ldrb	r2, [r7, #7]
 8006f1a:	79bb      	ldrb	r3, [r7, #6]
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d002      	beq.n	8006f2a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8006f24:	2301      	movs	r3, #1
 8006f26:	73fb      	strb	r3, [r7, #15]
 8006f28:	e001      	b.n	8006f2e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8006f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <null_ptr_check+0x26>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d007      	beq.n	8006f62 <null_ptr_check+0x26>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <null_ptr_check+0x26>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d102      	bne.n	8006f68 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8006f62:	23ff      	movs	r3, #255	; 0xff
 8006f64:	73fb      	strb	r3, [r7, #15]
 8006f66:	e001      	b.n	8006f6c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8006f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3714      	adds	r7, #20
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af04      	add	r7, sp, #16
 8006f82:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8006f84:	2364      	movs	r3, #100	; 0x64
 8006f86:	9302      	str	r3, [sp, #8]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	f107 030f 	add.w	r3, r7, #15
 8006f90:	9300      	str	r3, [sp, #0]
 8006f92:	2301      	movs	r3, #1
 8006f94:	2275      	movs	r2, #117	; 0x75
 8006f96:	21d0      	movs	r1, #208	; 0xd0
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f003 f901 	bl	800a1a0 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	2b68      	cmp	r3, #104	; 0x68
 8006fa2:	d13d      	bne.n	8007020 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8006fa8:	2364      	movs	r3, #100	; 0x64
 8006faa:	9302      	str	r3, [sp, #8]
 8006fac:	2301      	movs	r3, #1
 8006fae:	9301      	str	r3, [sp, #4]
 8006fb0:	f107 030e 	add.w	r3, r7, #14
 8006fb4:	9300      	str	r3, [sp, #0]
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	226b      	movs	r2, #107	; 0x6b
 8006fba:	21d0      	movs	r1, #208	; 0xd0
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f002 fff5 	bl	8009fac <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8006fc2:	2307      	movs	r3, #7
 8006fc4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8006fc6:	2364      	movs	r3, #100	; 0x64
 8006fc8:	9302      	str	r3, [sp, #8]
 8006fca:	2301      	movs	r3, #1
 8006fcc:	9301      	str	r3, [sp, #4]
 8006fce:	f107 030e 	add.w	r3, r7, #14
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	2219      	movs	r2, #25
 8006fd8:	21d0      	movs	r1, #208	; 0xd0
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 ffe6 	bl	8009fac <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006fe4:	2364      	movs	r3, #100	; 0x64
 8006fe6:	9302      	str	r3, [sp, #8]
 8006fe8:	2301      	movs	r3, #1
 8006fea:	9301      	str	r3, [sp, #4]
 8006fec:	f107 030e 	add.w	r3, r7, #14
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	221c      	movs	r2, #28
 8006ff6:	21d0      	movs	r1, #208	; 0xd0
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f002 ffd7 	bl	8009fac <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8007002:	2364      	movs	r3, #100	; 0x64
 8007004:	9302      	str	r3, [sp, #8]
 8007006:	2301      	movs	r3, #1
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	f107 030e 	add.w	r3, r7, #14
 800700e:	9300      	str	r3, [sp, #0]
 8007010:	2301      	movs	r3, #1
 8007012:	221b      	movs	r2, #27
 8007014:	21d0      	movs	r1, #208	; 0xd0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f002 ffc8 	bl	8009fac <HAL_I2C_Mem_Write>
        return 0;
 800701c:	2300      	movs	r3, #0
 800701e:	e000      	b.n	8007022 <MPU6050_Init+0xa6>
    }
    return 1;
 8007020:	2301      	movs	r3, #1
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	0000      	movs	r0, r0
 800702c:	0000      	movs	r0, r0
	...

08007030 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8007030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007034:	b094      	sub	sp, #80	; 0x50
 8007036:	af04      	add	r7, sp, #16
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800703c:	2364      	movs	r3, #100	; 0x64
 800703e:	9302      	str	r3, [sp, #8]
 8007040:	230e      	movs	r3, #14
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f107 0308 	add.w	r3, r7, #8
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	2301      	movs	r3, #1
 800704c:	223b      	movs	r2, #59	; 0x3b
 800704e:	21d0      	movs	r1, #208	; 0xd0
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f003 f8a5 	bl	800a1a0 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8007056:	7a3b      	ldrb	r3, [r7, #8]
 8007058:	021b      	lsls	r3, r3, #8
 800705a:	b21a      	sxth	r2, r3
 800705c:	7a7b      	ldrb	r3, [r7, #9]
 800705e:	b21b      	sxth	r3, r3
 8007060:	4313      	orrs	r3, r2
 8007062:	b21a      	sxth	r2, r3
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8007068:	7abb      	ldrb	r3, [r7, #10]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	b21a      	sxth	r2, r3
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	b21b      	sxth	r3, r3
 8007072:	4313      	orrs	r3, r2
 8007074:	b21a      	sxth	r2, r3
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800707a:	7b3b      	ldrb	r3, [r7, #12]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	b21a      	sxth	r2, r3
 8007080:	7b7b      	ldrb	r3, [r7, #13]
 8007082:	b21b      	sxth	r3, r3
 8007084:	4313      	orrs	r3, r2
 8007086:	b21a      	sxth	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 800708c:	7bbb      	ldrb	r3, [r7, #14]
 800708e:	021b      	lsls	r3, r3, #8
 8007090:	b21a      	sxth	r2, r3
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	b21b      	sxth	r3, r3
 8007096:	4313      	orrs	r3, r2
 8007098:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 800709a:	7c3b      	ldrb	r3, [r7, #16]
 800709c:	021b      	lsls	r3, r3, #8
 800709e:	b21a      	sxth	r2, r3
 80070a0:	7c7b      	ldrb	r3, [r7, #17]
 80070a2:	b21b      	sxth	r3, r3
 80070a4:	4313      	orrs	r3, r2
 80070a6:	b21a      	sxth	r2, r3
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80070ac:	7cbb      	ldrb	r3, [r7, #18]
 80070ae:	021b      	lsls	r3, r3, #8
 80070b0:	b21a      	sxth	r2, r3
 80070b2:	7cfb      	ldrb	r3, [r7, #19]
 80070b4:	b21b      	sxth	r3, r3
 80070b6:	4313      	orrs	r3, r2
 80070b8:	b21a      	sxth	r2, r3
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80070be:	7d3b      	ldrb	r3, [r7, #20]
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	b21a      	sxth	r2, r3
 80070c4:	7d7b      	ldrb	r3, [r7, #21]
 80070c6:	b21b      	sxth	r3, r3
 80070c8:	4313      	orrs	r3, r2
 80070ca:	b21a      	sxth	r2, r3
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7f9 fa24 	bl	8000524 <__aeabi_i2d>
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	4bbd      	ldr	r3, [pc, #756]	; (80073d8 <MPU6050_Read_All+0x3a8>)
 80070e2:	f7f9 fbb3 	bl	800084c <__aeabi_ddiv>
 80070e6:	4602      	mov	r2, r0
 80070e8:	460b      	mov	r3, r1
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7f9 fa14 	bl	8000524 <__aeabi_i2d>
 80070fc:	f04f 0200 	mov.w	r2, #0
 8007100:	4bb5      	ldr	r3, [pc, #724]	; (80073d8 <MPU6050_Read_All+0x3a8>)
 8007102:	f7f9 fba3 	bl	800084c <__aeabi_ddiv>
 8007106:	4602      	mov	r2, r0
 8007108:	460b      	mov	r3, r1
 800710a:	6839      	ldr	r1, [r7, #0]
 800710c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007116:	4618      	mov	r0, r3
 8007118:	f7f9 fa04 	bl	8000524 <__aeabi_i2d>
 800711c:	a3a8      	add	r3, pc, #672	; (adr r3, 80073c0 <MPU6050_Read_All+0x390>)
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f7f9 fb93 	bl	800084c <__aeabi_ddiv>
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8007130:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8007134:	ee07 3a90 	vmov	s15, r3
 8007138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800713c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80073dc <MPU6050_Read_All+0x3ac>
 8007140:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007144:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 80073e0 <MPU6050_Read_All+0x3b0>
 8007148:	ee77 7a87 	vadd.f32	s15, s15, s14
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8007158:	4618      	mov	r0, r3
 800715a:	f7f9 f9e3 	bl	8000524 <__aeabi_i2d>
 800715e:	a39a      	add	r3, pc, #616	; (adr r3, 80073c8 <MPU6050_Read_All+0x398>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 fb72 	bl	800084c <__aeabi_ddiv>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8007178:	4618      	mov	r0, r3
 800717a:	f7f9 f9d3 	bl	8000524 <__aeabi_i2d>
 800717e:	a392      	add	r3, pc, #584	; (adr r3, 80073c8 <MPU6050_Read_All+0x398>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7f9 fb62 	bl	800084c <__aeabi_ddiv>
 8007188:	4602      	mov	r2, r0
 800718a:	460b      	mov	r3, r1
 800718c:	6839      	ldr	r1, [r7, #0]
 800718e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8007198:	4618      	mov	r0, r3
 800719a:	f7f9 f9c3 	bl	8000524 <__aeabi_i2d>
 800719e:	a38a      	add	r3, pc, #552	; (adr r3, 80073c8 <MPU6050_Read_All+0x398>)
 80071a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a4:	f7f9 fb52 	bl	800084c <__aeabi_ddiv>
 80071a8:	4602      	mov	r2, r0
 80071aa:	460b      	mov	r3, r1
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 80071b2:	f000 fe25 	bl	8007e00 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	4b8a      	ldr	r3, [pc, #552]	; (80073e4 <MPU6050_Read_All+0x3b4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	1ad3      	subs	r3, r2, r3
 80071be:	4618      	mov	r0, r3
 80071c0:	f7f9 f9a0 	bl	8000504 <__aeabi_ui2d>
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	4b87      	ldr	r3, [pc, #540]	; (80073e8 <MPU6050_Read_All+0x3b8>)
 80071ca:	f7f9 fb3f 	bl	800084c <__aeabi_ddiv>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 80071d6:	f000 fe13 	bl	8007e00 <HAL_GetTick>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a81      	ldr	r2, [pc, #516]	; (80073e4 <MPU6050_Read_All+0x3b4>)
 80071de:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071e6:	461a      	mov	r2, r3
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80071ee:	fb03 f202 	mul.w	r2, r3, r2
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80071f8:	4619      	mov	r1, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007200:	fb03 f301 	mul.w	r3, r3, r1
 8007204:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8007206:	4618      	mov	r0, r3
 8007208:	f7f9 f98c 	bl	8000524 <__aeabi_i2d>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	ec43 2b10 	vmov	d0, r2, r3
 8007214:	f015 ffa0 	bl	801d158 <sqrt>
 8007218:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 800721c:	f04f 0200 	mov.w	r2, #0
 8007220:	f04f 0300 	mov.w	r3, #0
 8007224:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007228:	f7f9 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d11f      	bne.n	8007272 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007238:	4618      	mov	r0, r3
 800723a:	f7f9 f973 	bl	8000524 <__aeabi_i2d>
 800723e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007242:	f7f9 fb03 	bl	800084c <__aeabi_ddiv>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	ec43 2b17 	vmov	d7, r2, r3
 800724e:	eeb0 0a47 	vmov.f32	s0, s14
 8007252:	eef0 0a67 	vmov.f32	s1, s15
 8007256:	f015 fdd3 	bl	801ce00 <atan>
 800725a:	ec51 0b10 	vmov	r0, r1, d0
 800725e:	a35c      	add	r3, pc, #368	; (adr r3, 80073d0 <MPU6050_Read_All+0x3a0>)
 8007260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007264:	f7f9 f9c8 	bl	80005f8 <__aeabi_dmul>
 8007268:	4602      	mov	r2, r0
 800726a:	460b      	mov	r3, r1
 800726c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007270:	e005      	b.n	800727e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8007272:	f04f 0200 	mov.w	r2, #0
 8007276:	f04f 0300 	mov.w	r3, #0
 800727a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007284:	425b      	negs	r3, r3
 8007286:	4618      	mov	r0, r3
 8007288:	f7f9 f94c 	bl	8000524 <__aeabi_i2d>
 800728c:	4682      	mov	sl, r0
 800728e:	468b      	mov	fp, r1
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007296:	4618      	mov	r0, r3
 8007298:	f7f9 f944 	bl	8000524 <__aeabi_i2d>
 800729c:	4602      	mov	r2, r0
 800729e:	460b      	mov	r3, r1
 80072a0:	ec43 2b11 	vmov	d1, r2, r3
 80072a4:	ec4b ab10 	vmov	d0, sl, fp
 80072a8:	f015 ff53 	bl	801d152 <atan2>
 80072ac:	ec51 0b10 	vmov	r0, r1, d0
 80072b0:	a347      	add	r3, pc, #284	; (adr r3, 80073d0 <MPU6050_Read_All+0x3a0>)
 80072b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b6:	f7f9 f99f 	bl	80005f8 <__aeabi_dmul>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 80072c2:	f04f 0200 	mov.w	r2, #0
 80072c6:	4b49      	ldr	r3, [pc, #292]	; (80073ec <MPU6050_Read_All+0x3bc>)
 80072c8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072cc:	f7f9 fc06 	bl	8000adc <__aeabi_dcmplt>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <MPU6050_Read_All+0x2bc>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80072dc:	f04f 0200 	mov.w	r2, #0
 80072e0:	4b43      	ldr	r3, [pc, #268]	; (80073f0 <MPU6050_Read_All+0x3c0>)
 80072e2:	f7f9 fc19 	bl	8000b18 <__aeabi_dcmpgt>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d114      	bne.n	8007316 <MPU6050_Read_All+0x2e6>
 80072ec:	f04f 0200 	mov.w	r2, #0
 80072f0:	4b3f      	ldr	r3, [pc, #252]	; (80073f0 <MPU6050_Read_All+0x3c0>)
 80072f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072f6:	f7f9 fc0f 	bl	8000b18 <__aeabi_dcmpgt>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <MPU6050_Read_All+0x2fc>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8007306:	f04f 0200 	mov.w	r2, #0
 800730a:	4b38      	ldr	r3, [pc, #224]	; (80073ec <MPU6050_Read_All+0x3bc>)
 800730c:	f7f9 fbe6 	bl	8000adc <__aeabi_dcmplt>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00a      	beq.n	800732c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8007316:	4937      	ldr	r1, [pc, #220]	; (80073f4 <MPU6050_Read_All+0x3c4>)
 8007318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800731c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007326:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800732a:	e014      	b.n	8007356 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8007332:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8007336:	eeb0 1a47 	vmov.f32	s2, s14
 800733a:	eef0 1a67 	vmov.f32	s3, s15
 800733e:	ed97 0b06 	vldr	d0, [r7, #24]
 8007342:	482c      	ldr	r0, [pc, #176]	; (80073f4 <MPU6050_Read_All+0x3c4>)
 8007344:	f000 f85a 	bl	80073fc <Kalman_getAngle>
 8007348:	eeb0 7a40 	vmov.f32	s14, s0
 800734c:	eef0 7a60 	vmov.f32	s15, s1
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800735c:	4690      	mov	r8, r2
 800735e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	4b22      	ldr	r3, [pc, #136]	; (80073f0 <MPU6050_Read_All+0x3c0>)
 8007368:	4640      	mov	r0, r8
 800736a:	4649      	mov	r1, r9
 800736c:	f7f9 fbd4 	bl	8000b18 <__aeabi_dcmpgt>
 8007370:	4603      	mov	r3, r0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d008      	beq.n	8007388 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800737c:	4614      	mov	r4, r2
 800737e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800738e:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8007392:	eeb0 1a47 	vmov.f32	s2, s14
 8007396:	eef0 1a67 	vmov.f32	s3, s15
 800739a:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 800739e:	4816      	ldr	r0, [pc, #88]	; (80073f8 <MPU6050_Read_All+0x3c8>)
 80073a0:	f000 f82c 	bl	80073fc <Kalman_getAngle>
 80073a4:	eeb0 7a40 	vmov.f32	s14, s0
 80073a8:	eef0 7a60 	vmov.f32	s15, s1
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 80073b2:	bf00      	nop
 80073b4:	3740      	adds	r7, #64	; 0x40
 80073b6:	46bd      	mov	sp, r7
 80073b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073bc:	f3af 8000 	nop.w
 80073c0:	00000000 	.word	0x00000000
 80073c4:	40cc2900 	.word	0x40cc2900
 80073c8:	00000000 	.word	0x00000000
 80073cc:	40606000 	.word	0x40606000
 80073d0:	1a63c1f8 	.word	0x1a63c1f8
 80073d4:	404ca5dc 	.word	0x404ca5dc
 80073d8:	40d00000 	.word	0x40d00000
 80073dc:	43aa0000 	.word	0x43aa0000
 80073e0:	42121eb8 	.word	0x42121eb8
 80073e4:	200130a0 	.word	0x200130a0
 80073e8:	408f4000 	.word	0x408f4000
 80073ec:	c0568000 	.word	0xc0568000
 80073f0:	40568000 	.word	0x40568000
 80073f4:	20000080 	.word	0x20000080
 80073f8:	20000038 	.word	0x20000038

080073fc <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 80073fc:	b5b0      	push	{r4, r5, r7, lr}
 80073fe:	b096      	sub	sp, #88	; 0x58
 8007400:	af00      	add	r7, sp, #0
 8007402:	61f8      	str	r0, [r7, #28]
 8007404:	ed87 0b04 	vstr	d0, [r7, #16]
 8007408:	ed87 1b02 	vstr	d1, [r7, #8]
 800740c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8007410:	69fb      	ldr	r3, [r7, #28]
 8007412:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800741a:	f7f8 ff35 	bl	8000288 <__aeabi_dsub>
 800741e:	4602      	mov	r2, r0
 8007420:	460b      	mov	r3, r1
 8007422:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800742c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007430:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007434:	f7f9 f8e0 	bl	80005f8 <__aeabi_dmul>
 8007438:	4602      	mov	r2, r0
 800743a:	460b      	mov	r3, r1
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f7f8 ff24 	bl	800028c <__adddf3>
 8007444:	4602      	mov	r2, r0
 8007446:	460b      	mov	r3, r1
 8007448:	69f9      	ldr	r1, [r7, #28]
 800744a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800745a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800745e:	f7f9 f8cb 	bl	80005f8 <__aeabi_dmul>
 8007462:	4602      	mov	r2, r0
 8007464:	460b      	mov	r3, r1
 8007466:	4610      	mov	r0, r2
 8007468:	4619      	mov	r1, r3
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8007470:	f7f8 ff0a 	bl	8000288 <__aeabi_dsub>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4610      	mov	r0, r2
 800747a:	4619      	mov	r1, r3
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8007482:	f7f8 ff01 	bl	8000288 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4610      	mov	r0, r2
 800748c:	4619      	mov	r1, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007494:	f7f8 fefa 	bl	800028c <__adddf3>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4610      	mov	r0, r2
 800749e:	4619      	mov	r1, r3
 80074a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a4:	f7f9 f8a8 	bl	80005f8 <__aeabi_dmul>
 80074a8:	4602      	mov	r2, r0
 80074aa:	460b      	mov	r3, r1
 80074ac:	4620      	mov	r0, r4
 80074ae:	4629      	mov	r1, r5
 80074b0:	f7f8 feec 	bl	800028c <__adddf3>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	69f9      	ldr	r1, [r7, #28]
 80074ba:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80074be:	69fb      	ldr	r3, [r7, #28]
 80074c0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80074ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ce:	f7f9 f893 	bl	80005f8 <__aeabi_dmul>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	4620      	mov	r0, r4
 80074d8:	4629      	mov	r1, r5
 80074da:	f7f8 fed5 	bl	8000288 <__aeabi_dsub>
 80074de:	4602      	mov	r2, r0
 80074e0:	460b      	mov	r3, r1
 80074e2:	69f9      	ldr	r1, [r7, #28]
 80074e4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80074f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074f8:	f7f9 f87e 	bl	80005f8 <__aeabi_dmul>
 80074fc:	4602      	mov	r2, r0
 80074fe:	460b      	mov	r3, r1
 8007500:	4620      	mov	r0, r4
 8007502:	4629      	mov	r1, r5
 8007504:	f7f8 fec0 	bl	8000288 <__aeabi_dsub>
 8007508:	4602      	mov	r2, r0
 800750a:	460b      	mov	r3, r1
 800750c:	69f9      	ldr	r1, [r7, #28]
 800750e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800751e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007522:	f7f9 f869 	bl	80005f8 <__aeabi_dmul>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	4620      	mov	r0, r4
 800752c:	4629      	mov	r1, r5
 800752e:	f7f8 fead 	bl	800028c <__adddf3>
 8007532:	4602      	mov	r2, r0
 8007534:	460b      	mov	r3, r1
 8007536:	69f9      	ldr	r1, [r7, #28]
 8007538:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007548:	f7f8 fea0 	bl	800028c <__adddf3>
 800754c:	4602      	mov	r2, r0
 800754e:	460b      	mov	r3, r1
 8007550:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800755a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800755e:	f7f9 f975 	bl	800084c <__aeabi_ddiv>
 8007562:	4602      	mov	r2, r0
 8007564:	460b      	mov	r3, r1
 8007566:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8007570:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007574:	f7f9 f96a 	bl	800084c <__aeabi_ddiv>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007586:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800758a:	f7f8 fe7d 	bl	8000288 <__aeabi_dsub>
 800758e:	4602      	mov	r2, r0
 8007590:	460b      	mov	r3, r1
 8007592:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800759c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80075a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4620      	mov	r0, r4
 80075ae:	4629      	mov	r1, r5
 80075b0:	f7f8 fe6c 	bl	800028c <__adddf3>
 80075b4:	4602      	mov	r2, r0
 80075b6:	460b      	mov	r3, r1
 80075b8:	69f9      	ldr	r1, [r7, #28]
 80075ba:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80075be:	69fb      	ldr	r3, [r7, #28]
 80075c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80075c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80075cc:	f7f9 f814 	bl	80005f8 <__aeabi_dmul>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4620      	mov	r0, r4
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f8 fe58 	bl	800028c <__adddf3>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	69f9      	ldr	r1, [r7, #28]
 80075e2:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80075ec:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80075f6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8007600:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8007604:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007608:	f7f8 fff6 	bl	80005f8 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4620      	mov	r0, r4
 8007612:	4629      	mov	r1, r5
 8007614:	f7f8 fe38 	bl	8000288 <__aeabi_dsub>
 8007618:	4602      	mov	r2, r0
 800761a:	460b      	mov	r3, r1
 800761c:	69f9      	ldr	r1, [r7, #28]
 800761e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8007628:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800762c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007630:	f7f8 ffe2 	bl	80005f8 <__aeabi_dmul>
 8007634:	4602      	mov	r2, r0
 8007636:	460b      	mov	r3, r1
 8007638:	4620      	mov	r0, r4
 800763a:	4629      	mov	r1, r5
 800763c:	f7f8 fe24 	bl	8000288 <__aeabi_dsub>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	69f9      	ldr	r1, [r7, #28]
 8007646:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8007650:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007654:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007658:	f7f8 ffce 	bl	80005f8 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4620      	mov	r0, r4
 8007662:	4629      	mov	r1, r5
 8007664:	f7f8 fe10 	bl	8000288 <__aeabi_dsub>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	69f9      	ldr	r1, [r7, #28]
 800766e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8007678:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800767c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007680:	f7f8 ffba 	bl	80005f8 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4620      	mov	r0, r4
 800768a:	4629      	mov	r1, r5
 800768c:	f7f8 fdfc 	bl	8000288 <__aeabi_dsub>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	69f9      	ldr	r1, [r7, #28]
 8007696:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80076a0:	ec43 2b17 	vmov	d7, r2, r3
};
 80076a4:	eeb0 0a47 	vmov.f32	s0, s14
 80076a8:	eef0 0a67 	vmov.f32	s1, s15
 80076ac:	3758      	adds	r7, #88	; 0x58
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080076b4 <ms5611_read_i2c>:
 * @param length length of bytes to request from MS5611
 * @param output output data
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_read_i2c(uint8_t register_address,uint8_t length,uint8_t* output)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b088      	sub	sp, #32
 80076b8:	af04      	add	r7, sp, #16
 80076ba:	4603      	mov	r3, r0
 80076bc:	603a      	str	r2, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
 80076c0:	460b      	mov	r3, r1
 80076c2:	71bb      	strb	r3, [r7, #6]
	//return I2C_read(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,output);
	uint8_t STATUS = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, output, length, 1000);
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	79bb      	ldrb	r3, [r7, #6]
 80076ce:	b29b      	uxth	r3, r3
 80076d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80076d4:	9102      	str	r1, [sp, #8]
 80076d6:	9301      	str	r3, [sp, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	2301      	movs	r3, #1
 80076de:	21ee      	movs	r1, #238	; 0xee
 80076e0:	4804      	ldr	r0, [pc, #16]	; (80076f4 <ms5611_read_i2c+0x40>)
 80076e2:	f002 fd5d 	bl	800a1a0 <HAL_I2C_Mem_Read>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	2000ac90 	.word	0x2000ac90

080076f8 <ms5611_write_i2c>:
 * @param length length of bytes to write to MS5611
 * @param output buffer to hold data to be sent
 * @return HAL_STATUS, 0(HAL_OK) = success
 */
uint8_t ms5611_write_i2c(uint8_t register_address,uint8_t length,uint8_t* input)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af04      	add	r7, sp, #16
 80076fe:	4603      	mov	r3, r0
 8007700:	603a      	str	r2, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
 8007704:	460b      	mov	r3, r1
 8007706:	71bb      	strb	r3, [r7, #6]
	//STATUS = I2C_write(ms5611_i2cx,MS5611_I2C_ADDR,register_address,length,input);
	uint8_t STATUS = 0;
 8007708:	2300      	movs	r3, #0
 800770a:	73fb      	strb	r3, [r7, #15]
	STATUS = HAL_I2C_Mem_Read(&hi2c2, MS5611_I2C_ADDR<<1, register_address, 1, input, length, 1000);
 800770c:	79fb      	ldrb	r3, [r7, #7]
 800770e:	b29a      	uxth	r2, r3
 8007710:	79bb      	ldrb	r3, [r7, #6]
 8007712:	b29b      	uxth	r3, r3
 8007714:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007718:	9102      	str	r1, [sp, #8]
 800771a:	9301      	str	r3, [sp, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2301      	movs	r3, #1
 8007722:	21ee      	movs	r1, #238	; 0xee
 8007724:	4804      	ldr	r0, [pc, #16]	; (8007738 <ms5611_write_i2c+0x40>)
 8007726:	f002 fd3b 	bl	800a1a0 <HAL_I2C_Mem_Read>
 800772a:	4603      	mov	r3, r0
 800772c:	73fb      	strb	r3, [r7, #15]
	return STATUS;
 800772e:	7bfb      	ldrb	r3, [r7, #15]

}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2000ac90 	.word	0x2000ac90

0800773c <ms5611_init>:
}

/**
 * Initialize MS5611: read and store factory calibration data.
 */
void ms5611_init(){
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
	//read 6 factory calibration data
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e01c      	b.n	8007782 <ms5611_init+0x46>
		uint8_t reg_addr = MS5611_CMD_READ_PROM + (i << 1);//interval 2
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	b2db      	uxtb	r3, r3
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	b2db      	uxtb	r3, r3
 8007750:	3b5e      	subs	r3, #94	; 0x5e
 8007752:	70fb      	strb	r3, [r7, #3]
		uint8_t buffer[2] = {0};
 8007754:	2300      	movs	r3, #0
 8007756:	803b      	strh	r3, [r7, #0]
		ms5611_read_i2c(reg_addr,2,buffer);
 8007758:	463a      	mov	r2, r7
 800775a:	78fb      	ldrb	r3, [r7, #3]
 800775c:	2102      	movs	r1, #2
 800775e:	4618      	mov	r0, r3
 8007760:	f7ff ffa8 	bl	80076b4 <ms5611_read_i2c>

		fc[i] = (uint16_t)(buffer[0] << 8 | buffer[1]);
 8007764:	783b      	ldrb	r3, [r7, #0]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	b21a      	sxth	r2, r3
 800776a:	787b      	ldrb	r3, [r7, #1]
 800776c:	b21b      	sxth	r3, r3
 800776e:	4313      	orrs	r3, r2
 8007770:	b21b      	sxth	r3, r3
 8007772:	b299      	uxth	r1, r3
 8007774:	4a07      	ldr	r2, [pc, #28]	; (8007794 <ms5611_init+0x58>)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < NUM_CALIBRATION_DATA; i++){
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3301      	adds	r3, #1
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b05      	cmp	r3, #5
 8007786:	dddf      	ble.n	8007748 <ms5611_init+0xc>
	}
}
 8007788:	bf00      	nop
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	200130a8 	.word	0x200130a8

08007798 <ms5611_update_pressure>:

/**
 * Read raw pressure from MS5611.
 */
void ms5611_update_pressure(){
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800779e:	4a17      	ldr	r2, [pc, #92]	; (80077fc <ms5611_update_pressure+0x64>)
 80077a0:	463b      	mov	r3, r7
 80077a2:	6812      	ldr	r2, [r2, #0]
 80077a4:	4611      	mov	r1, r2
 80077a6:	8019      	strh	r1, [r3, #0]
 80077a8:	3302      	adds	r3, #2
 80077aa:	0c12      	lsrs	r2, r2, #16
 80077ac:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D1 | (selected_osr << 1),0,buffer);
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <ms5611_update_pressure+0x68>)
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	005b      	lsls	r3, r3, #1
 80077b4:	b25b      	sxtb	r3, r3
 80077b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ba:	b25b      	sxtb	r3, r3
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	463a      	mov	r2, r7
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7ff ff98 	bl	80076f8 <ms5611_write_i2c>
 80077c8:	4603      	mov	r3, r0
 80077ca:	607b      	str	r3, [r7, #4]

	osDelay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 80077cc:	200c      	movs	r0, #12
 80077ce:	f00d ffd1 	bl	8015774 <osDelay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 80077d2:	463b      	mov	r3, r7
 80077d4:	461a      	mov	r2, r3
 80077d6:	2103      	movs	r1, #3
 80077d8:	2000      	movs	r0, #0
 80077da:	f7ff ff6b 	bl	80076b4 <ms5611_read_i2c>
 80077de:	4603      	mov	r3, r0
 80077e0:	607b      	str	r3, [r7, #4]
	raw_pressure = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 80077e2:	783b      	ldrb	r3, [r7, #0]
 80077e4:	041a      	lsls	r2, r3, #16
 80077e6:	787b      	ldrb	r3, [r7, #1]
 80077e8:	021b      	lsls	r3, r3, #8
 80077ea:	4313      	orrs	r3, r2
 80077ec:	78ba      	ldrb	r2, [r7, #2]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	4a04      	ldr	r2, [pc, #16]	; (8007804 <ms5611_update_pressure+0x6c>)
 80077f2:	6013      	str	r3, [r2, #0]

}
 80077f4:	bf00      	nop
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	0801dc58 	.word	0x0801dc58
 8007800:	200000c8 	.word	0x200000c8
 8007804:	200130a4 	.word	0x200130a4

08007808 <ms5611_update_temperature>:

/**
 * Read raw temperature from MS5611.
 */
void ms5611_update_temperature(){
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
	uint8_t buffer[3] = {0x00,0x00,0x00};
 800780e:	4a17      	ldr	r2, [pc, #92]	; (800786c <ms5611_update_temperature+0x64>)
 8007810:	463b      	mov	r3, r7
 8007812:	6812      	ldr	r2, [r2, #0]
 8007814:	4611      	mov	r1, r2
 8007816:	8019      	strh	r1, [r3, #0]
 8007818:	3302      	adds	r3, #2
 800781a:	0c12      	lsrs	r2, r2, #16
 800781c:	701a      	strb	r2, [r3, #0]
	int state;
	state = ms5611_write_i2c(MS5611_CMD_CONVERT_D2 | (selected_osr << 1),0,buffer);
 800781e:	4b14      	ldr	r3, [pc, #80]	; (8007870 <ms5611_update_temperature+0x68>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	b25b      	sxtb	r3, r3
 8007826:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800782a:	b25b      	sxtb	r3, r3
 800782c:	b2db      	uxtb	r3, r3
 800782e:	463a      	mov	r2, r7
 8007830:	2100      	movs	r1, #0
 8007832:	4618      	mov	r0, r3
 8007834:	f7ff ff60 	bl	80076f8 <ms5611_write_i2c>
 8007838:	4603      	mov	r3, r0
 800783a:	607b      	str	r3, [r7, #4]

	osDelay(12);//time delay necessary for ADC to convert, must be >= 9.02ms
 800783c:	200c      	movs	r0, #12
 800783e:	f00d ff99 	bl	8015774 <osDelay>

	state = ms5611_read_i2c(MS5611_CMD_ADC_READ,3,buffer);
 8007842:	463b      	mov	r3, r7
 8007844:	461a      	mov	r2, r3
 8007846:	2103      	movs	r1, #3
 8007848:	2000      	movs	r0, #0
 800784a:	f7ff ff33 	bl	80076b4 <ms5611_read_i2c>
 800784e:	4603      	mov	r3, r0
 8007850:	607b      	str	r3, [r7, #4]
	raw_temperature = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | ((uint32_t)buffer[2]);
 8007852:	783b      	ldrb	r3, [r7, #0]
 8007854:	041a      	lsls	r2, r3, #16
 8007856:	787b      	ldrb	r3, [r7, #1]
 8007858:	021b      	lsls	r3, r3, #8
 800785a:	4313      	orrs	r3, r2
 800785c:	78ba      	ldrb	r2, [r7, #2]
 800785e:	4313      	orrs	r3, r2
 8007860:	4a04      	ldr	r2, [pc, #16]	; (8007874 <ms5611_update_temperature+0x6c>)
 8007862:	6013      	str	r3, [r2, #0]
}
 8007864:	bf00      	nop
 8007866:	3708      	adds	r7, #8
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	0801dc58 	.word	0x0801dc58
 8007870:	200000c8 	.word	0x200000c8
 8007874:	200130b4 	.word	0x200130b4

08007878 <ms5611_update>:

/**
 *	Read raw temperature and pressure from MS5611
 */
void ms5611_update(){
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
	ms5611_update_temperature();
 800787c:	f7ff ffc4 	bl	8007808 <ms5611_update_temperature>
	ms5611_update_pressure();
 8007880:	f7ff ff8a 	bl	8007798 <ms5611_update_pressure>
}
 8007884:	bf00      	nop
 8007886:	bd80      	pop	{r7, pc}

08007888 <ms5611_get_temperature>:

/**
 * Get calibrated temperature, unit: Celsius degrees
 * @return calibrated temperature
 */
double ms5611_get_temperature(){
 8007888:	b5b0      	push	{r4, r5, r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800788e:	4b38      	ldr	r3, [pc, #224]	; (8007970 <ms5611_get_temperature+0xe8>)
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	4b38      	ldr	r3, [pc, #224]	; (8007974 <ms5611_get_temperature+0xec>)
 8007894:	891b      	ldrh	r3, [r3, #8]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	60fb      	str	r3, [r7, #12]
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800789c:	68f8      	ldr	r0, [r7, #12]
 800789e:	f7f8 fe31 	bl	8000504 <__aeabi_ui2d>
 80078a2:	4604      	mov	r4, r0
 80078a4:	460d      	mov	r5, r1
 80078a6:	4b33      	ldr	r3, [pc, #204]	; (8007974 <ms5611_get_temperature+0xec>)
 80078a8:	895b      	ldrh	r3, [r3, #10]
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7f8 fe3a 	bl	8000524 <__aeabi_i2d>
 80078b0:	f04f 0200 	mov.w	r2, #0
 80078b4:	4b30      	ldr	r3, [pc, #192]	; (8007978 <ms5611_get_temperature+0xf0>)
 80078b6:	f7f8 ffc9 	bl	800084c <__aeabi_ddiv>
 80078ba:	4602      	mov	r2, r0
 80078bc:	460b      	mov	r3, r1
 80078be:	4620      	mov	r0, r4
 80078c0:	4629      	mov	r1, r5
 80078c2:	f7f8 fe99 	bl	80005f8 <__aeabi_dmul>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	4610      	mov	r0, r2
 80078cc:	4619      	mov	r1, r3
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	4b2a      	ldr	r3, [pc, #168]	; (800797c <ms5611_get_temperature+0xf4>)
 80078d4:	f7f8 fcda 	bl	800028c <__adddf3>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0;
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	if (TEMP < 2000){
 80078ec:	f04f 0200 	mov.w	r2, #0
 80078f0:	4b22      	ldr	r3, [pc, #136]	; (800797c <ms5611_get_temperature+0xf4>)
 80078f2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078f6:	f7f9 f8f1 	bl	8000adc <__aeabi_dcmplt>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d016      	beq.n	800792e <ms5611_get_temperature+0xa6>
		//temperature < 20 Celsius
		T2 = dT * (dT / (2147483648.0));
 8007900:	68f8      	ldr	r0, [r7, #12]
 8007902:	f7f8 fdff 	bl	8000504 <__aeabi_ui2d>
 8007906:	4604      	mov	r4, r0
 8007908:	460d      	mov	r5, r1
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7f8 fdfa 	bl	8000504 <__aeabi_ui2d>
 8007910:	f04f 0200 	mov.w	r2, #0
 8007914:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <ms5611_get_temperature+0xf8>)
 8007916:	f7f8 ff99 	bl	800084c <__aeabi_ddiv>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4620      	mov	r0, r4
 8007920:	4629      	mov	r1, r5
 8007922:	f7f8 fe69 	bl	80005f8 <__aeabi_dmul>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	}

	TEMP = TEMP - T2;
 800792e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007932:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007936:	f7f8 fca7 	bl	8000288 <__aeabi_dsub>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	e9c7 2300 	strd	r2, r3, [r7]
	TEMP = TEMP / 100;
 8007942:	f04f 0200 	mov.w	r2, #0
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <ms5611_get_temperature+0xfc>)
 8007948:	e9d7 0100 	ldrd	r0, r1, [r7]
 800794c:	f7f8 ff7e 	bl	800084c <__aeabi_ddiv>
 8007950:	4602      	mov	r2, r0
 8007952:	460b      	mov	r3, r1
 8007954:	e9c7 2300 	strd	r2, r3, [r7]
	return TEMP;
 8007958:	e9d7 2300 	ldrd	r2, r3, [r7]
 800795c:	ec43 2b17 	vmov	d7, r2, r3
}
 8007960:	eeb0 0a47 	vmov.f32	s0, s14
 8007964:	eef0 0a67 	vmov.f32	s1, s15
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bdb0      	pop	{r4, r5, r7, pc}
 800796e:	bf00      	nop
 8007970:	200130b4 	.word	0x200130b4
 8007974:	200130a8 	.word	0x200130a8
 8007978:	41600000 	.word	0x41600000
 800797c:	409f4000 	.word	0x409f4000
 8007980:	41e00000 	.word	0x41e00000
 8007984:	40590000 	.word	0x40590000

08007988 <ms5611_get_pressure>:

/**
 * Get calibrated pressure, unit: mBar
 * @return calibrated pressure
 */
double ms5611_get_pressure(){
 8007988:	b5b0      	push	{r4, r5, r7, lr}
 800798a:	b090      	sub	sp, #64	; 0x40
 800798c:	af00      	add	r7, sp, #0

	uint32_t dT = raw_temperature - ((uint32_t)fc[4] * 256);
 800798e:	4bc4      	ldr	r3, [pc, #784]	; (8007ca0 <ms5611_get_pressure+0x318>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4bc4      	ldr	r3, [pc, #784]	; (8007ca4 <ms5611_get_pressure+0x31c>)
 8007994:	891b      	ldrh	r3, [r3, #8]
 8007996:	021b      	lsls	r3, r3, #8
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
	double TEMP = 2000.0 + dT * (fc[5] / (8388608.0));//unit 0.01 C
 800799c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800799e:	f7f8 fdb1 	bl	8000504 <__aeabi_ui2d>
 80079a2:	4604      	mov	r4, r0
 80079a4:	460d      	mov	r5, r1
 80079a6:	4bbf      	ldr	r3, [pc, #764]	; (8007ca4 <ms5611_get_pressure+0x31c>)
 80079a8:	895b      	ldrh	r3, [r3, #10]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7f8 fdba 	bl	8000524 <__aeabi_i2d>
 80079b0:	f04f 0200 	mov.w	r2, #0
 80079b4:	4bbc      	ldr	r3, [pc, #752]	; (8007ca8 <ms5611_get_pressure+0x320>)
 80079b6:	f7f8 ff49 	bl	800084c <__aeabi_ddiv>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4620      	mov	r0, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	f7f8 fe19 	bl	80005f8 <__aeabi_dmul>
 80079c6:	4602      	mov	r2, r0
 80079c8:	460b      	mov	r3, r1
 80079ca:	4610      	mov	r0, r2
 80079cc:	4619      	mov	r1, r3
 80079ce:	f04f 0200 	mov.w	r2, #0
 80079d2:	4bb6      	ldr	r3, [pc, #728]	; (8007cac <ms5611_get_pressure+0x324>)
 80079d4:	f7f8 fc5a 	bl	800028c <__adddf3>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	e9c7 2306 	strd	r2, r3, [r7, #24]

	double OFF = fc[1] * (65536) + fc[3] * dT / (128);
 80079e0:	4bb0      	ldr	r3, [pc, #704]	; (8007ca4 <ms5611_get_pressure+0x31c>)
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	041b      	lsls	r3, r3, #16
 80079e6:	461a      	mov	r2, r3
 80079e8:	4bae      	ldr	r3, [pc, #696]	; (8007ca4 <ms5611_get_pressure+0x31c>)
 80079ea:	88db      	ldrh	r3, [r3, #6]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f0:	fb03 f301 	mul.w	r3, r3, r1
 80079f4:	09db      	lsrs	r3, r3, #7
 80079f6:	4413      	add	r3, r2
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7f8 fd83 	bl	8000504 <__aeabi_ui2d>
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double SENS = fc[0] * (32768) + fc[2] * dT / (256);
 8007a06:	4ba7      	ldr	r3, [pc, #668]	; (8007ca4 <ms5611_get_pressure+0x31c>)
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	03db      	lsls	r3, r3, #15
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	4ba5      	ldr	r3, [pc, #660]	; (8007ca4 <ms5611_get_pressure+0x31c>)
 8007a10:	889b      	ldrh	r3, [r3, #4]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	fb03 f301 	mul.w	r3, r3, r1
 8007a1a:	0a1b      	lsrs	r3, r3, #8
 8007a1c:	4413      	add	r3, r2
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7f8 fd70 	bl	8000504 <__aeabi_ui2d>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	e9c7 2302 	strd	r2, r3, [r7, #8]

	double P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit 0.01mbar
 8007a2c:	4ba0      	ldr	r3, [pc, #640]	; (8007cb0 <ms5611_get_pressure+0x328>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7f8 fd67 	bl	8000504 <__aeabi_ui2d>
 8007a36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a3a:	f7f8 fddd 	bl	80005f8 <__aeabi_dmul>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4610      	mov	r0, r2
 8007a44:	4619      	mov	r1, r3
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	4b9a      	ldr	r3, [pc, #616]	; (8007cb4 <ms5611_get_pressure+0x32c>)
 8007a4c:	f7f8 fefe 	bl	800084c <__aeabi_ddiv>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	4610      	mov	r0, r2
 8007a56:	4619      	mov	r1, r3
 8007a58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007a5c:	f7f8 fc14 	bl	8000288 <__aeabi_dsub>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4610      	mov	r0, r2
 8007a66:	4619      	mov	r1, r3
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	4b92      	ldr	r3, [pc, #584]	; (8007cb8 <ms5611_get_pressure+0x330>)
 8007a6e:	f7f8 feed 	bl	800084c <__aeabi_ddiv>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	e9c7 2300 	strd	r2, r3, [r7]

	double T2=0, OFF2=0, SENS2=0;
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8007a86:	f04f 0200 	mov.w	r2, #0
 8007a8a:	f04f 0300 	mov.w	r3, #0
 8007a8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8007a92:	f04f 0200 	mov.w	r2, #0
 8007a96:	f04f 0300 	mov.w	r3, #0
 8007a9a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (TEMP < 2000){
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	4b82      	ldr	r3, [pc, #520]	; (8007cac <ms5611_get_pressure+0x324>)
 8007aa4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007aa8:	f7f9 f818 	bl	8000adc <__aeabi_dcmplt>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f000 80cc 	beq.w	8007c4c <ms5611_get_pressure+0x2c4>
		//temperature < 20 Celsius
		T2 = dT * dT / (2147483648);
 8007ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab6:	fb03 f303 	mul.w	r3, r3, r3
 8007aba:	0fdb      	lsrs	r3, r3, #31
 8007abc:	461a      	mov	r2, r3
 8007abe:	f04f 0300 	mov.w	r3, #0
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	f7f8 fd69 	bl	800059c <__aeabi_l2d>
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
		OFF2 = 5 * (TEMP-2000) * (TEMP-2000) / 2;
 8007ad2:	f04f 0200 	mov.w	r2, #0
 8007ad6:	4b75      	ldr	r3, [pc, #468]	; (8007cac <ms5611_get_pressure+0x324>)
 8007ad8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007adc:	f7f8 fbd4 	bl	8000288 <__aeabi_dsub>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	4610      	mov	r0, r2
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	f04f 0200 	mov.w	r2, #0
 8007aec:	4b73      	ldr	r3, [pc, #460]	; (8007cbc <ms5611_get_pressure+0x334>)
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4614      	mov	r4, r2
 8007af8:	461d      	mov	r5, r3
 8007afa:	f04f 0200 	mov.w	r2, #0
 8007afe:	4b6b      	ldr	r3, [pc, #428]	; (8007cac <ms5611_get_pressure+0x324>)
 8007b00:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b04:	f7f8 fbc0 	bl	8000288 <__aeabi_dsub>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	4629      	mov	r1, r5
 8007b10:	f7f8 fd72 	bl	80005f8 <__aeabi_dmul>
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4610      	mov	r0, r2
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b24:	f7f8 fe92 	bl	800084c <__aeabi_ddiv>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	460b      	mov	r3, r1
 8007b2c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		SENS2 = 5 * (TEMP-2000) * (TEMP-2000) / 4;
 8007b30:	f04f 0200 	mov.w	r2, #0
 8007b34:	4b5d      	ldr	r3, [pc, #372]	; (8007cac <ms5611_get_pressure+0x324>)
 8007b36:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b3a:	f7f8 fba5 	bl	8000288 <__aeabi_dsub>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4610      	mov	r0, r2
 8007b44:	4619      	mov	r1, r3
 8007b46:	f04f 0200 	mov.w	r2, #0
 8007b4a:	4b5c      	ldr	r3, [pc, #368]	; (8007cbc <ms5611_get_pressure+0x334>)
 8007b4c:	f7f8 fd54 	bl	80005f8 <__aeabi_dmul>
 8007b50:	4602      	mov	r2, r0
 8007b52:	460b      	mov	r3, r1
 8007b54:	4614      	mov	r4, r2
 8007b56:	461d      	mov	r5, r3
 8007b58:	f04f 0200 	mov.w	r2, #0
 8007b5c:	4b53      	ldr	r3, [pc, #332]	; (8007cac <ms5611_get_pressure+0x324>)
 8007b5e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b62:	f7f8 fb91 	bl	8000288 <__aeabi_dsub>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f7f8 fd43 	bl	80005f8 <__aeabi_dmul>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4610      	mov	r0, r2
 8007b78:	4619      	mov	r1, r3
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <ms5611_get_pressure+0x338>)
 8007b80:	f7f8 fe64 	bl	800084c <__aeabi_ddiv>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (TEMP < -1500){
 8007b8c:	a340      	add	r3, pc, #256	; (adr r3, 8007c90 <ms5611_get_pressure+0x308>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007b96:	f7f8 ffa1 	bl	8000adc <__aeabi_dcmplt>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d055      	beq.n	8007c4c <ms5611_get_pressure+0x2c4>
			//temperature < -15 Celsius
			OFF2 = OFF2 + 7 * (TEMP + 1500) * (TEMP + 1500);
 8007ba0:	a33d      	add	r3, pc, #244	; (adr r3, 8007c98 <ms5611_get_pressure+0x310>)
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007baa:	f7f8 fb6f 	bl	800028c <__adddf3>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4610      	mov	r0, r2
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	4b42      	ldr	r3, [pc, #264]	; (8007cc4 <ms5611_get_pressure+0x33c>)
 8007bbc:	f7f8 fd1c 	bl	80005f8 <__aeabi_dmul>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	a333      	add	r3, pc, #204	; (adr r3, 8007c98 <ms5611_get_pressure+0x310>)
 8007bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007bd2:	f7f8 fb5b 	bl	800028c <__adddf3>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	460b      	mov	r3, r1
 8007bda:	4620      	mov	r0, r4
 8007bdc:	4629      	mov	r1, r5
 8007bde:	f7f8 fd0b 	bl	80005f8 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8007bea:	f7f8 fb4f 	bl	800028c <__adddf3>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
			SENS2 = SENS2 + 11/2 * (TEMP + 1500) * (TEMP + 1500);
 8007bf6:	a328      	add	r3, pc, #160	; (adr r3, 8007c98 <ms5611_get_pressure+0x310>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c00:	f7f8 fb44 	bl	800028c <__adddf3>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4610      	mov	r0, r2
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	f04f 0200 	mov.w	r2, #0
 8007c10:	4b2a      	ldr	r3, [pc, #168]	; (8007cbc <ms5611_get_pressure+0x334>)
 8007c12:	f7f8 fcf1 	bl	80005f8 <__aeabi_dmul>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4614      	mov	r4, r2
 8007c1c:	461d      	mov	r5, r3
 8007c1e:	a31e      	add	r3, pc, #120	; (adr r3, 8007c98 <ms5611_get_pressure+0x310>)
 8007c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c28:	f7f8 fb30 	bl	800028c <__adddf3>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	4620      	mov	r0, r4
 8007c32:	4629      	mov	r1, r5
 8007c34:	f7f8 fce0 	bl	80005f8 <__aeabi_dmul>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	460b      	mov	r3, r1
 8007c3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007c40:	f7f8 fb24 	bl	800028c <__adddf3>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
	}

	TEMP = TEMP - T2;
 8007c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c50:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c54:	f7f8 fb18 	bl	8000288 <__aeabi_dsub>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
	OFF = OFF - OFF2;
 8007c60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c64:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007c68:	f7f8 fb0e 	bl	8000288 <__aeabi_dsub>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	460b      	mov	r3, r1
 8007c70:	e9c7 2304 	strd	r2, r3, [r7, #16]
	SENS = SENS - SENS2;
 8007c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007c78:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007c7c:	f7f8 fb04 	bl	8000288 <__aeabi_dsub>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	e9c7 2302 	strd	r2, r3, [r7, #8]

	P = (raw_pressure * SENS / (2097152.0) - OFF) / (32768);//unit mbar
 8007c88:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <ms5611_get_pressure+0x328>)
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	e01b      	b.n	8007cc8 <ms5611_get_pressure+0x340>
 8007c90:	00000000 	.word	0x00000000
 8007c94:	c0977000 	.word	0xc0977000
 8007c98:	00000000 	.word	0x00000000
 8007c9c:	40977000 	.word	0x40977000
 8007ca0:	200130b4 	.word	0x200130b4
 8007ca4:	200130a8 	.word	0x200130a8
 8007ca8:	41600000 	.word	0x41600000
 8007cac:	409f4000 	.word	0x409f4000
 8007cb0:	200130a4 	.word	0x200130a4
 8007cb4:	41400000 	.word	0x41400000
 8007cb8:	40e00000 	.word	0x40e00000
 8007cbc:	40140000 	.word	0x40140000
 8007cc0:	40100000 	.word	0x40100000
 8007cc4:	401c0000 	.word	0x401c0000
 8007cc8:	f7f8 fc1c 	bl	8000504 <__aeabi_ui2d>
 8007ccc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007cd0:	f7f8 fc92 	bl	80005f8 <__aeabi_dmul>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <ms5611_get_pressure+0x3ac>)
 8007ce2:	f7f8 fdb3 	bl	800084c <__aeabi_ddiv>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	460b      	mov	r3, r1
 8007cea:	4610      	mov	r0, r2
 8007cec:	4619      	mov	r1, r3
 8007cee:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007cf2:	f7f8 fac9 	bl	8000288 <__aeabi_dsub>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	4b0d      	ldr	r3, [pc, #52]	; (8007d38 <ms5611_get_pressure+0x3b0>)
 8007d04:	f7f8 fda2 	bl	800084c <__aeabi_ddiv>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	e9c7 2300 	strd	r2, r3, [r7]
	return P / 100;//unit mbar
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <ms5611_get_pressure+0x3b4>)
 8007d16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d1a:	f7f8 fd97 	bl	800084c <__aeabi_ddiv>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ec43 2b17 	vmov	d7, r2, r3
}
 8007d26:	eeb0 0a47 	vmov.f32	s0, s14
 8007d2a:	eef0 0a67 	vmov.f32	s1, s15
 8007d2e:	3740      	adds	r7, #64	; 0x40
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bdb0      	pop	{r4, r5, r7, pc}
 8007d34:	41400000 	.word	0x41400000
 8007d38:	40e00000 	.word	0x40e00000
 8007d3c:	40590000 	.word	0x40590000

08007d40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007d78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007d44:	480d      	ldr	r0, [pc, #52]	; (8007d7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007d46:	490e      	ldr	r1, [pc, #56]	; (8007d80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007d48:	4a0e      	ldr	r2, [pc, #56]	; (8007d84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d4c:	e002      	b.n	8007d54 <LoopCopyDataInit>

08007d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d52:	3304      	adds	r3, #4

08007d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d58:	d3f9      	bcc.n	8007d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d5a:	4a0b      	ldr	r2, [pc, #44]	; (8007d88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007d5c:	4c0b      	ldr	r4, [pc, #44]	; (8007d8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8007d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d60:	e001      	b.n	8007d66 <LoopFillZerobss>

08007d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d64:	3204      	adds	r2, #4

08007d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d68:	d3fb      	bcc.n	8007d62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007d6a:	f7fd fed9 	bl	8005b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d6e:	f012 f995 	bl	801a09c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007d72:	f7fa ff29 	bl	8002bc8 <main>
  bx  lr    
 8007d76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007d78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d80:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8007d84:	08022568 	.word	0x08022568
  ldr r2, =_sbss
 8007d88:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8007d8c:	20016a58 	.word	0x20016a58

08007d90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007d90:	e7fe      	b.n	8007d90 <ADC_IRQHandler>
	...

08007d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <HAL_Init+0x40>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a0d      	ldr	r2, [pc, #52]	; (8007dd4 <HAL_Init+0x40>)
 8007d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007da2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_Init+0x40>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a0a      	ldr	r2, [pc, #40]	; (8007dd4 <HAL_Init+0x40>)
 8007daa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007dae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <HAL_Init+0x40>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a07      	ldr	r2, [pc, #28]	; (8007dd4 <HAL_Init+0x40>)
 8007db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007dbc:	2003      	movs	r0, #3
 8007dbe:	f000 fd20 	bl	8008802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007dc2:	200f      	movs	r0, #15
 8007dc4:	f7fd fd2c 	bl	8005820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007dc8:	f7fd fa34 	bl	8005234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop
 8007dd4:	40023c00 	.word	0x40023c00

08007dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ddc:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_IncTick+0x20>)
 8007dde:	781b      	ldrb	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	4b06      	ldr	r3, [pc, #24]	; (8007dfc <HAL_IncTick+0x24>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	4413      	add	r3, r2
 8007de8:	4a04      	ldr	r2, [pc, #16]	; (8007dfc <HAL_IncTick+0x24>)
 8007dea:	6013      	str	r3, [r2, #0]
}
 8007dec:	bf00      	nop
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	200000d0 	.word	0x200000d0
 8007dfc:	200130b8 	.word	0x200130b8

08007e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e00:	b480      	push	{r7}
 8007e02:	af00      	add	r7, sp, #0
  return uwTick;
 8007e04:	4b03      	ldr	r3, [pc, #12]	; (8007e14 <HAL_GetTick+0x14>)
 8007e06:	681b      	ldr	r3, [r3, #0]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	200130b8 	.word	0x200130b8

08007e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e20:	f7ff ffee 	bl	8007e00 <HAL_GetTick>
 8007e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e30:	d005      	beq.n	8007e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <HAL_Delay+0x44>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	461a      	mov	r2, r3
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007e3e:	bf00      	nop
 8007e40:	f7ff ffde 	bl	8007e00 <HAL_GetTick>
 8007e44:	4602      	mov	r2, r0
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d8f7      	bhi.n	8007e40 <HAL_Delay+0x28>
  {
  }
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	200000d0 	.word	0x200000d0

08007e60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e033      	b.n	8007ede <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d109      	bne.n	8007e92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f7fd fa04 	bl	800528c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f003 0310 	and.w	r3, r3, #16
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d118      	bne.n	8007ed0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007ea6:	f023 0302 	bic.w	r3, r3, #2
 8007eaa:	f043 0202 	orr.w	r2, r3, #2
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fad8 	bl	8008468 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f023 0303 	bic.w	r3, r3, #3
 8007ec6:	f043 0201 	orr.w	r2, r3, #1
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	641a      	str	r2, [r3, #64]	; 0x40
 8007ece:	e001      	b.n	8007ed4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3710      	adds	r7, #16
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
	...

08007ee8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_ADC_Start+0x1a>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e0b2      	b.n	8008068 <HAL_ADC_Start+0x180>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	2b01      	cmp	r3, #1
 8007f16:	d018      	beq.n	8007f4a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f042 0201 	orr.w	r2, r2, #1
 8007f26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007f28:	4b52      	ldr	r3, [pc, #328]	; (8008074 <HAL_ADC_Start+0x18c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a52      	ldr	r2, [pc, #328]	; (8008078 <HAL_ADC_Start+0x190>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	0c9a      	lsrs	r2, r3, #18
 8007f34:	4613      	mov	r3, r2
 8007f36:	005b      	lsls	r3, r3, #1
 8007f38:	4413      	add	r3, r2
 8007f3a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007f3c:	e002      	b.n	8007f44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	3b01      	subs	r3, #1
 8007f42:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f9      	bne.n	8007f3e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d17a      	bne.n	800804e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007f60:	f023 0301 	bic.w	r3, r3, #1
 8007f64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d007      	beq.n	8007f8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f96:	d106      	bne.n	8007fa6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9c:	f023 0206 	bic.w	r2, r3, #6
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	645a      	str	r2, [r3, #68]	; 0x44
 8007fa4:	e002      	b.n	8007fac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007fb4:	4b31      	ldr	r3, [pc, #196]	; (800807c <HAL_ADC_Start+0x194>)
 8007fb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007fc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f003 031f 	and.w	r3, r3, #31
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d12a      	bne.n	8008024 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a2b      	ldr	r2, [pc, #172]	; (8008080 <HAL_ADC_Start+0x198>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d015      	beq.n	8008004 <HAL_ADC_Start+0x11c>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a29      	ldr	r2, [pc, #164]	; (8008084 <HAL_ADC_Start+0x19c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d105      	bne.n	8007fee <HAL_ADC_Start+0x106>
 8007fe2:	4b26      	ldr	r3, [pc, #152]	; (800807c <HAL_ADC_Start+0x194>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f003 031f 	and.w	r3, r3, #31
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d00a      	beq.n	8008004 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a25      	ldr	r2, [pc, #148]	; (8008088 <HAL_ADC_Start+0x1a0>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d136      	bne.n	8008066 <HAL_ADC_Start+0x17e>
 8007ff8:	4b20      	ldr	r3, [pc, #128]	; (800807c <HAL_ADC_Start+0x194>)
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	f003 0310 	and.w	r3, r3, #16
 8008000:	2b00      	cmp	r3, #0
 8008002:	d130      	bne.n	8008066 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d129      	bne.n	8008066 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689a      	ldr	r2, [r3, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008020:	609a      	str	r2, [r3, #8]
 8008022:	e020      	b.n	8008066 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a15      	ldr	r2, [pc, #84]	; (8008080 <HAL_ADC_Start+0x198>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d11b      	bne.n	8008066 <HAL_ADC_Start+0x17e>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d114      	bne.n	8008066 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	689a      	ldr	r2, [r3, #8]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	e00b      	b.n	8008066 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f043 0210 	orr.w	r2, r3, #16
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800805e:	f043 0201 	orr.w	r2, r3, #1
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008066:	2300      	movs	r3, #0
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	20000030 	.word	0x20000030
 8008078:	431bde83 	.word	0x431bde83
 800807c:	40012300 	.word	0x40012300
 8008080:	40012000 	.word	0x40012000
 8008084:	40012100 	.word	0x40012100
 8008088:	40012200 	.word	0x40012200

0800808c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809a:	2b01      	cmp	r3, #1
 800809c:	d101      	bne.n	80080a2 <HAL_ADC_Stop+0x16>
 800809e:	2302      	movs	r3, #2
 80080a0:	e021      	b.n	80080e6 <HAL_ADC_Stop+0x5a>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2201      	movs	r2, #1
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689a      	ldr	r2, [r3, #8]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f022 0201 	bic.w	r2, r2, #1
 80080b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	f043 0201 	orr.w	r2, r3, #1
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2200      	movs	r2, #0
 80080e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80080e4:	2300      	movs	r3, #0
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810e:	d113      	bne.n	8008138 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800811a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800811e:	d10b      	bne.n	8008138 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	f043 0220 	orr.w	r2, r3, #32
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e063      	b.n	8008200 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8008138:	f7ff fe62 	bl	8007e00 <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800813e:	e021      	b.n	8008184 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008146:	d01d      	beq.n	8008184 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d007      	beq.n	800815e <HAL_ADC_PollForConversion+0x6c>
 800814e:	f7ff fe57 	bl	8007e00 <HAL_GetTick>
 8008152:	4602      	mov	r2, r0
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	1ad3      	subs	r3, r2, r3
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d212      	bcs.n	8008184 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f003 0302 	and.w	r3, r3, #2
 8008168:	2b02      	cmp	r3, #2
 800816a:	d00b      	beq.n	8008184 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008170:	f043 0204 	orr.w	r2, r3, #4
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8008180:	2303      	movs	r3, #3
 8008182:	e03d      	b.n	8008200 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	2b02      	cmp	r3, #2
 8008190:	d1d6      	bne.n	8008140 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f06f 0212 	mvn.w	r2, #18
 800819a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d123      	bne.n	80081fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d11f      	bne.n	80081fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d006      	beq.n	80081da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d111      	bne.n	80081fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f6:	f043 0201 	orr.w	r2, r3, #1
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
	...

08008224 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800822e:	2300      	movs	r3, #0
 8008230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_ADC_ConfigChannel+0x1c>
 800823c:	2302      	movs	r3, #2
 800823e:	e105      	b.n	800844c <HAL_ADC_ConfigChannel+0x228>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b09      	cmp	r3, #9
 800824e:	d925      	bls.n	800829c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	68d9      	ldr	r1, [r3, #12]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	b29b      	uxth	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	4613      	mov	r3, r2
 8008260:	005b      	lsls	r3, r3, #1
 8008262:	4413      	add	r3, r2
 8008264:	3b1e      	subs	r3, #30
 8008266:	2207      	movs	r2, #7
 8008268:	fa02 f303 	lsl.w	r3, r2, r3
 800826c:	43da      	mvns	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	400a      	ands	r2, r1
 8008274:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	68d9      	ldr	r1, [r3, #12]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	b29b      	uxth	r3, r3
 8008286:	4618      	mov	r0, r3
 8008288:	4603      	mov	r3, r0
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	4403      	add	r3, r0
 800828e:	3b1e      	subs	r3, #30
 8008290:	409a      	lsls	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	430a      	orrs	r2, r1
 8008298:	60da      	str	r2, [r3, #12]
 800829a:	e022      	b.n	80082e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6919      	ldr	r1, [r3, #16]
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	461a      	mov	r2, r3
 80082aa:	4613      	mov	r3, r2
 80082ac:	005b      	lsls	r3, r3, #1
 80082ae:	4413      	add	r3, r2
 80082b0:	2207      	movs	r2, #7
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
 80082b6:	43da      	mvns	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	400a      	ands	r2, r1
 80082be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6919      	ldr	r1, [r3, #16]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	689a      	ldr	r2, [r3, #8]
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	b29b      	uxth	r3, r3
 80082d0:	4618      	mov	r0, r3
 80082d2:	4603      	mov	r3, r0
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4403      	add	r3, r0
 80082d8:	409a      	lsls	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	430a      	orrs	r2, r1
 80082e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b06      	cmp	r3, #6
 80082e8:	d824      	bhi.n	8008334 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	3b05      	subs	r3, #5
 80082fc:	221f      	movs	r2, #31
 80082fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008302:	43da      	mvns	r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	400a      	ands	r2, r1
 800830a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	b29b      	uxth	r3, r3
 8008318:	4618      	mov	r0, r3
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	4613      	mov	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	4413      	add	r3, r2
 8008324:	3b05      	subs	r3, #5
 8008326:	fa00 f203 	lsl.w	r2, r0, r3
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	635a      	str	r2, [r3, #52]	; 0x34
 8008332:	e04c      	b.n	80083ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	2b0c      	cmp	r3, #12
 800833a:	d824      	bhi.n	8008386 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	685a      	ldr	r2, [r3, #4]
 8008346:	4613      	mov	r3, r2
 8008348:	009b      	lsls	r3, r3, #2
 800834a:	4413      	add	r3, r2
 800834c:	3b23      	subs	r3, #35	; 0x23
 800834e:	221f      	movs	r2, #31
 8008350:	fa02 f303 	lsl.w	r3, r2, r3
 8008354:	43da      	mvns	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	400a      	ands	r2, r1
 800835c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	b29b      	uxth	r3, r3
 800836a:	4618      	mov	r0, r3
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	685a      	ldr	r2, [r3, #4]
 8008370:	4613      	mov	r3, r2
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	3b23      	subs	r3, #35	; 0x23
 8008378:	fa00 f203 	lsl.w	r2, r0, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	631a      	str	r2, [r3, #48]	; 0x30
 8008384:	e023      	b.n	80083ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	685a      	ldr	r2, [r3, #4]
 8008390:	4613      	mov	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4413      	add	r3, r2
 8008396:	3b41      	subs	r3, #65	; 0x41
 8008398:	221f      	movs	r2, #31
 800839a:	fa02 f303 	lsl.w	r3, r2, r3
 800839e:	43da      	mvns	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	400a      	ands	r2, r1
 80083a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	b29b      	uxth	r3, r3
 80083b4:	4618      	mov	r0, r3
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	4613      	mov	r3, r2
 80083bc:	009b      	lsls	r3, r3, #2
 80083be:	4413      	add	r3, r2
 80083c0:	3b41      	subs	r3, #65	; 0x41
 80083c2:	fa00 f203 	lsl.w	r2, r0, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80083ce:	4b22      	ldr	r3, [pc, #136]	; (8008458 <HAL_ADC_ConfigChannel+0x234>)
 80083d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a21      	ldr	r2, [pc, #132]	; (800845c <HAL_ADC_ConfigChannel+0x238>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d109      	bne.n	80083f0 <HAL_ADC_ConfigChannel+0x1cc>
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b12      	cmp	r3, #18
 80083e2:	d105      	bne.n	80083f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a19      	ldr	r2, [pc, #100]	; (800845c <HAL_ADC_ConfigChannel+0x238>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d123      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x21e>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	2b10      	cmp	r3, #16
 8008400:	d003      	beq.n	800840a <HAL_ADC_ConfigChannel+0x1e6>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b11      	cmp	r3, #17
 8008408:	d11b      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2b10      	cmp	r3, #16
 800841c:	d111      	bne.n	8008442 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800841e:	4b10      	ldr	r3, [pc, #64]	; (8008460 <HAL_ADC_ConfigChannel+0x23c>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a10      	ldr	r2, [pc, #64]	; (8008464 <HAL_ADC_ConfigChannel+0x240>)
 8008424:	fba2 2303 	umull	r2, r3, r2, r3
 8008428:	0c9a      	lsrs	r2, r3, #18
 800842a:	4613      	mov	r3, r2
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	005b      	lsls	r3, r3, #1
 8008432:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008434:	e002      	b.n	800843c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	3b01      	subs	r3, #1
 800843a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d1f9      	bne.n	8008436 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2200      	movs	r2, #0
 8008446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40012300 	.word	0x40012300
 800845c:	40012000 	.word	0x40012000
 8008460:	20000030 	.word	0x20000030
 8008464:	431bde83 	.word	0x431bde83

08008468 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008470:	4b79      	ldr	r3, [pc, #484]	; (8008658 <ADC_Init+0x1f0>)
 8008472:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	431a      	orrs	r2, r3
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	685a      	ldr	r2, [r3, #4]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800849c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6859      	ldr	r1, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	021a      	lsls	r2, r3, #8
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	430a      	orrs	r2, r1
 80084b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685a      	ldr	r2, [r3, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80084c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6859      	ldr	r1, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689a      	ldr	r2, [r3, #8]
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6899      	ldr	r1, [r3, #8]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	430a      	orrs	r2, r1
 80084f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084fa:	4a58      	ldr	r2, [pc, #352]	; (800865c <ADC_Init+0x1f4>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d022      	beq.n	8008546 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	689a      	ldr	r2, [r3, #8]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800850e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6899      	ldr	r1, [r3, #8]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	430a      	orrs	r2, r1
 8008520:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	6899      	ldr	r1, [r3, #8]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	609a      	str	r2, [r3, #8]
 8008544:	e00f      	b.n	8008566 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	689a      	ldr	r2, [r3, #8]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008554:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	689a      	ldr	r2, [r3, #8]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008564:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0202 	bic.w	r2, r2, #2
 8008574:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	6899      	ldr	r1, [r3, #8]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	7e1b      	ldrb	r3, [r3, #24]
 8008580:	005a      	lsls	r2, r3, #1
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d01b      	beq.n	80085cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685a      	ldr	r2, [r3, #4]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80085b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6859      	ldr	r1, [r3, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085be:	3b01      	subs	r3, #1
 80085c0:	035a      	lsls	r2, r3, #13
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	430a      	orrs	r2, r1
 80085c8:	605a      	str	r2, [r3, #4]
 80085ca:	e007      	b.n	80085dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80085da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80085ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	69db      	ldr	r3, [r3, #28]
 80085f6:	3b01      	subs	r3, #1
 80085f8:	051a      	lsls	r2, r3, #20
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	430a      	orrs	r2, r1
 8008600:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008610:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6899      	ldr	r1, [r3, #8]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800861e:	025a      	lsls	r2, r3, #9
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008636:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6899      	ldr	r1, [r3, #8]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	029a      	lsls	r2, r3, #10
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	430a      	orrs	r2, r1
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	bf00      	nop
 800864e:	3714      	adds	r7, #20
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	40012300 	.word	0x40012300
 800865c:	0f000001 	.word	0x0f000001

08008660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008670:	4b0c      	ldr	r3, [pc, #48]	; (80086a4 <__NVIC_SetPriorityGrouping+0x44>)
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800867c:	4013      	ands	r3, r2
 800867e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800868c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008692:	4a04      	ldr	r2, [pc, #16]	; (80086a4 <__NVIC_SetPriorityGrouping+0x44>)
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	60d3      	str	r3, [r2, #12]
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	e000ed00 	.word	0xe000ed00

080086a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <__NVIC_GetPriorityGrouping+0x18>)
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	0a1b      	lsrs	r3, r3, #8
 80086b2:	f003 0307 	and.w	r3, r3, #7
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	e000ed00 	.word	0xe000ed00

080086c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	4603      	mov	r3, r0
 80086cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	db0b      	blt.n	80086ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80086d6:	79fb      	ldrb	r3, [r7, #7]
 80086d8:	f003 021f 	and.w	r2, r3, #31
 80086dc:	4907      	ldr	r1, [pc, #28]	; (80086fc <__NVIC_EnableIRQ+0x38>)
 80086de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086e2:	095b      	lsrs	r3, r3, #5
 80086e4:	2001      	movs	r0, #1
 80086e6:	fa00 f202 	lsl.w	r2, r0, r2
 80086ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80086ee:	bf00      	nop
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	e000e100 	.word	0xe000e100

08008700 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800870a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800870e:	2b00      	cmp	r3, #0
 8008710:	db12      	blt.n	8008738 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008712:	79fb      	ldrb	r3, [r7, #7]
 8008714:	f003 021f 	and.w	r2, r3, #31
 8008718:	490a      	ldr	r1, [pc, #40]	; (8008744 <__NVIC_DisableIRQ+0x44>)
 800871a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	2001      	movs	r0, #1
 8008722:	fa00 f202 	lsl.w	r2, r0, r2
 8008726:	3320      	adds	r3, #32
 8008728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800872c:	f3bf 8f4f 	dsb	sy
}
 8008730:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008732:	f3bf 8f6f 	isb	sy
}
 8008736:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008738:	bf00      	nop
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	e000e100 	.word	0xe000e100

08008748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008758:	2b00      	cmp	r3, #0
 800875a:	db0a      	blt.n	8008772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	b2da      	uxtb	r2, r3
 8008760:	490c      	ldr	r1, [pc, #48]	; (8008794 <__NVIC_SetPriority+0x4c>)
 8008762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008766:	0112      	lsls	r2, r2, #4
 8008768:	b2d2      	uxtb	r2, r2
 800876a:	440b      	add	r3, r1
 800876c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008770:	e00a      	b.n	8008788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	b2da      	uxtb	r2, r3
 8008776:	4908      	ldr	r1, [pc, #32]	; (8008798 <__NVIC_SetPriority+0x50>)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	f003 030f 	and.w	r3, r3, #15
 800877e:	3b04      	subs	r3, #4
 8008780:	0112      	lsls	r2, r2, #4
 8008782:	b2d2      	uxtb	r2, r2
 8008784:	440b      	add	r3, r1
 8008786:	761a      	strb	r2, [r3, #24]
}
 8008788:	bf00      	nop
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	e000e100 	.word	0xe000e100
 8008798:	e000ed00 	.word	0xe000ed00

0800879c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800879c:	b480      	push	{r7}
 800879e:	b089      	sub	sp, #36	; 0x24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f003 0307 	and.w	r3, r3, #7
 80087ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	f1c3 0307 	rsb	r3, r3, #7
 80087b6:	2b04      	cmp	r3, #4
 80087b8:	bf28      	it	cs
 80087ba:	2304      	movcs	r3, #4
 80087bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	3304      	adds	r3, #4
 80087c2:	2b06      	cmp	r3, #6
 80087c4:	d902      	bls.n	80087cc <NVIC_EncodePriority+0x30>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	3b03      	subs	r3, #3
 80087ca:	e000      	b.n	80087ce <NVIC_EncodePriority+0x32>
 80087cc:	2300      	movs	r3, #0
 80087ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087d4:	69bb      	ldr	r3, [r7, #24]
 80087d6:	fa02 f303 	lsl.w	r3, r2, r3
 80087da:	43da      	mvns	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	401a      	ands	r2, r3
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80087e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	fa01 f303 	lsl.w	r3, r1, r3
 80087ee:	43d9      	mvns	r1, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087f4:	4313      	orrs	r3, r2
         );
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3724      	adds	r7, #36	; 0x24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr

08008802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7ff ff28 	bl	8008660 <__NVIC_SetPriorityGrouping>
}
 8008810:	bf00      	nop
 8008812:	3708      	adds	r7, #8
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
 8008824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008826:	2300      	movs	r3, #0
 8008828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800882a:	f7ff ff3d 	bl	80086a8 <__NVIC_GetPriorityGrouping>
 800882e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008830:	687a      	ldr	r2, [r7, #4]
 8008832:	68b9      	ldr	r1, [r7, #8]
 8008834:	6978      	ldr	r0, [r7, #20]
 8008836:	f7ff ffb1 	bl	800879c <NVIC_EncodePriority>
 800883a:	4602      	mov	r2, r0
 800883c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff ff80 	bl	8008748 <__NVIC_SetPriority>
}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800885a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff ff30 	bl	80086c4 <__NVIC_EnableIRQ>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800887a:	4618      	mov	r0, r3
 800887c:	f7ff ff40 	bl	8008700 <__NVIC_DisableIRQ>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008890:	2300      	movs	r3, #0
 8008892:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008894:	f7ff fab4 	bl	8007e00 <HAL_GetTick>
 8008898:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d101      	bne.n	80088a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e099      	b.n	80089d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2202      	movs	r2, #2
 80088a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f022 0201 	bic.w	r2, r2, #1
 80088c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088c4:	e00f      	b.n	80088e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80088c6:	f7ff fa9b 	bl	8007e00 <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b05      	cmp	r3, #5
 80088d2:	d908      	bls.n	80088e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2220      	movs	r2, #32
 80088d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2203      	movs	r2, #3
 80088de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e078      	b.n	80089d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0301 	and.w	r3, r3, #1
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e8      	bne.n	80088c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80088fc:	697a      	ldr	r2, [r7, #20]
 80088fe:	4b38      	ldr	r3, [pc, #224]	; (80089e0 <HAL_DMA_Init+0x158>)
 8008900:	4013      	ands	r3, r2
 8008902:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	689b      	ldr	r3, [r3, #8]
 800890c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008912:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800891e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800892a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a1b      	ldr	r3, [r3, #32]
 8008930:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800893c:	2b04      	cmp	r3, #4
 800893e:	d107      	bne.n	8008950 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008948:	4313      	orrs	r3, r2
 800894a:	697a      	ldr	r2, [r7, #20]
 800894c:	4313      	orrs	r3, r2
 800894e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	697a      	ldr	r2, [r7, #20]
 8008956:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0307 	bic.w	r3, r3, #7
 8008966:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	4313      	orrs	r3, r2
 8008970:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008976:	2b04      	cmp	r3, #4
 8008978:	d117      	bne.n	80089aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00e      	beq.n	80089aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fb5f 	bl	8009050 <DMA_CheckFifoParam>
 8008992:	4603      	mov	r3, r0
 8008994:	2b00      	cmp	r3, #0
 8008996:	d008      	beq.n	80089aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2240      	movs	r2, #64	; 0x40
 800899c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80089a6:	2301      	movs	r3, #1
 80089a8:	e016      	b.n	80089d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fb16 	bl	8008fe4 <DMA_CalcBaseAndBitshift>
 80089b8:	4603      	mov	r3, r0
 80089ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c0:	223f      	movs	r2, #63	; 0x3f
 80089c2:	409a      	lsls	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3718      	adds	r7, #24
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	f010803f 	.word	0xf010803f

080089e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e050      	b.n	8008a98 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b02      	cmp	r3, #2
 8008a00:	d101      	bne.n	8008a06 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8008a02:	2302      	movs	r3, #2
 8008a04:	e048      	b.n	8008a98 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0201 	bic.w	r2, r2, #1
 8008a14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2200      	movs	r2, #0
 8008a24:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2200      	movs	r2, #0
 8008a34:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	2221      	movs	r2, #33	; 0x21
 8008a44:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 facc 	bl	8008fe4 <DMA_CalcBaseAndBitshift>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2200      	movs	r2, #0
 8008a66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a78:	223f      	movs	r2, #63	; 0x3f
 8008a7a:	409a      	lsls	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008a96:	2300      	movs	r3, #0
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3710      	adds	r7, #16
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
 8008aac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ab6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_DMA_Start_IT+0x26>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e040      	b.n	8008b48 <HAL_DMA_Start_IT+0xa8>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d12f      	bne.n	8008b3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2202      	movs	r2, #2
 8008ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	68b9      	ldr	r1, [r7, #8]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fa4a 	bl	8008f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008af8:	223f      	movs	r2, #63	; 0x3f
 8008afa:	409a      	lsls	r2, r3
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f042 0216 	orr.w	r2, r2, #22
 8008b0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d007      	beq.n	8008b28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0208 	orr.w	r2, r2, #8
 8008b26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0201 	orr.w	r2, r2, #1
 8008b36:	601a      	str	r2, [r3, #0]
 8008b38:	e005      	b.n	8008b46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008b42:	2302      	movs	r3, #2
 8008b44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b084      	sub	sp, #16
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008b5e:	f7ff f94f 	bl	8007e00 <HAL_GetTick>
 8008b62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d008      	beq.n	8008b82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2280      	movs	r2, #128	; 0x80
 8008b74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e052      	b.n	8008c28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	f022 0216 	bic.w	r2, r2, #22
 8008b90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	695a      	ldr	r2, [r3, #20]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d103      	bne.n	8008bb2 <HAL_DMA_Abort+0x62>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d007      	beq.n	8008bc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681a      	ldr	r2, [r3, #0]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f022 0208 	bic.w	r2, r2, #8
 8008bc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bd2:	e013      	b.n	8008bfc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008bd4:	f7ff f914 	bl	8007e00 <HAL_GetTick>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	2b05      	cmp	r3, #5
 8008be0:	d90c      	bls.n	8008bfc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2220      	movs	r2, #32
 8008be6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2203      	movs	r2, #3
 8008bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e015      	b.n	8008c28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e4      	bne.n	8008bd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0e:	223f      	movs	r2, #63	; 0x3f
 8008c10:	409a      	lsls	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3710      	adds	r7, #16
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}

08008c30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d004      	beq.n	8008c4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2280      	movs	r2, #128	; 0x80
 8008c48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e00c      	b.n	8008c68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2205      	movs	r2, #5
 8008c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 0201 	bic.w	r2, r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c80:	4b92      	ldr	r3, [pc, #584]	; (8008ecc <HAL_DMA_IRQHandler+0x258>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a92      	ldr	r2, [pc, #584]	; (8008ed0 <HAL_DMA_IRQHandler+0x25c>)
 8008c86:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8a:	0a9b      	lsrs	r3, r3, #10
 8008c8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c9e:	2208      	movs	r2, #8
 8008ca0:	409a      	lsls	r2, r3
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d01a      	beq.n	8008ce0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d013      	beq.n	8008ce0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0204 	bic.w	r2, r2, #4
 8008cc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ccc:	2208      	movs	r2, #8
 8008cce:	409a      	lsls	r2, r3
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cd8:	f043 0201 	orr.w	r2, r3, #1
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	409a      	lsls	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4013      	ands	r3, r2
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d012      	beq.n	8008d16 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00b      	beq.n	8008d16 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d02:	2201      	movs	r2, #1
 8008d04:	409a      	lsls	r2, r3
 8008d06:	693b      	ldr	r3, [r7, #16]
 8008d08:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0e:	f043 0202 	orr.w	r2, r3, #2
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d1a:	2204      	movs	r2, #4
 8008d1c:	409a      	lsls	r2, r3
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	4013      	ands	r3, r2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d012      	beq.n	8008d4c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f003 0302 	and.w	r3, r3, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d00b      	beq.n	8008d4c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d38:	2204      	movs	r2, #4
 8008d3a:	409a      	lsls	r2, r3
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d44:	f043 0204 	orr.w	r2, r3, #4
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d50:	2210      	movs	r2, #16
 8008d52:	409a      	lsls	r2, r3
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d043      	beq.n	8008de4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0308 	and.w	r3, r3, #8
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d03c      	beq.n	8008de4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d6e:	2210      	movs	r2, #16
 8008d70:	409a      	lsls	r2, r3
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d018      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d108      	bne.n	8008da4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d024      	beq.n	8008de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	4798      	blx	r3
 8008da2:	e01f      	b.n	8008de4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d01b      	beq.n	8008de4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
 8008db4:	e016      	b.n	8008de4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d107      	bne.n	8008dd4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f022 0208 	bic.w	r2, r2, #8
 8008dd2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d003      	beq.n	8008de4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de8:	2220      	movs	r2, #32
 8008dea:	409a      	lsls	r2, r3
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	4013      	ands	r3, r2
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	f000 808e 	beq.w	8008f12 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f003 0310 	and.w	r3, r3, #16
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	f000 8086 	beq.w	8008f12 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	409a      	lsls	r2, r3
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b05      	cmp	r3, #5
 8008e1c:	d136      	bne.n	8008e8c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	681a      	ldr	r2, [r3, #0]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f022 0216 	bic.w	r2, r2, #22
 8008e2c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695a      	ldr	r2, [r3, #20]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e3c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d103      	bne.n	8008e4e <HAL_DMA_IRQHandler+0x1da>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d007      	beq.n	8008e5e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f022 0208 	bic.w	r2, r2, #8
 8008e5c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e62:	223f      	movs	r2, #63	; 0x3f
 8008e64:	409a      	lsls	r2, r3
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d07d      	beq.n	8008f7e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	4798      	blx	r3
        }
        return;
 8008e8a:	e078      	b.n	8008f7e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d01c      	beq.n	8008ed4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d108      	bne.n	8008eba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d030      	beq.n	8008f12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	e02b      	b.n	8008f12 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d027      	beq.n	8008f12 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	4798      	blx	r3
 8008eca:	e022      	b.n	8008f12 <HAL_DMA_IRQHandler+0x29e>
 8008ecc:	20000030 	.word	0x20000030
 8008ed0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10f      	bne.n	8008f02 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f022 0210 	bic.w	r2, r2, #16
 8008ef0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d003      	beq.n	8008f12 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d032      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f1e:	f003 0301 	and.w	r3, r3, #1
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d022      	beq.n	8008f6c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2205      	movs	r2, #5
 8008f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 0201 	bic.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	3301      	adds	r3, #1
 8008f42:	60bb      	str	r3, [r7, #8]
 8008f44:	697a      	ldr	r2, [r7, #20]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d307      	bcc.n	8008f5a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f003 0301 	and.w	r3, r3, #1
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d1f2      	bne.n	8008f3e <HAL_DMA_IRQHandler+0x2ca>
 8008f58:	e000      	b.n	8008f5c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008f5a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d005      	beq.n	8008f80 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	4798      	blx	r3
 8008f7c:	e000      	b.n	8008f80 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008f7e:	bf00      	nop
    }
  }
}
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop

08008f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	607a      	str	r2, [r7, #4]
 8008f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	2b40      	cmp	r3, #64	; 0x40
 8008fb4:	d108      	bne.n	8008fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	68ba      	ldr	r2, [r7, #8]
 8008fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008fc6:	e007      	b.n	8008fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	60da      	str	r2, [r3, #12]
}
 8008fd8:	bf00      	nop
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	3b10      	subs	r3, #16
 8008ff4:	4a14      	ldr	r2, [pc, #80]	; (8009048 <DMA_CalcBaseAndBitshift+0x64>)
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ffa:	091b      	lsrs	r3, r3, #4
 8008ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008ffe:	4a13      	ldr	r2, [pc, #76]	; (800904c <DMA_CalcBaseAndBitshift+0x68>)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4413      	add	r3, r2
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	461a      	mov	r2, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2b03      	cmp	r3, #3
 8009010:	d909      	bls.n	8009026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	1d1a      	adds	r2, r3, #4
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	659a      	str	r2, [r3, #88]	; 0x58
 8009024:	e007      	b.n	8009036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800903a:	4618      	mov	r0, r3
 800903c:	3714      	adds	r7, #20
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr
 8009046:	bf00      	nop
 8009048:	aaaaaaab 	.word	0xaaaaaaab
 800904c:	08021c90 	.word	0x08021c90

08009050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d11f      	bne.n	80090aa <DMA_CheckFifoParam+0x5a>
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	2b03      	cmp	r3, #3
 800906e:	d856      	bhi.n	800911e <DMA_CheckFifoParam+0xce>
 8009070:	a201      	add	r2, pc, #4	; (adr r2, 8009078 <DMA_CheckFifoParam+0x28>)
 8009072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009076:	bf00      	nop
 8009078:	08009089 	.word	0x08009089
 800907c:	0800909b 	.word	0x0800909b
 8009080:	08009089 	.word	0x08009089
 8009084:	0800911f 	.word	0x0800911f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d046      	beq.n	8009122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8009094:	2301      	movs	r3, #1
 8009096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009098:	e043      	b.n	8009122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090a2:	d140      	bne.n	8009126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090a8:	e03d      	b.n	8009126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090b2:	d121      	bne.n	80090f8 <DMA_CheckFifoParam+0xa8>
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d837      	bhi.n	800912a <DMA_CheckFifoParam+0xda>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <DMA_CheckFifoParam+0x70>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090d1 	.word	0x080090d1
 80090c4:	080090d7 	.word	0x080090d7
 80090c8:	080090d1 	.word	0x080090d1
 80090cc:	080090e9 	.word	0x080090e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80090d0:	2301      	movs	r3, #1
 80090d2:	73fb      	strb	r3, [r7, #15]
      break;
 80090d4:	e030      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d025      	beq.n	800912e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80090e2:	2301      	movs	r3, #1
 80090e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80090e6:	e022      	b.n	800912e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80090f0:	d11f      	bne.n	8009132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80090f6:	e01c      	b.n	8009132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d903      	bls.n	8009106 <DMA_CheckFifoParam+0xb6>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b03      	cmp	r3, #3
 8009102:	d003      	beq.n	800910c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009104:	e018      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	73fb      	strb	r3, [r7, #15]
      break;
 800910a:	e015      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00e      	beq.n	8009136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	73fb      	strb	r3, [r7, #15]
      break;
 800911c:	e00b      	b.n	8009136 <DMA_CheckFifoParam+0xe6>
      break;
 800911e:	bf00      	nop
 8009120:	e00a      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      break;
 8009122:	bf00      	nop
 8009124:	e008      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      break;
 8009126:	bf00      	nop
 8009128:	e006      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      break;
 800912a:	bf00      	nop
 800912c:	e004      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      break;
 800912e:	bf00      	nop
 8009130:	e002      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      break;   
 8009132:	bf00      	nop
 8009134:	e000      	b.n	8009138 <DMA_CheckFifoParam+0xe8>
      break;
 8009136:	bf00      	nop
    }
  } 
  
  return status; 
 8009138:	7bfb      	ldrb	r3, [r7, #15]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
 8009146:	bf00      	nop

08009148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009148:	b480      	push	{r7}
 800914a:	b089      	sub	sp, #36	; 0x24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800915a:	2300      	movs	r3, #0
 800915c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800915e:	2300      	movs	r3, #0
 8009160:	61fb      	str	r3, [r7, #28]
 8009162:	e16b      	b.n	800943c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009164:	2201      	movs	r2, #1
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	fa02 f303 	lsl.w	r3, r2, r3
 800916c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	697a      	ldr	r2, [r7, #20]
 8009174:	4013      	ands	r3, r2
 8009176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009178:	693a      	ldr	r2, [r7, #16]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	429a      	cmp	r2, r3
 800917e:	f040 815a 	bne.w	8009436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	f003 0303 	and.w	r3, r3, #3
 800918a:	2b01      	cmp	r3, #1
 800918c:	d005      	beq.n	800919a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8009196:	2b02      	cmp	r3, #2
 8009198:	d130      	bne.n	80091fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	2203      	movs	r2, #3
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	43db      	mvns	r3, r3
 80091ac:	69ba      	ldr	r2, [r7, #24]
 80091ae:	4013      	ands	r3, r2
 80091b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68da      	ldr	r2, [r3, #12]
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	005b      	lsls	r3, r3, #1
 80091ba:	fa02 f303 	lsl.w	r3, r2, r3
 80091be:	69ba      	ldr	r2, [r7, #24]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	69ba      	ldr	r2, [r7, #24]
 80091c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80091d0:	2201      	movs	r2, #1
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	fa02 f303 	lsl.w	r3, r2, r3
 80091d8:	43db      	mvns	r3, r3
 80091da:	69ba      	ldr	r2, [r7, #24]
 80091dc:	4013      	ands	r3, r2
 80091de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	091b      	lsrs	r3, r3, #4
 80091e6:	f003 0201 	and.w	r2, r3, #1
 80091ea:	69fb      	ldr	r3, [r7, #28]
 80091ec:	fa02 f303 	lsl.w	r3, r2, r3
 80091f0:	69ba      	ldr	r2, [r7, #24]
 80091f2:	4313      	orrs	r3, r2
 80091f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	69ba      	ldr	r2, [r7, #24]
 80091fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	f003 0303 	and.w	r3, r3, #3
 8009204:	2b03      	cmp	r3, #3
 8009206:	d017      	beq.n	8009238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	2203      	movs	r2, #3
 8009214:	fa02 f303 	lsl.w	r3, r2, r3
 8009218:	43db      	mvns	r3, r3
 800921a:	69ba      	ldr	r2, [r7, #24]
 800921c:	4013      	ands	r3, r2
 800921e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	005b      	lsls	r3, r3, #1
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	69ba      	ldr	r2, [r7, #24]
 800922e:	4313      	orrs	r3, r2
 8009230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	69ba      	ldr	r2, [r7, #24]
 8009236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	f003 0303 	and.w	r3, r3, #3
 8009240:	2b02      	cmp	r3, #2
 8009242:	d123      	bne.n	800928c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	08da      	lsrs	r2, r3, #3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3208      	adds	r2, #8
 800924c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	f003 0307 	and.w	r3, r3, #7
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	220f      	movs	r2, #15
 800925c:	fa02 f303 	lsl.w	r3, r2, r3
 8009260:	43db      	mvns	r3, r3
 8009262:	69ba      	ldr	r2, [r7, #24]
 8009264:	4013      	ands	r3, r2
 8009266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	691a      	ldr	r2, [r3, #16]
 800926c:	69fb      	ldr	r3, [r7, #28]
 800926e:	f003 0307 	and.w	r3, r3, #7
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	69ba      	ldr	r2, [r7, #24]
 800927a:	4313      	orrs	r3, r2
 800927c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	08da      	lsrs	r2, r3, #3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	3208      	adds	r2, #8
 8009286:	69b9      	ldr	r1, [r7, #24]
 8009288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	2203      	movs	r2, #3
 8009298:	fa02 f303 	lsl.w	r3, r2, r3
 800929c:	43db      	mvns	r3, r3
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	4013      	ands	r3, r2
 80092a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	f003 0203 	and.w	r2, r3, #3
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	005b      	lsls	r3, r3, #1
 80092b0:	fa02 f303 	lsl.w	r3, r2, r3
 80092b4:	69ba      	ldr	r2, [r7, #24]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	69ba      	ldr	r2, [r7, #24]
 80092be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 80b4 	beq.w	8009436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80092ce:	2300      	movs	r3, #0
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	4b60      	ldr	r3, [pc, #384]	; (8009454 <HAL_GPIO_Init+0x30c>)
 80092d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092d6:	4a5f      	ldr	r2, [pc, #380]	; (8009454 <HAL_GPIO_Init+0x30c>)
 80092d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092dc:	6453      	str	r3, [r2, #68]	; 0x44
 80092de:	4b5d      	ldr	r3, [pc, #372]	; (8009454 <HAL_GPIO_Init+0x30c>)
 80092e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092e6:	60fb      	str	r3, [r7, #12]
 80092e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80092ea:	4a5b      	ldr	r2, [pc, #364]	; (8009458 <HAL_GPIO_Init+0x310>)
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	089b      	lsrs	r3, r3, #2
 80092f0:	3302      	adds	r3, #2
 80092f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	f003 0303 	and.w	r3, r3, #3
 80092fe:	009b      	lsls	r3, r3, #2
 8009300:	220f      	movs	r2, #15
 8009302:	fa02 f303 	lsl.w	r3, r2, r3
 8009306:	43db      	mvns	r3, r3
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	4013      	ands	r3, r2
 800930c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4a52      	ldr	r2, [pc, #328]	; (800945c <HAL_GPIO_Init+0x314>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d02b      	beq.n	800936e <HAL_GPIO_Init+0x226>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	4a51      	ldr	r2, [pc, #324]	; (8009460 <HAL_GPIO_Init+0x318>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d025      	beq.n	800936a <HAL_GPIO_Init+0x222>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4a50      	ldr	r2, [pc, #320]	; (8009464 <HAL_GPIO_Init+0x31c>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d01f      	beq.n	8009366 <HAL_GPIO_Init+0x21e>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	4a4f      	ldr	r2, [pc, #316]	; (8009468 <HAL_GPIO_Init+0x320>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d019      	beq.n	8009362 <HAL_GPIO_Init+0x21a>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	4a4e      	ldr	r2, [pc, #312]	; (800946c <HAL_GPIO_Init+0x324>)
 8009332:	4293      	cmp	r3, r2
 8009334:	d013      	beq.n	800935e <HAL_GPIO_Init+0x216>
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	4a4d      	ldr	r2, [pc, #308]	; (8009470 <HAL_GPIO_Init+0x328>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d00d      	beq.n	800935a <HAL_GPIO_Init+0x212>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	4a4c      	ldr	r2, [pc, #304]	; (8009474 <HAL_GPIO_Init+0x32c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d007      	beq.n	8009356 <HAL_GPIO_Init+0x20e>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	4a4b      	ldr	r2, [pc, #300]	; (8009478 <HAL_GPIO_Init+0x330>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d101      	bne.n	8009352 <HAL_GPIO_Init+0x20a>
 800934e:	2307      	movs	r3, #7
 8009350:	e00e      	b.n	8009370 <HAL_GPIO_Init+0x228>
 8009352:	2308      	movs	r3, #8
 8009354:	e00c      	b.n	8009370 <HAL_GPIO_Init+0x228>
 8009356:	2306      	movs	r3, #6
 8009358:	e00a      	b.n	8009370 <HAL_GPIO_Init+0x228>
 800935a:	2305      	movs	r3, #5
 800935c:	e008      	b.n	8009370 <HAL_GPIO_Init+0x228>
 800935e:	2304      	movs	r3, #4
 8009360:	e006      	b.n	8009370 <HAL_GPIO_Init+0x228>
 8009362:	2303      	movs	r3, #3
 8009364:	e004      	b.n	8009370 <HAL_GPIO_Init+0x228>
 8009366:	2302      	movs	r3, #2
 8009368:	e002      	b.n	8009370 <HAL_GPIO_Init+0x228>
 800936a:	2301      	movs	r3, #1
 800936c:	e000      	b.n	8009370 <HAL_GPIO_Init+0x228>
 800936e:	2300      	movs	r3, #0
 8009370:	69fa      	ldr	r2, [r7, #28]
 8009372:	f002 0203 	and.w	r2, r2, #3
 8009376:	0092      	lsls	r2, r2, #2
 8009378:	4093      	lsls	r3, r2
 800937a:	69ba      	ldr	r2, [r7, #24]
 800937c:	4313      	orrs	r3, r2
 800937e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009380:	4935      	ldr	r1, [pc, #212]	; (8009458 <HAL_GPIO_Init+0x310>)
 8009382:	69fb      	ldr	r3, [r7, #28]
 8009384:	089b      	lsrs	r3, r3, #2
 8009386:	3302      	adds	r3, #2
 8009388:	69ba      	ldr	r2, [r7, #24]
 800938a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800938e:	4b3b      	ldr	r3, [pc, #236]	; (800947c <HAL_GPIO_Init+0x334>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009394:	693b      	ldr	r3, [r7, #16]
 8009396:	43db      	mvns	r3, r3
 8009398:	69ba      	ldr	r2, [r7, #24]
 800939a:	4013      	ands	r3, r2
 800939c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d003      	beq.n	80093b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80093aa:	69ba      	ldr	r2, [r7, #24]
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80093b2:	4a32      	ldr	r2, [pc, #200]	; (800947c <HAL_GPIO_Init+0x334>)
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80093b8:	4b30      	ldr	r3, [pc, #192]	; (800947c <HAL_GPIO_Init+0x334>)
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	43db      	mvns	r3, r3
 80093c2:	69ba      	ldr	r2, [r7, #24]
 80093c4:	4013      	ands	r3, r2
 80093c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d003      	beq.n	80093dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80093d4:	69ba      	ldr	r2, [r7, #24]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80093dc:	4a27      	ldr	r2, [pc, #156]	; (800947c <HAL_GPIO_Init+0x334>)
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80093e2:	4b26      	ldr	r3, [pc, #152]	; (800947c <HAL_GPIO_Init+0x334>)
 80093e4:	689b      	ldr	r3, [r3, #8]
 80093e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	43db      	mvns	r3, r3
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	4013      	ands	r3, r2
 80093f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80093fe:	69ba      	ldr	r2, [r7, #24]
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	4313      	orrs	r3, r2
 8009404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009406:	4a1d      	ldr	r2, [pc, #116]	; (800947c <HAL_GPIO_Init+0x334>)
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800940c:	4b1b      	ldr	r3, [pc, #108]	; (800947c <HAL_GPIO_Init+0x334>)
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	43db      	mvns	r3, r3
 8009416:	69ba      	ldr	r2, [r7, #24]
 8009418:	4013      	ands	r3, r2
 800941a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	685b      	ldr	r3, [r3, #4]
 8009420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009424:	2b00      	cmp	r3, #0
 8009426:	d003      	beq.n	8009430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	4313      	orrs	r3, r2
 800942e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009430:	4a12      	ldr	r2, [pc, #72]	; (800947c <HAL_GPIO_Init+0x334>)
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	3301      	adds	r3, #1
 800943a:	61fb      	str	r3, [r7, #28]
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	2b0f      	cmp	r3, #15
 8009440:	f67f ae90 	bls.w	8009164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	3724      	adds	r7, #36	; 0x24
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	40023800 	.word	0x40023800
 8009458:	40013800 	.word	0x40013800
 800945c:	40020000 	.word	0x40020000
 8009460:	40020400 	.word	0x40020400
 8009464:	40020800 	.word	0x40020800
 8009468:	40020c00 	.word	0x40020c00
 800946c:	40021000 	.word	0x40021000
 8009470:	40021400 	.word	0x40021400
 8009474:	40021800 	.word	0x40021800
 8009478:	40021c00 	.word	0x40021c00
 800947c:	40013c00 	.word	0x40013c00

08009480 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009480:	b480      	push	{r7}
 8009482:	b087      	sub	sp, #28
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800948a:	2300      	movs	r3, #0
 800948c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800948e:	2300      	movs	r3, #0
 8009490:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8009492:	2300      	movs	r3, #0
 8009494:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009496:	2300      	movs	r3, #0
 8009498:	617b      	str	r3, [r7, #20]
 800949a:	e0cd      	b.n	8009638 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800949c:	2201      	movs	r2, #1
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	fa02 f303 	lsl.w	r3, r2, r3
 80094a4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80094a6:	683a      	ldr	r2, [r7, #0]
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	4013      	ands	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	f040 80bd 	bne.w	8009632 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80094b8:	4a65      	ldr	r2, [pc, #404]	; (8009650 <HAL_GPIO_DeInit+0x1d0>)
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	089b      	lsrs	r3, r3, #2
 80094be:	3302      	adds	r3, #2
 80094c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094c4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	f003 0303 	and.w	r3, r3, #3
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	220f      	movs	r2, #15
 80094d0:	fa02 f303 	lsl.w	r3, r2, r3
 80094d4:	68ba      	ldr	r2, [r7, #8]
 80094d6:	4013      	ands	r3, r2
 80094d8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a5d      	ldr	r2, [pc, #372]	; (8009654 <HAL_GPIO_DeInit+0x1d4>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d02b      	beq.n	800953a <HAL_GPIO_DeInit+0xba>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a5c      	ldr	r2, [pc, #368]	; (8009658 <HAL_GPIO_DeInit+0x1d8>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d025      	beq.n	8009536 <HAL_GPIO_DeInit+0xb6>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a5b      	ldr	r2, [pc, #364]	; (800965c <HAL_GPIO_DeInit+0x1dc>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d01f      	beq.n	8009532 <HAL_GPIO_DeInit+0xb2>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a5a      	ldr	r2, [pc, #360]	; (8009660 <HAL_GPIO_DeInit+0x1e0>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d019      	beq.n	800952e <HAL_GPIO_DeInit+0xae>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a59      	ldr	r2, [pc, #356]	; (8009664 <HAL_GPIO_DeInit+0x1e4>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d013      	beq.n	800952a <HAL_GPIO_DeInit+0xaa>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a58      	ldr	r2, [pc, #352]	; (8009668 <HAL_GPIO_DeInit+0x1e8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d00d      	beq.n	8009526 <HAL_GPIO_DeInit+0xa6>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a57      	ldr	r2, [pc, #348]	; (800966c <HAL_GPIO_DeInit+0x1ec>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d007      	beq.n	8009522 <HAL_GPIO_DeInit+0xa2>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4a56      	ldr	r2, [pc, #344]	; (8009670 <HAL_GPIO_DeInit+0x1f0>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d101      	bne.n	800951e <HAL_GPIO_DeInit+0x9e>
 800951a:	2307      	movs	r3, #7
 800951c:	e00e      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 800951e:	2308      	movs	r3, #8
 8009520:	e00c      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 8009522:	2306      	movs	r3, #6
 8009524:	e00a      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 8009526:	2305      	movs	r3, #5
 8009528:	e008      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 800952a:	2304      	movs	r3, #4
 800952c:	e006      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 800952e:	2303      	movs	r3, #3
 8009530:	e004      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 8009532:	2302      	movs	r3, #2
 8009534:	e002      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 8009536:	2301      	movs	r3, #1
 8009538:	e000      	b.n	800953c <HAL_GPIO_DeInit+0xbc>
 800953a:	2300      	movs	r3, #0
 800953c:	697a      	ldr	r2, [r7, #20]
 800953e:	f002 0203 	and.w	r2, r2, #3
 8009542:	0092      	lsls	r2, r2, #2
 8009544:	4093      	lsls	r3, r2
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	429a      	cmp	r2, r3
 800954a:	d132      	bne.n	80095b2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800954c:	4b49      	ldr	r3, [pc, #292]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	43db      	mvns	r3, r3
 8009554:	4947      	ldr	r1, [pc, #284]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 8009556:	4013      	ands	r3, r2
 8009558:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800955a:	4b46      	ldr	r3, [pc, #280]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 800955c:	685a      	ldr	r2, [r3, #4]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	43db      	mvns	r3, r3
 8009562:	4944      	ldr	r1, [pc, #272]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 8009564:	4013      	ands	r3, r2
 8009566:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009568:	4b42      	ldr	r3, [pc, #264]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 800956a:	689a      	ldr	r2, [r3, #8]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	43db      	mvns	r3, r3
 8009570:	4940      	ldr	r1, [pc, #256]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 8009572:	4013      	ands	r3, r2
 8009574:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009576:	4b3f      	ldr	r3, [pc, #252]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	43db      	mvns	r3, r3
 800957e:	493d      	ldr	r1, [pc, #244]	; (8009674 <HAL_GPIO_DeInit+0x1f4>)
 8009580:	4013      	ands	r3, r2
 8009582:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	f003 0303 	and.w	r3, r3, #3
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	220f      	movs	r2, #15
 800958e:	fa02 f303 	lsl.w	r3, r2, r3
 8009592:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009594:	4a2e      	ldr	r2, [pc, #184]	; (8009650 <HAL_GPIO_DeInit+0x1d0>)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	089b      	lsrs	r3, r3, #2
 800959a:	3302      	adds	r3, #2
 800959c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	43da      	mvns	r2, r3
 80095a4:	482a      	ldr	r0, [pc, #168]	; (8009650 <HAL_GPIO_DeInit+0x1d0>)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	089b      	lsrs	r3, r3, #2
 80095aa:	400a      	ands	r2, r1
 80095ac:	3302      	adds	r3, #2
 80095ae:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	005b      	lsls	r3, r3, #1
 80095ba:	2103      	movs	r1, #3
 80095bc:	fa01 f303 	lsl.w	r3, r1, r3
 80095c0:	43db      	mvns	r3, r3
 80095c2:	401a      	ands	r2, r3
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	08da      	lsrs	r2, r3, #3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	3208      	adds	r2, #8
 80095d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	220f      	movs	r2, #15
 80095de:	fa02 f303 	lsl.w	r3, r2, r3
 80095e2:	43db      	mvns	r3, r3
 80095e4:	697a      	ldr	r2, [r7, #20]
 80095e6:	08d2      	lsrs	r2, r2, #3
 80095e8:	4019      	ands	r1, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	3208      	adds	r2, #8
 80095ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68da      	ldr	r2, [r3, #12]
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	2103      	movs	r1, #3
 80095fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	401a      	ands	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	2101      	movs	r1, #1
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	fa01 f303 	lsl.w	r3, r1, r3
 8009614:	43db      	mvns	r3, r3
 8009616:	401a      	ands	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	689a      	ldr	r2, [r3, #8]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	005b      	lsls	r3, r3, #1
 8009624:	2103      	movs	r1, #3
 8009626:	fa01 f303 	lsl.w	r3, r1, r3
 800962a:	43db      	mvns	r3, r3
 800962c:	401a      	ands	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	3301      	adds	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	2b0f      	cmp	r3, #15
 800963c:	f67f af2e 	bls.w	800949c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009640:	bf00      	nop
 8009642:	bf00      	nop
 8009644:	371c      	adds	r7, #28
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	40013800 	.word	0x40013800
 8009654:	40020000 	.word	0x40020000
 8009658:	40020400 	.word	0x40020400
 800965c:	40020800 	.word	0x40020800
 8009660:	40020c00 	.word	0x40020c00
 8009664:	40021000 	.word	0x40021000
 8009668:	40021400 	.word	0x40021400
 800966c:	40021800 	.word	0x40021800
 8009670:	40021c00 	.word	0x40021c00
 8009674:	40013c00 	.word	0x40013c00

08009678 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691a      	ldr	r2, [r3, #16]
 8009688:	887b      	ldrh	r3, [r7, #2]
 800968a:	4013      	ands	r3, r2
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009690:	2301      	movs	r3, #1
 8009692:	73fb      	strb	r3, [r7, #15]
 8009694:	e001      	b.n	800969a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009696:	2300      	movs	r3, #0
 8009698:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800969a:	7bfb      	ldrb	r3, [r7, #15]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3714      	adds	r7, #20
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
 80096b0:	460b      	mov	r3, r1
 80096b2:	807b      	strh	r3, [r7, #2]
 80096b4:	4613      	mov	r3, r2
 80096b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80096b8:	787b      	ldrb	r3, [r7, #1]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80096be:	887a      	ldrh	r2, [r7, #2]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80096c4:	e003      	b.n	80096ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80096c6:	887b      	ldrh	r3, [r7, #2]
 80096c8:	041a      	lsls	r2, r3, #16
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	619a      	str	r2, [r3, #24]
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
	...

080096dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d101      	bne.n	80096ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e12b      	b.n	8009946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d106      	bne.n	8009708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7fb fe06 	bl	8005314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2224      	movs	r2, #36	; 0x24
 800970c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 0201 	bic.w	r2, r2, #1
 800971e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800972e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800973e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009740:	f003 f9ce 	bl	800cae0 <HAL_RCC_GetPCLK1Freq>
 8009744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4a81      	ldr	r2, [pc, #516]	; (8009950 <HAL_I2C_Init+0x274>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d807      	bhi.n	8009760 <HAL_I2C_Init+0x84>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	4a80      	ldr	r2, [pc, #512]	; (8009954 <HAL_I2C_Init+0x278>)
 8009754:	4293      	cmp	r3, r2
 8009756:	bf94      	ite	ls
 8009758:	2301      	movls	r3, #1
 800975a:	2300      	movhi	r3, #0
 800975c:	b2db      	uxtb	r3, r3
 800975e:	e006      	b.n	800976e <HAL_I2C_Init+0x92>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4a7d      	ldr	r2, [pc, #500]	; (8009958 <HAL_I2C_Init+0x27c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	bf94      	ite	ls
 8009768:	2301      	movls	r3, #1
 800976a:	2300      	movhi	r3, #0
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e0e7      	b.n	8009946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	4a78      	ldr	r2, [pc, #480]	; (800995c <HAL_I2C_Init+0x280>)
 800977a:	fba2 2303 	umull	r2, r3, r2, r3
 800977e:	0c9b      	lsrs	r3, r3, #18
 8009780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68ba      	ldr	r2, [r7, #8]
 8009792:	430a      	orrs	r2, r1
 8009794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	6a1b      	ldr	r3, [r3, #32]
 800979c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	4a6a      	ldr	r2, [pc, #424]	; (8009950 <HAL_I2C_Init+0x274>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d802      	bhi.n	80097b0 <HAL_I2C_Init+0xd4>
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	3301      	adds	r3, #1
 80097ae:	e009      	b.n	80097c4 <HAL_I2C_Init+0xe8>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80097b6:	fb02 f303 	mul.w	r3, r2, r3
 80097ba:	4a69      	ldr	r2, [pc, #420]	; (8009960 <HAL_I2C_Init+0x284>)
 80097bc:	fba2 2303 	umull	r2, r3, r2, r3
 80097c0:	099b      	lsrs	r3, r3, #6
 80097c2:	3301      	adds	r3, #1
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	430b      	orrs	r3, r1
 80097ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	69db      	ldr	r3, [r3, #28]
 80097d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80097d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	495c      	ldr	r1, [pc, #368]	; (8009950 <HAL_I2C_Init+0x274>)
 80097e0:	428b      	cmp	r3, r1
 80097e2:	d819      	bhi.n	8009818 <HAL_I2C_Init+0x13c>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	1e59      	subs	r1, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80097f2:	1c59      	adds	r1, r3, #1
 80097f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80097f8:	400b      	ands	r3, r1
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00a      	beq.n	8009814 <HAL_I2C_Init+0x138>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	1e59      	subs	r1, r3, #1
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	005b      	lsls	r3, r3, #1
 8009808:	fbb1 f3f3 	udiv	r3, r1, r3
 800980c:	3301      	adds	r3, #1
 800980e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009812:	e051      	b.n	80098b8 <HAL_I2C_Init+0x1dc>
 8009814:	2304      	movs	r3, #4
 8009816:	e04f      	b.n	80098b8 <HAL_I2C_Init+0x1dc>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d111      	bne.n	8009844 <HAL_I2C_Init+0x168>
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	1e58      	subs	r0, r3, #1
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6859      	ldr	r1, [r3, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	005b      	lsls	r3, r3, #1
 800982c:	440b      	add	r3, r1
 800982e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009832:	3301      	adds	r3, #1
 8009834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009838:	2b00      	cmp	r3, #0
 800983a:	bf0c      	ite	eq
 800983c:	2301      	moveq	r3, #1
 800983e:	2300      	movne	r3, #0
 8009840:	b2db      	uxtb	r3, r3
 8009842:	e012      	b.n	800986a <HAL_I2C_Init+0x18e>
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	1e58      	subs	r0, r3, #1
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6859      	ldr	r1, [r3, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	0099      	lsls	r1, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	fbb0 f3f3 	udiv	r3, r0, r3
 800985a:	3301      	adds	r3, #1
 800985c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009860:	2b00      	cmp	r3, #0
 8009862:	bf0c      	ite	eq
 8009864:	2301      	moveq	r3, #1
 8009866:	2300      	movne	r3, #0
 8009868:	b2db      	uxtb	r3, r3
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <HAL_I2C_Init+0x196>
 800986e:	2301      	movs	r3, #1
 8009870:	e022      	b.n	80098b8 <HAL_I2C_Init+0x1dc>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10e      	bne.n	8009898 <HAL_I2C_Init+0x1bc>
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	1e58      	subs	r0, r3, #1
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6859      	ldr	r1, [r3, #4]
 8009882:	460b      	mov	r3, r1
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	440b      	add	r3, r1
 8009888:	fbb0 f3f3 	udiv	r3, r0, r3
 800988c:	3301      	adds	r3, #1
 800988e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009896:	e00f      	b.n	80098b8 <HAL_I2C_Init+0x1dc>
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	1e58      	subs	r0, r3, #1
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6859      	ldr	r1, [r3, #4]
 80098a0:	460b      	mov	r3, r1
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	0099      	lsls	r1, r3, #2
 80098a8:	440b      	add	r3, r1
 80098aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80098ae:	3301      	adds	r3, #1
 80098b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	6809      	ldr	r1, [r1, #0]
 80098bc:	4313      	orrs	r3, r2
 80098be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	69da      	ldr	r2, [r3, #28]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a1b      	ldr	r3, [r3, #32]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80098e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	6911      	ldr	r1, [r2, #16]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	68d2      	ldr	r2, [r2, #12]
 80098f2:	4311      	orrs	r1, r2
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6812      	ldr	r2, [r2, #0]
 80098f8:	430b      	orrs	r3, r1
 80098fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	695a      	ldr	r2, [r3, #20]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	431a      	orrs	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f042 0201 	orr.w	r2, r2, #1
 8009926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2200      	movs	r2, #0
 800992c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2220      	movs	r2, #32
 8009932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2200      	movs	r2, #0
 800993a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009944:	2300      	movs	r3, #0
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	000186a0 	.word	0x000186a0
 8009954:	001e847f 	.word	0x001e847f
 8009958:	003d08ff 	.word	0x003d08ff
 800995c:	431bde83 	.word	0x431bde83
 8009960:	10624dd3 	.word	0x10624dd3

08009964 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af02      	add	r7, sp, #8
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	607a      	str	r2, [r7, #4]
 800996e:	461a      	mov	r2, r3
 8009970:	460b      	mov	r3, r1
 8009972:	817b      	strh	r3, [r7, #10]
 8009974:	4613      	mov	r3, r2
 8009976:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009978:	f7fe fa42 	bl	8007e00 <HAL_GetTick>
 800997c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b20      	cmp	r3, #32
 8009988:	f040 80e0 	bne.w	8009b4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	2319      	movs	r3, #25
 8009992:	2201      	movs	r2, #1
 8009994:	4970      	ldr	r1, [pc, #448]	; (8009b58 <HAL_I2C_Master_Transmit+0x1f4>)
 8009996:	68f8      	ldr	r0, [r7, #12]
 8009998:	f001 f8f6 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80099a2:	2302      	movs	r3, #2
 80099a4:	e0d3      	b.n	8009b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d101      	bne.n	80099b4 <HAL_I2C_Master_Transmit+0x50>
 80099b0:	2302      	movs	r3, #2
 80099b2:	e0cc      	b.n	8009b4e <HAL_I2C_Master_Transmit+0x1ea>
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f003 0301 	and.w	r3, r3, #1
 80099c6:	2b01      	cmp	r3, #1
 80099c8:	d007      	beq.n	80099da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f042 0201 	orr.w	r2, r2, #1
 80099d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80099e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2221      	movs	r2, #33	; 0x21
 80099ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2210      	movs	r2, #16
 80099f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	687a      	ldr	r2, [r7, #4]
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	893a      	ldrh	r2, [r7, #8]
 8009a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4a50      	ldr	r2, [pc, #320]	; (8009b5c <HAL_I2C_Master_Transmit+0x1f8>)
 8009a1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009a1c:	8979      	ldrh	r1, [r7, #10]
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	6a3a      	ldr	r2, [r7, #32]
 8009a22:	68f8      	ldr	r0, [r7, #12]
 8009a24:	f000 fde2 	bl	800a5ec <I2C_MasterRequestWrite>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d001      	beq.n	8009a32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e08d      	b.n	8009b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a32:	2300      	movs	r3, #0
 8009a34:	613b      	str	r3, [r7, #16]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	613b      	str	r3, [r7, #16]
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	613b      	str	r3, [r7, #16]
 8009a46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009a48:	e066      	b.n	8009b18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a4a:	697a      	ldr	r2, [r7, #20]
 8009a4c:	6a39      	ldr	r1, [r7, #32]
 8009a4e:	68f8      	ldr	r0, [r7, #12]
 8009a50:	f001 f970 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00d      	beq.n	8009a76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5e:	2b04      	cmp	r3, #4
 8009a60:	d107      	bne.n	8009a72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	681a      	ldr	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e06b      	b.n	8009b4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	781a      	ldrb	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	1c5a      	adds	r2, r3, #1
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	3b01      	subs	r3, #1
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d11b      	bne.n	8009aec <HAL_I2C_Master_Transmit+0x188>
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d017      	beq.n	8009aec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac0:	781a      	ldrb	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	6a39      	ldr	r1, [r7, #32]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f001 f960 	bl	800adb6 <I2C_WaitOnBTFFlagUntilTimeout>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d00d      	beq.n	8009b18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	2b04      	cmp	r3, #4
 8009b02:	d107      	bne.n	8009b14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009b14:	2301      	movs	r3, #1
 8009b16:	e01a      	b.n	8009b4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d194      	bne.n	8009a4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2220      	movs	r2, #32
 8009b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	e000      	b.n	8009b4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009b4c:	2302      	movs	r3, #2
  }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	00100002 	.word	0x00100002
 8009b5c:	ffff0000 	.word	0xffff0000

08009b60 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b08c      	sub	sp, #48	; 0x30
 8009b64:	af02      	add	r7, sp, #8
 8009b66:	60f8      	str	r0, [r7, #12]
 8009b68:	607a      	str	r2, [r7, #4]
 8009b6a:	461a      	mov	r2, r3
 8009b6c:	460b      	mov	r3, r1
 8009b6e:	817b      	strh	r3, [r7, #10]
 8009b70:	4613      	mov	r3, r2
 8009b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b74:	f7fe f944 	bl	8007e00 <HAL_GetTick>
 8009b78:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b20      	cmp	r3, #32
 8009b84:	f040 820b 	bne.w	8009f9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8a:	9300      	str	r3, [sp, #0]
 8009b8c:	2319      	movs	r3, #25
 8009b8e:	2201      	movs	r2, #1
 8009b90:	497c      	ldr	r1, [pc, #496]	; (8009d84 <HAL_I2C_Master_Receive+0x224>)
 8009b92:	68f8      	ldr	r0, [r7, #12]
 8009b94:	f000 fff8 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d001      	beq.n	8009ba2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009b9e:	2302      	movs	r3, #2
 8009ba0:	e1fe      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_I2C_Master_Receive+0x50>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e1f7      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0301 	and.w	r3, r3, #1
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d007      	beq.n	8009bd6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 0201 	orr.w	r2, r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2222      	movs	r2, #34	; 0x22
 8009bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2210      	movs	r2, #16
 8009bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	893a      	ldrh	r2, [r7, #8]
 8009c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c0c:	b29a      	uxth	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4a5c      	ldr	r2, [pc, #368]	; (8009d88 <HAL_I2C_Master_Receive+0x228>)
 8009c16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009c18:	8979      	ldrh	r1, [r7, #10]
 8009c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 fd66 	bl	800a6f0 <I2C_MasterRequestRead>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e1b8      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d113      	bne.n	8009c5e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c36:	2300      	movs	r3, #0
 8009c38:	623b      	str	r3, [r7, #32]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	695b      	ldr	r3, [r3, #20]
 8009c40:	623b      	str	r3, [r7, #32]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	699b      	ldr	r3, [r3, #24]
 8009c48:	623b      	str	r3, [r7, #32]
 8009c4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	e18c      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d11b      	bne.n	8009c9e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009c74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c76:	2300      	movs	r3, #0
 8009c78:	61fb      	str	r3, [r7, #28]
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	695b      	ldr	r3, [r3, #20]
 8009c80:	61fb      	str	r3, [r7, #28]
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	699b      	ldr	r3, [r3, #24]
 8009c88:	61fb      	str	r3, [r7, #28]
 8009c8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c9a:	601a      	str	r2, [r3, #0]
 8009c9c:	e16c      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d11b      	bne.n	8009cde <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009cb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009cc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	61bb      	str	r3, [r7, #24]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	61bb      	str	r3, [r7, #24]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	61bb      	str	r3, [r7, #24]
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	e14c      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009cec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009cee:	2300      	movs	r3, #0
 8009cf0:	617b      	str	r3, [r7, #20]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	695b      	ldr	r3, [r3, #20]
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009d04:	e138      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	f200 80f1 	bhi.w	8009ef2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d14:	2b01      	cmp	r3, #1
 8009d16:	d123      	bne.n	8009d60 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f001 f88b 	bl	800ae38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e139      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691a      	ldr	r2, [r3, #16]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d36:	b2d2      	uxtb	r2, r2
 8009d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d48:	3b01      	subs	r3, #1
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d54:	b29b      	uxth	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	b29a      	uxth	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009d5e:	e10b      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d14e      	bne.n	8009e06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6e:	2200      	movs	r2, #0
 8009d70:	4906      	ldr	r1, [pc, #24]	; (8009d8c <HAL_I2C_Master_Receive+0x22c>)
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 ff08 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d008      	beq.n	8009d90 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e10e      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
 8009d82:	bf00      	nop
 8009d84:	00100002 	.word	0x00100002
 8009d88:	ffff0000 	.word	0xffff0000
 8009d8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691a      	ldr	r2, [r3, #16]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db2:	1c5a      	adds	r2, r3, #1
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	b29a      	uxth	r2, r3
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	691a      	ldr	r2, [r3, #16]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009de4:	1c5a      	adds	r2, r3, #1
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009dee:	3b01      	subs	r3, #1
 8009df0:	b29a      	uxth	r2, r3
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	3b01      	subs	r3, #1
 8009dfe:	b29a      	uxth	r2, r3
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009e04:	e0b8      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	4966      	ldr	r1, [pc, #408]	; (8009fa8 <HAL_I2C_Master_Receive+0x448>)
 8009e10:	68f8      	ldr	r0, [r7, #12]
 8009e12:	f000 feb9 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d001      	beq.n	8009e20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	e0bf      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	681a      	ldr	r2, [r3, #0]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691a      	ldr	r2, [r3, #16]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e42:	1c5a      	adds	r2, r3, #1
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	b29a      	uxth	r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e68:	2200      	movs	r2, #0
 8009e6a:	494f      	ldr	r1, [pc, #316]	; (8009fa8 <HAL_I2C_Master_Receive+0x448>)
 8009e6c:	68f8      	ldr	r0, [r7, #12]
 8009e6e:	f000 fe8b 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d001      	beq.n	8009e7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	e091      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691a      	ldr	r2, [r3, #16]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e96:	b2d2      	uxtb	r2, r2
 8009e98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	1c5a      	adds	r2, r3, #1
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea8:	3b01      	subs	r3, #1
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	3b01      	subs	r3, #1
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	691a      	ldr	r2, [r3, #16]
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	b2d2      	uxtb	r2, r2
 8009eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	1c5a      	adds	r2, r3, #1
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009eda:	3b01      	subs	r3, #1
 8009edc:	b29a      	uxth	r2, r3
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ef0:	e042      	b.n	8009f78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 ff9e 	bl	800ae38 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d001      	beq.n	8009f06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009f02:	2301      	movs	r3, #1
 8009f04:	e04c      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	691a      	ldr	r2, [r3, #16]
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f22:	3b01      	subs	r3, #1
 8009f24:	b29a      	uxth	r2, r3
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	3b01      	subs	r3, #1
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	695b      	ldr	r3, [r3, #20]
 8009f3e:	f003 0304 	and.w	r3, r3, #4
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	d118      	bne.n	8009f78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	691a      	ldr	r2, [r3, #16]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f50:	b2d2      	uxtb	r2, r2
 8009f52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f58:	1c5a      	adds	r2, r3, #1
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3b01      	subs	r3, #1
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	f47f aec2 	bne.w	8009d06 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	2220      	movs	r2, #32
 8009f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	e000      	b.n	8009fa0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009f9e:	2302      	movs	r3, #2
  }
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3728      	adds	r7, #40	; 0x28
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	00010004 	.word	0x00010004

08009fac <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b088      	sub	sp, #32
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	4608      	mov	r0, r1
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	461a      	mov	r2, r3
 8009fba:	4603      	mov	r3, r0
 8009fbc:	817b      	strh	r3, [r7, #10]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	813b      	strh	r3, [r7, #8]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009fc6:	f7fd ff1b 	bl	8007e00 <HAL_GetTick>
 8009fca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	f040 80d9 	bne.w	800a18c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	2319      	movs	r3, #25
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	496d      	ldr	r1, [pc, #436]	; (800a198 <HAL_I2C_Mem_Write+0x1ec>)
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 fdcf 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d001      	beq.n	8009ff4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e0cc      	b.n	800a18e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d101      	bne.n	800a002 <HAL_I2C_Mem_Write+0x56>
 8009ffe:	2302      	movs	r3, #2
 800a000:	e0c5      	b.n	800a18e <HAL_I2C_Mem_Write+0x1e2>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2201      	movs	r2, #1
 800a006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b01      	cmp	r3, #1
 800a016:	d007      	beq.n	800a028 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f042 0201 	orr.w	r2, r2, #1
 800a026:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a036:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	2221      	movs	r2, #33	; 0x21
 800a03c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2240      	movs	r2, #64	; 0x40
 800a044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2200      	movs	r2, #0
 800a04c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6a3a      	ldr	r2, [r7, #32]
 800a052:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a058:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a05e:	b29a      	uxth	r2, r3
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4a4d      	ldr	r2, [pc, #308]	; (800a19c <HAL_I2C_Mem_Write+0x1f0>)
 800a068:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a06a:	88f8      	ldrh	r0, [r7, #6]
 800a06c:	893a      	ldrh	r2, [r7, #8]
 800a06e:	8979      	ldrh	r1, [r7, #10]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	9301      	str	r3, [sp, #4]
 800a074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a076:	9300      	str	r3, [sp, #0]
 800a078:	4603      	mov	r3, r0
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 fc06 	bl	800a88c <I2C_RequestMemoryWrite>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d052      	beq.n	800a12c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e081      	b.n	800a18e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a08a:	697a      	ldr	r2, [r7, #20]
 800a08c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a08e:	68f8      	ldr	r0, [r7, #12]
 800a090:	f000 fe50 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 800a094:	4603      	mov	r3, r0
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00d      	beq.n	800a0b6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	d107      	bne.n	800a0b2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e06b      	b.n	800a18e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ba:	781a      	ldrb	r2, [r3, #0]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	b29a      	uxth	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	695b      	ldr	r3, [r3, #20]
 800a0ec:	f003 0304 	and.w	r3, r3, #4
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d11b      	bne.n	800a12c <HAL_I2C_Mem_Write+0x180>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d017      	beq.n	800a12c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a100:	781a      	ldrb	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10c:	1c5a      	adds	r2, r3, #1
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a116:	3b01      	subs	r3, #1
 800a118:	b29a      	uxth	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b01      	subs	r3, #1
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1aa      	bne.n	800a08a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a134:	697a      	ldr	r2, [r7, #20]
 800a136:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f000 fe3c 	bl	800adb6 <I2C_WaitOnBTFFlagUntilTimeout>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00d      	beq.n	800a160 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d107      	bne.n	800a15c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a15a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e016      	b.n	800a18e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a16e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2220      	movs	r2, #32
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a188:	2300      	movs	r3, #0
 800a18a:	e000      	b.n	800a18e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a18c:	2302      	movs	r3, #2
  }
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3718      	adds	r7, #24
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	00100002 	.word	0x00100002
 800a19c:	ffff0000 	.word	0xffff0000

0800a1a0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08c      	sub	sp, #48	; 0x30
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	4608      	mov	r0, r1
 800a1aa:	4611      	mov	r1, r2
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	817b      	strh	r3, [r7, #10]
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	813b      	strh	r3, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1ba:	f7fd fe21 	bl	8007e00 <HAL_GetTick>
 800a1be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	f040 8208 	bne.w	800a5de <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	9300      	str	r3, [sp, #0]
 800a1d2:	2319      	movs	r3, #25
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	497b      	ldr	r1, [pc, #492]	; (800a3c4 <HAL_I2C_Mem_Read+0x224>)
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 fcd5 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e1fb      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_I2C_Mem_Read+0x56>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e1f4      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f003 0301 	and.w	r3, r3, #1
 800a208:	2b01      	cmp	r3, #1
 800a20a:	d007      	beq.n	800a21c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	681a      	ldr	r2, [r3, #0]
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f042 0201 	orr.w	r2, r2, #1
 800a21a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	681a      	ldr	r2, [r3, #0]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a22a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	2222      	movs	r2, #34	; 0x22
 800a230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2240      	movs	r2, #64	; 0x40
 800a238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	2200      	movs	r2, #0
 800a240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a246:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a24c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a252:	b29a      	uxth	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4a5b      	ldr	r2, [pc, #364]	; (800a3c8 <HAL_I2C_Mem_Read+0x228>)
 800a25c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a25e:	88f8      	ldrh	r0, [r7, #6]
 800a260:	893a      	ldrh	r2, [r7, #8]
 800a262:	8979      	ldrh	r1, [r7, #10]
 800a264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a26a:	9300      	str	r3, [sp, #0]
 800a26c:	4603      	mov	r3, r0
 800a26e:	68f8      	ldr	r0, [r7, #12]
 800a270:	f000 fba2 	bl	800a9b8 <I2C_RequestMemoryRead>
 800a274:	4603      	mov	r3, r0
 800a276:	2b00      	cmp	r3, #0
 800a278:	d001      	beq.n	800a27e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e1b0      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a282:	2b00      	cmp	r3, #0
 800a284:	d113      	bne.n	800a2ae <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a286:	2300      	movs	r3, #0
 800a288:	623b      	str	r3, [r7, #32]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	695b      	ldr	r3, [r3, #20]
 800a290:	623b      	str	r3, [r7, #32]
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	623b      	str	r3, [r7, #32]
 800a29a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2aa:	601a      	str	r2, [r3, #0]
 800a2ac:	e184      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d11b      	bne.n	800a2ee <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	61fb      	str	r3, [r7, #28]
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	695b      	ldr	r3, [r3, #20]
 800a2d0:	61fb      	str	r3, [r7, #28]
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	699b      	ldr	r3, [r3, #24]
 800a2d8:	61fb      	str	r3, [r7, #28]
 800a2da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2ea:	601a      	str	r2, [r3, #0]
 800a2ec:	e164      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2f2:	2b02      	cmp	r3, #2
 800a2f4:	d11b      	bne.n	800a32e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a304:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a316:	2300      	movs	r3, #0
 800a318:	61bb      	str	r3, [r7, #24]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	61bb      	str	r3, [r7, #24]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	699b      	ldr	r3, [r3, #24]
 800a328:	61bb      	str	r3, [r7, #24]
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	e144      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a32e:	2300      	movs	r3, #0
 800a330:	617b      	str	r3, [r7, #20]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	617b      	str	r3, [r7, #20]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	699b      	ldr	r3, [r3, #24]
 800a340:	617b      	str	r3, [r7, #20]
 800a342:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800a344:	e138      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	f200 80f1 	bhi.w	800a532 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a354:	2b01      	cmp	r3, #1
 800a356:	d123      	bne.n	800a3a0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a35c:	68f8      	ldr	r0, [r7, #12]
 800a35e:	f000 fd6b 	bl	800ae38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a362:	4603      	mov	r3, r0
 800a364:	2b00      	cmp	r3, #0
 800a366:	d001      	beq.n	800a36c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e139      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	691a      	ldr	r2, [r3, #16]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	b2d2      	uxtb	r2, r2
 800a378:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a37e:	1c5a      	adds	r2, r3, #1
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a388:	3b01      	subs	r3, #1
 800a38a:	b29a      	uxth	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a394:	b29b      	uxth	r3, r3
 800a396:	3b01      	subs	r3, #1
 800a398:	b29a      	uxth	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a39e:	e10b      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3a4:	2b02      	cmp	r3, #2
 800a3a6:	d14e      	bne.n	800a446 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	9300      	str	r3, [sp, #0]
 800a3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	4906      	ldr	r1, [pc, #24]	; (800a3cc <HAL_I2C_Mem_Read+0x22c>)
 800a3b2:	68f8      	ldr	r0, [r7, #12]
 800a3b4:	f000 fbe8 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d008      	beq.n	800a3d0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e10e      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
 800a3c2:	bf00      	nop
 800a3c4:	00100002 	.word	0x00100002
 800a3c8:	ffff0000 	.word	0xffff0000
 800a3cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	681a      	ldr	r2, [r3, #0]
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	691a      	ldr	r2, [r3, #16]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	b2d2      	uxtb	r2, r2
 800a3ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3fc:	3b01      	subs	r3, #1
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a408:	b29b      	uxth	r3, r3
 800a40a:	3b01      	subs	r3, #1
 800a40c:	b29a      	uxth	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	691a      	ldr	r2, [r3, #16]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	b2d2      	uxtb	r2, r2
 800a41e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a42e:	3b01      	subs	r3, #1
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	3b01      	subs	r3, #1
 800a43e:	b29a      	uxth	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a444:	e0b8      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	9300      	str	r3, [sp, #0]
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2200      	movs	r2, #0
 800a44e:	4966      	ldr	r1, [pc, #408]	; (800a5e8 <HAL_I2C_Mem_Read+0x448>)
 800a450:	68f8      	ldr	r0, [r7, #12]
 800a452:	f000 fb99 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a456:	4603      	mov	r3, r0
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d001      	beq.n	800a460 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800a45c:	2301      	movs	r3, #1
 800a45e:	e0bf      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a46e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	691a      	ldr	r2, [r3, #16]
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47a:	b2d2      	uxtb	r2, r2
 800a47c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a482:	1c5a      	adds	r2, r3, #1
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a48c:	3b01      	subs	r3, #1
 800a48e:	b29a      	uxth	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3b01      	subs	r3, #1
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	494f      	ldr	r1, [pc, #316]	; (800a5e8 <HAL_I2C_Mem_Read+0x448>)
 800a4ac:	68f8      	ldr	r0, [r7, #12]
 800a4ae:	f000 fb6b 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d001      	beq.n	800a4bc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e091      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	691a      	ldr	r2, [r3, #16]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d6:	b2d2      	uxtb	r2, r2
 800a4d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4de:	1c5a      	adds	r2, r3, #1
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e8:	3b01      	subs	r3, #1
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	691a      	ldr	r2, [r3, #16]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a508:	b2d2      	uxtb	r2, r2
 800a50a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	1c5a      	adds	r2, r3, #1
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a51a:	3b01      	subs	r3, #1
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a526:	b29b      	uxth	r3, r3
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a530:	e042      	b.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fc7e 	bl	800ae38 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d001      	beq.n	800a546 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800a542:	2301      	movs	r3, #1
 800a544:	e04c      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	691a      	ldr	r2, [r3, #16]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a550:	b2d2      	uxtb	r2, r2
 800a552:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a558:	1c5a      	adds	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a562:	3b01      	subs	r3, #1
 800a564:	b29a      	uxth	r2, r3
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a56e:	b29b      	uxth	r3, r3
 800a570:	3b01      	subs	r3, #1
 800a572:	b29a      	uxth	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	f003 0304 	and.w	r3, r3, #4
 800a582:	2b04      	cmp	r3, #4
 800a584:	d118      	bne.n	800a5b8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	691a      	ldr	r2, [r3, #16]
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	b2d2      	uxtb	r2, r2
 800a592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a598:	1c5a      	adds	r2, r3, #1
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a2:	3b01      	subs	r3, #1
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f47f aec2 	bne.w	800a346 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	2220      	movs	r2, #32
 800a5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	e000      	b.n	800a5e0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a5de:	2302      	movs	r3, #2
  }
}
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	3728      	adds	r7, #40	; 0x28
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	00010004 	.word	0x00010004

0800a5ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b088      	sub	sp, #32
 800a5f0:	af02      	add	r7, sp, #8
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	607a      	str	r2, [r7, #4]
 800a5f6:	603b      	str	r3, [r7, #0]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a600:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b08      	cmp	r3, #8
 800a606:	d006      	beq.n	800a616 <I2C_MasterRequestWrite+0x2a>
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d003      	beq.n	800a616 <I2C_MasterRequestWrite+0x2a>
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a614:	d108      	bne.n	800a628 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a624:	601a      	str	r2, [r3, #0]
 800a626:	e00b      	b.n	800a640 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62c:	2b12      	cmp	r3, #18
 800a62e:	d107      	bne.n	800a640 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a63e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	9300      	str	r3, [sp, #0]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 fa9b 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00d      	beq.n	800a674 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a666:	d103      	bne.n	800a670 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a66e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e035      	b.n	800a6e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a67c:	d108      	bne.n	800a690 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a67e:	897b      	ldrh	r3, [r7, #10]
 800a680:	b2db      	uxtb	r3, r3
 800a682:	461a      	mov	r2, r3
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a68c:	611a      	str	r2, [r3, #16]
 800a68e:	e01b      	b.n	800a6c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a690:	897b      	ldrh	r3, [r7, #10]
 800a692:	11db      	asrs	r3, r3, #7
 800a694:	b2db      	uxtb	r3, r3
 800a696:	f003 0306 	and.w	r3, r3, #6
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	f063 030f 	orn	r3, r3, #15
 800a6a0:	b2da      	uxtb	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	490e      	ldr	r1, [pc, #56]	; (800a6e8 <I2C_MasterRequestWrite+0xfc>)
 800a6ae:	68f8      	ldr	r0, [r7, #12]
 800a6b0:	f000 fac1 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	e010      	b.n	800a6e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a6be:	897b      	ldrh	r3, [r7, #10]
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4907      	ldr	r1, [pc, #28]	; (800a6ec <I2C_MasterRequestWrite+0x100>)
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f000 fab1 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a6da:	2301      	movs	r3, #1
 800a6dc:	e000      	b.n	800a6e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3718      	adds	r7, #24
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	00010008 	.word	0x00010008
 800a6ec:	00010002 	.word	0x00010002

0800a6f0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b088      	sub	sp, #32
 800a6f4:	af02      	add	r7, sp, #8
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	607a      	str	r2, [r7, #4]
 800a6fa:	603b      	str	r3, [r7, #0]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a704:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	681a      	ldr	r2, [r3, #0]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a714:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b08      	cmp	r3, #8
 800a71a:	d006      	beq.n	800a72a <I2C_MasterRequestRead+0x3a>
 800a71c:	697b      	ldr	r3, [r7, #20]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d003      	beq.n	800a72a <I2C_MasterRequestRead+0x3a>
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a728:	d108      	bne.n	800a73c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	e00b      	b.n	800a754 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a740:	2b11      	cmp	r3, #17
 800a742:	d107      	bne.n	800a754 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681a      	ldr	r2, [r3, #0]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	9300      	str	r3, [sp, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f000 fa11 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00d      	beq.n	800a788 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a77a:	d103      	bne.n	800a784 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a784:	2303      	movs	r3, #3
 800a786:	e079      	b.n	800a87c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	691b      	ldr	r3, [r3, #16]
 800a78c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a790:	d108      	bne.n	800a7a4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a792:	897b      	ldrh	r3, [r7, #10]
 800a794:	b2db      	uxtb	r3, r3
 800a796:	f043 0301 	orr.w	r3, r3, #1
 800a79a:	b2da      	uxtb	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	611a      	str	r2, [r3, #16]
 800a7a2:	e05f      	b.n	800a864 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a7a4:	897b      	ldrh	r3, [r7, #10]
 800a7a6:	11db      	asrs	r3, r3, #7
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	f003 0306 	and.w	r3, r3, #6
 800a7ae:	b2db      	uxtb	r3, r3
 800a7b0:	f063 030f 	orn	r3, r3, #15
 800a7b4:	b2da      	uxtb	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	687a      	ldr	r2, [r7, #4]
 800a7c0:	4930      	ldr	r1, [pc, #192]	; (800a884 <I2C_MasterRequestRead+0x194>)
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fa37 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e054      	b.n	800a87c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a7d2:	897b      	ldrh	r3, [r7, #10]
 800a7d4:	b2da      	uxtb	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	4929      	ldr	r1, [pc, #164]	; (800a888 <I2C_MasterRequestRead+0x198>)
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fa27 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e044      	b.n	800a87c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	613b      	str	r3, [r7, #16]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	695b      	ldr	r3, [r3, #20]
 800a7fc:	613b      	str	r3, [r7, #16]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	699b      	ldr	r3, [r3, #24]
 800a804:	613b      	str	r3, [r7, #16]
 800a806:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a816:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	9300      	str	r3, [sp, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f000 f9af 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00d      	beq.n	800a84c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a83a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a83e:	d103      	bne.n	800a848 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a846:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a848:	2303      	movs	r3, #3
 800a84a:	e017      	b.n	800a87c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a84c:	897b      	ldrh	r3, [r7, #10]
 800a84e:	11db      	asrs	r3, r3, #7
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0306 	and.w	r3, r3, #6
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f063 030e 	orn	r3, r3, #14
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	4907      	ldr	r1, [pc, #28]	; (800a888 <I2C_MasterRequestRead+0x198>)
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 f9e3 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e000      	b.n	800a87c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a87a:	2300      	movs	r3, #0
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3718      	adds	r7, #24
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	00010008 	.word	0x00010008
 800a888:	00010002 	.word	0x00010002

0800a88c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af02      	add	r7, sp, #8
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	4608      	mov	r0, r1
 800a896:	4611      	mov	r1, r2
 800a898:	461a      	mov	r2, r3
 800a89a:	4603      	mov	r3, r0
 800a89c:	817b      	strh	r3, [r7, #10]
 800a89e:	460b      	mov	r3, r1
 800a8a0:	813b      	strh	r3, [r7, #8]
 800a8a2:	4613      	mov	r3, r2
 800a8a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	681a      	ldr	r2, [r3, #0]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b8:	9300      	str	r3, [sp, #0]
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f960 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00d      	beq.n	800a8ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8dc:	d103      	bne.n	800a8e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e05f      	b.n	800a9aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8ea:	897b      	ldrh	r3, [r7, #10]
 800a8ec:	b2db      	uxtb	r3, r3
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a8f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fc:	6a3a      	ldr	r2, [r7, #32]
 800a8fe:	492d      	ldr	r1, [pc, #180]	; (800a9b4 <I2C_RequestMemoryWrite+0x128>)
 800a900:	68f8      	ldr	r0, [r7, #12]
 800a902:	f000 f998 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d001      	beq.n	800a910 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a90c:	2301      	movs	r3, #1
 800a90e:	e04c      	b.n	800a9aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a910:	2300      	movs	r3, #0
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	617b      	str	r3, [r7, #20]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	617b      	str	r3, [r7, #20]
 800a924:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a928:	6a39      	ldr	r1, [r7, #32]
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 fa02 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 800a930:	4603      	mov	r3, r0
 800a932:	2b00      	cmp	r3, #0
 800a934:	d00d      	beq.n	800a952 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93a:	2b04      	cmp	r3, #4
 800a93c:	d107      	bne.n	800a94e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a94c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a94e:	2301      	movs	r3, #1
 800a950:	e02b      	b.n	800a9aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a952:	88fb      	ldrh	r3, [r7, #6]
 800a954:	2b01      	cmp	r3, #1
 800a956:	d105      	bne.n	800a964 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a958:	893b      	ldrh	r3, [r7, #8]
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	611a      	str	r2, [r3, #16]
 800a962:	e021      	b.n	800a9a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a964:	893b      	ldrh	r3, [r7, #8]
 800a966:	0a1b      	lsrs	r3, r3, #8
 800a968:	b29b      	uxth	r3, r3
 800a96a:	b2da      	uxtb	r2, r3
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a974:	6a39      	ldr	r1, [r7, #32]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 f9dc 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00d      	beq.n	800a99e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	2b04      	cmp	r3, #4
 800a988:	d107      	bne.n	800a99a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a998:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	e005      	b.n	800a9aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a99e:	893b      	ldrh	r3, [r7, #8]
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a9a8:	2300      	movs	r3, #0
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	00010002 	.word	0x00010002

0800a9b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af02      	add	r7, sp, #8
 800a9be:	60f8      	str	r0, [r7, #12]
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	4611      	mov	r1, r2
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	817b      	strh	r3, [r7, #10]
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	813b      	strh	r3, [r7, #8]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a9e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	2200      	movs	r2, #0
 800a9fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9fe:	68f8      	ldr	r0, [r7, #12]
 800aa00:	f000 f8c2 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00d      	beq.n	800aa26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa18:	d103      	bne.n	800aa22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e0aa      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa26:	897b      	ldrh	r3, [r7, #10]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa38:	6a3a      	ldr	r2, [r7, #32]
 800aa3a:	4952      	ldr	r1, [pc, #328]	; (800ab84 <I2C_RequestMemoryRead+0x1cc>)
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f000 f8fa 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d001      	beq.n	800aa4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	e097      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	617b      	str	r3, [r7, #20]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	617b      	str	r3, [r7, #20]
 800aa60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa64:	6a39      	ldr	r1, [r7, #32]
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f000 f964 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00d      	beq.n	800aa8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa76:	2b04      	cmp	r3, #4
 800aa78:	d107      	bne.n	800aa8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e076      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa8e:	88fb      	ldrh	r3, [r7, #6]
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d105      	bne.n	800aaa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa94:	893b      	ldrh	r3, [r7, #8]
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	611a      	str	r2, [r3, #16]
 800aa9e:	e021      	b.n	800aae4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aaa0:	893b      	ldrh	r3, [r7, #8]
 800aaa2:	0a1b      	lsrs	r3, r3, #8
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab0:	6a39      	ldr	r1, [r7, #32]
 800aab2:	68f8      	ldr	r0, [r7, #12]
 800aab4:	f000 f93e 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00d      	beq.n	800aada <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aac2:	2b04      	cmp	r3, #4
 800aac4:	d107      	bne.n	800aad6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aad4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	e050      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aada:	893b      	ldrh	r3, [r7, #8]
 800aadc:	b2da      	uxtb	r2, r3
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aae6:	6a39      	ldr	r1, [r7, #32]
 800aae8:	68f8      	ldr	r0, [r7, #12]
 800aaea:	f000 f923 	bl	800ad34 <I2C_WaitOnTXEFlagUntilTimeout>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00d      	beq.n	800ab10 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf8:	2b04      	cmp	r3, #4
 800aafa:	d107      	bne.n	800ab0c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab0a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e035      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab1e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	9300      	str	r3, [sp, #0]
 800ab24:	6a3b      	ldr	r3, [r7, #32]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab2c:	68f8      	ldr	r0, [r7, #12]
 800ab2e:	f000 f82b 	bl	800ab88 <I2C_WaitOnFlagUntilTimeout>
 800ab32:	4603      	mov	r3, r0
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00d      	beq.n	800ab54 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab46:	d103      	bne.n	800ab50 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab50:	2303      	movs	r3, #3
 800ab52:	e013      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ab54:	897b      	ldrh	r3, [r7, #10]
 800ab56:	b2db      	uxtb	r3, r3
 800ab58:	f043 0301 	orr.w	r3, r3, #1
 800ab5c:	b2da      	uxtb	r2, r3
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab66:	6a3a      	ldr	r2, [r7, #32]
 800ab68:	4906      	ldr	r1, [pc, #24]	; (800ab84 <I2C_RequestMemoryRead+0x1cc>)
 800ab6a:	68f8      	ldr	r0, [r7, #12]
 800ab6c:	f000 f863 	bl	800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d001      	beq.n	800ab7a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	e000      	b.n	800ab7c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ab7a:	2300      	movs	r3, #0
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3718      	adds	r7, #24
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}
 800ab84:	00010002 	.word	0x00010002

0800ab88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	60f8      	str	r0, [r7, #12]
 800ab90:	60b9      	str	r1, [r7, #8]
 800ab92:	603b      	str	r3, [r7, #0]
 800ab94:	4613      	mov	r3, r2
 800ab96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab98:	e025      	b.n	800abe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aba0:	d021      	beq.n	800abe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aba2:	f7fd f92d 	bl	8007e00 <HAL_GetTick>
 800aba6:	4602      	mov	r2, r0
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	1ad3      	subs	r3, r2, r3
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d302      	bcc.n	800abb8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d116      	bne.n	800abe6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2200      	movs	r2, #0
 800abbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2220      	movs	r2, #32
 800abc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abd2:	f043 0220 	orr.w	r2, r3, #32
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800abe2:	2301      	movs	r3, #1
 800abe4:	e023      	b.n	800ac2e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800abe6:	68bb      	ldr	r3, [r7, #8]
 800abe8:	0c1b      	lsrs	r3, r3, #16
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b01      	cmp	r3, #1
 800abee:	d10d      	bne.n	800ac0c <I2C_WaitOnFlagUntilTimeout+0x84>
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	43da      	mvns	r2, r3
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4013      	ands	r3, r2
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bf0c      	ite	eq
 800ac02:	2301      	moveq	r3, #1
 800ac04:	2300      	movne	r3, #0
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	461a      	mov	r2, r3
 800ac0a:	e00c      	b.n	800ac26 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	699b      	ldr	r3, [r3, #24]
 800ac12:	43da      	mvns	r2, r3
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	4013      	ands	r3, r2
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	bf0c      	ite	eq
 800ac1e:	2301      	moveq	r3, #1
 800ac20:	2300      	movne	r3, #0
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	461a      	mov	r2, r3
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d0b6      	beq.n	800ab9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800ac2c:	2300      	movs	r3, #0
}
 800ac2e:	4618      	mov	r0, r3
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b084      	sub	sp, #16
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	60f8      	str	r0, [r7, #12]
 800ac3e:	60b9      	str	r1, [r7, #8]
 800ac40:	607a      	str	r2, [r7, #4]
 800ac42:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac44:	e051      	b.n	800acea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	695b      	ldr	r3, [r3, #20]
 800ac4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac54:	d123      	bne.n	800ac9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac64:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac6e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	2220      	movs	r2, #32
 800ac7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac8a:	f043 0204 	orr.w	r2, r3, #4
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e046      	b.n	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aca4:	d021      	beq.n	800acea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aca6:	f7fd f8ab 	bl	8007e00 <HAL_GetTick>
 800acaa:	4602      	mov	r2, r0
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	1ad3      	subs	r3, r2, r3
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d302      	bcc.n	800acbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d116      	bne.n	800acea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	2200      	movs	r2, #0
 800acc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2220      	movs	r2, #32
 800acc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd6:	f043 0220 	orr.w	r2, r3, #32
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	2200      	movs	r2, #0
 800ace2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e020      	b.n	800ad2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	0c1b      	lsrs	r3, r3, #16
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	2b01      	cmp	r3, #1
 800acf2:	d10c      	bne.n	800ad0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	695b      	ldr	r3, [r3, #20]
 800acfa:	43da      	mvns	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	4013      	ands	r3, r2
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bf14      	ite	ne
 800ad06:	2301      	movne	r3, #1
 800ad08:	2300      	moveq	r3, #0
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	e00b      	b.n	800ad26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	699b      	ldr	r3, [r3, #24]
 800ad14:	43da      	mvns	r2, r3
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	4013      	ands	r3, r2
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	bf14      	ite	ne
 800ad20:	2301      	movne	r3, #1
 800ad22:	2300      	moveq	r3, #0
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d18d      	bne.n	800ac46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad40:	e02d      	b.n	800ad9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f8ce 	bl	800aee4 <I2C_IsAcknowledgeFailed>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e02d      	b.n	800adae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad58:	d021      	beq.n	800ad9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad5a:	f7fd f851 	bl	8007e00 <HAL_GetTick>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	1ad3      	subs	r3, r2, r3
 800ad64:	68ba      	ldr	r2, [r7, #8]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d302      	bcc.n	800ad70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d116      	bne.n	800ad9e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2220      	movs	r2, #32
 800ad7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	2200      	movs	r2, #0
 800ad82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	f043 0220 	orr.w	r2, r3, #32
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	e007      	b.n	800adae <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada8:	2b80      	cmp	r3, #128	; 0x80
 800adaa:	d1ca      	bne.n	800ad42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800adac:	2300      	movs	r3, #0
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800adc2:	e02d      	b.n	800ae20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f000 f88d 	bl	800aee4 <I2C_IsAcknowledgeFailed>
 800adca:	4603      	mov	r3, r0
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d001      	beq.n	800add4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e02d      	b.n	800ae30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adda:	d021      	beq.n	800ae20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800addc:	f7fd f810 	bl	8007e00 <HAL_GetTick>
 800ade0:	4602      	mov	r2, r0
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	1ad3      	subs	r3, r2, r3
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d302      	bcc.n	800adf2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d116      	bne.n	800ae20 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2220      	movs	r2, #32
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0c:	f043 0220 	orr.w	r2, r3, #32
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ae1c:	2301      	movs	r3, #1
 800ae1e:	e007      	b.n	800ae30 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	695b      	ldr	r3, [r3, #20]
 800ae26:	f003 0304 	and.w	r3, r3, #4
 800ae2a:	2b04      	cmp	r3, #4
 800ae2c:	d1ca      	bne.n	800adc4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae2e:	2300      	movs	r3, #0
}
 800ae30:	4618      	mov	r0, r3
 800ae32:	3710      	adds	r7, #16
 800ae34:	46bd      	mov	sp, r7
 800ae36:	bd80      	pop	{r7, pc}

0800ae38 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b084      	sub	sp, #16
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	60f8      	str	r0, [r7, #12]
 800ae40:	60b9      	str	r1, [r7, #8]
 800ae42:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ae44:	e042      	b.n	800aecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	695b      	ldr	r3, [r3, #20]
 800ae4c:	f003 0310 	and.w	r3, r3, #16
 800ae50:	2b10      	cmp	r3, #16
 800ae52:	d119      	bne.n	800ae88 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f06f 0210 	mvn.w	r2, #16
 800ae5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	2220      	movs	r2, #32
 800ae68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e029      	b.n	800aedc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae88:	f7fc ffba 	bl	8007e00 <HAL_GetTick>
 800ae8c:	4602      	mov	r2, r0
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	1ad3      	subs	r3, r2, r3
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d302      	bcc.n	800ae9e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d116      	bne.n	800aecc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2220      	movs	r2, #32
 800aea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb8:	f043 0220 	orr.w	r2, r3, #32
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e007      	b.n	800aedc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	695b      	ldr	r3, [r3, #20]
 800aed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aed6:	2b40      	cmp	r3, #64	; 0x40
 800aed8:	d1b5      	bne.n	800ae46 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800aeda:	2300      	movs	r3, #0
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b083      	sub	sp, #12
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aefa:	d11b      	bne.n	800af34 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af04:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2220      	movs	r2, #32
 800af10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	2200      	movs	r2, #0
 800af18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af20:	f043 0204 	orr.w	r2, r3, #4
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2200      	movs	r2, #0
 800af2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800af30:	2301      	movs	r3, #1
 800af32:	e000      	b.n	800af36 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	370c      	adds	r7, #12
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr

0800af42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800af42:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af44:	b08f      	sub	sp, #60	; 0x3c
 800af46:	af0a      	add	r7, sp, #40	; 0x28
 800af48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d101      	bne.n	800af54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800af50:	2301      	movs	r3, #1
 800af52:	e10f      	b.n	800b174 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800af60:	b2db      	uxtb	r3, r3
 800af62:	2b00      	cmp	r3, #0
 800af64:	d106      	bne.n	800af74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f00e fc76 	bl	8019860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2203      	movs	r2, #3
 800af78:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af84:	2b00      	cmp	r3, #0
 800af86:	d102      	bne.n	800af8e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	4618      	mov	r0, r3
 800af94:	f004 f80d 	bl	800efb2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	603b      	str	r3, [r7, #0]
 800af9e:	687e      	ldr	r6, [r7, #4]
 800afa0:	466d      	mov	r5, sp
 800afa2:	f106 0410 	add.w	r4, r6, #16
 800afa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800afac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800afae:	e894 0003 	ldmia.w	r4, {r0, r1}
 800afb2:	e885 0003 	stmia.w	r5, {r0, r1}
 800afb6:	1d33      	adds	r3, r6, #4
 800afb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afba:	6838      	ldr	r0, [r7, #0]
 800afbc:	f003 fee4 	bl	800ed88 <USB_CoreInit>
 800afc0:	4603      	mov	r3, r0
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d005      	beq.n	800afd2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2202      	movs	r2, #2
 800afca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e0d0      	b.n	800b174 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f003 fffb 	bl	800efd4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800afde:	2300      	movs	r3, #0
 800afe0:	73fb      	strb	r3, [r7, #15]
 800afe2:	e04a      	b.n	800b07a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800afe4:	7bfa      	ldrb	r2, [r7, #15]
 800afe6:	6879      	ldr	r1, [r7, #4]
 800afe8:	4613      	mov	r3, r2
 800afea:	00db      	lsls	r3, r3, #3
 800afec:	1a9b      	subs	r3, r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	440b      	add	r3, r1
 800aff2:	333d      	adds	r3, #61	; 0x3d
 800aff4:	2201      	movs	r2, #1
 800aff6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aff8:	7bfa      	ldrb	r2, [r7, #15]
 800affa:	6879      	ldr	r1, [r7, #4]
 800affc:	4613      	mov	r3, r2
 800affe:	00db      	lsls	r3, r3, #3
 800b000:	1a9b      	subs	r3, r3, r2
 800b002:	009b      	lsls	r3, r3, #2
 800b004:	440b      	add	r3, r1
 800b006:	333c      	adds	r3, #60	; 0x3c
 800b008:	7bfa      	ldrb	r2, [r7, #15]
 800b00a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b00c:	7bfa      	ldrb	r2, [r7, #15]
 800b00e:	7bfb      	ldrb	r3, [r7, #15]
 800b010:	b298      	uxth	r0, r3
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	4613      	mov	r3, r2
 800b016:	00db      	lsls	r3, r3, #3
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	440b      	add	r3, r1
 800b01e:	3342      	adds	r3, #66	; 0x42
 800b020:	4602      	mov	r2, r0
 800b022:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b024:	7bfa      	ldrb	r2, [r7, #15]
 800b026:	6879      	ldr	r1, [r7, #4]
 800b028:	4613      	mov	r3, r2
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	1a9b      	subs	r3, r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	440b      	add	r3, r1
 800b032:	333f      	adds	r3, #63	; 0x3f
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b038:	7bfa      	ldrb	r2, [r7, #15]
 800b03a:	6879      	ldr	r1, [r7, #4]
 800b03c:	4613      	mov	r3, r2
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	1a9b      	subs	r3, r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	440b      	add	r3, r1
 800b046:	3344      	adds	r3, #68	; 0x44
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b04c:	7bfa      	ldrb	r2, [r7, #15]
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	4613      	mov	r3, r2
 800b052:	00db      	lsls	r3, r3, #3
 800b054:	1a9b      	subs	r3, r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	3348      	adds	r3, #72	; 0x48
 800b05c:	2200      	movs	r2, #0
 800b05e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b060:	7bfa      	ldrb	r2, [r7, #15]
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4613      	mov	r3, r2
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	1a9b      	subs	r3, r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	3350      	adds	r3, #80	; 0x50
 800b070:	2200      	movs	r2, #0
 800b072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b074:	7bfb      	ldrb	r3, [r7, #15]
 800b076:	3301      	adds	r3, #1
 800b078:	73fb      	strb	r3, [r7, #15]
 800b07a:	7bfa      	ldrb	r2, [r7, #15]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	429a      	cmp	r2, r3
 800b082:	d3af      	bcc.n	800afe4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b084:	2300      	movs	r3, #0
 800b086:	73fb      	strb	r3, [r7, #15]
 800b088:	e044      	b.n	800b114 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b08a:	7bfa      	ldrb	r2, [r7, #15]
 800b08c:	6879      	ldr	r1, [r7, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	00db      	lsls	r3, r3, #3
 800b092:	1a9b      	subs	r3, r3, r2
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	440b      	add	r3, r1
 800b098:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800b09c:	2200      	movs	r2, #0
 800b09e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b0a0:	7bfa      	ldrb	r2, [r7, #15]
 800b0a2:	6879      	ldr	r1, [r7, #4]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	00db      	lsls	r3, r3, #3
 800b0a8:	1a9b      	subs	r3, r3, r2
 800b0aa:	009b      	lsls	r3, r3, #2
 800b0ac:	440b      	add	r3, r1
 800b0ae:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800b0b2:	7bfa      	ldrb	r2, [r7, #15]
 800b0b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0b6:	7bfa      	ldrb	r2, [r7, #15]
 800b0b8:	6879      	ldr	r1, [r7, #4]
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	00db      	lsls	r3, r3, #3
 800b0be:	1a9b      	subs	r3, r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b0cc:	7bfa      	ldrb	r2, [r7, #15]
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	4613      	mov	r3, r2
 800b0d2:	00db      	lsls	r3, r3, #3
 800b0d4:	1a9b      	subs	r3, r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	440b      	add	r3, r1
 800b0da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800b0de:	2200      	movs	r2, #0
 800b0e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b0e2:	7bfa      	ldrb	r2, [r7, #15]
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	00db      	lsls	r3, r3, #3
 800b0ea:	1a9b      	subs	r3, r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b0f8:	7bfa      	ldrb	r2, [r7, #15]
 800b0fa:	6879      	ldr	r1, [r7, #4]
 800b0fc:	4613      	mov	r3, r2
 800b0fe:	00db      	lsls	r3, r3, #3
 800b100:	1a9b      	subs	r3, r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	440b      	add	r3, r1
 800b106:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800b10a:	2200      	movs	r2, #0
 800b10c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b10e:	7bfb      	ldrb	r3, [r7, #15]
 800b110:	3301      	adds	r3, #1
 800b112:	73fb      	strb	r3, [r7, #15]
 800b114:	7bfa      	ldrb	r2, [r7, #15]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d3b5      	bcc.n	800b08a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	603b      	str	r3, [r7, #0]
 800b124:	687e      	ldr	r6, [r7, #4]
 800b126:	466d      	mov	r5, sp
 800b128:	f106 0410 	add.w	r4, r6, #16
 800b12c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b12e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b134:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b138:	e885 0003 	stmia.w	r5, {r0, r1}
 800b13c:	1d33      	adds	r3, r6, #4
 800b13e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b140:	6838      	ldr	r0, [r7, #0]
 800b142:	f003 ff93 	bl	800f06c <USB_DevInit>
 800b146:	4603      	mov	r3, r0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d005      	beq.n	800b158 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2202      	movs	r2, #2
 800b150:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e00d      	b.n	800b174 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2200      	movs	r2, #0
 800b15c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f005 f80f 	bl	8010190 <USB_DevDisconnect>

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3714      	adds	r7, #20
 800b178:	46bd      	mov	sp, r7
 800b17a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b17c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b190:	2b01      	cmp	r3, #1
 800b192:	d101      	bne.n	800b198 <HAL_PCD_Start+0x1c>
 800b194:	2302      	movs	r3, #2
 800b196:	e020      	b.n	800b1da <HAL_PCD_Start+0x5e>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d109      	bne.n	800b1bc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d005      	beq.n	800b1bc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f003 fee5 	bl	800ef90 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f004 ffbf 	bl	801014e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b1e2:	b590      	push	{r4, r7, lr}
 800b1e4:	b08d      	sub	sp, #52	; 0x34
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f0:	6a3b      	ldr	r3, [r7, #32]
 800b1f2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f005 f87d 	bl	80102f8 <USB_GetMode>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	f040 839d 	bne.w	800b940 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f004 ffe1 	bl	80101d2 <USB_ReadInterrupts>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	f000 8393 	beq.w	800b93e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f004 ffd8 	bl	80101d2 <USB_ReadInterrupts>
 800b222:	4603      	mov	r3, r0
 800b224:	f003 0302 	and.w	r3, r3, #2
 800b228:	2b02      	cmp	r3, #2
 800b22a:	d107      	bne.n	800b23c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	695a      	ldr	r2, [r3, #20]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f002 0202 	and.w	r2, r2, #2
 800b23a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4618      	mov	r0, r3
 800b242:	f004 ffc6 	bl	80101d2 <USB_ReadInterrupts>
 800b246:	4603      	mov	r3, r0
 800b248:	f003 0310 	and.w	r3, r3, #16
 800b24c:	2b10      	cmp	r3, #16
 800b24e:	d161      	bne.n	800b314 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f022 0210 	bic.w	r2, r2, #16
 800b25e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800b260:	6a3b      	ldr	r3, [r7, #32]
 800b262:	6a1b      	ldr	r3, [r3, #32]
 800b264:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	f003 020f 	and.w	r2, r3, #15
 800b26c:	4613      	mov	r3, r2
 800b26e:	00db      	lsls	r3, r3, #3
 800b270:	1a9b      	subs	r3, r3, r2
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b278:	687a      	ldr	r2, [r7, #4]
 800b27a:	4413      	add	r3, r2
 800b27c:	3304      	adds	r3, #4
 800b27e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	0c5b      	lsrs	r3, r3, #17
 800b284:	f003 030f 	and.w	r3, r3, #15
 800b288:	2b02      	cmp	r3, #2
 800b28a:	d124      	bne.n	800b2d6 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b292:	4013      	ands	r3, r2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d035      	beq.n	800b304 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	091b      	lsrs	r3, r3, #4
 800b2a0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b2a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6a38      	ldr	r0, [r7, #32]
 800b2ac:	f004 fdfd 	bl	800feaa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	68da      	ldr	r2, [r3, #12]
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	091b      	lsrs	r3, r3, #4
 800b2b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2bc:	441a      	add	r2, r3
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	699a      	ldr	r2, [r3, #24]
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	091b      	lsrs	r3, r3, #4
 800b2ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2ce:	441a      	add	r2, r3
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	619a      	str	r2, [r3, #24]
 800b2d4:	e016      	b.n	800b304 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800b2d6:	69bb      	ldr	r3, [r7, #24]
 800b2d8:	0c5b      	lsrs	r3, r3, #17
 800b2da:	f003 030f 	and.w	r3, r3, #15
 800b2de:	2b06      	cmp	r3, #6
 800b2e0:	d110      	bne.n	800b304 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b2e8:	2208      	movs	r2, #8
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6a38      	ldr	r0, [r7, #32]
 800b2ee:	f004 fddc 	bl	800feaa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	69bb      	ldr	r3, [r7, #24]
 800b2f8:	091b      	lsrs	r3, r3, #4
 800b2fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b2fe:	441a      	add	r2, r3
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	699a      	ldr	r2, [r3, #24]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f042 0210 	orr.w	r2, r2, #16
 800b312:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f004 ff5a 	bl	80101d2 <USB_ReadInterrupts>
 800b31e:	4603      	mov	r3, r0
 800b320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b324:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b328:	d16e      	bne.n	800b408 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800b32a:	2300      	movs	r3, #0
 800b32c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	4618      	mov	r0, r3
 800b334:	f004 ff60 	bl	80101f8 <USB_ReadDevAllOutEpInterrupt>
 800b338:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800b33a:	e062      	b.n	800b402 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33e:	f003 0301 	and.w	r3, r3, #1
 800b342:	2b00      	cmp	r3, #0
 800b344:	d057      	beq.n	800b3f6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b34c:	b2d2      	uxtb	r2, r2
 800b34e:	4611      	mov	r1, r2
 800b350:	4618      	mov	r0, r3
 800b352:	f004 ff85 	bl	8010260 <USB_ReadDevOutEPInterrupt>
 800b356:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d00c      	beq.n	800b37c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	69fb      	ldr	r3, [r7, #28]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36e:	461a      	mov	r2, r3
 800b370:	2301      	movs	r3, #1
 800b372:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b376:	6878      	ldr	r0, [r7, #4]
 800b378:	f000 fdb0 	bl	800bedc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b37c:	693b      	ldr	r3, [r7, #16]
 800b37e:	f003 0308 	and.w	r3, r3, #8
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00c      	beq.n	800b3a0 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b392:	461a      	mov	r2, r3
 800b394:	2308      	movs	r3, #8
 800b396:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b398:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b39a:	6878      	ldr	r0, [r7, #4]
 800b39c:	f000 feaa 	bl	800c0f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	f003 0310 	and.w	r3, r3, #16
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	2310      	movs	r3, #16
 800b3ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	f003 0320 	and.w	r3, r3, #32
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d008      	beq.n	800b3d8 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	461a      	mov	r2, r3
 800b3d4:	2320      	movs	r3, #32
 800b3d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d009      	beq.n	800b3f6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3f4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	3301      	adds	r3, #1
 800b3fa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fe:	085b      	lsrs	r3, r3, #1
 800b400:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b404:	2b00      	cmp	r3, #0
 800b406:	d199      	bne.n	800b33c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f004 fee0 	bl	80101d2 <USB_ReadInterrupts>
 800b412:	4603      	mov	r3, r0
 800b414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b418:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b41c:	f040 80c0 	bne.w	800b5a0 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	4618      	mov	r0, r3
 800b426:	f004 ff01 	bl	801022c <USB_ReadDevAllInEpInterrupt>
 800b42a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b430:	e0b2      	b.n	800b598 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b434:	f003 0301 	and.w	r3, r3, #1
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 80a7 	beq.w	800b58c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b444:	b2d2      	uxtb	r2, r2
 800b446:	4611      	mov	r1, r2
 800b448:	4618      	mov	r0, r3
 800b44a:	f004 ff27 	bl	801029c <USB_ReadDevInEPInterrupt>
 800b44e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	f003 0301 	and.w	r3, r3, #1
 800b456:	2b00      	cmp	r3, #0
 800b458:	d057      	beq.n	800b50a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b45a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b45c:	f003 030f 	and.w	r3, r3, #15
 800b460:	2201      	movs	r2, #1
 800b462:	fa02 f303 	lsl.w	r3, r2, r3
 800b466:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b46e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	43db      	mvns	r3, r3
 800b474:	69f9      	ldr	r1, [r7, #28]
 800b476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b47a:	4013      	ands	r3, r2
 800b47c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	015a      	lsls	r2, r3, #5
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	4413      	add	r3, r2
 800b486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48a:	461a      	mov	r2, r3
 800b48c:	2301      	movs	r3, #1
 800b48e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d132      	bne.n	800b4fe <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b498:	6879      	ldr	r1, [r7, #4]
 800b49a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b49c:	4613      	mov	r3, r2
 800b49e:	00db      	lsls	r3, r3, #3
 800b4a0:	1a9b      	subs	r3, r3, r2
 800b4a2:	009b      	lsls	r3, r3, #2
 800b4a4:	440b      	add	r3, r1
 800b4a6:	3348      	adds	r3, #72	; 0x48
 800b4a8:	6819      	ldr	r1, [r3, #0]
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4ae:	4613      	mov	r3, r2
 800b4b0:	00db      	lsls	r3, r3, #3
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	009b      	lsls	r3, r3, #2
 800b4b6:	4403      	add	r3, r0
 800b4b8:	3344      	adds	r3, #68	; 0x44
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4419      	add	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4c2:	4613      	mov	r3, r2
 800b4c4:	00db      	lsls	r3, r3, #3
 800b4c6:	1a9b      	subs	r3, r3, r2
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	4403      	add	r3, r0
 800b4cc:	3348      	adds	r3, #72	; 0x48
 800b4ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d113      	bne.n	800b4fe <HAL_PCD_IRQHandler+0x31c>
 800b4d6:	6879      	ldr	r1, [r7, #4]
 800b4d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4da:	4613      	mov	r3, r2
 800b4dc:	00db      	lsls	r3, r3, #3
 800b4de:	1a9b      	subs	r3, r3, r2
 800b4e0:	009b      	lsls	r3, r3, #2
 800b4e2:	440b      	add	r3, r1
 800b4e4:	3350      	adds	r3, #80	; 0x50
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d108      	bne.n	800b4fe <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	f004 ff2f 	bl	801035c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	b2db      	uxtb	r3, r3
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f00e fa3a 	bl	801997e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	f003 0308 	and.w	r3, r3, #8
 800b510:	2b00      	cmp	r3, #0
 800b512:	d008      	beq.n	800b526 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b520:	461a      	mov	r2, r3
 800b522:	2308      	movs	r3, #8
 800b524:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	f003 0310 	and.w	r3, r3, #16
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d008      	beq.n	800b542 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53c:	461a      	mov	r2, r3
 800b53e:	2310      	movs	r3, #16
 800b540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d008      	beq.n	800b55e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	015a      	lsls	r2, r3, #5
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	4413      	add	r3, r2
 800b554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b558:	461a      	mov	r2, r3
 800b55a:	2340      	movs	r3, #64	; 0x40
 800b55c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d008      	beq.n	800b57a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	015a      	lsls	r2, r3, #5
 800b56c:	69fb      	ldr	r3, [r7, #28]
 800b56e:	4413      	add	r3, r2
 800b570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b574:	461a      	mov	r2, r3
 800b576:	2302      	movs	r3, #2
 800b578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b580:	2b00      	cmp	r3, #0
 800b582:	d003      	beq.n	800b58c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 fc1b 	bl	800bdc2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	3301      	adds	r3, #1
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b594:	085b      	lsrs	r3, r3, #1
 800b596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	f47f af49 	bne.w	800b432 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f004 fe14 	bl	80101d2 <USB_ReadInterrupts>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b4:	d122      	bne.n	800b5fc <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	69fa      	ldr	r2, [r7, #28]
 800b5c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5c4:	f023 0301 	bic.w	r3, r3, #1
 800b5c8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d108      	bne.n	800b5e6 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b5dc:	2100      	movs	r1, #0
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f000 fe26 	bl	800c230 <HAL_PCDEx_LPM_Callback>
 800b5e4:	e002      	b.n	800b5ec <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f00e fa40 	bl	8019a6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	695a      	ldr	r2, [r3, #20]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b5fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	4618      	mov	r0, r3
 800b602:	f004 fde6 	bl	80101d2 <USB_ReadInterrupts>
 800b606:	4603      	mov	r3, r0
 800b608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b60c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b610:	d112      	bne.n	800b638 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	f003 0301 	and.w	r3, r3, #1
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d102      	bne.n	800b628 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f00e f9fc 	bl	8019a20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	695a      	ldr	r2, [r3, #20]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b636:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4618      	mov	r0, r3
 800b63e:	f004 fdc8 	bl	80101d2 <USB_ReadInterrupts>
 800b642:	4603      	mov	r3, r0
 800b644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b64c:	f040 80c7 	bne.w	800b7de <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b650:	69fb      	ldr	r3, [r7, #28]
 800b652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	69fa      	ldr	r2, [r7, #28]
 800b65a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b65e:	f023 0301 	bic.w	r3, r3, #1
 800b662:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	2110      	movs	r1, #16
 800b66a:	4618      	mov	r0, r3
 800b66c:	f003 fe62 	bl	800f334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b670:	2300      	movs	r3, #0
 800b672:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b674:	e056      	b.n	800b724 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	015a      	lsls	r2, r3, #5
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	4413      	add	r3, r2
 800b67e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b682:	461a      	mov	r2, r3
 800b684:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b688:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b68c:	015a      	lsls	r2, r3, #5
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	4413      	add	r3, r2
 800b692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b69a:	0151      	lsls	r1, r2, #5
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	440a      	add	r2, r1
 800b6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6a8:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ba:	0151      	lsls	r1, r2, #5
 800b6bc:	69fa      	ldr	r2, [r7, #28]
 800b6be:	440a      	add	r2, r1
 800b6c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b6ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6cc:	015a      	lsls	r2, r3, #5
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b6dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e0:	015a      	lsls	r2, r3, #5
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6ee:	0151      	lsls	r1, r2, #5
 800b6f0:	69fa      	ldr	r2, [r7, #28]
 800b6f2:	440a      	add	r2, r1
 800b6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b6fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b700:	015a      	lsls	r2, r3, #5
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	4413      	add	r3, r2
 800b706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b70e:	0151      	lsls	r1, r2, #5
 800b710:	69fa      	ldr	r2, [r7, #28]
 800b712:	440a      	add	r2, r1
 800b714:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b71c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b720:	3301      	adds	r3, #1
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d3a3      	bcc.n	800b676 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b734:	69db      	ldr	r3, [r3, #28]
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b73c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b740:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b746:	2b00      	cmp	r3, #0
 800b748:	d016      	beq.n	800b778 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b74a:	69fb      	ldr	r3, [r7, #28]
 800b74c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b750:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b75a:	f043 030b 	orr.w	r3, r3, #11
 800b75e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b770:	f043 030b 	orr.w	r3, r3, #11
 800b774:	6453      	str	r3, [r2, #68]	; 0x44
 800b776:	e015      	b.n	800b7a4 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b778:	69fb      	ldr	r3, [r7, #28]
 800b77a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77e:	695b      	ldr	r3, [r3, #20]
 800b780:	69fa      	ldr	r2, [r7, #28]
 800b782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b786:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b78a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800b78e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b796:	691b      	ldr	r3, [r3, #16]
 800b798:	69fa      	ldr	r2, [r7, #28]
 800b79a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b79e:	f043 030b 	orr.w	r3, r3, #11
 800b7a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	69fa      	ldr	r2, [r7, #28]
 800b7ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6818      	ldr	r0, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	691b      	ldr	r3, [r3, #16]
 800b7c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	f004 fdc7 	bl	801035c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	695a      	ldr	r2, [r3, #20]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b7dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f004 fcf5 	bl	80101d2 <USB_ReadInterrupts>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f2:	d124      	bne.n	800b83e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f004 fd8b 	bl	8010314 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	4618      	mov	r0, r3
 800b804:	f003 fdf3 	bl	800f3ee <USB_GetDevSpeed>
 800b808:	4603      	mov	r3, r0
 800b80a:	461a      	mov	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681c      	ldr	r4, [r3, #0]
 800b814:	f001 f958 	bl	800cac8 <HAL_RCC_GetHCLKFreq>
 800b818:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	461a      	mov	r2, r3
 800b822:	4620      	mov	r0, r4
 800b824:	f003 fb12 	bl	800ee4c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f00e f8d0 	bl	80199ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	695a      	ldr	r2, [r3, #20]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b83c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	4618      	mov	r0, r3
 800b844:	f004 fcc5 	bl	80101d2 <USB_ReadInterrupts>
 800b848:	4603      	mov	r3, r0
 800b84a:	f003 0308 	and.w	r3, r3, #8
 800b84e:	2b08      	cmp	r3, #8
 800b850:	d10a      	bne.n	800b868 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	f00e f8ad 	bl	80199b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	695a      	ldr	r2, [r3, #20]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f002 0208 	and.w	r2, r2, #8
 800b866:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	4618      	mov	r0, r3
 800b86e:	f004 fcb0 	bl	80101d2 <USB_ReadInterrupts>
 800b872:	4603      	mov	r3, r0
 800b874:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b878:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b87c:	d10f      	bne.n	800b89e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b87e:	2300      	movs	r3, #0
 800b880:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b884:	b2db      	uxtb	r3, r3
 800b886:	4619      	mov	r1, r3
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f00e f90f 	bl	8019aac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	695a      	ldr	r2, [r3, #20]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b89c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f004 fc95 	bl	80101d2 <USB_ReadInterrupts>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b8ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8b2:	d10f      	bne.n	800b8d4 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f00e f8e2 	bl	8019a88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	695a      	ldr	r2, [r3, #20]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b8d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f004 fc7a 	bl	80101d2 <USB_ReadInterrupts>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b8e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e8:	d10a      	bne.n	800b900 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f00e f8f0 	bl	8019ad0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	695a      	ldr	r2, [r3, #20]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b8fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	4618      	mov	r0, r3
 800b906:	f004 fc64 	bl	80101d2 <USB_ReadInterrupts>
 800b90a:	4603      	mov	r3, r0
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b04      	cmp	r3, #4
 800b912:	d115      	bne.n	800b940 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	f003 0304 	and.w	r3, r3, #4
 800b922:	2b00      	cmp	r3, #0
 800b924:	d002      	beq.n	800b92c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f00e f8e0 	bl	8019aec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	6859      	ldr	r1, [r3, #4]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	69ba      	ldr	r2, [r7, #24]
 800b938:	430a      	orrs	r2, r1
 800b93a:	605a      	str	r2, [r3, #4]
 800b93c:	e000      	b.n	800b940 <HAL_PCD_IRQHandler+0x75e>
      return;
 800b93e:	bf00      	nop
    }
  }
}
 800b940:	3734      	adds	r7, #52	; 0x34
 800b942:	46bd      	mov	sp, r7
 800b944:	bd90      	pop	{r4, r7, pc}

0800b946 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b946:	b580      	push	{r7, lr}
 800b948:	b082      	sub	sp, #8
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d101      	bne.n	800b960 <HAL_PCD_SetAddress+0x1a>
 800b95c:	2302      	movs	r3, #2
 800b95e:	e013      	b.n	800b988 <HAL_PCD_SetAddress+0x42>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2201      	movs	r2, #1
 800b964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	78fa      	ldrb	r2, [r7, #3]
 800b96c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	78fa      	ldrb	r2, [r7, #3]
 800b976:	4611      	mov	r1, r2
 800b978:	4618      	mov	r0, r3
 800b97a:	f004 fbc2 	bl	8010102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2200      	movs	r2, #0
 800b982:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800b986:	2300      	movs	r3, #0
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	461a      	mov	r2, r3
 800b99e:	4603      	mov	r3, r0
 800b9a0:	70fb      	strb	r3, [r7, #3]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	803b      	strh	r3, [r7, #0]
 800b9a6:	4613      	mov	r3, r2
 800b9a8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b9ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	da0f      	bge.n	800b9d6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b9b6:	78fb      	ldrb	r3, [r7, #3]
 800b9b8:	f003 020f 	and.w	r2, r3, #15
 800b9bc:	4613      	mov	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	1a9b      	subs	r3, r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	3338      	adds	r3, #56	; 0x38
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	3304      	adds	r3, #4
 800b9cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	705a      	strb	r2, [r3, #1]
 800b9d4:	e00f      	b.n	800b9f6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b9d6:	78fb      	ldrb	r3, [r7, #3]
 800b9d8:	f003 020f 	and.w	r2, r3, #15
 800b9dc:	4613      	mov	r3, r2
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	1a9b      	subs	r3, r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	4413      	add	r3, r2
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b9f6:	78fb      	ldrb	r3, [r7, #3]
 800b9f8:	f003 030f 	and.w	r3, r3, #15
 800b9fc:	b2da      	uxtb	r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ba02:	883a      	ldrh	r2, [r7, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	78ba      	ldrb	r2, [r7, #2]
 800ba0c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	785b      	ldrb	r3, [r3, #1]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d004      	beq.n	800ba20 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ba20:	78bb      	ldrb	r3, [r7, #2]
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d102      	bne.n	800ba2c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d101      	bne.n	800ba3a <HAL_PCD_EP_Open+0xaa>
 800ba36:	2302      	movs	r3, #2
 800ba38:	e00e      	b.n	800ba58 <HAL_PCD_EP_Open+0xc8>
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2201      	movs	r2, #1
 800ba3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f003 fcf5 	bl	800f438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2200      	movs	r2, #0
 800ba52:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800ba56:	7afb      	ldrb	r3, [r7, #11]
}
 800ba58:	4618      	mov	r0, r3
 800ba5a:	3710      	adds	r7, #16
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b084      	sub	sp, #16
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
 800ba68:	460b      	mov	r3, r1
 800ba6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ba6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	da0f      	bge.n	800ba94 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	f003 020f 	and.w	r2, r3, #15
 800ba7a:	4613      	mov	r3, r2
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	1a9b      	subs	r3, r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	3338      	adds	r3, #56	; 0x38
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	4413      	add	r3, r2
 800ba88:	3304      	adds	r3, #4
 800ba8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	705a      	strb	r2, [r3, #1]
 800ba92:	e00f      	b.n	800bab4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ba94:	78fb      	ldrb	r3, [r7, #3]
 800ba96:	f003 020f 	and.w	r2, r3, #15
 800ba9a:	4613      	mov	r3, r2
 800ba9c:	00db      	lsls	r3, r3, #3
 800ba9e:	1a9b      	subs	r3, r3, r2
 800baa0:	009b      	lsls	r3, r3, #2
 800baa2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800baa6:	687a      	ldr	r2, [r7, #4]
 800baa8:	4413      	add	r3, r2
 800baaa:	3304      	adds	r3, #4
 800baac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2200      	movs	r2, #0
 800bab2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800bab4:	78fb      	ldrb	r3, [r7, #3]
 800bab6:	f003 030f 	and.w	r3, r3, #15
 800baba:	b2da      	uxtb	r2, r3
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d101      	bne.n	800bace <HAL_PCD_EP_Close+0x6e>
 800baca:	2302      	movs	r3, #2
 800bacc:	e00e      	b.n	800baec <HAL_PCD_EP_Close+0x8c>
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2201      	movs	r2, #1
 800bad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68f9      	ldr	r1, [r7, #12]
 800badc:	4618      	mov	r0, r3
 800bade:	f003 fd33 	bl	800f548 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2200      	movs	r2, #0
 800bae6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3710      	adds	r7, #16
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	607a      	str	r2, [r7, #4]
 800bafe:	603b      	str	r3, [r7, #0]
 800bb00:	460b      	mov	r3, r1
 800bb02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb04:	7afb      	ldrb	r3, [r7, #11]
 800bb06:	f003 020f 	and.w	r2, r3, #15
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	00db      	lsls	r3, r3, #3
 800bb0e:	1a9b      	subs	r3, r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bb16:	68fa      	ldr	r2, [r7, #12]
 800bb18:	4413      	add	r3, r2
 800bb1a:	3304      	adds	r3, #4
 800bb1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	2200      	movs	r2, #0
 800bb2e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	2200      	movs	r2, #0
 800bb34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb36:	7afb      	ldrb	r3, [r7, #11]
 800bb38:	f003 030f 	and.w	r3, r3, #15
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	691b      	ldr	r3, [r3, #16]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	d102      	bne.n	800bb50 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bb4a:	687a      	ldr	r2, [r7, #4]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bb50:	7afb      	ldrb	r3, [r7, #11]
 800bb52:	f003 030f 	and.w	r3, r3, #15
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d109      	bne.n	800bb6e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6818      	ldr	r0, [r3, #0]
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	461a      	mov	r2, r3
 800bb66:	6979      	ldr	r1, [r7, #20]
 800bb68:	f004 f80e 	bl	800fb88 <USB_EP0StartXfer>
 800bb6c:	e008      	b.n	800bb80 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6818      	ldr	r0, [r3, #0]
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	461a      	mov	r2, r3
 800bb7a:	6979      	ldr	r1, [r7, #20]
 800bb7c:	f003 fdc0 	bl	800f700 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bb80:	2300      	movs	r3, #0
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3718      	adds	r7, #24
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb8a:	b480      	push	{r7}
 800bb8c:	b083      	sub	sp, #12
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
 800bb92:	460b      	mov	r3, r1
 800bb94:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	f003 020f 	and.w	r2, r3, #15
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	00db      	lsls	r3, r3, #3
 800bba2:	1a9b      	subs	r3, r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	440b      	add	r3, r1
 800bba8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bbac:	681b      	ldr	r3, [r3, #0]
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b086      	sub	sp, #24
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	60f8      	str	r0, [r7, #12]
 800bbc2:	607a      	str	r2, [r7, #4]
 800bbc4:	603b      	str	r3, [r7, #0]
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbca:	7afb      	ldrb	r3, [r7, #11]
 800bbcc:	f003 020f 	and.w	r2, r3, #15
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	00db      	lsls	r3, r3, #3
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	009b      	lsls	r3, r3, #2
 800bbd8:	3338      	adds	r3, #56	; 0x38
 800bbda:	68fa      	ldr	r2, [r7, #12]
 800bbdc:	4413      	add	r3, r2
 800bbde:	3304      	adds	r3, #4
 800bbe0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	683a      	ldr	r2, [r7, #0]
 800bbec:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bbfa:	7afb      	ldrb	r3, [r7, #11]
 800bbfc:	f003 030f 	and.w	r3, r3, #15
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d102      	bne.n	800bc14 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bc14:	7afb      	ldrb	r3, [r7, #11]
 800bc16:	f003 030f 	and.w	r3, r3, #15
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d109      	bne.n	800bc32 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	6818      	ldr	r0, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	691b      	ldr	r3, [r3, #16]
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	461a      	mov	r2, r3
 800bc2a:	6979      	ldr	r1, [r7, #20]
 800bc2c:	f003 ffac 	bl	800fb88 <USB_EP0StartXfer>
 800bc30:	e008      	b.n	800bc44 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	6818      	ldr	r0, [r3, #0]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	691b      	ldr	r3, [r3, #16]
 800bc3a:	b2db      	uxtb	r3, r3
 800bc3c:	461a      	mov	r2, r3
 800bc3e:	6979      	ldr	r1, [r7, #20]
 800bc40:	f003 fd5e 	bl	800f700 <USB_EPStartXfer>
  }

  return HAL_OK;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bc4e:	b580      	push	{r7, lr}
 800bc50:	b084      	sub	sp, #16
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800bc5a:	78fb      	ldrb	r3, [r7, #3]
 800bc5c:	f003 020f 	and.w	r2, r3, #15
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d901      	bls.n	800bc6c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	e050      	b.n	800bd0e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bc6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	da0f      	bge.n	800bc94 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bc74:	78fb      	ldrb	r3, [r7, #3]
 800bc76:	f003 020f 	and.w	r2, r3, #15
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	00db      	lsls	r3, r3, #3
 800bc7e:	1a9b      	subs	r3, r3, r2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	3338      	adds	r3, #56	; 0x38
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	4413      	add	r3, r2
 800bc88:	3304      	adds	r3, #4
 800bc8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	705a      	strb	r2, [r3, #1]
 800bc92:	e00d      	b.n	800bcb0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800bc94:	78fa      	ldrb	r2, [r7, #3]
 800bc96:	4613      	mov	r3, r2
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	1a9b      	subs	r3, r3, r2
 800bc9c:	009b      	lsls	r3, r3, #2
 800bc9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	4413      	add	r3, r2
 800bca6:	3304      	adds	r3, #4
 800bca8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2200      	movs	r2, #0
 800bcae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bcb6:	78fb      	ldrb	r3, [r7, #3]
 800bcb8:	f003 030f 	and.w	r3, r3, #15
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d101      	bne.n	800bcd0 <HAL_PCD_EP_SetStall+0x82>
 800bccc:	2302      	movs	r3, #2
 800bcce:	e01e      	b.n	800bd0e <HAL_PCD_EP_SetStall+0xc0>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68f9      	ldr	r1, [r7, #12]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f004 f93b 	bl	800ff5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bce4:	78fb      	ldrb	r3, [r7, #3]
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	b2d9      	uxtb	r1, r3
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800bcfe:	461a      	mov	r2, r3
 800bd00:	f004 fb2c 	bl	801035c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3710      	adds	r7, #16
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b084      	sub	sp, #16
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bd22:	78fb      	ldrb	r3, [r7, #3]
 800bd24:	f003 020f 	and.w	r2, r3, #15
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	685b      	ldr	r3, [r3, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d901      	bls.n	800bd34 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e042      	b.n	800bdba <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bd34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	da0f      	bge.n	800bd5c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bd3c:	78fb      	ldrb	r3, [r7, #3]
 800bd3e:	f003 020f 	and.w	r2, r3, #15
 800bd42:	4613      	mov	r3, r2
 800bd44:	00db      	lsls	r3, r3, #3
 800bd46:	1a9b      	subs	r3, r3, r2
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	3338      	adds	r3, #56	; 0x38
 800bd4c:	687a      	ldr	r2, [r7, #4]
 800bd4e:	4413      	add	r3, r2
 800bd50:	3304      	adds	r3, #4
 800bd52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2201      	movs	r2, #1
 800bd58:	705a      	strb	r2, [r3, #1]
 800bd5a:	e00f      	b.n	800bd7c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bd5c:	78fb      	ldrb	r3, [r7, #3]
 800bd5e:	f003 020f 	and.w	r2, r3, #15
 800bd62:	4613      	mov	r3, r2
 800bd64:	00db      	lsls	r3, r3, #3
 800bd66:	1a9b      	subs	r3, r3, r2
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	4413      	add	r3, r2
 800bd72:	3304      	adds	r3, #4
 800bd74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bd82:	78fb      	ldrb	r3, [r7, #3]
 800bd84:	f003 030f 	and.w	r3, r3, #15
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d101      	bne.n	800bd9c <HAL_PCD_EP_ClrStall+0x86>
 800bd98:	2302      	movs	r3, #2
 800bd9a:	e00e      	b.n	800bdba <HAL_PCD_EP_ClrStall+0xa4>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	68f9      	ldr	r1, [r7, #12]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f004 f943 	bl	8010036 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}

0800bdc2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bdc2:	b580      	push	{r7, lr}
 800bdc4:	b08a      	sub	sp, #40	; 0x28
 800bdc6:	af02      	add	r7, sp, #8
 800bdc8:	6078      	str	r0, [r7, #4]
 800bdca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdd2:	697b      	ldr	r3, [r7, #20]
 800bdd4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	4613      	mov	r3, r2
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	1a9b      	subs	r3, r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	3338      	adds	r3, #56	; 0x38
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	4413      	add	r3, r2
 800bde6:	3304      	adds	r3, #4
 800bde8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	699a      	ldr	r2, [r3, #24]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	429a      	cmp	r2, r3
 800bdf4:	d901      	bls.n	800bdfa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	e06c      	b.n	800bed4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	695a      	ldr	r2, [r3, #20]
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	69fa      	ldr	r2, [r7, #28]
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d902      	bls.n	800be16 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	3303      	adds	r3, #3
 800be1a:	089b      	lsrs	r3, r3, #2
 800be1c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be1e:	e02b      	b.n	800be78 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	695a      	ldr	r2, [r3, #20]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	699b      	ldr	r3, [r3, #24]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	689b      	ldr	r3, [r3, #8]
 800be30:	69fa      	ldr	r2, [r7, #28]
 800be32:	429a      	cmp	r2, r3
 800be34:	d902      	bls.n	800be3c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800be3c:	69fb      	ldr	r3, [r7, #28]
 800be3e:	3303      	adds	r3, #3
 800be40:	089b      	lsrs	r3, r3, #2
 800be42:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68d9      	ldr	r1, [r3, #12]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	69fb      	ldr	r3, [r7, #28]
 800be4e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800be54:	b2db      	uxtb	r3, r3
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	4603      	mov	r3, r0
 800be5a:	6978      	ldr	r0, [r7, #20]
 800be5c:	f003 ffe7 	bl	800fe2e <USB_WritePacket>

    ep->xfer_buff  += len;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	68da      	ldr	r2, [r3, #12]
 800be64:	69fb      	ldr	r3, [r7, #28]
 800be66:	441a      	add	r2, r3
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	699a      	ldr	r2, [r3, #24]
 800be70:	69fb      	ldr	r3, [r7, #28]
 800be72:	441a      	add	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	015a      	lsls	r2, r3, #5
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	4413      	add	r3, r2
 800be80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	b29b      	uxth	r3, r3
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d809      	bhi.n	800bea2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	699a      	ldr	r2, [r3, #24]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800be96:	429a      	cmp	r2, r3
 800be98:	d203      	bcs.n	800bea2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d1be      	bne.n	800be20 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	695a      	ldr	r2, [r3, #20]
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	429a      	cmp	r2, r3
 800beac:	d811      	bhi.n	800bed2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	f003 030f 	and.w	r3, r3, #15
 800beb4:	2201      	movs	r2, #1
 800beb6:	fa02 f303 	lsl.w	r3, r2, r3
 800beba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	43db      	mvns	r3, r3
 800bec8:	6939      	ldr	r1, [r7, #16]
 800beca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bece:	4013      	ands	r3, r2
 800bed0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3720      	adds	r7, #32
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd80      	pop	{r7, pc}

0800bedc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b086      	sub	sp, #24
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bef0:	697b      	ldr	r3, [r7, #20]
 800bef2:	333c      	adds	r3, #60	; 0x3c
 800bef4:	3304      	adds	r3, #4
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	015a      	lsls	r2, r3, #5
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	4413      	add	r3, r2
 800bf02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	691b      	ldr	r3, [r3, #16]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	f040 80a0 	bne.w	800c054 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f003 0308 	and.w	r3, r3, #8
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d015      	beq.n	800bf4a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	4a72      	ldr	r2, [pc, #456]	; (800c0ec <PCD_EP_OutXfrComplete_int+0x210>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	f240 80dd 	bls.w	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 80d7 	beq.w	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf40:	461a      	mov	r2, r3
 800bf42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf46:	6093      	str	r3, [r2, #8]
 800bf48:	e0cb      	b.n	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	f003 0320 	and.w	r3, r3, #32
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d009      	beq.n	800bf68 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf60:	461a      	mov	r2, r3
 800bf62:	2320      	movs	r3, #32
 800bf64:	6093      	str	r3, [r2, #8]
 800bf66:	e0bc      	b.n	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f040 80b7 	bne.w	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	4a5d      	ldr	r2, [pc, #372]	; (800c0ec <PCD_EP_OutXfrComplete_int+0x210>)
 800bf78:	4293      	cmp	r3, r2
 800bf7a:	d90f      	bls.n	800bf9c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf92:	461a      	mov	r2, r3
 800bf94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf98:	6093      	str	r3, [r2, #8]
 800bf9a:	e0a2      	b.n	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800bf9c:	6879      	ldr	r1, [r7, #4]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	4613      	mov	r3, r2
 800bfa2:	00db      	lsls	r3, r3, #3
 800bfa4:	1a9b      	subs	r3, r3, r2
 800bfa6:	009b      	lsls	r3, r3, #2
 800bfa8:	440b      	add	r3, r1
 800bfaa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bfae:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	0159      	lsls	r1, r3, #5
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	440b      	add	r3, r1
 800bfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800bfc2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	683a      	ldr	r2, [r7, #0]
 800bfc8:	4613      	mov	r3, r2
 800bfca:	00db      	lsls	r3, r3, #3
 800bfcc:	1a9b      	subs	r3, r3, r2
 800bfce:	009b      	lsls	r3, r3, #2
 800bfd0:	4403      	add	r3, r0
 800bfd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800bfd6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800bfd8:	6879      	ldr	r1, [r7, #4]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	4613      	mov	r3, r2
 800bfde:	00db      	lsls	r3, r3, #3
 800bfe0:	1a9b      	subs	r3, r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	440b      	add	r3, r1
 800bfe6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800bfea:	6819      	ldr	r1, [r3, #0]
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	4613      	mov	r3, r2
 800bff2:	00db      	lsls	r3, r3, #3
 800bff4:	1a9b      	subs	r3, r3, r2
 800bff6:	009b      	lsls	r3, r3, #2
 800bff8:	4403      	add	r3, r0
 800bffa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	4419      	add	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	683a      	ldr	r2, [r7, #0]
 800c006:	4613      	mov	r3, r2
 800c008:	00db      	lsls	r3, r3, #3
 800c00a:	1a9b      	subs	r3, r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4403      	add	r3, r0
 800c010:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800c014:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d114      	bne.n	800c046 <PCD_EP_OutXfrComplete_int+0x16a>
 800c01c:	6879      	ldr	r1, [r7, #4]
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	4613      	mov	r3, r2
 800c022:	00db      	lsls	r3, r3, #3
 800c024:	1a9b      	subs	r3, r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d108      	bne.n	800c046 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6818      	ldr	r0, [r3, #0]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c03e:	461a      	mov	r2, r3
 800c040:	2101      	movs	r1, #1
 800c042:	f004 f98b 	bl	801035c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	b2db      	uxtb	r3, r3
 800c04a:	4619      	mov	r1, r3
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f00d fc7b 	bl	8019948 <HAL_PCD_DataOutStageCallback>
 800c052:	e046      	b.n	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	4a26      	ldr	r2, [pc, #152]	; (800c0f0 <PCD_EP_OutXfrComplete_int+0x214>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d124      	bne.n	800c0a6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00a      	beq.n	800c07c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	015a      	lsls	r2, r3, #5
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	4413      	add	r3, r2
 800c06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c072:	461a      	mov	r2, r3
 800c074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c078:	6093      	str	r3, [r2, #8]
 800c07a:	e032      	b.n	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f003 0320 	and.w	r3, r3, #32
 800c082:	2b00      	cmp	r3, #0
 800c084:	d008      	beq.n	800c098 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	015a      	lsls	r2, r3, #5
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	4413      	add	r3, r2
 800c08e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c092:	461a      	mov	r2, r3
 800c094:	2320      	movs	r3, #32
 800c096:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f00d fc52 	bl	8019948 <HAL_PCD_DataOutStageCallback>
 800c0a4:	e01d      	b.n	800c0e2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d114      	bne.n	800c0d6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800c0ac:	6879      	ldr	r1, [r7, #4]
 800c0ae:	683a      	ldr	r2, [r7, #0]
 800c0b0:	4613      	mov	r3, r2
 800c0b2:	00db      	lsls	r3, r3, #3
 800c0b4:	1a9b      	subs	r3, r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	440b      	add	r3, r1
 800c0ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d108      	bne.n	800c0d6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6818      	ldr	r0, [r3, #0]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	f004 f943 	bl	801035c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	4619      	mov	r1, r3
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f00d fc33 	bl	8019948 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3718      	adds	r7, #24
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}
 800c0ec:	4f54300a 	.word	0x4f54300a
 800c0f0:	4f54310a 	.word	0x4f54310a

0800c0f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	333c      	adds	r3, #60	; 0x3c
 800c10c:	3304      	adds	r3, #4
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	015a      	lsls	r2, r3, #5
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	4413      	add	r3, r2
 800c11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	4a15      	ldr	r2, [pc, #84]	; (800c17c <PCD_EP_OutSetupPacket_int+0x88>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d90e      	bls.n	800c148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c130:	2b00      	cmp	r3, #0
 800c132:	d009      	beq.n	800c148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	015a      	lsls	r2, r3, #5
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	4413      	add	r3, r2
 800c13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c140:	461a      	mov	r2, r3
 800c142:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f00d fbeb 	bl	8019924 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <PCD_EP_OutSetupPacket_int+0x88>)
 800c152:	4293      	cmp	r3, r2
 800c154:	d90c      	bls.n	800c170 <PCD_EP_OutSetupPacket_int+0x7c>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d108      	bne.n	800c170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800c168:	461a      	mov	r2, r3
 800c16a:	2101      	movs	r1, #1
 800c16c:	f004 f8f6 	bl	801035c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3718      	adds	r7, #24
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	4f54300a 	.word	0x4f54300a

0800c180 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c180:	b480      	push	{r7}
 800c182:	b085      	sub	sp, #20
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	70fb      	strb	r3, [r7, #3]
 800c18c:	4613      	mov	r3, r2
 800c18e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c196:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c198:	78fb      	ldrb	r3, [r7, #3]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d107      	bne.n	800c1ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c19e:	883b      	ldrh	r3, [r7, #0]
 800c1a0:	0419      	lsls	r1, r3, #16
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	430a      	orrs	r2, r1
 800c1aa:	629a      	str	r2, [r3, #40]	; 0x28
 800c1ac:	e028      	b.n	800c200 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1b4:	0c1b      	lsrs	r3, r3, #16
 800c1b6:	68ba      	ldr	r2, [r7, #8]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1bc:	2300      	movs	r3, #0
 800c1be:	73fb      	strb	r3, [r7, #15]
 800c1c0:	e00d      	b.n	800c1de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681a      	ldr	r2, [r3, #0]
 800c1c6:	7bfb      	ldrb	r3, [r7, #15]
 800c1c8:	3340      	adds	r3, #64	; 0x40
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	0c1b      	lsrs	r3, r3, #16
 800c1d2:	68ba      	ldr	r2, [r7, #8]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c1d8:	7bfb      	ldrb	r3, [r7, #15]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	73fb      	strb	r3, [r7, #15]
 800c1de:	7bfa      	ldrb	r2, [r7, #15]
 800c1e0:	78fb      	ldrb	r3, [r7, #3]
 800c1e2:	3b01      	subs	r3, #1
 800c1e4:	429a      	cmp	r2, r3
 800c1e6:	d3ec      	bcc.n	800c1c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c1e8:	883b      	ldrh	r3, [r7, #0]
 800c1ea:	0418      	lsls	r0, r3, #16
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6819      	ldr	r1, [r3, #0]
 800c1f0:	78fb      	ldrb	r3, [r7, #3]
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	68ba      	ldr	r2, [r7, #8]
 800c1f6:	4302      	orrs	r2, r0
 800c1f8:	3340      	adds	r3, #64	; 0x40
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c200:	2300      	movs	r3, #0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c20e:	b480      	push	{r7}
 800c210:	b083      	sub	sp, #12
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	460b      	mov	r3, r1
 800c218:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	887a      	ldrh	r2, [r7, #2]
 800c220:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c222:	2300      	movs	r3, #0
}
 800c224:	4618      	mov	r0, r3
 800c226:	370c      	adds	r7, #12
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
 800c238:	460b      	mov	r3, r1
 800c23a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c23c:	bf00      	nop
 800c23e:	370c      	adds	r7, #12
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b086      	sub	sp, #24
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2b00      	cmp	r3, #0
 800c254:	d101      	bne.n	800c25a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c256:	2301      	movs	r3, #1
 800c258:	e264      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f003 0301 	and.w	r3, r3, #1
 800c262:	2b00      	cmp	r3, #0
 800c264:	d075      	beq.n	800c352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c266:	4ba3      	ldr	r3, [pc, #652]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	f003 030c 	and.w	r3, r3, #12
 800c26e:	2b04      	cmp	r3, #4
 800c270:	d00c      	beq.n	800c28c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c272:	4ba0      	ldr	r3, [pc, #640]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c274:	689b      	ldr	r3, [r3, #8]
 800c276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c27a:	2b08      	cmp	r3, #8
 800c27c:	d112      	bne.n	800c2a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c27e:	4b9d      	ldr	r3, [pc, #628]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c286:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c28a:	d10b      	bne.n	800c2a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c28c:	4b99      	ldr	r3, [pc, #612]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c294:	2b00      	cmp	r3, #0
 800c296:	d05b      	beq.n	800c350 <HAL_RCC_OscConfig+0x108>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d157      	bne.n	800c350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e23f      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2ac:	d106      	bne.n	800c2bc <HAL_RCC_OscConfig+0x74>
 800c2ae:	4b91      	ldr	r3, [pc, #580]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a90      	ldr	r2, [pc, #576]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	e01d      	b.n	800c2f8 <HAL_RCC_OscConfig+0xb0>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2c4:	d10c      	bne.n	800c2e0 <HAL_RCC_OscConfig+0x98>
 800c2c6:	4b8b      	ldr	r3, [pc, #556]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	4a8a      	ldr	r2, [pc, #552]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2d0:	6013      	str	r3, [r2, #0]
 800c2d2:	4b88      	ldr	r3, [pc, #544]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4a87      	ldr	r2, [pc, #540]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2dc:	6013      	str	r3, [r2, #0]
 800c2de:	e00b      	b.n	800c2f8 <HAL_RCC_OscConfig+0xb0>
 800c2e0:	4b84      	ldr	r3, [pc, #528]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	4a83      	ldr	r2, [pc, #524]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2ea:	6013      	str	r3, [r2, #0]
 800c2ec:	4b81      	ldr	r3, [pc, #516]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	4a80      	ldr	r2, [pc, #512]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c2f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	685b      	ldr	r3, [r3, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d013      	beq.n	800c328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c300:	f7fb fd7e 	bl	8007e00 <HAL_GetTick>
 800c304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c306:	e008      	b.n	800c31a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c308:	f7fb fd7a 	bl	8007e00 <HAL_GetTick>
 800c30c:	4602      	mov	r2, r0
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	1ad3      	subs	r3, r2, r3
 800c312:	2b64      	cmp	r3, #100	; 0x64
 800c314:	d901      	bls.n	800c31a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c316:	2303      	movs	r3, #3
 800c318:	e204      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c31a:	4b76      	ldr	r3, [pc, #472]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d0f0      	beq.n	800c308 <HAL_RCC_OscConfig+0xc0>
 800c326:	e014      	b.n	800c352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c328:	f7fb fd6a 	bl	8007e00 <HAL_GetTick>
 800c32c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c32e:	e008      	b.n	800c342 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c330:	f7fb fd66 	bl	8007e00 <HAL_GetTick>
 800c334:	4602      	mov	r2, r0
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	2b64      	cmp	r3, #100	; 0x64
 800c33c:	d901      	bls.n	800c342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e1f0      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c342:	4b6c      	ldr	r3, [pc, #432]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d1f0      	bne.n	800c330 <HAL_RCC_OscConfig+0xe8>
 800c34e:	e000      	b.n	800c352 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 0302 	and.w	r3, r3, #2
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d063      	beq.n	800c426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c35e:	4b65      	ldr	r3, [pc, #404]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	f003 030c 	and.w	r3, r3, #12
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00b      	beq.n	800c382 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c36a:	4b62      	ldr	r3, [pc, #392]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c372:	2b08      	cmp	r3, #8
 800c374:	d11c      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c376:	4b5f      	ldr	r3, [pc, #380]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d116      	bne.n	800c3b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c382:	4b5c      	ldr	r3, [pc, #368]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d005      	beq.n	800c39a <HAL_RCC_OscConfig+0x152>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	2b01      	cmp	r3, #1
 800c394:	d001      	beq.n	800c39a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	e1c4      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c39a:	4b56      	ldr	r3, [pc, #344]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	4952      	ldr	r1, [pc, #328]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c3aa:	4313      	orrs	r3, r2
 800c3ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c3ae:	e03a      	b.n	800c426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d020      	beq.n	800c3fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3b8:	4b4f      	ldr	r3, [pc, #316]	; (800c4f8 <HAL_RCC_OscConfig+0x2b0>)
 800c3ba:	2201      	movs	r2, #1
 800c3bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3be:	f7fb fd1f 	bl	8007e00 <HAL_GetTick>
 800c3c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3c4:	e008      	b.n	800c3d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c3c6:	f7fb fd1b 	bl	8007e00 <HAL_GetTick>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	1ad3      	subs	r3, r2, r3
 800c3d0:	2b02      	cmp	r3, #2
 800c3d2:	d901      	bls.n	800c3d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c3d4:	2303      	movs	r3, #3
 800c3d6:	e1a5      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3d8:	4b46      	ldr	r3, [pc, #280]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0302 	and.w	r3, r3, #2
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d0f0      	beq.n	800c3c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3e4:	4b43      	ldr	r3, [pc, #268]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	00db      	lsls	r3, r3, #3
 800c3f2:	4940      	ldr	r1, [pc, #256]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	600b      	str	r3, [r1, #0]
 800c3f8:	e015      	b.n	800c426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3fa:	4b3f      	ldr	r3, [pc, #252]	; (800c4f8 <HAL_RCC_OscConfig+0x2b0>)
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c400:	f7fb fcfe 	bl	8007e00 <HAL_GetTick>
 800c404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c406:	e008      	b.n	800c41a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c408:	f7fb fcfa 	bl	8007e00 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	2b02      	cmp	r3, #2
 800c414:	d901      	bls.n	800c41a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	e184      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c41a:	4b36      	ldr	r3, [pc, #216]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0302 	and.w	r3, r3, #2
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1f0      	bne.n	800c408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f003 0308 	and.w	r3, r3, #8
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d030      	beq.n	800c494 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	695b      	ldr	r3, [r3, #20]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d016      	beq.n	800c468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c43a:	4b30      	ldr	r3, [pc, #192]	; (800c4fc <HAL_RCC_OscConfig+0x2b4>)
 800c43c:	2201      	movs	r2, #1
 800c43e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c440:	f7fb fcde 	bl	8007e00 <HAL_GetTick>
 800c444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c446:	e008      	b.n	800c45a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c448:	f7fb fcda 	bl	8007e00 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	2b02      	cmp	r3, #2
 800c454:	d901      	bls.n	800c45a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c456:	2303      	movs	r3, #3
 800c458:	e164      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c45a:	4b26      	ldr	r3, [pc, #152]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c45c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c45e:	f003 0302 	and.w	r3, r3, #2
 800c462:	2b00      	cmp	r3, #0
 800c464:	d0f0      	beq.n	800c448 <HAL_RCC_OscConfig+0x200>
 800c466:	e015      	b.n	800c494 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c468:	4b24      	ldr	r3, [pc, #144]	; (800c4fc <HAL_RCC_OscConfig+0x2b4>)
 800c46a:	2200      	movs	r2, #0
 800c46c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c46e:	f7fb fcc7 	bl	8007e00 <HAL_GetTick>
 800c472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c474:	e008      	b.n	800c488 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c476:	f7fb fcc3 	bl	8007e00 <HAL_GetTick>
 800c47a:	4602      	mov	r2, r0
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	1ad3      	subs	r3, r2, r3
 800c480:	2b02      	cmp	r3, #2
 800c482:	d901      	bls.n	800c488 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c484:	2303      	movs	r3, #3
 800c486:	e14d      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c488:	4b1a      	ldr	r3, [pc, #104]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c48c:	f003 0302 	and.w	r3, r3, #2
 800c490:	2b00      	cmp	r3, #0
 800c492:	d1f0      	bne.n	800c476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0304 	and.w	r3, r3, #4
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 80a0 	beq.w	800c5e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c4a6:	4b13      	ldr	r3, [pc, #76]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10f      	bne.n	800c4d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	60bb      	str	r3, [r7, #8]
 800c4b6:	4b0f      	ldr	r3, [pc, #60]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4ba:	4a0e      	ldr	r2, [pc, #56]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c4bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4c0:	6413      	str	r3, [r2, #64]	; 0x40
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	; (800c4f4 <HAL_RCC_OscConfig+0x2ac>)
 800c4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4ca:	60bb      	str	r3, [r7, #8]
 800c4cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <HAL_RCC_OscConfig+0x2b8>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d121      	bne.n	800c522 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c4de:	4b08      	ldr	r3, [pc, #32]	; (800c500 <HAL_RCC_OscConfig+0x2b8>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	4a07      	ldr	r2, [pc, #28]	; (800c500 <HAL_RCC_OscConfig+0x2b8>)
 800c4e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4ea:	f7fb fc89 	bl	8007e00 <HAL_GetTick>
 800c4ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4f0:	e011      	b.n	800c516 <HAL_RCC_OscConfig+0x2ce>
 800c4f2:	bf00      	nop
 800c4f4:	40023800 	.word	0x40023800
 800c4f8:	42470000 	.word	0x42470000
 800c4fc:	42470e80 	.word	0x42470e80
 800c500:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c504:	f7fb fc7c 	bl	8007e00 <HAL_GetTick>
 800c508:	4602      	mov	r2, r0
 800c50a:	693b      	ldr	r3, [r7, #16]
 800c50c:	1ad3      	subs	r3, r2, r3
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d901      	bls.n	800c516 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800c512:	2303      	movs	r3, #3
 800c514:	e106      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c516:	4b85      	ldr	r3, [pc, #532]	; (800c72c <HAL_RCC_OscConfig+0x4e4>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d0f0      	beq.n	800c504 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	689b      	ldr	r3, [r3, #8]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d106      	bne.n	800c538 <HAL_RCC_OscConfig+0x2f0>
 800c52a:	4b81      	ldr	r3, [pc, #516]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c52e:	4a80      	ldr	r2, [pc, #512]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c530:	f043 0301 	orr.w	r3, r3, #1
 800c534:	6713      	str	r3, [r2, #112]	; 0x70
 800c536:	e01c      	b.n	800c572 <HAL_RCC_OscConfig+0x32a>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	689b      	ldr	r3, [r3, #8]
 800c53c:	2b05      	cmp	r3, #5
 800c53e:	d10c      	bne.n	800c55a <HAL_RCC_OscConfig+0x312>
 800c540:	4b7b      	ldr	r3, [pc, #492]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c544:	4a7a      	ldr	r2, [pc, #488]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c546:	f043 0304 	orr.w	r3, r3, #4
 800c54a:	6713      	str	r3, [r2, #112]	; 0x70
 800c54c:	4b78      	ldr	r3, [pc, #480]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c550:	4a77      	ldr	r2, [pc, #476]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c552:	f043 0301 	orr.w	r3, r3, #1
 800c556:	6713      	str	r3, [r2, #112]	; 0x70
 800c558:	e00b      	b.n	800c572 <HAL_RCC_OscConfig+0x32a>
 800c55a:	4b75      	ldr	r3, [pc, #468]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c55e:	4a74      	ldr	r2, [pc, #464]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c560:	f023 0301 	bic.w	r3, r3, #1
 800c564:	6713      	str	r3, [r2, #112]	; 0x70
 800c566:	4b72      	ldr	r3, [pc, #456]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c56a:	4a71      	ldr	r2, [pc, #452]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c56c:	f023 0304 	bic.w	r3, r3, #4
 800c570:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d015      	beq.n	800c5a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c57a:	f7fb fc41 	bl	8007e00 <HAL_GetTick>
 800c57e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c580:	e00a      	b.n	800c598 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c582:	f7fb fc3d 	bl	8007e00 <HAL_GetTick>
 800c586:	4602      	mov	r2, r0
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c590:	4293      	cmp	r3, r2
 800c592:	d901      	bls.n	800c598 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800c594:	2303      	movs	r3, #3
 800c596:	e0c5      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c598:	4b65      	ldr	r3, [pc, #404]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c59a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c59c:	f003 0302 	and.w	r3, r3, #2
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d0ee      	beq.n	800c582 <HAL_RCC_OscConfig+0x33a>
 800c5a4:	e014      	b.n	800c5d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c5a6:	f7fb fc2b 	bl	8007e00 <HAL_GetTick>
 800c5aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c5ac:	e00a      	b.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5ae:	f7fb fc27 	bl	8007e00 <HAL_GetTick>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d901      	bls.n	800c5c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	e0af      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c5c4:	4b5a      	ldr	r3, [pc, #360]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c5c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5c8:	f003 0302 	and.w	r3, r3, #2
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d1ee      	bne.n	800c5ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d105      	bne.n	800c5e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5d6:	4b56      	ldr	r3, [pc, #344]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5da:	4a55      	ldr	r2, [pc, #340]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c5dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 809b 	beq.w	800c722 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c5ec:	4b50      	ldr	r3, [pc, #320]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	f003 030c 	and.w	r3, r3, #12
 800c5f4:	2b08      	cmp	r3, #8
 800c5f6:	d05c      	beq.n	800c6b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d141      	bne.n	800c684 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c600:	4b4c      	ldr	r3, [pc, #304]	; (800c734 <HAL_RCC_OscConfig+0x4ec>)
 800c602:	2200      	movs	r2, #0
 800c604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c606:	f7fb fbfb 	bl	8007e00 <HAL_GetTick>
 800c60a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c60c:	e008      	b.n	800c620 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c60e:	f7fb fbf7 	bl	8007e00 <HAL_GetTick>
 800c612:	4602      	mov	r2, r0
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	2b02      	cmp	r3, #2
 800c61a:	d901      	bls.n	800c620 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800c61c:	2303      	movs	r3, #3
 800c61e:	e081      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c620:	4b43      	ldr	r3, [pc, #268]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1f0      	bne.n	800c60e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	69da      	ldr	r2, [r3, #28]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a1b      	ldr	r3, [r3, #32]
 800c634:	431a      	orrs	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63a:	019b      	lsls	r3, r3, #6
 800c63c:	431a      	orrs	r2, r3
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	085b      	lsrs	r3, r3, #1
 800c644:	3b01      	subs	r3, #1
 800c646:	041b      	lsls	r3, r3, #16
 800c648:	431a      	orrs	r2, r3
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64e:	061b      	lsls	r3, r3, #24
 800c650:	4937      	ldr	r1, [pc, #220]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c652:	4313      	orrs	r3, r2
 800c654:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c656:	4b37      	ldr	r3, [pc, #220]	; (800c734 <HAL_RCC_OscConfig+0x4ec>)
 800c658:	2201      	movs	r2, #1
 800c65a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c65c:	f7fb fbd0 	bl	8007e00 <HAL_GetTick>
 800c660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c662:	e008      	b.n	800c676 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c664:	f7fb fbcc 	bl	8007e00 <HAL_GetTick>
 800c668:	4602      	mov	r2, r0
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	1ad3      	subs	r3, r2, r3
 800c66e:	2b02      	cmp	r3, #2
 800c670:	d901      	bls.n	800c676 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800c672:	2303      	movs	r3, #3
 800c674:	e056      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c676:	4b2e      	ldr	r3, [pc, #184]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d0f0      	beq.n	800c664 <HAL_RCC_OscConfig+0x41c>
 800c682:	e04e      	b.n	800c722 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c684:	4b2b      	ldr	r3, [pc, #172]	; (800c734 <HAL_RCC_OscConfig+0x4ec>)
 800c686:	2200      	movs	r2, #0
 800c688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c68a:	f7fb fbb9 	bl	8007e00 <HAL_GetTick>
 800c68e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c690:	e008      	b.n	800c6a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c692:	f7fb fbb5 	bl	8007e00 <HAL_GetTick>
 800c696:	4602      	mov	r2, r0
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	1ad3      	subs	r3, r2, r3
 800c69c:	2b02      	cmp	r3, #2
 800c69e:	d901      	bls.n	800c6a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800c6a0:	2303      	movs	r3, #3
 800c6a2:	e03f      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c6a4:	4b22      	ldr	r3, [pc, #136]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d1f0      	bne.n	800c692 <HAL_RCC_OscConfig+0x44a>
 800c6b0:	e037      	b.n	800c722 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	699b      	ldr	r3, [r3, #24]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d101      	bne.n	800c6be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e032      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c6be:	4b1c      	ldr	r3, [pc, #112]	; (800c730 <HAL_RCC_OscConfig+0x4e8>)
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	699b      	ldr	r3, [r3, #24]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d028      	beq.n	800c71e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	d121      	bne.n	800c71e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d11a      	bne.n	800c71e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c6e8:	68fa      	ldr	r2, [r7, #12]
 800c6ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c6ee:	4013      	ands	r3, r2
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c6f4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d111      	bne.n	800c71e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c704:	085b      	lsrs	r3, r3, #1
 800c706:	3b01      	subs	r3, #1
 800c708:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d107      	bne.n	800c71e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c718:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c71a:	429a      	cmp	r2, r3
 800c71c:	d001      	beq.n	800c722 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800c71e:	2301      	movs	r3, #1
 800c720:	e000      	b.n	800c724 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3718      	adds	r7, #24
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	40007000 	.word	0x40007000
 800c730:	40023800 	.word	0x40023800
 800c734:	42470060 	.word	0x42470060

0800c738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c748:	2301      	movs	r3, #1
 800c74a:	e0cc      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c74c:	4b68      	ldr	r3, [pc, #416]	; (800c8f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	f003 0307 	and.w	r3, r3, #7
 800c754:	683a      	ldr	r2, [r7, #0]
 800c756:	429a      	cmp	r2, r3
 800c758:	d90c      	bls.n	800c774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c75a:	4b65      	ldr	r3, [pc, #404]	; (800c8f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c75c:	683a      	ldr	r2, [r7, #0]
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c762:	4b63      	ldr	r3, [pc, #396]	; (800c8f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f003 0307 	and.w	r3, r3, #7
 800c76a:	683a      	ldr	r2, [r7, #0]
 800c76c:	429a      	cmp	r2, r3
 800c76e:	d001      	beq.n	800c774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c770:	2301      	movs	r3, #1
 800c772:	e0b8      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f003 0302 	and.w	r3, r3, #2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d020      	beq.n	800c7c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c78c:	4b59      	ldr	r3, [pc, #356]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	4a58      	ldr	r2, [pc, #352]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c796:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0308 	and.w	r3, r3, #8
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d005      	beq.n	800c7b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c7a4:	4b53      	ldr	r3, [pc, #332]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	4a52      	ldr	r2, [pc, #328]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c7aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c7ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c7b0:	4b50      	ldr	r3, [pc, #320]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c7b2:	689b      	ldr	r3, [r3, #8]
 800c7b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	494d      	ldr	r1, [pc, #308]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 0301 	and.w	r3, r3, #1
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d044      	beq.n	800c858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	2b01      	cmp	r3, #1
 800c7d4:	d107      	bne.n	800c7e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7d6:	4b47      	ldr	r3, [pc, #284]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d119      	bne.n	800c816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	e07f      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d003      	beq.n	800c7f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c7f2:	2b03      	cmp	r3, #3
 800c7f4:	d107      	bne.n	800c806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7f6:	4b3f      	ldr	r3, [pc, #252]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d109      	bne.n	800c816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c802:	2301      	movs	r3, #1
 800c804:	e06f      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c806:	4b3b      	ldr	r3, [pc, #236]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f003 0302 	and.w	r3, r3, #2
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e067      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c816:	4b37      	ldr	r3, [pc, #220]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f023 0203 	bic.w	r2, r3, #3
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	4934      	ldr	r1, [pc, #208]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c824:	4313      	orrs	r3, r2
 800c826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c828:	f7fb faea 	bl	8007e00 <HAL_GetTick>
 800c82c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c82e:	e00a      	b.n	800c846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c830:	f7fb fae6 	bl	8007e00 <HAL_GetTick>
 800c834:	4602      	mov	r2, r0
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	1ad3      	subs	r3, r2, r3
 800c83a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c83e:	4293      	cmp	r3, r2
 800c840:	d901      	bls.n	800c846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e04f      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c846:	4b2b      	ldr	r3, [pc, #172]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f003 020c 	and.w	r2, r3, #12
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	009b      	lsls	r3, r3, #2
 800c854:	429a      	cmp	r2, r3
 800c856:	d1eb      	bne.n	800c830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c858:	4b25      	ldr	r3, [pc, #148]	; (800c8f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 0307 	and.w	r3, r3, #7
 800c860:	683a      	ldr	r2, [r7, #0]
 800c862:	429a      	cmp	r2, r3
 800c864:	d20c      	bcs.n	800c880 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c866:	4b22      	ldr	r3, [pc, #136]	; (800c8f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	b2d2      	uxtb	r2, r2
 800c86c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c86e:	4b20      	ldr	r3, [pc, #128]	; (800c8f0 <HAL_RCC_ClockConfig+0x1b8>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	683a      	ldr	r2, [r7, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d001      	beq.n	800c880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e032      	b.n	800c8e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d008      	beq.n	800c89e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c88c:	4b19      	ldr	r3, [pc, #100]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	68db      	ldr	r3, [r3, #12]
 800c898:	4916      	ldr	r1, [pc, #88]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c89a:	4313      	orrs	r3, r2
 800c89c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f003 0308 	and.w	r3, r3, #8
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d009      	beq.n	800c8be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c8aa:	4b12      	ldr	r3, [pc, #72]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c8ac:	689b      	ldr	r3, [r3, #8]
 800c8ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	00db      	lsls	r3, r3, #3
 800c8b8:	490e      	ldr	r1, [pc, #56]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c8be:	f000 f821 	bl	800c904 <HAL_RCC_GetSysClockFreq>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	4b0b      	ldr	r3, [pc, #44]	; (800c8f4 <HAL_RCC_ClockConfig+0x1bc>)
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	091b      	lsrs	r3, r3, #4
 800c8ca:	f003 030f 	and.w	r3, r3, #15
 800c8ce:	490a      	ldr	r1, [pc, #40]	; (800c8f8 <HAL_RCC_ClockConfig+0x1c0>)
 800c8d0:	5ccb      	ldrb	r3, [r1, r3]
 800c8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8d6:	4a09      	ldr	r2, [pc, #36]	; (800c8fc <HAL_RCC_ClockConfig+0x1c4>)
 800c8d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c8da:	4b09      	ldr	r3, [pc, #36]	; (800c900 <HAL_RCC_ClockConfig+0x1c8>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7f8 ff9e 	bl	8005820 <HAL_InitTick>

  return HAL_OK;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	40023c00 	.word	0x40023c00
 800c8f4:	40023800 	.word	0x40023800
 800c8f8:	08021c78 	.word	0x08021c78
 800c8fc:	20000030 	.word	0x20000030
 800c900:	200000cc 	.word	0x200000cc

0800c904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c904:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c90c:	2300      	movs	r3, #0
 800c90e:	607b      	str	r3, [r7, #4]
 800c910:	2300      	movs	r3, #0
 800c912:	60fb      	str	r3, [r7, #12]
 800c914:	2300      	movs	r3, #0
 800c916:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800c918:	2300      	movs	r3, #0
 800c91a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c91c:	4b67      	ldr	r3, [pc, #412]	; (800cabc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	f003 030c 	and.w	r3, r3, #12
 800c924:	2b08      	cmp	r3, #8
 800c926:	d00d      	beq.n	800c944 <HAL_RCC_GetSysClockFreq+0x40>
 800c928:	2b08      	cmp	r3, #8
 800c92a:	f200 80bd 	bhi.w	800caa8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <HAL_RCC_GetSysClockFreq+0x34>
 800c932:	2b04      	cmp	r3, #4
 800c934:	d003      	beq.n	800c93e <HAL_RCC_GetSysClockFreq+0x3a>
 800c936:	e0b7      	b.n	800caa8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c938:	4b61      	ldr	r3, [pc, #388]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800c93a:	60bb      	str	r3, [r7, #8]
       break;
 800c93c:	e0b7      	b.n	800caae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c93e:	4b61      	ldr	r3, [pc, #388]	; (800cac4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800c940:	60bb      	str	r3, [r7, #8]
      break;
 800c942:	e0b4      	b.n	800caae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c944:	4b5d      	ldr	r3, [pc, #372]	; (800cabc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c94c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c94e:	4b5b      	ldr	r3, [pc, #364]	; (800cabc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c956:	2b00      	cmp	r3, #0
 800c958:	d04d      	beq.n	800c9f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c95a:	4b58      	ldr	r3, [pc, #352]	; (800cabc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	099b      	lsrs	r3, r3, #6
 800c960:	461a      	mov	r2, r3
 800c962:	f04f 0300 	mov.w	r3, #0
 800c966:	f240 10ff 	movw	r0, #511	; 0x1ff
 800c96a:	f04f 0100 	mov.w	r1, #0
 800c96e:	ea02 0800 	and.w	r8, r2, r0
 800c972:	ea03 0901 	and.w	r9, r3, r1
 800c976:	4640      	mov	r0, r8
 800c978:	4649      	mov	r1, r9
 800c97a:	f04f 0200 	mov.w	r2, #0
 800c97e:	f04f 0300 	mov.w	r3, #0
 800c982:	014b      	lsls	r3, r1, #5
 800c984:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800c988:	0142      	lsls	r2, r0, #5
 800c98a:	4610      	mov	r0, r2
 800c98c:	4619      	mov	r1, r3
 800c98e:	ebb0 0008 	subs.w	r0, r0, r8
 800c992:	eb61 0109 	sbc.w	r1, r1, r9
 800c996:	f04f 0200 	mov.w	r2, #0
 800c99a:	f04f 0300 	mov.w	r3, #0
 800c99e:	018b      	lsls	r3, r1, #6
 800c9a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800c9a4:	0182      	lsls	r2, r0, #6
 800c9a6:	1a12      	subs	r2, r2, r0
 800c9a8:	eb63 0301 	sbc.w	r3, r3, r1
 800c9ac:	f04f 0000 	mov.w	r0, #0
 800c9b0:	f04f 0100 	mov.w	r1, #0
 800c9b4:	00d9      	lsls	r1, r3, #3
 800c9b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c9ba:	00d0      	lsls	r0, r2, #3
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	eb12 0208 	adds.w	r2, r2, r8
 800c9c4:	eb43 0309 	adc.w	r3, r3, r9
 800c9c8:	f04f 0000 	mov.w	r0, #0
 800c9cc:	f04f 0100 	mov.w	r1, #0
 800c9d0:	0259      	lsls	r1, r3, #9
 800c9d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c9d6:	0250      	lsls	r0, r2, #9
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4619      	mov	r1, r3
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f04f 0300 	mov.w	r3, #0
 800c9e8:	f7f4 f94e 	bl	8000c88 <__aeabi_uldivmod>
 800c9ec:	4602      	mov	r2, r0
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	4613      	mov	r3, r2
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	e04a      	b.n	800ca8c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9f6:	4b31      	ldr	r3, [pc, #196]	; (800cabc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800c9f8:	685b      	ldr	r3, [r3, #4]
 800c9fa:	099b      	lsrs	r3, r3, #6
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	f04f 0300 	mov.w	r3, #0
 800ca02:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ca06:	f04f 0100 	mov.w	r1, #0
 800ca0a:	ea02 0400 	and.w	r4, r2, r0
 800ca0e:	ea03 0501 	and.w	r5, r3, r1
 800ca12:	4620      	mov	r0, r4
 800ca14:	4629      	mov	r1, r5
 800ca16:	f04f 0200 	mov.w	r2, #0
 800ca1a:	f04f 0300 	mov.w	r3, #0
 800ca1e:	014b      	lsls	r3, r1, #5
 800ca20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ca24:	0142      	lsls	r2, r0, #5
 800ca26:	4610      	mov	r0, r2
 800ca28:	4619      	mov	r1, r3
 800ca2a:	1b00      	subs	r0, r0, r4
 800ca2c:	eb61 0105 	sbc.w	r1, r1, r5
 800ca30:	f04f 0200 	mov.w	r2, #0
 800ca34:	f04f 0300 	mov.w	r3, #0
 800ca38:	018b      	lsls	r3, r1, #6
 800ca3a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ca3e:	0182      	lsls	r2, r0, #6
 800ca40:	1a12      	subs	r2, r2, r0
 800ca42:	eb63 0301 	sbc.w	r3, r3, r1
 800ca46:	f04f 0000 	mov.w	r0, #0
 800ca4a:	f04f 0100 	mov.w	r1, #0
 800ca4e:	00d9      	lsls	r1, r3, #3
 800ca50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ca54:	00d0      	lsls	r0, r2, #3
 800ca56:	4602      	mov	r2, r0
 800ca58:	460b      	mov	r3, r1
 800ca5a:	1912      	adds	r2, r2, r4
 800ca5c:	eb45 0303 	adc.w	r3, r5, r3
 800ca60:	f04f 0000 	mov.w	r0, #0
 800ca64:	f04f 0100 	mov.w	r1, #0
 800ca68:	0299      	lsls	r1, r3, #10
 800ca6a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ca6e:	0290      	lsls	r0, r2, #10
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	4610      	mov	r0, r2
 800ca76:	4619      	mov	r1, r3
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f04f 0300 	mov.w	r3, #0
 800ca80:	f7f4 f902 	bl	8000c88 <__aeabi_uldivmod>
 800ca84:	4602      	mov	r2, r0
 800ca86:	460b      	mov	r3, r1
 800ca88:	4613      	mov	r3, r2
 800ca8a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ca8c:	4b0b      	ldr	r3, [pc, #44]	; (800cabc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	0c1b      	lsrs	r3, r3, #16
 800ca92:	f003 0303 	and.w	r3, r3, #3
 800ca96:	3301      	adds	r3, #1
 800ca98:	005b      	lsls	r3, r3, #1
 800ca9a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	fbb2 f3f3 	udiv	r3, r2, r3
 800caa4:	60bb      	str	r3, [r7, #8]
      break;
 800caa6:	e002      	b.n	800caae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800caa8:	4b05      	ldr	r3, [pc, #20]	; (800cac0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800caaa:	60bb      	str	r3, [r7, #8]
      break;
 800caac:	bf00      	nop
    }
  }
  return sysclockfreq;
 800caae:	68bb      	ldr	r3, [r7, #8]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800caba:	bf00      	nop
 800cabc:	40023800 	.word	0x40023800
 800cac0:	00f42400 	.word	0x00f42400
 800cac4:	007a1200 	.word	0x007a1200

0800cac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cac8:	b480      	push	{r7}
 800caca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cacc:	4b03      	ldr	r3, [pc, #12]	; (800cadc <HAL_RCC_GetHCLKFreq+0x14>)
 800cace:	681b      	ldr	r3, [r3, #0]
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	20000030 	.word	0x20000030

0800cae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800cae4:	f7ff fff0 	bl	800cac8 <HAL_RCC_GetHCLKFreq>
 800cae8:	4602      	mov	r2, r0
 800caea:	4b05      	ldr	r3, [pc, #20]	; (800cb00 <HAL_RCC_GetPCLK1Freq+0x20>)
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	0a9b      	lsrs	r3, r3, #10
 800caf0:	f003 0307 	and.w	r3, r3, #7
 800caf4:	4903      	ldr	r1, [pc, #12]	; (800cb04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800caf6:	5ccb      	ldrb	r3, [r1, r3]
 800caf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	40023800 	.word	0x40023800
 800cb04:	08021c88 	.word	0x08021c88

0800cb08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	220f      	movs	r2, #15
 800cb16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800cb18:	4b12      	ldr	r3, [pc, #72]	; (800cb64 <HAL_RCC_GetClockConfig+0x5c>)
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	f003 0203 	and.w	r2, r3, #3
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800cb24:	4b0f      	ldr	r3, [pc, #60]	; (800cb64 <HAL_RCC_GetClockConfig+0x5c>)
 800cb26:	689b      	ldr	r3, [r3, #8]
 800cb28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800cb30:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <HAL_RCC_GetClockConfig+0x5c>)
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800cb3c:	4b09      	ldr	r3, [pc, #36]	; (800cb64 <HAL_RCC_GetClockConfig+0x5c>)
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	08db      	lsrs	r3, r3, #3
 800cb42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800cb4a:	4b07      	ldr	r3, [pc, #28]	; (800cb68 <HAL_RCC_GetClockConfig+0x60>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0207 	and.w	r2, r3, #7
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	601a      	str	r2, [r3, #0]
}
 800cb56:	bf00      	nop
 800cb58:	370c      	adds	r7, #12
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	40023800 	.word	0x40023800
 800cb68:	40023c00 	.word	0x40023c00

0800cb6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	f003 0301 	and.w	r3, r3, #1
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d105      	bne.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d035      	beq.n	800cc00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800cb94:	4b62      	ldr	r3, [pc, #392]	; (800cd20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800cb96:	2200      	movs	r2, #0
 800cb98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cb9a:	f7fb f931 	bl	8007e00 <HAL_GetTick>
 800cb9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cba0:	e008      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cba2:	f7fb f92d 	bl	8007e00 <HAL_GetTick>
 800cba6:	4602      	mov	r2, r0
 800cba8:	697b      	ldr	r3, [r7, #20]
 800cbaa:	1ad3      	subs	r3, r2, r3
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d901      	bls.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbb0:	2303      	movs	r3, #3
 800cbb2:	e0b0      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800cbb4:	4b5b      	ldr	r3, [pc, #364]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1f0      	bne.n	800cba2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	019a      	lsls	r2, r3, #6
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	071b      	lsls	r3, r3, #28
 800cbcc:	4955      	ldr	r1, [pc, #340]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800cbd4:	4b52      	ldr	r3, [pc, #328]	; (800cd20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800cbda:	f7fb f911 	bl	8007e00 <HAL_GetTick>
 800cbde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cbe0:	e008      	b.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800cbe2:	f7fb f90d 	bl	8007e00 <HAL_GetTick>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	1ad3      	subs	r3, r2, r3
 800cbec:	2b02      	cmp	r3, #2
 800cbee:	d901      	bls.n	800cbf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e090      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800cbf4:	4b4b      	ldr	r3, [pc, #300]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d0f0      	beq.n	800cbe2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	f003 0302 	and.w	r3, r3, #2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 8083 	beq.w	800cd14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	4b44      	ldr	r3, [pc, #272]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc16:	4a43      	ldr	r2, [pc, #268]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc1c:	6413      	str	r3, [r2, #64]	; 0x40
 800cc1e:	4b41      	ldr	r3, [pc, #260]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800cc2a:	4b3f      	ldr	r3, [pc, #252]	; (800cd28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	4a3e      	ldr	r2, [pc, #248]	; (800cd28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cc30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cc36:	f7fb f8e3 	bl	8007e00 <HAL_GetTick>
 800cc3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cc3c:	e008      	b.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800cc3e:	f7fb f8df 	bl	8007e00 <HAL_GetTick>
 800cc42:	4602      	mov	r2, r0
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	1ad3      	subs	r3, r2, r3
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d901      	bls.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	e062      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800cc50:	4b35      	ldr	r3, [pc, #212]	; (800cd28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d0f0      	beq.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800cc5c:	4b31      	ldr	r3, [pc, #196]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc64:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d02f      	beq.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	68db      	ldr	r3, [r3, #12]
 800cc70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cc74:	693a      	ldr	r2, [r7, #16]
 800cc76:	429a      	cmp	r2, r3
 800cc78:	d028      	beq.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cc7a:	4b2a      	ldr	r3, [pc, #168]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cc82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cc84:	4b29      	ldr	r3, [pc, #164]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cc86:	2201      	movs	r2, #1
 800cc88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cc8a:	4b28      	ldr	r3, [pc, #160]	; (800cd2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800cc90:	4a24      	ldr	r2, [pc, #144]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc92:	693b      	ldr	r3, [r7, #16]
 800cc94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800cc96:	4b23      	ldr	r3, [pc, #140]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc9a:	f003 0301 	and.w	r3, r3, #1
 800cc9e:	2b01      	cmp	r3, #1
 800cca0:	d114      	bne.n	800cccc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800cca2:	f7fb f8ad 	bl	8007e00 <HAL_GetTick>
 800cca6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cca8:	e00a      	b.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ccaa:	f7fb f8a9 	bl	8007e00 <HAL_GetTick>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	1ad3      	subs	r3, r2, r3
 800ccb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d901      	bls.n	800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e02a      	b.n	800cd16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ccc0:	4b18      	ldr	r3, [pc, #96]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ccc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccc4:	f003 0302 	and.w	r3, r3, #2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d0ee      	beq.n	800ccaa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	68db      	ldr	r3, [r3, #12]
 800ccd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ccd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ccd8:	d10d      	bne.n	800ccf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800ccda:	4b12      	ldr	r3, [pc, #72]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ccdc:	689b      	ldr	r3, [r3, #8]
 800ccde:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ccea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ccee:	490d      	ldr	r1, [pc, #52]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	608b      	str	r3, [r1, #8]
 800ccf4:	e005      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ccf6:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	4a0a      	ldr	r2, [pc, #40]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ccfc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800cd00:	6093      	str	r3, [r2, #8]
 800cd02:	4b08      	ldr	r3, [pc, #32]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68db      	ldr	r3, [r3, #12]
 800cd0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cd0e:	4905      	ldr	r1, [pc, #20]	; (800cd24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800cd10:	4313      	orrs	r3, r2
 800cd12:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800cd14:	2300      	movs	r3, #0
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3718      	adds	r7, #24
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	42470068 	.word	0x42470068
 800cd24:	40023800 	.word	0x40023800
 800cd28:	40007000 	.word	0x40007000
 800cd2c:	42470e40 	.word	0x42470e40

0800cd30 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e01c      	b.n	800cd7c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	795b      	ldrb	r3, [r3, #5]
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d105      	bne.n	800cd58 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7f8 fb7e 	bl	8005454 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f042 0204 	orr.w	r2, r2, #4
 800cd6c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	2201      	movs	r2, #1
 800cd72:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3708      	adds	r7, #8
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b082      	sub	sp, #8
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d101      	bne.n	800cd96 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800cd92:	2301      	movs	r3, #1
 800cd94:	e083      	b.n	800ce9e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	7f5b      	ldrb	r3, [r3, #29]
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d105      	bne.n	800cdac <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2200      	movs	r2, #0
 800cda4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f7f8 fb76 	bl	8005498 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2202      	movs	r2, #2
 800cdb0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	22ca      	movs	r2, #202	; 0xca
 800cdb8:	625a      	str	r2, [r3, #36]	; 0x24
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	2253      	movs	r2, #83	; 0x53
 800cdc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cdc2:	6878      	ldr	r0, [r7, #4]
 800cdc4:	f000 fbc0 	bl	800d548 <RTC_EnterInitMode>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d008      	beq.n	800cde0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	22ff      	movs	r2, #255	; 0xff
 800cdd4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2204      	movs	r2, #4
 800cdda:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800cddc:	2301      	movs	r3, #1
 800cdde:	e05e      	b.n	800ce9e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	687a      	ldr	r2, [r7, #4]
 800cde8:	6812      	ldr	r2, [r2, #0]
 800cdea:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdf2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	6899      	ldr	r1, [r3, #8]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	685a      	ldr	r2, [r3, #4]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	691b      	ldr	r3, [r3, #16]
 800ce02:	431a      	orrs	r2, r3
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	431a      	orrs	r2, r3
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	430a      	orrs	r2, r1
 800ce10:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	68d2      	ldr	r2, [r2, #12]
 800ce1a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6919      	ldr	r1, [r3, #16]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	041a      	lsls	r2, r3, #16
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	430a      	orrs	r2, r1
 800ce2e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	68da      	ldr	r2, [r3, #12]
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce3e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d10e      	bne.n	800ce6c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fb52 	bl	800d4f8 <HAL_RTC_WaitForSynchro>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d008      	beq.n	800ce6c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	22ff      	movs	r2, #255	; 0xff
 800ce60:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2204      	movs	r2, #4
 800ce66:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	e018      	b.n	800ce9e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce7a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	699a      	ldr	r2, [r3, #24]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	430a      	orrs	r2, r1
 800ce8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	22ff      	movs	r2, #255	; 0xff
 800ce94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800ce9c:	2300      	movs	r3, #0
  }
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cea6:	b590      	push	{r4, r7, lr}
 800cea8:	b087      	sub	sp, #28
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	60f8      	str	r0, [r7, #12]
 800ceae:	60b9      	str	r1, [r7, #8]
 800ceb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	7f1b      	ldrb	r3, [r3, #28]
 800ceba:	2b01      	cmp	r3, #1
 800cebc:	d101      	bne.n	800cec2 <HAL_RTC_SetTime+0x1c>
 800cebe:	2302      	movs	r3, #2
 800cec0:	e0aa      	b.n	800d018 <HAL_RTC_SetTime+0x172>
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2201      	movs	r2, #1
 800cec6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2202      	movs	r2, #2
 800cecc:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d126      	bne.n	800cf22 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d102      	bne.n	800cee8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	2200      	movs	r2, #0
 800cee6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cee8:	68bb      	ldr	r3, [r7, #8]
 800ceea:	781b      	ldrb	r3, [r3, #0]
 800ceec:	4618      	mov	r0, r3
 800ceee:	f000 fb57 	bl	800d5a0 <RTC_ByteToBcd2>
 800cef2:	4603      	mov	r3, r0
 800cef4:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	785b      	ldrb	r3, [r3, #1]
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 fb50 	bl	800d5a0 <RTC_ByteToBcd2>
 800cf00:	4603      	mov	r3, r0
 800cf02:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cf04:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	789b      	ldrb	r3, [r3, #2]
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f000 fb48 	bl	800d5a0 <RTC_ByteToBcd2>
 800cf10:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800cf12:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	78db      	ldrb	r3, [r3, #3]
 800cf1a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	e018      	b.n	800cf54 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d102      	bne.n	800cf36 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	2200      	movs	r2, #0
 800cf34:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	781b      	ldrb	r3, [r3, #0]
 800cf3a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	785b      	ldrb	r3, [r3, #1]
 800cf40:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cf42:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800cf48:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	78db      	ldrb	r3, [r3, #3]
 800cf4e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800cf50:	4313      	orrs	r3, r2
 800cf52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	22ca      	movs	r2, #202	; 0xca
 800cf5a:	625a      	str	r2, [r3, #36]	; 0x24
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2253      	movs	r2, #83	; 0x53
 800cf62:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f000 faef 	bl	800d548 <RTC_EnterInitMode>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00b      	beq.n	800cf88 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	22ff      	movs	r2, #255	; 0xff
 800cf76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2204      	movs	r2, #4
 800cf7c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e047      	b.n	800d018 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cf92:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cf96:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	689a      	ldr	r2, [r3, #8]
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cfa6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	6899      	ldr	r1, [r3, #8]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	68da      	ldr	r2, [r3, #12]
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	691b      	ldr	r3, [r3, #16]
 800cfb6:	431a      	orrs	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	430a      	orrs	r2, r1
 800cfbe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68da      	ldr	r2, [r3, #12]
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	689b      	ldr	r3, [r3, #8]
 800cfd6:	f003 0320 	and.w	r3, r3, #32
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d111      	bne.n	800d002 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cfde:	68f8      	ldr	r0, [r7, #12]
 800cfe0:	f000 fa8a 	bl	800d4f8 <HAL_RTC_WaitForSynchro>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00b      	beq.n	800d002 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	22ff      	movs	r2, #255	; 0xff
 800cff0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2204      	movs	r2, #4
 800cff6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2200      	movs	r2, #0
 800cffc:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e00a      	b.n	800d018 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	22ff      	movs	r2, #255	; 0xff
 800d008:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2201      	movs	r2, #1
 800d00e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	2200      	movs	r2, #0
 800d014:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800d016:	2300      	movs	r3, #0
  }
}
 800d018:	4618      	mov	r0, r3
 800d01a:	371c      	adds	r7, #28
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd90      	pop	{r4, r7, pc}

0800d020 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800d02c:	2300      	movs	r3, #0
 800d02e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d044:	68bb      	ldr	r3, [r7, #8]
 800d046:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800d052:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800d056:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	0c1b      	lsrs	r3, r3, #16
 800d05c:	b2db      	uxtb	r3, r3
 800d05e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d062:	b2da      	uxtb	r2, r3
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800d068:	697b      	ldr	r3, [r7, #20]
 800d06a:	0a1b      	lsrs	r3, r3, #8
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d072:	b2da      	uxtb	r2, r3
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	b2db      	uxtb	r3, r3
 800d07c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d080:	b2da      	uxtb	r2, r3
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	0c1b      	lsrs	r3, r3, #16
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d090:	b2da      	uxtb	r2, r3
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d11a      	bne.n	800d0d2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f000 fa9b 	bl	800d5dc <RTC_Bcd2ToByte>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	68bb      	ldr	r3, [r7, #8]
 800d0ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	785b      	ldrb	r3, [r3, #1]
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 fa92 	bl	800d5dc <RTC_Bcd2ToByte>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	789b      	ldrb	r3, [r3, #2]
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 fa89 	bl	800d5dc <RTC_Bcd2ToByte>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	68bb      	ldr	r3, [r7, #8]
 800d0d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d0dc:	b590      	push	{r4, r7, lr}
 800d0de:	b087      	sub	sp, #28
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	7f1b      	ldrb	r3, [r3, #28]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d101      	bne.n	800d0f8 <HAL_RTC_SetDate+0x1c>
 800d0f4:	2302      	movs	r3, #2
 800d0f6:	e094      	b.n	800d222 <HAL_RTC_SetDate+0x146>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	2202      	movs	r2, #2
 800d102:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d10e      	bne.n	800d128 <HAL_RTC_SetDate+0x4c>
 800d10a:	68bb      	ldr	r3, [r7, #8]
 800d10c:	785b      	ldrb	r3, [r3, #1]
 800d10e:	f003 0310 	and.w	r3, r3, #16
 800d112:	2b00      	cmp	r3, #0
 800d114:	d008      	beq.n	800d128 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d116:	68bb      	ldr	r3, [r7, #8]
 800d118:	785b      	ldrb	r3, [r3, #1]
 800d11a:	f023 0310 	bic.w	r3, r3, #16
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	330a      	adds	r3, #10
 800d122:	b2da      	uxtb	r2, r3
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d11c      	bne.n	800d168 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d12e:	68bb      	ldr	r3, [r7, #8]
 800d130:	78db      	ldrb	r3, [r3, #3]
 800d132:	4618      	mov	r0, r3
 800d134:	f000 fa34 	bl	800d5a0 <RTC_ByteToBcd2>
 800d138:	4603      	mov	r3, r0
 800d13a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	785b      	ldrb	r3, [r3, #1]
 800d140:	4618      	mov	r0, r3
 800d142:	f000 fa2d 	bl	800d5a0 <RTC_ByteToBcd2>
 800d146:	4603      	mov	r3, r0
 800d148:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d14a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800d14c:	68bb      	ldr	r3, [r7, #8]
 800d14e:	789b      	ldrb	r3, [r3, #2]
 800d150:	4618      	mov	r0, r3
 800d152:	f000 fa25 	bl	800d5a0 <RTC_ByteToBcd2>
 800d156:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800d158:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	781b      	ldrb	r3, [r3, #0]
 800d160:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800d162:	4313      	orrs	r3, r2
 800d164:	617b      	str	r3, [r7, #20]
 800d166:	e00e      	b.n	800d186 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	78db      	ldrb	r3, [r3, #3]
 800d16c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	785b      	ldrb	r3, [r3, #1]
 800d172:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d174:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800d176:	68ba      	ldr	r2, [r7, #8]
 800d178:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800d17a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800d182:	4313      	orrs	r3, r2
 800d184:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	22ca      	movs	r2, #202	; 0xca
 800d18c:	625a      	str	r2, [r3, #36]	; 0x24
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2253      	movs	r2, #83	; 0x53
 800d194:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 f9d6 	bl	800d548 <RTC_EnterInitMode>
 800d19c:	4603      	mov	r3, r0
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00b      	beq.n	800d1ba <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	22ff      	movs	r2, #255	; 0xff
 800d1a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	2204      	movs	r2, #4
 800d1ae:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e033      	b.n	800d222 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681a      	ldr	r2, [r3, #0]
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d1c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d1c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	68da      	ldr	r2, [r3, #12]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d1d8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	689b      	ldr	r3, [r3, #8]
 800d1e0:	f003 0320 	and.w	r3, r3, #32
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d111      	bne.n	800d20c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f000 f985 	bl	800d4f8 <HAL_RTC_WaitForSynchro>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d00b      	beq.n	800d20c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	22ff      	movs	r2, #255	; 0xff
 800d1fa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2204      	movs	r2, #4
 800d200:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800d208:	2301      	movs	r3, #1
 800d20a:	e00a      	b.n	800d222 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	22ff      	movs	r2, #255	; 0xff
 800d212:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2201      	movs	r2, #1
 800d218:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800d220:	2300      	movs	r3, #0
  }
}
 800d222:	4618      	mov	r0, r3
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	bd90      	pop	{r4, r7, pc}

0800d22a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d22a:	b580      	push	{r7, lr}
 800d22c:	b086      	sub	sp, #24
 800d22e:	af00      	add	r7, sp, #0
 800d230:	60f8      	str	r0, [r7, #12]
 800d232:	60b9      	str	r1, [r7, #8]
 800d234:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800d236:	2300      	movs	r3, #0
 800d238:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d244:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d248:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	0c1b      	lsrs	r3, r3, #16
 800d24e:	b2da      	uxtb	r2, r3
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	0a1b      	lsrs	r3, r3, #8
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	f003 031f 	and.w	r3, r3, #31
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	b2db      	uxtb	r3, r3
 800d268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d26c:	b2da      	uxtb	r2, r3
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	0b5b      	lsrs	r3, r3, #13
 800d276:	b2db      	uxtb	r3, r3
 800d278:	f003 0307 	and.w	r3, r3, #7
 800d27c:	b2da      	uxtb	r2, r3
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d11a      	bne.n	800d2be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	78db      	ldrb	r3, [r3, #3]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 f9a5 	bl	800d5dc <RTC_Bcd2ToByte>
 800d292:	4603      	mov	r3, r0
 800d294:	461a      	mov	r2, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	785b      	ldrb	r3, [r3, #1]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 f99c 	bl	800d5dc <RTC_Bcd2ToByte>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	789b      	ldrb	r3, [r3, #2]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f000 f993 	bl	800d5dc <RTC_Bcd2ToByte>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d2be:	2300      	movs	r3, #0
}
 800d2c0:	4618      	mov	r0, r3
 800d2c2:	3718      	adds	r7, #24
 800d2c4:	46bd      	mov	sp, r7
 800d2c6:	bd80      	pop	{r7, pc}

0800d2c8 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800d2c8:	b590      	push	{r4, r7, lr}
 800d2ca:	b089      	sub	sp, #36	; 0x24
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	60f8      	str	r0, [r7, #12]
 800d2d0:	60b9      	str	r1, [r7, #8]
 800d2d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	61fb      	str	r3, [r7, #28]
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	7f1b      	ldrb	r3, [r3, #28]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d101      	bne.n	800d2ec <HAL_RTC_SetAlarm+0x24>
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	e101      	b.n	800d4f0 <HAL_RTC_SetAlarm+0x228>
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	2202      	movs	r2, #2
 800d2f6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d137      	bne.n	800d36e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d102      	bne.n	800d312 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	2200      	movs	r2, #0
 800d310:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 f942 	bl	800d5a0 <RTC_ByteToBcd2>
 800d31c:	4603      	mov	r3, r0
 800d31e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	4618      	mov	r0, r3
 800d326:	f000 f93b 	bl	800d5a0 <RTC_ByteToBcd2>
 800d32a:	4603      	mov	r3, r0
 800d32c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d32e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	789b      	ldrb	r3, [r3, #2]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 f933 	bl	800d5a0 <RTC_ByteToBcd2>
 800d33a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d33c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	78db      	ldrb	r3, [r3, #3]
 800d344:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800d346:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d350:	4618      	mov	r0, r3
 800d352:	f000 f925 	bl	800d5a0 <RTC_ByteToBcd2>
 800d356:	4603      	mov	r3, r0
 800d358:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d35a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d362:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800d368:	4313      	orrs	r3, r2
 800d36a:	61fb      	str	r3, [r7, #28]
 800d36c:	e023      	b.n	800d3b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	689b      	ldr	r3, [r3, #8]
 800d374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d102      	bne.n	800d382 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	2200      	movs	r2, #0
 800d380:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	781b      	ldrb	r3, [r3, #0]
 800d386:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	785b      	ldrb	r3, [r3, #1]
 800d38c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d38e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800d394:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	78db      	ldrb	r3, [r3, #3]
 800d39a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800d39c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d39e:	68bb      	ldr	r3, [r7, #8]
 800d3a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d3a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800d3a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800d3ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800d3ae:	68bb      	ldr	r3, [r7, #8]
 800d3b0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	22ca      	movs	r2, #202	; 0xca
 800d3c8:	625a      	str	r2, [r3, #36]	; 0x24
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2253      	movs	r2, #83	; 0x53
 800d3d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3da:	d13f      	bne.n	800d45c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689a      	ldr	r2, [r3, #8]
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d3ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	689a      	ldr	r2, [r3, #8]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d3fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d3fc:	f7fa fd00 	bl	8007e00 <HAL_GetTick>
 800d400:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d402:	e013      	b.n	800d42c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d404:	f7fa fcfc 	bl	8007e00 <HAL_GetTick>
 800d408:	4602      	mov	r2, r0
 800d40a:	69bb      	ldr	r3, [r7, #24]
 800d40c:	1ad3      	subs	r3, r2, r3
 800d40e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d412:	d90b      	bls.n	800d42c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	22ff      	movs	r2, #255	; 0xff
 800d41a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2203      	movs	r2, #3
 800d420:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	2200      	movs	r2, #0
 800d426:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d428:	2303      	movs	r3, #3
 800d42a:	e061      	b.n	800d4f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68db      	ldr	r3, [r3, #12]
 800d432:	f003 0301 	and.w	r3, r3, #1
 800d436:	2b00      	cmp	r3, #0
 800d438:	d0e4      	beq.n	800d404 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69fa      	ldr	r2, [r7, #28]
 800d440:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	697a      	ldr	r2, [r7, #20]
 800d448:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	689a      	ldr	r2, [r3, #8]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d458:	609a      	str	r2, [r3, #8]
 800d45a:	e03e      	b.n	800d4da <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	689a      	ldr	r2, [r3, #8]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d46a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	689a      	ldr	r2, [r3, #8]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d47a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d47c:	f7fa fcc0 	bl	8007e00 <HAL_GetTick>
 800d480:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d482:	e013      	b.n	800d4ac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d484:	f7fa fcbc 	bl	8007e00 <HAL_GetTick>
 800d488:	4602      	mov	r2, r0
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d492:	d90b      	bls.n	800d4ac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	22ff      	movs	r2, #255	; 0xff
 800d49a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2203      	movs	r2, #3
 800d4a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e021      	b.n	800d4f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	f003 0302 	and.w	r3, r3, #2
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d0e4      	beq.n	800d484 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	69fa      	ldr	r2, [r7, #28]
 800d4c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	697a      	ldr	r2, [r7, #20]
 800d4c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d4d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	22ff      	movs	r2, #255	; 0xff
 800d4e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2201      	movs	r2, #1
 800d4e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3724      	adds	r7, #36	; 0x24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd90      	pop	{r4, r7, pc}

0800d4f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b084      	sub	sp, #16
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	68da      	ldr	r2, [r3, #12]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d512:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d514:	f7fa fc74 	bl	8007e00 <HAL_GetTick>
 800d518:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d51a:	e009      	b.n	800d530 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d51c:	f7fa fc70 	bl	8007e00 <HAL_GetTick>
 800d520:	4602      	mov	r2, r0
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d52a:	d901      	bls.n	800d530 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e007      	b.n	800d540 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f003 0320 	and.w	r3, r3, #32
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0ee      	beq.n	800d51c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d119      	bne.n	800d596 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d56a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800d56c:	f7fa fc48 	bl	8007e00 <HAL_GetTick>
 800d570:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d572:	e009      	b.n	800d588 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800d574:	f7fa fc44 	bl	8007e00 <HAL_GetTick>
 800d578:	4602      	mov	r2, r0
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	1ad3      	subs	r3, r2, r3
 800d57e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d582:	d901      	bls.n	800d588 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800d584:	2303      	movs	r3, #3
 800d586:	e007      	b.n	800d598 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d592:	2b00      	cmp	r3, #0
 800d594:	d0ee      	beq.n	800d574 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}

0800d5a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800d5ae:	e005      	b.n	800d5bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800d5b6:	79fb      	ldrb	r3, [r7, #7]
 800d5b8:	3b0a      	subs	r3, #10
 800d5ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800d5bc:	79fb      	ldrb	r3, [r7, #7]
 800d5be:	2b09      	cmp	r3, #9
 800d5c0:	d8f6      	bhi.n	800d5b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	b2db      	uxtb	r3, r3
 800d5c6:	011b      	lsls	r3, r3, #4
 800d5c8:	b2da      	uxtb	r2, r3
 800d5ca:	79fb      	ldrb	r3, [r7, #7]
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	b2db      	uxtb	r3, r3
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d5dc:	b480      	push	{r7}
 800d5de:	b085      	sub	sp, #20
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800d5ea:	79fb      	ldrb	r3, [r7, #7]
 800d5ec:	091b      	lsrs	r3, r3, #4
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	461a      	mov	r2, r3
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800d5fc:	79fb      	ldrb	r3, [r7, #7]
 800d5fe:	f003 030f 	and.w	r3, r3, #15
 800d602:	b2da      	uxtb	r2, r3
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	b2db      	uxtb	r3, r3
 800d608:	4413      	add	r3, r2
 800d60a:	b2db      	uxtb	r3, r3
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3714      	adds	r7, #20
 800d610:	46bd      	mov	sp, r7
 800d612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d616:	4770      	bx	lr

0800d618 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b082      	sub	sp, #8
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d101      	bne.n	800d62a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	e07b      	b.n	800d722 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d108      	bne.n	800d644 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	685b      	ldr	r3, [r3, #4]
 800d636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d63a:	d009      	beq.n	800d650 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2200      	movs	r2, #0
 800d640:	61da      	str	r2, [r3, #28]
 800d642:	e005      	b.n	800d650 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	2200      	movs	r2, #0
 800d648:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	2200      	movs	r2, #0
 800d64e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2200      	movs	r2, #0
 800d654:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d65c:	b2db      	uxtb	r3, r3
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d106      	bne.n	800d670 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7f7 ff3e 	bl	80054ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	2202      	movs	r2, #2
 800d674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d686:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d698:	431a      	orrs	r2, r3
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	68db      	ldr	r3, [r3, #12]
 800d69e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d6a2:	431a      	orrs	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	691b      	ldr	r3, [r3, #16]
 800d6a8:	f003 0302 	and.w	r3, r3, #2
 800d6ac:	431a      	orrs	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	695b      	ldr	r3, [r3, #20]
 800d6b2:	f003 0301 	and.w	r3, r3, #1
 800d6b6:	431a      	orrs	r2, r3
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	699b      	ldr	r3, [r3, #24]
 800d6bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d6c0:	431a      	orrs	r2, r3
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	69db      	ldr	r3, [r3, #28]
 800d6c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d6ca:	431a      	orrs	r2, r3
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6a1b      	ldr	r3, [r3, #32]
 800d6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6d4:	ea42 0103 	orr.w	r1, r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	430a      	orrs	r2, r1
 800d6e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	0c1b      	lsrs	r3, r3, #16
 800d6ee:	f003 0104 	and.w	r1, r3, #4
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6f6:	f003 0210 	and.w	r2, r3, #16
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	430a      	orrs	r2, r1
 800d700:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	69da      	ldr	r2, [r3, #28]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d710:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2200      	movs	r2, #0
 800d716:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2201      	movs	r2, #1
 800d71c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800d720:	2300      	movs	r3, #0
}
 800d722:	4618      	mov	r0, r3
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b082      	sub	sp, #8
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800d738:	2301      	movs	r3, #1
 800d73a:	e01a      	b.n	800d772 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	2202      	movs	r2, #2
 800d740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d752:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f7f7 ffa3 	bl	80056a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	2200      	movs	r2, #0
 800d75e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3708      	adds	r7, #8
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b088      	sub	sp, #32
 800d77e:	af00      	add	r7, sp, #0
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	603b      	str	r3, [r7, #0]
 800d786:	4613      	mov	r3, r2
 800d788:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d78a:	2300      	movs	r3, #0
 800d78c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d794:	2b01      	cmp	r3, #1
 800d796:	d101      	bne.n	800d79c <HAL_SPI_Transmit+0x22>
 800d798:	2302      	movs	r3, #2
 800d79a:	e126      	b.n	800d9ea <HAL_SPI_Transmit+0x270>
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7a4:	f7fa fb2c 	bl	8007e00 <HAL_GetTick>
 800d7a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800d7aa:	88fb      	ldrh	r3, [r7, #6]
 800d7ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d002      	beq.n	800d7c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d7be:	e10b      	b.n	800d9d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <HAL_SPI_Transmit+0x52>
 800d7c6:	88fb      	ldrh	r3, [r7, #6]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d102      	bne.n	800d7d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 800d7d0:	e102      	b.n	800d9d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2203      	movs	r2, #3
 800d7d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	68ba      	ldr	r2, [r7, #8]
 800d7e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	88fa      	ldrh	r2, [r7, #6]
 800d7ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	88fa      	ldrh	r2, [r7, #6]
 800d7f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	689b      	ldr	r3, [r3, #8]
 800d814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d818:	d10f      	bne.n	800d83a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	681a      	ldr	r2, [r3, #0]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d828:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d838:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d844:	2b40      	cmp	r3, #64	; 0x40
 800d846:	d007      	beq.n	800d858 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d856:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d860:	d14b      	bne.n	800d8fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d002      	beq.n	800d870 <HAL_SPI_Transmit+0xf6>
 800d86a:	8afb      	ldrh	r3, [r7, #22]
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d13e      	bne.n	800d8ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d874:	881a      	ldrh	r2, [r3, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d880:	1c9a      	adds	r2, r3, #2
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	3b01      	subs	r3, #1
 800d88e:	b29a      	uxth	r2, r3
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d894:	e02b      	b.n	800d8ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	689b      	ldr	r3, [r3, #8]
 800d89c:	f003 0302 	and.w	r3, r3, #2
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d112      	bne.n	800d8ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8a8:	881a      	ldrh	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8b4:	1c9a      	adds	r2, r3, #2
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	86da      	strh	r2, [r3, #54]	; 0x36
 800d8c8:	e011      	b.n	800d8ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8ca:	f7fa fa99 	bl	8007e00 <HAL_GetTick>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	429a      	cmp	r2, r3
 800d8d8:	d803      	bhi.n	800d8e2 <HAL_SPI_Transmit+0x168>
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8e0:	d102      	bne.n	800d8e8 <HAL_SPI_Transmit+0x16e>
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d102      	bne.n	800d8ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d8ec:	e074      	b.n	800d9d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1ce      	bne.n	800d896 <HAL_SPI_Transmit+0x11c>
 800d8f8:	e04c      	b.n	800d994 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d002      	beq.n	800d908 <HAL_SPI_Transmit+0x18e>
 800d902:	8afb      	ldrh	r3, [r7, #22]
 800d904:	2b01      	cmp	r3, #1
 800d906:	d140      	bne.n	800d98a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	330c      	adds	r3, #12
 800d912:	7812      	ldrb	r2, [r2, #0]
 800d914:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d924:	b29b      	uxth	r3, r3
 800d926:	3b01      	subs	r3, #1
 800d928:	b29a      	uxth	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d92e:	e02c      	b.n	800d98a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	689b      	ldr	r3, [r3, #8]
 800d936:	f003 0302 	and.w	r3, r3, #2
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d113      	bne.n	800d966 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	330c      	adds	r3, #12
 800d948:	7812      	ldrb	r2, [r2, #0]
 800d94a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d950:	1c5a      	adds	r2, r3, #1
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d95a:	b29b      	uxth	r3, r3
 800d95c:	3b01      	subs	r3, #1
 800d95e:	b29a      	uxth	r2, r3
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	86da      	strh	r2, [r3, #54]	; 0x36
 800d964:	e011      	b.n	800d98a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d966:	f7fa fa4b 	bl	8007e00 <HAL_GetTick>
 800d96a:	4602      	mov	r2, r0
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	1ad3      	subs	r3, r2, r3
 800d970:	683a      	ldr	r2, [r7, #0]
 800d972:	429a      	cmp	r2, r3
 800d974:	d803      	bhi.n	800d97e <HAL_SPI_Transmit+0x204>
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d97c:	d102      	bne.n	800d984 <HAL_SPI_Transmit+0x20a>
 800d97e:	683b      	ldr	r3, [r7, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d102      	bne.n	800d98a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800d984:	2303      	movs	r3, #3
 800d986:	77fb      	strb	r3, [r7, #31]
          goto error;
 800d988:	e026      	b.n	800d9d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d98e:	b29b      	uxth	r3, r3
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1cd      	bne.n	800d930 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f000 fd03 	bl	800e3a4 <SPI_EndRxTxTransaction>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	2220      	movs	r2, #32
 800d9a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	689b      	ldr	r3, [r3, #8]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d10a      	bne.n	800d9c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	613b      	str	r3, [r7, #16]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	613b      	str	r3, [r7, #16]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	613b      	str	r3, [r7, #16]
 800d9c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d002      	beq.n	800d9d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	77fb      	strb	r3, [r7, #31]
 800d9d4:	e000      	b.n	800d9d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 800d9d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d9e8:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3720      	adds	r7, #32
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b08c      	sub	sp, #48	; 0x30
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	60f8      	str	r0, [r7, #12]
 800d9fa:	60b9      	str	r1, [r7, #8]
 800d9fc:	607a      	str	r2, [r7, #4]
 800d9fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800da00:	2301      	movs	r3, #1
 800da02:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800da04:	2300      	movs	r3, #0
 800da06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800da10:	2b01      	cmp	r3, #1
 800da12:	d101      	bne.n	800da18 <HAL_SPI_TransmitReceive+0x26>
 800da14:	2302      	movs	r3, #2
 800da16:	e18a      	b.n	800dd2e <HAL_SPI_TransmitReceive+0x33c>
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da20:	f7fa f9ee 	bl	8007e00 <HAL_GetTick>
 800da24:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	685b      	ldr	r3, [r3, #4]
 800da34:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800da36:	887b      	ldrh	r3, [r7, #2]
 800da38:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800da3a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d00f      	beq.n	800da62 <HAL_SPI_TransmitReceive+0x70>
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800da48:	d107      	bne.n	800da5a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	689b      	ldr	r3, [r3, #8]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d103      	bne.n	800da5a <HAL_SPI_TransmitReceive+0x68>
 800da52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da56:	2b04      	cmp	r3, #4
 800da58:	d003      	beq.n	800da62 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800da5a:	2302      	movs	r3, #2
 800da5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800da60:	e15b      	b.n	800dd1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800da62:	68bb      	ldr	r3, [r7, #8]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d005      	beq.n	800da74 <HAL_SPI_TransmitReceive+0x82>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d002      	beq.n	800da74 <HAL_SPI_TransmitReceive+0x82>
 800da6e:	887b      	ldrh	r3, [r7, #2]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d103      	bne.n	800da7c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800da74:	2301      	movs	r3, #1
 800da76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800da7a:	e14e      	b.n	800dd1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800da82:	b2db      	uxtb	r3, r3
 800da84:	2b04      	cmp	r3, #4
 800da86:	d003      	beq.n	800da90 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2205      	movs	r2, #5
 800da8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	2200      	movs	r2, #0
 800da94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	687a      	ldr	r2, [r7, #4]
 800da9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	887a      	ldrh	r2, [r7, #2]
 800daa0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	887a      	ldrh	r2, [r7, #2]
 800daa6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	68ba      	ldr	r2, [r7, #8]
 800daac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	887a      	ldrh	r2, [r7, #2]
 800dab2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	887a      	ldrh	r2, [r7, #2]
 800dab8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2200      	movs	r2, #0
 800dabe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	2200      	movs	r2, #0
 800dac4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dad0:	2b40      	cmp	r3, #64	; 0x40
 800dad2:	d007      	beq.n	800dae4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	681a      	ldr	r2, [r3, #0]
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dae2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	68db      	ldr	r3, [r3, #12]
 800dae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800daec:	d178      	bne.n	800dbe0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d002      	beq.n	800dafc <HAL_SPI_TransmitReceive+0x10a>
 800daf6:	8b7b      	ldrh	r3, [r7, #26]
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d166      	bne.n	800dbca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db00:	881a      	ldrh	r2, [r3, #0]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db0c:	1c9a      	adds	r2, r3, #2
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db16:	b29b      	uxth	r3, r3
 800db18:	3b01      	subs	r3, #1
 800db1a:	b29a      	uxth	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db20:	e053      	b.n	800dbca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	f003 0302 	and.w	r3, r3, #2
 800db2c:	2b02      	cmp	r3, #2
 800db2e:	d11b      	bne.n	800db68 <HAL_SPI_TransmitReceive+0x176>
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db34:	b29b      	uxth	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	d016      	beq.n	800db68 <HAL_SPI_TransmitReceive+0x176>
 800db3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d113      	bne.n	800db68 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db44:	881a      	ldrh	r2, [r3, #0]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db50:	1c9a      	adds	r2, r3, #2
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	3b01      	subs	r3, #1
 800db5e:	b29a      	uxth	r2, r3
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800db64:	2300      	movs	r3, #0
 800db66:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	2b01      	cmp	r3, #1
 800db74:	d119      	bne.n	800dbaa <HAL_SPI_TransmitReceive+0x1b8>
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db7a:	b29b      	uxth	r3, r3
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d014      	beq.n	800dbaa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68da      	ldr	r2, [r3, #12]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	b292      	uxth	r2, r2
 800db8c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db92:	1c9a      	adds	r2, r3, #2
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	3b01      	subs	r3, #1
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dba6:	2301      	movs	r3, #1
 800dba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dbaa:	f7fa f929 	bl	8007e00 <HAL_GetTick>
 800dbae:	4602      	mov	r2, r0
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb2:	1ad3      	subs	r3, r2, r3
 800dbb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d807      	bhi.n	800dbca <HAL_SPI_TransmitReceive+0x1d8>
 800dbba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbc0:	d003      	beq.n	800dbca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800dbc2:	2303      	movs	r3, #3
 800dbc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dbc8:	e0a7      	b.n	800dd1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d1a6      	bne.n	800db22 <HAL_SPI_TransmitReceive+0x130>
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dbd8:	b29b      	uxth	r3, r3
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1a1      	bne.n	800db22 <HAL_SPI_TransmitReceive+0x130>
 800dbde:	e07c      	b.n	800dcda <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d002      	beq.n	800dbee <HAL_SPI_TransmitReceive+0x1fc>
 800dbe8:	8b7b      	ldrh	r3, [r7, #26]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d16b      	bne.n	800dcc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	330c      	adds	r3, #12
 800dbf8:	7812      	ldrb	r2, [r2, #0]
 800dbfa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc00:	1c5a      	adds	r2, r3, #1
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc0a:	b29b      	uxth	r3, r3
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	b29a      	uxth	r2, r3
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc14:	e057      	b.n	800dcc6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	f003 0302 	and.w	r3, r3, #2
 800dc20:	2b02      	cmp	r3, #2
 800dc22:	d11c      	bne.n	800dc5e <HAL_SPI_TransmitReceive+0x26c>
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d017      	beq.n	800dc5e <HAL_SPI_TransmitReceive+0x26c>
 800dc2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc30:	2b01      	cmp	r3, #1
 800dc32:	d114      	bne.n	800dc5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	330c      	adds	r3, #12
 800dc3e:	7812      	ldrb	r2, [r2, #0]
 800dc40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc46:	1c5a      	adds	r2, r3, #1
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	3b01      	subs	r3, #1
 800dc54:	b29a      	uxth	r2, r3
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	f003 0301 	and.w	r3, r3, #1
 800dc68:	2b01      	cmp	r3, #1
 800dc6a:	d119      	bne.n	800dca0 <HAL_SPI_TransmitReceive+0x2ae>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d014      	beq.n	800dca0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	68da      	ldr	r2, [r3, #12]
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc80:	b2d2      	uxtb	r2, r2
 800dc82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc88:	1c5a      	adds	r2, r3, #1
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	3b01      	subs	r3, #1
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800dca0:	f7fa f8ae 	bl	8007e00 <HAL_GetTick>
 800dca4:	4602      	mov	r2, r0
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	1ad3      	subs	r3, r2, r3
 800dcaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dcac:	429a      	cmp	r2, r3
 800dcae:	d803      	bhi.n	800dcb8 <HAL_SPI_TransmitReceive+0x2c6>
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcb6:	d102      	bne.n	800dcbe <HAL_SPI_TransmitReceive+0x2cc>
 800dcb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d103      	bne.n	800dcc6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800dcbe:	2303      	movs	r3, #3
 800dcc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800dcc4:	e029      	b.n	800dd1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1a2      	bne.n	800dc16 <HAL_SPI_TransmitReceive+0x224>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d19d      	bne.n	800dc16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dcda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f000 fb60 	bl	800e3a4 <SPI_EndRxTxTransaction>
 800dce4:	4603      	mov	r3, r0
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d006      	beq.n	800dcf8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800dcea:	2301      	movs	r3, #1
 800dcec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2220      	movs	r2, #32
 800dcf4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800dcf6:	e010      	b.n	800dd1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dd00:	2300      	movs	r3, #0
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68db      	ldr	r3, [r3, #12]
 800dd0a:	617b      	str	r3, [r7, #20]
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	689b      	ldr	r3, [r3, #8]
 800dd12:	617b      	str	r3, [r7, #20]
 800dd14:	697b      	ldr	r3, [r7, #20]
 800dd16:	e000      	b.n	800dd1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800dd18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2201      	movs	r2, #1
 800dd1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dd2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3730      	adds	r7, #48	; 0x30
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
	...

0800dd38 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b086      	sub	sp, #24
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	4613      	mov	r3, r2
 800dd44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd46:	2300      	movs	r3, #0
 800dd48:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d101      	bne.n	800dd58 <HAL_SPI_Transmit_DMA+0x20>
 800dd54:	2302      	movs	r3, #2
 800dd56:	e09b      	b.n	800de90 <HAL_SPI_Transmit_DMA+0x158>
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	2b01      	cmp	r3, #1
 800dd6a:	d002      	beq.n	800dd72 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800dd6c:	2302      	movs	r3, #2
 800dd6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dd70:	e089      	b.n	800de86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <HAL_SPI_Transmit_DMA+0x46>
 800dd78:	88fb      	ldrh	r3, [r7, #6]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d102      	bne.n	800dd84 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800dd7e:	2301      	movs	r3, #1
 800dd80:	75fb      	strb	r3, [r7, #23]
    goto error;
 800dd82:	e080      	b.n	800de86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2203      	movs	r2, #3
 800dd88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	88fa      	ldrh	r2, [r7, #6]
 800dd9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	88fa      	ldrh	r2, [r7, #6]
 800dda2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2200      	movs	r2, #0
 800ddae:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	689b      	ldr	r3, [r3, #8]
 800ddc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddca:	d10f      	bne.n	800ddec <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	681a      	ldr	r2, [r3, #0]
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ddda:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ddea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddf0:	4a29      	ldr	r2, [pc, #164]	; (800de98 <HAL_SPI_Transmit_DMA+0x160>)
 800ddf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ddf8:	4a28      	ldr	r2, [pc, #160]	; (800de9c <HAL_SPI_Transmit_DMA+0x164>)
 800ddfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de00:	4a27      	ldr	r2, [pc, #156]	; (800dea0 <HAL_SPI_Transmit_DMA+0x168>)
 800de02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de08:	2200      	movs	r2, #0
 800de0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de14:	4619      	mov	r1, r3
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	330c      	adds	r3, #12
 800de1c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de22:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800de24:	f7fa fe3c 	bl	8008aa0 <HAL_DMA_Start_IT>
 800de28:	4603      	mov	r3, r0
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00c      	beq.n	800de48 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de32:	f043 0210 	orr.w	r2, r3, #16
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800de3a:	2301      	movs	r3, #1
 800de3c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2201      	movs	r2, #1
 800de42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800de46:	e01e      	b.n	800de86 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de52:	2b40      	cmp	r3, #64	; 0x40
 800de54:	d007      	beq.n	800de66 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	681a      	ldr	r2, [r3, #0]
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de64:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	685a      	ldr	r2, [r3, #4]
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f042 0220 	orr.w	r2, r2, #32
 800de74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	685a      	ldr	r2, [r3, #4]
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	f042 0202 	orr.w	r2, r2, #2
 800de84:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	2200      	movs	r2, #0
 800de8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800de8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de90:	4618      	mov	r0, r3
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}
 800de98:	0800e211 	.word	0x0800e211
 800de9c:	0800e169 	.word	0x0800e169
 800dea0:	0800e22d 	.word	0x0800e22d

0800dea4 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b084      	sub	sp, #16
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00f      	beq.n	800ded8 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800debc:	4618      	mov	r0, r3
 800debe:	f7fa fe47 	bl	8008b50 <HAL_DMA_Abort>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d007      	beq.n	800ded8 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800decc:	f043 0210 	orr.w	r2, r3, #16
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800ded4:	2301      	movs	r3, #1
 800ded6:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d00f      	beq.n	800df00 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fa fe33 	bl	8008b50 <HAL_DMA_Abort>
 800deea:	4603      	mov	r3, r0
 800deec:	2b00      	cmp	r3, #0
 800deee:	d007      	beq.n	800df00 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800def4:	f043 0210 	orr.w	r2, r3, #16
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800defc:	2301      	movs	r3, #1
 800defe:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685a      	ldr	r2, [r3, #4]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f022 0203 	bic.w	r2, r2, #3
 800df0e:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
	...

0800df24 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800df24:	b580      	push	{r7, lr}
 800df26:	b088      	sub	sp, #32
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800df3c:	69bb      	ldr	r3, [r7, #24]
 800df3e:	099b      	lsrs	r3, r3, #6
 800df40:	f003 0301 	and.w	r3, r3, #1
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10f      	bne.n	800df68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800df48:	69bb      	ldr	r3, [r7, #24]
 800df4a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d00a      	beq.n	800df68 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	099b      	lsrs	r3, r3, #6
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d004      	beq.n	800df68 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	4798      	blx	r3
    return;
 800df66:	e0d7      	b.n	800e118 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	085b      	lsrs	r3, r3, #1
 800df6c:	f003 0301 	and.w	r3, r3, #1
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00a      	beq.n	800df8a <HAL_SPI_IRQHandler+0x66>
 800df74:	69fb      	ldr	r3, [r7, #28]
 800df76:	09db      	lsrs	r3, r3, #7
 800df78:	f003 0301 	and.w	r3, r3, #1
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d004      	beq.n	800df8a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	4798      	blx	r3
    return;
 800df88:	e0c6      	b.n	800e118 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800df8a:	69bb      	ldr	r3, [r7, #24]
 800df8c:	095b      	lsrs	r3, r3, #5
 800df8e:	f003 0301 	and.w	r3, r3, #1
 800df92:	2b00      	cmp	r3, #0
 800df94:	d10c      	bne.n	800dfb0 <HAL_SPI_IRQHandler+0x8c>
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	099b      	lsrs	r3, r3, #6
 800df9a:	f003 0301 	and.w	r3, r3, #1
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d106      	bne.n	800dfb0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	0a1b      	lsrs	r3, r3, #8
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	f000 80b4 	beq.w	800e118 <HAL_SPI_IRQHandler+0x1f4>
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	095b      	lsrs	r3, r3, #5
 800dfb4:	f003 0301 	and.w	r3, r3, #1
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	f000 80ad 	beq.w	800e118 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	099b      	lsrs	r3, r3, #6
 800dfc2:	f003 0301 	and.w	r3, r3, #1
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d023      	beq.n	800e012 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b03      	cmp	r3, #3
 800dfd4:	d011      	beq.n	800dffa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfda:	f043 0204 	orr.w	r2, r3, #4
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	617b      	str	r3, [r7, #20]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	617b      	str	r3, [r7, #20]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689b      	ldr	r3, [r3, #8]
 800dff4:	617b      	str	r3, [r7, #20]
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	e00b      	b.n	800e012 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800dffa:	2300      	movs	r3, #0
 800dffc:	613b      	str	r3, [r7, #16]
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	68db      	ldr	r3, [r3, #12]
 800e004:	613b      	str	r3, [r7, #16]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	689b      	ldr	r3, [r3, #8]
 800e00c:	613b      	str	r3, [r7, #16]
 800e00e:	693b      	ldr	r3, [r7, #16]
        return;
 800e010:	e082      	b.n	800e118 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800e012:	69bb      	ldr	r3, [r7, #24]
 800e014:	095b      	lsrs	r3, r3, #5
 800e016:	f003 0301 	and.w	r3, r3, #1
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d014      	beq.n	800e048 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e022:	f043 0201 	orr.w	r2, r3, #1
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e02a:	2300      	movs	r3, #0
 800e02c:	60fb      	str	r3, [r7, #12]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	60fb      	str	r3, [r7, #12]
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e044:	601a      	str	r2, [r3, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	0a1b      	lsrs	r3, r3, #8
 800e04c:	f003 0301 	and.w	r3, r3, #1
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00c      	beq.n	800e06e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e058:	f043 0208 	orr.w	r2, r3, #8
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e060:	2300      	movs	r3, #0
 800e062:	60bb      	str	r3, [r7, #8]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	689b      	ldr	r3, [r3, #8]
 800e06a:	60bb      	str	r3, [r7, #8]
 800e06c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e072:	2b00      	cmp	r3, #0
 800e074:	d04f      	beq.n	800e116 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e084:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2201      	movs	r2, #1
 800e08a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800e08e:	69fb      	ldr	r3, [r7, #28]
 800e090:	f003 0302 	and.w	r3, r3, #2
 800e094:	2b00      	cmp	r3, #0
 800e096:	d104      	bne.n	800e0a2 <HAL_SPI_IRQHandler+0x17e>
 800e098:	69fb      	ldr	r3, [r7, #28]
 800e09a:	f003 0301 	and.w	r3, r3, #1
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d034      	beq.n	800e10c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	685a      	ldr	r2, [r3, #4]
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	f022 0203 	bic.w	r2, r2, #3
 800e0b0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d011      	beq.n	800e0de <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0be:	4a18      	ldr	r2, [pc, #96]	; (800e120 <HAL_SPI_IRQHandler+0x1fc>)
 800e0c0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	f7fa fdb2 	bl	8008c30 <HAL_DMA_Abort_IT>
 800e0cc:	4603      	mov	r3, r0
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d005      	beq.n	800e0de <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d016      	beq.n	800e114 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0ea:	4a0d      	ldr	r2, [pc, #52]	; (800e120 <HAL_SPI_IRQHandler+0x1fc>)
 800e0ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fa fd9c 	bl	8008c30 <HAL_DMA_Abort_IT>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00a      	beq.n	800e114 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e102:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800e10a:	e003      	b.n	800e114 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800e10c:	6878      	ldr	r0, [r7, #4]
 800e10e:	f000 f813 	bl	800e138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800e112:	e000      	b.n	800e116 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800e114:	bf00      	nop
    return;
 800e116:	bf00      	nop
  }
}
 800e118:	3720      	adds	r7, #32
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	0800e26d 	.word	0x0800e26d

0800e124 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800e124:	b480      	push	{r7}
 800e126:	b083      	sub	sp, #12
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800e12c:	bf00      	nop
 800e12e:	370c      	adds	r7, #12
 800e130:	46bd      	mov	sp, r7
 800e132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e136:	4770      	bx	lr

0800e138 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800e138:	b480      	push	{r7}
 800e13a:	b083      	sub	sp, #12
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800e140:	bf00      	nop
 800e142:	370c      	adds	r7, #12
 800e144:	46bd      	mov	sp, r7
 800e146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14a:	4770      	bx	lr

0800e14c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800e14c:	b480      	push	{r7}
 800e14e:	b083      	sub	sp, #12
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e15a:	b2db      	uxtb	r3, r3
}
 800e15c:	4618      	mov	r0, r3
 800e15e:	370c      	adds	r7, #12
 800e160:	46bd      	mov	sp, r7
 800e162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e166:	4770      	bx	lr

0800e168 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b086      	sub	sp, #24
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e174:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e176:	f7f9 fe43 	bl	8007e00 <HAL_GetTick>
 800e17a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e18a:	d03b      	beq.n	800e204 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800e18c:	697b      	ldr	r3, [r7, #20]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f022 0220 	bic.w	r2, r2, #32
 800e19a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	685a      	ldr	r2, [r3, #4]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f022 0202 	bic.w	r2, r2, #2
 800e1aa:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800e1ac:	693a      	ldr	r2, [r7, #16]
 800e1ae:	2164      	movs	r1, #100	; 0x64
 800e1b0:	6978      	ldr	r0, [r7, #20]
 800e1b2:	f000 f8f7 	bl	800e3a4 <SPI_EndRxTxTransaction>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d005      	beq.n	800e1c8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1c0:	f043 0220 	orr.w	r2, r3, #32
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d10a      	bne.n	800e1e6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	60fb      	str	r3, [r7, #12]
 800e1d4:	697b      	ldr	r3, [r7, #20]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	68db      	ldr	r3, [r3, #12]
 800e1da:	60fb      	str	r3, [r7, #12]
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	60fb      	str	r3, [r7, #12]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800e1e6:	697b      	ldr	r3, [r7, #20]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d003      	beq.n	800e204 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800e1fc:	6978      	ldr	r0, [r7, #20]
 800e1fe:	f7ff ff9b 	bl	800e138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800e202:	e002      	b.n	800e20a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800e204:	6978      	ldr	r0, [r7, #20]
 800e206:	f7f4 fcbb 	bl	8002b80 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b084      	sub	sp, #16
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e21c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800e21e:	68f8      	ldr	r0, [r7, #12]
 800e220:	f7ff ff80 	bl	800e124 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e224:	bf00      	nop
 800e226:	3710      	adds	r7, #16
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e238:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	685a      	ldr	r2, [r3, #4]
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f022 0203 	bic.w	r2, r2, #3
 800e248:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e24e:	f043 0210 	orr.w	r2, r3, #16
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e25e:	68f8      	ldr	r0, [r7, #12]
 800e260:	f7ff ff6a 	bl	800e138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e264:	bf00      	nop
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b084      	sub	sp, #16
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e278:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2200      	movs	r2, #0
 800e27e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7ff ff56 	bl	800e138 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800e28c:	bf00      	nop
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b088      	sub	sp, #32
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	603b      	str	r3, [r7, #0]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e2a4:	f7f9 fdac 	bl	8007e00 <HAL_GetTick>
 800e2a8:	4602      	mov	r2, r0
 800e2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ac:	1a9b      	subs	r3, r3, r2
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	4413      	add	r3, r2
 800e2b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e2b4:	f7f9 fda4 	bl	8007e00 <HAL_GetTick>
 800e2b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e2ba:	4b39      	ldr	r3, [pc, #228]	; (800e3a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	015b      	lsls	r3, r3, #5
 800e2c0:	0d1b      	lsrs	r3, r3, #20
 800e2c2:	69fa      	ldr	r2, [r7, #28]
 800e2c4:	fb02 f303 	mul.w	r3, r2, r3
 800e2c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2ca:	e054      	b.n	800e376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2d2:	d050      	beq.n	800e376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e2d4:	f7f9 fd94 	bl	8007e00 <HAL_GetTick>
 800e2d8:	4602      	mov	r2, r0
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	1ad3      	subs	r3, r2, r3
 800e2de:	69fa      	ldr	r2, [r7, #28]
 800e2e0:	429a      	cmp	r2, r3
 800e2e2:	d902      	bls.n	800e2ea <SPI_WaitFlagStateUntilTimeout+0x56>
 800e2e4:	69fb      	ldr	r3, [r7, #28]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d13d      	bne.n	800e366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	685a      	ldr	r2, [r3, #4]
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e302:	d111      	bne.n	800e328 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e30c:	d004      	beq.n	800e318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	689b      	ldr	r3, [r3, #8]
 800e312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e316:	d107      	bne.n	800e328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	681a      	ldr	r2, [r3, #0]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e32c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e330:	d10f      	bne.n	800e352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e340:	601a      	str	r2, [r3, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	681a      	ldr	r2, [r3, #0]
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2201      	movs	r2, #1
 800e356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e017      	b.n	800e396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2b00      	cmp	r3, #0
 800e36a:	d101      	bne.n	800e370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e36c:	2300      	movs	r3, #0
 800e36e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e370:	697b      	ldr	r3, [r7, #20]
 800e372:	3b01      	subs	r3, #1
 800e374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	4013      	ands	r3, r2
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	429a      	cmp	r2, r3
 800e384:	bf0c      	ite	eq
 800e386:	2301      	moveq	r3, #1
 800e388:	2300      	movne	r3, #0
 800e38a:	b2db      	uxtb	r3, r3
 800e38c:	461a      	mov	r2, r3
 800e38e:	79fb      	ldrb	r3, [r7, #7]
 800e390:	429a      	cmp	r2, r3
 800e392:	d19b      	bne.n	800e2cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3720      	adds	r7, #32
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	20000030 	.word	0x20000030

0800e3a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b088      	sub	sp, #32
 800e3a8:	af02      	add	r7, sp, #8
 800e3aa:	60f8      	str	r0, [r7, #12]
 800e3ac:	60b9      	str	r1, [r7, #8]
 800e3ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e3b0:	4b1b      	ldr	r3, [pc, #108]	; (800e420 <SPI_EndRxTxTransaction+0x7c>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	4a1b      	ldr	r2, [pc, #108]	; (800e424 <SPI_EndRxTxTransaction+0x80>)
 800e3b6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ba:	0d5b      	lsrs	r3, r3, #21
 800e3bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3c0:	fb02 f303 	mul.w	r3, r2, r3
 800e3c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e3ce:	d112      	bne.n	800e3f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	9300      	str	r3, [sp, #0]
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2180      	movs	r1, #128	; 0x80
 800e3da:	68f8      	ldr	r0, [r7, #12]
 800e3dc:	f7ff ff5a 	bl	800e294 <SPI_WaitFlagStateUntilTimeout>
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d016      	beq.n	800e414 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3ea:	f043 0220 	orr.w	r2, r3, #32
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e3f2:	2303      	movs	r3, #3
 800e3f4:	e00f      	b.n	800e416 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d00a      	beq.n	800e412 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e40c:	2b80      	cmp	r3, #128	; 0x80
 800e40e:	d0f2      	beq.n	800e3f6 <SPI_EndRxTxTransaction+0x52>
 800e410:	e000      	b.n	800e414 <SPI_EndRxTxTransaction+0x70>
        break;
 800e412:	bf00      	nop
  }

  return HAL_OK;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3718      	adds	r7, #24
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	20000030 	.word	0x20000030
 800e424:	165e9f81 	.word	0x165e9f81

0800e428 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d101      	bne.n	800e43a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e436:	2301      	movs	r3, #1
 800e438:	e041      	b.n	800e4be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e440:	b2db      	uxtb	r3, r3
 800e442:	2b00      	cmp	r3, #0
 800e444:	d106      	bne.n	800e454 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2200      	movs	r2, #0
 800e44a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e44e:	6878      	ldr	r0, [r7, #4]
 800e450:	f7f7 f966 	bl	8005720 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	2202      	movs	r2, #2
 800e458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	3304      	adds	r3, #4
 800e464:	4619      	mov	r1, r3
 800e466:	4610      	mov	r0, r2
 800e468:	f000 fac4 	bl	800e9f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2201      	movs	r2, #1
 800e478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3708      	adds	r7, #8
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}
	...

0800e4c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e4d6:	b2db      	uxtb	r3, r3
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d001      	beq.n	800e4e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e4dc:	2301      	movs	r3, #1
 800e4de:	e04e      	b.n	800e57e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2202      	movs	r2, #2
 800e4e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	68da      	ldr	r2, [r3, #12]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f042 0201 	orr.w	r2, r2, #1
 800e4f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a23      	ldr	r2, [pc, #140]	; (800e58c <HAL_TIM_Base_Start_IT+0xc4>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d022      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e50a:	d01d      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4a1f      	ldr	r2, [pc, #124]	; (800e590 <HAL_TIM_Base_Start_IT+0xc8>)
 800e512:	4293      	cmp	r3, r2
 800e514:	d018      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4a1e      	ldr	r2, [pc, #120]	; (800e594 <HAL_TIM_Base_Start_IT+0xcc>)
 800e51c:	4293      	cmp	r3, r2
 800e51e:	d013      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	4a1c      	ldr	r2, [pc, #112]	; (800e598 <HAL_TIM_Base_Start_IT+0xd0>)
 800e526:	4293      	cmp	r3, r2
 800e528:	d00e      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	4a1b      	ldr	r2, [pc, #108]	; (800e59c <HAL_TIM_Base_Start_IT+0xd4>)
 800e530:	4293      	cmp	r3, r2
 800e532:	d009      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a19      	ldr	r2, [pc, #100]	; (800e5a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	d004      	beq.n	800e548 <HAL_TIM_Base_Start_IT+0x80>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a18      	ldr	r2, [pc, #96]	; (800e5a4 <HAL_TIM_Base_Start_IT+0xdc>)
 800e544:	4293      	cmp	r3, r2
 800e546:	d111      	bne.n	800e56c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	f003 0307 	and.w	r3, r3, #7
 800e552:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	2b06      	cmp	r3, #6
 800e558:	d010      	beq.n	800e57c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f042 0201 	orr.w	r2, r2, #1
 800e568:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e56a:	e007      	b.n	800e57c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	681a      	ldr	r2, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f042 0201 	orr.w	r2, r2, #1
 800e57a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3714      	adds	r7, #20
 800e582:	46bd      	mov	sp, r7
 800e584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e588:	4770      	bx	lr
 800e58a:	bf00      	nop
 800e58c:	40010000 	.word	0x40010000
 800e590:	40000400 	.word	0x40000400
 800e594:	40000800 	.word	0x40000800
 800e598:	40000c00 	.word	0x40000c00
 800e59c:	40010400 	.word	0x40010400
 800e5a0:	40014000 	.word	0x40014000
 800e5a4:	40001800 	.word	0x40001800

0800e5a8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68da      	ldr	r2, [r3, #12]
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	f022 0201 	bic.w	r2, r2, #1
 800e5be:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	6a1a      	ldr	r2, [r3, #32]
 800e5c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d10f      	bne.n	800e5f0 <HAL_TIM_Base_Stop_IT+0x48>
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	6a1a      	ldr	r2, [r3, #32]
 800e5d6:	f240 4344 	movw	r3, #1092	; 0x444
 800e5da:	4013      	ands	r3, r2
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d107      	bne.n	800e5f0 <HAL_TIM_Base_Stop_IT+0x48>
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f022 0201 	bic.w	r2, r2, #1
 800e5ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2201      	movs	r2, #1
 800e5f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr

0800e606 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e606:	b580      	push	{r7, lr}
 800e608:	b082      	sub	sp, #8
 800e60a:	af00      	add	r7, sp, #0
 800e60c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	f003 0302 	and.w	r3, r3, #2
 800e618:	2b02      	cmp	r3, #2
 800e61a:	d122      	bne.n	800e662 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	68db      	ldr	r3, [r3, #12]
 800e622:	f003 0302 	and.w	r3, r3, #2
 800e626:	2b02      	cmp	r3, #2
 800e628:	d11b      	bne.n	800e662 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f06f 0202 	mvn.w	r2, #2
 800e632:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	699b      	ldr	r3, [r3, #24]
 800e640:	f003 0303 	and.w	r3, r3, #3
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f000 f9b5 	bl	800e9b8 <HAL_TIM_IC_CaptureCallback>
 800e64e:	e005      	b.n	800e65c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	f000 f9a7 	bl	800e9a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f9b8 	bl	800e9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	691b      	ldr	r3, [r3, #16]
 800e668:	f003 0304 	and.w	r3, r3, #4
 800e66c:	2b04      	cmp	r3, #4
 800e66e:	d122      	bne.n	800e6b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	68db      	ldr	r3, [r3, #12]
 800e676:	f003 0304 	and.w	r3, r3, #4
 800e67a:	2b04      	cmp	r3, #4
 800e67c:	d11b      	bne.n	800e6b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f06f 0204 	mvn.w	r2, #4
 800e686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2202      	movs	r2, #2
 800e68c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	699b      	ldr	r3, [r3, #24]
 800e694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d003      	beq.n	800e6a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f000 f98b 	bl	800e9b8 <HAL_TIM_IC_CaptureCallback>
 800e6a2:	e005      	b.n	800e6b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f97d 	bl	800e9a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f98e 	bl	800e9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	691b      	ldr	r3, [r3, #16]
 800e6bc:	f003 0308 	and.w	r3, r3, #8
 800e6c0:	2b08      	cmp	r3, #8
 800e6c2:	d122      	bne.n	800e70a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	68db      	ldr	r3, [r3, #12]
 800e6ca:	f003 0308 	and.w	r3, r3, #8
 800e6ce:	2b08      	cmp	r3, #8
 800e6d0:	d11b      	bne.n	800e70a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	f06f 0208 	mvn.w	r2, #8
 800e6da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2204      	movs	r2, #4
 800e6e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	f003 0303 	and.w	r3, r3, #3
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d003      	beq.n	800e6f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f000 f961 	bl	800e9b8 <HAL_TIM_IC_CaptureCallback>
 800e6f6:	e005      	b.n	800e704 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f953 	bl	800e9a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f964 	bl	800e9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	691b      	ldr	r3, [r3, #16]
 800e710:	f003 0310 	and.w	r3, r3, #16
 800e714:	2b10      	cmp	r3, #16
 800e716:	d122      	bne.n	800e75e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68db      	ldr	r3, [r3, #12]
 800e71e:	f003 0310 	and.w	r3, r3, #16
 800e722:	2b10      	cmp	r3, #16
 800e724:	d11b      	bne.n	800e75e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f06f 0210 	mvn.w	r2, #16
 800e72e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2208      	movs	r2, #8
 800e734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	69db      	ldr	r3, [r3, #28]
 800e73c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e740:	2b00      	cmp	r3, #0
 800e742:	d003      	beq.n	800e74c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 f937 	bl	800e9b8 <HAL_TIM_IC_CaptureCallback>
 800e74a:	e005      	b.n	800e758 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f000 f929 	bl	800e9a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f000 f93a 	bl	800e9cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	2200      	movs	r2, #0
 800e75c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	f003 0301 	and.w	r3, r3, #1
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d10e      	bne.n	800e78a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	68db      	ldr	r3, [r3, #12]
 800e772:	f003 0301 	and.w	r3, r3, #1
 800e776:	2b01      	cmp	r3, #1
 800e778:	d107      	bne.n	800e78a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	f06f 0201 	mvn.w	r2, #1
 800e782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e784:	6878      	ldr	r0, [r7, #4]
 800e786:	f7f6 fcf9 	bl	800517c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	691b      	ldr	r3, [r3, #16]
 800e790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e794:	2b80      	cmp	r3, #128	; 0x80
 800e796:	d10e      	bne.n	800e7b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e7a2:	2b80      	cmp	r3, #128	; 0x80
 800e7a4:	d107      	bne.n	800e7b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 fadf 	bl	800ed74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	691b      	ldr	r3, [r3, #16]
 800e7bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7c0:	2b40      	cmp	r3, #64	; 0x40
 800e7c2:	d10e      	bne.n	800e7e2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ce:	2b40      	cmp	r3, #64	; 0x40
 800e7d0:	d107      	bne.n	800e7e2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e7da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f000 f8ff 	bl	800e9e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	691b      	ldr	r3, [r3, #16]
 800e7e8:	f003 0320 	and.w	r3, r3, #32
 800e7ec:	2b20      	cmp	r3, #32
 800e7ee:	d10e      	bne.n	800e80e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
 800e7f6:	f003 0320 	and.w	r3, r3, #32
 800e7fa:	2b20      	cmp	r3, #32
 800e7fc:	d107      	bne.n	800e80e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	f06f 0220 	mvn.w	r2, #32
 800e806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 faa9 	bl	800ed60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e80e:	bf00      	nop
 800e810:	3708      	adds	r7, #8
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}

0800e816 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e816:	b580      	push	{r7, lr}
 800e818:	b084      	sub	sp, #16
 800e81a:	af00      	add	r7, sp, #0
 800e81c:	6078      	str	r0, [r7, #4]
 800e81e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e820:	2300      	movs	r3, #0
 800e822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e82a:	2b01      	cmp	r3, #1
 800e82c:	d101      	bne.n	800e832 <HAL_TIM_ConfigClockSource+0x1c>
 800e82e:	2302      	movs	r3, #2
 800e830:	e0b4      	b.n	800e99c <HAL_TIM_ConfigClockSource+0x186>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2201      	movs	r2, #1
 800e836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	2202      	movs	r2, #2
 800e83e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e850:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e858:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68ba      	ldr	r2, [r7, #8]
 800e860:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e86a:	d03e      	beq.n	800e8ea <HAL_TIM_ConfigClockSource+0xd4>
 800e86c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e870:	f200 8087 	bhi.w	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e878:	f000 8086 	beq.w	800e988 <HAL_TIM_ConfigClockSource+0x172>
 800e87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e880:	d87f      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e882:	2b70      	cmp	r3, #112	; 0x70
 800e884:	d01a      	beq.n	800e8bc <HAL_TIM_ConfigClockSource+0xa6>
 800e886:	2b70      	cmp	r3, #112	; 0x70
 800e888:	d87b      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e88a:	2b60      	cmp	r3, #96	; 0x60
 800e88c:	d050      	beq.n	800e930 <HAL_TIM_ConfigClockSource+0x11a>
 800e88e:	2b60      	cmp	r3, #96	; 0x60
 800e890:	d877      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e892:	2b50      	cmp	r3, #80	; 0x50
 800e894:	d03c      	beq.n	800e910 <HAL_TIM_ConfigClockSource+0xfa>
 800e896:	2b50      	cmp	r3, #80	; 0x50
 800e898:	d873      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e89a:	2b40      	cmp	r3, #64	; 0x40
 800e89c:	d058      	beq.n	800e950 <HAL_TIM_ConfigClockSource+0x13a>
 800e89e:	2b40      	cmp	r3, #64	; 0x40
 800e8a0:	d86f      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e8a2:	2b30      	cmp	r3, #48	; 0x30
 800e8a4:	d064      	beq.n	800e970 <HAL_TIM_ConfigClockSource+0x15a>
 800e8a6:	2b30      	cmp	r3, #48	; 0x30
 800e8a8:	d86b      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e8aa:	2b20      	cmp	r3, #32
 800e8ac:	d060      	beq.n	800e970 <HAL_TIM_ConfigClockSource+0x15a>
 800e8ae:	2b20      	cmp	r3, #32
 800e8b0:	d867      	bhi.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d05c      	beq.n	800e970 <HAL_TIM_ConfigClockSource+0x15a>
 800e8b6:	2b10      	cmp	r3, #16
 800e8b8:	d05a      	beq.n	800e970 <HAL_TIM_ConfigClockSource+0x15a>
 800e8ba:	e062      	b.n	800e982 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	683b      	ldr	r3, [r7, #0]
 800e8c2:	6899      	ldr	r1, [r3, #8]
 800e8c4:	683b      	ldr	r3, [r7, #0]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	f000 f9ac 	bl	800ec28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	689b      	ldr	r3, [r3, #8]
 800e8d6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e8d8:	68bb      	ldr	r3, [r7, #8]
 800e8da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e8de:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	609a      	str	r2, [r3, #8]
      break;
 800e8e8:	e04f      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6818      	ldr	r0, [r3, #0]
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	6899      	ldr	r1, [r3, #8]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	685a      	ldr	r2, [r3, #4]
 800e8f6:	683b      	ldr	r3, [r7, #0]
 800e8f8:	68db      	ldr	r3, [r3, #12]
 800e8fa:	f000 f995 	bl	800ec28 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	689a      	ldr	r2, [r3, #8]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e90c:	609a      	str	r2, [r3, #8]
      break;
 800e90e:	e03c      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	6818      	ldr	r0, [r3, #0]
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	6859      	ldr	r1, [r3, #4]
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	461a      	mov	r2, r3
 800e91e:	f000 f909 	bl	800eb34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2150      	movs	r1, #80	; 0x50
 800e928:	4618      	mov	r0, r3
 800e92a:	f000 f962 	bl	800ebf2 <TIM_ITRx_SetConfig>
      break;
 800e92e:	e02c      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6818      	ldr	r0, [r3, #0]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	6859      	ldr	r1, [r3, #4]
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	68db      	ldr	r3, [r3, #12]
 800e93c:	461a      	mov	r2, r3
 800e93e:	f000 f928 	bl	800eb92 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	2160      	movs	r1, #96	; 0x60
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 f952 	bl	800ebf2 <TIM_ITRx_SetConfig>
      break;
 800e94e:	e01c      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	6859      	ldr	r1, [r3, #4]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	68db      	ldr	r3, [r3, #12]
 800e95c:	461a      	mov	r2, r3
 800e95e:	f000 f8e9 	bl	800eb34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	2140      	movs	r1, #64	; 0x40
 800e968:	4618      	mov	r0, r3
 800e96a:	f000 f942 	bl	800ebf2 <TIM_ITRx_SetConfig>
      break;
 800e96e:	e00c      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4619      	mov	r1, r3
 800e97a:	4610      	mov	r0, r2
 800e97c:	f000 f939 	bl	800ebf2 <TIM_ITRx_SetConfig>
      break;
 800e980:	e003      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e982:	2301      	movs	r3, #1
 800e984:	73fb      	strb	r3, [r7, #15]
      break;
 800e986:	e000      	b.n	800e98a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e988:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	2201      	movs	r2, #1
 800e98e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2200      	movs	r2, #0
 800e996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b083      	sub	sp, #12
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e9ac:	bf00      	nop
 800e9ae:	370c      	adds	r7, #12
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr

0800e9b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e9b8:	b480      	push	{r7}
 800e9ba:	b083      	sub	sp, #12
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e9c0:	bf00      	nop
 800e9c2:	370c      	adds	r7, #12
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e9cc:	b480      	push	{r7}
 800e9ce:	b083      	sub	sp, #12
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e9d4:	bf00      	nop
 800e9d6:	370c      	adds	r7, #12
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9de:	4770      	bx	lr

0800e9e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	4a40      	ldr	r2, [pc, #256]	; (800eb08 <TIM_Base_SetConfig+0x114>)
 800ea08:	4293      	cmp	r3, r2
 800ea0a:	d013      	beq.n	800ea34 <TIM_Base_SetConfig+0x40>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea12:	d00f      	beq.n	800ea34 <TIM_Base_SetConfig+0x40>
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	4a3d      	ldr	r2, [pc, #244]	; (800eb0c <TIM_Base_SetConfig+0x118>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d00b      	beq.n	800ea34 <TIM_Base_SetConfig+0x40>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4a3c      	ldr	r2, [pc, #240]	; (800eb10 <TIM_Base_SetConfig+0x11c>)
 800ea20:	4293      	cmp	r3, r2
 800ea22:	d007      	beq.n	800ea34 <TIM_Base_SetConfig+0x40>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	4a3b      	ldr	r2, [pc, #236]	; (800eb14 <TIM_Base_SetConfig+0x120>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d003      	beq.n	800ea34 <TIM_Base_SetConfig+0x40>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	4a3a      	ldr	r2, [pc, #232]	; (800eb18 <TIM_Base_SetConfig+0x124>)
 800ea30:	4293      	cmp	r3, r2
 800ea32:	d108      	bne.n	800ea46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	4313      	orrs	r3, r2
 800ea44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	4a2f      	ldr	r2, [pc, #188]	; (800eb08 <TIM_Base_SetConfig+0x114>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d02b      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea54:	d027      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a2c      	ldr	r2, [pc, #176]	; (800eb0c <TIM_Base_SetConfig+0x118>)
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	d023      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4a2b      	ldr	r2, [pc, #172]	; (800eb10 <TIM_Base_SetConfig+0x11c>)
 800ea62:	4293      	cmp	r3, r2
 800ea64:	d01f      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	4a2a      	ldr	r2, [pc, #168]	; (800eb14 <TIM_Base_SetConfig+0x120>)
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d01b      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	4a29      	ldr	r2, [pc, #164]	; (800eb18 <TIM_Base_SetConfig+0x124>)
 800ea72:	4293      	cmp	r3, r2
 800ea74:	d017      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	4a28      	ldr	r2, [pc, #160]	; (800eb1c <TIM_Base_SetConfig+0x128>)
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d013      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	4a27      	ldr	r2, [pc, #156]	; (800eb20 <TIM_Base_SetConfig+0x12c>)
 800ea82:	4293      	cmp	r3, r2
 800ea84:	d00f      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	4a26      	ldr	r2, [pc, #152]	; (800eb24 <TIM_Base_SetConfig+0x130>)
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	d00b      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	4a25      	ldr	r2, [pc, #148]	; (800eb28 <TIM_Base_SetConfig+0x134>)
 800ea92:	4293      	cmp	r3, r2
 800ea94:	d007      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	4a24      	ldr	r2, [pc, #144]	; (800eb2c <TIM_Base_SetConfig+0x138>)
 800ea9a:	4293      	cmp	r3, r2
 800ea9c:	d003      	beq.n	800eaa6 <TIM_Base_SetConfig+0xb2>
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	4a23      	ldr	r2, [pc, #140]	; (800eb30 <TIM_Base_SetConfig+0x13c>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d108      	bne.n	800eab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	4313      	orrs	r3, r2
 800eab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	695b      	ldr	r3, [r3, #20]
 800eac2:	4313      	orrs	r3, r2
 800eac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	68fa      	ldr	r2, [r7, #12]
 800eaca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	689a      	ldr	r2, [r3, #8]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	4a0a      	ldr	r2, [pc, #40]	; (800eb08 <TIM_Base_SetConfig+0x114>)
 800eae0:	4293      	cmp	r3, r2
 800eae2:	d003      	beq.n	800eaec <TIM_Base_SetConfig+0xf8>
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	4a0c      	ldr	r2, [pc, #48]	; (800eb18 <TIM_Base_SetConfig+0x124>)
 800eae8:	4293      	cmp	r3, r2
 800eaea:	d103      	bne.n	800eaf4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	691a      	ldr	r2, [r3, #16]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	615a      	str	r2, [r3, #20]
}
 800eafa:	bf00      	nop
 800eafc:	3714      	adds	r7, #20
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	40010000 	.word	0x40010000
 800eb0c:	40000400 	.word	0x40000400
 800eb10:	40000800 	.word	0x40000800
 800eb14:	40000c00 	.word	0x40000c00
 800eb18:	40010400 	.word	0x40010400
 800eb1c:	40014000 	.word	0x40014000
 800eb20:	40014400 	.word	0x40014400
 800eb24:	40014800 	.word	0x40014800
 800eb28:	40001800 	.word	0x40001800
 800eb2c:	40001c00 	.word	0x40001c00
 800eb30:	40002000 	.word	0x40002000

0800eb34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b087      	sub	sp, #28
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	6a1b      	ldr	r3, [r3, #32]
 800eb44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	f023 0201 	bic.w	r2, r3, #1
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	699b      	ldr	r3, [r3, #24]
 800eb56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800eb5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	011b      	lsls	r3, r3, #4
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	4313      	orrs	r3, r2
 800eb68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	f023 030a 	bic.w	r3, r3, #10
 800eb70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800eb72:	697a      	ldr	r2, [r7, #20]
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	693a      	ldr	r2, [r7, #16]
 800eb7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	697a      	ldr	r2, [r7, #20]
 800eb84:	621a      	str	r2, [r3, #32]
}
 800eb86:	bf00      	nop
 800eb88:	371c      	adds	r7, #28
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800eb92:	b480      	push	{r7}
 800eb94:	b087      	sub	sp, #28
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	60f8      	str	r0, [r7, #12]
 800eb9a:	60b9      	str	r1, [r7, #8]
 800eb9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	6a1b      	ldr	r3, [r3, #32]
 800eba2:	f023 0210 	bic.w	r2, r3, #16
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	699b      	ldr	r3, [r3, #24]
 800ebae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6a1b      	ldr	r3, [r3, #32]
 800ebb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ebb6:	697b      	ldr	r3, [r7, #20]
 800ebb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ebbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	031b      	lsls	r3, r3, #12
 800ebc2:	697a      	ldr	r2, [r7, #20]
 800ebc4:	4313      	orrs	r3, r2
 800ebc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ebc8:	693b      	ldr	r3, [r7, #16]
 800ebca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ebce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	011b      	lsls	r3, r3, #4
 800ebd4:	693a      	ldr	r2, [r7, #16]
 800ebd6:	4313      	orrs	r3, r2
 800ebd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	697a      	ldr	r2, [r7, #20]
 800ebde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	693a      	ldr	r2, [r7, #16]
 800ebe4:	621a      	str	r2, [r3, #32]
}
 800ebe6:	bf00      	nop
 800ebe8:	371c      	adds	r7, #28
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr

0800ebf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ebf2:	b480      	push	{r7}
 800ebf4:	b085      	sub	sp, #20
 800ebf6:	af00      	add	r7, sp, #0
 800ebf8:	6078      	str	r0, [r7, #4]
 800ebfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689b      	ldr	r3, [r3, #8]
 800ec00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ec0a:	683a      	ldr	r2, [r7, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	4313      	orrs	r3, r2
 800ec10:	f043 0307 	orr.w	r3, r3, #7
 800ec14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	68fa      	ldr	r2, [r7, #12]
 800ec1a:	609a      	str	r2, [r3, #8]
}
 800ec1c:	bf00      	nop
 800ec1e:	3714      	adds	r7, #20
 800ec20:	46bd      	mov	sp, r7
 800ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec26:	4770      	bx	lr

0800ec28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ec28:	b480      	push	{r7}
 800ec2a:	b087      	sub	sp, #28
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	60f8      	str	r0, [r7, #12]
 800ec30:	60b9      	str	r1, [r7, #8]
 800ec32:	607a      	str	r2, [r7, #4]
 800ec34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	689b      	ldr	r3, [r3, #8]
 800ec3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ec42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	021a      	lsls	r2, r3, #8
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	431a      	orrs	r2, r3
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	697a      	ldr	r2, [r7, #20]
 800ec52:	4313      	orrs	r3, r2
 800ec54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	697a      	ldr	r2, [r7, #20]
 800ec5a:	609a      	str	r2, [r3, #8]
}
 800ec5c:	bf00      	nop
 800ec5e:	371c      	adds	r7, #28
 800ec60:	46bd      	mov	sp, r7
 800ec62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec66:	4770      	bx	lr

0800ec68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec78:	2b01      	cmp	r3, #1
 800ec7a:	d101      	bne.n	800ec80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ec7c:	2302      	movs	r3, #2
 800ec7e:	e05a      	b.n	800ed36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	2201      	movs	r2, #1
 800ec84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	2202      	movs	r2, #2
 800ec8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	689b      	ldr	r3, [r3, #8]
 800ec9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eca6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	4313      	orrs	r3, r2
 800ecb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	4a21      	ldr	r2, [pc, #132]	; (800ed44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	d022      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eccc:	d01d      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	4a1d      	ldr	r2, [pc, #116]	; (800ed48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d018      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	4a1b      	ldr	r2, [pc, #108]	; (800ed4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ecde:	4293      	cmp	r3, r2
 800ece0:	d013      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	4a1a      	ldr	r2, [pc, #104]	; (800ed50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d00e      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4a18      	ldr	r2, [pc, #96]	; (800ed54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d009      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	4a17      	ldr	r2, [pc, #92]	; (800ed58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d004      	beq.n	800ed0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a15      	ldr	r2, [pc, #84]	; (800ed5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d10c      	bne.n	800ed24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ed10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	68ba      	ldr	r2, [r7, #8]
 800ed18:	4313      	orrs	r3, r2
 800ed1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	68ba      	ldr	r2, [r7, #8]
 800ed22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ed34:	2300      	movs	r3, #0
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3714      	adds	r7, #20
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr
 800ed42:	bf00      	nop
 800ed44:	40010000 	.word	0x40010000
 800ed48:	40000400 	.word	0x40000400
 800ed4c:	40000800 	.word	0x40000800
 800ed50:	40000c00 	.word	0x40000c00
 800ed54:	40010400 	.word	0x40010400
 800ed58:	40014000 	.word	0x40014000
 800ed5c:	40001800 	.word	0x40001800

0800ed60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ed60:	b480      	push	{r7}
 800ed62:	b083      	sub	sp, #12
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ed68:	bf00      	nop
 800ed6a:	370c      	adds	r7, #12
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed72:	4770      	bx	lr

0800ed74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b083      	sub	sp, #12
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed7c:	bf00      	nop
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ed88:	b084      	sub	sp, #16
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b084      	sub	sp, #16
 800ed8e:	af00      	add	r7, sp, #0
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	f107 001c 	add.w	r0, r7, #28
 800ed96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ed9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d122      	bne.n	800ede6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eda4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800edb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	68db      	ldr	r3, [r3, #12]
 800edc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800edc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d105      	bne.n	800edda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f001 fb1c 	bl	8010418 <USB_CoreReset>
 800ede0:	4603      	mov	r3, r0
 800ede2:	73fb      	strb	r3, [r7, #15]
 800ede4:	e01a      	b.n	800ee1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	68db      	ldr	r3, [r3, #12]
 800edea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f001 fb10 	bl	8010418 <USB_CoreReset>
 800edf8:	4603      	mov	r3, r0
 800edfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800edfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d106      	bne.n	800ee10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	639a      	str	r2, [r3, #56]	; 0x38
 800ee0e:	e005      	b.n	800ee1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	2b01      	cmp	r3, #1
 800ee20:	d10b      	bne.n	800ee3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	689b      	ldr	r3, [r3, #8]
 800ee26:	f043 0206 	orr.w	r2, r3, #6
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	f043 0220 	orr.w	r2, r3, #32
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ee3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3710      	adds	r7, #16
 800ee40:	46bd      	mov	sp, r7
 800ee42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee46:	b004      	add	sp, #16
 800ee48:	4770      	bx	lr
	...

0800ee4c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ee4c:	b480      	push	{r7}
 800ee4e:	b087      	sub	sp, #28
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	60b9      	str	r1, [r7, #8]
 800ee56:	4613      	mov	r3, r2
 800ee58:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ee5a:	79fb      	ldrb	r3, [r7, #7]
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d165      	bne.n	800ef2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	4a41      	ldr	r2, [pc, #260]	; (800ef68 <USB_SetTurnaroundTime+0x11c>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d906      	bls.n	800ee76 <USB_SetTurnaroundTime+0x2a>
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	4a40      	ldr	r2, [pc, #256]	; (800ef6c <USB_SetTurnaroundTime+0x120>)
 800ee6c:	4293      	cmp	r3, r2
 800ee6e:	d202      	bcs.n	800ee76 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ee70:	230f      	movs	r3, #15
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	e062      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	4a3c      	ldr	r2, [pc, #240]	; (800ef6c <USB_SetTurnaroundTime+0x120>)
 800ee7a:	4293      	cmp	r3, r2
 800ee7c:	d306      	bcc.n	800ee8c <USB_SetTurnaroundTime+0x40>
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	4a3b      	ldr	r2, [pc, #236]	; (800ef70 <USB_SetTurnaroundTime+0x124>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d202      	bcs.n	800ee8c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ee86:	230e      	movs	r3, #14
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	e057      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	4a38      	ldr	r2, [pc, #224]	; (800ef70 <USB_SetTurnaroundTime+0x124>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d306      	bcc.n	800eea2 <USB_SetTurnaroundTime+0x56>
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	4a37      	ldr	r2, [pc, #220]	; (800ef74 <USB_SetTurnaroundTime+0x128>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d202      	bcs.n	800eea2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ee9c:	230d      	movs	r3, #13
 800ee9e:	617b      	str	r3, [r7, #20]
 800eea0:	e04c      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	4a33      	ldr	r2, [pc, #204]	; (800ef74 <USB_SetTurnaroundTime+0x128>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d306      	bcc.n	800eeb8 <USB_SetTurnaroundTime+0x6c>
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	4a32      	ldr	r2, [pc, #200]	; (800ef78 <USB_SetTurnaroundTime+0x12c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d802      	bhi.n	800eeb8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800eeb2:	230c      	movs	r3, #12
 800eeb4:	617b      	str	r3, [r7, #20]
 800eeb6:	e041      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	4a2f      	ldr	r2, [pc, #188]	; (800ef78 <USB_SetTurnaroundTime+0x12c>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d906      	bls.n	800eece <USB_SetTurnaroundTime+0x82>
 800eec0:	68bb      	ldr	r3, [r7, #8]
 800eec2:	4a2e      	ldr	r2, [pc, #184]	; (800ef7c <USB_SetTurnaroundTime+0x130>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d802      	bhi.n	800eece <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800eec8:	230b      	movs	r3, #11
 800eeca:	617b      	str	r3, [r7, #20]
 800eecc:	e036      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	4a2a      	ldr	r2, [pc, #168]	; (800ef7c <USB_SetTurnaroundTime+0x130>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d906      	bls.n	800eee4 <USB_SetTurnaroundTime+0x98>
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	4a29      	ldr	r2, [pc, #164]	; (800ef80 <USB_SetTurnaroundTime+0x134>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d802      	bhi.n	800eee4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800eede:	230a      	movs	r3, #10
 800eee0:	617b      	str	r3, [r7, #20]
 800eee2:	e02b      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800eee4:	68bb      	ldr	r3, [r7, #8]
 800eee6:	4a26      	ldr	r2, [pc, #152]	; (800ef80 <USB_SetTurnaroundTime+0x134>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d906      	bls.n	800eefa <USB_SetTurnaroundTime+0xae>
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	4a25      	ldr	r2, [pc, #148]	; (800ef84 <USB_SetTurnaroundTime+0x138>)
 800eef0:	4293      	cmp	r3, r2
 800eef2:	d202      	bcs.n	800eefa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800eef4:	2309      	movs	r3, #9
 800eef6:	617b      	str	r3, [r7, #20]
 800eef8:	e020      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800eefa:	68bb      	ldr	r3, [r7, #8]
 800eefc:	4a21      	ldr	r2, [pc, #132]	; (800ef84 <USB_SetTurnaroundTime+0x138>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d306      	bcc.n	800ef10 <USB_SetTurnaroundTime+0xc4>
 800ef02:	68bb      	ldr	r3, [r7, #8]
 800ef04:	4a20      	ldr	r2, [pc, #128]	; (800ef88 <USB_SetTurnaroundTime+0x13c>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d802      	bhi.n	800ef10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ef0a:	2308      	movs	r3, #8
 800ef0c:	617b      	str	r3, [r7, #20]
 800ef0e:	e015      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	4a1d      	ldr	r2, [pc, #116]	; (800ef88 <USB_SetTurnaroundTime+0x13c>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d906      	bls.n	800ef26 <USB_SetTurnaroundTime+0xda>
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	4a1c      	ldr	r2, [pc, #112]	; (800ef8c <USB_SetTurnaroundTime+0x140>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d202      	bcs.n	800ef26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ef20:	2307      	movs	r3, #7
 800ef22:	617b      	str	r3, [r7, #20]
 800ef24:	e00a      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ef26:	2306      	movs	r3, #6
 800ef28:	617b      	str	r3, [r7, #20]
 800ef2a:	e007      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ef2c:	79fb      	ldrb	r3, [r7, #7]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d102      	bne.n	800ef38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ef32:	2309      	movs	r3, #9
 800ef34:	617b      	str	r3, [r7, #20]
 800ef36:	e001      	b.n	800ef3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ef38:	2309      	movs	r3, #9
 800ef3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	68da      	ldr	r2, [r3, #12]
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	029b      	lsls	r3, r3, #10
 800ef50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ef54:	431a      	orrs	r2, r3
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ef5a:	2300      	movs	r3, #0
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	371c      	adds	r7, #28
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	00d8acbf 	.word	0x00d8acbf
 800ef6c:	00e4e1c0 	.word	0x00e4e1c0
 800ef70:	00f42400 	.word	0x00f42400
 800ef74:	01067380 	.word	0x01067380
 800ef78:	011a499f 	.word	0x011a499f
 800ef7c:	01312cff 	.word	0x01312cff
 800ef80:	014ca43f 	.word	0x014ca43f
 800ef84:	016e3600 	.word	0x016e3600
 800ef88:	01a6ab1f 	.word	0x01a6ab1f
 800ef8c:	01e84800 	.word	0x01e84800

0800ef90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	f043 0201 	orr.w	r2, r3, #1
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800efa4:	2300      	movs	r3, #0
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	f023 0201 	bic.w	r2, r3, #1
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	460b      	mov	r3, r1
 800efde:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800efe0:	2300      	movs	r3, #0
 800efe2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eff0:	78fb      	ldrb	r3, [r7, #3]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d115      	bne.n	800f022 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f002:	2001      	movs	r0, #1
 800f004:	f7f8 ff08 	bl	8007e18 <HAL_Delay>
      ms++;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	3301      	adds	r3, #1
 800f00c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f001 f972 	bl	80102f8 <USB_GetMode>
 800f014:	4603      	mov	r3, r0
 800f016:	2b01      	cmp	r3, #1
 800f018:	d01e      	beq.n	800f058 <USB_SetCurrentMode+0x84>
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	2b31      	cmp	r3, #49	; 0x31
 800f01e:	d9f0      	bls.n	800f002 <USB_SetCurrentMode+0x2e>
 800f020:	e01a      	b.n	800f058 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f022:	78fb      	ldrb	r3, [r7, #3]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d115      	bne.n	800f054 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	68db      	ldr	r3, [r3, #12]
 800f02c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f034:	2001      	movs	r0, #1
 800f036:	f7f8 feef 	bl	8007e18 <HAL_Delay>
      ms++;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3301      	adds	r3, #1
 800f03e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f001 f959 	bl	80102f8 <USB_GetMode>
 800f046:	4603      	mov	r3, r0
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d005      	beq.n	800f058 <USB_SetCurrentMode+0x84>
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2b31      	cmp	r3, #49	; 0x31
 800f050:	d9f0      	bls.n	800f034 <USB_SetCurrentMode+0x60>
 800f052:	e001      	b.n	800f058 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f054:	2301      	movs	r3, #1
 800f056:	e005      	b.n	800f064 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2b32      	cmp	r3, #50	; 0x32
 800f05c:	d101      	bne.n	800f062 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f05e:	2301      	movs	r3, #1
 800f060:	e000      	b.n	800f064 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f062:	2300      	movs	r3, #0
}
 800f064:	4618      	mov	r0, r3
 800f066:	3710      	adds	r7, #16
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f06c:	b084      	sub	sp, #16
 800f06e:	b580      	push	{r7, lr}
 800f070:	b086      	sub	sp, #24
 800f072:	af00      	add	r7, sp, #0
 800f074:	6078      	str	r0, [r7, #4]
 800f076:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f07a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f086:	2300      	movs	r3, #0
 800f088:	613b      	str	r3, [r7, #16]
 800f08a:	e009      	b.n	800f0a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f08c:	687a      	ldr	r2, [r7, #4]
 800f08e:	693b      	ldr	r3, [r7, #16]
 800f090:	3340      	adds	r3, #64	; 0x40
 800f092:	009b      	lsls	r3, r3, #2
 800f094:	4413      	add	r3, r2
 800f096:	2200      	movs	r2, #0
 800f098:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	3301      	adds	r3, #1
 800f09e:	613b      	str	r3, [r7, #16]
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	2b0e      	cmp	r3, #14
 800f0a4:	d9f2      	bls.n	800f08c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f0a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d11c      	bne.n	800f0e6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f0ba:	f043 0302 	orr.w	r3, r3, #2
 800f0be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	639a      	str	r2, [r3, #56]	; 0x38
 800f0e4:	e00b      	b.n	800f0fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f104:	461a      	mov	r2, r3
 800f106:	2300      	movs	r3, #0
 800f108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f110:	4619      	mov	r1, r3
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f118:	461a      	mov	r2, r3
 800f11a:	680b      	ldr	r3, [r1, #0]
 800f11c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f120:	2b01      	cmp	r3, #1
 800f122:	d10c      	bne.n	800f13e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f126:	2b00      	cmp	r3, #0
 800f128:	d104      	bne.n	800f134 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f12a:	2100      	movs	r1, #0
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f000 f945 	bl	800f3bc <USB_SetDevSpeed>
 800f132:	e008      	b.n	800f146 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f134:	2101      	movs	r1, #1
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 f940 	bl	800f3bc <USB_SetDevSpeed>
 800f13c:	e003      	b.n	800f146 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f13e:	2103      	movs	r1, #3
 800f140:	6878      	ldr	r0, [r7, #4]
 800f142:	f000 f93b 	bl	800f3bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f146:	2110      	movs	r1, #16
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	f000 f8f3 	bl	800f334 <USB_FlushTxFifo>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d001      	beq.n	800f158 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800f154:	2301      	movs	r3, #1
 800f156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	f000 f90f 	bl	800f37c <USB_FlushRxFifo>
 800f15e:	4603      	mov	r3, r0
 800f160:	2b00      	cmp	r3, #0
 800f162:	d001      	beq.n	800f168 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800f164:	2301      	movs	r3, #1
 800f166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f16e:	461a      	mov	r2, r3
 800f170:	2300      	movs	r3, #0
 800f172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f17a:	461a      	mov	r2, r3
 800f17c:	2300      	movs	r3, #0
 800f17e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f186:	461a      	mov	r2, r3
 800f188:	2300      	movs	r3, #0
 800f18a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f18c:	2300      	movs	r3, #0
 800f18e:	613b      	str	r3, [r7, #16]
 800f190:	e043      	b.n	800f21a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f192:	693b      	ldr	r3, [r7, #16]
 800f194:	015a      	lsls	r2, r3, #5
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	4413      	add	r3, r2
 800f19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f1a8:	d118      	bne.n	800f1dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d10a      	bne.n	800f1c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	015a      	lsls	r2, r3, #5
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	4413      	add	r3, r2
 800f1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1bc:	461a      	mov	r2, r3
 800f1be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f1c2:	6013      	str	r3, [r2, #0]
 800f1c4:	e013      	b.n	800f1ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	015a      	lsls	r2, r3, #5
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	4413      	add	r3, r2
 800f1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f1d8:	6013      	str	r3, [r2, #0]
 800f1da:	e008      	b.n	800f1ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	015a      	lsls	r2, r3, #5
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	4413      	add	r3, r2
 800f1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	2300      	movs	r3, #0
 800f1ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f1ee:	693b      	ldr	r3, [r7, #16]
 800f1f0:	015a      	lsls	r2, r3, #5
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	4413      	add	r3, r2
 800f1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1fa:	461a      	mov	r2, r3
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f200:	693b      	ldr	r3, [r7, #16]
 800f202:	015a      	lsls	r2, r3, #5
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	4413      	add	r3, r2
 800f208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f20c:	461a      	mov	r2, r3
 800f20e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	3301      	adds	r3, #1
 800f218:	613b      	str	r3, [r7, #16]
 800f21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f21c:	693a      	ldr	r2, [r7, #16]
 800f21e:	429a      	cmp	r2, r3
 800f220:	d3b7      	bcc.n	800f192 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f222:	2300      	movs	r3, #0
 800f224:	613b      	str	r3, [r7, #16]
 800f226:	e043      	b.n	800f2b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f228:	693b      	ldr	r3, [r7, #16]
 800f22a:	015a      	lsls	r2, r3, #5
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	4413      	add	r3, r2
 800f230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f23a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f23e:	d118      	bne.n	800f272 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800f240:	693b      	ldr	r3, [r7, #16]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10a      	bne.n	800f25c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f252:	461a      	mov	r2, r3
 800f254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f258:	6013      	str	r3, [r2, #0]
 800f25a:	e013      	b.n	800f284 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	015a      	lsls	r2, r3, #5
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	4413      	add	r3, r2
 800f264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f268:	461a      	mov	r2, r3
 800f26a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f26e:	6013      	str	r3, [r2, #0]
 800f270:	e008      	b.n	800f284 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	015a      	lsls	r2, r3, #5
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	4413      	add	r3, r2
 800f27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f27e:	461a      	mov	r2, r3
 800f280:	2300      	movs	r3, #0
 800f282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f284:	693b      	ldr	r3, [r7, #16]
 800f286:	015a      	lsls	r2, r3, #5
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	4413      	add	r3, r2
 800f28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f290:	461a      	mov	r2, r3
 800f292:	2300      	movs	r3, #0
 800f294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f296:	693b      	ldr	r3, [r7, #16]
 800f298:	015a      	lsls	r2, r3, #5
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	4413      	add	r3, r2
 800f29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f2a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	3301      	adds	r3, #1
 800f2ae:	613b      	str	r3, [r7, #16]
 800f2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2b2:	693a      	ldr	r2, [r7, #16]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d3b7      	bcc.n	800f228 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2be:	691b      	ldr	r3, [r3, #16]
 800f2c0:	68fa      	ldr	r2, [r7, #12]
 800f2c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f2d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d105      	bne.n	800f2ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	699b      	ldr	r3, [r3, #24]
 800f2e4:	f043 0210 	orr.w	r2, r3, #16
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	699a      	ldr	r2, [r3, #24]
 800f2f0:	4b0f      	ldr	r3, [pc, #60]	; (800f330 <USB_DevInit+0x2c4>)
 800f2f2:	4313      	orrs	r3, r2
 800f2f4:	687a      	ldr	r2, [r7, #4]
 800f2f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d005      	beq.n	800f30a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	699b      	ldr	r3, [r3, #24]
 800f302:	f043 0208 	orr.w	r2, r3, #8
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f30c:	2b01      	cmp	r3, #1
 800f30e:	d107      	bne.n	800f320 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	699b      	ldr	r3, [r3, #24]
 800f314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f318:	f043 0304 	orr.w	r3, r3, #4
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f320:	7dfb      	ldrb	r3, [r7, #23]
}
 800f322:	4618      	mov	r0, r3
 800f324:	3718      	adds	r7, #24
 800f326:	46bd      	mov	sp, r7
 800f328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f32c:	b004      	add	sp, #16
 800f32e:	4770      	bx	lr
 800f330:	803c3800 	.word	0x803c3800

0800f334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f334:	b480      	push	{r7}
 800f336:	b085      	sub	sp, #20
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f33e:	2300      	movs	r3, #0
 800f340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	019b      	lsls	r3, r3, #6
 800f346:	f043 0220 	orr.w	r2, r3, #32
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	3301      	adds	r3, #1
 800f352:	60fb      	str	r3, [r7, #12]
 800f354:	4a08      	ldr	r2, [pc, #32]	; (800f378 <USB_FlushTxFifo+0x44>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d901      	bls.n	800f35e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f35a:	2303      	movs	r3, #3
 800f35c:	e006      	b.n	800f36c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	f003 0320 	and.w	r3, r3, #32
 800f366:	2b20      	cmp	r3, #32
 800f368:	d0f1      	beq.n	800f34e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3714      	adds	r7, #20
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	00030d40 	.word	0x00030d40

0800f37c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f384:	2300      	movs	r3, #0
 800f386:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	2210      	movs	r2, #16
 800f38c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3301      	adds	r3, #1
 800f392:	60fb      	str	r3, [r7, #12]
 800f394:	4a08      	ldr	r2, [pc, #32]	; (800f3b8 <USB_FlushRxFifo+0x3c>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d901      	bls.n	800f39e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f39a:	2303      	movs	r3, #3
 800f39c:	e006      	b.n	800f3ac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	691b      	ldr	r3, [r3, #16]
 800f3a2:	f003 0310 	and.w	r3, r3, #16
 800f3a6:	2b10      	cmp	r3, #16
 800f3a8:	d0f1      	beq.n	800f38e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f3aa:	2300      	movs	r3, #0
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3714      	adds	r7, #20
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr
 800f3b8:	00030d40 	.word	0x00030d40

0800f3bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f3bc:	b480      	push	{r7}
 800f3be:	b085      	sub	sp, #20
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	78fb      	ldrb	r3, [r7, #3]
 800f3d6:	68f9      	ldr	r1, [r7, #12]
 800f3d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f3dc:	4313      	orrs	r3, r2
 800f3de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr

0800f3ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f3ee:	b480      	push	{r7}
 800f3f0:	b087      	sub	sp, #28
 800f3f2:	af00      	add	r7, sp, #0
 800f3f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f400:	689b      	ldr	r3, [r3, #8]
 800f402:	f003 0306 	and.w	r3, r3, #6
 800f406:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d102      	bne.n	800f414 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f40e:	2300      	movs	r3, #0
 800f410:	75fb      	strb	r3, [r7, #23]
 800f412:	e00a      	b.n	800f42a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	2b02      	cmp	r3, #2
 800f418:	d002      	beq.n	800f420 <USB_GetDevSpeed+0x32>
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2b06      	cmp	r3, #6
 800f41e:	d102      	bne.n	800f426 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f420:	2302      	movs	r3, #2
 800f422:	75fb      	strb	r3, [r7, #23]
 800f424:	e001      	b.n	800f42a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f426:	230f      	movs	r3, #15
 800f428:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	371c      	adds	r7, #28
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	781b      	ldrb	r3, [r3, #0]
 800f44a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	785b      	ldrb	r3, [r3, #1]
 800f450:	2b01      	cmp	r3, #1
 800f452:	d13a      	bne.n	800f4ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f45a:	69da      	ldr	r2, [r3, #28]
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	f003 030f 	and.w	r3, r3, #15
 800f464:	2101      	movs	r1, #1
 800f466:	fa01 f303 	lsl.w	r3, r1, r3
 800f46a:	b29b      	uxth	r3, r3
 800f46c:	68f9      	ldr	r1, [r7, #12]
 800f46e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f472:	4313      	orrs	r3, r2
 800f474:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	015a      	lsls	r2, r3, #5
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	4413      	add	r3, r2
 800f47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d155      	bne.n	800f538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	015a      	lsls	r2, r3, #5
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	4413      	add	r3, r2
 800f494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f498:	681a      	ldr	r2, [r3, #0]
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	78db      	ldrb	r3, [r3, #3]
 800f4a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	059b      	lsls	r3, r3, #22
 800f4ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	0151      	lsls	r1, r2, #5
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	440a      	add	r2, r1
 800f4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f4c6:	6013      	str	r3, [r2, #0]
 800f4c8:	e036      	b.n	800f538 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4d0:	69da      	ldr	r2, [r3, #28]
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	f003 030f 	and.w	r3, r3, #15
 800f4da:	2101      	movs	r1, #1
 800f4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800f4e0:	041b      	lsls	r3, r3, #16
 800f4e2:	68f9      	ldr	r1, [r7, #12]
 800f4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4e8:	4313      	orrs	r3, r2
 800f4ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	015a      	lsls	r2, r3, #5
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	4413      	add	r3, r2
 800f4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d11a      	bne.n	800f538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	015a      	lsls	r2, r3, #5
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	4413      	add	r3, r2
 800f50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	78db      	ldrb	r3, [r3, #3]
 800f51c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f51e:	430b      	orrs	r3, r1
 800f520:	4313      	orrs	r3, r2
 800f522:	68ba      	ldr	r2, [r7, #8]
 800f524:	0151      	lsls	r1, r2, #5
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	440a      	add	r2, r1
 800f52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f536:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f538:	2300      	movs	r3, #0
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3714      	adds	r7, #20
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr
	...

0800f548 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
 800f550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	785b      	ldrb	r3, [r3, #1]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d161      	bne.n	800f628 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f564:	68bb      	ldr	r3, [r7, #8]
 800f566:	015a      	lsls	r2, r3, #5
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	4413      	add	r3, r2
 800f56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f57a:	d11f      	bne.n	800f5bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	015a      	lsls	r2, r3, #5
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	4413      	add	r3, r2
 800f584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	0151      	lsls	r1, r2, #5
 800f58e:	68fa      	ldr	r2, [r7, #12]
 800f590:	440a      	add	r2, r1
 800f592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f59a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f59c:	68bb      	ldr	r3, [r7, #8]
 800f59e:	015a      	lsls	r2, r3, #5
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	4413      	add	r3, r2
 800f5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68ba      	ldr	r2, [r7, #8]
 800f5ac:	0151      	lsls	r1, r2, #5
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	440a      	add	r2, r1
 800f5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f5b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f5ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	f003 030f 	and.w	r3, r3, #15
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d2:	b29b      	uxth	r3, r3
 800f5d4:	43db      	mvns	r3, r3
 800f5d6:	68f9      	ldr	r1, [r7, #12]
 800f5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5dc:	4013      	ands	r3, r2
 800f5de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5e6:	69da      	ldr	r2, [r3, #28]
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	f003 030f 	and.w	r3, r3, #15
 800f5f0:	2101      	movs	r1, #1
 800f5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	43db      	mvns	r3, r3
 800f5fa:	68f9      	ldr	r1, [r7, #12]
 800f5fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f600:	4013      	ands	r3, r2
 800f602:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	015a      	lsls	r2, r3, #5
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	4413      	add	r3, r2
 800f60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	0159      	lsls	r1, r3, #5
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	440b      	add	r3, r1
 800f61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f61e:	4619      	mov	r1, r3
 800f620:	4b35      	ldr	r3, [pc, #212]	; (800f6f8 <USB_DeactivateEndpoint+0x1b0>)
 800f622:	4013      	ands	r3, r2
 800f624:	600b      	str	r3, [r1, #0]
 800f626:	e060      	b.n	800f6ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f628:	68bb      	ldr	r3, [r7, #8]
 800f62a:	015a      	lsls	r2, r3, #5
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	4413      	add	r3, r2
 800f630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f63a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f63e:	d11f      	bne.n	800f680 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f640:	68bb      	ldr	r3, [r7, #8]
 800f642:	015a      	lsls	r2, r3, #5
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	4413      	add	r3, r2
 800f648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	68ba      	ldr	r2, [r7, #8]
 800f650:	0151      	lsls	r1, r2, #5
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	440a      	add	r2, r1
 800f656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f65a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f65e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	015a      	lsls	r2, r3, #5
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	4413      	add	r3, r2
 800f668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	0151      	lsls	r1, r2, #5
 800f672:	68fa      	ldr	r2, [r7, #12]
 800f674:	440a      	add	r2, r1
 800f676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f67a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f67e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	781b      	ldrb	r3, [r3, #0]
 800f68c:	f003 030f 	and.w	r3, r3, #15
 800f690:	2101      	movs	r1, #1
 800f692:	fa01 f303 	lsl.w	r3, r1, r3
 800f696:	041b      	lsls	r3, r3, #16
 800f698:	43db      	mvns	r3, r3
 800f69a:	68f9      	ldr	r1, [r7, #12]
 800f69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6aa:	69da      	ldr	r2, [r3, #28]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	f003 030f 	and.w	r3, r3, #15
 800f6b4:	2101      	movs	r1, #1
 800f6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800f6ba:	041b      	lsls	r3, r3, #16
 800f6bc:	43db      	mvns	r3, r3
 800f6be:	68f9      	ldr	r1, [r7, #12]
 800f6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6c4:	4013      	ands	r3, r2
 800f6c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f6c8:	68bb      	ldr	r3, [r7, #8]
 800f6ca:	015a      	lsls	r2, r3, #5
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	4413      	add	r3, r2
 800f6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6d4:	681a      	ldr	r2, [r3, #0]
 800f6d6:	68bb      	ldr	r3, [r7, #8]
 800f6d8:	0159      	lsls	r1, r3, #5
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	440b      	add	r3, r1
 800f6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	4b05      	ldr	r3, [pc, #20]	; (800f6fc <USB_DeactivateEndpoint+0x1b4>)
 800f6e6:	4013      	ands	r3, r2
 800f6e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f6ea:	2300      	movs	r3, #0
}
 800f6ec:	4618      	mov	r0, r3
 800f6ee:	3714      	adds	r7, #20
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f6:	4770      	bx	lr
 800f6f8:	ec337800 	.word	0xec337800
 800f6fc:	eff37800 	.word	0xeff37800

0800f700 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08a      	sub	sp, #40	; 0x28
 800f704:	af02      	add	r7, sp, #8
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	4613      	mov	r3, r2
 800f70c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f712:	68bb      	ldr	r3, [r7, #8]
 800f714:	781b      	ldrb	r3, [r3, #0]
 800f716:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	785b      	ldrb	r3, [r3, #1]
 800f71c:	2b01      	cmp	r3, #1
 800f71e:	f040 815c 	bne.w	800f9da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f722:	68bb      	ldr	r3, [r7, #8]
 800f724:	695b      	ldr	r3, [r3, #20]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d132      	bne.n	800f790 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f72a:	69bb      	ldr	r3, [r7, #24]
 800f72c:	015a      	lsls	r2, r3, #5
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	4413      	add	r3, r2
 800f732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	69ba      	ldr	r2, [r7, #24]
 800f73a:	0151      	lsls	r1, r2, #5
 800f73c:	69fa      	ldr	r2, [r7, #28]
 800f73e:	440a      	add	r2, r1
 800f740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f74c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f74e:	69bb      	ldr	r3, [r7, #24]
 800f750:	015a      	lsls	r2, r3, #5
 800f752:	69fb      	ldr	r3, [r7, #28]
 800f754:	4413      	add	r3, r2
 800f756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f75a:	691b      	ldr	r3, [r3, #16]
 800f75c:	69ba      	ldr	r2, [r7, #24]
 800f75e:	0151      	lsls	r1, r2, #5
 800f760:	69fa      	ldr	r2, [r7, #28]
 800f762:	440a      	add	r2, r1
 800f764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	015a      	lsls	r2, r3, #5
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	4413      	add	r3, r2
 800f776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f77a:	691b      	ldr	r3, [r3, #16]
 800f77c:	69ba      	ldr	r2, [r7, #24]
 800f77e:	0151      	lsls	r1, r2, #5
 800f780:	69fa      	ldr	r2, [r7, #28]
 800f782:	440a      	add	r2, r1
 800f784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f788:	0cdb      	lsrs	r3, r3, #19
 800f78a:	04db      	lsls	r3, r3, #19
 800f78c:	6113      	str	r3, [r2, #16]
 800f78e:	e074      	b.n	800f87a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f790:	69bb      	ldr	r3, [r7, #24]
 800f792:	015a      	lsls	r2, r3, #5
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	4413      	add	r3, r2
 800f798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f79c:	691b      	ldr	r3, [r3, #16]
 800f79e:	69ba      	ldr	r2, [r7, #24]
 800f7a0:	0151      	lsls	r1, r2, #5
 800f7a2:	69fa      	ldr	r2, [r7, #28]
 800f7a4:	440a      	add	r2, r1
 800f7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7aa:	0cdb      	lsrs	r3, r3, #19
 800f7ac:	04db      	lsls	r3, r3, #19
 800f7ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f7b0:	69bb      	ldr	r3, [r7, #24]
 800f7b2:	015a      	lsls	r2, r3, #5
 800f7b4:	69fb      	ldr	r3, [r7, #28]
 800f7b6:	4413      	add	r3, r2
 800f7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7bc:	691b      	ldr	r3, [r3, #16]
 800f7be:	69ba      	ldr	r2, [r7, #24]
 800f7c0:	0151      	lsls	r1, r2, #5
 800f7c2:	69fa      	ldr	r2, [r7, #28]
 800f7c4:	440a      	add	r2, r1
 800f7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f7d4:	69bb      	ldr	r3, [r7, #24]
 800f7d6:	015a      	lsls	r2, r3, #5
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	4413      	add	r3, r2
 800f7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	6959      	ldr	r1, [r3, #20]
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	689b      	ldr	r3, [r3, #8]
 800f7ea:	440b      	add	r3, r1
 800f7ec:	1e59      	subs	r1, r3, #1
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	689b      	ldr	r3, [r3, #8]
 800f7f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800f7f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f7f8:	4b9d      	ldr	r3, [pc, #628]	; (800fa70 <USB_EPStartXfer+0x370>)
 800f7fa:	400b      	ands	r3, r1
 800f7fc:	69b9      	ldr	r1, [r7, #24]
 800f7fe:	0148      	lsls	r0, r1, #5
 800f800:	69f9      	ldr	r1, [r7, #28]
 800f802:	4401      	add	r1, r0
 800f804:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f808:	4313      	orrs	r3, r2
 800f80a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	015a      	lsls	r2, r3, #5
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	4413      	add	r3, r2
 800f814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f818:	691a      	ldr	r2, [r3, #16]
 800f81a:	68bb      	ldr	r3, [r7, #8]
 800f81c:	695b      	ldr	r3, [r3, #20]
 800f81e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f822:	69b9      	ldr	r1, [r7, #24]
 800f824:	0148      	lsls	r0, r1, #5
 800f826:	69f9      	ldr	r1, [r7, #28]
 800f828:	4401      	add	r1, r0
 800f82a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f82e:	4313      	orrs	r3, r2
 800f830:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f832:	68bb      	ldr	r3, [r7, #8]
 800f834:	78db      	ldrb	r3, [r3, #3]
 800f836:	2b01      	cmp	r3, #1
 800f838:	d11f      	bne.n	800f87a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f83a:	69bb      	ldr	r3, [r7, #24]
 800f83c:	015a      	lsls	r2, r3, #5
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	4413      	add	r3, r2
 800f842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	69ba      	ldr	r2, [r7, #24]
 800f84a:	0151      	lsls	r1, r2, #5
 800f84c:	69fa      	ldr	r2, [r7, #28]
 800f84e:	440a      	add	r2, r1
 800f850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f854:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f858:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f85a:	69bb      	ldr	r3, [r7, #24]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f866:	691b      	ldr	r3, [r3, #16]
 800f868:	69ba      	ldr	r2, [r7, #24]
 800f86a:	0151      	lsls	r1, r2, #5
 800f86c:	69fa      	ldr	r2, [r7, #28]
 800f86e:	440a      	add	r2, r1
 800f870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f878:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f87a:	79fb      	ldrb	r3, [r7, #7]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d14b      	bne.n	800f918 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f880:	68bb      	ldr	r3, [r7, #8]
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	2b00      	cmp	r3, #0
 800f886:	d009      	beq.n	800f89c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	015a      	lsls	r2, r3, #5
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	4413      	add	r3, r2
 800f890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f894:	461a      	mov	r2, r3
 800f896:	68bb      	ldr	r3, [r7, #8]
 800f898:	691b      	ldr	r3, [r3, #16]
 800f89a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	78db      	ldrb	r3, [r3, #3]
 800f8a0:	2b01      	cmp	r3, #1
 800f8a2:	d128      	bne.n	800f8f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f8a4:	69fb      	ldr	r3, [r7, #28]
 800f8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8aa:	689b      	ldr	r3, [r3, #8]
 800f8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d110      	bne.n	800f8d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	015a      	lsls	r2, r3, #5
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	4413      	add	r3, r2
 800f8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	69ba      	ldr	r2, [r7, #24]
 800f8c4:	0151      	lsls	r1, r2, #5
 800f8c6:	69fa      	ldr	r2, [r7, #28]
 800f8c8:	440a      	add	r2, r1
 800f8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f8d2:	6013      	str	r3, [r2, #0]
 800f8d4:	e00f      	b.n	800f8f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	015a      	lsls	r2, r3, #5
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	4413      	add	r3, r2
 800f8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	69ba      	ldr	r2, [r7, #24]
 800f8e6:	0151      	lsls	r1, r2, #5
 800f8e8:	69fa      	ldr	r2, [r7, #28]
 800f8ea:	440a      	add	r2, r1
 800f8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f8f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f8f6:	69bb      	ldr	r3, [r7, #24]
 800f8f8:	015a      	lsls	r2, r3, #5
 800f8fa:	69fb      	ldr	r3, [r7, #28]
 800f8fc:	4413      	add	r3, r2
 800f8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	69ba      	ldr	r2, [r7, #24]
 800f906:	0151      	lsls	r1, r2, #5
 800f908:	69fa      	ldr	r2, [r7, #28]
 800f90a:	440a      	add	r2, r1
 800f90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f914:	6013      	str	r3, [r2, #0]
 800f916:	e12f      	b.n	800fb78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	015a      	lsls	r2, r3, #5
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	4413      	add	r3, r2
 800f920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	69ba      	ldr	r2, [r7, #24]
 800f928:	0151      	lsls	r1, r2, #5
 800f92a:	69fa      	ldr	r2, [r7, #28]
 800f92c:	440a      	add	r2, r1
 800f92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f936:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	78db      	ldrb	r3, [r3, #3]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d015      	beq.n	800f96c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	695b      	ldr	r3, [r3, #20]
 800f944:	2b00      	cmp	r3, #0
 800f946:	f000 8117 	beq.w	800fb78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	f003 030f 	and.w	r3, r3, #15
 800f95a:	2101      	movs	r1, #1
 800f95c:	fa01 f303 	lsl.w	r3, r1, r3
 800f960:	69f9      	ldr	r1, [r7, #28]
 800f962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f966:	4313      	orrs	r3, r2
 800f968:	634b      	str	r3, [r1, #52]	; 0x34
 800f96a:	e105      	b.n	800fb78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f96c:	69fb      	ldr	r3, [r7, #28]
 800f96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f972:	689b      	ldr	r3, [r3, #8]
 800f974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d110      	bne.n	800f99e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f97c:	69bb      	ldr	r3, [r7, #24]
 800f97e:	015a      	lsls	r2, r3, #5
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	4413      	add	r3, r2
 800f984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	69ba      	ldr	r2, [r7, #24]
 800f98c:	0151      	lsls	r1, r2, #5
 800f98e:	69fa      	ldr	r2, [r7, #28]
 800f990:	440a      	add	r2, r1
 800f992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f99a:	6013      	str	r3, [r2, #0]
 800f99c:	e00f      	b.n	800f9be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	015a      	lsls	r2, r3, #5
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	69ba      	ldr	r2, [r7, #24]
 800f9ae:	0151      	lsls	r1, r2, #5
 800f9b0:	69fa      	ldr	r2, [r7, #28]
 800f9b2:	440a      	add	r2, r1
 800f9b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f9bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	68d9      	ldr	r1, [r3, #12]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	781a      	ldrb	r2, [r3, #0]
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	695b      	ldr	r3, [r3, #20]
 800f9ca:	b298      	uxth	r0, r3
 800f9cc:	79fb      	ldrb	r3, [r7, #7]
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4603      	mov	r3, r0
 800f9d2:	68f8      	ldr	r0, [r7, #12]
 800f9d4:	f000 fa2b 	bl	800fe2e <USB_WritePacket>
 800f9d8:	e0ce      	b.n	800fb78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	015a      	lsls	r2, r3, #5
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	4413      	add	r3, r2
 800f9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f9e6:	691b      	ldr	r3, [r3, #16]
 800f9e8:	69ba      	ldr	r2, [r7, #24]
 800f9ea:	0151      	lsls	r1, r2, #5
 800f9ec:	69fa      	ldr	r2, [r7, #28]
 800f9ee:	440a      	add	r2, r1
 800f9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f9f4:	0cdb      	lsrs	r3, r3, #19
 800f9f6:	04db      	lsls	r3, r3, #19
 800f9f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	015a      	lsls	r2, r3, #5
 800f9fe:	69fb      	ldr	r3, [r7, #28]
 800fa00:	4413      	add	r3, r2
 800fa02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	69ba      	ldr	r2, [r7, #24]
 800fa0a:	0151      	lsls	r1, r2, #5
 800fa0c:	69fa      	ldr	r2, [r7, #28]
 800fa0e:	440a      	add	r2, r1
 800fa10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fa18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fa1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	695b      	ldr	r3, [r3, #20]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d126      	bne.n	800fa74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	015a      	lsls	r2, r3, #5
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa32:	691a      	ldr	r2, [r3, #16]
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	689b      	ldr	r3, [r3, #8]
 800fa38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fa3c:	69b9      	ldr	r1, [r7, #24]
 800fa3e:	0148      	lsls	r0, r1, #5
 800fa40:	69f9      	ldr	r1, [r7, #28]
 800fa42:	4401      	add	r1, r0
 800fa44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fa48:	4313      	orrs	r3, r2
 800fa4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	015a      	lsls	r2, r3, #5
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	4413      	add	r3, r2
 800fa54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa58:	691b      	ldr	r3, [r3, #16]
 800fa5a:	69ba      	ldr	r2, [r7, #24]
 800fa5c:	0151      	lsls	r1, r2, #5
 800fa5e:	69fa      	ldr	r2, [r7, #28]
 800fa60:	440a      	add	r2, r1
 800fa62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fa66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fa6a:	6113      	str	r3, [r2, #16]
 800fa6c:	e036      	b.n	800fadc <USB_EPStartXfer+0x3dc>
 800fa6e:	bf00      	nop
 800fa70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fa74:	68bb      	ldr	r3, [r7, #8]
 800fa76:	695a      	ldr	r2, [r3, #20]
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	1e5a      	subs	r2, r3, #1
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	689b      	ldr	r3, [r3, #8]
 800fa84:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	015a      	lsls	r2, r3, #5
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	4413      	add	r3, r2
 800fa92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fa96:	691a      	ldr	r2, [r3, #16]
 800fa98:	8afb      	ldrh	r3, [r7, #22]
 800fa9a:	04d9      	lsls	r1, r3, #19
 800fa9c:	4b39      	ldr	r3, [pc, #228]	; (800fb84 <USB_EPStartXfer+0x484>)
 800fa9e:	400b      	ands	r3, r1
 800faa0:	69b9      	ldr	r1, [r7, #24]
 800faa2:	0148      	lsls	r0, r1, #5
 800faa4:	69f9      	ldr	r1, [r7, #28]
 800faa6:	4401      	add	r1, r0
 800faa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800faac:	4313      	orrs	r3, r2
 800faae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800fab0:	69bb      	ldr	r3, [r7, #24]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	69fb      	ldr	r3, [r7, #28]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fabc:	691a      	ldr	r2, [r3, #16]
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	689b      	ldr	r3, [r3, #8]
 800fac2:	8af9      	ldrh	r1, [r7, #22]
 800fac4:	fb01 f303 	mul.w	r3, r1, r3
 800fac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800facc:	69b9      	ldr	r1, [r7, #24]
 800face:	0148      	lsls	r0, r1, #5
 800fad0:	69f9      	ldr	r1, [r7, #28]
 800fad2:	4401      	add	r1, r0
 800fad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fad8:	4313      	orrs	r3, r2
 800fada:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fadc:	79fb      	ldrb	r3, [r7, #7]
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d10d      	bne.n	800fafe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	68db      	ldr	r3, [r3, #12]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d009      	beq.n	800fafe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	68d9      	ldr	r1, [r3, #12]
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	015a      	lsls	r2, r3, #5
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	4413      	add	r3, r2
 800faf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fafa:	460a      	mov	r2, r1
 800fafc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	78db      	ldrb	r3, [r3, #3]
 800fb02:	2b01      	cmp	r3, #1
 800fb04:	d128      	bne.n	800fb58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fb06:	69fb      	ldr	r3, [r7, #28]
 800fb08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb0c:	689b      	ldr	r3, [r3, #8]
 800fb0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d110      	bne.n	800fb38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fb16:	69bb      	ldr	r3, [r7, #24]
 800fb18:	015a      	lsls	r2, r3, #5
 800fb1a:	69fb      	ldr	r3, [r7, #28]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	69ba      	ldr	r2, [r7, #24]
 800fb26:	0151      	lsls	r1, r2, #5
 800fb28:	69fa      	ldr	r2, [r7, #28]
 800fb2a:	440a      	add	r2, r1
 800fb2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fb34:	6013      	str	r3, [r2, #0]
 800fb36:	e00f      	b.n	800fb58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fb38:	69bb      	ldr	r3, [r7, #24]
 800fb3a:	015a      	lsls	r2, r3, #5
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	4413      	add	r3, r2
 800fb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	69ba      	ldr	r2, [r7, #24]
 800fb48:	0151      	lsls	r1, r2, #5
 800fb4a:	69fa      	ldr	r2, [r7, #28]
 800fb4c:	440a      	add	r2, r1
 800fb4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	015a      	lsls	r2, r3, #5
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	4413      	add	r3, r2
 800fb60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	69ba      	ldr	r2, [r7, #24]
 800fb68:	0151      	lsls	r1, r2, #5
 800fb6a:	69fa      	ldr	r2, [r7, #28]
 800fb6c:	440a      	add	r2, r1
 800fb6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fb76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3720      	adds	r7, #32
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	1ff80000 	.word	0x1ff80000

0800fb88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	4613      	mov	r3, r2
 800fb94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	785b      	ldrb	r3, [r3, #1]
 800fba4:	2b01      	cmp	r3, #1
 800fba6:	f040 80cd 	bne.w	800fd44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	695b      	ldr	r3, [r3, #20]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d132      	bne.n	800fc18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	015a      	lsls	r2, r3, #5
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	4413      	add	r3, r2
 800fbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbbe:	691b      	ldr	r3, [r3, #16]
 800fbc0:	693a      	ldr	r2, [r7, #16]
 800fbc2:	0151      	lsls	r1, r2, #5
 800fbc4:	697a      	ldr	r2, [r7, #20]
 800fbc6:	440a      	add	r2, r1
 800fbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fbd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fbd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	015a      	lsls	r2, r3, #5
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	4413      	add	r3, r2
 800fbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	693a      	ldr	r2, [r7, #16]
 800fbe6:	0151      	lsls	r1, r2, #5
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	440a      	add	r2, r1
 800fbec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	015a      	lsls	r2, r3, #5
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	4413      	add	r3, r2
 800fbfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	693a      	ldr	r2, [r7, #16]
 800fc06:	0151      	lsls	r1, r2, #5
 800fc08:	697a      	ldr	r2, [r7, #20]
 800fc0a:	440a      	add	r2, r1
 800fc0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc10:	0cdb      	lsrs	r3, r3, #19
 800fc12:	04db      	lsls	r3, r3, #19
 800fc14:	6113      	str	r3, [r2, #16]
 800fc16:	e04e      	b.n	800fcb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fc18:	693b      	ldr	r3, [r7, #16]
 800fc1a:	015a      	lsls	r2, r3, #5
 800fc1c:	697b      	ldr	r3, [r7, #20]
 800fc1e:	4413      	add	r3, r2
 800fc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc24:	691b      	ldr	r3, [r3, #16]
 800fc26:	693a      	ldr	r2, [r7, #16]
 800fc28:	0151      	lsls	r1, r2, #5
 800fc2a:	697a      	ldr	r2, [r7, #20]
 800fc2c:	440a      	add	r2, r1
 800fc2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc32:	0cdb      	lsrs	r3, r3, #19
 800fc34:	04db      	lsls	r3, r3, #19
 800fc36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	015a      	lsls	r2, r3, #5
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	4413      	add	r3, r2
 800fc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc44:	691b      	ldr	r3, [r3, #16]
 800fc46:	693a      	ldr	r2, [r7, #16]
 800fc48:	0151      	lsls	r1, r2, #5
 800fc4a:	697a      	ldr	r2, [r7, #20]
 800fc4c:	440a      	add	r2, r1
 800fc4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fc56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fc5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	695a      	ldr	r2, [r3, #20]
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	689b      	ldr	r3, [r3, #8]
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d903      	bls.n	800fc70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	689a      	ldr	r2, [r3, #8]
 800fc6c:	68bb      	ldr	r3, [r7, #8]
 800fc6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	015a      	lsls	r2, r3, #5
 800fc74:	697b      	ldr	r3, [r7, #20]
 800fc76:	4413      	add	r3, r2
 800fc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	693a      	ldr	r2, [r7, #16]
 800fc80:	0151      	lsls	r1, r2, #5
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	440a      	add	r2, r1
 800fc86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	015a      	lsls	r2, r3, #5
 800fc94:	697b      	ldr	r3, [r7, #20]
 800fc96:	4413      	add	r3, r2
 800fc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc9c:	691a      	ldr	r2, [r3, #16]
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	695b      	ldr	r3, [r3, #20]
 800fca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fca6:	6939      	ldr	r1, [r7, #16]
 800fca8:	0148      	lsls	r0, r1, #5
 800fcaa:	6979      	ldr	r1, [r7, #20]
 800fcac:	4401      	add	r1, r0
 800fcae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fcb6:	79fb      	ldrb	r3, [r7, #7]
 800fcb8:	2b01      	cmp	r3, #1
 800fcba:	d11e      	bne.n	800fcfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	691b      	ldr	r3, [r3, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d009      	beq.n	800fcd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	697b      	ldr	r3, [r7, #20]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	68bb      	ldr	r3, [r7, #8]
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcd8:	693b      	ldr	r3, [r7, #16]
 800fcda:	015a      	lsls	r2, r3, #5
 800fcdc:	697b      	ldr	r3, [r7, #20]
 800fcde:	4413      	add	r3, r2
 800fce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	693a      	ldr	r2, [r7, #16]
 800fce8:	0151      	lsls	r1, r2, #5
 800fcea:	697a      	ldr	r2, [r7, #20]
 800fcec:	440a      	add	r2, r1
 800fcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fcf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fcf6:	6013      	str	r3, [r2, #0]
 800fcf8:	e092      	b.n	800fe20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	015a      	lsls	r2, r3, #5
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	4413      	add	r3, r2
 800fd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	693a      	ldr	r2, [r7, #16]
 800fd0a:	0151      	lsls	r1, r2, #5
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	440a      	add	r2, r1
 800fd10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800fd1a:	68bb      	ldr	r3, [r7, #8]
 800fd1c:	695b      	ldr	r3, [r3, #20]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d07e      	beq.n	800fe20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	f003 030f 	and.w	r3, r3, #15
 800fd32:	2101      	movs	r1, #1
 800fd34:	fa01 f303 	lsl.w	r3, r1, r3
 800fd38:	6979      	ldr	r1, [r7, #20]
 800fd3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	634b      	str	r3, [r1, #52]	; 0x34
 800fd42:	e06d      	b.n	800fe20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fd44:	693b      	ldr	r3, [r7, #16]
 800fd46:	015a      	lsls	r2, r3, #5
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	4413      	add	r3, r2
 800fd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd50:	691b      	ldr	r3, [r3, #16]
 800fd52:	693a      	ldr	r2, [r7, #16]
 800fd54:	0151      	lsls	r1, r2, #5
 800fd56:	697a      	ldr	r2, [r7, #20]
 800fd58:	440a      	add	r2, r1
 800fd5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd5e:	0cdb      	lsrs	r3, r3, #19
 800fd60:	04db      	lsls	r3, r3, #19
 800fd62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	015a      	lsls	r2, r3, #5
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd70:	691b      	ldr	r3, [r3, #16]
 800fd72:	693a      	ldr	r2, [r7, #16]
 800fd74:	0151      	lsls	r1, r2, #5
 800fd76:	697a      	ldr	r2, [r7, #20]
 800fd78:	440a      	add	r2, r1
 800fd7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fd86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	695b      	ldr	r3, [r3, #20]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d003      	beq.n	800fd98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800fd90:	68bb      	ldr	r3, [r7, #8]
 800fd92:	689a      	ldr	r2, [r3, #8]
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	015a      	lsls	r2, r3, #5
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda4:	691b      	ldr	r3, [r3, #16]
 800fda6:	693a      	ldr	r2, [r7, #16]
 800fda8:	0151      	lsls	r1, r2, #5
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	440a      	add	r2, r1
 800fdae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fdb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	015a      	lsls	r2, r3, #5
 800fdbc:	697b      	ldr	r3, [r7, #20]
 800fdbe:	4413      	add	r3, r2
 800fdc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc4:	691a      	ldr	r2, [r3, #16]
 800fdc6:	68bb      	ldr	r3, [r7, #8]
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fdce:	6939      	ldr	r1, [r7, #16]
 800fdd0:	0148      	lsls	r0, r1, #5
 800fdd2:	6979      	ldr	r1, [r7, #20]
 800fdd4:	4401      	add	r1, r0
 800fdd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fdda:	4313      	orrs	r3, r2
 800fddc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800fdde:	79fb      	ldrb	r3, [r7, #7]
 800fde0:	2b01      	cmp	r3, #1
 800fde2:	d10d      	bne.n	800fe00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	68db      	ldr	r3, [r3, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d009      	beq.n	800fe00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	68d9      	ldr	r1, [r3, #12]
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	015a      	lsls	r2, r3, #5
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	4413      	add	r3, r2
 800fdf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdfc:	460a      	mov	r2, r1
 800fdfe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fe00:	693b      	ldr	r3, [r7, #16]
 800fe02:	015a      	lsls	r2, r3, #5
 800fe04:	697b      	ldr	r3, [r7, #20]
 800fe06:	4413      	add	r3, r2
 800fe08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	693a      	ldr	r2, [r7, #16]
 800fe10:	0151      	lsls	r1, r2, #5
 800fe12:	697a      	ldr	r2, [r7, #20]
 800fe14:	440a      	add	r2, r1
 800fe16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fe1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr

0800fe2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fe2e:	b480      	push	{r7}
 800fe30:	b089      	sub	sp, #36	; 0x24
 800fe32:	af00      	add	r7, sp, #0
 800fe34:	60f8      	str	r0, [r7, #12]
 800fe36:	60b9      	str	r1, [r7, #8]
 800fe38:	4611      	mov	r1, r2
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	460b      	mov	r3, r1
 800fe3e:	71fb      	strb	r3, [r7, #7]
 800fe40:	4613      	mov	r3, r2
 800fe42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fe4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d123      	bne.n	800fe9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800fe54:	88bb      	ldrh	r3, [r7, #4]
 800fe56:	3303      	adds	r3, #3
 800fe58:	089b      	lsrs	r3, r3, #2
 800fe5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800fe5c:	2300      	movs	r3, #0
 800fe5e:	61bb      	str	r3, [r7, #24]
 800fe60:	e018      	b.n	800fe94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800fe62:	79fb      	ldrb	r3, [r7, #7]
 800fe64:	031a      	lsls	r2, r3, #12
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	4413      	add	r3, r2
 800fe6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fe6e:	461a      	mov	r2, r3
 800fe70:	69fb      	ldr	r3, [r7, #28]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe82:	69fb      	ldr	r3, [r7, #28]
 800fe84:	3301      	adds	r3, #1
 800fe86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	3301      	adds	r3, #1
 800fe92:	61bb      	str	r3, [r7, #24]
 800fe94:	69ba      	ldr	r2, [r7, #24]
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d3e2      	bcc.n	800fe62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fe9c:	2300      	movs	r3, #0
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3724      	adds	r7, #36	; 0x24
 800fea2:	46bd      	mov	sp, r7
 800fea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea8:	4770      	bx	lr

0800feaa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800feaa:	b480      	push	{r7}
 800feac:	b08b      	sub	sp, #44	; 0x2c
 800feae:	af00      	add	r7, sp, #0
 800feb0:	60f8      	str	r0, [r7, #12]
 800feb2:	60b9      	str	r1, [r7, #8]
 800feb4:	4613      	mov	r3, r2
 800feb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fec0:	88fb      	ldrh	r3, [r7, #6]
 800fec2:	089b      	lsrs	r3, r3, #2
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fec8:	88fb      	ldrh	r3, [r7, #6]
 800feca:	f003 0303 	and.w	r3, r3, #3
 800fece:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fed0:	2300      	movs	r3, #0
 800fed2:	623b      	str	r3, [r7, #32]
 800fed4:	e014      	b.n	800ff00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fed6:	69bb      	ldr	r3, [r7, #24]
 800fed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee0:	601a      	str	r2, [r3, #0]
    pDest++;
 800fee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee4:	3301      	adds	r3, #1
 800fee6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feea:	3301      	adds	r3, #1
 800feec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800feee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef0:	3301      	adds	r3, #1
 800fef2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef6:	3301      	adds	r3, #1
 800fef8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fefa:	6a3b      	ldr	r3, [r7, #32]
 800fefc:	3301      	adds	r3, #1
 800fefe:	623b      	str	r3, [r7, #32]
 800ff00:	6a3a      	ldr	r2, [r7, #32]
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d3e6      	bcc.n	800fed6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ff08:	8bfb      	ldrh	r3, [r7, #30]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d01e      	beq.n	800ff4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff18:	461a      	mov	r2, r3
 800ff1a:	f107 0310 	add.w	r3, r7, #16
 800ff1e:	6812      	ldr	r2, [r2, #0]
 800ff20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ff22:	693a      	ldr	r2, [r7, #16]
 800ff24:	6a3b      	ldr	r3, [r7, #32]
 800ff26:	b2db      	uxtb	r3, r3
 800ff28:	00db      	lsls	r3, r3, #3
 800ff2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ff2e:	b2da      	uxtb	r2, r3
 800ff30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff32:	701a      	strb	r2, [r3, #0]
      i++;
 800ff34:	6a3b      	ldr	r3, [r7, #32]
 800ff36:	3301      	adds	r3, #1
 800ff38:	623b      	str	r3, [r7, #32]
      pDest++;
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ff40:	8bfb      	ldrh	r3, [r7, #30]
 800ff42:	3b01      	subs	r3, #1
 800ff44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ff46:	8bfb      	ldrh	r3, [r7, #30]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d1ea      	bne.n	800ff22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ff4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	372c      	adds	r7, #44	; 0x2c
 800ff52:	46bd      	mov	sp, r7
 800ff54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff58:	4770      	bx	lr

0800ff5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff5a:	b480      	push	{r7}
 800ff5c:	b085      	sub	sp, #20
 800ff5e:	af00      	add	r7, sp, #0
 800ff60:	6078      	str	r0, [r7, #4]
 800ff62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff6e:	683b      	ldr	r3, [r7, #0]
 800ff70:	785b      	ldrb	r3, [r3, #1]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d12c      	bne.n	800ffd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	015a      	lsls	r2, r3, #5
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	db12      	blt.n	800ffae <USB_EPSetStall+0x54>
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00f      	beq.n	800ffae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ff8e:	68bb      	ldr	r3, [r7, #8]
 800ff90:	015a      	lsls	r2, r3, #5
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	4413      	add	r3, r2
 800ff96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	68ba      	ldr	r2, [r7, #8]
 800ff9e:	0151      	lsls	r1, r2, #5
 800ffa0:	68fa      	ldr	r2, [r7, #12]
 800ffa2:	440a      	add	r2, r1
 800ffa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ffac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	015a      	lsls	r2, r3, #5
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	68ba      	ldr	r2, [r7, #8]
 800ffbe:	0151      	lsls	r1, r2, #5
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	440a      	add	r2, r1
 800ffc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ffcc:	6013      	str	r3, [r2, #0]
 800ffce:	e02b      	b.n	8010028 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	015a      	lsls	r2, r3, #5
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	db12      	blt.n	8010008 <USB_EPSetStall+0xae>
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00f      	beq.n	8010008 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	015a      	lsls	r2, r3, #5
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	4413      	add	r3, r2
 800fff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	0151      	lsls	r1, r2, #5
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	440a      	add	r2, r1
 800fffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010006:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	015a      	lsls	r2, r3, #5
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4413      	add	r3, r2
 8010010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	0151      	lsls	r1, r2, #5
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	440a      	add	r2, r1
 801001e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010028:	2300      	movs	r3, #0
}
 801002a:	4618      	mov	r0, r3
 801002c:	3714      	adds	r7, #20
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010036:	b480      	push	{r7}
 8010038:	b085      	sub	sp, #20
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010044:	683b      	ldr	r3, [r7, #0]
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801004a:	683b      	ldr	r3, [r7, #0]
 801004c:	785b      	ldrb	r3, [r3, #1]
 801004e:	2b01      	cmp	r3, #1
 8010050:	d128      	bne.n	80100a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	015a      	lsls	r2, r3, #5
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	4413      	add	r3, r2
 801005a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68ba      	ldr	r2, [r7, #8]
 8010062:	0151      	lsls	r1, r2, #5
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	440a      	add	r2, r1
 8010068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801006c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010070:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	78db      	ldrb	r3, [r3, #3]
 8010076:	2b03      	cmp	r3, #3
 8010078:	d003      	beq.n	8010082 <USB_EPClearStall+0x4c>
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	78db      	ldrb	r3, [r3, #3]
 801007e:	2b02      	cmp	r3, #2
 8010080:	d138      	bne.n	80100f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	015a      	lsls	r2, r3, #5
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	4413      	add	r3, r2
 801008a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	68ba      	ldr	r2, [r7, #8]
 8010092:	0151      	lsls	r1, r2, #5
 8010094:	68fa      	ldr	r2, [r7, #12]
 8010096:	440a      	add	r2, r1
 8010098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801009c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100a0:	6013      	str	r3, [r2, #0]
 80100a2:	e027      	b.n	80100f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	015a      	lsls	r2, r3, #5
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	4413      	add	r3, r2
 80100ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	68ba      	ldr	r2, [r7, #8]
 80100b4:	0151      	lsls	r1, r2, #5
 80100b6:	68fa      	ldr	r2, [r7, #12]
 80100b8:	440a      	add	r2, r1
 80100ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	78db      	ldrb	r3, [r3, #3]
 80100c8:	2b03      	cmp	r3, #3
 80100ca:	d003      	beq.n	80100d4 <USB_EPClearStall+0x9e>
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	78db      	ldrb	r3, [r3, #3]
 80100d0:	2b02      	cmp	r3, #2
 80100d2:	d10f      	bne.n	80100f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	015a      	lsls	r2, r3, #5
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	68ba      	ldr	r2, [r7, #8]
 80100e4:	0151      	lsls	r1, r2, #5
 80100e6:	68fa      	ldr	r2, [r7, #12]
 80100e8:	440a      	add	r2, r1
 80100ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80100f4:	2300      	movs	r3, #0
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3714      	adds	r7, #20
 80100fa:	46bd      	mov	sp, r7
 80100fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010100:	4770      	bx	lr

08010102 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010102:	b480      	push	{r7}
 8010104:	b085      	sub	sp, #20
 8010106:	af00      	add	r7, sp, #0
 8010108:	6078      	str	r0, [r7, #4]
 801010a:	460b      	mov	r3, r1
 801010c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	68fa      	ldr	r2, [r7, #12]
 801011c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010120:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010124:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	78fb      	ldrb	r3, [r7, #3]
 8010130:	011b      	lsls	r3, r3, #4
 8010132:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010136:	68f9      	ldr	r1, [r7, #12]
 8010138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801013c:	4313      	orrs	r3, r2
 801013e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	3714      	adds	r7, #20
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr

0801014e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801014e:	b480      	push	{r7}
 8010150:	b085      	sub	sp, #20
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	68fa      	ldr	r2, [r7, #12]
 8010164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010168:	f023 0303 	bic.w	r3, r3, #3
 801016c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010174:	685b      	ldr	r3, [r3, #4]
 8010176:	68fa      	ldr	r2, [r7, #12]
 8010178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801017c:	f023 0302 	bic.w	r3, r3, #2
 8010180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010182:	2300      	movs	r3, #0
}
 8010184:	4618      	mov	r0, r3
 8010186:	3714      	adds	r7, #20
 8010188:	46bd      	mov	sp, r7
 801018a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018e:	4770      	bx	lr

08010190 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010190:	b480      	push	{r7}
 8010192:	b085      	sub	sp, #20
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	68fa      	ldr	r2, [r7, #12]
 80101a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101aa:	f023 0303 	bic.w	r3, r3, #3
 80101ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101be:	f043 0302 	orr.w	r3, r3, #2
 80101c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101c4:	2300      	movs	r3, #0
}
 80101c6:	4618      	mov	r0, r3
 80101c8:	3714      	adds	r7, #20
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80101d2:	b480      	push	{r7}
 80101d4:	b085      	sub	sp, #20
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	695b      	ldr	r3, [r3, #20]
 80101de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	699b      	ldr	r3, [r3, #24]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	4013      	ands	r3, r2
 80101e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80101ea:	68fb      	ldr	r3, [r7, #12]
}
 80101ec:	4618      	mov	r0, r3
 80101ee:	3714      	adds	r7, #20
 80101f0:	46bd      	mov	sp, r7
 80101f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101f6:	4770      	bx	lr

080101f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801020a:	699b      	ldr	r3, [r3, #24]
 801020c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010214:	69db      	ldr	r3, [r3, #28]
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	4013      	ands	r3, r2
 801021a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	0c1b      	lsrs	r3, r3, #16
}
 8010220:	4618      	mov	r0, r3
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801023e:	699b      	ldr	r3, [r3, #24]
 8010240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010248:	69db      	ldr	r3, [r3, #28]
 801024a:	68ba      	ldr	r2, [r7, #8]
 801024c:	4013      	ands	r3, r2
 801024e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	b29b      	uxth	r3, r3
}
 8010254:	4618      	mov	r0, r3
 8010256:	3714      	adds	r7, #20
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010260:	b480      	push	{r7}
 8010262:	b085      	sub	sp, #20
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	460b      	mov	r3, r1
 801026a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010270:	78fb      	ldrb	r3, [r7, #3]
 8010272:	015a      	lsls	r2, r3, #5
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	4413      	add	r3, r2
 8010278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010286:	695b      	ldr	r3, [r3, #20]
 8010288:	68ba      	ldr	r2, [r7, #8]
 801028a:	4013      	ands	r3, r2
 801028c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801028e:	68bb      	ldr	r3, [r7, #8]
}
 8010290:	4618      	mov	r0, r3
 8010292:	3714      	adds	r7, #20
 8010294:	46bd      	mov	sp, r7
 8010296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801029a:	4770      	bx	lr

0801029c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801029c:	b480      	push	{r7}
 801029e:	b087      	sub	sp, #28
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	460b      	mov	r3, r1
 80102a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80102ac:	697b      	ldr	r3, [r7, #20]
 80102ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102b2:	691b      	ldr	r3, [r3, #16]
 80102b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80102b6:	697b      	ldr	r3, [r7, #20]
 80102b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	f003 030f 	and.w	r3, r3, #15
 80102c6:	68fa      	ldr	r2, [r7, #12]
 80102c8:	fa22 f303 	lsr.w	r3, r2, r3
 80102cc:	01db      	lsls	r3, r3, #7
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	693a      	ldr	r2, [r7, #16]
 80102d2:	4313      	orrs	r3, r2
 80102d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80102d6:	78fb      	ldrb	r3, [r7, #3]
 80102d8:	015a      	lsls	r2, r3, #5
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	4413      	add	r3, r2
 80102de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e2:	689b      	ldr	r3, [r3, #8]
 80102e4:	693a      	ldr	r2, [r7, #16]
 80102e6:	4013      	ands	r3, r2
 80102e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80102ea:	68bb      	ldr	r3, [r7, #8]
}
 80102ec:	4618      	mov	r0, r3
 80102ee:	371c      	adds	r7, #28
 80102f0:	46bd      	mov	sp, r7
 80102f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f6:	4770      	bx	lr

080102f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80102f8:	b480      	push	{r7}
 80102fa:	b083      	sub	sp, #12
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	695b      	ldr	r3, [r3, #20]
 8010304:	f003 0301 	and.w	r3, r3, #1
}
 8010308:	4618      	mov	r0, r3
 801030a:	370c      	adds	r7, #12
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr

08010314 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801032e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010332:	f023 0307 	bic.w	r3, r3, #7
 8010336:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801033e:	685b      	ldr	r3, [r3, #4]
 8010340:	68fa      	ldr	r2, [r7, #12]
 8010342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801034a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801034c:	2300      	movs	r3, #0
}
 801034e:	4618      	mov	r0, r3
 8010350:	3714      	adds	r7, #20
 8010352:	46bd      	mov	sp, r7
 8010354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010358:	4770      	bx	lr
	...

0801035c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801035c:	b480      	push	{r7}
 801035e:	b087      	sub	sp, #28
 8010360:	af00      	add	r7, sp, #0
 8010362:	60f8      	str	r0, [r7, #12]
 8010364:	460b      	mov	r3, r1
 8010366:	607a      	str	r2, [r7, #4]
 8010368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	333c      	adds	r3, #60	; 0x3c
 8010372:	3304      	adds	r3, #4
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010378:	693b      	ldr	r3, [r7, #16]
 801037a:	4a26      	ldr	r2, [pc, #152]	; (8010414 <USB_EP0_OutStart+0xb8>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d90a      	bls.n	8010396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801038c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010390:	d101      	bne.n	8010396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010392:	2300      	movs	r3, #0
 8010394:	e037      	b.n	8010406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010396:	697b      	ldr	r3, [r7, #20]
 8010398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801039c:	461a      	mov	r2, r3
 801039e:	2300      	movs	r3, #0
 80103a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103a2:	697b      	ldr	r3, [r7, #20]
 80103a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103a8:	691b      	ldr	r3, [r3, #16]
 80103aa:	697a      	ldr	r2, [r7, #20]
 80103ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80103b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	697a      	ldr	r2, [r7, #20]
 80103c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103c4:	f043 0318 	orr.w	r3, r3, #24
 80103c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d0:	691b      	ldr	r3, [r3, #16]
 80103d2:	697a      	ldr	r2, [r7, #20]
 80103d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80103dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80103de:	7afb      	ldrb	r3, [r7, #11]
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d10f      	bne.n	8010404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ea:	461a      	mov	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	697a      	ldr	r2, [r7, #20]
 80103fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010404:	2300      	movs	r3, #0
}
 8010406:	4618      	mov	r0, r3
 8010408:	371c      	adds	r7, #28
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	4f54300a 	.word	0x4f54300a

08010418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010418:	b480      	push	{r7}
 801041a:	b085      	sub	sp, #20
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010420:	2300      	movs	r3, #0
 8010422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	3301      	adds	r3, #1
 8010428:	60fb      	str	r3, [r7, #12]
 801042a:	4a13      	ldr	r2, [pc, #76]	; (8010478 <USB_CoreReset+0x60>)
 801042c:	4293      	cmp	r3, r2
 801042e:	d901      	bls.n	8010434 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010430:	2303      	movs	r3, #3
 8010432:	e01a      	b.n	801046a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	2b00      	cmp	r3, #0
 801043a:	daf3      	bge.n	8010424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801043c:	2300      	movs	r3, #0
 801043e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	691b      	ldr	r3, [r3, #16]
 8010444:	f043 0201 	orr.w	r2, r3, #1
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	3301      	adds	r3, #1
 8010450:	60fb      	str	r3, [r7, #12]
 8010452:	4a09      	ldr	r2, [pc, #36]	; (8010478 <USB_CoreReset+0x60>)
 8010454:	4293      	cmp	r3, r2
 8010456:	d901      	bls.n	801045c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010458:	2303      	movs	r3, #3
 801045a:	e006      	b.n	801046a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	691b      	ldr	r3, [r3, #16]
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	2b01      	cmp	r3, #1
 8010466:	d0f1      	beq.n	801044c <USB_CoreReset+0x34>

  return HAL_OK;
 8010468:	2300      	movs	r3, #0
}
 801046a:	4618      	mov	r0, r3
 801046c:	3714      	adds	r7, #20
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	00030d40 	.word	0x00030d40

0801047c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8010480:	4904      	ldr	r1, [pc, #16]	; (8010494 <MX_FATFS_Init+0x18>)
 8010482:	4805      	ldr	r0, [pc, #20]	; (8010498 <MX_FATFS_Init+0x1c>)
 8010484:	f004 ff38 	bl	80152f8 <FATFS_LinkDriver>
 8010488:	4603      	mov	r3, r0
 801048a:	461a      	mov	r2, r3
 801048c:	4b03      	ldr	r3, [pc, #12]	; (801049c <MX_FATFS_Init+0x20>)
 801048e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010490:	bf00      	nop
 8010492:	bd80      	pop	{r7, pc}
 8010494:	200130bc 	.word	0x200130bc
 8010498:	200000d4 	.word	0x200000d4
 801049c:	200130c0 	.word	0x200130c0

080104a0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80104a0:	b480      	push	{r7}
 80104a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80104a4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80104a6:	4618      	mov	r0, r3
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b082      	sub	sp, #8
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	4603      	mov	r3, r0
 80104b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 80104ba:	79fb      	ldrb	r3, [r7, #7]
 80104bc:	4618      	mov	r0, r3
 80104be:	f7f1 ff91 	bl	80023e4 <SD_disk_initialize>
 80104c2:	4603      	mov	r3, r0
 80104c4:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	3708      	adds	r7, #8
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bd80      	pop	{r7, pc}

080104ce <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80104ce:	b580      	push	{r7, lr}
 80104d0:	b082      	sub	sp, #8
 80104d2:	af00      	add	r7, sp, #0
 80104d4:	4603      	mov	r3, r0
 80104d6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	4618      	mov	r0, r3
 80104dc:	f7f2 f86c 	bl	80025b8 <SD_disk_status>
 80104e0:	4603      	mov	r3, r0
 80104e2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80104e4:	4618      	mov	r0, r3
 80104e6:	3708      	adds	r7, #8
 80104e8:	46bd      	mov	sp, r7
 80104ea:	bd80      	pop	{r7, pc}

080104ec <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60b9      	str	r1, [r7, #8]
 80104f4:	607a      	str	r2, [r7, #4]
 80104f6:	603b      	str	r3, [r7, #0]
 80104f8:	4603      	mov	r3, r0
 80104fa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80104fc:	7bf8      	ldrb	r0, [r7, #15]
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	687a      	ldr	r2, [r7, #4]
 8010502:	68b9      	ldr	r1, [r7, #8]
 8010504:	f7f2 f86e 	bl	80025e4 <SD_disk_read>
 8010508:	4603      	mov	r3, r0
 801050a:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 801050c:	4618      	mov	r0, r3
 801050e:	3710      	adds	r7, #16
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b084      	sub	sp, #16
 8010518:	af00      	add	r7, sp, #0
 801051a:	60b9      	str	r1, [r7, #8]
 801051c:	607a      	str	r2, [r7, #4]
 801051e:	603b      	str	r3, [r7, #0]
 8010520:	4603      	mov	r3, r0
 8010522:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 8010524:	7bf8      	ldrb	r0, [r7, #15]
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	687a      	ldr	r2, [r7, #4]
 801052a:	68b9      	ldr	r1, [r7, #8]
 801052c:	f7f2 f8c4 	bl	80026b8 <SD_disk_write>
 8010530:	4603      	mov	r3, r0
 8010532:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8010534:	4618      	mov	r0, r3
 8010536:	3710      	adds	r7, #16
 8010538:	46bd      	mov	sp, r7
 801053a:	bd80      	pop	{r7, pc}

0801053c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b082      	sub	sp, #8
 8010540:	af00      	add	r7, sp, #0
 8010542:	4603      	mov	r3, r0
 8010544:	603a      	str	r2, [r7, #0]
 8010546:	71fb      	strb	r3, [r7, #7]
 8010548:	460b      	mov	r3, r1
 801054a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 801054c:	79fb      	ldrb	r3, [r7, #7]
 801054e:	79b9      	ldrb	r1, [r7, #6]
 8010550:	683a      	ldr	r2, [r7, #0]
 8010552:	4618      	mov	r0, r3
 8010554:	f7f2 f934 	bl	80027c0 <SD_disk_ioctl>
 8010558:	4603      	mov	r3, r0
 801055a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 801055c:	4618      	mov	r0, r3
 801055e:	3708      	adds	r7, #8
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b084      	sub	sp, #16
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	460b      	mov	r3, r1
 801056e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010570:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010574:	f009 fc52 	bl	8019e1c <USBD_static_malloc>
 8010578:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d105      	bne.n	801058c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2200      	movs	r2, #0
 8010584:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010588:	2302      	movs	r3, #2
 801058a:	e066      	b.n	801065a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	68fa      	ldr	r2, [r7, #12]
 8010590:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	7c1b      	ldrb	r3, [r3, #16]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d119      	bne.n	80105d0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801059c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105a0:	2202      	movs	r2, #2
 80105a2:	2181      	movs	r1, #129	; 0x81
 80105a4:	6878      	ldr	r0, [r7, #4]
 80105a6:	f009 fb16 	bl	8019bd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2201      	movs	r2, #1
 80105ae:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80105b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105b4:	2202      	movs	r2, #2
 80105b6:	2101      	movs	r1, #1
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f009 fb0c 	bl	8019bd6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	2201      	movs	r2, #1
 80105c2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2210      	movs	r2, #16
 80105ca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80105ce:	e016      	b.n	80105fe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80105d0:	2340      	movs	r3, #64	; 0x40
 80105d2:	2202      	movs	r2, #2
 80105d4:	2181      	movs	r1, #129	; 0x81
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f009 fafd 	bl	8019bd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	2201      	movs	r2, #1
 80105e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80105e2:	2340      	movs	r3, #64	; 0x40
 80105e4:	2202      	movs	r2, #2
 80105e6:	2101      	movs	r1, #1
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	f009 faf4 	bl	8019bd6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2201      	movs	r2, #1
 80105f2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2210      	movs	r2, #16
 80105fa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80105fe:	2308      	movs	r3, #8
 8010600:	2203      	movs	r2, #3
 8010602:	2182      	movs	r1, #130	; 0x82
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f009 fae6 	bl	8019bd6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	2201      	movs	r2, #1
 801060e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	2200      	movs	r2, #0
 8010620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2200      	movs	r2, #0
 8010628:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	7c1b      	ldrb	r3, [r3, #16]
 8010630:	2b00      	cmp	r3, #0
 8010632:	d109      	bne.n	8010648 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801063a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801063e:	2101      	movs	r1, #1
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f009 fbb7 	bl	8019db4 <USBD_LL_PrepareReceive>
 8010646:	e007      	b.n	8010658 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801064e:	2340      	movs	r3, #64	; 0x40
 8010650:	2101      	movs	r1, #1
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f009 fbae 	bl	8019db4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010658:	2300      	movs	r3, #0
}
 801065a:	4618      	mov	r0, r3
 801065c:	3710      	adds	r7, #16
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}

08010662 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010662:	b580      	push	{r7, lr}
 8010664:	b082      	sub	sp, #8
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
 801066a:	460b      	mov	r3, r1
 801066c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801066e:	2181      	movs	r1, #129	; 0x81
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f009 fad6 	bl	8019c22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	2200      	movs	r2, #0
 801067a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801067c:	2101      	movs	r1, #1
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f009 facf 	bl	8019c22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801068c:	2182      	movs	r1, #130	; 0x82
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f009 fac7 	bl	8019c22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	2200      	movs	r2, #0
 8010698:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d00e      	beq.n	80106cc <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80106b4:	685b      	ldr	r3, [r3, #4]
 80106b6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106be:	4618      	mov	r0, r3
 80106c0:	f009 fbba 	bl	8019e38 <USBD_static_free>
    pdev->pClassData = NULL;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	2200      	movs	r2, #0
 80106c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
	...

080106d8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b086      	sub	sp, #24
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80106e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80106ea:	2300      	movs	r3, #0
 80106ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80106ee:	2300      	movs	r3, #0
 80106f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80106f2:	2300      	movs	r3, #0
 80106f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d101      	bne.n	8010700 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80106fc:	2303      	movs	r3, #3
 80106fe:	e0af      	b.n	8010860 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010700:	683b      	ldr	r3, [r7, #0]
 8010702:	781b      	ldrb	r3, [r3, #0]
 8010704:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8010708:	2b00      	cmp	r3, #0
 801070a:	d03f      	beq.n	801078c <USBD_CDC_Setup+0xb4>
 801070c:	2b20      	cmp	r3, #32
 801070e:	f040 809f 	bne.w	8010850 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	88db      	ldrh	r3, [r3, #6]
 8010716:	2b00      	cmp	r3, #0
 8010718:	d02e      	beq.n	8010778 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801071a:	683b      	ldr	r3, [r7, #0]
 801071c:	781b      	ldrb	r3, [r3, #0]
 801071e:	b25b      	sxtb	r3, r3
 8010720:	2b00      	cmp	r3, #0
 8010722:	da16      	bge.n	8010752 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801072a:	689b      	ldr	r3, [r3, #8]
 801072c:	683a      	ldr	r2, [r7, #0]
 801072e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8010730:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010732:	683a      	ldr	r2, [r7, #0]
 8010734:	88d2      	ldrh	r2, [r2, #6]
 8010736:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	88db      	ldrh	r3, [r3, #6]
 801073c:	2b07      	cmp	r3, #7
 801073e:	bf28      	it	cs
 8010740:	2307      	movcs	r3, #7
 8010742:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	89fa      	ldrh	r2, [r7, #14]
 8010748:	4619      	mov	r1, r3
 801074a:	6878      	ldr	r0, [r7, #4]
 801074c:	f001 fb19 	bl	8011d82 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8010750:	e085      	b.n	801085e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	785a      	ldrb	r2, [r3, #1]
 8010756:	693b      	ldr	r3, [r7, #16]
 8010758:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	88db      	ldrh	r3, [r3, #6]
 8010760:	b2da      	uxtb	r2, r3
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8010768:	6939      	ldr	r1, [r7, #16]
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	88db      	ldrh	r3, [r3, #6]
 801076e:	461a      	mov	r2, r3
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f001 fb32 	bl	8011dda <USBD_CtlPrepareRx>
      break;
 8010776:	e072      	b.n	801085e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801077e:	689b      	ldr	r3, [r3, #8]
 8010780:	683a      	ldr	r2, [r7, #0]
 8010782:	7850      	ldrb	r0, [r2, #1]
 8010784:	2200      	movs	r2, #0
 8010786:	6839      	ldr	r1, [r7, #0]
 8010788:	4798      	blx	r3
      break;
 801078a:	e068      	b.n	801085e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	785b      	ldrb	r3, [r3, #1]
 8010790:	2b0b      	cmp	r3, #11
 8010792:	d852      	bhi.n	801083a <USBD_CDC_Setup+0x162>
 8010794:	a201      	add	r2, pc, #4	; (adr r2, 801079c <USBD_CDC_Setup+0xc4>)
 8010796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079a:	bf00      	nop
 801079c:	080107cd 	.word	0x080107cd
 80107a0:	08010849 	.word	0x08010849
 80107a4:	0801083b 	.word	0x0801083b
 80107a8:	0801083b 	.word	0x0801083b
 80107ac:	0801083b 	.word	0x0801083b
 80107b0:	0801083b 	.word	0x0801083b
 80107b4:	0801083b 	.word	0x0801083b
 80107b8:	0801083b 	.word	0x0801083b
 80107bc:	0801083b 	.word	0x0801083b
 80107c0:	0801083b 	.word	0x0801083b
 80107c4:	080107f7 	.word	0x080107f7
 80107c8:	08010821 	.word	0x08010821
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	2b03      	cmp	r3, #3
 80107d6:	d107      	bne.n	80107e8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80107d8:	f107 030a 	add.w	r3, r7, #10
 80107dc:	2202      	movs	r2, #2
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f001 face 	bl	8011d82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80107e6:	e032      	b.n	801084e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80107e8:	6839      	ldr	r1, [r7, #0]
 80107ea:	6878      	ldr	r0, [r7, #4]
 80107ec:	f001 fa58 	bl	8011ca0 <USBD_CtlError>
            ret = USBD_FAIL;
 80107f0:	2303      	movs	r3, #3
 80107f2:	75fb      	strb	r3, [r7, #23]
          break;
 80107f4:	e02b      	b.n	801084e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80107fc:	b2db      	uxtb	r3, r3
 80107fe:	2b03      	cmp	r3, #3
 8010800:	d107      	bne.n	8010812 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010802:	f107 030d 	add.w	r3, r7, #13
 8010806:	2201      	movs	r2, #1
 8010808:	4619      	mov	r1, r3
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f001 fab9 	bl	8011d82 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010810:	e01d      	b.n	801084e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8010812:	6839      	ldr	r1, [r7, #0]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f001 fa43 	bl	8011ca0 <USBD_CtlError>
            ret = USBD_FAIL;
 801081a:	2303      	movs	r3, #3
 801081c:	75fb      	strb	r3, [r7, #23]
          break;
 801081e:	e016      	b.n	801084e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010826:	b2db      	uxtb	r3, r3
 8010828:	2b03      	cmp	r3, #3
 801082a:	d00f      	beq.n	801084c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f001 fa36 	bl	8011ca0 <USBD_CtlError>
            ret = USBD_FAIL;
 8010834:	2303      	movs	r3, #3
 8010836:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010838:	e008      	b.n	801084c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801083a:	6839      	ldr	r1, [r7, #0]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f001 fa2f 	bl	8011ca0 <USBD_CtlError>
          ret = USBD_FAIL;
 8010842:	2303      	movs	r3, #3
 8010844:	75fb      	strb	r3, [r7, #23]
          break;
 8010846:	e002      	b.n	801084e <USBD_CDC_Setup+0x176>
          break;
 8010848:	bf00      	nop
 801084a:	e008      	b.n	801085e <USBD_CDC_Setup+0x186>
          break;
 801084c:	bf00      	nop
      }
      break;
 801084e:	e006      	b.n	801085e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8010850:	6839      	ldr	r1, [r7, #0]
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f001 fa24 	bl	8011ca0 <USBD_CtlError>
      ret = USBD_FAIL;
 8010858:	2303      	movs	r3, #3
 801085a:	75fb      	strb	r3, [r7, #23]
      break;
 801085c:	bf00      	nop
  }

  return (uint8_t)ret;
 801085e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010860:	4618      	mov	r0, r3
 8010862:	3718      	adds	r7, #24
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}

08010868 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b084      	sub	sp, #16
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	460b      	mov	r3, r1
 8010872:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801087a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010882:	2b00      	cmp	r3, #0
 8010884:	d101      	bne.n	801088a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010886:	2303      	movs	r3, #3
 8010888:	e04f      	b.n	801092a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010890:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8010892:	78fa      	ldrb	r2, [r7, #3]
 8010894:	6879      	ldr	r1, [r7, #4]
 8010896:	4613      	mov	r3, r2
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4413      	add	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	440b      	add	r3, r1
 80108a0:	3318      	adds	r3, #24
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d029      	beq.n	80108fc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80108a8:	78fa      	ldrb	r2, [r7, #3]
 80108aa:	6879      	ldr	r1, [r7, #4]
 80108ac:	4613      	mov	r3, r2
 80108ae:	009b      	lsls	r3, r3, #2
 80108b0:	4413      	add	r3, r2
 80108b2:	009b      	lsls	r3, r3, #2
 80108b4:	440b      	add	r3, r1
 80108b6:	3318      	adds	r3, #24
 80108b8:	681a      	ldr	r2, [r3, #0]
 80108ba:	78f9      	ldrb	r1, [r7, #3]
 80108bc:	68f8      	ldr	r0, [r7, #12]
 80108be:	460b      	mov	r3, r1
 80108c0:	00db      	lsls	r3, r3, #3
 80108c2:	1a5b      	subs	r3, r3, r1
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	4403      	add	r3, r0
 80108c8:	3344      	adds	r3, #68	; 0x44
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	fbb2 f1f3 	udiv	r1, r2, r3
 80108d0:	fb03 f301 	mul.w	r3, r3, r1
 80108d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d110      	bne.n	80108fc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80108da:	78fa      	ldrb	r2, [r7, #3]
 80108dc:	6879      	ldr	r1, [r7, #4]
 80108de:	4613      	mov	r3, r2
 80108e0:	009b      	lsls	r3, r3, #2
 80108e2:	4413      	add	r3, r2
 80108e4:	009b      	lsls	r3, r3, #2
 80108e6:	440b      	add	r3, r1
 80108e8:	3318      	adds	r3, #24
 80108ea:	2200      	movs	r2, #0
 80108ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80108ee:	78f9      	ldrb	r1, [r7, #3]
 80108f0:	2300      	movs	r3, #0
 80108f2:	2200      	movs	r2, #0
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f009 fa3c 	bl	8019d72 <USBD_LL_Transmit>
 80108fa:	e015      	b.n	8010928 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	2200      	movs	r2, #0
 8010900:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801090a:	691b      	ldr	r3, [r3, #16]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00b      	beq.n	8010928 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	68ba      	ldr	r2, [r7, #8]
 801091a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 801091e:	68ba      	ldr	r2, [r7, #8]
 8010920:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010924:	78fa      	ldrb	r2, [r7, #3]
 8010926:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010928:	2300      	movs	r3, #0
}
 801092a:	4618      	mov	r0, r3
 801092c:	3710      	adds	r7, #16
 801092e:	46bd      	mov	sp, r7
 8010930:	bd80      	pop	{r7, pc}

08010932 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	460b      	mov	r3, r1
 801093c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010944:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801094c:	2b00      	cmp	r3, #0
 801094e:	d101      	bne.n	8010954 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010950:	2303      	movs	r3, #3
 8010952:	e015      	b.n	8010980 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010954:	78fb      	ldrb	r3, [r7, #3]
 8010956:	4619      	mov	r1, r3
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f009 fa4c 	bl	8019df6 <USBD_LL_GetRxDataSize>
 801095e:	4602      	mov	r2, r0
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801096c:	68db      	ldr	r3, [r3, #12]
 801096e:	68fa      	ldr	r2, [r7, #12]
 8010970:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801097a:	4611      	mov	r1, r2
 801097c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	3710      	adds	r7, #16
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b084      	sub	sp, #16
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010996:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d101      	bne.n	80109a2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 801099e:	2303      	movs	r3, #3
 80109a0:	e01b      	b.n	80109da <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d015      	beq.n	80109d8 <USBD_CDC_EP0_RxReady+0x50>
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80109b2:	2bff      	cmp	r3, #255	; 0xff
 80109b4:	d010      	beq.n	80109d8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80109bc:	689b      	ldr	r3, [r3, #8]
 80109be:	68fa      	ldr	r2, [r7, #12]
 80109c0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80109c4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80109c6:	68fa      	ldr	r2, [r7, #12]
 80109c8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80109cc:	b292      	uxth	r2, r2
 80109ce:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	22ff      	movs	r2, #255	; 0xff
 80109d4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
	...

080109e4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80109e4:	b480      	push	{r7}
 80109e6:	b083      	sub	sp, #12
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2243      	movs	r2, #67	; 0x43
 80109f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80109f2:	4b03      	ldr	r3, [pc, #12]	; (8010a00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	370c      	adds	r7, #12
 80109f8:	46bd      	mov	sp, r7
 80109fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109fe:	4770      	bx	lr
 8010a00:	20000170 	.word	0x20000170

08010a04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010a04:	b480      	push	{r7}
 8010a06:	b083      	sub	sp, #12
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2243      	movs	r2, #67	; 0x43
 8010a10:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010a12:	4b03      	ldr	r3, [pc, #12]	; (8010a20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	370c      	adds	r7, #12
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr
 8010a20:	2000012c 	.word	0x2000012c

08010a24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010a24:	b480      	push	{r7}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2243      	movs	r2, #67	; 0x43
 8010a30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010a32:	4b03      	ldr	r3, [pc, #12]	; (8010a40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010a34:	4618      	mov	r0, r3
 8010a36:	370c      	adds	r7, #12
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr
 8010a40:	200001b4 	.word	0x200001b4

08010a44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010a44:	b480      	push	{r7}
 8010a46:	b083      	sub	sp, #12
 8010a48:	af00      	add	r7, sp, #0
 8010a4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	220a      	movs	r2, #10
 8010a50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010a52:	4b03      	ldr	r3, [pc, #12]	; (8010a60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010a54:	4618      	mov	r0, r3
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr
 8010a60:	200000e8 	.word	0x200000e8

08010a64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010a64:	b480      	push	{r7}
 8010a66:	b083      	sub	sp, #12
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d101      	bne.n	8010a78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010a74:	2303      	movs	r3, #3
 8010a76:	e004      	b.n	8010a82 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010a80:	2300      	movs	r3, #0
}
 8010a82:	4618      	mov	r0, r3
 8010a84:	370c      	adds	r7, #12
 8010a86:	46bd      	mov	sp, r7
 8010a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8c:	4770      	bx	lr

08010a8e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010a8e:	b480      	push	{r7}
 8010a90:	b087      	sub	sp, #28
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	60f8      	str	r0, [r7, #12]
 8010a96:	60b9      	str	r1, [r7, #8]
 8010a98:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010aa0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010aa2:	697b      	ldr	r3, [r7, #20]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d101      	bne.n	8010aac <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	e008      	b.n	8010abe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	68ba      	ldr	r2, [r7, #8]
 8010ab0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010ab4:	697b      	ldr	r3, [r7, #20]
 8010ab6:	687a      	ldr	r2, [r7, #4]
 8010ab8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010abc:	2300      	movs	r3, #0
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	371c      	adds	r7, #28
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr

08010aca <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010aca:	b480      	push	{r7}
 8010acc:	b085      	sub	sp, #20
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
 8010ad2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010ada:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d101      	bne.n	8010ae6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8010ae2:	2303      	movs	r3, #3
 8010ae4:	e004      	b.n	8010af0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	683a      	ldr	r2, [r7, #0]
 8010aea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3714      	adds	r7, #20
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010b0c:	2301      	movs	r3, #1
 8010b0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d101      	bne.n	8010b1e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b1a:	2303      	movs	r3, #3
 8010b1c:	e01a      	b.n	8010b54 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8010b1e:	68bb      	ldr	r3, [r7, #8]
 8010b20:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d114      	bne.n	8010b52 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010b46:	2181      	movs	r1, #129	; 0x81
 8010b48:	6878      	ldr	r0, [r7, #4]
 8010b4a:	f009 f912 	bl	8019d72 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b54:	4618      	mov	r0, r3
 8010b56:	3710      	adds	r7, #16
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b6a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d101      	bne.n	8010b7a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8010b76:	2303      	movs	r3, #3
 8010b78:	e016      	b.n	8010ba8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	7c1b      	ldrb	r3, [r3, #16]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d109      	bne.n	8010b96 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b8c:	2101      	movs	r1, #1
 8010b8e:	6878      	ldr	r0, [r7, #4]
 8010b90:	f009 f910 	bl	8019db4 <USBD_LL_PrepareReceive>
 8010b94:	e007      	b.n	8010ba6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010b9c:	2340      	movs	r3, #64	; 0x40
 8010b9e:	2101      	movs	r1, #1
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f009 f907 	bl	8019db4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ba6:	2300      	movs	r3, #0
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3710      	adds	r7, #16
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b086      	sub	sp, #24
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	4613      	mov	r3, r2
 8010bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d101      	bne.n	8010bc8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010bc4:	2303      	movs	r3, #3
 8010bc6:	e01f      	b.n	8010c08 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	2200      	movs	r2, #0
 8010bdc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d003      	beq.n	8010bee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	68ba      	ldr	r2, [r7, #8]
 8010bea:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	79fa      	ldrb	r2, [r7, #7]
 8010bfa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010bfc:	68f8      	ldr	r0, [r7, #12]
 8010bfe:	f008 ff83 	bl	8019b08 <USBD_LL_Init>
 8010c02:	4603      	mov	r3, r0
 8010c04:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3718      	adds	r7, #24
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	bd80      	pop	{r7, pc}

08010c10 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d101      	bne.n	8010c28 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010c24:	2303      	movs	r3, #3
 8010c26:	e016      	b.n	8010c56 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	683a      	ldr	r2, [r7, #0]
 8010c2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00b      	beq.n	8010c54 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c44:	f107 020e 	add.w	r2, r7, #14
 8010c48:	4610      	mov	r0, r2
 8010c4a:	4798      	blx	r3
 8010c4c:	4602      	mov	r2, r0
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8010c54:	2300      	movs	r3, #0
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3710      	adds	r7, #16
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}

08010c5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010c5e:	b580      	push	{r7, lr}
 8010c60:	b082      	sub	sp, #8
 8010c62:	af00      	add	r7, sp, #0
 8010c64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f008 ff9a 	bl	8019ba0 <USBD_LL_Start>
 8010c6c:	4603      	mov	r3, r0
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3708      	adds	r7, #8
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}

08010c76 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8010c76:	b480      	push	{r7}
 8010c78:	b083      	sub	sp, #12
 8010c7a:	af00      	add	r7, sp, #0
 8010c7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010c7e:	2300      	movs	r3, #0
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr

08010c8c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
 8010c94:	460b      	mov	r3, r1
 8010c96:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8010c98:	2303      	movs	r3, #3
 8010c9a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d009      	beq.n	8010cba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	78fa      	ldrb	r2, [r7, #3]
 8010cb0:	4611      	mov	r1, r2
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	4798      	blx	r3
 8010cb6:	4603      	mov	r3, r0
 8010cb8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d007      	beq.n	8010cea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ce0:	685b      	ldr	r3, [r3, #4]
 8010ce2:	78fa      	ldrb	r2, [r7, #3]
 8010ce4:	4611      	mov	r1, r2
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	4798      	blx	r3
  }

  return USBD_OK;
 8010cea:	2300      	movs	r3, #0
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b084      	sub	sp, #16
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
 8010cfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d04:	6839      	ldr	r1, [r7, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 ff90 	bl	8011c2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2201      	movs	r2, #1
 8010d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8010d1a:	461a      	mov	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010d28:	f003 031f 	and.w	r3, r3, #31
 8010d2c:	2b02      	cmp	r3, #2
 8010d2e:	d01a      	beq.n	8010d66 <USBD_LL_SetupStage+0x72>
 8010d30:	2b02      	cmp	r3, #2
 8010d32:	d822      	bhi.n	8010d7a <USBD_LL_SetupStage+0x86>
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <USBD_LL_SetupStage+0x4a>
 8010d38:	2b01      	cmp	r3, #1
 8010d3a:	d00a      	beq.n	8010d52 <USBD_LL_SetupStage+0x5e>
 8010d3c:	e01d      	b.n	8010d7a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d44:	4619      	mov	r1, r3
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 fa62 	bl	8011210 <USBD_StdDevReq>
 8010d4c:	4603      	mov	r3, r0
 8010d4e:	73fb      	strb	r3, [r7, #15]
      break;
 8010d50:	e020      	b.n	8010d94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d58:	4619      	mov	r1, r3
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 fac6 	bl	80112ec <USBD_StdItfReq>
 8010d60:	4603      	mov	r3, r0
 8010d62:	73fb      	strb	r3, [r7, #15]
      break;
 8010d64:	e016      	b.n	8010d94 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f000 fb05 	bl	801137e <USBD_StdEPReq>
 8010d74:	4603      	mov	r3, r0
 8010d76:	73fb      	strb	r3, [r7, #15]
      break;
 8010d78:	e00c      	b.n	8010d94 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010d80:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010d84:	b2db      	uxtb	r3, r3
 8010d86:	4619      	mov	r1, r3
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f008 ff69 	bl	8019c60 <USBD_LL_StallEP>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	73fb      	strb	r3, [r7, #15]
      break;
 8010d92:	bf00      	nop
  }

  return ret;
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d96:	4618      	mov	r0, r3
 8010d98:	3710      	adds	r7, #16
 8010d9a:	46bd      	mov	sp, r7
 8010d9c:	bd80      	pop	{r7, pc}

08010d9e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010d9e:	b580      	push	{r7, lr}
 8010da0:	b086      	sub	sp, #24
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	60f8      	str	r0, [r7, #12]
 8010da6:	460b      	mov	r3, r1
 8010da8:	607a      	str	r2, [r7, #4]
 8010daa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010dac:	7afb      	ldrb	r3, [r7, #11]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d138      	bne.n	8010e24 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010db8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010dc0:	2b03      	cmp	r3, #3
 8010dc2:	d14a      	bne.n	8010e5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010dc4:	693b      	ldr	r3, [r7, #16]
 8010dc6:	689a      	ldr	r2, [r3, #8]
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	68db      	ldr	r3, [r3, #12]
 8010dcc:	429a      	cmp	r2, r3
 8010dce:	d913      	bls.n	8010df8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	689a      	ldr	r2, [r3, #8]
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	68db      	ldr	r3, [r3, #12]
 8010dd8:	1ad2      	subs	r2, r2, r3
 8010dda:	693b      	ldr	r3, [r7, #16]
 8010ddc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010dde:	693b      	ldr	r3, [r7, #16]
 8010de0:	68da      	ldr	r2, [r3, #12]
 8010de2:	693b      	ldr	r3, [r7, #16]
 8010de4:	689b      	ldr	r3, [r3, #8]
 8010de6:	4293      	cmp	r3, r2
 8010de8:	bf28      	it	cs
 8010dea:	4613      	movcs	r3, r2
 8010dec:	461a      	mov	r2, r3
 8010dee:	6879      	ldr	r1, [r7, #4]
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f001 f80f 	bl	8011e14 <USBD_CtlContinueRx>
 8010df6:	e030      	b.n	8010e5a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010dfe:	b2db      	uxtb	r3, r3
 8010e00:	2b03      	cmp	r3, #3
 8010e02:	d10b      	bne.n	8010e1c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d005      	beq.n	8010e1c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e16:	691b      	ldr	r3, [r3, #16]
 8010e18:	68f8      	ldr	r0, [r7, #12]
 8010e1a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8010e1c:	68f8      	ldr	r0, [r7, #12]
 8010e1e:	f001 f80a 	bl	8011e36 <USBD_CtlSendStatus>
 8010e22:	e01a      	b.n	8010e5a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010e2a:	b2db      	uxtb	r3, r3
 8010e2c:	2b03      	cmp	r3, #3
 8010e2e:	d114      	bne.n	8010e5a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e36:	699b      	ldr	r3, [r3, #24]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00e      	beq.n	8010e5a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	7afa      	ldrb	r2, [r7, #11]
 8010e46:	4611      	mov	r1, r2
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	4798      	blx	r3
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8010e56:	7dfb      	ldrb	r3, [r7, #23]
 8010e58:	e000      	b.n	8010e5c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8010e5a:	2300      	movs	r3, #0
}
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	3718      	adds	r7, #24
 8010e60:	46bd      	mov	sp, r7
 8010e62:	bd80      	pop	{r7, pc}

08010e64 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b086      	sub	sp, #24
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	60f8      	str	r0, [r7, #12]
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	607a      	str	r2, [r7, #4]
 8010e70:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8010e72:	7afb      	ldrb	r3, [r7, #11]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d16b      	bne.n	8010f50 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	3314      	adds	r3, #20
 8010e7c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8010e84:	2b02      	cmp	r3, #2
 8010e86:	d156      	bne.n	8010f36 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8010e88:	693b      	ldr	r3, [r7, #16]
 8010e8a:	689a      	ldr	r2, [r3, #8]
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d914      	bls.n	8010ebe <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	689a      	ldr	r2, [r3, #8]
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	1ad2      	subs	r2, r2, r3
 8010e9e:	693b      	ldr	r3, [r7, #16]
 8010ea0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010ea2:	693b      	ldr	r3, [r7, #16]
 8010ea4:	689b      	ldr	r3, [r3, #8]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	6879      	ldr	r1, [r7, #4]
 8010eaa:	68f8      	ldr	r0, [r7, #12]
 8010eac:	f000 ff84 	bl	8011db8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010eb0:	2300      	movs	r3, #0
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	2100      	movs	r1, #0
 8010eb6:	68f8      	ldr	r0, [r7, #12]
 8010eb8:	f008 ff7c 	bl	8019db4 <USBD_LL_PrepareReceive>
 8010ebc:	e03b      	b.n	8010f36 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	68da      	ldr	r2, [r3, #12]
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	689b      	ldr	r3, [r3, #8]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d11c      	bne.n	8010f04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010eca:	693b      	ldr	r3, [r7, #16]
 8010ecc:	685a      	ldr	r2, [r3, #4]
 8010ece:	693b      	ldr	r3, [r7, #16]
 8010ed0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d316      	bcc.n	8010f04 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	685a      	ldr	r2, [r3, #4]
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d20f      	bcs.n	8010f04 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	2100      	movs	r1, #0
 8010ee8:	68f8      	ldr	r0, [r7, #12]
 8010eea:	f000 ff65 	bl	8011db8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	2200      	movs	r2, #0
 8010efa:	2100      	movs	r1, #0
 8010efc:	68f8      	ldr	r0, [r7, #12]
 8010efe:	f008 ff59 	bl	8019db4 <USBD_LL_PrepareReceive>
 8010f02:	e018      	b.n	8010f36 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	2b03      	cmp	r3, #3
 8010f0e:	d10b      	bne.n	8010f28 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d005      	beq.n	8010f28 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f22:	68db      	ldr	r3, [r3, #12]
 8010f24:	68f8      	ldr	r0, [r7, #12]
 8010f26:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010f28:	2180      	movs	r1, #128	; 0x80
 8010f2a:	68f8      	ldr	r0, [r7, #12]
 8010f2c:	f008 fe98 	bl	8019c60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f000 ff93 	bl	8011e5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010f3c:	2b01      	cmp	r3, #1
 8010f3e:	d122      	bne.n	8010f86 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8010f40:	68f8      	ldr	r0, [r7, #12]
 8010f42:	f7ff fe98 	bl	8010c76 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	2200      	movs	r2, #0
 8010f4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010f4e:	e01a      	b.n	8010f86 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f56:	b2db      	uxtb	r3, r3
 8010f58:	2b03      	cmp	r3, #3
 8010f5a:	d114      	bne.n	8010f86 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f62:	695b      	ldr	r3, [r3, #20]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d00e      	beq.n	8010f86 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010f6e:	695b      	ldr	r3, [r3, #20]
 8010f70:	7afa      	ldrb	r2, [r7, #11]
 8010f72:	4611      	mov	r1, r2
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	4798      	blx	r3
 8010f78:	4603      	mov	r3, r0
 8010f7a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8010f7c:	7dfb      	ldrb	r3, [r7, #23]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d001      	beq.n	8010f86 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8010f82:	7dfb      	ldrb	r3, [r7, #23]
 8010f84:	e000      	b.n	8010f88 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8010f86:	2300      	movs	r3, #0
}
 8010f88:	4618      	mov	r0, r3
 8010f8a:	3718      	adds	r7, #24
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b082      	sub	sp, #8
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	2201      	movs	r2, #1
 8010f9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	2200      	movs	r2, #0
 8010fac:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d101      	bne.n	8010fc4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8010fc0:	2303      	movs	r3, #3
 8010fc2:	e02f      	b.n	8011024 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00f      	beq.n	8010fee <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d009      	beq.n	8010fee <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	687a      	ldr	r2, [r7, #4]
 8010fe4:	6852      	ldr	r2, [r2, #4]
 8010fe6:	b2d2      	uxtb	r2, r2
 8010fe8:	4611      	mov	r1, r2
 8010fea:	6878      	ldr	r0, [r7, #4]
 8010fec:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010fee:	2340      	movs	r3, #64	; 0x40
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f008 fdee 	bl	8019bd6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	2201      	movs	r2, #1
 8010ffe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2240      	movs	r2, #64	; 0x40
 8011006:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801100a:	2340      	movs	r3, #64	; 0x40
 801100c:	2200      	movs	r2, #0
 801100e:	2180      	movs	r1, #128	; 0x80
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f008 fde0 	bl	8019bd6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2201      	movs	r2, #1
 801101a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2240      	movs	r2, #64	; 0x40
 8011020:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011022:	2300      	movs	r3, #0
}
 8011024:	4618      	mov	r0, r3
 8011026:	3708      	adds	r7, #8
 8011028:	46bd      	mov	sp, r7
 801102a:	bd80      	pop	{r7, pc}

0801102c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801102c:	b480      	push	{r7}
 801102e:	b083      	sub	sp, #12
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	460b      	mov	r3, r1
 8011036:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	78fa      	ldrb	r2, [r7, #3]
 801103c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801104c:	b480      	push	{r7}
 801104e:	b083      	sub	sp, #12
 8011050:	af00      	add	r7, sp, #0
 8011052:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801105a:	b2da      	uxtb	r2, r3
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2204      	movs	r2, #4
 8011066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	370c      	adds	r7, #12
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011078:	b480      	push	{r7}
 801107a:	b083      	sub	sp, #12
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011086:	b2db      	uxtb	r3, r3
 8011088:	2b04      	cmp	r3, #4
 801108a:	d106      	bne.n	801109a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8011092:	b2da      	uxtb	r2, r3
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801109a:	2300      	movs	r3, #0
}
 801109c:	4618      	mov	r0, r3
 801109e:	370c      	adds	r7, #12
 80110a0:	46bd      	mov	sp, r7
 80110a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a6:	4770      	bx	lr

080110a8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d101      	bne.n	80110be <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80110ba:	2303      	movs	r3, #3
 80110bc:	e012      	b.n	80110e4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	2b03      	cmp	r3, #3
 80110c8:	d10b      	bne.n	80110e2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110d0:	69db      	ldr	r3, [r3, #28]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d005      	beq.n	80110e2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110dc:	69db      	ldr	r3, [r3, #28]
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80110e2:	2300      	movs	r3, #0
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3708      	adds	r7, #8
 80110e8:	46bd      	mov	sp, r7
 80110ea:	bd80      	pop	{r7, pc}

080110ec <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
 80110f2:	6078      	str	r0, [r7, #4]
 80110f4:	460b      	mov	r3, r1
 80110f6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d101      	bne.n	8011106 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8011102:	2303      	movs	r3, #3
 8011104:	e014      	b.n	8011130 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801110c:	b2db      	uxtb	r3, r3
 801110e:	2b03      	cmp	r3, #3
 8011110:	d10d      	bne.n	801112e <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011118:	6a1b      	ldr	r3, [r3, #32]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d007      	beq.n	801112e <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011124:	6a1b      	ldr	r3, [r3, #32]
 8011126:	78fa      	ldrb	r2, [r7, #3]
 8011128:	4611      	mov	r1, r2
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801112e:	2300      	movs	r3, #0
}
 8011130:	4618      	mov	r0, r3
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	460b      	mov	r3, r1
 8011142:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801114a:	2b00      	cmp	r3, #0
 801114c:	d101      	bne.n	8011152 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 801114e:	2303      	movs	r3, #3
 8011150:	e014      	b.n	801117c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011158:	b2db      	uxtb	r3, r3
 801115a:	2b03      	cmp	r3, #3
 801115c:	d10d      	bne.n	801117a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011166:	2b00      	cmp	r3, #0
 8011168:	d007      	beq.n	801117a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011172:	78fa      	ldrb	r2, [r7, #3]
 8011174:	4611      	mov	r1, r2
 8011176:	6878      	ldr	r0, [r7, #4]
 8011178:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801117a:	2300      	movs	r3, #0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801118c:	2300      	movs	r3, #0
}
 801118e:	4618      	mov	r0, r3
 8011190:	370c      	adds	r7, #12
 8011192:	46bd      	mov	sp, r7
 8011194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011198:	4770      	bx	lr

0801119a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801119a:	b580      	push	{r7, lr}
 801119c:	b082      	sub	sp, #8
 801119e:	af00      	add	r7, sp, #0
 80111a0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2201      	movs	r2, #1
 80111a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d009      	beq.n	80111c8 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	687a      	ldr	r2, [r7, #4]
 80111be:	6852      	ldr	r2, [r2, #4]
 80111c0:	b2d2      	uxtb	r2, r2
 80111c2:	4611      	mov	r1, r2
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	4798      	blx	r3
  }

  return USBD_OK;
 80111c8:	2300      	movs	r3, #0
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3708      	adds	r7, #8
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}

080111d2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80111d2:	b480      	push	{r7}
 80111d4:	b087      	sub	sp, #28
 80111d6:	af00      	add	r7, sp, #0
 80111d8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	781b      	ldrb	r3, [r3, #0]
 80111e2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	3301      	adds	r3, #1
 80111e8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80111f0:	8a3b      	ldrh	r3, [r7, #16]
 80111f2:	021b      	lsls	r3, r3, #8
 80111f4:	b21a      	sxth	r2, r3
 80111f6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80111fa:	4313      	orrs	r3, r2
 80111fc:	b21b      	sxth	r3, r3
 80111fe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011200:	89fb      	ldrh	r3, [r7, #14]
}
 8011202:	4618      	mov	r0, r3
 8011204:	371c      	adds	r7, #28
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr
	...

08011210 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801121a:	2300      	movs	r3, #0
 801121c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801121e:	683b      	ldr	r3, [r7, #0]
 8011220:	781b      	ldrb	r3, [r3, #0]
 8011222:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011226:	2b40      	cmp	r3, #64	; 0x40
 8011228:	d005      	beq.n	8011236 <USBD_StdDevReq+0x26>
 801122a:	2b40      	cmp	r3, #64	; 0x40
 801122c:	d853      	bhi.n	80112d6 <USBD_StdDevReq+0xc6>
 801122e:	2b00      	cmp	r3, #0
 8011230:	d00b      	beq.n	801124a <USBD_StdDevReq+0x3a>
 8011232:	2b20      	cmp	r3, #32
 8011234:	d14f      	bne.n	80112d6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801123c:	689b      	ldr	r3, [r3, #8]
 801123e:	6839      	ldr	r1, [r7, #0]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	4798      	blx	r3
 8011244:	4603      	mov	r3, r0
 8011246:	73fb      	strb	r3, [r7, #15]
      break;
 8011248:	e04a      	b.n	80112e0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	785b      	ldrb	r3, [r3, #1]
 801124e:	2b09      	cmp	r3, #9
 8011250:	d83b      	bhi.n	80112ca <USBD_StdDevReq+0xba>
 8011252:	a201      	add	r2, pc, #4	; (adr r2, 8011258 <USBD_StdDevReq+0x48>)
 8011254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011258:	080112ad 	.word	0x080112ad
 801125c:	080112c1 	.word	0x080112c1
 8011260:	080112cb 	.word	0x080112cb
 8011264:	080112b7 	.word	0x080112b7
 8011268:	080112cb 	.word	0x080112cb
 801126c:	0801128b 	.word	0x0801128b
 8011270:	08011281 	.word	0x08011281
 8011274:	080112cb 	.word	0x080112cb
 8011278:	080112a3 	.word	0x080112a3
 801127c:	08011295 	.word	0x08011295
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011280:	6839      	ldr	r1, [r7, #0]
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f000 f9de 	bl	8011644 <USBD_GetDescriptor>
          break;
 8011288:	e024      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801128a:	6839      	ldr	r1, [r7, #0]
 801128c:	6878      	ldr	r0, [r7, #4]
 801128e:	f000 fb43 	bl	8011918 <USBD_SetAddress>
          break;
 8011292:	e01f      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011294:	6839      	ldr	r1, [r7, #0]
 8011296:	6878      	ldr	r0, [r7, #4]
 8011298:	f000 fb82 	bl	80119a0 <USBD_SetConfig>
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
          break;
 80112a0:	e018      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80112a2:	6839      	ldr	r1, [r7, #0]
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f000 fc21 	bl	8011aec <USBD_GetConfig>
          break;
 80112aa:	e013      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f000 fc52 	bl	8011b58 <USBD_GetStatus>
          break;
 80112b4:	e00e      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80112b6:	6839      	ldr	r1, [r7, #0]
 80112b8:	6878      	ldr	r0, [r7, #4]
 80112ba:	f000 fc81 	bl	8011bc0 <USBD_SetFeature>
          break;
 80112be:	e009      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80112c0:	6839      	ldr	r1, [r7, #0]
 80112c2:	6878      	ldr	r0, [r7, #4]
 80112c4:	f000 fc90 	bl	8011be8 <USBD_ClrFeature>
          break;
 80112c8:	e004      	b.n	80112d4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80112ca:	6839      	ldr	r1, [r7, #0]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f000 fce7 	bl	8011ca0 <USBD_CtlError>
          break;
 80112d2:	bf00      	nop
      }
      break;
 80112d4:	e004      	b.n	80112e0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80112d6:	6839      	ldr	r1, [r7, #0]
 80112d8:	6878      	ldr	r0, [r7, #4]
 80112da:	f000 fce1 	bl	8011ca0 <USBD_CtlError>
      break;
 80112de:	bf00      	nop
  }

  return ret;
 80112e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3710      	adds	r7, #16
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}
 80112ea:	bf00      	nop

080112ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112ec:	b580      	push	{r7, lr}
 80112ee:	b084      	sub	sp, #16
 80112f0:	af00      	add	r7, sp, #0
 80112f2:	6078      	str	r0, [r7, #4]
 80112f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80112f6:	2300      	movs	r3, #0
 80112f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	781b      	ldrb	r3, [r3, #0]
 80112fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011302:	2b40      	cmp	r3, #64	; 0x40
 8011304:	d005      	beq.n	8011312 <USBD_StdItfReq+0x26>
 8011306:	2b40      	cmp	r3, #64	; 0x40
 8011308:	d82f      	bhi.n	801136a <USBD_StdItfReq+0x7e>
 801130a:	2b00      	cmp	r3, #0
 801130c:	d001      	beq.n	8011312 <USBD_StdItfReq+0x26>
 801130e:	2b20      	cmp	r3, #32
 8011310:	d12b      	bne.n	801136a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011318:	b2db      	uxtb	r3, r3
 801131a:	3b01      	subs	r3, #1
 801131c:	2b02      	cmp	r3, #2
 801131e:	d81d      	bhi.n	801135c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	889b      	ldrh	r3, [r3, #4]
 8011324:	b2db      	uxtb	r3, r3
 8011326:	2b01      	cmp	r3, #1
 8011328:	d813      	bhi.n	8011352 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011330:	689b      	ldr	r3, [r3, #8]
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	4798      	blx	r3
 8011338:	4603      	mov	r3, r0
 801133a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	88db      	ldrh	r3, [r3, #6]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d110      	bne.n	8011366 <USBD_StdItfReq+0x7a>
 8011344:	7bfb      	ldrb	r3, [r7, #15]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10d      	bne.n	8011366 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 801134a:	6878      	ldr	r0, [r7, #4]
 801134c:	f000 fd73 	bl	8011e36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011350:	e009      	b.n	8011366 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8011352:	6839      	ldr	r1, [r7, #0]
 8011354:	6878      	ldr	r0, [r7, #4]
 8011356:	f000 fca3 	bl	8011ca0 <USBD_CtlError>
          break;
 801135a:	e004      	b.n	8011366 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 801135c:	6839      	ldr	r1, [r7, #0]
 801135e:	6878      	ldr	r0, [r7, #4]
 8011360:	f000 fc9e 	bl	8011ca0 <USBD_CtlError>
          break;
 8011364:	e000      	b.n	8011368 <USBD_StdItfReq+0x7c>
          break;
 8011366:	bf00      	nop
      }
      break;
 8011368:	e004      	b.n	8011374 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801136a:	6839      	ldr	r1, [r7, #0]
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f000 fc97 	bl	8011ca0 <USBD_CtlError>
      break;
 8011372:	bf00      	nop
  }

  return ret;
 8011374:	7bfb      	ldrb	r3, [r7, #15]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}

0801137e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801137e:	b580      	push	{r7, lr}
 8011380:	b084      	sub	sp, #16
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
 8011386:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	889b      	ldrh	r3, [r3, #4]
 8011390:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	781b      	ldrb	r3, [r3, #0]
 8011396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801139a:	2b40      	cmp	r3, #64	; 0x40
 801139c:	d007      	beq.n	80113ae <USBD_StdEPReq+0x30>
 801139e:	2b40      	cmp	r3, #64	; 0x40
 80113a0:	f200 8145 	bhi.w	801162e <USBD_StdEPReq+0x2b0>
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d00c      	beq.n	80113c2 <USBD_StdEPReq+0x44>
 80113a8:	2b20      	cmp	r3, #32
 80113aa:	f040 8140 	bne.w	801162e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113b4:	689b      	ldr	r3, [r3, #8]
 80113b6:	6839      	ldr	r1, [r7, #0]
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	4798      	blx	r3
 80113bc:	4603      	mov	r3, r0
 80113be:	73fb      	strb	r3, [r7, #15]
      break;
 80113c0:	e13a      	b.n	8011638 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80113c2:	683b      	ldr	r3, [r7, #0]
 80113c4:	785b      	ldrb	r3, [r3, #1]
 80113c6:	2b03      	cmp	r3, #3
 80113c8:	d007      	beq.n	80113da <USBD_StdEPReq+0x5c>
 80113ca:	2b03      	cmp	r3, #3
 80113cc:	f300 8129 	bgt.w	8011622 <USBD_StdEPReq+0x2a4>
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d07f      	beq.n	80114d4 <USBD_StdEPReq+0x156>
 80113d4:	2b01      	cmp	r3, #1
 80113d6:	d03c      	beq.n	8011452 <USBD_StdEPReq+0xd4>
 80113d8:	e123      	b.n	8011622 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80113e0:	b2db      	uxtb	r3, r3
 80113e2:	2b02      	cmp	r3, #2
 80113e4:	d002      	beq.n	80113ec <USBD_StdEPReq+0x6e>
 80113e6:	2b03      	cmp	r3, #3
 80113e8:	d016      	beq.n	8011418 <USBD_StdEPReq+0x9a>
 80113ea:	e02c      	b.n	8011446 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80113ec:	7bbb      	ldrb	r3, [r7, #14]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d00d      	beq.n	801140e <USBD_StdEPReq+0x90>
 80113f2:	7bbb      	ldrb	r3, [r7, #14]
 80113f4:	2b80      	cmp	r3, #128	; 0x80
 80113f6:	d00a      	beq.n	801140e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80113f8:	7bbb      	ldrb	r3, [r7, #14]
 80113fa:	4619      	mov	r1, r3
 80113fc:	6878      	ldr	r0, [r7, #4]
 80113fe:	f008 fc2f 	bl	8019c60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011402:	2180      	movs	r1, #128	; 0x80
 8011404:	6878      	ldr	r0, [r7, #4]
 8011406:	f008 fc2b 	bl	8019c60 <USBD_LL_StallEP>
 801140a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801140c:	e020      	b.n	8011450 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801140e:	6839      	ldr	r1, [r7, #0]
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f000 fc45 	bl	8011ca0 <USBD_CtlError>
              break;
 8011416:	e01b      	b.n	8011450 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	885b      	ldrh	r3, [r3, #2]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d10e      	bne.n	801143e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011420:	7bbb      	ldrb	r3, [r7, #14]
 8011422:	2b00      	cmp	r3, #0
 8011424:	d00b      	beq.n	801143e <USBD_StdEPReq+0xc0>
 8011426:	7bbb      	ldrb	r3, [r7, #14]
 8011428:	2b80      	cmp	r3, #128	; 0x80
 801142a:	d008      	beq.n	801143e <USBD_StdEPReq+0xc0>
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	88db      	ldrh	r3, [r3, #6]
 8011430:	2b00      	cmp	r3, #0
 8011432:	d104      	bne.n	801143e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011434:	7bbb      	ldrb	r3, [r7, #14]
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f008 fc11 	bl	8019c60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f000 fcf9 	bl	8011e36 <USBD_CtlSendStatus>

              break;
 8011444:	e004      	b.n	8011450 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8011446:	6839      	ldr	r1, [r7, #0]
 8011448:	6878      	ldr	r0, [r7, #4]
 801144a:	f000 fc29 	bl	8011ca0 <USBD_CtlError>
              break;
 801144e:	bf00      	nop
          }
          break;
 8011450:	e0ec      	b.n	801162c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011458:	b2db      	uxtb	r3, r3
 801145a:	2b02      	cmp	r3, #2
 801145c:	d002      	beq.n	8011464 <USBD_StdEPReq+0xe6>
 801145e:	2b03      	cmp	r3, #3
 8011460:	d016      	beq.n	8011490 <USBD_StdEPReq+0x112>
 8011462:	e030      	b.n	80114c6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011464:	7bbb      	ldrb	r3, [r7, #14]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d00d      	beq.n	8011486 <USBD_StdEPReq+0x108>
 801146a:	7bbb      	ldrb	r3, [r7, #14]
 801146c:	2b80      	cmp	r3, #128	; 0x80
 801146e:	d00a      	beq.n	8011486 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011470:	7bbb      	ldrb	r3, [r7, #14]
 8011472:	4619      	mov	r1, r3
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f008 fbf3 	bl	8019c60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801147a:	2180      	movs	r1, #128	; 0x80
 801147c:	6878      	ldr	r0, [r7, #4]
 801147e:	f008 fbef 	bl	8019c60 <USBD_LL_StallEP>
 8011482:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011484:	e025      	b.n	80114d2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8011486:	6839      	ldr	r1, [r7, #0]
 8011488:	6878      	ldr	r0, [r7, #4]
 801148a:	f000 fc09 	bl	8011ca0 <USBD_CtlError>
              break;
 801148e:	e020      	b.n	80114d2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011490:	683b      	ldr	r3, [r7, #0]
 8011492:	885b      	ldrh	r3, [r3, #2]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d11b      	bne.n	80114d0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011498:	7bbb      	ldrb	r3, [r7, #14]
 801149a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d004      	beq.n	80114ac <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80114a2:	7bbb      	ldrb	r3, [r7, #14]
 80114a4:	4619      	mov	r1, r3
 80114a6:	6878      	ldr	r0, [r7, #4]
 80114a8:	f008 fbf9 	bl	8019c9e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80114ac:	6878      	ldr	r0, [r7, #4]
 80114ae:	f000 fcc2 	bl	8011e36 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	6839      	ldr	r1, [r7, #0]
 80114bc:	6878      	ldr	r0, [r7, #4]
 80114be:	4798      	blx	r3
 80114c0:	4603      	mov	r3, r0
 80114c2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80114c4:	e004      	b.n	80114d0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80114c6:	6839      	ldr	r1, [r7, #0]
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f000 fbe9 	bl	8011ca0 <USBD_CtlError>
              break;
 80114ce:	e000      	b.n	80114d2 <USBD_StdEPReq+0x154>
              break;
 80114d0:	bf00      	nop
          }
          break;
 80114d2:	e0ab      	b.n	801162c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	2b02      	cmp	r3, #2
 80114de:	d002      	beq.n	80114e6 <USBD_StdEPReq+0x168>
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d032      	beq.n	801154a <USBD_StdEPReq+0x1cc>
 80114e4:	e097      	b.n	8011616 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80114e6:	7bbb      	ldrb	r3, [r7, #14]
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d007      	beq.n	80114fc <USBD_StdEPReq+0x17e>
 80114ec:	7bbb      	ldrb	r3, [r7, #14]
 80114ee:	2b80      	cmp	r3, #128	; 0x80
 80114f0:	d004      	beq.n	80114fc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80114f2:	6839      	ldr	r1, [r7, #0]
 80114f4:	6878      	ldr	r0, [r7, #4]
 80114f6:	f000 fbd3 	bl	8011ca0 <USBD_CtlError>
                break;
 80114fa:	e091      	b.n	8011620 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80114fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011500:	2b00      	cmp	r3, #0
 8011502:	da0b      	bge.n	801151c <USBD_StdEPReq+0x19e>
 8011504:	7bbb      	ldrb	r3, [r7, #14]
 8011506:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801150a:	4613      	mov	r3, r2
 801150c:	009b      	lsls	r3, r3, #2
 801150e:	4413      	add	r3, r2
 8011510:	009b      	lsls	r3, r3, #2
 8011512:	3310      	adds	r3, #16
 8011514:	687a      	ldr	r2, [r7, #4]
 8011516:	4413      	add	r3, r2
 8011518:	3304      	adds	r3, #4
 801151a:	e00b      	b.n	8011534 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801151c:	7bbb      	ldrb	r3, [r7, #14]
 801151e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011522:	4613      	mov	r3, r2
 8011524:	009b      	lsls	r3, r3, #2
 8011526:	4413      	add	r3, r2
 8011528:	009b      	lsls	r3, r3, #2
 801152a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801152e:	687a      	ldr	r2, [r7, #4]
 8011530:	4413      	add	r3, r2
 8011532:	3304      	adds	r3, #4
 8011534:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011536:	68bb      	ldr	r3, [r7, #8]
 8011538:	2200      	movs	r2, #0
 801153a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	2202      	movs	r2, #2
 8011540:	4619      	mov	r1, r3
 8011542:	6878      	ldr	r0, [r7, #4]
 8011544:	f000 fc1d 	bl	8011d82 <USBD_CtlSendData>
              break;
 8011548:	e06a      	b.n	8011620 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801154a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801154e:	2b00      	cmp	r3, #0
 8011550:	da11      	bge.n	8011576 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011552:	7bbb      	ldrb	r3, [r7, #14]
 8011554:	f003 020f 	and.w	r2, r3, #15
 8011558:	6879      	ldr	r1, [r7, #4]
 801155a:	4613      	mov	r3, r2
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	4413      	add	r3, r2
 8011560:	009b      	lsls	r3, r3, #2
 8011562:	440b      	add	r3, r1
 8011564:	3324      	adds	r3, #36	; 0x24
 8011566:	881b      	ldrh	r3, [r3, #0]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d117      	bne.n	801159c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801156c:	6839      	ldr	r1, [r7, #0]
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 fb96 	bl	8011ca0 <USBD_CtlError>
                  break;
 8011574:	e054      	b.n	8011620 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011576:	7bbb      	ldrb	r3, [r7, #14]
 8011578:	f003 020f 	and.w	r2, r3, #15
 801157c:	6879      	ldr	r1, [r7, #4]
 801157e:	4613      	mov	r3, r2
 8011580:	009b      	lsls	r3, r3, #2
 8011582:	4413      	add	r3, r2
 8011584:	009b      	lsls	r3, r3, #2
 8011586:	440b      	add	r3, r1
 8011588:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801158c:	881b      	ldrh	r3, [r3, #0]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d104      	bne.n	801159c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f000 fb83 	bl	8011ca0 <USBD_CtlError>
                  break;
 801159a:	e041      	b.n	8011620 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801159c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	da0b      	bge.n	80115bc <USBD_StdEPReq+0x23e>
 80115a4:	7bbb      	ldrb	r3, [r7, #14]
 80115a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80115aa:	4613      	mov	r3, r2
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	009b      	lsls	r3, r3, #2
 80115b2:	3310      	adds	r3, #16
 80115b4:	687a      	ldr	r2, [r7, #4]
 80115b6:	4413      	add	r3, r2
 80115b8:	3304      	adds	r3, #4
 80115ba:	e00b      	b.n	80115d4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80115bc:	7bbb      	ldrb	r3, [r7, #14]
 80115be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80115c2:	4613      	mov	r3, r2
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	4413      	add	r3, r2
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80115ce:	687a      	ldr	r2, [r7, #4]
 80115d0:	4413      	add	r3, r2
 80115d2:	3304      	adds	r3, #4
 80115d4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80115d6:	7bbb      	ldrb	r3, [r7, #14]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d002      	beq.n	80115e2 <USBD_StdEPReq+0x264>
 80115dc:	7bbb      	ldrb	r3, [r7, #14]
 80115de:	2b80      	cmp	r3, #128	; 0x80
 80115e0:	d103      	bne.n	80115ea <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	2200      	movs	r2, #0
 80115e6:	601a      	str	r2, [r3, #0]
 80115e8:	e00e      	b.n	8011608 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80115ea:	7bbb      	ldrb	r3, [r7, #14]
 80115ec:	4619      	mov	r1, r3
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f008 fb74 	bl	8019cdc <USBD_LL_IsStallEP>
 80115f4:	4603      	mov	r3, r0
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d003      	beq.n	8011602 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80115fa:	68bb      	ldr	r3, [r7, #8]
 80115fc:	2201      	movs	r2, #1
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	e002      	b.n	8011608 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8011602:	68bb      	ldr	r3, [r7, #8]
 8011604:	2200      	movs	r2, #0
 8011606:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	2202      	movs	r2, #2
 801160c:	4619      	mov	r1, r3
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f000 fbb7 	bl	8011d82 <USBD_CtlSendData>
              break;
 8011614:	e004      	b.n	8011620 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8011616:	6839      	ldr	r1, [r7, #0]
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 fb41 	bl	8011ca0 <USBD_CtlError>
              break;
 801161e:	bf00      	nop
          }
          break;
 8011620:	e004      	b.n	801162c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8011622:	6839      	ldr	r1, [r7, #0]
 8011624:	6878      	ldr	r0, [r7, #4]
 8011626:	f000 fb3b 	bl	8011ca0 <USBD_CtlError>
          break;
 801162a:	bf00      	nop
      }
      break;
 801162c:	e004      	b.n	8011638 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 801162e:	6839      	ldr	r1, [r7, #0]
 8011630:	6878      	ldr	r0, [r7, #4]
 8011632:	f000 fb35 	bl	8011ca0 <USBD_CtlError>
      break;
 8011636:	bf00      	nop
  }

  return ret;
 8011638:	7bfb      	ldrb	r3, [r7, #15]
}
 801163a:	4618      	mov	r0, r3
 801163c:	3710      	adds	r7, #16
 801163e:	46bd      	mov	sp, r7
 8011640:	bd80      	pop	{r7, pc}
	...

08011644 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801164e:	2300      	movs	r3, #0
 8011650:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011652:	2300      	movs	r3, #0
 8011654:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011656:	2300      	movs	r3, #0
 8011658:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801165a:	683b      	ldr	r3, [r7, #0]
 801165c:	885b      	ldrh	r3, [r3, #2]
 801165e:	0a1b      	lsrs	r3, r3, #8
 8011660:	b29b      	uxth	r3, r3
 8011662:	3b01      	subs	r3, #1
 8011664:	2b06      	cmp	r3, #6
 8011666:	f200 8128 	bhi.w	80118ba <USBD_GetDescriptor+0x276>
 801166a:	a201      	add	r2, pc, #4	; (adr r2, 8011670 <USBD_GetDescriptor+0x2c>)
 801166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011670:	0801168d 	.word	0x0801168d
 8011674:	080116a5 	.word	0x080116a5
 8011678:	080116e5 	.word	0x080116e5
 801167c:	080118bb 	.word	0x080118bb
 8011680:	080118bb 	.word	0x080118bb
 8011684:	0801185b 	.word	0x0801185b
 8011688:	08011887 	.word	0x08011887
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	7c12      	ldrb	r2, [r2, #16]
 8011698:	f107 0108 	add.w	r1, r7, #8
 801169c:	4610      	mov	r0, r2
 801169e:	4798      	blx	r3
 80116a0:	60f8      	str	r0, [r7, #12]
      break;
 80116a2:	e112      	b.n	80118ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	7c1b      	ldrb	r3, [r3, #16]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d10d      	bne.n	80116c8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80116b4:	f107 0208 	add.w	r2, r7, #8
 80116b8:	4610      	mov	r0, r2
 80116ba:	4798      	blx	r3
 80116bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	3301      	adds	r3, #1
 80116c2:	2202      	movs	r2, #2
 80116c4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80116c6:	e100      	b.n	80118ca <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80116ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d0:	f107 0208 	add.w	r2, r7, #8
 80116d4:	4610      	mov	r0, r2
 80116d6:	4798      	blx	r3
 80116d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	3301      	adds	r3, #1
 80116de:	2202      	movs	r2, #2
 80116e0:	701a      	strb	r2, [r3, #0]
      break;
 80116e2:	e0f2      	b.n	80118ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	885b      	ldrh	r3, [r3, #2]
 80116e8:	b2db      	uxtb	r3, r3
 80116ea:	2b05      	cmp	r3, #5
 80116ec:	f200 80ac 	bhi.w	8011848 <USBD_GetDescriptor+0x204>
 80116f0:	a201      	add	r2, pc, #4	; (adr r2, 80116f8 <USBD_GetDescriptor+0xb4>)
 80116f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116f6:	bf00      	nop
 80116f8:	08011711 	.word	0x08011711
 80116fc:	08011745 	.word	0x08011745
 8011700:	08011779 	.word	0x08011779
 8011704:	080117ad 	.word	0x080117ad
 8011708:	080117e1 	.word	0x080117e1
 801170c:	08011815 	.word	0x08011815
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011716:	685b      	ldr	r3, [r3, #4]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d00b      	beq.n	8011734 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	687a      	ldr	r2, [r7, #4]
 8011726:	7c12      	ldrb	r2, [r2, #16]
 8011728:	f107 0108 	add.w	r1, r7, #8
 801172c:	4610      	mov	r0, r2
 801172e:	4798      	blx	r3
 8011730:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011732:	e091      	b.n	8011858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011734:	6839      	ldr	r1, [r7, #0]
 8011736:	6878      	ldr	r0, [r7, #4]
 8011738:	f000 fab2 	bl	8011ca0 <USBD_CtlError>
            err++;
 801173c:	7afb      	ldrb	r3, [r7, #11]
 801173e:	3301      	adds	r3, #1
 8011740:	72fb      	strb	r3, [r7, #11]
          break;
 8011742:	e089      	b.n	8011858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801174a:	689b      	ldr	r3, [r3, #8]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d00b      	beq.n	8011768 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011756:	689b      	ldr	r3, [r3, #8]
 8011758:	687a      	ldr	r2, [r7, #4]
 801175a:	7c12      	ldrb	r2, [r2, #16]
 801175c:	f107 0108 	add.w	r1, r7, #8
 8011760:	4610      	mov	r0, r2
 8011762:	4798      	blx	r3
 8011764:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011766:	e077      	b.n	8011858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011768:	6839      	ldr	r1, [r7, #0]
 801176a:	6878      	ldr	r0, [r7, #4]
 801176c:	f000 fa98 	bl	8011ca0 <USBD_CtlError>
            err++;
 8011770:	7afb      	ldrb	r3, [r7, #11]
 8011772:	3301      	adds	r3, #1
 8011774:	72fb      	strb	r3, [r7, #11]
          break;
 8011776:	e06f      	b.n	8011858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801177e:	68db      	ldr	r3, [r3, #12]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d00b      	beq.n	801179c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	7c12      	ldrb	r2, [r2, #16]
 8011790:	f107 0108 	add.w	r1, r7, #8
 8011794:	4610      	mov	r0, r2
 8011796:	4798      	blx	r3
 8011798:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801179a:	e05d      	b.n	8011858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801179c:	6839      	ldr	r1, [r7, #0]
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 fa7e 	bl	8011ca0 <USBD_CtlError>
            err++;
 80117a4:	7afb      	ldrb	r3, [r7, #11]
 80117a6:	3301      	adds	r3, #1
 80117a8:	72fb      	strb	r3, [r7, #11]
          break;
 80117aa:	e055      	b.n	8011858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117b2:	691b      	ldr	r3, [r3, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d00b      	beq.n	80117d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117be:	691b      	ldr	r3, [r3, #16]
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	7c12      	ldrb	r2, [r2, #16]
 80117c4:	f107 0108 	add.w	r1, r7, #8
 80117c8:	4610      	mov	r0, r2
 80117ca:	4798      	blx	r3
 80117cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80117ce:	e043      	b.n	8011858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80117d0:	6839      	ldr	r1, [r7, #0]
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 fa64 	bl	8011ca0 <USBD_CtlError>
            err++;
 80117d8:	7afb      	ldrb	r3, [r7, #11]
 80117da:	3301      	adds	r3, #1
 80117dc:	72fb      	strb	r3, [r7, #11]
          break;
 80117de:	e03b      	b.n	8011858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117e6:	695b      	ldr	r3, [r3, #20]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00b      	beq.n	8011804 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80117f2:	695b      	ldr	r3, [r3, #20]
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	7c12      	ldrb	r2, [r2, #16]
 80117f8:	f107 0108 	add.w	r1, r7, #8
 80117fc:	4610      	mov	r0, r2
 80117fe:	4798      	blx	r3
 8011800:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011802:	e029      	b.n	8011858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011804:	6839      	ldr	r1, [r7, #0]
 8011806:	6878      	ldr	r0, [r7, #4]
 8011808:	f000 fa4a 	bl	8011ca0 <USBD_CtlError>
            err++;
 801180c:	7afb      	ldrb	r3, [r7, #11]
 801180e:	3301      	adds	r3, #1
 8011810:	72fb      	strb	r3, [r7, #11]
          break;
 8011812:	e021      	b.n	8011858 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801181a:	699b      	ldr	r3, [r3, #24]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d00b      	beq.n	8011838 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011826:	699b      	ldr	r3, [r3, #24]
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	7c12      	ldrb	r2, [r2, #16]
 801182c:	f107 0108 	add.w	r1, r7, #8
 8011830:	4610      	mov	r0, r2
 8011832:	4798      	blx	r3
 8011834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011836:	e00f      	b.n	8011858 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011838:	6839      	ldr	r1, [r7, #0]
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f000 fa30 	bl	8011ca0 <USBD_CtlError>
            err++;
 8011840:	7afb      	ldrb	r3, [r7, #11]
 8011842:	3301      	adds	r3, #1
 8011844:	72fb      	strb	r3, [r7, #11]
          break;
 8011846:	e007      	b.n	8011858 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011848:	6839      	ldr	r1, [r7, #0]
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 fa28 	bl	8011ca0 <USBD_CtlError>
          err++;
 8011850:	7afb      	ldrb	r3, [r7, #11]
 8011852:	3301      	adds	r3, #1
 8011854:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8011856:	bf00      	nop
      }
      break;
 8011858:	e037      	b.n	80118ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	7c1b      	ldrb	r3, [r3, #16]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d109      	bne.n	8011876 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801186a:	f107 0208 	add.w	r2, r7, #8
 801186e:	4610      	mov	r0, r2
 8011870:	4798      	blx	r3
 8011872:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011874:	e029      	b.n	80118ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011876:	6839      	ldr	r1, [r7, #0]
 8011878:	6878      	ldr	r0, [r7, #4]
 801187a:	f000 fa11 	bl	8011ca0 <USBD_CtlError>
        err++;
 801187e:	7afb      	ldrb	r3, [r7, #11]
 8011880:	3301      	adds	r3, #1
 8011882:	72fb      	strb	r3, [r7, #11]
      break;
 8011884:	e021      	b.n	80118ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	7c1b      	ldrb	r3, [r3, #16]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d10d      	bne.n	80118aa <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011896:	f107 0208 	add.w	r2, r7, #8
 801189a:	4610      	mov	r0, r2
 801189c:	4798      	blx	r3
 801189e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	3301      	adds	r3, #1
 80118a4:	2207      	movs	r2, #7
 80118a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80118a8:	e00f      	b.n	80118ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80118aa:	6839      	ldr	r1, [r7, #0]
 80118ac:	6878      	ldr	r0, [r7, #4]
 80118ae:	f000 f9f7 	bl	8011ca0 <USBD_CtlError>
        err++;
 80118b2:	7afb      	ldrb	r3, [r7, #11]
 80118b4:	3301      	adds	r3, #1
 80118b6:	72fb      	strb	r3, [r7, #11]
      break;
 80118b8:	e007      	b.n	80118ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80118ba:	6839      	ldr	r1, [r7, #0]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 f9ef 	bl	8011ca0 <USBD_CtlError>
      err++;
 80118c2:	7afb      	ldrb	r3, [r7, #11]
 80118c4:	3301      	adds	r3, #1
 80118c6:	72fb      	strb	r3, [r7, #11]
      break;
 80118c8:	bf00      	nop
  }

  if (err != 0U)
 80118ca:	7afb      	ldrb	r3, [r7, #11]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d11e      	bne.n	801190e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	88db      	ldrh	r3, [r3, #6]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d016      	beq.n	8011906 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80118d8:	893b      	ldrh	r3, [r7, #8]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00e      	beq.n	80118fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80118de:	683b      	ldr	r3, [r7, #0]
 80118e0:	88da      	ldrh	r2, [r3, #6]
 80118e2:	893b      	ldrh	r3, [r7, #8]
 80118e4:	4293      	cmp	r3, r2
 80118e6:	bf28      	it	cs
 80118e8:	4613      	movcs	r3, r2
 80118ea:	b29b      	uxth	r3, r3
 80118ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80118ee:	893b      	ldrh	r3, [r7, #8]
 80118f0:	461a      	mov	r2, r3
 80118f2:	68f9      	ldr	r1, [r7, #12]
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f000 fa44 	bl	8011d82 <USBD_CtlSendData>
 80118fa:	e009      	b.n	8011910 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80118fc:	6839      	ldr	r1, [r7, #0]
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	f000 f9ce 	bl	8011ca0 <USBD_CtlError>
 8011904:	e004      	b.n	8011910 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f000 fa95 	bl	8011e36 <USBD_CtlSendStatus>
 801190c:	e000      	b.n	8011910 <USBD_GetDescriptor+0x2cc>
    return;
 801190e:	bf00      	nop
  }
}
 8011910:	3710      	adds	r7, #16
 8011912:	46bd      	mov	sp, r7
 8011914:	bd80      	pop	{r7, pc}
 8011916:	bf00      	nop

08011918 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b084      	sub	sp, #16
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
 8011920:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	889b      	ldrh	r3, [r3, #4]
 8011926:	2b00      	cmp	r3, #0
 8011928:	d131      	bne.n	801198e <USBD_SetAddress+0x76>
 801192a:	683b      	ldr	r3, [r7, #0]
 801192c:	88db      	ldrh	r3, [r3, #6]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d12d      	bne.n	801198e <USBD_SetAddress+0x76>
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	885b      	ldrh	r3, [r3, #2]
 8011936:	2b7f      	cmp	r3, #127	; 0x7f
 8011938:	d829      	bhi.n	801198e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801193a:	683b      	ldr	r3, [r7, #0]
 801193c:	885b      	ldrh	r3, [r3, #2]
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011944:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801194c:	b2db      	uxtb	r3, r3
 801194e:	2b03      	cmp	r3, #3
 8011950:	d104      	bne.n	801195c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011952:	6839      	ldr	r1, [r7, #0]
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f000 f9a3 	bl	8011ca0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801195a:	e01d      	b.n	8011998 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	7bfa      	ldrb	r2, [r7, #15]
 8011960:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011964:	7bfb      	ldrb	r3, [r7, #15]
 8011966:	4619      	mov	r1, r3
 8011968:	6878      	ldr	r0, [r7, #4]
 801196a:	f008 f9e3 	bl	8019d34 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801196e:	6878      	ldr	r0, [r7, #4]
 8011970:	f000 fa61 	bl	8011e36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011974:	7bfb      	ldrb	r3, [r7, #15]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d004      	beq.n	8011984 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	2202      	movs	r2, #2
 801197e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011982:	e009      	b.n	8011998 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2201      	movs	r2, #1
 8011988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801198c:	e004      	b.n	8011998 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801198e:	6839      	ldr	r1, [r7, #0]
 8011990:	6878      	ldr	r0, [r7, #4]
 8011992:	f000 f985 	bl	8011ca0 <USBD_CtlError>
  }
}
 8011996:	bf00      	nop
 8011998:	bf00      	nop
 801199a:	3710      	adds	r7, #16
 801199c:	46bd      	mov	sp, r7
 801199e:	bd80      	pop	{r7, pc}

080119a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
 80119a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119aa:	2300      	movs	r3, #0
 80119ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80119ae:	683b      	ldr	r3, [r7, #0]
 80119b0:	885b      	ldrh	r3, [r3, #2]
 80119b2:	b2da      	uxtb	r2, r3
 80119b4:	4b4c      	ldr	r3, [pc, #304]	; (8011ae8 <USBD_SetConfig+0x148>)
 80119b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80119b8:	4b4b      	ldr	r3, [pc, #300]	; (8011ae8 <USBD_SetConfig+0x148>)
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	2b01      	cmp	r3, #1
 80119be:	d905      	bls.n	80119cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80119c0:	6839      	ldr	r1, [r7, #0]
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f96c 	bl	8011ca0 <USBD_CtlError>
    return USBD_FAIL;
 80119c8:	2303      	movs	r3, #3
 80119ca:	e088      	b.n	8011ade <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119d2:	b2db      	uxtb	r3, r3
 80119d4:	2b02      	cmp	r3, #2
 80119d6:	d002      	beq.n	80119de <USBD_SetConfig+0x3e>
 80119d8:	2b03      	cmp	r3, #3
 80119da:	d025      	beq.n	8011a28 <USBD_SetConfig+0x88>
 80119dc:	e071      	b.n	8011ac2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80119de:	4b42      	ldr	r3, [pc, #264]	; (8011ae8 <USBD_SetConfig+0x148>)
 80119e0:	781b      	ldrb	r3, [r3, #0]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d01c      	beq.n	8011a20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80119e6:	4b40      	ldr	r3, [pc, #256]	; (8011ae8 <USBD_SetConfig+0x148>)
 80119e8:	781b      	ldrb	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80119f0:	4b3d      	ldr	r3, [pc, #244]	; (8011ae8 <USBD_SetConfig+0x148>)
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	4619      	mov	r1, r3
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f7ff f948 	bl	8010c8c <USBD_SetClassConfig>
 80119fc:	4603      	mov	r3, r0
 80119fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011a00:	7bfb      	ldrb	r3, [r7, #15]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d004      	beq.n	8011a10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8011a06:	6839      	ldr	r1, [r7, #0]
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f949 	bl	8011ca0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011a0e:	e065      	b.n	8011adc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011a10:	6878      	ldr	r0, [r7, #4]
 8011a12:	f000 fa10 	bl	8011e36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	2203      	movs	r2, #3
 8011a1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011a1e:	e05d      	b.n	8011adc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f000 fa08 	bl	8011e36 <USBD_CtlSendStatus>
      break;
 8011a26:	e059      	b.n	8011adc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011a28:	4b2f      	ldr	r3, [pc, #188]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011a2a:	781b      	ldrb	r3, [r3, #0]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d112      	bne.n	8011a56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2202      	movs	r2, #2
 8011a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8011a38:	4b2b      	ldr	r3, [pc, #172]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	461a      	mov	r2, r3
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011a42:	4b29      	ldr	r3, [pc, #164]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	4619      	mov	r1, r3
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f7ff f93b 	bl	8010cc4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011a4e:	6878      	ldr	r0, [r7, #4]
 8011a50:	f000 f9f1 	bl	8011e36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011a54:	e042      	b.n	8011adc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8011a56:	4b24      	ldr	r3, [pc, #144]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011a58:	781b      	ldrb	r3, [r3, #0]
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	685b      	ldr	r3, [r3, #4]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d02a      	beq.n	8011aba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	b2db      	uxtb	r3, r3
 8011a6a:	4619      	mov	r1, r3
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f7ff f929 	bl	8010cc4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011a72:	4b1d      	ldr	r3, [pc, #116]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011a74:	781b      	ldrb	r3, [r3, #0]
 8011a76:	461a      	mov	r2, r3
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011a7c:	4b1a      	ldr	r3, [pc, #104]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	4619      	mov	r1, r3
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f7ff f902 	bl	8010c8c <USBD_SetClassConfig>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8011a8c:	7bfb      	ldrb	r3, [r7, #15]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00f      	beq.n	8011ab2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8011a92:	6839      	ldr	r1, [r7, #0]
 8011a94:	6878      	ldr	r0, [r7, #4]
 8011a96:	f000 f903 	bl	8011ca0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	4619      	mov	r1, r3
 8011aa2:	6878      	ldr	r0, [r7, #4]
 8011aa4:	f7ff f90e 	bl	8010cc4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2202      	movs	r2, #2
 8011aac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8011ab0:	e014      	b.n	8011adc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8011ab2:	6878      	ldr	r0, [r7, #4]
 8011ab4:	f000 f9bf 	bl	8011e36 <USBD_CtlSendStatus>
      break;
 8011ab8:	e010      	b.n	8011adc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8011aba:	6878      	ldr	r0, [r7, #4]
 8011abc:	f000 f9bb 	bl	8011e36 <USBD_CtlSendStatus>
      break;
 8011ac0:	e00c      	b.n	8011adc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8011ac2:	6839      	ldr	r1, [r7, #0]
 8011ac4:	6878      	ldr	r0, [r7, #4]
 8011ac6:	f000 f8eb 	bl	8011ca0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011aca:	4b07      	ldr	r3, [pc, #28]	; (8011ae8 <USBD_SetConfig+0x148>)
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	6878      	ldr	r0, [r7, #4]
 8011ad2:	f7ff f8f7 	bl	8010cc4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011ad6:	2303      	movs	r3, #3
 8011ad8:	73fb      	strb	r3, [r7, #15]
      break;
 8011ada:	bf00      	nop
  }

  return ret;
 8011adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
 8011ae6:	bf00      	nop
 8011ae8:	20002854 	.word	0x20002854

08011aec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aec:	b580      	push	{r7, lr}
 8011aee:	b082      	sub	sp, #8
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	6078      	str	r0, [r7, #4]
 8011af4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	88db      	ldrh	r3, [r3, #6]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d004      	beq.n	8011b08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011afe:	6839      	ldr	r1, [r7, #0]
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 f8cd 	bl	8011ca0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011b06:	e023      	b.n	8011b50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b0e:	b2db      	uxtb	r3, r3
 8011b10:	2b02      	cmp	r3, #2
 8011b12:	dc02      	bgt.n	8011b1a <USBD_GetConfig+0x2e>
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	dc03      	bgt.n	8011b20 <USBD_GetConfig+0x34>
 8011b18:	e015      	b.n	8011b46 <USBD_GetConfig+0x5a>
 8011b1a:	2b03      	cmp	r3, #3
 8011b1c:	d00b      	beq.n	8011b36 <USBD_GetConfig+0x4a>
 8011b1e:	e012      	b.n	8011b46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2200      	movs	r2, #0
 8011b24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	3308      	adds	r3, #8
 8011b2a:	2201      	movs	r2, #1
 8011b2c:	4619      	mov	r1, r3
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f000 f927 	bl	8011d82 <USBD_CtlSendData>
        break;
 8011b34:	e00c      	b.n	8011b50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	3304      	adds	r3, #4
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 f91f 	bl	8011d82 <USBD_CtlSendData>
        break;
 8011b44:	e004      	b.n	8011b50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011b46:	6839      	ldr	r1, [r7, #0]
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	f000 f8a9 	bl	8011ca0 <USBD_CtlError>
        break;
 8011b4e:	bf00      	nop
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}

08011b58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b68:	b2db      	uxtb	r3, r3
 8011b6a:	3b01      	subs	r3, #1
 8011b6c:	2b02      	cmp	r3, #2
 8011b6e:	d81e      	bhi.n	8011bae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011b70:	683b      	ldr	r3, [r7, #0]
 8011b72:	88db      	ldrh	r3, [r3, #6]
 8011b74:	2b02      	cmp	r3, #2
 8011b76:	d004      	beq.n	8011b82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f000 f890 	bl	8011ca0 <USBD_CtlError>
        break;
 8011b80:	e01a      	b.n	8011bb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2201      	movs	r2, #1
 8011b86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d005      	beq.n	8011b9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	f043 0202 	orr.w	r2, r3, #2
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	330c      	adds	r3, #12
 8011ba2:	2202      	movs	r2, #2
 8011ba4:	4619      	mov	r1, r3
 8011ba6:	6878      	ldr	r0, [r7, #4]
 8011ba8:	f000 f8eb 	bl	8011d82 <USBD_CtlSendData>
      break;
 8011bac:	e004      	b.n	8011bb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8011bae:	6839      	ldr	r1, [r7, #0]
 8011bb0:	6878      	ldr	r0, [r7, #4]
 8011bb2:	f000 f875 	bl	8011ca0 <USBD_CtlError>
      break;
 8011bb6:	bf00      	nop
  }
}
 8011bb8:	bf00      	nop
 8011bba:	3708      	adds	r7, #8
 8011bbc:	46bd      	mov	sp, r7
 8011bbe:	bd80      	pop	{r7, pc}

08011bc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	885b      	ldrh	r3, [r3, #2]
 8011bce:	2b01      	cmp	r3, #1
 8011bd0:	d106      	bne.n	8011be0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2201      	movs	r2, #1
 8011bd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011bda:	6878      	ldr	r0, [r7, #4]
 8011bdc:	f000 f92b 	bl	8011e36 <USBD_CtlSendStatus>
  }
}
 8011be0:	bf00      	nop
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	2b02      	cmp	r3, #2
 8011bfe:	d80b      	bhi.n	8011c18 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	885b      	ldrh	r3, [r3, #2]
 8011c04:	2b01      	cmp	r3, #1
 8011c06:	d10c      	bne.n	8011c22 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011c10:	6878      	ldr	r0, [r7, #4]
 8011c12:	f000 f910 	bl	8011e36 <USBD_CtlSendStatus>
      }
      break;
 8011c16:	e004      	b.n	8011c22 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	6878      	ldr	r0, [r7, #4]
 8011c1c:	f000 f840 	bl	8011ca0 <USBD_CtlError>
      break;
 8011c20:	e000      	b.n	8011c24 <USBD_ClrFeature+0x3c>
      break;
 8011c22:	bf00      	nop
  }
}
 8011c24:	bf00      	nop
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	781a      	ldrb	r2, [r3, #0]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	3301      	adds	r3, #1
 8011c46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	781a      	ldrb	r2, [r3, #0]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	3301      	adds	r3, #1
 8011c54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011c56:	68f8      	ldr	r0, [r7, #12]
 8011c58:	f7ff fabb 	bl	80111d2 <SWAPBYTE>
 8011c5c:	4603      	mov	r3, r0
 8011c5e:	461a      	mov	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	3301      	adds	r3, #1
 8011c68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	3301      	adds	r3, #1
 8011c6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8011c70:	68f8      	ldr	r0, [r7, #12]
 8011c72:	f7ff faae 	bl	80111d2 <SWAPBYTE>
 8011c76:	4603      	mov	r3, r0
 8011c78:	461a      	mov	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	3301      	adds	r3, #1
 8011c82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	3301      	adds	r3, #1
 8011c88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	f7ff faa1 	bl	80111d2 <SWAPBYTE>
 8011c90:	4603      	mov	r3, r0
 8011c92:	461a      	mov	r2, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	80da      	strh	r2, [r3, #6]
}
 8011c98:	bf00      	nop
 8011c9a:	3710      	adds	r7, #16
 8011c9c:	46bd      	mov	sp, r7
 8011c9e:	bd80      	pop	{r7, pc}

08011ca0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b082      	sub	sp, #8
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
 8011ca8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011caa:	2180      	movs	r1, #128	; 0x80
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f007 ffd7 	bl	8019c60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011cb2:	2100      	movs	r1, #0
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f007 ffd3 	bl	8019c60 <USBD_LL_StallEP>
}
 8011cba:	bf00      	nop
 8011cbc:	3708      	adds	r7, #8
 8011cbe:	46bd      	mov	sp, r7
 8011cc0:	bd80      	pop	{r7, pc}

08011cc2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011cc2:	b580      	push	{r7, lr}
 8011cc4:	b086      	sub	sp, #24
 8011cc6:	af00      	add	r7, sp, #0
 8011cc8:	60f8      	str	r0, [r7, #12]
 8011cca:	60b9      	str	r1, [r7, #8]
 8011ccc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d036      	beq.n	8011d46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8011cdc:	6938      	ldr	r0, [r7, #16]
 8011cde:	f000 f836 	bl	8011d4e <USBD_GetLen>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	005b      	lsls	r3, r3, #1
 8011cea:	b29a      	uxth	r2, r3
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011cf0:	7dfb      	ldrb	r3, [r7, #23]
 8011cf2:	68ba      	ldr	r2, [r7, #8]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	7812      	ldrb	r2, [r2, #0]
 8011cfa:	701a      	strb	r2, [r3, #0]
  idx++;
 8011cfc:	7dfb      	ldrb	r3, [r7, #23]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011d02:	7dfb      	ldrb	r3, [r7, #23]
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	4413      	add	r3, r2
 8011d08:	2203      	movs	r2, #3
 8011d0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8011d0c:	7dfb      	ldrb	r3, [r7, #23]
 8011d0e:	3301      	adds	r3, #1
 8011d10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011d12:	e013      	b.n	8011d3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8011d14:	7dfb      	ldrb	r3, [r7, #23]
 8011d16:	68ba      	ldr	r2, [r7, #8]
 8011d18:	4413      	add	r3, r2
 8011d1a:	693a      	ldr	r2, [r7, #16]
 8011d1c:	7812      	ldrb	r2, [r2, #0]
 8011d1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	3301      	adds	r3, #1
 8011d24:	613b      	str	r3, [r7, #16]
    idx++;
 8011d26:	7dfb      	ldrb	r3, [r7, #23]
 8011d28:	3301      	adds	r3, #1
 8011d2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011d2c:	7dfb      	ldrb	r3, [r7, #23]
 8011d2e:	68ba      	ldr	r2, [r7, #8]
 8011d30:	4413      	add	r3, r2
 8011d32:	2200      	movs	r2, #0
 8011d34:	701a      	strb	r2, [r3, #0]
    idx++;
 8011d36:	7dfb      	ldrb	r3, [r7, #23]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d1e7      	bne.n	8011d14 <USBD_GetString+0x52>
 8011d44:	e000      	b.n	8011d48 <USBD_GetString+0x86>
    return;
 8011d46:	bf00      	nop
  }
}
 8011d48:	3718      	adds	r7, #24
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011d4e:	b480      	push	{r7}
 8011d50:	b085      	sub	sp, #20
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011d56:	2300      	movs	r3, #0
 8011d58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011d5e:	e005      	b.n	8011d6c <USBD_GetLen+0x1e>
  {
    len++;
 8011d60:	7bfb      	ldrb	r3, [r7, #15]
 8011d62:	3301      	adds	r3, #1
 8011d64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	3301      	adds	r3, #1
 8011d6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011d6c:	68bb      	ldr	r3, [r7, #8]
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d1f5      	bne.n	8011d60 <USBD_GetLen+0x12>
  }

  return len;
 8011d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d76:	4618      	mov	r0, r3
 8011d78:	3714      	adds	r7, #20
 8011d7a:	46bd      	mov	sp, r7
 8011d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d80:	4770      	bx	lr

08011d82 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b084      	sub	sp, #16
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	60f8      	str	r0, [r7, #12]
 8011d8a:	60b9      	str	r1, [r7, #8]
 8011d8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	2202      	movs	r2, #2
 8011d92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011d96:	68fb      	ldr	r3, [r7, #12]
 8011d98:	687a      	ldr	r2, [r7, #4]
 8011d9a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	687a      	ldr	r2, [r7, #4]
 8011da0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68ba      	ldr	r2, [r7, #8]
 8011da6:	2100      	movs	r1, #0
 8011da8:	68f8      	ldr	r0, [r7, #12]
 8011daa:	f007 ffe2 	bl	8019d72 <USBD_LL_Transmit>

  return USBD_OK;
 8011dae:	2300      	movs	r3, #0
}
 8011db0:	4618      	mov	r0, r3
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	60f8      	str	r0, [r7, #12]
 8011dc0:	60b9      	str	r1, [r7, #8]
 8011dc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	68ba      	ldr	r2, [r7, #8]
 8011dc8:	2100      	movs	r1, #0
 8011dca:	68f8      	ldr	r0, [r7, #12]
 8011dcc:	f007 ffd1 	bl	8019d72 <USBD_LL_Transmit>

  return USBD_OK;
 8011dd0:	2300      	movs	r3, #0
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3710      	adds	r7, #16
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}

08011dda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011dda:	b580      	push	{r7, lr}
 8011ddc:	b084      	sub	sp, #16
 8011dde:	af00      	add	r7, sp, #0
 8011de0:	60f8      	str	r0, [r7, #12]
 8011de2:	60b9      	str	r1, [r7, #8]
 8011de4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	2203      	movs	r2, #3
 8011dea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	68ba      	ldr	r2, [r7, #8]
 8011e02:	2100      	movs	r1, #0
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f007 ffd5 	bl	8019db4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	68ba      	ldr	r2, [r7, #8]
 8011e24:	2100      	movs	r1, #0
 8011e26:	68f8      	ldr	r0, [r7, #12]
 8011e28:	f007 ffc4 	bl	8019db4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e2c:	2300      	movs	r3, #0
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3710      	adds	r7, #16
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b082      	sub	sp, #8
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2204      	movs	r2, #4
 8011e42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011e46:	2300      	movs	r3, #0
 8011e48:	2200      	movs	r2, #0
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	6878      	ldr	r0, [r7, #4]
 8011e4e:	f007 ff90 	bl	8019d72 <USBD_LL_Transmit>

  return USBD_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3708      	adds	r7, #8
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}

08011e5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011e5c:	b580      	push	{r7, lr}
 8011e5e:	b082      	sub	sp, #8
 8011e60:	af00      	add	r7, sp, #0
 8011e62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2205      	movs	r2, #5
 8011e68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	2200      	movs	r2, #0
 8011e70:	2100      	movs	r1, #0
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f007 ff9e 	bl	8019db4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011e78:	2300      	movs	r3, #0
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3708      	adds	r7, #8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}
	...

08011e84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011e8e:	79fb      	ldrb	r3, [r7, #7]
 8011e90:	4a08      	ldr	r2, [pc, #32]	; (8011eb4 <disk_status+0x30>)
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	4413      	add	r3, r2
 8011e96:	685b      	ldr	r3, [r3, #4]
 8011e98:	685b      	ldr	r3, [r3, #4]
 8011e9a:	79fa      	ldrb	r2, [r7, #7]
 8011e9c:	4905      	ldr	r1, [pc, #20]	; (8011eb4 <disk_status+0x30>)
 8011e9e:	440a      	add	r2, r1
 8011ea0:	7a12      	ldrb	r2, [r2, #8]
 8011ea2:	4610      	mov	r0, r2
 8011ea4:	4798      	blx	r3
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}
 8011eb4:	20002880 	.word	0x20002880

08011eb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b084      	sub	sp, #16
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	4603      	mov	r3, r0
 8011ec0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011ec6:	79fb      	ldrb	r3, [r7, #7]
 8011ec8:	4a0d      	ldr	r2, [pc, #52]	; (8011f00 <disk_initialize+0x48>)
 8011eca:	5cd3      	ldrb	r3, [r2, r3]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d111      	bne.n	8011ef4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011ed0:	79fb      	ldrb	r3, [r7, #7]
 8011ed2:	4a0b      	ldr	r2, [pc, #44]	; (8011f00 <disk_initialize+0x48>)
 8011ed4:	2101      	movs	r1, #1
 8011ed6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011ed8:	79fb      	ldrb	r3, [r7, #7]
 8011eda:	4a09      	ldr	r2, [pc, #36]	; (8011f00 <disk_initialize+0x48>)
 8011edc:	009b      	lsls	r3, r3, #2
 8011ede:	4413      	add	r3, r2
 8011ee0:	685b      	ldr	r3, [r3, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	79fa      	ldrb	r2, [r7, #7]
 8011ee6:	4906      	ldr	r1, [pc, #24]	; (8011f00 <disk_initialize+0x48>)
 8011ee8:	440a      	add	r2, r1
 8011eea:	7a12      	ldrb	r2, [r2, #8]
 8011eec:	4610      	mov	r0, r2
 8011eee:	4798      	blx	r3
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3710      	adds	r7, #16
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	20002880 	.word	0x20002880

08011f04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011f04:	b590      	push	{r4, r7, lr}
 8011f06:	b087      	sub	sp, #28
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60b9      	str	r1, [r7, #8]
 8011f0c:	607a      	str	r2, [r7, #4]
 8011f0e:	603b      	str	r3, [r7, #0]
 8011f10:	4603      	mov	r3, r0
 8011f12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011f14:	7bfb      	ldrb	r3, [r7, #15]
 8011f16:	4a0a      	ldr	r2, [pc, #40]	; (8011f40 <disk_read+0x3c>)
 8011f18:	009b      	lsls	r3, r3, #2
 8011f1a:	4413      	add	r3, r2
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	689c      	ldr	r4, [r3, #8]
 8011f20:	7bfb      	ldrb	r3, [r7, #15]
 8011f22:	4a07      	ldr	r2, [pc, #28]	; (8011f40 <disk_read+0x3c>)
 8011f24:	4413      	add	r3, r2
 8011f26:	7a18      	ldrb	r0, [r3, #8]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	687a      	ldr	r2, [r7, #4]
 8011f2c:	68b9      	ldr	r1, [r7, #8]
 8011f2e:	47a0      	blx	r4
 8011f30:	4603      	mov	r3, r0
 8011f32:	75fb      	strb	r3, [r7, #23]
  return res;
 8011f34:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	371c      	adds	r7, #28
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd90      	pop	{r4, r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	20002880 	.word	0x20002880

08011f44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011f44:	b590      	push	{r4, r7, lr}
 8011f46:	b087      	sub	sp, #28
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60b9      	str	r1, [r7, #8]
 8011f4c:	607a      	str	r2, [r7, #4]
 8011f4e:	603b      	str	r3, [r7, #0]
 8011f50:	4603      	mov	r3, r0
 8011f52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011f54:	7bfb      	ldrb	r3, [r7, #15]
 8011f56:	4a0a      	ldr	r2, [pc, #40]	; (8011f80 <disk_write+0x3c>)
 8011f58:	009b      	lsls	r3, r3, #2
 8011f5a:	4413      	add	r3, r2
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	68dc      	ldr	r4, [r3, #12]
 8011f60:	7bfb      	ldrb	r3, [r7, #15]
 8011f62:	4a07      	ldr	r2, [pc, #28]	; (8011f80 <disk_write+0x3c>)
 8011f64:	4413      	add	r3, r2
 8011f66:	7a18      	ldrb	r0, [r3, #8]
 8011f68:	683b      	ldr	r3, [r7, #0]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	68b9      	ldr	r1, [r7, #8]
 8011f6e:	47a0      	blx	r4
 8011f70:	4603      	mov	r3, r0
 8011f72:	75fb      	strb	r3, [r7, #23]
  return res;
 8011f74:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	371c      	adds	r7, #28
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd90      	pop	{r4, r7, pc}
 8011f7e:	bf00      	nop
 8011f80:	20002880 	.word	0x20002880

08011f84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b084      	sub	sp, #16
 8011f88:	af00      	add	r7, sp, #0
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	603a      	str	r2, [r7, #0]
 8011f8e:	71fb      	strb	r3, [r7, #7]
 8011f90:	460b      	mov	r3, r1
 8011f92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011f94:	79fb      	ldrb	r3, [r7, #7]
 8011f96:	4a09      	ldr	r2, [pc, #36]	; (8011fbc <disk_ioctl+0x38>)
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	4413      	add	r3, r2
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	691b      	ldr	r3, [r3, #16]
 8011fa0:	79fa      	ldrb	r2, [r7, #7]
 8011fa2:	4906      	ldr	r1, [pc, #24]	; (8011fbc <disk_ioctl+0x38>)
 8011fa4:	440a      	add	r2, r1
 8011fa6:	7a10      	ldrb	r0, [r2, #8]
 8011fa8:	79b9      	ldrb	r1, [r7, #6]
 8011faa:	683a      	ldr	r2, [r7, #0]
 8011fac:	4798      	blx	r3
 8011fae:	4603      	mov	r3, r0
 8011fb0:	73fb      	strb	r3, [r7, #15]
  return res;
 8011fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}
 8011fbc:	20002880 	.word	0x20002880

08011fc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	3301      	adds	r3, #1
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011fd0:	89fb      	ldrh	r3, [r7, #14]
 8011fd2:	021b      	lsls	r3, r3, #8
 8011fd4:	b21a      	sxth	r2, r3
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	b21b      	sxth	r3, r3
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	b21b      	sxth	r3, r3
 8011fe0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011fe2:	89fb      	ldrh	r3, [r7, #14]
}
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	3714      	adds	r7, #20
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fee:	4770      	bx	lr

08011ff0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	3303      	adds	r3, #3
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	021b      	lsls	r3, r3, #8
 8012004:	687a      	ldr	r2, [r7, #4]
 8012006:	3202      	adds	r2, #2
 8012008:	7812      	ldrb	r2, [r2, #0]
 801200a:	4313      	orrs	r3, r2
 801200c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	021b      	lsls	r3, r3, #8
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	3201      	adds	r2, #1
 8012016:	7812      	ldrb	r2, [r2, #0]
 8012018:	4313      	orrs	r3, r2
 801201a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	021b      	lsls	r3, r3, #8
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	7812      	ldrb	r2, [r2, #0]
 8012024:	4313      	orrs	r3, r2
 8012026:	60fb      	str	r3, [r7, #12]
	return rv;
 8012028:	68fb      	ldr	r3, [r7, #12]
}
 801202a:	4618      	mov	r0, r3
 801202c:	3714      	adds	r7, #20
 801202e:	46bd      	mov	sp, r7
 8012030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012034:	4770      	bx	lr

08012036 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012036:	b480      	push	{r7}
 8012038:	b083      	sub	sp, #12
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
 801203e:	460b      	mov	r3, r1
 8012040:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	1c5a      	adds	r2, r3, #1
 8012046:	607a      	str	r2, [r7, #4]
 8012048:	887a      	ldrh	r2, [r7, #2]
 801204a:	b2d2      	uxtb	r2, r2
 801204c:	701a      	strb	r2, [r3, #0]
 801204e:	887b      	ldrh	r3, [r7, #2]
 8012050:	0a1b      	lsrs	r3, r3, #8
 8012052:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	1c5a      	adds	r2, r3, #1
 8012058:	607a      	str	r2, [r7, #4]
 801205a:	887a      	ldrh	r2, [r7, #2]
 801205c:	b2d2      	uxtb	r2, r2
 801205e:	701a      	strb	r2, [r3, #0]
}
 8012060:	bf00      	nop
 8012062:	370c      	adds	r7, #12
 8012064:	46bd      	mov	sp, r7
 8012066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801206a:	4770      	bx	lr

0801206c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801206c:	b480      	push	{r7}
 801206e:	b083      	sub	sp, #12
 8012070:	af00      	add	r7, sp, #0
 8012072:	6078      	str	r0, [r7, #4]
 8012074:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	1c5a      	adds	r2, r3, #1
 801207a:	607a      	str	r2, [r7, #4]
 801207c:	683a      	ldr	r2, [r7, #0]
 801207e:	b2d2      	uxtb	r2, r2
 8012080:	701a      	strb	r2, [r3, #0]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	0a1b      	lsrs	r3, r3, #8
 8012086:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	1c5a      	adds	r2, r3, #1
 801208c:	607a      	str	r2, [r7, #4]
 801208e:	683a      	ldr	r2, [r7, #0]
 8012090:	b2d2      	uxtb	r2, r2
 8012092:	701a      	strb	r2, [r3, #0]
 8012094:	683b      	ldr	r3, [r7, #0]
 8012096:	0a1b      	lsrs	r3, r3, #8
 8012098:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	1c5a      	adds	r2, r3, #1
 801209e:	607a      	str	r2, [r7, #4]
 80120a0:	683a      	ldr	r2, [r7, #0]
 80120a2:	b2d2      	uxtb	r2, r2
 80120a4:	701a      	strb	r2, [r3, #0]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	0a1b      	lsrs	r3, r3, #8
 80120aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	1c5a      	adds	r2, r3, #1
 80120b0:	607a      	str	r2, [r7, #4]
 80120b2:	683a      	ldr	r2, [r7, #0]
 80120b4:	b2d2      	uxtb	r2, r2
 80120b6:	701a      	strb	r2, [r3, #0]
}
 80120b8:	bf00      	nop
 80120ba:	370c      	adds	r7, #12
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr

080120c4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80120c4:	b480      	push	{r7}
 80120c6:	b087      	sub	sp, #28
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	60f8      	str	r0, [r7, #12]
 80120cc:	60b9      	str	r1, [r7, #8]
 80120ce:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80120d4:	68bb      	ldr	r3, [r7, #8]
 80120d6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00d      	beq.n	80120fa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80120de:	693a      	ldr	r2, [r7, #16]
 80120e0:	1c53      	adds	r3, r2, #1
 80120e2:	613b      	str	r3, [r7, #16]
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	1c59      	adds	r1, r3, #1
 80120e8:	6179      	str	r1, [r7, #20]
 80120ea:	7812      	ldrb	r2, [r2, #0]
 80120ec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	3b01      	subs	r3, #1
 80120f2:	607b      	str	r3, [r7, #4]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1f1      	bne.n	80120de <mem_cpy+0x1a>
	}
}
 80120fa:	bf00      	nop
 80120fc:	371c      	adds	r7, #28
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr

08012106 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012106:	b480      	push	{r7}
 8012108:	b087      	sub	sp, #28
 801210a:	af00      	add	r7, sp, #0
 801210c:	60f8      	str	r0, [r7, #12]
 801210e:	60b9      	str	r1, [r7, #8]
 8012110:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	1c5a      	adds	r2, r3, #1
 801211a:	617a      	str	r2, [r7, #20]
 801211c:	68ba      	ldr	r2, [r7, #8]
 801211e:	b2d2      	uxtb	r2, r2
 8012120:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	3b01      	subs	r3, #1
 8012126:	607b      	str	r3, [r7, #4]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1f3      	bne.n	8012116 <mem_set+0x10>
}
 801212e:	bf00      	nop
 8012130:	bf00      	nop
 8012132:	371c      	adds	r7, #28
 8012134:	46bd      	mov	sp, r7
 8012136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801213a:	4770      	bx	lr

0801213c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801213c:	b480      	push	{r7}
 801213e:	b089      	sub	sp, #36	; 0x24
 8012140:	af00      	add	r7, sp, #0
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	61fb      	str	r3, [r7, #28]
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012150:	2300      	movs	r3, #0
 8012152:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012154:	69fb      	ldr	r3, [r7, #28]
 8012156:	1c5a      	adds	r2, r3, #1
 8012158:	61fa      	str	r2, [r7, #28]
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	4619      	mov	r1, r3
 801215e:	69bb      	ldr	r3, [r7, #24]
 8012160:	1c5a      	adds	r2, r3, #1
 8012162:	61ba      	str	r2, [r7, #24]
 8012164:	781b      	ldrb	r3, [r3, #0]
 8012166:	1acb      	subs	r3, r1, r3
 8012168:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	3b01      	subs	r3, #1
 801216e:	607b      	str	r3, [r7, #4]
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d002      	beq.n	801217c <mem_cmp+0x40>
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d0eb      	beq.n	8012154 <mem_cmp+0x18>

	return r;
 801217c:	697b      	ldr	r3, [r7, #20]
}
 801217e:	4618      	mov	r0, r3
 8012180:	3724      	adds	r7, #36	; 0x24
 8012182:	46bd      	mov	sp, r7
 8012184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012188:	4770      	bx	lr

0801218a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801218a:	b480      	push	{r7}
 801218c:	b083      	sub	sp, #12
 801218e:	af00      	add	r7, sp, #0
 8012190:	6078      	str	r0, [r7, #4]
 8012192:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012194:	e002      	b.n	801219c <chk_chr+0x12>
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	3301      	adds	r3, #1
 801219a:	607b      	str	r3, [r7, #4]
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d005      	beq.n	80121b0 <chk_chr+0x26>
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	781b      	ldrb	r3, [r3, #0]
 80121a8:	461a      	mov	r2, r3
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	4293      	cmp	r3, r2
 80121ae:	d1f2      	bne.n	8012196 <chk_chr+0xc>
	return *str;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	781b      	ldrb	r3, [r3, #0]
}
 80121b4:	4618      	mov	r0, r3
 80121b6:	370c      	adds	r7, #12
 80121b8:	46bd      	mov	sp, r7
 80121ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121be:	4770      	bx	lr

080121c0 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b082      	sub	sp, #8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d009      	beq.n	80121e2 <lock_fs+0x22>
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	695b      	ldr	r3, [r3, #20]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f003 f98d 	bl	80154f2 <ff_req_grant>
 80121d8:	4603      	mov	r3, r0
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d001      	beq.n	80121e2 <lock_fs+0x22>
 80121de:	2301      	movs	r3, #1
 80121e0:	e000      	b.n	80121e4 <lock_fs+0x24>
 80121e2:	2300      	movs	r3, #0
}
 80121e4:	4618      	mov	r0, r3
 80121e6:	3708      	adds	r7, #8
 80121e8:	46bd      	mov	sp, r7
 80121ea:	bd80      	pop	{r7, pc}

080121ec <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
 80121f4:	460b      	mov	r3, r1
 80121f6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d00d      	beq.n	801221a <unlock_fs+0x2e>
 80121fe:	78fb      	ldrb	r3, [r7, #3]
 8012200:	2b0c      	cmp	r3, #12
 8012202:	d00a      	beq.n	801221a <unlock_fs+0x2e>
 8012204:	78fb      	ldrb	r3, [r7, #3]
 8012206:	2b0b      	cmp	r3, #11
 8012208:	d007      	beq.n	801221a <unlock_fs+0x2e>
 801220a:	78fb      	ldrb	r3, [r7, #3]
 801220c:	2b0f      	cmp	r3, #15
 801220e:	d004      	beq.n	801221a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	695b      	ldr	r3, [r3, #20]
 8012214:	4618      	mov	r0, r3
 8012216:	f003 f981 	bl	801551c <ff_rel_grant>
	}
}
 801221a:	bf00      	nop
 801221c:	3708      	adds	r7, #8
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
	...

08012224 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801222e:	2300      	movs	r3, #0
 8012230:	60bb      	str	r3, [r7, #8]
 8012232:	68bb      	ldr	r3, [r7, #8]
 8012234:	60fb      	str	r3, [r7, #12]
 8012236:	e029      	b.n	801228c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012238:	4a27      	ldr	r2, [pc, #156]	; (80122d8 <chk_lock+0xb4>)
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	011b      	lsls	r3, r3, #4
 801223e:	4413      	add	r3, r2
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d01d      	beq.n	8012282 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012246:	4a24      	ldr	r2, [pc, #144]	; (80122d8 <chk_lock+0xb4>)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	011b      	lsls	r3, r3, #4
 801224c:	4413      	add	r3, r2
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	429a      	cmp	r2, r3
 8012256:	d116      	bne.n	8012286 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012258:	4a1f      	ldr	r2, [pc, #124]	; (80122d8 <chk_lock+0xb4>)
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	011b      	lsls	r3, r3, #4
 801225e:	4413      	add	r3, r2
 8012260:	3304      	adds	r3, #4
 8012262:	681a      	ldr	r2, [r3, #0]
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012268:	429a      	cmp	r2, r3
 801226a:	d10c      	bne.n	8012286 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801226c:	4a1a      	ldr	r2, [pc, #104]	; (80122d8 <chk_lock+0xb4>)
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	011b      	lsls	r3, r3, #4
 8012272:	4413      	add	r3, r2
 8012274:	3308      	adds	r3, #8
 8012276:	681a      	ldr	r2, [r3, #0]
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801227c:	429a      	cmp	r2, r3
 801227e:	d102      	bne.n	8012286 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012280:	e007      	b.n	8012292 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012282:	2301      	movs	r3, #1
 8012284:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	3301      	adds	r3, #1
 801228a:	60fb      	str	r3, [r7, #12]
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	2b01      	cmp	r3, #1
 8012290:	d9d2      	bls.n	8012238 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	2b02      	cmp	r3, #2
 8012296:	d109      	bne.n	80122ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012298:	68bb      	ldr	r3, [r7, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d102      	bne.n	80122a4 <chk_lock+0x80>
 801229e:	683b      	ldr	r3, [r7, #0]
 80122a0:	2b02      	cmp	r3, #2
 80122a2:	d101      	bne.n	80122a8 <chk_lock+0x84>
 80122a4:	2300      	movs	r3, #0
 80122a6:	e010      	b.n	80122ca <chk_lock+0xa6>
 80122a8:	2312      	movs	r3, #18
 80122aa:	e00e      	b.n	80122ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80122ac:	683b      	ldr	r3, [r7, #0]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d108      	bne.n	80122c4 <chk_lock+0xa0>
 80122b2:	4a09      	ldr	r2, [pc, #36]	; (80122d8 <chk_lock+0xb4>)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	011b      	lsls	r3, r3, #4
 80122b8:	4413      	add	r3, r2
 80122ba:	330c      	adds	r3, #12
 80122bc:	881b      	ldrh	r3, [r3, #0]
 80122be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80122c2:	d101      	bne.n	80122c8 <chk_lock+0xa4>
 80122c4:	2310      	movs	r3, #16
 80122c6:	e000      	b.n	80122ca <chk_lock+0xa6>
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3714      	adds	r7, #20
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr
 80122d6:	bf00      	nop
 80122d8:	20002860 	.word	0x20002860

080122dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80122dc:	b480      	push	{r7}
 80122de:	b083      	sub	sp, #12
 80122e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80122e2:	2300      	movs	r3, #0
 80122e4:	607b      	str	r3, [r7, #4]
 80122e6:	e002      	b.n	80122ee <enq_lock+0x12>
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	3301      	adds	r3, #1
 80122ec:	607b      	str	r3, [r7, #4]
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b01      	cmp	r3, #1
 80122f2:	d806      	bhi.n	8012302 <enq_lock+0x26>
 80122f4:	4a09      	ldr	r2, [pc, #36]	; (801231c <enq_lock+0x40>)
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	011b      	lsls	r3, r3, #4
 80122fa:	4413      	add	r3, r2
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d1f2      	bne.n	80122e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	2b02      	cmp	r3, #2
 8012306:	bf14      	ite	ne
 8012308:	2301      	movne	r3, #1
 801230a:	2300      	moveq	r3, #0
 801230c:	b2db      	uxtb	r3, r3
}
 801230e:	4618      	mov	r0, r3
 8012310:	370c      	adds	r7, #12
 8012312:	46bd      	mov	sp, r7
 8012314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012318:	4770      	bx	lr
 801231a:	bf00      	nop
 801231c:	20002860 	.word	0x20002860

08012320 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801232a:	2300      	movs	r3, #0
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	e01f      	b.n	8012370 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012330:	4a41      	ldr	r2, [pc, #260]	; (8012438 <inc_lock+0x118>)
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	011b      	lsls	r3, r3, #4
 8012336:	4413      	add	r3, r2
 8012338:	681a      	ldr	r2, [r3, #0]
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	429a      	cmp	r2, r3
 8012340:	d113      	bne.n	801236a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012342:	4a3d      	ldr	r2, [pc, #244]	; (8012438 <inc_lock+0x118>)
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	011b      	lsls	r3, r3, #4
 8012348:	4413      	add	r3, r2
 801234a:	3304      	adds	r3, #4
 801234c:	681a      	ldr	r2, [r3, #0]
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012352:	429a      	cmp	r2, r3
 8012354:	d109      	bne.n	801236a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012356:	4a38      	ldr	r2, [pc, #224]	; (8012438 <inc_lock+0x118>)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	011b      	lsls	r3, r3, #4
 801235c:	4413      	add	r3, r2
 801235e:	3308      	adds	r3, #8
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012366:	429a      	cmp	r2, r3
 8012368:	d006      	beq.n	8012378 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	3301      	adds	r3, #1
 801236e:	60fb      	str	r3, [r7, #12]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	2b01      	cmp	r3, #1
 8012374:	d9dc      	bls.n	8012330 <inc_lock+0x10>
 8012376:	e000      	b.n	801237a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8012378:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	2b02      	cmp	r3, #2
 801237e:	d132      	bne.n	80123e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012380:	2300      	movs	r3, #0
 8012382:	60fb      	str	r3, [r7, #12]
 8012384:	e002      	b.n	801238c <inc_lock+0x6c>
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	3301      	adds	r3, #1
 801238a:	60fb      	str	r3, [r7, #12]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	2b01      	cmp	r3, #1
 8012390:	d806      	bhi.n	80123a0 <inc_lock+0x80>
 8012392:	4a29      	ldr	r2, [pc, #164]	; (8012438 <inc_lock+0x118>)
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	011b      	lsls	r3, r3, #4
 8012398:	4413      	add	r3, r2
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d1f2      	bne.n	8012386 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	2b02      	cmp	r3, #2
 80123a4:	d101      	bne.n	80123aa <inc_lock+0x8a>
 80123a6:	2300      	movs	r3, #0
 80123a8:	e040      	b.n	801242c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681a      	ldr	r2, [r3, #0]
 80123ae:	4922      	ldr	r1, [pc, #136]	; (8012438 <inc_lock+0x118>)
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	011b      	lsls	r3, r3, #4
 80123b4:	440b      	add	r3, r1
 80123b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	689a      	ldr	r2, [r3, #8]
 80123bc:	491e      	ldr	r1, [pc, #120]	; (8012438 <inc_lock+0x118>)
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	011b      	lsls	r3, r3, #4
 80123c2:	440b      	add	r3, r1
 80123c4:	3304      	adds	r3, #4
 80123c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	695a      	ldr	r2, [r3, #20]
 80123cc:	491a      	ldr	r1, [pc, #104]	; (8012438 <inc_lock+0x118>)
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	011b      	lsls	r3, r3, #4
 80123d2:	440b      	add	r3, r1
 80123d4:	3308      	adds	r3, #8
 80123d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80123d8:	4a17      	ldr	r2, [pc, #92]	; (8012438 <inc_lock+0x118>)
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	011b      	lsls	r3, r3, #4
 80123de:	4413      	add	r3, r2
 80123e0:	330c      	adds	r3, #12
 80123e2:	2200      	movs	r2, #0
 80123e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d009      	beq.n	8012400 <inc_lock+0xe0>
 80123ec:	4a12      	ldr	r2, [pc, #72]	; (8012438 <inc_lock+0x118>)
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	011b      	lsls	r3, r3, #4
 80123f2:	4413      	add	r3, r2
 80123f4:	330c      	adds	r3, #12
 80123f6:	881b      	ldrh	r3, [r3, #0]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d001      	beq.n	8012400 <inc_lock+0xe0>
 80123fc:	2300      	movs	r3, #0
 80123fe:	e015      	b.n	801242c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012400:	683b      	ldr	r3, [r7, #0]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d108      	bne.n	8012418 <inc_lock+0xf8>
 8012406:	4a0c      	ldr	r2, [pc, #48]	; (8012438 <inc_lock+0x118>)
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	011b      	lsls	r3, r3, #4
 801240c:	4413      	add	r3, r2
 801240e:	330c      	adds	r3, #12
 8012410:	881b      	ldrh	r3, [r3, #0]
 8012412:	3301      	adds	r3, #1
 8012414:	b29a      	uxth	r2, r3
 8012416:	e001      	b.n	801241c <inc_lock+0xfc>
 8012418:	f44f 7280 	mov.w	r2, #256	; 0x100
 801241c:	4906      	ldr	r1, [pc, #24]	; (8012438 <inc_lock+0x118>)
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	011b      	lsls	r3, r3, #4
 8012422:	440b      	add	r3, r1
 8012424:	330c      	adds	r3, #12
 8012426:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	3301      	adds	r3, #1
}
 801242c:	4618      	mov	r0, r3
 801242e:	3714      	adds	r7, #20
 8012430:	46bd      	mov	sp, r7
 8012432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012436:	4770      	bx	lr
 8012438:	20002860 	.word	0x20002860

0801243c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801243c:	b480      	push	{r7}
 801243e:	b085      	sub	sp, #20
 8012440:	af00      	add	r7, sp, #0
 8012442:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	3b01      	subs	r3, #1
 8012448:	607b      	str	r3, [r7, #4]
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2b01      	cmp	r3, #1
 801244e:	d825      	bhi.n	801249c <dec_lock+0x60>
		n = Files[i].ctr;
 8012450:	4a17      	ldr	r2, [pc, #92]	; (80124b0 <dec_lock+0x74>)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	011b      	lsls	r3, r3, #4
 8012456:	4413      	add	r3, r2
 8012458:	330c      	adds	r3, #12
 801245a:	881b      	ldrh	r3, [r3, #0]
 801245c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801245e:	89fb      	ldrh	r3, [r7, #14]
 8012460:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012464:	d101      	bne.n	801246a <dec_lock+0x2e>
 8012466:	2300      	movs	r3, #0
 8012468:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801246a:	89fb      	ldrh	r3, [r7, #14]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <dec_lock+0x3a>
 8012470:	89fb      	ldrh	r3, [r7, #14]
 8012472:	3b01      	subs	r3, #1
 8012474:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8012476:	4a0e      	ldr	r2, [pc, #56]	; (80124b0 <dec_lock+0x74>)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	011b      	lsls	r3, r3, #4
 801247c:	4413      	add	r3, r2
 801247e:	330c      	adds	r3, #12
 8012480:	89fa      	ldrh	r2, [r7, #14]
 8012482:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8012484:	89fb      	ldrh	r3, [r7, #14]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d105      	bne.n	8012496 <dec_lock+0x5a>
 801248a:	4a09      	ldr	r2, [pc, #36]	; (80124b0 <dec_lock+0x74>)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	011b      	lsls	r3, r3, #4
 8012490:	4413      	add	r3, r2
 8012492:	2200      	movs	r2, #0
 8012494:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8012496:	2300      	movs	r3, #0
 8012498:	737b      	strb	r3, [r7, #13]
 801249a:	e001      	b.n	80124a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801249c:	2302      	movs	r3, #2
 801249e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80124a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3714      	adds	r7, #20
 80124a6:	46bd      	mov	sp, r7
 80124a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ac:	4770      	bx	lr
 80124ae:	bf00      	nop
 80124b0:	20002860 	.word	0x20002860

080124b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b085      	sub	sp, #20
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80124bc:	2300      	movs	r3, #0
 80124be:	60fb      	str	r3, [r7, #12]
 80124c0:	e010      	b.n	80124e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80124c2:	4a0d      	ldr	r2, [pc, #52]	; (80124f8 <clear_lock+0x44>)
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	011b      	lsls	r3, r3, #4
 80124c8:	4413      	add	r3, r2
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	687a      	ldr	r2, [r7, #4]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d105      	bne.n	80124de <clear_lock+0x2a>
 80124d2:	4a09      	ldr	r2, [pc, #36]	; (80124f8 <clear_lock+0x44>)
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	011b      	lsls	r3, r3, #4
 80124d8:	4413      	add	r3, r2
 80124da:	2200      	movs	r2, #0
 80124dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	3301      	adds	r3, #1
 80124e2:	60fb      	str	r3, [r7, #12]
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d9eb      	bls.n	80124c2 <clear_lock+0xe>
	}
}
 80124ea:	bf00      	nop
 80124ec:	bf00      	nop
 80124ee:	3714      	adds	r7, #20
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr
 80124f8:	20002860 	.word	0x20002860

080124fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80124fc:	b580      	push	{r7, lr}
 80124fe:	b086      	sub	sp, #24
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012504:	2300      	movs	r3, #0
 8012506:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	78db      	ldrb	r3, [r3, #3]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d034      	beq.n	801257a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012514:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	7858      	ldrb	r0, [r3, #1]
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012520:	2301      	movs	r3, #1
 8012522:	697a      	ldr	r2, [r7, #20]
 8012524:	f7ff fd0e 	bl	8011f44 <disk_write>
 8012528:	4603      	mov	r3, r0
 801252a:	2b00      	cmp	r3, #0
 801252c:	d002      	beq.n	8012534 <sync_window+0x38>
			res = FR_DISK_ERR;
 801252e:	2301      	movs	r3, #1
 8012530:	73fb      	strb	r3, [r7, #15]
 8012532:	e022      	b.n	801257a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801253e:	697a      	ldr	r2, [r7, #20]
 8012540:	1ad2      	subs	r2, r2, r3
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012546:	429a      	cmp	r2, r3
 8012548:	d217      	bcs.n	801257a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	789b      	ldrb	r3, [r3, #2]
 801254e:	613b      	str	r3, [r7, #16]
 8012550:	e010      	b.n	8012574 <sync_window+0x78>
					wsect += fs->fsize;
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012556:	697a      	ldr	r2, [r7, #20]
 8012558:	4413      	add	r3, r2
 801255a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	7858      	ldrb	r0, [r3, #1]
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012566:	2301      	movs	r3, #1
 8012568:	697a      	ldr	r2, [r7, #20]
 801256a:	f7ff fceb 	bl	8011f44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	3b01      	subs	r3, #1
 8012572:	613b      	str	r3, [r7, #16]
 8012574:	693b      	ldr	r3, [r7, #16]
 8012576:	2b01      	cmp	r3, #1
 8012578:	d8eb      	bhi.n	8012552 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801257a:	7bfb      	ldrb	r3, [r7, #15]
}
 801257c:	4618      	mov	r0, r3
 801257e:	3718      	adds	r7, #24
 8012580:	46bd      	mov	sp, r7
 8012582:	bd80      	pop	{r7, pc}

08012584 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b084      	sub	sp, #16
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
 801258c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801258e:	2300      	movs	r3, #0
 8012590:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	429a      	cmp	r2, r3
 801259a:	d01b      	beq.n	80125d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f7ff ffad 	bl	80124fc <sync_window>
 80125a2:	4603      	mov	r3, r0
 80125a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80125a6:	7bfb      	ldrb	r3, [r7, #15]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d113      	bne.n	80125d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	7858      	ldrb	r0, [r3, #1]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80125b6:	2301      	movs	r3, #1
 80125b8:	683a      	ldr	r2, [r7, #0]
 80125ba:	f7ff fca3 	bl	8011f04 <disk_read>
 80125be:	4603      	mov	r3, r0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d004      	beq.n	80125ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80125c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80125ca:	2301      	movs	r3, #1
 80125cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	683a      	ldr	r2, [r7, #0]
 80125d2:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80125d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3710      	adds	r7, #16
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}
	...

080125e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80125e0:	b580      	push	{r7, lr}
 80125e2:	b084      	sub	sp, #16
 80125e4:	af00      	add	r7, sp, #0
 80125e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f7ff ff87 	bl	80124fc <sync_window>
 80125ee:	4603      	mov	r3, r0
 80125f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80125f2:	7bfb      	ldrb	r3, [r7, #15]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d159      	bne.n	80126ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80125f8:	687b      	ldr	r3, [r7, #4]
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d149      	bne.n	8012694 <sync_fs+0xb4>
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	791b      	ldrb	r3, [r3, #4]
 8012604:	2b01      	cmp	r3, #1
 8012606:	d145      	bne.n	8012694 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	899b      	ldrh	r3, [r3, #12]
 8012612:	461a      	mov	r2, r3
 8012614:	2100      	movs	r1, #0
 8012616:	f7ff fd76 	bl	8012106 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	333c      	adds	r3, #60	; 0x3c
 801261e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012622:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012626:	4618      	mov	r0, r3
 8012628:	f7ff fd05 	bl	8012036 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	333c      	adds	r3, #60	; 0x3c
 8012630:	4921      	ldr	r1, [pc, #132]	; (80126b8 <sync_fs+0xd8>)
 8012632:	4618      	mov	r0, r3
 8012634:	f7ff fd1a 	bl	801206c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	333c      	adds	r3, #60	; 0x3c
 801263c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012640:	491e      	ldr	r1, [pc, #120]	; (80126bc <sync_fs+0xdc>)
 8012642:	4618      	mov	r0, r3
 8012644:	f7ff fd12 	bl	801206c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	333c      	adds	r3, #60	; 0x3c
 801264c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	69db      	ldr	r3, [r3, #28]
 8012654:	4619      	mov	r1, r3
 8012656:	4610      	mov	r0, r2
 8012658:	f7ff fd08 	bl	801206c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	333c      	adds	r3, #60	; 0x3c
 8012660:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	699b      	ldr	r3, [r3, #24]
 8012668:	4619      	mov	r1, r3
 801266a:	4610      	mov	r0, r2
 801266c:	f7ff fcfe 	bl	801206c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012674:	1c5a      	adds	r2, r3, #1
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	7858      	ldrb	r0, [r3, #1]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012688:	2301      	movs	r3, #1
 801268a:	f7ff fc5b 	bl	8011f44 <disk_write>
			fs->fsi_flag = 0;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	2200      	movs	r2, #0
 8012692:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	785b      	ldrb	r3, [r3, #1]
 8012698:	2200      	movs	r2, #0
 801269a:	2100      	movs	r1, #0
 801269c:	4618      	mov	r0, r3
 801269e:	f7ff fc71 	bl	8011f84 <disk_ioctl>
 80126a2:	4603      	mov	r3, r0
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d001      	beq.n	80126ac <sync_fs+0xcc>
 80126a8:	2301      	movs	r3, #1
 80126aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80126ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3710      	adds	r7, #16
 80126b2:	46bd      	mov	sp, r7
 80126b4:	bd80      	pop	{r7, pc}
 80126b6:	bf00      	nop
 80126b8:	41615252 	.word	0x41615252
 80126bc:	61417272 	.word	0x61417272

080126c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
 80126c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80126ca:	683b      	ldr	r3, [r7, #0]
 80126cc:	3b02      	subs	r3, #2
 80126ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6a1b      	ldr	r3, [r3, #32]
 80126d4:	3b02      	subs	r3, #2
 80126d6:	683a      	ldr	r2, [r7, #0]
 80126d8:	429a      	cmp	r2, r3
 80126da:	d301      	bcc.n	80126e0 <clust2sect+0x20>
 80126dc:	2300      	movs	r3, #0
 80126de:	e008      	b.n	80126f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	895b      	ldrh	r3, [r3, #10]
 80126e4:	461a      	mov	r2, r3
 80126e6:	683b      	ldr	r3, [r7, #0]
 80126e8:	fb03 f202 	mul.w	r2, r3, r2
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f0:	4413      	add	r3, r2
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr

080126fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80126fe:	b580      	push	{r7, lr}
 8012700:	b086      	sub	sp, #24
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
 8012706:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801270e:	683b      	ldr	r3, [r7, #0]
 8012710:	2b01      	cmp	r3, #1
 8012712:	d904      	bls.n	801271e <get_fat+0x20>
 8012714:	693b      	ldr	r3, [r7, #16]
 8012716:	6a1b      	ldr	r3, [r3, #32]
 8012718:	683a      	ldr	r2, [r7, #0]
 801271a:	429a      	cmp	r2, r3
 801271c:	d302      	bcc.n	8012724 <get_fat+0x26>
		val = 1;	/* Internal error */
 801271e:	2301      	movs	r3, #1
 8012720:	617b      	str	r3, [r7, #20]
 8012722:	e0bb      	b.n	801289c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012728:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801272a:	693b      	ldr	r3, [r7, #16]
 801272c:	781b      	ldrb	r3, [r3, #0]
 801272e:	2b03      	cmp	r3, #3
 8012730:	f000 8083 	beq.w	801283a <get_fat+0x13c>
 8012734:	2b03      	cmp	r3, #3
 8012736:	f300 80a7 	bgt.w	8012888 <get_fat+0x18a>
 801273a:	2b01      	cmp	r3, #1
 801273c:	d002      	beq.n	8012744 <get_fat+0x46>
 801273e:	2b02      	cmp	r3, #2
 8012740:	d056      	beq.n	80127f0 <get_fat+0xf2>
 8012742:	e0a1      	b.n	8012888 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	60fb      	str	r3, [r7, #12]
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	085b      	lsrs	r3, r3, #1
 801274c:	68fa      	ldr	r2, [r7, #12]
 801274e:	4413      	add	r3, r2
 8012750:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012752:	693b      	ldr	r3, [r7, #16]
 8012754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	899b      	ldrh	r3, [r3, #12]
 801275a:	4619      	mov	r1, r3
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012762:	4413      	add	r3, r2
 8012764:	4619      	mov	r1, r3
 8012766:	6938      	ldr	r0, [r7, #16]
 8012768:	f7ff ff0c 	bl	8012584 <move_window>
 801276c:	4603      	mov	r3, r0
 801276e:	2b00      	cmp	r3, #0
 8012770:	f040 808d 	bne.w	801288e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	1c5a      	adds	r2, r3, #1
 8012778:	60fa      	str	r2, [r7, #12]
 801277a:	693a      	ldr	r2, [r7, #16]
 801277c:	8992      	ldrh	r2, [r2, #12]
 801277e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012782:	fb02 f201 	mul.w	r2, r2, r1
 8012786:	1a9b      	subs	r3, r3, r2
 8012788:	693a      	ldr	r2, [r7, #16]
 801278a:	4413      	add	r3, r2
 801278c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012790:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012796:	693b      	ldr	r3, [r7, #16]
 8012798:	899b      	ldrh	r3, [r3, #12]
 801279a:	4619      	mov	r1, r3
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	fbb3 f3f1 	udiv	r3, r3, r1
 80127a2:	4413      	add	r3, r2
 80127a4:	4619      	mov	r1, r3
 80127a6:	6938      	ldr	r0, [r7, #16]
 80127a8:	f7ff feec 	bl	8012584 <move_window>
 80127ac:	4603      	mov	r3, r0
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d16f      	bne.n	8012892 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80127b2:	693b      	ldr	r3, [r7, #16]
 80127b4:	899b      	ldrh	r3, [r3, #12]
 80127b6:	461a      	mov	r2, r3
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80127be:	fb02 f201 	mul.w	r2, r2, r1
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	693a      	ldr	r2, [r7, #16]
 80127c6:	4413      	add	r3, r2
 80127c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80127cc:	021b      	lsls	r3, r3, #8
 80127ce:	461a      	mov	r2, r3
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	4313      	orrs	r3, r2
 80127d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80127d6:	683b      	ldr	r3, [r7, #0]
 80127d8:	f003 0301 	and.w	r3, r3, #1
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d002      	beq.n	80127e6 <get_fat+0xe8>
 80127e0:	68bb      	ldr	r3, [r7, #8]
 80127e2:	091b      	lsrs	r3, r3, #4
 80127e4:	e002      	b.n	80127ec <get_fat+0xee>
 80127e6:	68bb      	ldr	r3, [r7, #8]
 80127e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80127ec:	617b      	str	r3, [r7, #20]
			break;
 80127ee:	e055      	b.n	801289c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80127f0:	693b      	ldr	r3, [r7, #16]
 80127f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	899b      	ldrh	r3, [r3, #12]
 80127f8:	085b      	lsrs	r3, r3, #1
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	4619      	mov	r1, r3
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	fbb3 f3f1 	udiv	r3, r3, r1
 8012804:	4413      	add	r3, r2
 8012806:	4619      	mov	r1, r3
 8012808:	6938      	ldr	r0, [r7, #16]
 801280a:	f7ff febb 	bl	8012584 <move_window>
 801280e:	4603      	mov	r3, r0
 8012810:	2b00      	cmp	r3, #0
 8012812:	d140      	bne.n	8012896 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801281a:	683b      	ldr	r3, [r7, #0]
 801281c:	005b      	lsls	r3, r3, #1
 801281e:	693a      	ldr	r2, [r7, #16]
 8012820:	8992      	ldrh	r2, [r2, #12]
 8012822:	fbb3 f0f2 	udiv	r0, r3, r2
 8012826:	fb02 f200 	mul.w	r2, r2, r0
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	440b      	add	r3, r1
 801282e:	4618      	mov	r0, r3
 8012830:	f7ff fbc6 	bl	8011fc0 <ld_word>
 8012834:	4603      	mov	r3, r0
 8012836:	617b      	str	r3, [r7, #20]
			break;
 8012838:	e030      	b.n	801289c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801283a:	693b      	ldr	r3, [r7, #16]
 801283c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801283e:	693b      	ldr	r3, [r7, #16]
 8012840:	899b      	ldrh	r3, [r3, #12]
 8012842:	089b      	lsrs	r3, r3, #2
 8012844:	b29b      	uxth	r3, r3
 8012846:	4619      	mov	r1, r3
 8012848:	683b      	ldr	r3, [r7, #0]
 801284a:	fbb3 f3f1 	udiv	r3, r3, r1
 801284e:	4413      	add	r3, r2
 8012850:	4619      	mov	r1, r3
 8012852:	6938      	ldr	r0, [r7, #16]
 8012854:	f7ff fe96 	bl	8012584 <move_window>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	d11d      	bne.n	801289a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	009b      	lsls	r3, r3, #2
 8012868:	693a      	ldr	r2, [r7, #16]
 801286a:	8992      	ldrh	r2, [r2, #12]
 801286c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012870:	fb02 f200 	mul.w	r2, r2, r0
 8012874:	1a9b      	subs	r3, r3, r2
 8012876:	440b      	add	r3, r1
 8012878:	4618      	mov	r0, r3
 801287a:	f7ff fbb9 	bl	8011ff0 <ld_dword>
 801287e:	4603      	mov	r3, r0
 8012880:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012884:	617b      	str	r3, [r7, #20]
			break;
 8012886:	e009      	b.n	801289c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8012888:	2301      	movs	r3, #1
 801288a:	617b      	str	r3, [r7, #20]
 801288c:	e006      	b.n	801289c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801288e:	bf00      	nop
 8012890:	e004      	b.n	801289c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012892:	bf00      	nop
 8012894:	e002      	b.n	801289c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012896:	bf00      	nop
 8012898:	e000      	b.n	801289c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801289a:	bf00      	nop
		}
	}

	return val;
 801289c:	697b      	ldr	r3, [r7, #20]
}
 801289e:	4618      	mov	r0, r3
 80128a0:	3718      	adds	r7, #24
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80128a6:	b590      	push	{r4, r7, lr}
 80128a8:	b089      	sub	sp, #36	; 0x24
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	60f8      	str	r0, [r7, #12]
 80128ae:	60b9      	str	r1, [r7, #8]
 80128b0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80128b2:	2302      	movs	r3, #2
 80128b4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	2b01      	cmp	r3, #1
 80128ba:	f240 8102 	bls.w	8012ac2 <put_fat+0x21c>
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	6a1b      	ldr	r3, [r3, #32]
 80128c2:	68ba      	ldr	r2, [r7, #8]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	f080 80fc 	bcs.w	8012ac2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	2b03      	cmp	r3, #3
 80128d0:	f000 80b6 	beq.w	8012a40 <put_fat+0x19a>
 80128d4:	2b03      	cmp	r3, #3
 80128d6:	f300 80fd 	bgt.w	8012ad4 <put_fat+0x22e>
 80128da:	2b01      	cmp	r3, #1
 80128dc:	d003      	beq.n	80128e6 <put_fat+0x40>
 80128de:	2b02      	cmp	r3, #2
 80128e0:	f000 8083 	beq.w	80129ea <put_fat+0x144>
 80128e4:	e0f6      	b.n	8012ad4 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	61bb      	str	r3, [r7, #24]
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	085b      	lsrs	r3, r3, #1
 80128ee:	69ba      	ldr	r2, [r7, #24]
 80128f0:	4413      	add	r3, r2
 80128f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	899b      	ldrh	r3, [r3, #12]
 80128fc:	4619      	mov	r1, r3
 80128fe:	69bb      	ldr	r3, [r7, #24]
 8012900:	fbb3 f3f1 	udiv	r3, r3, r1
 8012904:	4413      	add	r3, r2
 8012906:	4619      	mov	r1, r3
 8012908:	68f8      	ldr	r0, [r7, #12]
 801290a:	f7ff fe3b 	bl	8012584 <move_window>
 801290e:	4603      	mov	r3, r0
 8012910:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012912:	7ffb      	ldrb	r3, [r7, #31]
 8012914:	2b00      	cmp	r3, #0
 8012916:	f040 80d6 	bne.w	8012ac6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012920:	69bb      	ldr	r3, [r7, #24]
 8012922:	1c5a      	adds	r2, r3, #1
 8012924:	61ba      	str	r2, [r7, #24]
 8012926:	68fa      	ldr	r2, [r7, #12]
 8012928:	8992      	ldrh	r2, [r2, #12]
 801292a:	fbb3 f0f2 	udiv	r0, r3, r2
 801292e:	fb02 f200 	mul.w	r2, r2, r0
 8012932:	1a9b      	subs	r3, r3, r2
 8012934:	440b      	add	r3, r1
 8012936:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012938:	68bb      	ldr	r3, [r7, #8]
 801293a:	f003 0301 	and.w	r3, r3, #1
 801293e:	2b00      	cmp	r3, #0
 8012940:	d00d      	beq.n	801295e <put_fat+0xb8>
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	781b      	ldrb	r3, [r3, #0]
 8012946:	b25b      	sxtb	r3, r3
 8012948:	f003 030f 	and.w	r3, r3, #15
 801294c:	b25a      	sxtb	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	b2db      	uxtb	r3, r3
 8012952:	011b      	lsls	r3, r3, #4
 8012954:	b25b      	sxtb	r3, r3
 8012956:	4313      	orrs	r3, r2
 8012958:	b25b      	sxtb	r3, r3
 801295a:	b2db      	uxtb	r3, r3
 801295c:	e001      	b.n	8012962 <put_fat+0xbc>
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	b2db      	uxtb	r3, r3
 8012962:	697a      	ldr	r2, [r7, #20]
 8012964:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	2201      	movs	r2, #1
 801296a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	899b      	ldrh	r3, [r3, #12]
 8012974:	4619      	mov	r1, r3
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	fbb3 f3f1 	udiv	r3, r3, r1
 801297c:	4413      	add	r3, r2
 801297e:	4619      	mov	r1, r3
 8012980:	68f8      	ldr	r0, [r7, #12]
 8012982:	f7ff fdff 	bl	8012584 <move_window>
 8012986:	4603      	mov	r3, r0
 8012988:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801298a:	7ffb      	ldrb	r3, [r7, #31]
 801298c:	2b00      	cmp	r3, #0
 801298e:	f040 809c 	bne.w	8012aca <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	899b      	ldrh	r3, [r3, #12]
 801299c:	461a      	mov	r2, r3
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80129a4:	fb02 f200 	mul.w	r2, r2, r0
 80129a8:	1a9b      	subs	r3, r3, r2
 80129aa:	440b      	add	r3, r1
 80129ac:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	f003 0301 	and.w	r3, r3, #1
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d003      	beq.n	80129c0 <put_fat+0x11a>
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	091b      	lsrs	r3, r3, #4
 80129bc:	b2db      	uxtb	r3, r3
 80129be:	e00e      	b.n	80129de <put_fat+0x138>
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	781b      	ldrb	r3, [r3, #0]
 80129c4:	b25b      	sxtb	r3, r3
 80129c6:	f023 030f 	bic.w	r3, r3, #15
 80129ca:	b25a      	sxtb	r2, r3
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	0a1b      	lsrs	r3, r3, #8
 80129d0:	b25b      	sxtb	r3, r3
 80129d2:	f003 030f 	and.w	r3, r3, #15
 80129d6:	b25b      	sxtb	r3, r3
 80129d8:	4313      	orrs	r3, r2
 80129da:	b25b      	sxtb	r3, r3
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	697a      	ldr	r2, [r7, #20]
 80129e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2201      	movs	r2, #1
 80129e6:	70da      	strb	r2, [r3, #3]
			break;
 80129e8:	e074      	b.n	8012ad4 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	899b      	ldrh	r3, [r3, #12]
 80129f2:	085b      	lsrs	r3, r3, #1
 80129f4:	b29b      	uxth	r3, r3
 80129f6:	4619      	mov	r1, r3
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80129fe:	4413      	add	r3, r2
 8012a00:	4619      	mov	r1, r3
 8012a02:	68f8      	ldr	r0, [r7, #12]
 8012a04:	f7ff fdbe 	bl	8012584 <move_window>
 8012a08:	4603      	mov	r3, r0
 8012a0a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012a0c:	7ffb      	ldrb	r3, [r7, #31]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d15d      	bne.n	8012ace <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	005b      	lsls	r3, r3, #1
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	8992      	ldrh	r2, [r2, #12]
 8012a20:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a24:	fb02 f200 	mul.w	r2, r2, r0
 8012a28:	1a9b      	subs	r3, r3, r2
 8012a2a:	440b      	add	r3, r1
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	b292      	uxth	r2, r2
 8012a30:	4611      	mov	r1, r2
 8012a32:	4618      	mov	r0, r3
 8012a34:	f7ff faff 	bl	8012036 <st_word>
			fs->wflag = 1;
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	70da      	strb	r2, [r3, #3]
			break;
 8012a3e:	e049      	b.n	8012ad4 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	899b      	ldrh	r3, [r3, #12]
 8012a48:	089b      	lsrs	r3, r3, #2
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	4619      	mov	r1, r3
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a54:	4413      	add	r3, r2
 8012a56:	4619      	mov	r1, r3
 8012a58:	68f8      	ldr	r0, [r7, #12]
 8012a5a:	f7ff fd93 	bl	8012584 <move_window>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012a62:	7ffb      	ldrb	r3, [r7, #31]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d134      	bne.n	8012ad2 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	009b      	lsls	r3, r3, #2
 8012a78:	68fa      	ldr	r2, [r7, #12]
 8012a7a:	8992      	ldrh	r2, [r2, #12]
 8012a7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012a80:	fb02 f200 	mul.w	r2, r2, r0
 8012a84:	1a9b      	subs	r3, r3, r2
 8012a86:	440b      	add	r3, r1
 8012a88:	4618      	mov	r0, r3
 8012a8a:	f7ff fab1 	bl	8011ff0 <ld_dword>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012a94:	4323      	orrs	r3, r4
 8012a96:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012a9e:	68bb      	ldr	r3, [r7, #8]
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	68fa      	ldr	r2, [r7, #12]
 8012aa4:	8992      	ldrh	r2, [r2, #12]
 8012aa6:	fbb3 f0f2 	udiv	r0, r3, r2
 8012aaa:	fb02 f200 	mul.w	r2, r2, r0
 8012aae:	1a9b      	subs	r3, r3, r2
 8012ab0:	440b      	add	r3, r1
 8012ab2:	6879      	ldr	r1, [r7, #4]
 8012ab4:	4618      	mov	r0, r3
 8012ab6:	f7ff fad9 	bl	801206c <st_dword>
			fs->wflag = 1;
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2201      	movs	r2, #1
 8012abe:	70da      	strb	r2, [r3, #3]
			break;
 8012ac0:	e008      	b.n	8012ad4 <put_fat+0x22e>
		}
	}
 8012ac2:	bf00      	nop
 8012ac4:	e006      	b.n	8012ad4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012ac6:	bf00      	nop
 8012ac8:	e004      	b.n	8012ad4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012aca:	bf00      	nop
 8012acc:	e002      	b.n	8012ad4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012ace:	bf00      	nop
 8012ad0:	e000      	b.n	8012ad4 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012ad2:	bf00      	nop
	return res;
 8012ad4:	7ffb      	ldrb	r3, [r7, #31]
}
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	3724      	adds	r7, #36	; 0x24
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd90      	pop	{r4, r7, pc}

08012ade <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8012ade:	b580      	push	{r7, lr}
 8012ae0:	b088      	sub	sp, #32
 8012ae2:	af00      	add	r7, sp, #0
 8012ae4:	60f8      	str	r0, [r7, #12]
 8012ae6:	60b9      	str	r1, [r7, #8]
 8012ae8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8012aea:	2300      	movs	r3, #0
 8012aec:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	2b01      	cmp	r3, #1
 8012af8:	d904      	bls.n	8012b04 <remove_chain+0x26>
 8012afa:	69bb      	ldr	r3, [r7, #24]
 8012afc:	6a1b      	ldr	r3, [r3, #32]
 8012afe:	68ba      	ldr	r2, [r7, #8]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d301      	bcc.n	8012b08 <remove_chain+0x2a>
 8012b04:	2302      	movs	r3, #2
 8012b06:	e04b      	b.n	8012ba0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00c      	beq.n	8012b28 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8012b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012b12:	6879      	ldr	r1, [r7, #4]
 8012b14:	69b8      	ldr	r0, [r7, #24]
 8012b16:	f7ff fec6 	bl	80128a6 <put_fat>
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8012b1e:	7ffb      	ldrb	r3, [r7, #31]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <remove_chain+0x4a>
 8012b24:	7ffb      	ldrb	r3, [r7, #31]
 8012b26:	e03b      	b.n	8012ba0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012b28:	68b9      	ldr	r1, [r7, #8]
 8012b2a:	68f8      	ldr	r0, [r7, #12]
 8012b2c:	f7ff fde7 	bl	80126fe <get_fat>
 8012b30:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d031      	beq.n	8012b9c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d101      	bne.n	8012b42 <remove_chain+0x64>
 8012b3e:	2302      	movs	r3, #2
 8012b40:	e02e      	b.n	8012ba0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b48:	d101      	bne.n	8012b4e <remove_chain+0x70>
 8012b4a:	2301      	movs	r3, #1
 8012b4c:	e028      	b.n	8012ba0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012b4e:	2200      	movs	r2, #0
 8012b50:	68b9      	ldr	r1, [r7, #8]
 8012b52:	69b8      	ldr	r0, [r7, #24]
 8012b54:	f7ff fea7 	bl	80128a6 <put_fat>
 8012b58:	4603      	mov	r3, r0
 8012b5a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012b5c:	7ffb      	ldrb	r3, [r7, #31]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d001      	beq.n	8012b66 <remove_chain+0x88>
 8012b62:	7ffb      	ldrb	r3, [r7, #31]
 8012b64:	e01c      	b.n	8012ba0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	69da      	ldr	r2, [r3, #28]
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	6a1b      	ldr	r3, [r3, #32]
 8012b6e:	3b02      	subs	r3, #2
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d20b      	bcs.n	8012b8c <remove_chain+0xae>
			fs->free_clst++;
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	69db      	ldr	r3, [r3, #28]
 8012b78:	1c5a      	adds	r2, r3, #1
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8012b7e:	69bb      	ldr	r3, [r7, #24]
 8012b80:	791b      	ldrb	r3, [r3, #4]
 8012b82:	f043 0301 	orr.w	r3, r3, #1
 8012b86:	b2da      	uxtb	r2, r3
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012b8c:	697b      	ldr	r3, [r7, #20]
 8012b8e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	6a1b      	ldr	r3, [r3, #32]
 8012b94:	68ba      	ldr	r2, [r7, #8]
 8012b96:	429a      	cmp	r2, r3
 8012b98:	d3c6      	bcc.n	8012b28 <remove_chain+0x4a>
 8012b9a:	e000      	b.n	8012b9e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012b9c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012b9e:	2300      	movs	r3, #0
}
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	3720      	adds	r7, #32
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	bd80      	pop	{r7, pc}

08012ba8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8012ba8:	b580      	push	{r7, lr}
 8012baa:	b088      	sub	sp, #32
 8012bac:	af00      	add	r7, sp, #0
 8012bae:	6078      	str	r0, [r7, #4]
 8012bb0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d10d      	bne.n	8012bda <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	699b      	ldr	r3, [r3, #24]
 8012bc2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012bc4:	69bb      	ldr	r3, [r7, #24]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d004      	beq.n	8012bd4 <create_chain+0x2c>
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	6a1b      	ldr	r3, [r3, #32]
 8012bce:	69ba      	ldr	r2, [r7, #24]
 8012bd0:	429a      	cmp	r2, r3
 8012bd2:	d31b      	bcc.n	8012c0c <create_chain+0x64>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	61bb      	str	r3, [r7, #24]
 8012bd8:	e018      	b.n	8012c0c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012bda:	6839      	ldr	r1, [r7, #0]
 8012bdc:	6878      	ldr	r0, [r7, #4]
 8012bde:	f7ff fd8e 	bl	80126fe <get_fat>
 8012be2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d801      	bhi.n	8012bee <create_chain+0x46>
 8012bea:	2301      	movs	r3, #1
 8012bec:	e070      	b.n	8012cd0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012bf4:	d101      	bne.n	8012bfa <create_chain+0x52>
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	e06a      	b.n	8012cd0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	6a1b      	ldr	r3, [r3, #32]
 8012bfe:	68fa      	ldr	r2, [r7, #12]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d201      	bcs.n	8012c08 <create_chain+0x60>
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	e063      	b.n	8012cd0 <create_chain+0x128>
		scl = clst;
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	3301      	adds	r3, #1
 8012c14:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	6a1b      	ldr	r3, [r3, #32]
 8012c1a:	69fa      	ldr	r2, [r7, #28]
 8012c1c:	429a      	cmp	r2, r3
 8012c1e:	d307      	bcc.n	8012c30 <create_chain+0x88>
				ncl = 2;
 8012c20:	2302      	movs	r3, #2
 8012c22:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012c24:	69fa      	ldr	r2, [r7, #28]
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d901      	bls.n	8012c30 <create_chain+0x88>
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	e04f      	b.n	8012cd0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012c30:	69f9      	ldr	r1, [r7, #28]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7ff fd63 	bl	80126fe <get_fat>
 8012c38:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00e      	beq.n	8012c5e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	2b01      	cmp	r3, #1
 8012c44:	d003      	beq.n	8012c4e <create_chain+0xa6>
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012c4c:	d101      	bne.n	8012c52 <create_chain+0xaa>
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	e03e      	b.n	8012cd0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012c52:	69fa      	ldr	r2, [r7, #28]
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d1da      	bne.n	8012c10 <create_chain+0x68>
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	e038      	b.n	8012cd0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012c5e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c64:	69f9      	ldr	r1, [r7, #28]
 8012c66:	6938      	ldr	r0, [r7, #16]
 8012c68:	f7ff fe1d 	bl	80128a6 <put_fat>
 8012c6c:	4603      	mov	r3, r0
 8012c6e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012c70:	7dfb      	ldrb	r3, [r7, #23]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d109      	bne.n	8012c8a <create_chain+0xe2>
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d006      	beq.n	8012c8a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012c7c:	69fa      	ldr	r2, [r7, #28]
 8012c7e:	6839      	ldr	r1, [r7, #0]
 8012c80:	6938      	ldr	r0, [r7, #16]
 8012c82:	f7ff fe10 	bl	80128a6 <put_fat>
 8012c86:	4603      	mov	r3, r0
 8012c88:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012c8a:	7dfb      	ldrb	r3, [r7, #23]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d116      	bne.n	8012cbe <create_chain+0x116>
		fs->last_clst = ncl;
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	69fa      	ldr	r2, [r7, #28]
 8012c94:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	69da      	ldr	r2, [r3, #28]
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	6a1b      	ldr	r3, [r3, #32]
 8012c9e:	3b02      	subs	r3, #2
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d804      	bhi.n	8012cae <create_chain+0x106>
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	69db      	ldr	r3, [r3, #28]
 8012ca8:	1e5a      	subs	r2, r3, #1
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	791b      	ldrb	r3, [r3, #4]
 8012cb2:	f043 0301 	orr.w	r3, r3, #1
 8012cb6:	b2da      	uxtb	r2, r3
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	711a      	strb	r2, [r3, #4]
 8012cbc:	e007      	b.n	8012cce <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012cbe:	7dfb      	ldrb	r3, [r7, #23]
 8012cc0:	2b01      	cmp	r3, #1
 8012cc2:	d102      	bne.n	8012cca <create_chain+0x122>
 8012cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cc8:	e000      	b.n	8012ccc <create_chain+0x124>
 8012cca:	2301      	movs	r3, #1
 8012ccc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012cce:	69fb      	ldr	r3, [r7, #28]
}
 8012cd0:	4618      	mov	r0, r3
 8012cd2:	3720      	adds	r7, #32
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b087      	sub	sp, #28
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cec:	3304      	adds	r3, #4
 8012cee:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	899b      	ldrh	r3, [r3, #12]
 8012cf4:	461a      	mov	r2, r3
 8012cf6:	683b      	ldr	r3, [r7, #0]
 8012cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8012cfc:	68fa      	ldr	r2, [r7, #12]
 8012cfe:	8952      	ldrh	r2, [r2, #10]
 8012d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d04:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012d06:	693b      	ldr	r3, [r7, #16]
 8012d08:	1d1a      	adds	r2, r3, #4
 8012d0a:	613a      	str	r2, [r7, #16]
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d101      	bne.n	8012d1a <clmt_clust+0x42>
 8012d16:	2300      	movs	r3, #0
 8012d18:	e010      	b.n	8012d3c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012d1a:	697a      	ldr	r2, [r7, #20]
 8012d1c:	68bb      	ldr	r3, [r7, #8]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d307      	bcc.n	8012d32 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012d22:	697a      	ldr	r2, [r7, #20]
 8012d24:	68bb      	ldr	r3, [r7, #8]
 8012d26:	1ad3      	subs	r3, r2, r3
 8012d28:	617b      	str	r3, [r7, #20]
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	3304      	adds	r3, #4
 8012d2e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012d30:	e7e9      	b.n	8012d06 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012d32:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	4413      	add	r3, r2
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	371c      	adds	r7, #28
 8012d40:	46bd      	mov	sp, r7
 8012d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d46:	4770      	bx	lr

08012d48 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b086      	sub	sp, #24
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012d5e:	d204      	bcs.n	8012d6a <dir_sdi+0x22>
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	f003 031f 	and.w	r3, r3, #31
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d001      	beq.n	8012d6e <dir_sdi+0x26>
		return FR_INT_ERR;
 8012d6a:	2302      	movs	r3, #2
 8012d6c:	e071      	b.n	8012e52 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	683a      	ldr	r2, [r7, #0]
 8012d72:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	689b      	ldr	r3, [r3, #8]
 8012d78:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d106      	bne.n	8012d8e <dir_sdi+0x46>
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	2b02      	cmp	r3, #2
 8012d86:	d902      	bls.n	8012d8e <dir_sdi+0x46>
		clst = fs->dirbase;
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d8c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d10c      	bne.n	8012dae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	095b      	lsrs	r3, r3, #5
 8012d98:	693a      	ldr	r2, [r7, #16]
 8012d9a:	8912      	ldrh	r2, [r2, #8]
 8012d9c:	4293      	cmp	r3, r2
 8012d9e:	d301      	bcc.n	8012da4 <dir_sdi+0x5c>
 8012da0:	2302      	movs	r3, #2
 8012da2:	e056      	b.n	8012e52 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012da4:	693b      	ldr	r3, [r7, #16]
 8012da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	61da      	str	r2, [r3, #28]
 8012dac:	e02d      	b.n	8012e0a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012dae:	693b      	ldr	r3, [r7, #16]
 8012db0:	895b      	ldrh	r3, [r3, #10]
 8012db2:	461a      	mov	r2, r3
 8012db4:	693b      	ldr	r3, [r7, #16]
 8012db6:	899b      	ldrh	r3, [r3, #12]
 8012db8:	fb03 f302 	mul.w	r3, r3, r2
 8012dbc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012dbe:	e019      	b.n	8012df4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	6979      	ldr	r1, [r7, #20]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f7ff fc9a 	bl	80126fe <get_fat>
 8012dca:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012dd2:	d101      	bne.n	8012dd8 <dir_sdi+0x90>
 8012dd4:	2301      	movs	r3, #1
 8012dd6:	e03c      	b.n	8012e52 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	2b01      	cmp	r3, #1
 8012ddc:	d904      	bls.n	8012de8 <dir_sdi+0xa0>
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	6a1b      	ldr	r3, [r3, #32]
 8012de2:	697a      	ldr	r2, [r7, #20]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d301      	bcc.n	8012dec <dir_sdi+0xa4>
 8012de8:	2302      	movs	r3, #2
 8012dea:	e032      	b.n	8012e52 <dir_sdi+0x10a>
			ofs -= csz;
 8012dec:	683a      	ldr	r2, [r7, #0]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012df4:	683a      	ldr	r2, [r7, #0]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	429a      	cmp	r2, r3
 8012dfa:	d2e1      	bcs.n	8012dc0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012dfc:	6979      	ldr	r1, [r7, #20]
 8012dfe:	6938      	ldr	r0, [r7, #16]
 8012e00:	f7ff fc5e 	bl	80126c0 <clust2sect>
 8012e04:	4602      	mov	r2, r0
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	697a      	ldr	r2, [r7, #20]
 8012e0e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	69db      	ldr	r3, [r3, #28]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d101      	bne.n	8012e1c <dir_sdi+0xd4>
 8012e18:	2302      	movs	r3, #2
 8012e1a:	e01a      	b.n	8012e52 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	69da      	ldr	r2, [r3, #28]
 8012e20:	693b      	ldr	r3, [r7, #16]
 8012e22:	899b      	ldrh	r3, [r3, #12]
 8012e24:	4619      	mov	r1, r3
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e2c:	441a      	add	r2, r3
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012e38:	693b      	ldr	r3, [r7, #16]
 8012e3a:	899b      	ldrh	r3, [r3, #12]
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	fbb3 f0f2 	udiv	r0, r3, r2
 8012e44:	fb02 f200 	mul.w	r2, r2, r0
 8012e48:	1a9b      	subs	r3, r3, r2
 8012e4a:	18ca      	adds	r2, r1, r3
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012e50:	2300      	movs	r3, #0
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3718      	adds	r7, #24
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}

08012e5a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012e5a:	b580      	push	{r7, lr}
 8012e5c:	b086      	sub	sp, #24
 8012e5e:	af00      	add	r7, sp, #0
 8012e60:	6078      	str	r0, [r7, #4]
 8012e62:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	695b      	ldr	r3, [r3, #20]
 8012e6e:	3320      	adds	r3, #32
 8012e70:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	69db      	ldr	r3, [r3, #28]
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d003      	beq.n	8012e82 <dir_next+0x28>
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012e80:	d301      	bcc.n	8012e86 <dir_next+0x2c>
 8012e82:	2304      	movs	r3, #4
 8012e84:	e0bb      	b.n	8012ffe <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	899b      	ldrh	r3, [r3, #12]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e92:	fb02 f201 	mul.w	r2, r2, r1
 8012e96:	1a9b      	subs	r3, r3, r2
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	f040 809d 	bne.w	8012fd8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	69db      	ldr	r3, [r3, #28]
 8012ea2:	1c5a      	adds	r2, r3, #1
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	699b      	ldr	r3, [r3, #24]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10b      	bne.n	8012ec8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	095b      	lsrs	r3, r3, #5
 8012eb4:	68fa      	ldr	r2, [r7, #12]
 8012eb6:	8912      	ldrh	r2, [r2, #8]
 8012eb8:	4293      	cmp	r3, r2
 8012eba:	f0c0 808d 	bcc.w	8012fd8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	2200      	movs	r2, #0
 8012ec2:	61da      	str	r2, [r3, #28]
 8012ec4:	2304      	movs	r3, #4
 8012ec6:	e09a      	b.n	8012ffe <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	899b      	ldrh	r3, [r3, #12]
 8012ecc:	461a      	mov	r2, r3
 8012ece:	68bb      	ldr	r3, [r7, #8]
 8012ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ed4:	68fa      	ldr	r2, [r7, #12]
 8012ed6:	8952      	ldrh	r2, [r2, #10]
 8012ed8:	3a01      	subs	r2, #1
 8012eda:	4013      	ands	r3, r2
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d17b      	bne.n	8012fd8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012ee0:	687a      	ldr	r2, [r7, #4]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	699b      	ldr	r3, [r3, #24]
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7ff fc08 	bl	80126fe <get_fat>
 8012eee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012ef0:	697b      	ldr	r3, [r7, #20]
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d801      	bhi.n	8012efa <dir_next+0xa0>
 8012ef6:	2302      	movs	r3, #2
 8012ef8:	e081      	b.n	8012ffe <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f00:	d101      	bne.n	8012f06 <dir_next+0xac>
 8012f02:	2301      	movs	r3, #1
 8012f04:	e07b      	b.n	8012ffe <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6a1b      	ldr	r3, [r3, #32]
 8012f0a:	697a      	ldr	r2, [r7, #20]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d359      	bcc.n	8012fc4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012f10:	683b      	ldr	r3, [r7, #0]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d104      	bne.n	8012f20 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	61da      	str	r2, [r3, #28]
 8012f1c:	2304      	movs	r3, #4
 8012f1e:	e06e      	b.n	8012ffe <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012f20:	687a      	ldr	r2, [r7, #4]
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	699b      	ldr	r3, [r3, #24]
 8012f26:	4619      	mov	r1, r3
 8012f28:	4610      	mov	r0, r2
 8012f2a:	f7ff fe3d 	bl	8012ba8 <create_chain>
 8012f2e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012f30:	697b      	ldr	r3, [r7, #20]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d101      	bne.n	8012f3a <dir_next+0xe0>
 8012f36:	2307      	movs	r3, #7
 8012f38:	e061      	b.n	8012ffe <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	d101      	bne.n	8012f44 <dir_next+0xea>
 8012f40:	2302      	movs	r3, #2
 8012f42:	e05c      	b.n	8012ffe <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012f44:	697b      	ldr	r3, [r7, #20]
 8012f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f4a:	d101      	bne.n	8012f50 <dir_next+0xf6>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e056      	b.n	8012ffe <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	f7ff fad3 	bl	80124fc <sync_window>
 8012f56:	4603      	mov	r3, r0
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d001      	beq.n	8012f60 <dir_next+0x106>
 8012f5c:	2301      	movs	r3, #1
 8012f5e:	e04e      	b.n	8012ffe <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	899b      	ldrh	r3, [r3, #12]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	2100      	movs	r1, #0
 8012f6e:	f7ff f8ca 	bl	8012106 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012f72:	2300      	movs	r3, #0
 8012f74:	613b      	str	r3, [r7, #16]
 8012f76:	6979      	ldr	r1, [r7, #20]
 8012f78:	68f8      	ldr	r0, [r7, #12]
 8012f7a:	f7ff fba1 	bl	80126c0 <clust2sect>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	639a      	str	r2, [r3, #56]	; 0x38
 8012f84:	e012      	b.n	8012fac <dir_next+0x152>
						fs->wflag = 1;
 8012f86:	68fb      	ldr	r3, [r7, #12]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012f8c:	68f8      	ldr	r0, [r7, #12]
 8012f8e:	f7ff fab5 	bl	80124fc <sync_window>
 8012f92:	4603      	mov	r3, r0
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d001      	beq.n	8012f9c <dir_next+0x142>
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e030      	b.n	8012ffe <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012f9c:	693b      	ldr	r3, [r7, #16]
 8012f9e:	3301      	adds	r3, #1
 8012fa0:	613b      	str	r3, [r7, #16]
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012fa6:	1c5a      	adds	r2, r3, #1
 8012fa8:	68fb      	ldr	r3, [r7, #12]
 8012faa:	639a      	str	r2, [r3, #56]	; 0x38
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	895b      	ldrh	r3, [r3, #10]
 8012fb0:	461a      	mov	r2, r3
 8012fb2:	693b      	ldr	r3, [r7, #16]
 8012fb4:	4293      	cmp	r3, r2
 8012fb6:	d3e6      	bcc.n	8012f86 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012fbc:	693b      	ldr	r3, [r7, #16]
 8012fbe:	1ad2      	subs	r2, r2, r3
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	697a      	ldr	r2, [r7, #20]
 8012fc8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012fca:	6979      	ldr	r1, [r7, #20]
 8012fcc:	68f8      	ldr	r0, [r7, #12]
 8012fce:	f7ff fb77 	bl	80126c0 <clust2sect>
 8012fd2:	4602      	mov	r2, r0
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	68ba      	ldr	r2, [r7, #8]
 8012fdc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	899b      	ldrh	r3, [r3, #12]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	fbb3 f0f2 	udiv	r0, r3, r2
 8012ff0:	fb02 f200 	mul.w	r2, r2, r0
 8012ff4:	1a9b      	subs	r3, r3, r2
 8012ff6:	18ca      	adds	r2, r1, r3
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012ffc:	2300      	movs	r3, #0
}
 8012ffe:	4618      	mov	r0, r3
 8013000:	3718      	adds	r7, #24
 8013002:	46bd      	mov	sp, r7
 8013004:	bd80      	pop	{r7, pc}

08013006 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013006:	b580      	push	{r7, lr}
 8013008:	b086      	sub	sp, #24
 801300a:	af00      	add	r7, sp, #0
 801300c:	6078      	str	r0, [r7, #4]
 801300e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013016:	2100      	movs	r1, #0
 8013018:	6878      	ldr	r0, [r7, #4]
 801301a:	f7ff fe95 	bl	8012d48 <dir_sdi>
 801301e:	4603      	mov	r3, r0
 8013020:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013022:	7dfb      	ldrb	r3, [r7, #23]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d12b      	bne.n	8013080 <dir_alloc+0x7a>
		n = 0;
 8013028:	2300      	movs	r3, #0
 801302a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	69db      	ldr	r3, [r3, #28]
 8013030:	4619      	mov	r1, r3
 8013032:	68f8      	ldr	r0, [r7, #12]
 8013034:	f7ff faa6 	bl	8012584 <move_window>
 8013038:	4603      	mov	r3, r0
 801303a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801303c:	7dfb      	ldrb	r3, [r7, #23]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d11d      	bne.n	801307e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	6a1b      	ldr	r3, [r3, #32]
 8013046:	781b      	ldrb	r3, [r3, #0]
 8013048:	2be5      	cmp	r3, #229	; 0xe5
 801304a:	d004      	beq.n	8013056 <dir_alloc+0x50>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	6a1b      	ldr	r3, [r3, #32]
 8013050:	781b      	ldrb	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d107      	bne.n	8013066 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013056:	693b      	ldr	r3, [r7, #16]
 8013058:	3301      	adds	r3, #1
 801305a:	613b      	str	r3, [r7, #16]
 801305c:	693a      	ldr	r2, [r7, #16]
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	429a      	cmp	r2, r3
 8013062:	d102      	bne.n	801306a <dir_alloc+0x64>
 8013064:	e00c      	b.n	8013080 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013066:	2300      	movs	r3, #0
 8013068:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801306a:	2101      	movs	r1, #1
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f7ff fef4 	bl	8012e5a <dir_next>
 8013072:	4603      	mov	r3, r0
 8013074:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013076:	7dfb      	ldrb	r3, [r7, #23]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d0d7      	beq.n	801302c <dir_alloc+0x26>
 801307c:	e000      	b.n	8013080 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801307e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013080:	7dfb      	ldrb	r3, [r7, #23]
 8013082:	2b04      	cmp	r3, #4
 8013084:	d101      	bne.n	801308a <dir_alloc+0x84>
 8013086:	2307      	movs	r3, #7
 8013088:	75fb      	strb	r3, [r7, #23]
	return res;
 801308a:	7dfb      	ldrb	r3, [r7, #23]
}
 801308c:	4618      	mov	r0, r3
 801308e:	3718      	adds	r7, #24
 8013090:	46bd      	mov	sp, r7
 8013092:	bd80      	pop	{r7, pc}

08013094 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	331a      	adds	r3, #26
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7fe ff8c 	bl	8011fc0 <ld_word>
 80130a8:	4603      	mov	r3, r0
 80130aa:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	2b03      	cmp	r3, #3
 80130b2:	d109      	bne.n	80130c8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	3314      	adds	r3, #20
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fe ff81 	bl	8011fc0 <ld_word>
 80130be:	4603      	mov	r3, r0
 80130c0:	041b      	lsls	r3, r3, #16
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80130c8:	68fb      	ldr	r3, [r7, #12]
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}

080130d2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80130d2:	b580      	push	{r7, lr}
 80130d4:	b084      	sub	sp, #16
 80130d6:	af00      	add	r7, sp, #0
 80130d8:	60f8      	str	r0, [r7, #12]
 80130da:	60b9      	str	r1, [r7, #8]
 80130dc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80130de:	68bb      	ldr	r3, [r7, #8]
 80130e0:	331a      	adds	r3, #26
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	b292      	uxth	r2, r2
 80130e6:	4611      	mov	r1, r2
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7fe ffa4 	bl	8012036 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b03      	cmp	r3, #3
 80130f4:	d109      	bne.n	801310a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80130f6:	68bb      	ldr	r3, [r7, #8]
 80130f8:	f103 0214 	add.w	r2, r3, #20
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	0c1b      	lsrs	r3, r3, #16
 8013100:	b29b      	uxth	r3, r3
 8013102:	4619      	mov	r1, r3
 8013104:	4610      	mov	r0, r2
 8013106:	f7fe ff96 	bl	8012036 <st_word>
	}
}
 801310a:	bf00      	nop
 801310c:	3710      	adds	r7, #16
 801310e:	46bd      	mov	sp, r7
 8013110:	bd80      	pop	{r7, pc}
	...

08013114 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8013114:	b590      	push	{r4, r7, lr}
 8013116:	b087      	sub	sp, #28
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801311e:	683b      	ldr	r3, [r7, #0]
 8013120:	331a      	adds	r3, #26
 8013122:	4618      	mov	r0, r3
 8013124:	f7fe ff4c 	bl	8011fc0 <ld_word>
 8013128:	4603      	mov	r3, r0
 801312a:	2b00      	cmp	r3, #0
 801312c:	d001      	beq.n	8013132 <cmp_lfn+0x1e>
 801312e:	2300      	movs	r3, #0
 8013130:	e059      	b.n	80131e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801313a:	1e5a      	subs	r2, r3, #1
 801313c:	4613      	mov	r3, r2
 801313e:	005b      	lsls	r3, r3, #1
 8013140:	4413      	add	r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4413      	add	r3, r2
 8013146:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8013148:	2301      	movs	r3, #1
 801314a:	81fb      	strh	r3, [r7, #14]
 801314c:	2300      	movs	r3, #0
 801314e:	613b      	str	r3, [r7, #16]
 8013150:	e033      	b.n	80131ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8013152:	4a27      	ldr	r2, [pc, #156]	; (80131f0 <cmp_lfn+0xdc>)
 8013154:	693b      	ldr	r3, [r7, #16]
 8013156:	4413      	add	r3, r2
 8013158:	781b      	ldrb	r3, [r3, #0]
 801315a:	461a      	mov	r2, r3
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	4413      	add	r3, r2
 8013160:	4618      	mov	r0, r3
 8013162:	f7fe ff2d 	bl	8011fc0 <ld_word>
 8013166:	4603      	mov	r3, r0
 8013168:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801316a:	89fb      	ldrh	r3, [r7, #14]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d01a      	beq.n	80131a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	2bfe      	cmp	r3, #254	; 0xfe
 8013174:	d812      	bhi.n	801319c <cmp_lfn+0x88>
 8013176:	89bb      	ldrh	r3, [r7, #12]
 8013178:	4618      	mov	r0, r3
 801317a:	f002 f909 	bl	8015390 <ff_wtoupper>
 801317e:	4603      	mov	r3, r0
 8013180:	461c      	mov	r4, r3
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	1c5a      	adds	r2, r3, #1
 8013186:	617a      	str	r2, [r7, #20]
 8013188:	005b      	lsls	r3, r3, #1
 801318a:	687a      	ldr	r2, [r7, #4]
 801318c:	4413      	add	r3, r2
 801318e:	881b      	ldrh	r3, [r3, #0]
 8013190:	4618      	mov	r0, r3
 8013192:	f002 f8fd 	bl	8015390 <ff_wtoupper>
 8013196:	4603      	mov	r3, r0
 8013198:	429c      	cmp	r4, r3
 801319a:	d001      	beq.n	80131a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801319c:	2300      	movs	r3, #0
 801319e:	e022      	b.n	80131e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 80131a0:	89bb      	ldrh	r3, [r7, #12]
 80131a2:	81fb      	strh	r3, [r7, #14]
 80131a4:	e006      	b.n	80131b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80131a6:	89bb      	ldrh	r3, [r7, #12]
 80131a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d001      	beq.n	80131b4 <cmp_lfn+0xa0>
 80131b0:	2300      	movs	r3, #0
 80131b2:	e018      	b.n	80131e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	3301      	adds	r3, #1
 80131b8:	613b      	str	r3, [r7, #16]
 80131ba:	693b      	ldr	r3, [r7, #16]
 80131bc:	2b0c      	cmp	r3, #12
 80131be:	d9c8      	bls.n	8013152 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d00b      	beq.n	80131e4 <cmp_lfn+0xd0>
 80131cc:	89fb      	ldrh	r3, [r7, #14]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d008      	beq.n	80131e4 <cmp_lfn+0xd0>
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	005b      	lsls	r3, r3, #1
 80131d6:	687a      	ldr	r2, [r7, #4]
 80131d8:	4413      	add	r3, r2
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d001      	beq.n	80131e4 <cmp_lfn+0xd0>
 80131e0:	2300      	movs	r3, #0
 80131e2:	e000      	b.n	80131e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80131e4:	2301      	movs	r3, #1
}
 80131e6:	4618      	mov	r0, r3
 80131e8:	371c      	adds	r7, #28
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd90      	pop	{r4, r7, pc}
 80131ee:	bf00      	nop
 80131f0:	08021d18 	.word	0x08021d18

080131f4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b088      	sub	sp, #32
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	60f8      	str	r0, [r7, #12]
 80131fc:	60b9      	str	r1, [r7, #8]
 80131fe:	4611      	mov	r1, r2
 8013200:	461a      	mov	r2, r3
 8013202:	460b      	mov	r3, r1
 8013204:	71fb      	strb	r3, [r7, #7]
 8013206:	4613      	mov	r3, r2
 8013208:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801320a:	68bb      	ldr	r3, [r7, #8]
 801320c:	330d      	adds	r3, #13
 801320e:	79ba      	ldrb	r2, [r7, #6]
 8013210:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	330b      	adds	r3, #11
 8013216:	220f      	movs	r2, #15
 8013218:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	330c      	adds	r3, #12
 801321e:	2200      	movs	r2, #0
 8013220:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013222:	68bb      	ldr	r3, [r7, #8]
 8013224:	331a      	adds	r3, #26
 8013226:	2100      	movs	r1, #0
 8013228:	4618      	mov	r0, r3
 801322a:	f7fe ff04 	bl	8012036 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801322e:	79fb      	ldrb	r3, [r7, #7]
 8013230:	1e5a      	subs	r2, r3, #1
 8013232:	4613      	mov	r3, r2
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	4413      	add	r3, r2
 8013238:	009b      	lsls	r3, r3, #2
 801323a:	4413      	add	r3, r2
 801323c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801323e:	2300      	movs	r3, #0
 8013240:	82fb      	strh	r3, [r7, #22]
 8013242:	2300      	movs	r3, #0
 8013244:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013246:	8afb      	ldrh	r3, [r7, #22]
 8013248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801324c:	4293      	cmp	r3, r2
 801324e:	d007      	beq.n	8013260 <put_lfn+0x6c>
 8013250:	69fb      	ldr	r3, [r7, #28]
 8013252:	1c5a      	adds	r2, r3, #1
 8013254:	61fa      	str	r2, [r7, #28]
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	68fa      	ldr	r2, [r7, #12]
 801325a:	4413      	add	r3, r2
 801325c:	881b      	ldrh	r3, [r3, #0]
 801325e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013260:	4a17      	ldr	r2, [pc, #92]	; (80132c0 <put_lfn+0xcc>)
 8013262:	69bb      	ldr	r3, [r7, #24]
 8013264:	4413      	add	r3, r2
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	461a      	mov	r2, r3
 801326a:	68bb      	ldr	r3, [r7, #8]
 801326c:	4413      	add	r3, r2
 801326e:	8afa      	ldrh	r2, [r7, #22]
 8013270:	4611      	mov	r1, r2
 8013272:	4618      	mov	r0, r3
 8013274:	f7fe fedf 	bl	8012036 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013278:	8afb      	ldrh	r3, [r7, #22]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d102      	bne.n	8013284 <put_lfn+0x90>
 801327e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013282:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	3301      	adds	r3, #1
 8013288:	61bb      	str	r3, [r7, #24]
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	2b0c      	cmp	r3, #12
 801328e:	d9da      	bls.n	8013246 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013290:	8afb      	ldrh	r3, [r7, #22]
 8013292:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013296:	4293      	cmp	r3, r2
 8013298:	d006      	beq.n	80132a8 <put_lfn+0xb4>
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	005b      	lsls	r3, r3, #1
 801329e:	68fa      	ldr	r2, [r7, #12]
 80132a0:	4413      	add	r3, r2
 80132a2:	881b      	ldrh	r3, [r3, #0]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d103      	bne.n	80132b0 <put_lfn+0xbc>
 80132a8:	79fb      	ldrb	r3, [r7, #7]
 80132aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132ae:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80132b0:	68bb      	ldr	r3, [r7, #8]
 80132b2:	79fa      	ldrb	r2, [r7, #7]
 80132b4:	701a      	strb	r2, [r3, #0]
}
 80132b6:	bf00      	nop
 80132b8:	3720      	adds	r7, #32
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
 80132be:	bf00      	nop
 80132c0:	08021d18 	.word	0x08021d18

080132c4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b08c      	sub	sp, #48	; 0x30
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80132d2:	220b      	movs	r2, #11
 80132d4:	68b9      	ldr	r1, [r7, #8]
 80132d6:	68f8      	ldr	r0, [r7, #12]
 80132d8:	f7fe fef4 	bl	80120c4 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	2b05      	cmp	r3, #5
 80132e0:	d92b      	bls.n	801333a <gen_numname+0x76>
		sr = seq;
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80132e6:	e022      	b.n	801332e <gen_numname+0x6a>
			wc = *lfn++;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	1c9a      	adds	r2, r3, #2
 80132ec:	607a      	str	r2, [r7, #4]
 80132ee:	881b      	ldrh	r3, [r3, #0]
 80132f0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80132f2:	2300      	movs	r3, #0
 80132f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80132f6:	e017      	b.n	8013328 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80132f8:	69fb      	ldr	r3, [r7, #28]
 80132fa:	005a      	lsls	r2, r3, #1
 80132fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132fe:	f003 0301 	and.w	r3, r3, #1
 8013302:	4413      	add	r3, r2
 8013304:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013306:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013308:	085b      	lsrs	r3, r3, #1
 801330a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013312:	2b00      	cmp	r3, #0
 8013314:	d005      	beq.n	8013322 <gen_numname+0x5e>
 8013316:	69fb      	ldr	r3, [r7, #28]
 8013318:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801331c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8013320:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8013322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013324:	3301      	adds	r3, #1
 8013326:	62bb      	str	r3, [r7, #40]	; 0x28
 8013328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801332a:	2b0f      	cmp	r3, #15
 801332c:	d9e4      	bls.n	80132f8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	881b      	ldrh	r3, [r3, #0]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d1d8      	bne.n	80132e8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801333a:	2307      	movs	r3, #7
 801333c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801333e:	683b      	ldr	r3, [r7, #0]
 8013340:	b2db      	uxtb	r3, r3
 8013342:	f003 030f 	and.w	r3, r3, #15
 8013346:	b2db      	uxtb	r3, r3
 8013348:	3330      	adds	r3, #48	; 0x30
 801334a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801334e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013352:	2b39      	cmp	r3, #57	; 0x39
 8013354:	d904      	bls.n	8013360 <gen_numname+0x9c>
 8013356:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801335a:	3307      	adds	r3, #7
 801335c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8013360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013362:	1e5a      	subs	r2, r3, #1
 8013364:	62ba      	str	r2, [r7, #40]	; 0x28
 8013366:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801336a:	4413      	add	r3, r2
 801336c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8013370:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	091b      	lsrs	r3, r3, #4
 8013378:	603b      	str	r3, [r7, #0]
	} while (seq);
 801337a:	683b      	ldr	r3, [r7, #0]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d1de      	bne.n	801333e <gen_numname+0x7a>
	ns[i] = '~';
 8013380:	f107 0214 	add.w	r2, r7, #20
 8013384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013386:	4413      	add	r3, r2
 8013388:	227e      	movs	r2, #126	; 0x7e
 801338a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801338c:	2300      	movs	r3, #0
 801338e:	627b      	str	r3, [r7, #36]	; 0x24
 8013390:	e002      	b.n	8013398 <gen_numname+0xd4>
 8013392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013394:	3301      	adds	r3, #1
 8013396:	627b      	str	r3, [r7, #36]	; 0x24
 8013398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339c:	429a      	cmp	r2, r3
 801339e:	d205      	bcs.n	80133ac <gen_numname+0xe8>
 80133a0:	68fa      	ldr	r2, [r7, #12]
 80133a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a4:	4413      	add	r3, r2
 80133a6:	781b      	ldrb	r3, [r3, #0]
 80133a8:	2b20      	cmp	r3, #32
 80133aa:	d1f2      	bne.n	8013392 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80133ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ae:	2b07      	cmp	r3, #7
 80133b0:	d808      	bhi.n	80133c4 <gen_numname+0x100>
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	1c5a      	adds	r2, r3, #1
 80133b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80133b8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80133bc:	4413      	add	r3, r2
 80133be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80133c2:	e000      	b.n	80133c6 <gen_numname+0x102>
 80133c4:	2120      	movs	r1, #32
 80133c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c8:	1c5a      	adds	r2, r3, #1
 80133ca:	627a      	str	r2, [r7, #36]	; 0x24
 80133cc:	68fa      	ldr	r2, [r7, #12]
 80133ce:	4413      	add	r3, r2
 80133d0:	460a      	mov	r2, r1
 80133d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80133d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d6:	2b07      	cmp	r3, #7
 80133d8:	d9e8      	bls.n	80133ac <gen_numname+0xe8>
}
 80133da:	bf00      	nop
 80133dc:	bf00      	nop
 80133de:	3730      	adds	r7, #48	; 0x30
 80133e0:	46bd      	mov	sp, r7
 80133e2:	bd80      	pop	{r7, pc}

080133e4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80133e4:	b480      	push	{r7}
 80133e6:	b085      	sub	sp, #20
 80133e8:	af00      	add	r7, sp, #0
 80133ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80133ec:	2300      	movs	r3, #0
 80133ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80133f0:	230b      	movs	r3, #11
 80133f2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80133f4:	7bfb      	ldrb	r3, [r7, #15]
 80133f6:	b2da      	uxtb	r2, r3
 80133f8:	0852      	lsrs	r2, r2, #1
 80133fa:	01db      	lsls	r3, r3, #7
 80133fc:	4313      	orrs	r3, r2
 80133fe:	b2da      	uxtb	r2, r3
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	1c59      	adds	r1, r3, #1
 8013404:	6079      	str	r1, [r7, #4]
 8013406:	781b      	ldrb	r3, [r3, #0]
 8013408:	4413      	add	r3, r2
 801340a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801340c:	68bb      	ldr	r3, [r7, #8]
 801340e:	3b01      	subs	r3, #1
 8013410:	60bb      	str	r3, [r7, #8]
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d1ed      	bne.n	80133f4 <sum_sfn+0x10>
	return sum;
 8013418:	7bfb      	ldrb	r3, [r7, #15]
}
 801341a:	4618      	mov	r0, r3
 801341c:	3714      	adds	r7, #20
 801341e:	46bd      	mov	sp, r7
 8013420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013424:	4770      	bx	lr

08013426 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013426:	b580      	push	{r7, lr}
 8013428:	b086      	sub	sp, #24
 801342a:	af00      	add	r7, sp, #0
 801342c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013434:	2100      	movs	r1, #0
 8013436:	6878      	ldr	r0, [r7, #4]
 8013438:	f7ff fc86 	bl	8012d48 <dir_sdi>
 801343c:	4603      	mov	r3, r0
 801343e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013440:	7dfb      	ldrb	r3, [r7, #23]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d001      	beq.n	801344a <dir_find+0x24>
 8013446:	7dfb      	ldrb	r3, [r7, #23]
 8013448:	e0a9      	b.n	801359e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801344a:	23ff      	movs	r3, #255	; 0xff
 801344c:	753b      	strb	r3, [r7, #20]
 801344e:	7d3b      	ldrb	r3, [r7, #20]
 8013450:	757b      	strb	r3, [r7, #21]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013458:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	69db      	ldr	r3, [r3, #28]
 801345e:	4619      	mov	r1, r3
 8013460:	6938      	ldr	r0, [r7, #16]
 8013462:	f7ff f88f 	bl	8012584 <move_window>
 8013466:	4603      	mov	r3, r0
 8013468:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801346a:	7dfb      	ldrb	r3, [r7, #23]
 801346c:	2b00      	cmp	r3, #0
 801346e:	f040 8090 	bne.w	8013592 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	6a1b      	ldr	r3, [r3, #32]
 8013476:	781b      	ldrb	r3, [r3, #0]
 8013478:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801347a:	7dbb      	ldrb	r3, [r7, #22]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d102      	bne.n	8013486 <dir_find+0x60>
 8013480:	2304      	movs	r3, #4
 8013482:	75fb      	strb	r3, [r7, #23]
 8013484:	e08a      	b.n	801359c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	6a1b      	ldr	r3, [r3, #32]
 801348a:	330b      	adds	r3, #11
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013492:	73fb      	strb	r3, [r7, #15]
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	7bfa      	ldrb	r2, [r7, #15]
 8013498:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801349a:	7dbb      	ldrb	r3, [r7, #22]
 801349c:	2be5      	cmp	r3, #229	; 0xe5
 801349e:	d007      	beq.n	80134b0 <dir_find+0x8a>
 80134a0:	7bfb      	ldrb	r3, [r7, #15]
 80134a2:	f003 0308 	and.w	r3, r3, #8
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d009      	beq.n	80134be <dir_find+0x98>
 80134aa:	7bfb      	ldrb	r3, [r7, #15]
 80134ac:	2b0f      	cmp	r3, #15
 80134ae:	d006      	beq.n	80134be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80134b0:	23ff      	movs	r3, #255	; 0xff
 80134b2:	757b      	strb	r3, [r7, #21]
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134ba:	631a      	str	r2, [r3, #48]	; 0x30
 80134bc:	e05e      	b.n	801357c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80134be:	7bfb      	ldrb	r3, [r7, #15]
 80134c0:	2b0f      	cmp	r3, #15
 80134c2:	d136      	bne.n	8013532 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80134ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d154      	bne.n	801357c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80134d2:	7dbb      	ldrb	r3, [r7, #22]
 80134d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d00d      	beq.n	80134f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	6a1b      	ldr	r3, [r3, #32]
 80134e0:	7b5b      	ldrb	r3, [r3, #13]
 80134e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80134e4:	7dbb      	ldrb	r3, [r7, #22]
 80134e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134ea:	75bb      	strb	r3, [r7, #22]
 80134ec:	7dbb      	ldrb	r3, [r7, #22]
 80134ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	695a      	ldr	r2, [r3, #20]
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80134f8:	7dba      	ldrb	r2, [r7, #22]
 80134fa:	7d7b      	ldrb	r3, [r7, #21]
 80134fc:	429a      	cmp	r2, r3
 80134fe:	d115      	bne.n	801352c <dir_find+0x106>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6a1b      	ldr	r3, [r3, #32]
 8013504:	330d      	adds	r3, #13
 8013506:	781b      	ldrb	r3, [r3, #0]
 8013508:	7d3a      	ldrb	r2, [r7, #20]
 801350a:	429a      	cmp	r2, r3
 801350c:	d10e      	bne.n	801352c <dir_find+0x106>
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	691a      	ldr	r2, [r3, #16]
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	6a1b      	ldr	r3, [r3, #32]
 8013516:	4619      	mov	r1, r3
 8013518:	4610      	mov	r0, r2
 801351a:	f7ff fdfb 	bl	8013114 <cmp_lfn>
 801351e:	4603      	mov	r3, r0
 8013520:	2b00      	cmp	r3, #0
 8013522:	d003      	beq.n	801352c <dir_find+0x106>
 8013524:	7d7b      	ldrb	r3, [r7, #21]
 8013526:	3b01      	subs	r3, #1
 8013528:	b2db      	uxtb	r3, r3
 801352a:	e000      	b.n	801352e <dir_find+0x108>
 801352c:	23ff      	movs	r3, #255	; 0xff
 801352e:	757b      	strb	r3, [r7, #21]
 8013530:	e024      	b.n	801357c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013532:	7d7b      	ldrb	r3, [r7, #21]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d109      	bne.n	801354c <dir_find+0x126>
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	6a1b      	ldr	r3, [r3, #32]
 801353c:	4618      	mov	r0, r3
 801353e:	f7ff ff51 	bl	80133e4 <sum_sfn>
 8013542:	4603      	mov	r3, r0
 8013544:	461a      	mov	r2, r3
 8013546:	7d3b      	ldrb	r3, [r7, #20]
 8013548:	4293      	cmp	r3, r2
 801354a:	d024      	beq.n	8013596 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013552:	f003 0301 	and.w	r3, r3, #1
 8013556:	2b00      	cmp	r3, #0
 8013558:	d10a      	bne.n	8013570 <dir_find+0x14a>
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	6a18      	ldr	r0, [r3, #32]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	3324      	adds	r3, #36	; 0x24
 8013562:	220b      	movs	r2, #11
 8013564:	4619      	mov	r1, r3
 8013566:	f7fe fde9 	bl	801213c <mem_cmp>
 801356a:	4603      	mov	r3, r0
 801356c:	2b00      	cmp	r3, #0
 801356e:	d014      	beq.n	801359a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013570:	23ff      	movs	r3, #255	; 0xff
 8013572:	757b      	strb	r3, [r7, #21]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801357a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801357c:	2100      	movs	r1, #0
 801357e:	6878      	ldr	r0, [r7, #4]
 8013580:	f7ff fc6b 	bl	8012e5a <dir_next>
 8013584:	4603      	mov	r3, r0
 8013586:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013588:	7dfb      	ldrb	r3, [r7, #23]
 801358a:	2b00      	cmp	r3, #0
 801358c:	f43f af65 	beq.w	801345a <dir_find+0x34>
 8013590:	e004      	b.n	801359c <dir_find+0x176>
		if (res != FR_OK) break;
 8013592:	bf00      	nop
 8013594:	e002      	b.n	801359c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8013596:	bf00      	nop
 8013598:	e000      	b.n	801359c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801359a:	bf00      	nop

	return res;
 801359c:	7dfb      	ldrb	r3, [r7, #23]
}
 801359e:	4618      	mov	r0, r3
 80135a0:	3718      	adds	r7, #24
 80135a2:	46bd      	mov	sp, r7
 80135a4:	bd80      	pop	{r7, pc}
	...

080135a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80135a8:	b580      	push	{r7, lr}
 80135aa:	b08c      	sub	sp, #48	; 0x30
 80135ac:	af00      	add	r7, sp, #0
 80135ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80135bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d001      	beq.n	80135c8 <dir_register+0x20>
 80135c4:	2306      	movs	r3, #6
 80135c6:	e0e0      	b.n	801378a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80135c8:	2300      	movs	r3, #0
 80135ca:	627b      	str	r3, [r7, #36]	; 0x24
 80135cc:	e002      	b.n	80135d4 <dir_register+0x2c>
 80135ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d0:	3301      	adds	r3, #1
 80135d2:	627b      	str	r3, [r7, #36]	; 0x24
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	691a      	ldr	r2, [r3, #16]
 80135d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135da:	005b      	lsls	r3, r3, #1
 80135dc:	4413      	add	r3, r2
 80135de:	881b      	ldrh	r3, [r3, #0]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d1f4      	bne.n	80135ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80135ea:	f107 030c 	add.w	r3, r7, #12
 80135ee:	220c      	movs	r2, #12
 80135f0:	4618      	mov	r0, r3
 80135f2:	f7fe fd67 	bl	80120c4 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80135f6:	7dfb      	ldrb	r3, [r7, #23]
 80135f8:	f003 0301 	and.w	r3, r3, #1
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d032      	beq.n	8013666 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2240      	movs	r2, #64	; 0x40
 8013604:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8013608:	2301      	movs	r3, #1
 801360a:	62bb      	str	r3, [r7, #40]	; 0x28
 801360c:	e016      	b.n	801363c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	691a      	ldr	r2, [r3, #16]
 8013618:	f107 010c 	add.w	r1, r7, #12
 801361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361e:	f7ff fe51 	bl	80132c4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f7ff feff 	bl	8013426 <dir_find>
 8013628:	4603      	mov	r3, r0
 801362a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801362e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013632:	2b00      	cmp	r3, #0
 8013634:	d106      	bne.n	8013644 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013638:	3301      	adds	r3, #1
 801363a:	62bb      	str	r3, [r7, #40]	; 0x28
 801363c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801363e:	2b63      	cmp	r3, #99	; 0x63
 8013640:	d9e5      	bls.n	801360e <dir_register+0x66>
 8013642:	e000      	b.n	8013646 <dir_register+0x9e>
			if (res != FR_OK) break;
 8013644:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013648:	2b64      	cmp	r3, #100	; 0x64
 801364a:	d101      	bne.n	8013650 <dir_register+0xa8>
 801364c:	2307      	movs	r3, #7
 801364e:	e09c      	b.n	801378a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013650:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013654:	2b04      	cmp	r3, #4
 8013656:	d002      	beq.n	801365e <dir_register+0xb6>
 8013658:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801365c:	e095      	b.n	801378a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801365e:	7dfa      	ldrb	r2, [r7, #23]
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013666:	7dfb      	ldrb	r3, [r7, #23]
 8013668:	f003 0302 	and.w	r3, r3, #2
 801366c:	2b00      	cmp	r3, #0
 801366e:	d007      	beq.n	8013680 <dir_register+0xd8>
 8013670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013672:	330c      	adds	r3, #12
 8013674:	4a47      	ldr	r2, [pc, #284]	; (8013794 <dir_register+0x1ec>)
 8013676:	fba2 2303 	umull	r2, r3, r2, r3
 801367a:	089b      	lsrs	r3, r3, #2
 801367c:	3301      	adds	r3, #1
 801367e:	e000      	b.n	8013682 <dir_register+0xda>
 8013680:	2301      	movs	r3, #1
 8013682:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013684:	6a39      	ldr	r1, [r7, #32]
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff fcbd 	bl	8013006 <dir_alloc>
 801368c:	4603      	mov	r3, r0
 801368e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013696:	2b00      	cmp	r3, #0
 8013698:	d148      	bne.n	801372c <dir_register+0x184>
 801369a:	6a3b      	ldr	r3, [r7, #32]
 801369c:	3b01      	subs	r3, #1
 801369e:	623b      	str	r3, [r7, #32]
 80136a0:	6a3b      	ldr	r3, [r7, #32]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d042      	beq.n	801372c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	695a      	ldr	r2, [r3, #20]
 80136aa:	6a3b      	ldr	r3, [r7, #32]
 80136ac:	015b      	lsls	r3, r3, #5
 80136ae:	1ad3      	subs	r3, r2, r3
 80136b0:	4619      	mov	r1, r3
 80136b2:	6878      	ldr	r0, [r7, #4]
 80136b4:	f7ff fb48 	bl	8012d48 <dir_sdi>
 80136b8:	4603      	mov	r3, r0
 80136ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80136be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d132      	bne.n	801372c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	3324      	adds	r3, #36	; 0x24
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ff fe8a 	bl	80133e4 <sum_sfn>
 80136d0:	4603      	mov	r3, r0
 80136d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	69db      	ldr	r3, [r3, #28]
 80136d8:	4619      	mov	r1, r3
 80136da:	69f8      	ldr	r0, [r7, #28]
 80136dc:	f7fe ff52 	bl	8012584 <move_window>
 80136e0:	4603      	mov	r3, r0
 80136e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80136e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d11d      	bne.n	801372a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80136ee:	69fb      	ldr	r3, [r7, #28]
 80136f0:	6918      	ldr	r0, [r3, #16]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6a19      	ldr	r1, [r3, #32]
 80136f6:	6a3b      	ldr	r3, [r7, #32]
 80136f8:	b2da      	uxtb	r2, r3
 80136fa:	7efb      	ldrb	r3, [r7, #27]
 80136fc:	f7ff fd7a 	bl	80131f4 <put_lfn>
				fs->wflag = 1;
 8013700:	69fb      	ldr	r3, [r7, #28]
 8013702:	2201      	movs	r2, #1
 8013704:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013706:	2100      	movs	r1, #0
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	f7ff fba6 	bl	8012e5a <dir_next>
 801370e:	4603      	mov	r3, r0
 8013710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8013714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013718:	2b00      	cmp	r3, #0
 801371a:	d107      	bne.n	801372c <dir_register+0x184>
 801371c:	6a3b      	ldr	r3, [r7, #32]
 801371e:	3b01      	subs	r3, #1
 8013720:	623b      	str	r3, [r7, #32]
 8013722:	6a3b      	ldr	r3, [r7, #32]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d1d5      	bne.n	80136d4 <dir_register+0x12c>
 8013728:	e000      	b.n	801372c <dir_register+0x184>
				if (res != FR_OK) break;
 801372a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801372c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013730:	2b00      	cmp	r3, #0
 8013732:	d128      	bne.n	8013786 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	69db      	ldr	r3, [r3, #28]
 8013738:	4619      	mov	r1, r3
 801373a:	69f8      	ldr	r0, [r7, #28]
 801373c:	f7fe ff22 	bl	8012584 <move_window>
 8013740:	4603      	mov	r3, r0
 8013742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801374a:	2b00      	cmp	r3, #0
 801374c:	d11b      	bne.n	8013786 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6a1b      	ldr	r3, [r3, #32]
 8013752:	2220      	movs	r2, #32
 8013754:	2100      	movs	r1, #0
 8013756:	4618      	mov	r0, r3
 8013758:	f7fe fcd5 	bl	8012106 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6a18      	ldr	r0, [r3, #32]
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	3324      	adds	r3, #36	; 0x24
 8013764:	220b      	movs	r2, #11
 8013766:	4619      	mov	r1, r3
 8013768:	f7fe fcac 	bl	80120c4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	6a1b      	ldr	r3, [r3, #32]
 8013776:	330c      	adds	r3, #12
 8013778:	f002 0218 	and.w	r2, r2, #24
 801377c:	b2d2      	uxtb	r2, r2
 801377e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	2201      	movs	r2, #1
 8013784:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013786:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801378a:	4618      	mov	r0, r3
 801378c:	3730      	adds	r7, #48	; 0x30
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	4ec4ec4f 	.word	0x4ec4ec4f

08013798 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013798:	b580      	push	{r7, lr}
 801379a:	b088      	sub	sp, #32
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	2200      	movs	r2, #0
 80137ac:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	69db      	ldr	r3, [r3, #28]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	f000 80c9 	beq.w	801394a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137c0:	d032      	beq.n	8013828 <get_fileinfo+0x90>
			i = j = 0;
 80137c2:	2300      	movs	r3, #0
 80137c4:	61bb      	str	r3, [r7, #24]
 80137c6:	69bb      	ldr	r3, [r7, #24]
 80137c8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80137ca:	e01b      	b.n	8013804 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80137cc:	89fb      	ldrh	r3, [r7, #14]
 80137ce:	2100      	movs	r1, #0
 80137d0:	4618      	mov	r0, r3
 80137d2:	f001 fda1 	bl	8015318 <ff_convert>
 80137d6:	4603      	mov	r3, r0
 80137d8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80137da:	89fb      	ldrh	r3, [r7, #14]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d102      	bne.n	80137e6 <get_fileinfo+0x4e>
 80137e0:	2300      	movs	r3, #0
 80137e2:	61fb      	str	r3, [r7, #28]
 80137e4:	e01a      	b.n	801381c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	2bfe      	cmp	r3, #254	; 0xfe
 80137ea:	d902      	bls.n	80137f2 <get_fileinfo+0x5a>
 80137ec:	2300      	movs	r3, #0
 80137ee:	61fb      	str	r3, [r7, #28]
 80137f0:	e014      	b.n	801381c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	1c5a      	adds	r2, r3, #1
 80137f6:	61fa      	str	r2, [r7, #28]
 80137f8:	89fa      	ldrh	r2, [r7, #14]
 80137fa:	b2d1      	uxtb	r1, r2
 80137fc:	683a      	ldr	r2, [r7, #0]
 80137fe:	4413      	add	r3, r2
 8013800:	460a      	mov	r2, r1
 8013802:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	691a      	ldr	r2, [r3, #16]
 8013808:	69bb      	ldr	r3, [r7, #24]
 801380a:	1c59      	adds	r1, r3, #1
 801380c:	61b9      	str	r1, [r7, #24]
 801380e:	005b      	lsls	r3, r3, #1
 8013810:	4413      	add	r3, r2
 8013812:	881b      	ldrh	r3, [r3, #0]
 8013814:	81fb      	strh	r3, [r7, #14]
 8013816:	89fb      	ldrh	r3, [r7, #14]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d1d7      	bne.n	80137cc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 801381c:	683a      	ldr	r2, [r7, #0]
 801381e:	69fb      	ldr	r3, [r7, #28]
 8013820:	4413      	add	r3, r2
 8013822:	3316      	adds	r3, #22
 8013824:	2200      	movs	r2, #0
 8013826:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8013828:	2300      	movs	r3, #0
 801382a:	61bb      	str	r3, [r7, #24]
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	4413      	add	r3, r2
 8013836:	3316      	adds	r3, #22
 8013838:	781b      	ldrb	r3, [r3, #0]
 801383a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 801383c:	e04c      	b.n	80138d8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	6a1a      	ldr	r2, [r3, #32]
 8013842:	69fb      	ldr	r3, [r7, #28]
 8013844:	1c59      	adds	r1, r3, #1
 8013846:	61f9      	str	r1, [r7, #28]
 8013848:	4413      	add	r3, r2
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801384e:	7dfb      	ldrb	r3, [r7, #23]
 8013850:	2b20      	cmp	r3, #32
 8013852:	d100      	bne.n	8013856 <get_fileinfo+0xbe>
 8013854:	e040      	b.n	80138d8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013856:	7dfb      	ldrb	r3, [r7, #23]
 8013858:	2b05      	cmp	r3, #5
 801385a:	d101      	bne.n	8013860 <get_fileinfo+0xc8>
 801385c:	23e5      	movs	r3, #229	; 0xe5
 801385e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8013860:	69fb      	ldr	r3, [r7, #28]
 8013862:	2b09      	cmp	r3, #9
 8013864:	d10f      	bne.n	8013886 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8013866:	89bb      	ldrh	r3, [r7, #12]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d105      	bne.n	8013878 <get_fileinfo+0xe0>
 801386c:	683a      	ldr	r2, [r7, #0]
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	4413      	add	r3, r2
 8013872:	3316      	adds	r3, #22
 8013874:	222e      	movs	r2, #46	; 0x2e
 8013876:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8013878:	69bb      	ldr	r3, [r7, #24]
 801387a:	1c5a      	adds	r2, r3, #1
 801387c:	61ba      	str	r2, [r7, #24]
 801387e:	683a      	ldr	r2, [r7, #0]
 8013880:	4413      	add	r3, r2
 8013882:	222e      	movs	r2, #46	; 0x2e
 8013884:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8013886:	683a      	ldr	r2, [r7, #0]
 8013888:	69bb      	ldr	r3, [r7, #24]
 801388a:	4413      	add	r3, r2
 801388c:	3309      	adds	r3, #9
 801388e:	7dfa      	ldrb	r2, [r7, #23]
 8013890:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8013892:	89bb      	ldrh	r3, [r7, #12]
 8013894:	2b00      	cmp	r3, #0
 8013896:	d11c      	bne.n	80138d2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8013898:	7dfb      	ldrb	r3, [r7, #23]
 801389a:	2b40      	cmp	r3, #64	; 0x40
 801389c:	d913      	bls.n	80138c6 <get_fileinfo+0x12e>
 801389e:	7dfb      	ldrb	r3, [r7, #23]
 80138a0:	2b5a      	cmp	r3, #90	; 0x5a
 80138a2:	d810      	bhi.n	80138c6 <get_fileinfo+0x12e>
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6a1b      	ldr	r3, [r3, #32]
 80138a8:	330c      	adds	r3, #12
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	461a      	mov	r2, r3
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	2b08      	cmp	r3, #8
 80138b2:	d901      	bls.n	80138b8 <get_fileinfo+0x120>
 80138b4:	2310      	movs	r3, #16
 80138b6:	e000      	b.n	80138ba <get_fileinfo+0x122>
 80138b8:	2308      	movs	r3, #8
 80138ba:	4013      	ands	r3, r2
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d002      	beq.n	80138c6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80138c0:	7dfb      	ldrb	r3, [r7, #23]
 80138c2:	3320      	adds	r3, #32
 80138c4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80138c6:	683a      	ldr	r2, [r7, #0]
 80138c8:	69bb      	ldr	r3, [r7, #24]
 80138ca:	4413      	add	r3, r2
 80138cc:	3316      	adds	r3, #22
 80138ce:	7dfa      	ldrb	r2, [r7, #23]
 80138d0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	3301      	adds	r3, #1
 80138d6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80138d8:	69fb      	ldr	r3, [r7, #28]
 80138da:	2b0a      	cmp	r3, #10
 80138dc:	d9af      	bls.n	801383e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80138de:	89bb      	ldrh	r3, [r7, #12]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10d      	bne.n	8013900 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80138e4:	683a      	ldr	r2, [r7, #0]
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	4413      	add	r3, r2
 80138ea:	3316      	adds	r3, #22
 80138ec:	2200      	movs	r2, #0
 80138ee:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	6a1b      	ldr	r3, [r3, #32]
 80138f4:	330c      	adds	r3, #12
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d101      	bne.n	8013900 <get_fileinfo+0x168>
 80138fc:	2300      	movs	r3, #0
 80138fe:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8013900:	683a      	ldr	r2, [r7, #0]
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	4413      	add	r3, r2
 8013906:	3309      	adds	r3, #9
 8013908:	2200      	movs	r2, #0
 801390a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6a1b      	ldr	r3, [r3, #32]
 8013910:	7ada      	ldrb	r2, [r3, #11]
 8013912:	683b      	ldr	r3, [r7, #0]
 8013914:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6a1b      	ldr	r3, [r3, #32]
 801391a:	331c      	adds	r3, #28
 801391c:	4618      	mov	r0, r3
 801391e:	f7fe fb67 	bl	8011ff0 <ld_dword>
 8013922:	4602      	mov	r2, r0
 8013924:	683b      	ldr	r3, [r7, #0]
 8013926:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	6a1b      	ldr	r3, [r3, #32]
 801392c:	3316      	adds	r3, #22
 801392e:	4618      	mov	r0, r3
 8013930:	f7fe fb5e 	bl	8011ff0 <ld_dword>
 8013934:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013936:	68bb      	ldr	r3, [r7, #8]
 8013938:	b29a      	uxth	r2, r3
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	80da      	strh	r2, [r3, #6]
 801393e:	68bb      	ldr	r3, [r7, #8]
 8013940:	0c1b      	lsrs	r3, r3, #16
 8013942:	b29a      	uxth	r2, r3
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	809a      	strh	r2, [r3, #4]
 8013948:	e000      	b.n	801394c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801394a:	bf00      	nop
}
 801394c:	3720      	adds	r7, #32
 801394e:	46bd      	mov	sp, r7
 8013950:	bd80      	pop	{r7, pc}
	...

08013954 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b08a      	sub	sp, #40	; 0x28
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801395e:	683b      	ldr	r3, [r7, #0]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	613b      	str	r3, [r7, #16]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	691b      	ldr	r3, [r3, #16]
 801396a:	60fb      	str	r3, [r7, #12]
 801396c:	2300      	movs	r3, #0
 801396e:	617b      	str	r3, [r7, #20]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013974:	69bb      	ldr	r3, [r7, #24]
 8013976:	1c5a      	adds	r2, r3, #1
 8013978:	61ba      	str	r2, [r7, #24]
 801397a:	693a      	ldr	r2, [r7, #16]
 801397c:	4413      	add	r3, r2
 801397e:	781b      	ldrb	r3, [r3, #0]
 8013980:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013984:	2b1f      	cmp	r3, #31
 8013986:	d940      	bls.n	8013a0a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8013988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801398a:	2b2f      	cmp	r3, #47	; 0x2f
 801398c:	d006      	beq.n	801399c <create_name+0x48>
 801398e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013990:	2b5c      	cmp	r3, #92	; 0x5c
 8013992:	d110      	bne.n	80139b6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013994:	e002      	b.n	801399c <create_name+0x48>
 8013996:	69bb      	ldr	r3, [r7, #24]
 8013998:	3301      	adds	r3, #1
 801399a:	61bb      	str	r3, [r7, #24]
 801399c:	693a      	ldr	r2, [r7, #16]
 801399e:	69bb      	ldr	r3, [r7, #24]
 80139a0:	4413      	add	r3, r2
 80139a2:	781b      	ldrb	r3, [r3, #0]
 80139a4:	2b2f      	cmp	r3, #47	; 0x2f
 80139a6:	d0f6      	beq.n	8013996 <create_name+0x42>
 80139a8:	693a      	ldr	r2, [r7, #16]
 80139aa:	69bb      	ldr	r3, [r7, #24]
 80139ac:	4413      	add	r3, r2
 80139ae:	781b      	ldrb	r3, [r3, #0]
 80139b0:	2b5c      	cmp	r3, #92	; 0x5c
 80139b2:	d0f0      	beq.n	8013996 <create_name+0x42>
			break;
 80139b4:	e02a      	b.n	8013a0c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80139b6:	697b      	ldr	r3, [r7, #20]
 80139b8:	2bfe      	cmp	r3, #254	; 0xfe
 80139ba:	d901      	bls.n	80139c0 <create_name+0x6c>
 80139bc:	2306      	movs	r3, #6
 80139be:	e177      	b.n	8013cb0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80139c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139c2:	b2db      	uxtb	r3, r3
 80139c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80139c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139c8:	2101      	movs	r1, #1
 80139ca:	4618      	mov	r0, r3
 80139cc:	f001 fca4 	bl	8015318 <ff_convert>
 80139d0:	4603      	mov	r3, r0
 80139d2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80139d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d101      	bne.n	80139de <create_name+0x8a>
 80139da:	2306      	movs	r3, #6
 80139dc:	e168      	b.n	8013cb0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80139de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139e0:	2b7f      	cmp	r3, #127	; 0x7f
 80139e2:	d809      	bhi.n	80139f8 <create_name+0xa4>
 80139e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139e6:	4619      	mov	r1, r3
 80139e8:	48b3      	ldr	r0, [pc, #716]	; (8013cb8 <create_name+0x364>)
 80139ea:	f7fe fbce 	bl	801218a <chk_chr>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d001      	beq.n	80139f8 <create_name+0xa4>
 80139f4:	2306      	movs	r3, #6
 80139f6:	e15b      	b.n	8013cb0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	1c5a      	adds	r2, r3, #1
 80139fc:	617a      	str	r2, [r7, #20]
 80139fe:	005b      	lsls	r3, r3, #1
 8013a00:	68fa      	ldr	r2, [r7, #12]
 8013a02:	4413      	add	r3, r2
 8013a04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013a06:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013a08:	e7b4      	b.n	8013974 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013a0a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013a0c:	693a      	ldr	r2, [r7, #16]
 8013a0e:	69bb      	ldr	r3, [r7, #24]
 8013a10:	441a      	add	r2, r3
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a18:	2b1f      	cmp	r3, #31
 8013a1a:	d801      	bhi.n	8013a20 <create_name+0xcc>
 8013a1c:	2304      	movs	r3, #4
 8013a1e:	e000      	b.n	8013a22 <create_name+0xce>
 8013a20:	2300      	movs	r3, #0
 8013a22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013a26:	e011      	b.n	8013a4c <create_name+0xf8>
		w = lfn[di - 1];
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013a2e:	3b01      	subs	r3, #1
 8013a30:	005b      	lsls	r3, r3, #1
 8013a32:	68fa      	ldr	r2, [r7, #12]
 8013a34:	4413      	add	r3, r2
 8013a36:	881b      	ldrh	r3, [r3, #0]
 8013a38:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8013a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a3c:	2b20      	cmp	r3, #32
 8013a3e:	d002      	beq.n	8013a46 <create_name+0xf2>
 8013a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a42:	2b2e      	cmp	r3, #46	; 0x2e
 8013a44:	d106      	bne.n	8013a54 <create_name+0x100>
		di--;
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013a4c:	697b      	ldr	r3, [r7, #20]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d1ea      	bne.n	8013a28 <create_name+0xd4>
 8013a52:	e000      	b.n	8013a56 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013a54:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013a56:	697b      	ldr	r3, [r7, #20]
 8013a58:	005b      	lsls	r3, r3, #1
 8013a5a:	68fa      	ldr	r2, [r7, #12]
 8013a5c:	4413      	add	r3, r2
 8013a5e:	2200      	movs	r2, #0
 8013a60:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d101      	bne.n	8013a6c <create_name+0x118>
 8013a68:	2306      	movs	r3, #6
 8013a6a:	e121      	b.n	8013cb0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	3324      	adds	r3, #36	; 0x24
 8013a70:	220b      	movs	r2, #11
 8013a72:	2120      	movs	r1, #32
 8013a74:	4618      	mov	r0, r3
 8013a76:	f7fe fb46 	bl	8012106 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	61bb      	str	r3, [r7, #24]
 8013a7e:	e002      	b.n	8013a86 <create_name+0x132>
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	3301      	adds	r3, #1
 8013a84:	61bb      	str	r3, [r7, #24]
 8013a86:	69bb      	ldr	r3, [r7, #24]
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	68fa      	ldr	r2, [r7, #12]
 8013a8c:	4413      	add	r3, r2
 8013a8e:	881b      	ldrh	r3, [r3, #0]
 8013a90:	2b20      	cmp	r3, #32
 8013a92:	d0f5      	beq.n	8013a80 <create_name+0x12c>
 8013a94:	69bb      	ldr	r3, [r7, #24]
 8013a96:	005b      	lsls	r3, r3, #1
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	4413      	add	r3, r2
 8013a9c:	881b      	ldrh	r3, [r3, #0]
 8013a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8013aa0:	d0ee      	beq.n	8013a80 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d009      	beq.n	8013abc <create_name+0x168>
 8013aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013aac:	f043 0303 	orr.w	r3, r3, #3
 8013ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8013ab4:	e002      	b.n	8013abc <create_name+0x168>
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	3b01      	subs	r3, #1
 8013aba:	617b      	str	r3, [r7, #20]
 8013abc:	697b      	ldr	r3, [r7, #20]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d009      	beq.n	8013ad6 <create_name+0x182>
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013ac8:	3b01      	subs	r3, #1
 8013aca:	005b      	lsls	r3, r3, #1
 8013acc:	68fa      	ldr	r2, [r7, #12]
 8013ace:	4413      	add	r3, r2
 8013ad0:	881b      	ldrh	r3, [r3, #0]
 8013ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8013ad4:	d1ef      	bne.n	8013ab6 <create_name+0x162>

	i = b = 0; ni = 8;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013adc:	2300      	movs	r3, #0
 8013ade:	623b      	str	r3, [r7, #32]
 8013ae0:	2308      	movs	r3, #8
 8013ae2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013ae4:	69bb      	ldr	r3, [r7, #24]
 8013ae6:	1c5a      	adds	r2, r3, #1
 8013ae8:	61ba      	str	r2, [r7, #24]
 8013aea:	005b      	lsls	r3, r3, #1
 8013aec:	68fa      	ldr	r2, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	881b      	ldrh	r3, [r3, #0]
 8013af2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013af4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	f000 8090 	beq.w	8013c1c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013afe:	2b20      	cmp	r3, #32
 8013b00:	d006      	beq.n	8013b10 <create_name+0x1bc>
 8013b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b04:	2b2e      	cmp	r3, #46	; 0x2e
 8013b06:	d10a      	bne.n	8013b1e <create_name+0x1ca>
 8013b08:	69ba      	ldr	r2, [r7, #24]
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d006      	beq.n	8013b1e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b14:	f043 0303 	orr.w	r3, r3, #3
 8013b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b1c:	e07d      	b.n	8013c1a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013b1e:	6a3a      	ldr	r2, [r7, #32]
 8013b20:	69fb      	ldr	r3, [r7, #28]
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d203      	bcs.n	8013b2e <create_name+0x1da>
 8013b26:	69ba      	ldr	r2, [r7, #24]
 8013b28:	697b      	ldr	r3, [r7, #20]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d123      	bne.n	8013b76 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013b2e:	69fb      	ldr	r3, [r7, #28]
 8013b30:	2b0b      	cmp	r3, #11
 8013b32:	d106      	bne.n	8013b42 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b38:	f043 0303 	orr.w	r3, r3, #3
 8013b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b40:	e06f      	b.n	8013c22 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013b42:	69ba      	ldr	r2, [r7, #24]
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d005      	beq.n	8013b56 <create_name+0x202>
 8013b4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b4e:	f043 0303 	orr.w	r3, r3, #3
 8013b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8013b56:	69ba      	ldr	r2, [r7, #24]
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	429a      	cmp	r2, r3
 8013b5c:	d860      	bhi.n	8013c20 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	61bb      	str	r3, [r7, #24]
 8013b62:	2308      	movs	r3, #8
 8013b64:	623b      	str	r3, [r7, #32]
 8013b66:	230b      	movs	r3, #11
 8013b68:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013b6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013b6e:	009b      	lsls	r3, r3, #2
 8013b70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013b74:	e051      	b.n	8013c1a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8013b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b78:	2b7f      	cmp	r3, #127	; 0x7f
 8013b7a:	d914      	bls.n	8013ba6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b7e:	2100      	movs	r1, #0
 8013b80:	4618      	mov	r0, r3
 8013b82:	f001 fbc9 	bl	8015318 <ff_convert>
 8013b86:	4603      	mov	r3, r0
 8013b88:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8013b8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d004      	beq.n	8013b9a <create_name+0x246>
 8013b90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b92:	3b80      	subs	r3, #128	; 0x80
 8013b94:	4a49      	ldr	r2, [pc, #292]	; (8013cbc <create_name+0x368>)
 8013b96:	5cd3      	ldrb	r3, [r2, r3]
 8013b98:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8013b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b9e:	f043 0302 	orr.w	r3, r3, #2
 8013ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8013ba6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d007      	beq.n	8013bbc <create_name+0x268>
 8013bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bae:	4619      	mov	r1, r3
 8013bb0:	4843      	ldr	r0, [pc, #268]	; (8013cc0 <create_name+0x36c>)
 8013bb2:	f7fe faea 	bl	801218a <chk_chr>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d008      	beq.n	8013bce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8013bbc:	235f      	movs	r3, #95	; 0x5f
 8013bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013bc4:	f043 0303 	orr.w	r3, r3, #3
 8013bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013bcc:	e01b      	b.n	8013c06 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8013bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bd0:	2b40      	cmp	r3, #64	; 0x40
 8013bd2:	d909      	bls.n	8013be8 <create_name+0x294>
 8013bd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bd6:	2b5a      	cmp	r3, #90	; 0x5a
 8013bd8:	d806      	bhi.n	8013be8 <create_name+0x294>
					b |= 2;
 8013bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013bde:	f043 0302 	orr.w	r3, r3, #2
 8013be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013be6:	e00e      	b.n	8013c06 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bea:	2b60      	cmp	r3, #96	; 0x60
 8013bec:	d90b      	bls.n	8013c06 <create_name+0x2b2>
 8013bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bf0:	2b7a      	cmp	r3, #122	; 0x7a
 8013bf2:	d808      	bhi.n	8013c06 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013bf8:	f043 0301 	orr.w	r3, r3, #1
 8013bfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013c00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c02:	3b20      	subs	r3, #32
 8013c04:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013c06:	6a3b      	ldr	r3, [r7, #32]
 8013c08:	1c5a      	adds	r2, r3, #1
 8013c0a:	623a      	str	r2, [r7, #32]
 8013c0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013c0e:	b2d1      	uxtb	r1, r2
 8013c10:	687a      	ldr	r2, [r7, #4]
 8013c12:	4413      	add	r3, r2
 8013c14:	460a      	mov	r2, r1
 8013c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013c1a:	e763      	b.n	8013ae4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013c1c:	bf00      	nop
 8013c1e:	e000      	b.n	8013c22 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8013c20:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013c28:	2be5      	cmp	r3, #229	; 0xe5
 8013c2a:	d103      	bne.n	8013c34 <create_name+0x2e0>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2205      	movs	r2, #5
 8013c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013c34:	69fb      	ldr	r3, [r7, #28]
 8013c36:	2b08      	cmp	r3, #8
 8013c38:	d104      	bne.n	8013c44 <create_name+0x2f0>
 8013c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c48:	f003 030c 	and.w	r3, r3, #12
 8013c4c:	2b0c      	cmp	r3, #12
 8013c4e:	d005      	beq.n	8013c5c <create_name+0x308>
 8013c50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c54:	f003 0303 	and.w	r3, r3, #3
 8013c58:	2b03      	cmp	r3, #3
 8013c5a:	d105      	bne.n	8013c68 <create_name+0x314>
 8013c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c60:	f043 0302 	orr.w	r3, r3, #2
 8013c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c6c:	f003 0302 	and.w	r3, r3, #2
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d117      	bne.n	8013ca4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c78:	f003 0303 	and.w	r3, r3, #3
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d105      	bne.n	8013c8c <create_name+0x338>
 8013c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c84:	f043 0310 	orr.w	r3, r3, #16
 8013c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013c8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013c90:	f003 030c 	and.w	r3, r3, #12
 8013c94:	2b04      	cmp	r3, #4
 8013c96:	d105      	bne.n	8013ca4 <create_name+0x350>
 8013c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c9c:	f043 0308 	orr.w	r3, r3, #8
 8013ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013caa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8013cae:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3728      	adds	r7, #40	; 0x28
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	0801dc5c 	.word	0x0801dc5c
 8013cbc:	08021c98 	.word	0x08021c98
 8013cc0:	0801dc68 	.word	0x0801dc68

08013cc4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013cd2:	693b      	ldr	r3, [r7, #16]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013cd8:	e002      	b.n	8013ce0 <follow_path+0x1c>
 8013cda:	683b      	ldr	r3, [r7, #0]
 8013cdc:	3301      	adds	r3, #1
 8013cde:	603b      	str	r3, [r7, #0]
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	2b2f      	cmp	r3, #47	; 0x2f
 8013ce6:	d0f8      	beq.n	8013cda <follow_path+0x16>
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	781b      	ldrb	r3, [r3, #0]
 8013cec:	2b5c      	cmp	r3, #92	; 0x5c
 8013cee:	d0f4      	beq.n	8013cda <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013cf0:	693b      	ldr	r3, [r7, #16]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	2b1f      	cmp	r3, #31
 8013cfc:	d80a      	bhi.n	8013d14 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2280      	movs	r2, #128	; 0x80
 8013d02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013d06:	2100      	movs	r1, #0
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f7ff f81d 	bl	8012d48 <dir_sdi>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	75fb      	strb	r3, [r7, #23]
 8013d12:	e048      	b.n	8013da6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013d14:	463b      	mov	r3, r7
 8013d16:	4619      	mov	r1, r3
 8013d18:	6878      	ldr	r0, [r7, #4]
 8013d1a:	f7ff fe1b 	bl	8013954 <create_name>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d22:	7dfb      	ldrb	r3, [r7, #23]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d139      	bne.n	8013d9c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f7ff fb7c 	bl	8013426 <dir_find>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013d38:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013d3a:	7dfb      	ldrb	r3, [r7, #23]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d00a      	beq.n	8013d56 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013d40:	7dfb      	ldrb	r3, [r7, #23]
 8013d42:	2b04      	cmp	r3, #4
 8013d44:	d12c      	bne.n	8013da0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013d46:	7afb      	ldrb	r3, [r7, #11]
 8013d48:	f003 0304 	and.w	r3, r3, #4
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d127      	bne.n	8013da0 <follow_path+0xdc>
 8013d50:	2305      	movs	r3, #5
 8013d52:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013d54:	e024      	b.n	8013da0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013d56:	7afb      	ldrb	r3, [r7, #11]
 8013d58:	f003 0304 	and.w	r3, r3, #4
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d121      	bne.n	8013da4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013d60:	693b      	ldr	r3, [r7, #16]
 8013d62:	799b      	ldrb	r3, [r3, #6]
 8013d64:	f003 0310 	and.w	r3, r3, #16
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d102      	bne.n	8013d72 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013d6c:	2305      	movs	r3, #5
 8013d6e:	75fb      	strb	r3, [r7, #23]
 8013d70:	e019      	b.n	8013da6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	695b      	ldr	r3, [r3, #20]
 8013d7c:	68fa      	ldr	r2, [r7, #12]
 8013d7e:	8992      	ldrh	r2, [r2, #12]
 8013d80:	fbb3 f0f2 	udiv	r0, r3, r2
 8013d84:	fb02 f200 	mul.w	r2, r2, r0
 8013d88:	1a9b      	subs	r3, r3, r2
 8013d8a:	440b      	add	r3, r1
 8013d8c:	4619      	mov	r1, r3
 8013d8e:	68f8      	ldr	r0, [r7, #12]
 8013d90:	f7ff f980 	bl	8013094 <ld_clust>
 8013d94:	4602      	mov	r2, r0
 8013d96:	693b      	ldr	r3, [r7, #16]
 8013d98:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013d9a:	e7bb      	b.n	8013d14 <follow_path+0x50>
			if (res != FR_OK) break;
 8013d9c:	bf00      	nop
 8013d9e:	e002      	b.n	8013da6 <follow_path+0xe2>
				break;
 8013da0:	bf00      	nop
 8013da2:	e000      	b.n	8013da6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013da4:	bf00      	nop
			}
		}
	}

	return res;
 8013da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3718      	adds	r7, #24
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013db0:	b480      	push	{r7}
 8013db2:	b087      	sub	sp, #28
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013db8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013dbc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d031      	beq.n	8013e2a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	617b      	str	r3, [r7, #20]
 8013dcc:	e002      	b.n	8013dd4 <get_ldnumber+0x24>
 8013dce:	697b      	ldr	r3, [r7, #20]
 8013dd0:	3301      	adds	r3, #1
 8013dd2:	617b      	str	r3, [r7, #20]
 8013dd4:	697b      	ldr	r3, [r7, #20]
 8013dd6:	781b      	ldrb	r3, [r3, #0]
 8013dd8:	2b1f      	cmp	r3, #31
 8013dda:	d903      	bls.n	8013de4 <get_ldnumber+0x34>
 8013ddc:	697b      	ldr	r3, [r7, #20]
 8013dde:	781b      	ldrb	r3, [r3, #0]
 8013de0:	2b3a      	cmp	r3, #58	; 0x3a
 8013de2:	d1f4      	bne.n	8013dce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013de4:	697b      	ldr	r3, [r7, #20]
 8013de6:	781b      	ldrb	r3, [r3, #0]
 8013de8:	2b3a      	cmp	r3, #58	; 0x3a
 8013dea:	d11c      	bne.n	8013e26 <get_ldnumber+0x76>
			tp = *path;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	1c5a      	adds	r2, r3, #1
 8013df6:	60fa      	str	r2, [r7, #12]
 8013df8:	781b      	ldrb	r3, [r3, #0]
 8013dfa:	3b30      	subs	r3, #48	; 0x30
 8013dfc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013dfe:	68bb      	ldr	r3, [r7, #8]
 8013e00:	2b09      	cmp	r3, #9
 8013e02:	d80e      	bhi.n	8013e22 <get_ldnumber+0x72>
 8013e04:	68fa      	ldr	r2, [r7, #12]
 8013e06:	697b      	ldr	r3, [r7, #20]
 8013e08:	429a      	cmp	r2, r3
 8013e0a:	d10a      	bne.n	8013e22 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d107      	bne.n	8013e22 <get_ldnumber+0x72>
					vol = (int)i;
 8013e12:	68bb      	ldr	r3, [r7, #8]
 8013e14:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013e16:	697b      	ldr	r3, [r7, #20]
 8013e18:	3301      	adds	r3, #1
 8013e1a:	617b      	str	r3, [r7, #20]
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	697a      	ldr	r2, [r7, #20]
 8013e20:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013e22:	693b      	ldr	r3, [r7, #16]
 8013e24:	e002      	b.n	8013e2c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013e26:	2300      	movs	r3, #0
 8013e28:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013e2a:	693b      	ldr	r3, [r7, #16]
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	371c      	adds	r7, #28
 8013e30:	46bd      	mov	sp, r7
 8013e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e36:	4770      	bx	lr

08013e38 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b082      	sub	sp, #8
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
 8013e40:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	70da      	strb	r2, [r3, #3]
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e4e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013e50:	6839      	ldr	r1, [r7, #0]
 8013e52:	6878      	ldr	r0, [r7, #4]
 8013e54:	f7fe fb96 	bl	8012584 <move_window>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d001      	beq.n	8013e62 <check_fs+0x2a>
 8013e5e:	2304      	movs	r3, #4
 8013e60:	e038      	b.n	8013ed4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	333c      	adds	r3, #60	; 0x3c
 8013e66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7fe f8a8 	bl	8011fc0 <ld_word>
 8013e70:	4603      	mov	r3, r0
 8013e72:	461a      	mov	r2, r3
 8013e74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d001      	beq.n	8013e80 <check_fs+0x48>
 8013e7c:	2303      	movs	r3, #3
 8013e7e:	e029      	b.n	8013ed4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e86:	2be9      	cmp	r3, #233	; 0xe9
 8013e88:	d009      	beq.n	8013e9e <check_fs+0x66>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013e90:	2beb      	cmp	r3, #235	; 0xeb
 8013e92:	d11e      	bne.n	8013ed2 <check_fs+0x9a>
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013e9a:	2b90      	cmp	r3, #144	; 0x90
 8013e9c:	d119      	bne.n	8013ed2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	333c      	adds	r3, #60	; 0x3c
 8013ea2:	3336      	adds	r3, #54	; 0x36
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7fe f8a3 	bl	8011ff0 <ld_dword>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013eb0:	4a0a      	ldr	r2, [pc, #40]	; (8013edc <check_fs+0xa4>)
 8013eb2:	4293      	cmp	r3, r2
 8013eb4:	d101      	bne.n	8013eba <check_fs+0x82>
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	e00c      	b.n	8013ed4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	333c      	adds	r3, #60	; 0x3c
 8013ebe:	3352      	adds	r3, #82	; 0x52
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fe f895 	bl	8011ff0 <ld_dword>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	4a05      	ldr	r2, [pc, #20]	; (8013ee0 <check_fs+0xa8>)
 8013eca:	4293      	cmp	r3, r2
 8013ecc:	d101      	bne.n	8013ed2 <check_fs+0x9a>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	e000      	b.n	8013ed4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013ed2:	2302      	movs	r3, #2
}
 8013ed4:	4618      	mov	r0, r3
 8013ed6:	3708      	adds	r7, #8
 8013ed8:	46bd      	mov	sp, r7
 8013eda:	bd80      	pop	{r7, pc}
 8013edc:	00544146 	.word	0x00544146
 8013ee0:	33544146 	.word	0x33544146

08013ee4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b096      	sub	sp, #88	; 0x58
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013ef2:	68bb      	ldr	r3, [r7, #8]
 8013ef4:	2200      	movs	r2, #0
 8013ef6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013ef8:	68f8      	ldr	r0, [r7, #12]
 8013efa:	f7ff ff59 	bl	8013db0 <get_ldnumber>
 8013efe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	da01      	bge.n	8013f0a <find_volume+0x26>
 8013f06:	230b      	movs	r3, #11
 8013f08:	e26c      	b.n	80143e4 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013f0a:	4aa4      	ldr	r2, [pc, #656]	; (801419c <find_volume+0x2b8>)
 8013f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f12:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d101      	bne.n	8013f1e <find_volume+0x3a>
 8013f1a:	230c      	movs	r3, #12
 8013f1c:	e262      	b.n	80143e4 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8013f1e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013f20:	f7fe f94e 	bl	80121c0 <lock_fs>
 8013f24:	4603      	mov	r3, r0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d101      	bne.n	8013f2e <find_volume+0x4a>
 8013f2a:	230f      	movs	r3, #15
 8013f2c:	e25a      	b.n	80143e4 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f32:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013f34:	79fb      	ldrb	r3, [r7, #7]
 8013f36:	f023 0301 	bic.w	r3, r3, #1
 8013f3a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3e:	781b      	ldrb	r3, [r3, #0]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d01a      	beq.n	8013f7a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f46:	785b      	ldrb	r3, [r3, #1]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7fd ff9b 	bl	8011e84 <disk_status>
 8013f4e:	4603      	mov	r3, r0
 8013f50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f58:	f003 0301 	and.w	r3, r3, #1
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d10c      	bne.n	8013f7a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013f60:	79fb      	ldrb	r3, [r7, #7]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d007      	beq.n	8013f76 <find_volume+0x92>
 8013f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f6a:	f003 0304 	and.w	r3, r3, #4
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d001      	beq.n	8013f76 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013f72:	230a      	movs	r3, #10
 8013f74:	e236      	b.n	80143e4 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8013f76:	2300      	movs	r3, #0
 8013f78:	e234      	b.n	80143e4 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f82:	b2da      	uxtb	r2, r3
 8013f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f86:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f8a:	785b      	ldrb	r3, [r3, #1]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f7fd ff93 	bl	8011eb8 <disk_initialize>
 8013f92:	4603      	mov	r3, r0
 8013f94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f9c:	f003 0301 	and.w	r3, r3, #1
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d001      	beq.n	8013fa8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013fa4:	2303      	movs	r3, #3
 8013fa6:	e21d      	b.n	80143e4 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013fa8:	79fb      	ldrb	r3, [r7, #7]
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d007      	beq.n	8013fbe <find_volume+0xda>
 8013fae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013fb2:	f003 0304 	and.w	r3, r3, #4
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d001      	beq.n	8013fbe <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8013fba:	230a      	movs	r3, #10
 8013fbc:	e212      	b.n	80143e4 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc0:	7858      	ldrb	r0, [r3, #1]
 8013fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc4:	330c      	adds	r3, #12
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	2102      	movs	r1, #2
 8013fca:	f7fd ffdb 	bl	8011f84 <disk_ioctl>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d001      	beq.n	8013fd8 <find_volume+0xf4>
 8013fd4:	2301      	movs	r3, #1
 8013fd6:	e205      	b.n	80143e4 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fda:	899b      	ldrh	r3, [r3, #12]
 8013fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013fe0:	d80d      	bhi.n	8013ffe <find_volume+0x11a>
 8013fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fe4:	899b      	ldrh	r3, [r3, #12]
 8013fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013fea:	d308      	bcc.n	8013ffe <find_volume+0x11a>
 8013fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fee:	899b      	ldrh	r3, [r3, #12]
 8013ff0:	461a      	mov	r2, r3
 8013ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ff4:	899b      	ldrh	r3, [r3, #12]
 8013ff6:	3b01      	subs	r3, #1
 8013ff8:	4013      	ands	r3, r2
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d001      	beq.n	8014002 <find_volume+0x11e>
 8013ffe:	2301      	movs	r3, #1
 8014000:	e1f0      	b.n	80143e4 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014002:	2300      	movs	r3, #0
 8014004:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014006:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801400a:	f7ff ff15 	bl	8013e38 <check_fs>
 801400e:	4603      	mov	r3, r0
 8014010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014018:	2b02      	cmp	r3, #2
 801401a:	d14b      	bne.n	80140b4 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801401c:	2300      	movs	r3, #0
 801401e:	643b      	str	r3, [r7, #64]	; 0x40
 8014020:	e01f      	b.n	8014062 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014024:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8014028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801402a:	011b      	lsls	r3, r3, #4
 801402c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014030:	4413      	add	r3, r2
 8014032:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014036:	3304      	adds	r3, #4
 8014038:	781b      	ldrb	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d006      	beq.n	801404c <find_volume+0x168>
 801403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014040:	3308      	adds	r3, #8
 8014042:	4618      	mov	r0, r3
 8014044:	f7fd ffd4 	bl	8011ff0 <ld_dword>
 8014048:	4602      	mov	r2, r0
 801404a:	e000      	b.n	801404e <find_volume+0x16a>
 801404c:	2200      	movs	r2, #0
 801404e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014050:	009b      	lsls	r3, r3, #2
 8014052:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014056:	440b      	add	r3, r1
 8014058:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801405c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801405e:	3301      	adds	r3, #1
 8014060:	643b      	str	r3, [r7, #64]	; 0x40
 8014062:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014064:	2b03      	cmp	r3, #3
 8014066:	d9dc      	bls.n	8014022 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014068:	2300      	movs	r3, #0
 801406a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801406c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801406e:	2b00      	cmp	r3, #0
 8014070:	d002      	beq.n	8014078 <find_volume+0x194>
 8014072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014074:	3b01      	subs	r3, #1
 8014076:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801407a:	009b      	lsls	r3, r3, #2
 801407c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014080:	4413      	add	r3, r2
 8014082:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014086:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801408a:	2b00      	cmp	r3, #0
 801408c:	d005      	beq.n	801409a <find_volume+0x1b6>
 801408e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014090:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014092:	f7ff fed1 	bl	8013e38 <check_fs>
 8014096:	4603      	mov	r3, r0
 8014098:	e000      	b.n	801409c <find_volume+0x1b8>
 801409a:	2303      	movs	r3, #3
 801409c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80140a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140a4:	2b01      	cmp	r3, #1
 80140a6:	d905      	bls.n	80140b4 <find_volume+0x1d0>
 80140a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140aa:	3301      	adds	r3, #1
 80140ac:	643b      	str	r3, [r7, #64]	; 0x40
 80140ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140b0:	2b03      	cmp	r3, #3
 80140b2:	d9e1      	bls.n	8014078 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80140b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140b8:	2b04      	cmp	r3, #4
 80140ba:	d101      	bne.n	80140c0 <find_volume+0x1dc>
 80140bc:	2301      	movs	r3, #1
 80140be:	e191      	b.n	80143e4 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80140c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140c4:	2b01      	cmp	r3, #1
 80140c6:	d901      	bls.n	80140cc <find_volume+0x1e8>
 80140c8:	230d      	movs	r3, #13
 80140ca:	e18b      	b.n	80143e4 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80140cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ce:	333c      	adds	r3, #60	; 0x3c
 80140d0:	330b      	adds	r3, #11
 80140d2:	4618      	mov	r0, r3
 80140d4:	f7fd ff74 	bl	8011fc0 <ld_word>
 80140d8:	4603      	mov	r3, r0
 80140da:	461a      	mov	r2, r3
 80140dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140de:	899b      	ldrh	r3, [r3, #12]
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d001      	beq.n	80140e8 <find_volume+0x204>
 80140e4:	230d      	movs	r3, #13
 80140e6:	e17d      	b.n	80143e4 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80140e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ea:	333c      	adds	r3, #60	; 0x3c
 80140ec:	3316      	adds	r3, #22
 80140ee:	4618      	mov	r0, r3
 80140f0:	f7fd ff66 	bl	8011fc0 <ld_word>
 80140f4:	4603      	mov	r3, r0
 80140f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80140f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d106      	bne.n	801410c <find_volume+0x228>
 80140fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014100:	333c      	adds	r3, #60	; 0x3c
 8014102:	3324      	adds	r3, #36	; 0x24
 8014104:	4618      	mov	r0, r3
 8014106:	f7fd ff73 	bl	8011ff0 <ld_dword>
 801410a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801410c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014110:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014114:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8014118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801411c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801411e:	789b      	ldrb	r3, [r3, #2]
 8014120:	2b01      	cmp	r3, #1
 8014122:	d005      	beq.n	8014130 <find_volume+0x24c>
 8014124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014126:	789b      	ldrb	r3, [r3, #2]
 8014128:	2b02      	cmp	r3, #2
 801412a:	d001      	beq.n	8014130 <find_volume+0x24c>
 801412c:	230d      	movs	r3, #13
 801412e:	e159      	b.n	80143e4 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014132:	789b      	ldrb	r3, [r3, #2]
 8014134:	461a      	mov	r2, r3
 8014136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014138:	fb02 f303 	mul.w	r3, r2, r3
 801413c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014140:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8014144:	b29a      	uxth	r2, r3
 8014146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014148:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801414a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801414c:	895b      	ldrh	r3, [r3, #10]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d008      	beq.n	8014164 <find_volume+0x280>
 8014152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014154:	895b      	ldrh	r3, [r3, #10]
 8014156:	461a      	mov	r2, r3
 8014158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801415a:	895b      	ldrh	r3, [r3, #10]
 801415c:	3b01      	subs	r3, #1
 801415e:	4013      	ands	r3, r2
 8014160:	2b00      	cmp	r3, #0
 8014162:	d001      	beq.n	8014168 <find_volume+0x284>
 8014164:	230d      	movs	r3, #13
 8014166:	e13d      	b.n	80143e4 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416a:	333c      	adds	r3, #60	; 0x3c
 801416c:	3311      	adds	r3, #17
 801416e:	4618      	mov	r0, r3
 8014170:	f7fd ff26 	bl	8011fc0 <ld_word>
 8014174:	4603      	mov	r3, r0
 8014176:	461a      	mov	r2, r3
 8014178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801417c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801417e:	891b      	ldrh	r3, [r3, #8]
 8014180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014182:	8992      	ldrh	r2, [r2, #12]
 8014184:	0952      	lsrs	r2, r2, #5
 8014186:	b292      	uxth	r2, r2
 8014188:	fbb3 f1f2 	udiv	r1, r3, r2
 801418c:	fb02 f201 	mul.w	r2, r2, r1
 8014190:	1a9b      	subs	r3, r3, r2
 8014192:	b29b      	uxth	r3, r3
 8014194:	2b00      	cmp	r3, #0
 8014196:	d003      	beq.n	80141a0 <find_volume+0x2bc>
 8014198:	230d      	movs	r3, #13
 801419a:	e123      	b.n	80143e4 <find_volume+0x500>
 801419c:	20002858 	.word	0x20002858

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80141a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a2:	333c      	adds	r3, #60	; 0x3c
 80141a4:	3313      	adds	r3, #19
 80141a6:	4618      	mov	r0, r3
 80141a8:	f7fd ff0a 	bl	8011fc0 <ld_word>
 80141ac:	4603      	mov	r3, r0
 80141ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80141b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d106      	bne.n	80141c4 <find_volume+0x2e0>
 80141b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b8:	333c      	adds	r3, #60	; 0x3c
 80141ba:	3320      	adds	r3, #32
 80141bc:	4618      	mov	r0, r3
 80141be:	f7fd ff17 	bl	8011ff0 <ld_dword>
 80141c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c6:	333c      	adds	r3, #60	; 0x3c
 80141c8:	330e      	adds	r3, #14
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7fd fef8 	bl	8011fc0 <ld_word>
 80141d0:	4603      	mov	r3, r0
 80141d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80141d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d101      	bne.n	80141de <find_volume+0x2fa>
 80141da:	230d      	movs	r3, #13
 80141dc:	e102      	b.n	80143e4 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80141de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80141e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80141e2:	4413      	add	r3, r2
 80141e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141e6:	8911      	ldrh	r1, [r2, #8]
 80141e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141ea:	8992      	ldrh	r2, [r2, #12]
 80141ec:	0952      	lsrs	r2, r2, #5
 80141ee:	b292      	uxth	r2, r2
 80141f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80141f4:	b292      	uxth	r2, r2
 80141f6:	4413      	add	r3, r2
 80141f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80141fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80141fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fe:	429a      	cmp	r2, r3
 8014200:	d201      	bcs.n	8014206 <find_volume+0x322>
 8014202:	230d      	movs	r3, #13
 8014204:	e0ee      	b.n	80143e4 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8014206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801420a:	1ad3      	subs	r3, r2, r3
 801420c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801420e:	8952      	ldrh	r2, [r2, #10]
 8014210:	fbb3 f3f2 	udiv	r3, r3, r2
 8014214:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014218:	2b00      	cmp	r3, #0
 801421a:	d101      	bne.n	8014220 <find_volume+0x33c>
 801421c:	230d      	movs	r3, #13
 801421e:	e0e1      	b.n	80143e4 <find_volume+0x500>
		fmt = FS_FAT32;
 8014220:	2303      	movs	r3, #3
 8014222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8014226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014228:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801422c:	4293      	cmp	r3, r2
 801422e:	d802      	bhi.n	8014236 <find_volume+0x352>
 8014230:	2302      	movs	r3, #2
 8014232:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8014236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014238:	f640 72f5 	movw	r2, #4085	; 0xff5
 801423c:	4293      	cmp	r3, r2
 801423e:	d802      	bhi.n	8014246 <find_volume+0x362>
 8014240:	2301      	movs	r3, #1
 8014242:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8014246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014248:	1c9a      	adds	r2, r3, #2
 801424a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801424c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 801424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014252:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014254:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014258:	441a      	add	r2, r3
 801425a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801425c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 801425e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014262:	441a      	add	r2, r3
 8014264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014266:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8014268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801426c:	2b03      	cmp	r3, #3
 801426e:	d11e      	bne.n	80142ae <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014272:	333c      	adds	r3, #60	; 0x3c
 8014274:	332a      	adds	r3, #42	; 0x2a
 8014276:	4618      	mov	r0, r3
 8014278:	f7fd fea2 	bl	8011fc0 <ld_word>
 801427c:	4603      	mov	r3, r0
 801427e:	2b00      	cmp	r3, #0
 8014280:	d001      	beq.n	8014286 <find_volume+0x3a2>
 8014282:	230d      	movs	r3, #13
 8014284:	e0ae      	b.n	80143e4 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8014286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014288:	891b      	ldrh	r3, [r3, #8]
 801428a:	2b00      	cmp	r3, #0
 801428c:	d001      	beq.n	8014292 <find_volume+0x3ae>
 801428e:	230d      	movs	r3, #13
 8014290:	e0a8      	b.n	80143e4 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014294:	333c      	adds	r3, #60	; 0x3c
 8014296:	332c      	adds	r3, #44	; 0x2c
 8014298:	4618      	mov	r0, r3
 801429a:	f7fd fea9 	bl	8011ff0 <ld_dword>
 801429e:	4602      	mov	r2, r0
 80142a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80142a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142a6:	6a1b      	ldr	r3, [r3, #32]
 80142a8:	009b      	lsls	r3, r3, #2
 80142aa:	647b      	str	r3, [r7, #68]	; 0x44
 80142ac:	e01f      	b.n	80142ee <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80142ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142b0:	891b      	ldrh	r3, [r3, #8]
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d101      	bne.n	80142ba <find_volume+0x3d6>
 80142b6:	230d      	movs	r3, #13
 80142b8:	e094      	b.n	80143e4 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80142ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142c0:	441a      	add	r2, r3
 80142c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142c4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80142c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80142ca:	2b02      	cmp	r3, #2
 80142cc:	d103      	bne.n	80142d6 <find_volume+0x3f2>
 80142ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d0:	6a1b      	ldr	r3, [r3, #32]
 80142d2:	005b      	lsls	r3, r3, #1
 80142d4:	e00a      	b.n	80142ec <find_volume+0x408>
 80142d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142d8:	6a1a      	ldr	r2, [r3, #32]
 80142da:	4613      	mov	r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	4413      	add	r3, r2
 80142e0:	085a      	lsrs	r2, r3, #1
 80142e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142e4:	6a1b      	ldr	r3, [r3, #32]
 80142e6:	f003 0301 	and.w	r3, r3, #1
 80142ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80142ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80142ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142f4:	899b      	ldrh	r3, [r3, #12]
 80142f6:	4619      	mov	r1, r3
 80142f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142fa:	440b      	add	r3, r1
 80142fc:	3b01      	subs	r3, #1
 80142fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014300:	8989      	ldrh	r1, [r1, #12]
 8014302:	fbb3 f3f1 	udiv	r3, r3, r1
 8014306:	429a      	cmp	r2, r3
 8014308:	d201      	bcs.n	801430e <find_volume+0x42a>
 801430a:	230d      	movs	r3, #13
 801430c:	e06a      	b.n	80143e4 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014314:	61da      	str	r2, [r3, #28]
 8014316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014318:	69da      	ldr	r2, [r3, #28]
 801431a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801431c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 801431e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014320:	2280      	movs	r2, #128	; 0x80
 8014322:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8014324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014328:	2b03      	cmp	r3, #3
 801432a:	d149      	bne.n	80143c0 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801432c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801432e:	333c      	adds	r3, #60	; 0x3c
 8014330:	3330      	adds	r3, #48	; 0x30
 8014332:	4618      	mov	r0, r3
 8014334:	f7fd fe44 	bl	8011fc0 <ld_word>
 8014338:	4603      	mov	r3, r0
 801433a:	2b01      	cmp	r3, #1
 801433c:	d140      	bne.n	80143c0 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 801433e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014340:	3301      	adds	r3, #1
 8014342:	4619      	mov	r1, r3
 8014344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014346:	f7fe f91d 	bl	8012584 <move_window>
 801434a:	4603      	mov	r3, r0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d137      	bne.n	80143c0 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8014350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014352:	2200      	movs	r2, #0
 8014354:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014358:	333c      	adds	r3, #60	; 0x3c
 801435a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801435e:	4618      	mov	r0, r3
 8014360:	f7fd fe2e 	bl	8011fc0 <ld_word>
 8014364:	4603      	mov	r3, r0
 8014366:	461a      	mov	r2, r3
 8014368:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801436c:	429a      	cmp	r2, r3
 801436e:	d127      	bne.n	80143c0 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014372:	333c      	adds	r3, #60	; 0x3c
 8014374:	4618      	mov	r0, r3
 8014376:	f7fd fe3b 	bl	8011ff0 <ld_dword>
 801437a:	4603      	mov	r3, r0
 801437c:	4a1b      	ldr	r2, [pc, #108]	; (80143ec <find_volume+0x508>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d11e      	bne.n	80143c0 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8014382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014384:	333c      	adds	r3, #60	; 0x3c
 8014386:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801438a:	4618      	mov	r0, r3
 801438c:	f7fd fe30 	bl	8011ff0 <ld_dword>
 8014390:	4603      	mov	r3, r0
 8014392:	4a17      	ldr	r2, [pc, #92]	; (80143f0 <find_volume+0x50c>)
 8014394:	4293      	cmp	r3, r2
 8014396:	d113      	bne.n	80143c0 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801439a:	333c      	adds	r3, #60	; 0x3c
 801439c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7fd fe25 	bl	8011ff0 <ld_dword>
 80143a6:	4602      	mov	r2, r0
 80143a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143aa:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80143ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143ae:	333c      	adds	r3, #60	; 0x3c
 80143b0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7fd fe1b 	bl	8011ff0 <ld_dword>
 80143ba:	4602      	mov	r2, r0
 80143bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143be:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80143c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80143c6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80143c8:	4b0a      	ldr	r3, [pc, #40]	; (80143f4 <find_volume+0x510>)
 80143ca:	881b      	ldrh	r3, [r3, #0]
 80143cc:	3301      	adds	r3, #1
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	4b08      	ldr	r3, [pc, #32]	; (80143f4 <find_volume+0x510>)
 80143d2:	801a      	strh	r2, [r3, #0]
 80143d4:	4b07      	ldr	r3, [pc, #28]	; (80143f4 <find_volume+0x510>)
 80143d6:	881a      	ldrh	r2, [r3, #0]
 80143d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143da:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80143dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80143de:	f7fe f869 	bl	80124b4 <clear_lock>
#endif
	return FR_OK;
 80143e2:	2300      	movs	r3, #0
}
 80143e4:	4618      	mov	r0, r3
 80143e6:	3758      	adds	r7, #88	; 0x58
 80143e8:	46bd      	mov	sp, r7
 80143ea:	bd80      	pop	{r7, pc}
 80143ec:	41615252 	.word	0x41615252
 80143f0:	61417272 	.word	0x61417272
 80143f4:	2000285c 	.word	0x2000285c

080143f8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
 8014400:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014402:	2309      	movs	r3, #9
 8014404:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d02e      	beq.n	801446a <validate+0x72>
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d02a      	beq.n	801446a <validate+0x72>
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	781b      	ldrb	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d025      	beq.n	801446a <validate+0x72>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	889a      	ldrh	r2, [r3, #4]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	88db      	ldrh	r3, [r3, #6]
 8014428:	429a      	cmp	r2, r3
 801442a:	d11e      	bne.n	801446a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4618      	mov	r0, r3
 8014432:	f7fd fec5 	bl	80121c0 <lock_fs>
 8014436:	4603      	mov	r3, r0
 8014438:	2b00      	cmp	r3, #0
 801443a:	d014      	beq.n	8014466 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	785b      	ldrb	r3, [r3, #1]
 8014442:	4618      	mov	r0, r3
 8014444:	f7fd fd1e 	bl	8011e84 <disk_status>
 8014448:	4603      	mov	r3, r0
 801444a:	f003 0301 	and.w	r3, r3, #1
 801444e:	2b00      	cmp	r3, #0
 8014450:	d102      	bne.n	8014458 <validate+0x60>
				res = FR_OK;
 8014452:	2300      	movs	r3, #0
 8014454:	73fb      	strb	r3, [r7, #15]
 8014456:	e008      	b.n	801446a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	2100      	movs	r1, #0
 801445e:	4618      	mov	r0, r3
 8014460:	f7fd fec4 	bl	80121ec <unlock_fs>
 8014464:	e001      	b.n	801446a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014466:	230f      	movs	r3, #15
 8014468:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801446a:	7bfb      	ldrb	r3, [r7, #15]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d102      	bne.n	8014476 <validate+0x7e>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	e000      	b.n	8014478 <validate+0x80>
 8014476:	2300      	movs	r3, #0
 8014478:	683a      	ldr	r2, [r7, #0]
 801447a:	6013      	str	r3, [r2, #0]
	return res;
 801447c:	7bfb      	ldrb	r3, [r7, #15]
}
 801447e:	4618      	mov	r0, r3
 8014480:	3710      	adds	r7, #16
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
	...

08014488 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b088      	sub	sp, #32
 801448c:	af00      	add	r7, sp, #0
 801448e:	60f8      	str	r0, [r7, #12]
 8014490:	60b9      	str	r1, [r7, #8]
 8014492:	4613      	mov	r3, r2
 8014494:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801449a:	f107 0310 	add.w	r3, r7, #16
 801449e:	4618      	mov	r0, r3
 80144a0:	f7ff fc86 	bl	8013db0 <get_ldnumber>
 80144a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80144a6:	69fb      	ldr	r3, [r7, #28]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	da01      	bge.n	80144b0 <f_mount+0x28>
 80144ac:	230b      	movs	r3, #11
 80144ae:	e048      	b.n	8014542 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80144b0:	4a26      	ldr	r2, [pc, #152]	; (801454c <f_mount+0xc4>)
 80144b2:	69fb      	ldr	r3, [r7, #28]
 80144b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80144ba:	69bb      	ldr	r3, [r7, #24]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d00f      	beq.n	80144e0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80144c0:	69b8      	ldr	r0, [r7, #24]
 80144c2:	f7fd fff7 	bl	80124b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80144c6:	69bb      	ldr	r3, [r7, #24]
 80144c8:	695b      	ldr	r3, [r3, #20]
 80144ca:	4618      	mov	r0, r3
 80144cc:	f001 f805 	bl	80154da <ff_del_syncobj>
 80144d0:	4603      	mov	r3, r0
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d101      	bne.n	80144da <f_mount+0x52>
 80144d6:	2302      	movs	r3, #2
 80144d8:	e033      	b.n	8014542 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80144da:	69bb      	ldr	r3, [r7, #24]
 80144dc:	2200      	movs	r2, #0
 80144de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d00f      	beq.n	8014506 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	2200      	movs	r2, #0
 80144ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80144ec:	69fb      	ldr	r3, [r7, #28]
 80144ee:	b2da      	uxtb	r2, r3
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	3314      	adds	r3, #20
 80144f4:	4619      	mov	r1, r3
 80144f6:	4610      	mov	r0, r2
 80144f8:	f000 ffd4 	bl	80154a4 <ff_cre_syncobj>
 80144fc:	4603      	mov	r3, r0
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d101      	bne.n	8014506 <f_mount+0x7e>
 8014502:	2302      	movs	r3, #2
 8014504:	e01d      	b.n	8014542 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014506:	68fa      	ldr	r2, [r7, #12]
 8014508:	4910      	ldr	r1, [pc, #64]	; (801454c <f_mount+0xc4>)
 801450a:	69fb      	ldr	r3, [r7, #28]
 801450c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	2b00      	cmp	r3, #0
 8014514:	d002      	beq.n	801451c <f_mount+0x94>
 8014516:	79fb      	ldrb	r3, [r7, #7]
 8014518:	2b01      	cmp	r3, #1
 801451a:	d001      	beq.n	8014520 <f_mount+0x98>
 801451c:	2300      	movs	r3, #0
 801451e:	e010      	b.n	8014542 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014520:	f107 010c 	add.w	r1, r7, #12
 8014524:	f107 0308 	add.w	r3, r7, #8
 8014528:	2200      	movs	r2, #0
 801452a:	4618      	mov	r0, r3
 801452c:	f7ff fcda 	bl	8013ee4 <find_volume>
 8014530:	4603      	mov	r3, r0
 8014532:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	7dfa      	ldrb	r2, [r7, #23]
 8014538:	4611      	mov	r1, r2
 801453a:	4618      	mov	r0, r3
 801453c:	f7fd fe56 	bl	80121ec <unlock_fs>
 8014540:	7dfb      	ldrb	r3, [r7, #23]
}
 8014542:	4618      	mov	r0, r3
 8014544:	3720      	adds	r7, #32
 8014546:	46bd      	mov	sp, r7
 8014548:	bd80      	pop	{r7, pc}
 801454a:	bf00      	nop
 801454c:	20002858 	.word	0x20002858

08014550 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014550:	b580      	push	{r7, lr}
 8014552:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8014556:	af00      	add	r7, sp, #0
 8014558:	f107 030c 	add.w	r3, r7, #12
 801455c:	6018      	str	r0, [r3, #0]
 801455e:	f107 0308 	add.w	r3, r7, #8
 8014562:	6019      	str	r1, [r3, #0]
 8014564:	1dfb      	adds	r3, r7, #7
 8014566:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014568:	f107 030c 	add.w	r3, r7, #12
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d101      	bne.n	8014576 <f_open+0x26>
 8014572:	2309      	movs	r3, #9
 8014574:	e24a      	b.n	8014a0c <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014576:	1dfb      	adds	r3, r7, #7
 8014578:	1dfa      	adds	r2, r7, #7
 801457a:	7812      	ldrb	r2, [r2, #0]
 801457c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8014580:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8014582:	1dfb      	adds	r3, r7, #7
 8014584:	781a      	ldrb	r2, [r3, #0]
 8014586:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801458a:	f107 0308 	add.w	r3, r7, #8
 801458e:	4618      	mov	r0, r3
 8014590:	f7ff fca8 	bl	8013ee4 <find_volume>
 8014594:	4603      	mov	r3, r0
 8014596:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801459a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801459e:	2b00      	cmp	r3, #0
 80145a0:	f040 8221 	bne.w	80149e6 <f_open+0x496>
		dj.obj.fs = fs;
 80145a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80145a8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80145ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80145b0:	f107 0214 	add.w	r2, r7, #20
 80145b4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80145b6:	f107 0308 	add.w	r3, r7, #8
 80145ba:	681a      	ldr	r2, [r3, #0]
 80145bc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80145c0:	4611      	mov	r1, r2
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7ff fb7e 	bl	8013cc4 <follow_path>
 80145c8:	4603      	mov	r3, r0
 80145ca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80145ce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d11b      	bne.n	801460e <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80145d6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80145da:	b25b      	sxtb	r3, r3
 80145dc:	2b00      	cmp	r3, #0
 80145de:	da03      	bge.n	80145e8 <f_open+0x98>
				res = FR_INVALID_NAME;
 80145e0:	2306      	movs	r3, #6
 80145e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80145e6:	e012      	b.n	801460e <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80145e8:	1dfb      	adds	r3, r7, #7
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	f023 0301 	bic.w	r3, r3, #1
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	bf14      	ite	ne
 80145f4:	2301      	movne	r3, #1
 80145f6:	2300      	moveq	r3, #0
 80145f8:	b2db      	uxtb	r3, r3
 80145fa:	461a      	mov	r2, r3
 80145fc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014600:	4611      	mov	r1, r2
 8014602:	4618      	mov	r0, r3
 8014604:	f7fd fe0e 	bl	8012224 <chk_lock>
 8014608:	4603      	mov	r3, r0
 801460a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801460e:	1dfb      	adds	r3, r7, #7
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	f003 031c 	and.w	r3, r3, #28
 8014616:	2b00      	cmp	r3, #0
 8014618:	f000 809b 	beq.w	8014752 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 801461c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014620:	2b00      	cmp	r3, #0
 8014622:	d019      	beq.n	8014658 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014624:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014628:	2b04      	cmp	r3, #4
 801462a:	d10e      	bne.n	801464a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801462c:	f7fd fe56 	bl	80122dc <enq_lock>
 8014630:	4603      	mov	r3, r0
 8014632:	2b00      	cmp	r3, #0
 8014634:	d006      	beq.n	8014644 <f_open+0xf4>
 8014636:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801463a:	4618      	mov	r0, r3
 801463c:	f7fe ffb4 	bl	80135a8 <dir_register>
 8014640:	4603      	mov	r3, r0
 8014642:	e000      	b.n	8014646 <f_open+0xf6>
 8014644:	2312      	movs	r3, #18
 8014646:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801464a:	1dfb      	adds	r3, r7, #7
 801464c:	1dfa      	adds	r2, r7, #7
 801464e:	7812      	ldrb	r2, [r2, #0]
 8014650:	f042 0208 	orr.w	r2, r2, #8
 8014654:	701a      	strb	r2, [r3, #0]
 8014656:	e012      	b.n	801467e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014658:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801465c:	f003 0311 	and.w	r3, r3, #17
 8014660:	2b00      	cmp	r3, #0
 8014662:	d003      	beq.n	801466c <f_open+0x11c>
					res = FR_DENIED;
 8014664:	2307      	movs	r3, #7
 8014666:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801466a:	e008      	b.n	801467e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801466c:	1dfb      	adds	r3, r7, #7
 801466e:	781b      	ldrb	r3, [r3, #0]
 8014670:	f003 0304 	and.w	r3, r3, #4
 8014674:	2b00      	cmp	r3, #0
 8014676:	d002      	beq.n	801467e <f_open+0x12e>
 8014678:	2308      	movs	r3, #8
 801467a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801467e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014682:	2b00      	cmp	r3, #0
 8014684:	f040 8082 	bne.w	801478c <f_open+0x23c>
 8014688:	1dfb      	adds	r3, r7, #7
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	f003 0308 	and.w	r3, r3, #8
 8014690:	2b00      	cmp	r3, #0
 8014692:	d07b      	beq.n	801478c <f_open+0x23c>
				dw = GET_FATTIME();
 8014694:	f7fb ff04 	bl	80104a0 <get_fattime>
 8014698:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801469c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80146a0:	330e      	adds	r3, #14
 80146a2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80146a6:	4618      	mov	r0, r3
 80146a8:	f7fd fce0 	bl	801206c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80146ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80146b0:	3316      	adds	r3, #22
 80146b2:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80146b6:	4618      	mov	r0, r3
 80146b8:	f7fd fcd8 	bl	801206c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80146bc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80146c0:	330b      	adds	r3, #11
 80146c2:	2220      	movs	r2, #32
 80146c4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80146c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80146ca:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80146ce:	4611      	mov	r1, r2
 80146d0:	4618      	mov	r0, r3
 80146d2:	f7fe fcdf 	bl	8013094 <ld_clust>
 80146d6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80146da:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80146de:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80146e2:	2200      	movs	r2, #0
 80146e4:	4618      	mov	r0, r3
 80146e6:	f7fe fcf4 	bl	80130d2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80146ea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80146ee:	331c      	adds	r3, #28
 80146f0:	2100      	movs	r1, #0
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7fd fcba 	bl	801206c <st_dword>
					fs->wflag = 1;
 80146f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80146fc:	2201      	movs	r2, #1
 80146fe:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014700:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8014704:	2b00      	cmp	r3, #0
 8014706:	d041      	beq.n	801478c <f_open+0x23c>
						dw = fs->winsect;
 8014708:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801470e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8014712:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014716:	2200      	movs	r2, #0
 8014718:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 801471c:	4618      	mov	r0, r3
 801471e:	f7fe f9de 	bl	8012ade <remove_chain>
 8014722:	4603      	mov	r3, r0
 8014724:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8014728:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801472c:	2b00      	cmp	r3, #0
 801472e:	d12d      	bne.n	801478c <f_open+0x23c>
							res = move_window(fs, dw);
 8014730:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014734:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8014738:	4618      	mov	r0, r3
 801473a:	f7fd ff23 	bl	8012584 <move_window>
 801473e:	4603      	mov	r3, r0
 8014740:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014744:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014748:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801474c:	3a01      	subs	r2, #1
 801474e:	619a      	str	r2, [r3, #24]
 8014750:	e01c      	b.n	801478c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014752:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014756:	2b00      	cmp	r3, #0
 8014758:	d118      	bne.n	801478c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801475a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801475e:	f003 0310 	and.w	r3, r3, #16
 8014762:	2b00      	cmp	r3, #0
 8014764:	d003      	beq.n	801476e <f_open+0x21e>
					res = FR_NO_FILE;
 8014766:	2304      	movs	r3, #4
 8014768:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801476c:	e00e      	b.n	801478c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801476e:	1dfb      	adds	r3, r7, #7
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	f003 0302 	and.w	r3, r3, #2
 8014776:	2b00      	cmp	r3, #0
 8014778:	d008      	beq.n	801478c <f_open+0x23c>
 801477a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 801477e:	f003 0301 	and.w	r3, r3, #1
 8014782:	2b00      	cmp	r3, #0
 8014784:	d002      	beq.n	801478c <f_open+0x23c>
						res = FR_DENIED;
 8014786:	2307      	movs	r3, #7
 8014788:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 801478c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014790:	2b00      	cmp	r3, #0
 8014792:	d136      	bne.n	8014802 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014794:	1dfb      	adds	r3, r7, #7
 8014796:	781b      	ldrb	r3, [r3, #0]
 8014798:	f003 0308 	and.w	r3, r3, #8
 801479c:	2b00      	cmp	r3, #0
 801479e:	d005      	beq.n	80147ac <f_open+0x25c>
				mode |= FA_MODIFIED;
 80147a0:	1dfb      	adds	r3, r7, #7
 80147a2:	1dfa      	adds	r2, r7, #7
 80147a4:	7812      	ldrb	r2, [r2, #0]
 80147a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80147aa:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80147ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80147b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80147b2:	f107 030c 	add.w	r3, r7, #12
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80147ba:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80147be:	f107 030c 	add.w	r3, r7, #12
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80147c6:	1dfb      	adds	r3, r7, #7
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	f023 0301 	bic.w	r3, r3, #1
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	bf14      	ite	ne
 80147d2:	2301      	movne	r3, #1
 80147d4:	2300      	moveq	r3, #0
 80147d6:	b2db      	uxtb	r3, r3
 80147d8:	461a      	mov	r2, r3
 80147da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80147de:	4611      	mov	r1, r2
 80147e0:	4618      	mov	r0, r3
 80147e2:	f7fd fd9d 	bl	8012320 <inc_lock>
 80147e6:	4602      	mov	r2, r0
 80147e8:	f107 030c 	add.w	r3, r7, #12
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80147f0:	f107 030c 	add.w	r3, r7, #12
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	691b      	ldr	r3, [r3, #16]
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d102      	bne.n	8014802 <f_open+0x2b2>
 80147fc:	2302      	movs	r3, #2
 80147fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014802:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014806:	2b00      	cmp	r3, #0
 8014808:	f040 80ed 	bne.w	80149e6 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801480c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014810:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8014814:	4611      	mov	r1, r2
 8014816:	4618      	mov	r0, r3
 8014818:	f7fe fc3c 	bl	8013094 <ld_clust>
 801481c:	4602      	mov	r2, r0
 801481e:	f107 030c 	add.w	r3, r7, #12
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014826:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801482a:	331c      	adds	r3, #28
 801482c:	4618      	mov	r0, r3
 801482e:	f7fd fbdf 	bl	8011ff0 <ld_dword>
 8014832:	4602      	mov	r2, r0
 8014834:	f107 030c 	add.w	r3, r7, #12
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801483c:	f107 030c 	add.w	r3, r7, #12
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	2200      	movs	r2, #0
 8014844:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014846:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801484a:	f107 030c 	add.w	r3, r7, #12
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014852:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014856:	88da      	ldrh	r2, [r3, #6]
 8014858:	f107 030c 	add.w	r3, r7, #12
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014860:	f107 030c 	add.w	r3, r7, #12
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	1dfa      	adds	r2, r7, #7
 8014868:	7812      	ldrb	r2, [r2, #0]
 801486a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 801486c:	f107 030c 	add.w	r3, r7, #12
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	2200      	movs	r2, #0
 8014874:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014876:	f107 030c 	add.w	r3, r7, #12
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	2200      	movs	r2, #0
 801487e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014880:	f107 030c 	add.w	r3, r7, #12
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2200      	movs	r2, #0
 8014888:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801488a:	f107 030c 	add.w	r3, r7, #12
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	3330      	adds	r3, #48	; 0x30
 8014892:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014896:	2100      	movs	r1, #0
 8014898:	4618      	mov	r0, r3
 801489a:	f7fd fc34 	bl	8012106 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801489e:	1dfb      	adds	r3, r7, #7
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	f003 0320 	and.w	r3, r3, #32
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	f000 809d 	beq.w	80149e6 <f_open+0x496>
 80148ac:	f107 030c 	add.w	r3, r7, #12
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	68db      	ldr	r3, [r3, #12]
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	f000 8096 	beq.w	80149e6 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80148ba:	f107 030c 	add.w	r3, r7, #12
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	68da      	ldr	r2, [r3, #12]
 80148c2:	f107 030c 	add.w	r3, r7, #12
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80148ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80148ce:	895b      	ldrh	r3, [r3, #10]
 80148d0:	461a      	mov	r2, r3
 80148d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80148d6:	899b      	ldrh	r3, [r3, #12]
 80148d8:	fb03 f302 	mul.w	r3, r3, r2
 80148dc:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80148e0:	f107 030c 	add.w	r3, r7, #12
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	689b      	ldr	r3, [r3, #8]
 80148e8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80148ec:	f107 030c 	add.w	r3, r7, #12
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80148f8:	e01f      	b.n	801493a <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 80148fa:	f107 030c 	add.w	r3, r7, #12
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8014904:	4618      	mov	r0, r3
 8014906:	f7fd fefa 	bl	80126fe <get_fat>
 801490a:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 801490e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8014912:	2b01      	cmp	r3, #1
 8014914:	d802      	bhi.n	801491c <f_open+0x3cc>
 8014916:	2302      	movs	r3, #2
 8014918:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801491c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8014920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014924:	d102      	bne.n	801492c <f_open+0x3dc>
 8014926:	2301      	movs	r3, #1
 8014928:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801492c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8014930:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8014934:	1ad3      	subs	r3, r2, r3
 8014936:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801493a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801493e:	2b00      	cmp	r3, #0
 8014940:	d105      	bne.n	801494e <f_open+0x3fe>
 8014942:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8014946:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801494a:	429a      	cmp	r2, r3
 801494c:	d8d5      	bhi.n	80148fa <f_open+0x3aa>
				}
				fp->clust = clst;
 801494e:	f107 030c 	add.w	r3, r7, #12
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8014958:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801495a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801495e:	2b00      	cmp	r3, #0
 8014960:	d141      	bne.n	80149e6 <f_open+0x496>
 8014962:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014966:	899b      	ldrh	r3, [r3, #12]
 8014968:	461a      	mov	r2, r3
 801496a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801496e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014972:	fb02 f201 	mul.w	r2, r2, r1
 8014976:	1a9b      	subs	r3, r3, r2
 8014978:	2b00      	cmp	r3, #0
 801497a:	d034      	beq.n	80149e6 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801497c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014980:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8014984:	4618      	mov	r0, r3
 8014986:	f7fd fe9b 	bl	80126c0 <clust2sect>
 801498a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 801498e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8014992:	2b00      	cmp	r3, #0
 8014994:	d103      	bne.n	801499e <f_open+0x44e>
						res = FR_INT_ERR;
 8014996:	2302      	movs	r3, #2
 8014998:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801499c:	e023      	b.n	80149e6 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801499e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80149a2:	899b      	ldrh	r3, [r3, #12]
 80149a4:	461a      	mov	r2, r3
 80149a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80149aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80149ae:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80149b2:	441a      	add	r2, r3
 80149b4:	f107 030c 	add.w	r3, r7, #12
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80149bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80149c0:	7858      	ldrb	r0, [r3, #1]
 80149c2:	f107 030c 	add.w	r3, r7, #12
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149cc:	f107 030c 	add.w	r3, r7, #12
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	6a1a      	ldr	r2, [r3, #32]
 80149d4:	2301      	movs	r3, #1
 80149d6:	f7fd fa95 	bl	8011f04 <disk_read>
 80149da:	4603      	mov	r3, r0
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d002      	beq.n	80149e6 <f_open+0x496>
 80149e0:	2301      	movs	r3, #1
 80149e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80149e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d004      	beq.n	80149f8 <f_open+0x4a8>
 80149ee:	f107 030c 	add.w	r3, r7, #12
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2200      	movs	r2, #0
 80149f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80149f8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80149fc:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8014a00:	4611      	mov	r1, r2
 8014a02:	4618      	mov	r0, r3
 8014a04:	f7fd fbf2 	bl	80121ec <unlock_fs>
 8014a08:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}

08014a16 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014a16:	b580      	push	{r7, lr}
 8014a18:	b08c      	sub	sp, #48	; 0x30
 8014a1a:	af00      	add	r7, sp, #0
 8014a1c:	60f8      	str	r0, [r7, #12]
 8014a1e:	60b9      	str	r1, [r7, #8]
 8014a20:	607a      	str	r2, [r7, #4]
 8014a22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014a28:	683b      	ldr	r3, [r7, #0]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	f107 0210 	add.w	r2, r7, #16
 8014a34:	4611      	mov	r1, r2
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7ff fcde 	bl	80143f8 <validate>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014a42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d107      	bne.n	8014a5a <f_write+0x44>
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	7d5b      	ldrb	r3, [r3, #21]
 8014a4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d009      	beq.n	8014a6e <f_write+0x58>
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014a60:	4611      	mov	r1, r2
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7fd fbc2 	bl	80121ec <unlock_fs>
 8014a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a6c:	e192      	b.n	8014d94 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	7d1b      	ldrb	r3, [r3, #20]
 8014a72:	f003 0302 	and.w	r3, r3, #2
 8014a76:	2b00      	cmp	r3, #0
 8014a78:	d106      	bne.n	8014a88 <f_write+0x72>
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	2107      	movs	r1, #7
 8014a7e:	4618      	mov	r0, r3
 8014a80:	f7fd fbb4 	bl	80121ec <unlock_fs>
 8014a84:	2307      	movs	r3, #7
 8014a86:	e185      	b.n	8014d94 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	699a      	ldr	r2, [r3, #24]
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	441a      	add	r2, r3
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	699b      	ldr	r3, [r3, #24]
 8014a94:	429a      	cmp	r2, r3
 8014a96:	f080 816a 	bcs.w	8014d6e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	699b      	ldr	r3, [r3, #24]
 8014a9e:	43db      	mvns	r3, r3
 8014aa0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014aa2:	e164      	b.n	8014d6e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	699b      	ldr	r3, [r3, #24]
 8014aa8:	693a      	ldr	r2, [r7, #16]
 8014aaa:	8992      	ldrh	r2, [r2, #12]
 8014aac:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ab0:	fb02 f201 	mul.w	r2, r2, r1
 8014ab4:	1a9b      	subs	r3, r3, r2
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	f040 810f 	bne.w	8014cda <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	699b      	ldr	r3, [r3, #24]
 8014ac0:	693a      	ldr	r2, [r7, #16]
 8014ac2:	8992      	ldrh	r2, [r2, #12]
 8014ac4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014ac8:	693a      	ldr	r2, [r7, #16]
 8014aca:	8952      	ldrh	r2, [r2, #10]
 8014acc:	3a01      	subs	r2, #1
 8014ace:	4013      	ands	r3, r2
 8014ad0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014ad2:	69bb      	ldr	r3, [r7, #24]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d14d      	bne.n	8014b74 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	699b      	ldr	r3, [r3, #24]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d10c      	bne.n	8014afa <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	689b      	ldr	r3, [r3, #8]
 8014ae4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d11a      	bne.n	8014b22 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	2100      	movs	r1, #0
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7fe f859 	bl	8012ba8 <create_chain>
 8014af6:	62b8      	str	r0, [r7, #40]	; 0x28
 8014af8:	e013      	b.n	8014b22 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d007      	beq.n	8014b12 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	699b      	ldr	r3, [r3, #24]
 8014b06:	4619      	mov	r1, r3
 8014b08:	68f8      	ldr	r0, [r7, #12]
 8014b0a:	f7fe f8e5 	bl	8012cd8 <clmt_clust>
 8014b0e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014b10:	e007      	b.n	8014b22 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014b12:	68fa      	ldr	r2, [r7, #12]
 8014b14:	68fb      	ldr	r3, [r7, #12]
 8014b16:	69db      	ldr	r3, [r3, #28]
 8014b18:	4619      	mov	r1, r3
 8014b1a:	4610      	mov	r0, r2
 8014b1c:	f7fe f844 	bl	8012ba8 <create_chain>
 8014b20:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	f000 8127 	beq.w	8014d78 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b2c:	2b01      	cmp	r3, #1
 8014b2e:	d109      	bne.n	8014b44 <f_write+0x12e>
 8014b30:	68fb      	ldr	r3, [r7, #12]
 8014b32:	2202      	movs	r2, #2
 8014b34:	755a      	strb	r2, [r3, #21]
 8014b36:	693b      	ldr	r3, [r7, #16]
 8014b38:	2102      	movs	r1, #2
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fd fb56 	bl	80121ec <unlock_fs>
 8014b40:	2302      	movs	r3, #2
 8014b42:	e127      	b.n	8014d94 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014b4a:	d109      	bne.n	8014b60 <f_write+0x14a>
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2201      	movs	r2, #1
 8014b50:	755a      	strb	r2, [r3, #21]
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	2101      	movs	r1, #1
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fd fb48 	bl	80121ec <unlock_fs>
 8014b5c:	2301      	movs	r3, #1
 8014b5e:	e119      	b.n	8014d94 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b64:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	689b      	ldr	r3, [r3, #8]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d102      	bne.n	8014b74 <f_write+0x15e>
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014b72:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	7d1b      	ldrb	r3, [r3, #20]
 8014b78:	b25b      	sxtb	r3, r3
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	da1d      	bge.n	8014bba <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	7858      	ldrb	r0, [r3, #1]
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	6a1a      	ldr	r2, [r3, #32]
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	f7fd f9d9 	bl	8011f44 <disk_write>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d009      	beq.n	8014bac <f_write+0x196>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2201      	movs	r2, #1
 8014b9c:	755a      	strb	r2, [r3, #21]
 8014b9e:	693b      	ldr	r3, [r7, #16]
 8014ba0:	2101      	movs	r1, #1
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7fd fb22 	bl	80121ec <unlock_fs>
 8014ba8:	2301      	movs	r3, #1
 8014baa:	e0f3      	b.n	8014d94 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	7d1b      	ldrb	r3, [r3, #20]
 8014bb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bb4:	b2da      	uxtb	r2, r3
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014bba:	693a      	ldr	r2, [r7, #16]
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	69db      	ldr	r3, [r3, #28]
 8014bc0:	4619      	mov	r1, r3
 8014bc2:	4610      	mov	r0, r2
 8014bc4:	f7fd fd7c 	bl	80126c0 <clust2sect>
 8014bc8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d109      	bne.n	8014be4 <f_write+0x1ce>
 8014bd0:	68fb      	ldr	r3, [r7, #12]
 8014bd2:	2202      	movs	r2, #2
 8014bd4:	755a      	strb	r2, [r3, #21]
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	2102      	movs	r1, #2
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7fd fb06 	bl	80121ec <unlock_fs>
 8014be0:	2302      	movs	r3, #2
 8014be2:	e0d7      	b.n	8014d94 <f_write+0x37e>
			sect += csect;
 8014be4:	697a      	ldr	r2, [r7, #20]
 8014be6:	69bb      	ldr	r3, [r7, #24]
 8014be8:	4413      	add	r3, r2
 8014bea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014bec:	693b      	ldr	r3, [r7, #16]
 8014bee:	899b      	ldrh	r3, [r3, #12]
 8014bf0:	461a      	mov	r2, r3
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8014bf8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014bfa:	6a3b      	ldr	r3, [r7, #32]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d048      	beq.n	8014c92 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014c00:	69ba      	ldr	r2, [r7, #24]
 8014c02:	6a3b      	ldr	r3, [r7, #32]
 8014c04:	4413      	add	r3, r2
 8014c06:	693a      	ldr	r2, [r7, #16]
 8014c08:	8952      	ldrh	r2, [r2, #10]
 8014c0a:	4293      	cmp	r3, r2
 8014c0c:	d905      	bls.n	8014c1a <f_write+0x204>
					cc = fs->csize - csect;
 8014c0e:	693b      	ldr	r3, [r7, #16]
 8014c10:	895b      	ldrh	r3, [r3, #10]
 8014c12:	461a      	mov	r2, r3
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	1ad3      	subs	r3, r2, r3
 8014c18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014c1a:	693b      	ldr	r3, [r7, #16]
 8014c1c:	7858      	ldrb	r0, [r3, #1]
 8014c1e:	6a3b      	ldr	r3, [r7, #32]
 8014c20:	697a      	ldr	r2, [r7, #20]
 8014c22:	69f9      	ldr	r1, [r7, #28]
 8014c24:	f7fd f98e 	bl	8011f44 <disk_write>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d009      	beq.n	8014c42 <f_write+0x22c>
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	2201      	movs	r2, #1
 8014c32:	755a      	strb	r2, [r3, #21]
 8014c34:	693b      	ldr	r3, [r7, #16]
 8014c36:	2101      	movs	r1, #1
 8014c38:	4618      	mov	r0, r3
 8014c3a:	f7fd fad7 	bl	80121ec <unlock_fs>
 8014c3e:	2301      	movs	r3, #1
 8014c40:	e0a8      	b.n	8014d94 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	6a1a      	ldr	r2, [r3, #32]
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	1ad3      	subs	r3, r2, r3
 8014c4a:	6a3a      	ldr	r2, [r7, #32]
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d918      	bls.n	8014c82 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	6a1a      	ldr	r2, [r3, #32]
 8014c5a:	697b      	ldr	r3, [r7, #20]
 8014c5c:	1ad3      	subs	r3, r2, r3
 8014c5e:	693a      	ldr	r2, [r7, #16]
 8014c60:	8992      	ldrh	r2, [r2, #12]
 8014c62:	fb02 f303 	mul.w	r3, r2, r3
 8014c66:	69fa      	ldr	r2, [r7, #28]
 8014c68:	18d1      	adds	r1, r2, r3
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	899b      	ldrh	r3, [r3, #12]
 8014c6e:	461a      	mov	r2, r3
 8014c70:	f7fd fa28 	bl	80120c4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	7d1b      	ldrb	r3, [r3, #20]
 8014c78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c7c:	b2da      	uxtb	r2, r3
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014c82:	693b      	ldr	r3, [r7, #16]
 8014c84:	899b      	ldrh	r3, [r3, #12]
 8014c86:	461a      	mov	r2, r3
 8014c88:	6a3b      	ldr	r3, [r7, #32]
 8014c8a:	fb02 f303 	mul.w	r3, r2, r3
 8014c8e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014c90:	e050      	b.n	8014d34 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	6a1b      	ldr	r3, [r3, #32]
 8014c96:	697a      	ldr	r2, [r7, #20]
 8014c98:	429a      	cmp	r2, r3
 8014c9a:	d01b      	beq.n	8014cd4 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	699a      	ldr	r2, [r3, #24]
 8014ca0:	68fb      	ldr	r3, [r7, #12]
 8014ca2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014ca4:	429a      	cmp	r2, r3
 8014ca6:	d215      	bcs.n	8014cd4 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014ca8:	693b      	ldr	r3, [r7, #16]
 8014caa:	7858      	ldrb	r0, [r3, #1]
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	697a      	ldr	r2, [r7, #20]
 8014cb6:	f7fd f925 	bl	8011f04 <disk_read>
 8014cba:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d009      	beq.n	8014cd4 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	2201      	movs	r2, #1
 8014cc4:	755a      	strb	r2, [r3, #21]
 8014cc6:	693b      	ldr	r3, [r7, #16]
 8014cc8:	2101      	movs	r1, #1
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f7fd fa8e 	bl	80121ec <unlock_fs>
 8014cd0:	2301      	movs	r3, #1
 8014cd2:	e05f      	b.n	8014d94 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	697a      	ldr	r2, [r7, #20]
 8014cd8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014cda:	693b      	ldr	r3, [r7, #16]
 8014cdc:	899b      	ldrh	r3, [r3, #12]
 8014cde:	4618      	mov	r0, r3
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	699b      	ldr	r3, [r3, #24]
 8014ce4:	693a      	ldr	r2, [r7, #16]
 8014ce6:	8992      	ldrh	r2, [r2, #12]
 8014ce8:	fbb3 f1f2 	udiv	r1, r3, r2
 8014cec:	fb02 f201 	mul.w	r2, r2, r1
 8014cf0:	1a9b      	subs	r3, r3, r2
 8014cf2:	1ac3      	subs	r3, r0, r3
 8014cf4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8014cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d901      	bls.n	8014d02 <f_write+0x2ec>
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	699b      	ldr	r3, [r3, #24]
 8014d0c:	693a      	ldr	r2, [r7, #16]
 8014d0e:	8992      	ldrh	r2, [r2, #12]
 8014d10:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d14:	fb02 f200 	mul.w	r2, r2, r0
 8014d18:	1a9b      	subs	r3, r3, r2
 8014d1a:	440b      	add	r3, r1
 8014d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d1e:	69f9      	ldr	r1, [r7, #28]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f7fd f9cf 	bl	80120c4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	7d1b      	ldrb	r3, [r3, #20]
 8014d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014d2e:	b2da      	uxtb	r2, r3
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014d34:	69fa      	ldr	r2, [r7, #28]
 8014d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d38:	4413      	add	r3, r2
 8014d3a:	61fb      	str	r3, [r7, #28]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	699a      	ldr	r2, [r3, #24]
 8014d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d42:	441a      	add	r2, r3
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	619a      	str	r2, [r3, #24]
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	68da      	ldr	r2, [r3, #12]
 8014d4c:	68fb      	ldr	r3, [r7, #12]
 8014d4e:	699b      	ldr	r3, [r3, #24]
 8014d50:	429a      	cmp	r2, r3
 8014d52:	bf38      	it	cc
 8014d54:	461a      	movcc	r2, r3
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	60da      	str	r2, [r3, #12]
 8014d5a:	683b      	ldr	r3, [r7, #0]
 8014d5c:	681a      	ldr	r2, [r3, #0]
 8014d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d60:	441a      	add	r2, r3
 8014d62:	683b      	ldr	r3, [r7, #0]
 8014d64:	601a      	str	r2, [r3, #0]
 8014d66:	687a      	ldr	r2, [r7, #4]
 8014d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d6a:	1ad3      	subs	r3, r2, r3
 8014d6c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f47f ae97 	bne.w	8014aa4 <f_write+0x8e>
 8014d76:	e000      	b.n	8014d7a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014d78:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	7d1b      	ldrb	r3, [r3, #20]
 8014d7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d82:	b2da      	uxtb	r2, r3
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8014d88:	693b      	ldr	r3, [r7, #16]
 8014d8a:	2100      	movs	r1, #0
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7fd fa2d 	bl	80121ec <unlock_fs>
 8014d92:	2300      	movs	r3, #0
}
 8014d94:	4618      	mov	r0, r3
 8014d96:	3730      	adds	r7, #48	; 0x30
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}

08014d9c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b086      	sub	sp, #24
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f107 0208 	add.w	r2, r7, #8
 8014daa:	4611      	mov	r1, r2
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7ff fb23 	bl	80143f8 <validate>
 8014db2:	4603      	mov	r3, r0
 8014db4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014db6:	7dfb      	ldrb	r3, [r7, #23]
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d16d      	bne.n	8014e98 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	7d1b      	ldrb	r3, [r3, #20]
 8014dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d067      	beq.n	8014e98 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	7d1b      	ldrb	r3, [r3, #20]
 8014dcc:	b25b      	sxtb	r3, r3
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	da1a      	bge.n	8014e08 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	7858      	ldrb	r0, [r3, #1]
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6a1a      	ldr	r2, [r3, #32]
 8014de0:	2301      	movs	r3, #1
 8014de2:	f7fd f8af 	bl	8011f44 <disk_write>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d006      	beq.n	8014dfa <f_sync+0x5e>
 8014dec:	68bb      	ldr	r3, [r7, #8]
 8014dee:	2101      	movs	r1, #1
 8014df0:	4618      	mov	r0, r3
 8014df2:	f7fd f9fb 	bl	80121ec <unlock_fs>
 8014df6:	2301      	movs	r3, #1
 8014df8:	e055      	b.n	8014ea6 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	7d1b      	ldrb	r3, [r3, #20]
 8014dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e02:	b2da      	uxtb	r2, r3
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8014e08:	f7fb fb4a 	bl	80104a0 <get_fattime>
 8014e0c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e14:	4619      	mov	r1, r3
 8014e16:	4610      	mov	r0, r2
 8014e18:	f7fd fbb4 	bl	8012584 <move_window>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014e20:	7dfb      	ldrb	r3, [r7, #23]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d138      	bne.n	8014e98 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e2a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	330b      	adds	r3, #11
 8014e30:	781a      	ldrb	r2, [r3, #0]
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	330b      	adds	r3, #11
 8014e36:	f042 0220 	orr.w	r2, r2, #32
 8014e3a:	b2d2      	uxtb	r2, r2
 8014e3c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6818      	ldr	r0, [r3, #0]
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	689b      	ldr	r3, [r3, #8]
 8014e46:	461a      	mov	r2, r3
 8014e48:	68f9      	ldr	r1, [r7, #12]
 8014e4a:	f7fe f942 	bl	80130d2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f103 021c 	add.w	r2, r3, #28
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	68db      	ldr	r3, [r3, #12]
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4610      	mov	r0, r2
 8014e5c:	f7fd f906 	bl	801206c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	3316      	adds	r3, #22
 8014e64:	6939      	ldr	r1, [r7, #16]
 8014e66:	4618      	mov	r0, r3
 8014e68:	f7fd f900 	bl	801206c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	3312      	adds	r3, #18
 8014e70:	2100      	movs	r1, #0
 8014e72:	4618      	mov	r0, r3
 8014e74:	f7fd f8df 	bl	8012036 <st_word>
					fs->wflag = 1;
 8014e78:	68bb      	ldr	r3, [r7, #8]
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7fd fbad 	bl	80125e0 <sync_fs>
 8014e86:	4603      	mov	r3, r0
 8014e88:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	7d1b      	ldrb	r3, [r3, #20]
 8014e8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014e92:	b2da      	uxtb	r2, r3
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	7dfa      	ldrb	r2, [r7, #23]
 8014e9c:	4611      	mov	r1, r2
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	f7fd f9a4 	bl	80121ec <unlock_fs>
 8014ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	3718      	adds	r7, #24
 8014eaa:	46bd      	mov	sp, r7
 8014eac:	bd80      	pop	{r7, pc}

08014eae <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014eae:	b580      	push	{r7, lr}
 8014eb0:	b084      	sub	sp, #16
 8014eb2:	af00      	add	r7, sp, #0
 8014eb4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014eb6:	6878      	ldr	r0, [r7, #4]
 8014eb8:	f7ff ff70 	bl	8014d9c <f_sync>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014ec0:	7bfb      	ldrb	r3, [r7, #15]
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d11d      	bne.n	8014f02 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	f107 0208 	add.w	r2, r7, #8
 8014ecc:	4611      	mov	r1, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7ff fa92 	bl	80143f8 <validate>
 8014ed4:	4603      	mov	r3, r0
 8014ed6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ed8:	7bfb      	ldrb	r3, [r7, #15]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d111      	bne.n	8014f02 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	691b      	ldr	r3, [r3, #16]
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f7fd faaa 	bl	801243c <dec_lock>
 8014ee8:	4603      	mov	r3, r0
 8014eea:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014eec:	7bfb      	ldrb	r3, [r7, #15]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d102      	bne.n	8014ef8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	2100      	movs	r1, #0
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7fd f975 	bl	80121ec <unlock_fs>
#endif
		}
	}
	return res;
 8014f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3710      	adds	r7, #16
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8014f12:	af00      	add	r7, sp, #0
 8014f14:	1d3b      	adds	r3, r7, #4
 8014f16:	6018      	str	r0, [r3, #0]
 8014f18:	463b      	mov	r3, r7
 8014f1a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014f1c:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8014f20:	1d3b      	adds	r3, r7, #4
 8014f22:	2200      	movs	r2, #0
 8014f24:	4618      	mov	r0, r3
 8014f26:	f7fe ffdd 	bl	8013ee4 <find_volume>
 8014f2a:	4603      	mov	r3, r0
 8014f2c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8014f30:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d127      	bne.n	8014f88 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8014f38:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014f3c:	f107 0208 	add.w	r2, r7, #8
 8014f40:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8014f42:	1d3b      	adds	r3, r7, #4
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8014f4a:	4611      	mov	r1, r2
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fe feb9 	bl	8013cc4 <follow_path>
 8014f52:	4603      	mov	r3, r0
 8014f54:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8014f58:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d113      	bne.n	8014f88 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014f60:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8014f64:	b25b      	sxtb	r3, r3
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	da03      	bge.n	8014f72 <f_stat+0x66>
				res = FR_INVALID_NAME;
 8014f6a:	2306      	movs	r3, #6
 8014f6c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8014f70:	e00a      	b.n	8014f88 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014f72:	463b      	mov	r3, r7
 8014f74:	681b      	ldr	r3, [r3, #0]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d006      	beq.n	8014f88 <f_stat+0x7c>
 8014f7a:	463b      	mov	r3, r7
 8014f7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8014f80:	6819      	ldr	r1, [r3, #0]
 8014f82:	4610      	mov	r0, r2
 8014f84:	f7fe fc08 	bl	8013798 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014f88:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014f8c:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8014f90:	4611      	mov	r1, r2
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fd f92a 	bl	80121ec <unlock_fs>
 8014f98:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8014f9c:	4618      	mov	r0, r3
 8014f9e:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8014fa2:	46bd      	mov	sp, r7
 8014fa4:	bd80      	pop	{r7, pc}

08014fa6 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8014fa6:	b580      	push	{r7, lr}
 8014fa8:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8014fac:	af00      	add	r7, sp, #0
 8014fae:	1d3b      	adds	r3, r7, #4
 8014fb0:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8014fb2:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8014fb6:	1d3b      	adds	r3, r7, #4
 8014fb8:	2202      	movs	r2, #2
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7fe ff92 	bl	8013ee4 <find_volume>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 8014fc6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014fca:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 8014fce:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	f040 8134 	bne.w	8015240 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8014fd8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014fdc:	f107 020c 	add.w	r2, r7, #12
 8014fe0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8014fe2:	1d3b      	adds	r3, r7, #4
 8014fe4:	681a      	ldr	r2, [r3, #0]
 8014fe6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8014fea:	4611      	mov	r1, r2
 8014fec:	4618      	mov	r0, r3
 8014fee:	f7fe fe69 	bl	8013cc4 <follow_path>
 8014ff2:	4603      	mov	r3, r0
 8014ff4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8014ff8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d102      	bne.n	8015006 <f_mkdir+0x60>
 8015000:	2308      	movs	r3, #8
 8015002:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015006:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801500a:	2b04      	cmp	r3, #4
 801500c:	f040 8118 	bne.w	8015240 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015010:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8015014:	2100      	movs	r1, #0
 8015016:	4618      	mov	r0, r3
 8015018:	f7fd fdc6 	bl	8012ba8 <create_chain>
 801501c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015020:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015024:	895b      	ldrh	r3, [r3, #10]
 8015026:	461a      	mov	r2, r3
 8015028:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801502c:	899b      	ldrh	r3, [r3, #12]
 801502e:	fb03 f302 	mul.w	r3, r3, r2
 8015032:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 8015036:	2300      	movs	r3, #0
 8015038:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801503c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015040:	2b00      	cmp	r3, #0
 8015042:	d102      	bne.n	801504a <f_mkdir+0xa4>
 8015044:	2307      	movs	r3, #7
 8015046:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 801504a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801504e:	2b01      	cmp	r3, #1
 8015050:	d102      	bne.n	8015058 <f_mkdir+0xb2>
 8015052:	2302      	movs	r3, #2
 8015054:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015058:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801505c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015060:	d102      	bne.n	8015068 <f_mkdir+0xc2>
 8015062:	2301      	movs	r3, #1
 8015064:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015068:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801506c:	2b00      	cmp	r3, #0
 801506e:	d107      	bne.n	8015080 <f_mkdir+0xda>
 8015070:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015074:	4618      	mov	r0, r3
 8015076:	f7fd fa41 	bl	80124fc <sync_window>
 801507a:	4603      	mov	r3, r0
 801507c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 8015080:	f7fb fa0e 	bl	80104a0 <get_fattime>
 8015084:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015088:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801508c:	2b00      	cmp	r3, #0
 801508e:	f040 8094 	bne.w	80151ba <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 8015092:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015096:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 801509a:	4618      	mov	r0, r3
 801509c:	f7fd fb10 	bl	80126c0 <clust2sect>
 80150a0:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 80150a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80150a8:	333c      	adds	r3, #60	; 0x3c
 80150aa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 80150ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80150b2:	899b      	ldrh	r3, [r3, #12]
 80150b4:	461a      	mov	r2, r3
 80150b6:	2100      	movs	r1, #0
 80150b8:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80150bc:	f7fd f823 	bl	8012106 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80150c0:	220b      	movs	r2, #11
 80150c2:	2120      	movs	r1, #32
 80150c4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80150c8:	f7fd f81d 	bl	8012106 <mem_set>
					dir[DIR_Name] = '.';
 80150cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80150d0:	222e      	movs	r2, #46	; 0x2e
 80150d2:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80150d4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80150d8:	330b      	adds	r3, #11
 80150da:	2210      	movs	r2, #16
 80150dc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 80150de:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80150e2:	3316      	adds	r3, #22
 80150e4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80150e8:	4618      	mov	r0, r3
 80150ea:	f7fc ffbf 	bl	801206c <st_dword>
					st_clust(fs, dir, dcl);
 80150ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80150f2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80150f6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7fd ffe9 	bl	80130d2 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015100:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8015104:	3320      	adds	r3, #32
 8015106:	2220      	movs	r2, #32
 8015108:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 801510c:	4618      	mov	r0, r3
 801510e:	f7fc ffd9 	bl	80120c4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015112:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8015116:	3321      	adds	r3, #33	; 0x21
 8015118:	222e      	movs	r2, #46	; 0x2e
 801511a:	701a      	strb	r2, [r3, #0]
 801511c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015120:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015124:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015128:	781b      	ldrb	r3, [r3, #0]
 801512a:	2b03      	cmp	r3, #3
 801512c:	d109      	bne.n	8015142 <f_mkdir+0x19c>
 801512e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015134:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015138:	429a      	cmp	r2, r3
 801513a:	d102      	bne.n	8015142 <f_mkdir+0x19c>
 801513c:	2300      	movs	r3, #0
 801513e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 8015142:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8015146:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801514a:	3320      	adds	r3, #32
 801514c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8015150:	4619      	mov	r1, r3
 8015152:	f7fd ffbe 	bl	80130d2 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015156:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801515a:	895b      	ldrh	r3, [r3, #10]
 801515c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8015160:	e025      	b.n	80151ae <f_mkdir+0x208>
					fs->winsect = dsc++;
 8015162:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015166:	1c5a      	adds	r2, r3, #1
 8015168:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 801516c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8015170:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8015172:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015176:	2201      	movs	r2, #1
 8015178:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801517a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801517e:	4618      	mov	r0, r3
 8015180:	f7fd f9bc 	bl	80124fc <sync_window>
 8015184:	4603      	mov	r3, r0
 8015186:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 801518a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801518e:	2b00      	cmp	r3, #0
 8015190:	d112      	bne.n	80151b8 <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 8015192:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015196:	899b      	ldrh	r3, [r3, #12]
 8015198:	461a      	mov	r2, r3
 801519a:	2100      	movs	r1, #0
 801519c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80151a0:	f7fc ffb1 	bl	8012106 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80151a4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80151a8:	3b01      	subs	r3, #1
 80151aa:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80151ae:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d1d5      	bne.n	8015162 <f_mkdir+0x1bc>
 80151b6:	e000      	b.n	80151ba <f_mkdir+0x214>
					if (res != FR_OK) break;
 80151b8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80151ba:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d107      	bne.n	80151d2 <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80151c2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80151c6:	4618      	mov	r0, r3
 80151c8:	f7fe f9ee 	bl	80135a8 <dir_register>
 80151cc:	4603      	mov	r3, r0
 80151ce:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 80151d2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d12a      	bne.n	8015230 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80151da:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80151de:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80151e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80151e6:	3316      	adds	r3, #22
 80151e8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80151ec:	4618      	mov	r0, r3
 80151ee:	f7fc ff3d 	bl	801206c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80151f2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80151f6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80151fa:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80151fe:	4618      	mov	r0, r3
 8015200:	f7fd ff67 	bl	80130d2 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015204:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8015208:	330b      	adds	r3, #11
 801520a:	2210      	movs	r2, #16
 801520c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 801520e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015212:	2201      	movs	r2, #1
 8015214:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015216:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801521a:	2b00      	cmp	r3, #0
 801521c:	d110      	bne.n	8015240 <f_mkdir+0x29a>
					res = sync_fs(fs);
 801521e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015222:	4618      	mov	r0, r3
 8015224:	f7fd f9dc 	bl	80125e0 <sync_fs>
 8015228:	4603      	mov	r3, r0
 801522a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 801522e:	e007      	b.n	8015240 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015230:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8015234:	2200      	movs	r2, #0
 8015236:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 801523a:	4618      	mov	r0, r3
 801523c:	f7fd fc4f 	bl	8012ade <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015240:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8015244:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 8015248:	4611      	mov	r1, r2
 801524a:	4618      	mov	r0, r3
 801524c:	f7fc ffce 	bl	80121ec <unlock_fs>
 8015250:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8015254:	4618      	mov	r0, r3
 8015256:	f507 7718 	add.w	r7, r7, #608	; 0x260
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
	...

08015260 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015260:	b480      	push	{r7}
 8015262:	b087      	sub	sp, #28
 8015264:	af00      	add	r7, sp, #0
 8015266:	60f8      	str	r0, [r7, #12]
 8015268:	60b9      	str	r1, [r7, #8]
 801526a:	4613      	mov	r3, r2
 801526c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801526e:	2301      	movs	r3, #1
 8015270:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015272:	2300      	movs	r3, #0
 8015274:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015276:	4b1f      	ldr	r3, [pc, #124]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 8015278:	7a5b      	ldrb	r3, [r3, #9]
 801527a:	b2db      	uxtb	r3, r3
 801527c:	2b00      	cmp	r3, #0
 801527e:	d131      	bne.n	80152e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015280:	4b1c      	ldr	r3, [pc, #112]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 8015282:	7a5b      	ldrb	r3, [r3, #9]
 8015284:	b2db      	uxtb	r3, r3
 8015286:	461a      	mov	r2, r3
 8015288:	4b1a      	ldr	r3, [pc, #104]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 801528a:	2100      	movs	r1, #0
 801528c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801528e:	4b19      	ldr	r3, [pc, #100]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 8015290:	7a5b      	ldrb	r3, [r3, #9]
 8015292:	b2db      	uxtb	r3, r3
 8015294:	4a17      	ldr	r2, [pc, #92]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 8015296:	009b      	lsls	r3, r3, #2
 8015298:	4413      	add	r3, r2
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801529e:	4b15      	ldr	r3, [pc, #84]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 80152a0:	7a5b      	ldrb	r3, [r3, #9]
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	461a      	mov	r2, r3
 80152a6:	4b13      	ldr	r3, [pc, #76]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 80152a8:	4413      	add	r3, r2
 80152aa:	79fa      	ldrb	r2, [r7, #7]
 80152ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80152ae:	4b11      	ldr	r3, [pc, #68]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 80152b0:	7a5b      	ldrb	r3, [r3, #9]
 80152b2:	b2db      	uxtb	r3, r3
 80152b4:	1c5a      	adds	r2, r3, #1
 80152b6:	b2d1      	uxtb	r1, r2
 80152b8:	4a0e      	ldr	r2, [pc, #56]	; (80152f4 <FATFS_LinkDriverEx+0x94>)
 80152ba:	7251      	strb	r1, [r2, #9]
 80152bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80152be:	7dbb      	ldrb	r3, [r7, #22]
 80152c0:	3330      	adds	r3, #48	; 0x30
 80152c2:	b2da      	uxtb	r2, r3
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	3301      	adds	r3, #1
 80152cc:	223a      	movs	r2, #58	; 0x3a
 80152ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	3302      	adds	r3, #2
 80152d4:	222f      	movs	r2, #47	; 0x2f
 80152d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	3303      	adds	r3, #3
 80152dc:	2200      	movs	r2, #0
 80152de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80152e0:	2300      	movs	r3, #0
 80152e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80152e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80152e6:	4618      	mov	r0, r3
 80152e8:	371c      	adds	r7, #28
 80152ea:	46bd      	mov	sp, r7
 80152ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152f0:	4770      	bx	lr
 80152f2:	bf00      	nop
 80152f4:	20002880 	.word	0x20002880

080152f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b082      	sub	sp, #8
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
 8015300:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015302:	2200      	movs	r2, #0
 8015304:	6839      	ldr	r1, [r7, #0]
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7ff ffaa 	bl	8015260 <FATFS_LinkDriverEx>
 801530c:	4603      	mov	r3, r0
}
 801530e:	4618      	mov	r0, r3
 8015310:	3708      	adds	r7, #8
 8015312:	46bd      	mov	sp, r7
 8015314:	bd80      	pop	{r7, pc}
	...

08015318 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015318:	b480      	push	{r7}
 801531a:	b085      	sub	sp, #20
 801531c:	af00      	add	r7, sp, #0
 801531e:	4603      	mov	r3, r0
 8015320:	6039      	str	r1, [r7, #0]
 8015322:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8015324:	88fb      	ldrh	r3, [r7, #6]
 8015326:	2b7f      	cmp	r3, #127	; 0x7f
 8015328:	d802      	bhi.n	8015330 <ff_convert+0x18>
		c = chr;
 801532a:	88fb      	ldrh	r3, [r7, #6]
 801532c:	81fb      	strh	r3, [r7, #14]
 801532e:	e025      	b.n	801537c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8015330:	683b      	ldr	r3, [r7, #0]
 8015332:	2b00      	cmp	r3, #0
 8015334:	d00b      	beq.n	801534e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8015336:	88fb      	ldrh	r3, [r7, #6]
 8015338:	2bff      	cmp	r3, #255	; 0xff
 801533a:	d805      	bhi.n	8015348 <ff_convert+0x30>
 801533c:	88fb      	ldrh	r3, [r7, #6]
 801533e:	3b80      	subs	r3, #128	; 0x80
 8015340:	4a12      	ldr	r2, [pc, #72]	; (801538c <ff_convert+0x74>)
 8015342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015346:	e000      	b.n	801534a <ff_convert+0x32>
 8015348:	2300      	movs	r3, #0
 801534a:	81fb      	strh	r3, [r7, #14]
 801534c:	e016      	b.n	801537c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801534e:	2300      	movs	r3, #0
 8015350:	81fb      	strh	r3, [r7, #14]
 8015352:	e009      	b.n	8015368 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8015354:	89fb      	ldrh	r3, [r7, #14]
 8015356:	4a0d      	ldr	r2, [pc, #52]	; (801538c <ff_convert+0x74>)
 8015358:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801535c:	88fa      	ldrh	r2, [r7, #6]
 801535e:	429a      	cmp	r2, r3
 8015360:	d006      	beq.n	8015370 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8015362:	89fb      	ldrh	r3, [r7, #14]
 8015364:	3301      	adds	r3, #1
 8015366:	81fb      	strh	r3, [r7, #14]
 8015368:	89fb      	ldrh	r3, [r7, #14]
 801536a:	2b7f      	cmp	r3, #127	; 0x7f
 801536c:	d9f2      	bls.n	8015354 <ff_convert+0x3c>
 801536e:	e000      	b.n	8015372 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015370:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8015372:	89fb      	ldrh	r3, [r7, #14]
 8015374:	3380      	adds	r3, #128	; 0x80
 8015376:	b29b      	uxth	r3, r3
 8015378:	b2db      	uxtb	r3, r3
 801537a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801537c:	89fb      	ldrh	r3, [r7, #14]
}
 801537e:	4618      	mov	r0, r3
 8015380:	3714      	adds	r7, #20
 8015382:	46bd      	mov	sp, r7
 8015384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015388:	4770      	bx	lr
 801538a:	bf00      	nop
 801538c:	08021d28 	.word	0x08021d28

08015390 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015390:	b480      	push	{r7}
 8015392:	b087      	sub	sp, #28
 8015394:	af00      	add	r7, sp, #0
 8015396:	4603      	mov	r3, r0
 8015398:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801539a:	88fb      	ldrh	r3, [r7, #6]
 801539c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80153a0:	d201      	bcs.n	80153a6 <ff_wtoupper+0x16>
 80153a2:	4b3e      	ldr	r3, [pc, #248]	; (801549c <ff_wtoupper+0x10c>)
 80153a4:	e000      	b.n	80153a8 <ff_wtoupper+0x18>
 80153a6:	4b3e      	ldr	r3, [pc, #248]	; (80154a0 <ff_wtoupper+0x110>)
 80153a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80153aa:	697b      	ldr	r3, [r7, #20]
 80153ac:	1c9a      	adds	r2, r3, #2
 80153ae:	617a      	str	r2, [r7, #20]
 80153b0:	881b      	ldrh	r3, [r3, #0]
 80153b2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80153b4:	8a7b      	ldrh	r3, [r7, #18]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d068      	beq.n	801548c <ff_wtoupper+0xfc>
 80153ba:	88fa      	ldrh	r2, [r7, #6]
 80153bc:	8a7b      	ldrh	r3, [r7, #18]
 80153be:	429a      	cmp	r2, r3
 80153c0:	d364      	bcc.n	801548c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80153c2:	697b      	ldr	r3, [r7, #20]
 80153c4:	1c9a      	adds	r2, r3, #2
 80153c6:	617a      	str	r2, [r7, #20]
 80153c8:	881b      	ldrh	r3, [r3, #0]
 80153ca:	823b      	strh	r3, [r7, #16]
 80153cc:	8a3b      	ldrh	r3, [r7, #16]
 80153ce:	0a1b      	lsrs	r3, r3, #8
 80153d0:	81fb      	strh	r3, [r7, #14]
 80153d2:	8a3b      	ldrh	r3, [r7, #16]
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80153d8:	88fa      	ldrh	r2, [r7, #6]
 80153da:	8a79      	ldrh	r1, [r7, #18]
 80153dc:	8a3b      	ldrh	r3, [r7, #16]
 80153de:	440b      	add	r3, r1
 80153e0:	429a      	cmp	r2, r3
 80153e2:	da49      	bge.n	8015478 <ff_wtoupper+0xe8>
			switch (cmd) {
 80153e4:	89fb      	ldrh	r3, [r7, #14]
 80153e6:	2b08      	cmp	r3, #8
 80153e8:	d84f      	bhi.n	801548a <ff_wtoupper+0xfa>
 80153ea:	a201      	add	r2, pc, #4	; (adr r2, 80153f0 <ff_wtoupper+0x60>)
 80153ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153f0:	08015415 	.word	0x08015415
 80153f4:	08015427 	.word	0x08015427
 80153f8:	0801543d 	.word	0x0801543d
 80153fc:	08015445 	.word	0x08015445
 8015400:	0801544d 	.word	0x0801544d
 8015404:	08015455 	.word	0x08015455
 8015408:	0801545d 	.word	0x0801545d
 801540c:	08015465 	.word	0x08015465
 8015410:	0801546d 	.word	0x0801546d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8015414:	88fa      	ldrh	r2, [r7, #6]
 8015416:	8a7b      	ldrh	r3, [r7, #18]
 8015418:	1ad3      	subs	r3, r2, r3
 801541a:	005b      	lsls	r3, r3, #1
 801541c:	697a      	ldr	r2, [r7, #20]
 801541e:	4413      	add	r3, r2
 8015420:	881b      	ldrh	r3, [r3, #0]
 8015422:	80fb      	strh	r3, [r7, #6]
 8015424:	e027      	b.n	8015476 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8015426:	88fa      	ldrh	r2, [r7, #6]
 8015428:	8a7b      	ldrh	r3, [r7, #18]
 801542a:	1ad3      	subs	r3, r2, r3
 801542c:	b29b      	uxth	r3, r3
 801542e:	f003 0301 	and.w	r3, r3, #1
 8015432:	b29b      	uxth	r3, r3
 8015434:	88fa      	ldrh	r2, [r7, #6]
 8015436:	1ad3      	subs	r3, r2, r3
 8015438:	80fb      	strh	r3, [r7, #6]
 801543a:	e01c      	b.n	8015476 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801543c:	88fb      	ldrh	r3, [r7, #6]
 801543e:	3b10      	subs	r3, #16
 8015440:	80fb      	strh	r3, [r7, #6]
 8015442:	e018      	b.n	8015476 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8015444:	88fb      	ldrh	r3, [r7, #6]
 8015446:	3b20      	subs	r3, #32
 8015448:	80fb      	strh	r3, [r7, #6]
 801544a:	e014      	b.n	8015476 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801544c:	88fb      	ldrh	r3, [r7, #6]
 801544e:	3b30      	subs	r3, #48	; 0x30
 8015450:	80fb      	strh	r3, [r7, #6]
 8015452:	e010      	b.n	8015476 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8015454:	88fb      	ldrh	r3, [r7, #6]
 8015456:	3b1a      	subs	r3, #26
 8015458:	80fb      	strh	r3, [r7, #6]
 801545a:	e00c      	b.n	8015476 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801545c:	88fb      	ldrh	r3, [r7, #6]
 801545e:	3308      	adds	r3, #8
 8015460:	80fb      	strh	r3, [r7, #6]
 8015462:	e008      	b.n	8015476 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8015464:	88fb      	ldrh	r3, [r7, #6]
 8015466:	3b50      	subs	r3, #80	; 0x50
 8015468:	80fb      	strh	r3, [r7, #6]
 801546a:	e004      	b.n	8015476 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801546c:	88fb      	ldrh	r3, [r7, #6]
 801546e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8015472:	80fb      	strh	r3, [r7, #6]
 8015474:	bf00      	nop
			}
			break;
 8015476:	e008      	b.n	801548a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015478:	89fb      	ldrh	r3, [r7, #14]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d195      	bne.n	80153aa <ff_wtoupper+0x1a>
 801547e:	8a3b      	ldrh	r3, [r7, #16]
 8015480:	005b      	lsls	r3, r3, #1
 8015482:	697a      	ldr	r2, [r7, #20]
 8015484:	4413      	add	r3, r2
 8015486:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015488:	e78f      	b.n	80153aa <ff_wtoupper+0x1a>
			break;
 801548a:	bf00      	nop
	}

	return chr;
 801548c:	88fb      	ldrh	r3, [r7, #6]
}
 801548e:	4618      	mov	r0, r3
 8015490:	371c      	adds	r7, #28
 8015492:	46bd      	mov	sp, r7
 8015494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015498:	4770      	bx	lr
 801549a:	bf00      	nop
 801549c:	08021e28 	.word	0x08021e28
 80154a0:	0802201c 	.word	0x0802201c

080154a4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b084      	sub	sp, #16
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	4603      	mov	r3, r0
 80154ac:	6039      	str	r1, [r7, #0]
 80154ae:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80154b0:	2200      	movs	r2, #0
 80154b2:	2101      	movs	r1, #1
 80154b4:	2001      	movs	r0, #1
 80154b6:	f000 f978 	bl	80157aa <osSemaphoreNew>
 80154ba:	4602      	mov	r2, r0
 80154bc:	683b      	ldr	r3, [r7, #0]
 80154be:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	bf14      	ite	ne
 80154c8:	2301      	movne	r3, #1
 80154ca:	2300      	moveq	r3, #0
 80154cc:	b2db      	uxtb	r3, r3
 80154ce:	60fb      	str	r3, [r7, #12]

    return ret;
 80154d0:	68fb      	ldr	r3, [r7, #12]
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3710      	adds	r7, #16
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}

080154da <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80154da:	b580      	push	{r7, lr}
 80154dc:	b082      	sub	sp, #8
 80154de:	af00      	add	r7, sp, #0
 80154e0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80154e2:	6878      	ldr	r0, [r7, #4]
 80154e4:	f000 fa80 	bl	80159e8 <osSemaphoreDelete>
#endif
    return 1;
 80154e8:	2301      	movs	r3, #1
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3708      	adds	r7, #8
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}

080154f2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80154f2:	b580      	push	{r7, lr}
 80154f4:	b084      	sub	sp, #16
 80154f6:	af00      	add	r7, sp, #0
 80154f8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80154fa:	2300      	movs	r3, #0
 80154fc:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80154fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f000 f9da 	bl	80158bc <osSemaphoreAcquire>
 8015508:	4603      	mov	r3, r0
 801550a:	2b00      	cmp	r3, #0
 801550c:	d101      	bne.n	8015512 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 801550e:	2301      	movs	r3, #1
 8015510:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015512:	68fb      	ldr	r3, [r7, #12]
}
 8015514:	4618      	mov	r0, r3
 8015516:	3710      	adds	r7, #16
 8015518:	46bd      	mov	sp, r7
 801551a:	bd80      	pop	{r7, pc}

0801551c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801551c:	b580      	push	{r7, lr}
 801551e:	b082      	sub	sp, #8
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f000 fa1b 	bl	8015960 <osSemaphoreRelease>
#endif
}
 801552a:	bf00      	nop
 801552c:	3708      	adds	r7, #8
 801552e:	46bd      	mov	sp, r7
 8015530:	bd80      	pop	{r7, pc}
	...

08015534 <__NVIC_SetPriority>:
{
 8015534:	b480      	push	{r7}
 8015536:	b083      	sub	sp, #12
 8015538:	af00      	add	r7, sp, #0
 801553a:	4603      	mov	r3, r0
 801553c:	6039      	str	r1, [r7, #0]
 801553e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015544:	2b00      	cmp	r3, #0
 8015546:	db0a      	blt.n	801555e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	b2da      	uxtb	r2, r3
 801554c:	490c      	ldr	r1, [pc, #48]	; (8015580 <__NVIC_SetPriority+0x4c>)
 801554e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015552:	0112      	lsls	r2, r2, #4
 8015554:	b2d2      	uxtb	r2, r2
 8015556:	440b      	add	r3, r1
 8015558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801555c:	e00a      	b.n	8015574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	b2da      	uxtb	r2, r3
 8015562:	4908      	ldr	r1, [pc, #32]	; (8015584 <__NVIC_SetPriority+0x50>)
 8015564:	79fb      	ldrb	r3, [r7, #7]
 8015566:	f003 030f 	and.w	r3, r3, #15
 801556a:	3b04      	subs	r3, #4
 801556c:	0112      	lsls	r2, r2, #4
 801556e:	b2d2      	uxtb	r2, r2
 8015570:	440b      	add	r3, r1
 8015572:	761a      	strb	r2, [r3, #24]
}
 8015574:	bf00      	nop
 8015576:	370c      	adds	r7, #12
 8015578:	46bd      	mov	sp, r7
 801557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557e:	4770      	bx	lr
 8015580:	e000e100 	.word	0xe000e100
 8015584:	e000ed00 	.word	0xe000ed00

08015588 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015588:	b580      	push	{r7, lr}
 801558a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 801558c:	4b05      	ldr	r3, [pc, #20]	; (80155a4 <SysTick_Handler+0x1c>)
 801558e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015590:	f002 fcae 	bl	8017ef0 <xTaskGetSchedulerState>
 8015594:	4603      	mov	r3, r0
 8015596:	2b01      	cmp	r3, #1
 8015598:	d001      	beq.n	801559e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801559a:	f003 fcd5 	bl	8018f48 <xPortSysTickHandler>
  }
}
 801559e:	bf00      	nop
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	e000e010 	.word	0xe000e010

080155a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80155a8:	b580      	push	{r7, lr}
 80155aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80155ac:	2100      	movs	r1, #0
 80155ae:	f06f 0004 	mvn.w	r0, #4
 80155b2:	f7ff ffbf 	bl	8015534 <__NVIC_SetPriority>
#endif
}
 80155b6:	bf00      	nop
 80155b8:	bd80      	pop	{r7, pc}
	...

080155bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80155bc:	b480      	push	{r7}
 80155be:	b083      	sub	sp, #12
 80155c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155c2:	f3ef 8305 	mrs	r3, IPSR
 80155c6:	603b      	str	r3, [r7, #0]
  return(result);
 80155c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d003      	beq.n	80155d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80155ce:	f06f 0305 	mvn.w	r3, #5
 80155d2:	607b      	str	r3, [r7, #4]
 80155d4:	e00c      	b.n	80155f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80155d6:	4b0a      	ldr	r3, [pc, #40]	; (8015600 <osKernelInitialize+0x44>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d105      	bne.n	80155ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80155de:	4b08      	ldr	r3, [pc, #32]	; (8015600 <osKernelInitialize+0x44>)
 80155e0:	2201      	movs	r2, #1
 80155e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80155e4:	2300      	movs	r3, #0
 80155e6:	607b      	str	r3, [r7, #4]
 80155e8:	e002      	b.n	80155f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80155ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80155ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80155f0:	687b      	ldr	r3, [r7, #4]
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	370c      	adds	r7, #12
 80155f6:	46bd      	mov	sp, r7
 80155f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fc:	4770      	bx	lr
 80155fe:	bf00      	nop
 8015600:	2000288c 	.word	0x2000288c

08015604 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8015604:	b580      	push	{r7, lr}
 8015606:	b082      	sub	sp, #8
 8015608:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801560a:	f3ef 8305 	mrs	r3, IPSR
 801560e:	603b      	str	r3, [r7, #0]
  return(result);
 8015610:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015612:	2b00      	cmp	r3, #0
 8015614:	d003      	beq.n	801561e <osKernelStart+0x1a>
    stat = osErrorISR;
 8015616:	f06f 0305 	mvn.w	r3, #5
 801561a:	607b      	str	r3, [r7, #4]
 801561c:	e010      	b.n	8015640 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801561e:	4b0b      	ldr	r3, [pc, #44]	; (801564c <osKernelStart+0x48>)
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	2b01      	cmp	r3, #1
 8015624:	d109      	bne.n	801563a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015626:	f7ff ffbf 	bl	80155a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801562a:	4b08      	ldr	r3, [pc, #32]	; (801564c <osKernelStart+0x48>)
 801562c:	2202      	movs	r2, #2
 801562e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015630:	f001 fe7c 	bl	801732c <vTaskStartScheduler>
      stat = osOK;
 8015634:	2300      	movs	r3, #0
 8015636:	607b      	str	r3, [r7, #4]
 8015638:	e002      	b.n	8015640 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801563a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801563e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015640:	687b      	ldr	r3, [r7, #4]
}
 8015642:	4618      	mov	r0, r3
 8015644:	3708      	adds	r7, #8
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	2000288c 	.word	0x2000288c

08015650 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015650:	b580      	push	{r7, lr}
 8015652:	b08e      	sub	sp, #56	; 0x38
 8015654:	af04      	add	r7, sp, #16
 8015656:	60f8      	str	r0, [r7, #12]
 8015658:	60b9      	str	r1, [r7, #8]
 801565a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 801565c:	2300      	movs	r3, #0
 801565e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015660:	f3ef 8305 	mrs	r3, IPSR
 8015664:	617b      	str	r3, [r7, #20]
  return(result);
 8015666:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015668:	2b00      	cmp	r3, #0
 801566a:	d17e      	bne.n	801576a <osThreadNew+0x11a>
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d07b      	beq.n	801576a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8015672:	2380      	movs	r3, #128	; 0x80
 8015674:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8015676:	2318      	movs	r3, #24
 8015678:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801567a:	2300      	movs	r3, #0
 801567c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 801567e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015682:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d045      	beq.n	8015716 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d002      	beq.n	8015698 <osThreadNew+0x48>
        name = attr->name;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	699b      	ldr	r3, [r3, #24]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d002      	beq.n	80156a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	699b      	ldr	r3, [r3, #24]
 80156a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80156a6:	69fb      	ldr	r3, [r7, #28]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d008      	beq.n	80156be <osThreadNew+0x6e>
 80156ac:	69fb      	ldr	r3, [r7, #28]
 80156ae:	2b38      	cmp	r3, #56	; 0x38
 80156b0:	d805      	bhi.n	80156be <osThreadNew+0x6e>
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	685b      	ldr	r3, [r3, #4]
 80156b6:	f003 0301 	and.w	r3, r3, #1
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d001      	beq.n	80156c2 <osThreadNew+0x72>
        return (NULL);
 80156be:	2300      	movs	r3, #0
 80156c0:	e054      	b.n	801576c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	695b      	ldr	r3, [r3, #20]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d003      	beq.n	80156d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	695b      	ldr	r3, [r3, #20]
 80156ce:	089b      	lsrs	r3, r3, #2
 80156d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	689b      	ldr	r3, [r3, #8]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d00e      	beq.n	80156f8 <osThreadNew+0xa8>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	68db      	ldr	r3, [r3, #12]
 80156de:	2bbf      	cmp	r3, #191	; 0xbf
 80156e0:	d90a      	bls.n	80156f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d006      	beq.n	80156f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	695b      	ldr	r3, [r3, #20]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d002      	beq.n	80156f8 <osThreadNew+0xa8>
        mem = 1;
 80156f2:	2301      	movs	r3, #1
 80156f4:	61bb      	str	r3, [r7, #24]
 80156f6:	e010      	b.n	801571a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	689b      	ldr	r3, [r3, #8]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d10c      	bne.n	801571a <osThreadNew+0xca>
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d108      	bne.n	801571a <osThreadNew+0xca>
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	691b      	ldr	r3, [r3, #16]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d104      	bne.n	801571a <osThreadNew+0xca>
          mem = 0;
 8015710:	2300      	movs	r3, #0
 8015712:	61bb      	str	r3, [r7, #24]
 8015714:	e001      	b.n	801571a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8015716:	2300      	movs	r3, #0
 8015718:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801571a:	69bb      	ldr	r3, [r7, #24]
 801571c:	2b01      	cmp	r3, #1
 801571e:	d110      	bne.n	8015742 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8015724:	687a      	ldr	r2, [r7, #4]
 8015726:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015728:	9202      	str	r2, [sp, #8]
 801572a:	9301      	str	r3, [sp, #4]
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	9300      	str	r3, [sp, #0]
 8015730:	68bb      	ldr	r3, [r7, #8]
 8015732:	6a3a      	ldr	r2, [r7, #32]
 8015734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015736:	68f8      	ldr	r0, [r7, #12]
 8015738:	f001 fba2 	bl	8016e80 <xTaskCreateStatic>
 801573c:	4603      	mov	r3, r0
 801573e:	613b      	str	r3, [r7, #16]
 8015740:	e013      	b.n	801576a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8015742:	69bb      	ldr	r3, [r7, #24]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d110      	bne.n	801576a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015748:	6a3b      	ldr	r3, [r7, #32]
 801574a:	b29a      	uxth	r2, r3
 801574c:	f107 0310 	add.w	r3, r7, #16
 8015750:	9301      	str	r3, [sp, #4]
 8015752:	69fb      	ldr	r3, [r7, #28]
 8015754:	9300      	str	r3, [sp, #0]
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801575a:	68f8      	ldr	r0, [r7, #12]
 801575c:	f001 fbed 	bl	8016f3a <xTaskCreate>
 8015760:	4603      	mov	r3, r0
 8015762:	2b01      	cmp	r3, #1
 8015764:	d001      	beq.n	801576a <osThreadNew+0x11a>
            hTask = NULL;
 8015766:	2300      	movs	r3, #0
 8015768:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801576a:	693b      	ldr	r3, [r7, #16]
}
 801576c:	4618      	mov	r0, r3
 801576e:	3728      	adds	r7, #40	; 0x28
 8015770:	46bd      	mov	sp, r7
 8015772:	bd80      	pop	{r7, pc}

08015774 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801577c:	f3ef 8305 	mrs	r3, IPSR
 8015780:	60bb      	str	r3, [r7, #8]
  return(result);
 8015782:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015784:	2b00      	cmp	r3, #0
 8015786:	d003      	beq.n	8015790 <osDelay+0x1c>
    stat = osErrorISR;
 8015788:	f06f 0305 	mvn.w	r3, #5
 801578c:	60fb      	str	r3, [r7, #12]
 801578e:	e007      	b.n	80157a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015790:	2300      	movs	r3, #0
 8015792:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d002      	beq.n	80157a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 801579a:	6878      	ldr	r0, [r7, #4]
 801579c:	f001 fd2c 	bl	80171f8 <vTaskDelay>
    }
  }

  return (stat);
 80157a0:	68fb      	ldr	r3, [r7, #12]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3710      	adds	r7, #16
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80157aa:	b580      	push	{r7, lr}
 80157ac:	b08a      	sub	sp, #40	; 0x28
 80157ae:	af02      	add	r7, sp, #8
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80157b6:	2300      	movs	r3, #0
 80157b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80157ba:	f3ef 8305 	mrs	r3, IPSR
 80157be:	613b      	str	r3, [r7, #16]
  return(result);
 80157c0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d175      	bne.n	80158b2 <osSemaphoreNew+0x108>
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d072      	beq.n	80158b2 <osSemaphoreNew+0x108>
 80157cc:	68ba      	ldr	r2, [r7, #8]
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d86e      	bhi.n	80158b2 <osSemaphoreNew+0x108>
    mem = -1;
 80157d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157d8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d015      	beq.n	801580c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	689b      	ldr	r3, [r3, #8]
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d006      	beq.n	80157f6 <osSemaphoreNew+0x4c>
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	68db      	ldr	r3, [r3, #12]
 80157ec:	2b4f      	cmp	r3, #79	; 0x4f
 80157ee:	d902      	bls.n	80157f6 <osSemaphoreNew+0x4c>
        mem = 1;
 80157f0:	2301      	movs	r3, #1
 80157f2:	61bb      	str	r3, [r7, #24]
 80157f4:	e00c      	b.n	8015810 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	2b00      	cmp	r3, #0
 80157fc:	d108      	bne.n	8015810 <osSemaphoreNew+0x66>
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	2b00      	cmp	r3, #0
 8015804:	d104      	bne.n	8015810 <osSemaphoreNew+0x66>
          mem = 0;
 8015806:	2300      	movs	r3, #0
 8015808:	61bb      	str	r3, [r7, #24]
 801580a:	e001      	b.n	8015810 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 801580c:	2300      	movs	r3, #0
 801580e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8015810:	69bb      	ldr	r3, [r7, #24]
 8015812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015816:	d04c      	beq.n	80158b2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d128      	bne.n	8015870 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	2b01      	cmp	r3, #1
 8015822:	d10a      	bne.n	801583a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	2203      	movs	r2, #3
 801582a:	9200      	str	r2, [sp, #0]
 801582c:	2200      	movs	r2, #0
 801582e:	2100      	movs	r1, #0
 8015830:	2001      	movs	r0, #1
 8015832:	f000 fb7f 	bl	8015f34 <xQueueGenericCreateStatic>
 8015836:	61f8      	str	r0, [r7, #28]
 8015838:	e005      	b.n	8015846 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801583a:	2203      	movs	r2, #3
 801583c:	2100      	movs	r1, #0
 801583e:	2001      	movs	r0, #1
 8015840:	f000 fbf0 	bl	8016024 <xQueueGenericCreate>
 8015844:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8015846:	69fb      	ldr	r3, [r7, #28]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d022      	beq.n	8015892 <osSemaphoreNew+0xe8>
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d01f      	beq.n	8015892 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015852:	2300      	movs	r3, #0
 8015854:	2200      	movs	r2, #0
 8015856:	2100      	movs	r1, #0
 8015858:	69f8      	ldr	r0, [r7, #28]
 801585a:	f000 fcab 	bl	80161b4 <xQueueGenericSend>
 801585e:	4603      	mov	r3, r0
 8015860:	2b01      	cmp	r3, #1
 8015862:	d016      	beq.n	8015892 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8015864:	69f8      	ldr	r0, [r7, #28]
 8015866:	f001 f937 	bl	8016ad8 <vQueueDelete>
            hSemaphore = NULL;
 801586a:	2300      	movs	r3, #0
 801586c:	61fb      	str	r3, [r7, #28]
 801586e:	e010      	b.n	8015892 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015870:	69bb      	ldr	r3, [r7, #24]
 8015872:	2b01      	cmp	r3, #1
 8015874:	d108      	bne.n	8015888 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	689b      	ldr	r3, [r3, #8]
 801587a:	461a      	mov	r2, r3
 801587c:	68b9      	ldr	r1, [r7, #8]
 801587e:	68f8      	ldr	r0, [r7, #12]
 8015880:	f000 fc2d 	bl	80160de <xQueueCreateCountingSemaphoreStatic>
 8015884:	61f8      	str	r0, [r7, #28]
 8015886:	e004      	b.n	8015892 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015888:	68b9      	ldr	r1, [r7, #8]
 801588a:	68f8      	ldr	r0, [r7, #12]
 801588c:	f000 fc5e 	bl	801614c <xQueueCreateCountingSemaphore>
 8015890:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d00c      	beq.n	80158b2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d003      	beq.n	80158a6 <osSemaphoreNew+0xfc>
          name = attr->name;
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	617b      	str	r3, [r7, #20]
 80158a4:	e001      	b.n	80158aa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80158a6:	2300      	movs	r3, #0
 80158a8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80158aa:	6979      	ldr	r1, [r7, #20]
 80158ac:	69f8      	ldr	r0, [r7, #28]
 80158ae:	f001 fa5f 	bl	8016d70 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80158b2:	69fb      	ldr	r3, [r7, #28]
}
 80158b4:	4618      	mov	r0, r3
 80158b6:	3720      	adds	r7, #32
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}

080158bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80158bc:	b580      	push	{r7, lr}
 80158be:	b086      	sub	sp, #24
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80158ca:	2300      	movs	r3, #0
 80158cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80158ce:	693b      	ldr	r3, [r7, #16]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d103      	bne.n	80158dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80158d4:	f06f 0303 	mvn.w	r3, #3
 80158d8:	617b      	str	r3, [r7, #20]
 80158da:	e039      	b.n	8015950 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80158dc:	f3ef 8305 	mrs	r3, IPSR
 80158e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80158e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d022      	beq.n	801592e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80158e8:	683b      	ldr	r3, [r7, #0]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d003      	beq.n	80158f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80158ee:	f06f 0303 	mvn.w	r3, #3
 80158f2:	617b      	str	r3, [r7, #20]
 80158f4:	e02c      	b.n	8015950 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80158f6:	2300      	movs	r3, #0
 80158f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80158fa:	f107 0308 	add.w	r3, r7, #8
 80158fe:	461a      	mov	r2, r3
 8015900:	2100      	movs	r1, #0
 8015902:	6938      	ldr	r0, [r7, #16]
 8015904:	f001 f868 	bl	80169d8 <xQueueReceiveFromISR>
 8015908:	4603      	mov	r3, r0
 801590a:	2b01      	cmp	r3, #1
 801590c:	d003      	beq.n	8015916 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 801590e:	f06f 0302 	mvn.w	r3, #2
 8015912:	617b      	str	r3, [r7, #20]
 8015914:	e01c      	b.n	8015950 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8015916:	68bb      	ldr	r3, [r7, #8]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d019      	beq.n	8015950 <osSemaphoreAcquire+0x94>
 801591c:	4b0f      	ldr	r3, [pc, #60]	; (801595c <osSemaphoreAcquire+0xa0>)
 801591e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015922:	601a      	str	r2, [r3, #0]
 8015924:	f3bf 8f4f 	dsb	sy
 8015928:	f3bf 8f6f 	isb	sy
 801592c:	e010      	b.n	8015950 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801592e:	6839      	ldr	r1, [r7, #0]
 8015930:	6938      	ldr	r0, [r7, #16]
 8015932:	f000 ff45 	bl	80167c0 <xQueueSemaphoreTake>
 8015936:	4603      	mov	r3, r0
 8015938:	2b01      	cmp	r3, #1
 801593a:	d009      	beq.n	8015950 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801593c:	683b      	ldr	r3, [r7, #0]
 801593e:	2b00      	cmp	r3, #0
 8015940:	d003      	beq.n	801594a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8015942:	f06f 0301 	mvn.w	r3, #1
 8015946:	617b      	str	r3, [r7, #20]
 8015948:	e002      	b.n	8015950 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801594a:	f06f 0302 	mvn.w	r3, #2
 801594e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015950:	697b      	ldr	r3, [r7, #20]
}
 8015952:	4618      	mov	r0, r3
 8015954:	3718      	adds	r7, #24
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	e000ed04 	.word	0xe000ed04

08015960 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015960:	b580      	push	{r7, lr}
 8015962:	b086      	sub	sp, #24
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801596c:	2300      	movs	r3, #0
 801596e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015970:	693b      	ldr	r3, [r7, #16]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d103      	bne.n	801597e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015976:	f06f 0303 	mvn.w	r3, #3
 801597a:	617b      	str	r3, [r7, #20]
 801597c:	e02c      	b.n	80159d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801597e:	f3ef 8305 	mrs	r3, IPSR
 8015982:	60fb      	str	r3, [r7, #12]
  return(result);
 8015984:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015986:	2b00      	cmp	r3, #0
 8015988:	d01a      	beq.n	80159c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801598a:	2300      	movs	r3, #0
 801598c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801598e:	f107 0308 	add.w	r3, r7, #8
 8015992:	4619      	mov	r1, r3
 8015994:	6938      	ldr	r0, [r7, #16]
 8015996:	f000 fda6 	bl	80164e6 <xQueueGiveFromISR>
 801599a:	4603      	mov	r3, r0
 801599c:	2b01      	cmp	r3, #1
 801599e:	d003      	beq.n	80159a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80159a0:	f06f 0302 	mvn.w	r3, #2
 80159a4:	617b      	str	r3, [r7, #20]
 80159a6:	e017      	b.n	80159d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d014      	beq.n	80159d8 <osSemaphoreRelease+0x78>
 80159ae:	4b0d      	ldr	r3, [pc, #52]	; (80159e4 <osSemaphoreRelease+0x84>)
 80159b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159b4:	601a      	str	r2, [r3, #0]
 80159b6:	f3bf 8f4f 	dsb	sy
 80159ba:	f3bf 8f6f 	isb	sy
 80159be:	e00b      	b.n	80159d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80159c0:	2300      	movs	r3, #0
 80159c2:	2200      	movs	r2, #0
 80159c4:	2100      	movs	r1, #0
 80159c6:	6938      	ldr	r0, [r7, #16]
 80159c8:	f000 fbf4 	bl	80161b4 <xQueueGenericSend>
 80159cc:	4603      	mov	r3, r0
 80159ce:	2b01      	cmp	r3, #1
 80159d0:	d002      	beq.n	80159d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80159d2:	f06f 0302 	mvn.w	r3, #2
 80159d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80159d8:	697b      	ldr	r3, [r7, #20]
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3718      	adds	r7, #24
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	e000ed04 	.word	0xe000ed04

080159e8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b086      	sub	sp, #24
 80159ec:	af00      	add	r7, sp, #0
 80159ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80159f4:	f3ef 8305 	mrs	r3, IPSR
 80159f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80159fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	d003      	beq.n	8015a08 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015a00:	f06f 0305 	mvn.w	r3, #5
 8015a04:	617b      	str	r3, [r7, #20]
 8015a06:	e00e      	b.n	8015a26 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d103      	bne.n	8015a16 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8015a0e:	f06f 0303 	mvn.w	r3, #3
 8015a12:	617b      	str	r3, [r7, #20]
 8015a14:	e007      	b.n	8015a26 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015a16:	6938      	ldr	r0, [r7, #16]
 8015a18:	f001 f9d4 	bl	8016dc4 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8015a20:	6938      	ldr	r0, [r7, #16]
 8015a22:	f001 f859 	bl	8016ad8 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015a26:	697b      	ldr	r3, [r7, #20]
}
 8015a28:	4618      	mov	r0, r3
 8015a2a:	3718      	adds	r7, #24
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	bd80      	pop	{r7, pc}

08015a30 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8015a30:	b580      	push	{r7, lr}
 8015a32:	b08a      	sub	sp, #40	; 0x28
 8015a34:	af02      	add	r7, sp, #8
 8015a36:	60f8      	str	r0, [r7, #12]
 8015a38:	60b9      	str	r1, [r7, #8]
 8015a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a40:	f3ef 8305 	mrs	r3, IPSR
 8015a44:	613b      	str	r3, [r7, #16]
  return(result);
 8015a46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d15f      	bne.n	8015b0c <osMessageQueueNew+0xdc>
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d05c      	beq.n	8015b0c <osMessageQueueNew+0xdc>
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d059      	beq.n	8015b0c <osMessageQueueNew+0xdc>
    mem = -1;
 8015a58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d029      	beq.n	8015ab8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	689b      	ldr	r3, [r3, #8]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d012      	beq.n	8015a92 <osMessageQueueNew+0x62>
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	2b4f      	cmp	r3, #79	; 0x4f
 8015a72:	d90e      	bls.n	8015a92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d00a      	beq.n	8015a92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	695a      	ldr	r2, [r3, #20]
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	68b9      	ldr	r1, [r7, #8]
 8015a84:	fb01 f303 	mul.w	r3, r1, r3
 8015a88:	429a      	cmp	r2, r3
 8015a8a:	d302      	bcc.n	8015a92 <osMessageQueueNew+0x62>
        mem = 1;
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	61bb      	str	r3, [r7, #24]
 8015a90:	e014      	b.n	8015abc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	689b      	ldr	r3, [r3, #8]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d110      	bne.n	8015abc <osMessageQueueNew+0x8c>
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	68db      	ldr	r3, [r3, #12]
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d10c      	bne.n	8015abc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d108      	bne.n	8015abc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	695b      	ldr	r3, [r3, #20]
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d104      	bne.n	8015abc <osMessageQueueNew+0x8c>
          mem = 0;
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	61bb      	str	r3, [r7, #24]
 8015ab6:	e001      	b.n	8015abc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015ab8:	2300      	movs	r3, #0
 8015aba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8015abc:	69bb      	ldr	r3, [r7, #24]
 8015abe:	2b01      	cmp	r3, #1
 8015ac0:	d10b      	bne.n	8015ada <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	691a      	ldr	r2, [r3, #16]
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	689b      	ldr	r3, [r3, #8]
 8015aca:	2100      	movs	r1, #0
 8015acc:	9100      	str	r1, [sp, #0]
 8015ace:	68b9      	ldr	r1, [r7, #8]
 8015ad0:	68f8      	ldr	r0, [r7, #12]
 8015ad2:	f000 fa2f 	bl	8015f34 <xQueueGenericCreateStatic>
 8015ad6:	61f8      	str	r0, [r7, #28]
 8015ad8:	e008      	b.n	8015aec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8015ada:	69bb      	ldr	r3, [r7, #24]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d105      	bne.n	8015aec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015ae0:	2200      	movs	r2, #0
 8015ae2:	68b9      	ldr	r1, [r7, #8]
 8015ae4:	68f8      	ldr	r0, [r7, #12]
 8015ae6:	f000 fa9d 	bl	8016024 <xQueueGenericCreate>
 8015aea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d00c      	beq.n	8015b0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d003      	beq.n	8015b00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	617b      	str	r3, [r7, #20]
 8015afe:	e001      	b.n	8015b04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8015b00:	2300      	movs	r3, #0
 8015b02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8015b04:	6979      	ldr	r1, [r7, #20]
 8015b06:	69f8      	ldr	r0, [r7, #28]
 8015b08:	f001 f932 	bl	8016d70 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8015b0c:	69fb      	ldr	r3, [r7, #28]
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	3720      	adds	r7, #32
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}
	...

08015b18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8015b18:	b580      	push	{r7, lr}
 8015b1a:	b088      	sub	sp, #32
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	603b      	str	r3, [r7, #0]
 8015b24:	4613      	mov	r3, r2
 8015b26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b30:	f3ef 8305 	mrs	r3, IPSR
 8015b34:	617b      	str	r3, [r7, #20]
  return(result);
 8015b36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d028      	beq.n	8015b8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015b3c:	69bb      	ldr	r3, [r7, #24]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d005      	beq.n	8015b4e <osMessageQueuePut+0x36>
 8015b42:	68bb      	ldr	r3, [r7, #8]
 8015b44:	2b00      	cmp	r3, #0
 8015b46:	d002      	beq.n	8015b4e <osMessageQueuePut+0x36>
 8015b48:	683b      	ldr	r3, [r7, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d003      	beq.n	8015b56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8015b4e:	f06f 0303 	mvn.w	r3, #3
 8015b52:	61fb      	str	r3, [r7, #28]
 8015b54:	e038      	b.n	8015bc8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015b56:	2300      	movs	r3, #0
 8015b58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8015b5a:	f107 0210 	add.w	r2, r7, #16
 8015b5e:	2300      	movs	r3, #0
 8015b60:	68b9      	ldr	r1, [r7, #8]
 8015b62:	69b8      	ldr	r0, [r7, #24]
 8015b64:	f000 fc24 	bl	80163b0 <xQueueGenericSendFromISR>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	2b01      	cmp	r3, #1
 8015b6c:	d003      	beq.n	8015b76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8015b6e:	f06f 0302 	mvn.w	r3, #2
 8015b72:	61fb      	str	r3, [r7, #28]
 8015b74:	e028      	b.n	8015bc8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015b76:	693b      	ldr	r3, [r7, #16]
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d025      	beq.n	8015bc8 <osMessageQueuePut+0xb0>
 8015b7c:	4b15      	ldr	r3, [pc, #84]	; (8015bd4 <osMessageQueuePut+0xbc>)
 8015b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b82:	601a      	str	r2, [r3, #0]
 8015b84:	f3bf 8f4f 	dsb	sy
 8015b88:	f3bf 8f6f 	isb	sy
 8015b8c:	e01c      	b.n	8015bc8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015b8e:	69bb      	ldr	r3, [r7, #24]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d002      	beq.n	8015b9a <osMessageQueuePut+0x82>
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d103      	bne.n	8015ba2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8015b9a:	f06f 0303 	mvn.w	r3, #3
 8015b9e:	61fb      	str	r3, [r7, #28]
 8015ba0:	e012      	b.n	8015bc8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	68b9      	ldr	r1, [r7, #8]
 8015ba8:	69b8      	ldr	r0, [r7, #24]
 8015baa:	f000 fb03 	bl	80161b4 <xQueueGenericSend>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	2b01      	cmp	r3, #1
 8015bb2:	d009      	beq.n	8015bc8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d003      	beq.n	8015bc2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8015bba:	f06f 0301 	mvn.w	r3, #1
 8015bbe:	61fb      	str	r3, [r7, #28]
 8015bc0:	e002      	b.n	8015bc8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015bc2:	f06f 0302 	mvn.w	r3, #2
 8015bc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015bc8:	69fb      	ldr	r3, [r7, #28]
}
 8015bca:	4618      	mov	r0, r3
 8015bcc:	3720      	adds	r7, #32
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	e000ed04 	.word	0xe000ed04

08015bd8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015bd8:	b580      	push	{r7, lr}
 8015bda:	b088      	sub	sp, #32
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	60f8      	str	r0, [r7, #12]
 8015be0:	60b9      	str	r1, [r7, #8]
 8015be2:	607a      	str	r2, [r7, #4]
 8015be4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8015bea:	2300      	movs	r3, #0
 8015bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bee:	f3ef 8305 	mrs	r3, IPSR
 8015bf2:	617b      	str	r3, [r7, #20]
  return(result);
 8015bf4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d028      	beq.n	8015c4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d005      	beq.n	8015c0c <osMessageQueueGet+0x34>
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d002      	beq.n	8015c0c <osMessageQueueGet+0x34>
 8015c06:	683b      	ldr	r3, [r7, #0]
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	d003      	beq.n	8015c14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8015c0c:	f06f 0303 	mvn.w	r3, #3
 8015c10:	61fb      	str	r3, [r7, #28]
 8015c12:	e037      	b.n	8015c84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8015c14:	2300      	movs	r3, #0
 8015c16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8015c18:	f107 0310 	add.w	r3, r7, #16
 8015c1c:	461a      	mov	r2, r3
 8015c1e:	68b9      	ldr	r1, [r7, #8]
 8015c20:	69b8      	ldr	r0, [r7, #24]
 8015c22:	f000 fed9 	bl	80169d8 <xQueueReceiveFromISR>
 8015c26:	4603      	mov	r3, r0
 8015c28:	2b01      	cmp	r3, #1
 8015c2a:	d003      	beq.n	8015c34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8015c2c:	f06f 0302 	mvn.w	r3, #2
 8015c30:	61fb      	str	r3, [r7, #28]
 8015c32:	e027      	b.n	8015c84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d024      	beq.n	8015c84 <osMessageQueueGet+0xac>
 8015c3a:	4b15      	ldr	r3, [pc, #84]	; (8015c90 <osMessageQueueGet+0xb8>)
 8015c3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c40:	601a      	str	r2, [r3, #0]
 8015c42:	f3bf 8f4f 	dsb	sy
 8015c46:	f3bf 8f6f 	isb	sy
 8015c4a:	e01b      	b.n	8015c84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8015c4c:	69bb      	ldr	r3, [r7, #24]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d002      	beq.n	8015c58 <osMessageQueueGet+0x80>
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d103      	bne.n	8015c60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015c58:	f06f 0303 	mvn.w	r3, #3
 8015c5c:	61fb      	str	r3, [r7, #28]
 8015c5e:	e011      	b.n	8015c84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015c60:	683a      	ldr	r2, [r7, #0]
 8015c62:	68b9      	ldr	r1, [r7, #8]
 8015c64:	69b8      	ldr	r0, [r7, #24]
 8015c66:	f000 fccb 	bl	8016600 <xQueueReceive>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d009      	beq.n	8015c84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d003      	beq.n	8015c7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015c76:	f06f 0301 	mvn.w	r3, #1
 8015c7a:	61fb      	str	r3, [r7, #28]
 8015c7c:	e002      	b.n	8015c84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8015c7e:	f06f 0302 	mvn.w	r3, #2
 8015c82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015c84:	69fb      	ldr	r3, [r7, #28]
}
 8015c86:	4618      	mov	r0, r3
 8015c88:	3720      	adds	r7, #32
 8015c8a:	46bd      	mov	sp, r7
 8015c8c:	bd80      	pop	{r7, pc}
 8015c8e:	bf00      	nop
 8015c90:	e000ed04 	.word	0xe000ed04

08015c94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015c94:	b480      	push	{r7}
 8015c96:	b085      	sub	sp, #20
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	60f8      	str	r0, [r7, #12]
 8015c9c:	60b9      	str	r1, [r7, #8]
 8015c9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	4a07      	ldr	r2, [pc, #28]	; (8015cc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8015ca4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015ca6:	68bb      	ldr	r3, [r7, #8]
 8015ca8:	4a06      	ldr	r2, [pc, #24]	; (8015cc4 <vApplicationGetIdleTaskMemory+0x30>)
 8015caa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2280      	movs	r2, #128	; 0x80
 8015cb0:	601a      	str	r2, [r3, #0]
}
 8015cb2:	bf00      	nop
 8015cb4:	3714      	adds	r7, #20
 8015cb6:	46bd      	mov	sp, r7
 8015cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cbc:	4770      	bx	lr
 8015cbe:	bf00      	nop
 8015cc0:	20002890 	.word	0x20002890
 8015cc4:	20002950 	.word	0x20002950

08015cc8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015cc8:	b480      	push	{r7}
 8015cca:	b085      	sub	sp, #20
 8015ccc:	af00      	add	r7, sp, #0
 8015cce:	60f8      	str	r0, [r7, #12]
 8015cd0:	60b9      	str	r1, [r7, #8]
 8015cd2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015cd4:	68fb      	ldr	r3, [r7, #12]
 8015cd6:	4a07      	ldr	r2, [pc, #28]	; (8015cf4 <vApplicationGetTimerTaskMemory+0x2c>)
 8015cd8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	4a06      	ldr	r2, [pc, #24]	; (8015cf8 <vApplicationGetTimerTaskMemory+0x30>)
 8015cde:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015ce6:	601a      	str	r2, [r3, #0]
}
 8015ce8:	bf00      	nop
 8015cea:	3714      	adds	r7, #20
 8015cec:	46bd      	mov	sp, r7
 8015cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf2:	4770      	bx	lr
 8015cf4:	20002b50 	.word	0x20002b50
 8015cf8:	20002c10 	.word	0x20002c10

08015cfc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015cfc:	b480      	push	{r7}
 8015cfe:	b083      	sub	sp, #12
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	f103 0208 	add.w	r2, r3, #8
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015d14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	f103 0208 	add.w	r2, r3, #8
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	f103 0208 	add.w	r2, r3, #8
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	2200      	movs	r2, #0
 8015d2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015d30:	bf00      	nop
 8015d32:	370c      	adds	r7, #12
 8015d34:	46bd      	mov	sp, r7
 8015d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d3a:	4770      	bx	lr

08015d3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015d3c:	b480      	push	{r7}
 8015d3e:	b083      	sub	sp, #12
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2200      	movs	r2, #0
 8015d48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015d4a:	bf00      	nop
 8015d4c:	370c      	adds	r7, #12
 8015d4e:	46bd      	mov	sp, r7
 8015d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d54:	4770      	bx	lr

08015d56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015d56:	b480      	push	{r7}
 8015d58:	b085      	sub	sp, #20
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	6078      	str	r0, [r7, #4]
 8015d5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	685b      	ldr	r3, [r3, #4]
 8015d64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	68fa      	ldr	r2, [r7, #12]
 8015d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	689a      	ldr	r2, [r3, #8]
 8015d70:	683b      	ldr	r3, [r7, #0]
 8015d72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	689b      	ldr	r3, [r3, #8]
 8015d78:	683a      	ldr	r2, [r7, #0]
 8015d7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015d7c:	68fb      	ldr	r3, [r7, #12]
 8015d7e:	683a      	ldr	r2, [r7, #0]
 8015d80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015d82:	683b      	ldr	r3, [r7, #0]
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	1c5a      	adds	r2, r3, #1
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	601a      	str	r2, [r3, #0]
}
 8015d92:	bf00      	nop
 8015d94:	3714      	adds	r7, #20
 8015d96:	46bd      	mov	sp, r7
 8015d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d9c:	4770      	bx	lr

08015d9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015d9e:	b480      	push	{r7}
 8015da0:	b085      	sub	sp, #20
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	6078      	str	r0, [r7, #4]
 8015da6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015da8:	683b      	ldr	r3, [r7, #0]
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015db4:	d103      	bne.n	8015dbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	691b      	ldr	r3, [r3, #16]
 8015dba:	60fb      	str	r3, [r7, #12]
 8015dbc:	e00c      	b.n	8015dd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	3308      	adds	r3, #8
 8015dc2:	60fb      	str	r3, [r7, #12]
 8015dc4:	e002      	b.n	8015dcc <vListInsert+0x2e>
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	60fb      	str	r3, [r7, #12]
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	68ba      	ldr	r2, [r7, #8]
 8015dd4:	429a      	cmp	r2, r3
 8015dd6:	d2f6      	bcs.n	8015dc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015dd8:	68fb      	ldr	r3, [r7, #12]
 8015dda:	685a      	ldr	r2, [r3, #4]
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015de0:	683b      	ldr	r3, [r7, #0]
 8015de2:	685b      	ldr	r3, [r3, #4]
 8015de4:	683a      	ldr	r2, [r7, #0]
 8015de6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015de8:	683b      	ldr	r3, [r7, #0]
 8015dea:	68fa      	ldr	r2, [r7, #12]
 8015dec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	683a      	ldr	r2, [r7, #0]
 8015df2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	687a      	ldr	r2, [r7, #4]
 8015df8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	1c5a      	adds	r2, r3, #1
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	601a      	str	r2, [r3, #0]
}
 8015e04:	bf00      	nop
 8015e06:	3714      	adds	r7, #20
 8015e08:	46bd      	mov	sp, r7
 8015e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0e:	4770      	bx	lr

08015e10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015e10:	b480      	push	{r7}
 8015e12:	b085      	sub	sp, #20
 8015e14:	af00      	add	r7, sp, #0
 8015e16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	691b      	ldr	r3, [r3, #16]
 8015e1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	687a      	ldr	r2, [r7, #4]
 8015e24:	6892      	ldr	r2, [r2, #8]
 8015e26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	689b      	ldr	r3, [r3, #8]
 8015e2c:	687a      	ldr	r2, [r7, #4]
 8015e2e:	6852      	ldr	r2, [r2, #4]
 8015e30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015e32:	68fb      	ldr	r3, [r7, #12]
 8015e34:	685b      	ldr	r3, [r3, #4]
 8015e36:	687a      	ldr	r2, [r7, #4]
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	d103      	bne.n	8015e44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	689a      	ldr	r2, [r3, #8]
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	2200      	movs	r2, #0
 8015e48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	1e5a      	subs	r2, r3, #1
 8015e50:	68fb      	ldr	r3, [r7, #12]
 8015e52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	681b      	ldr	r3, [r3, #0]
}
 8015e58:	4618      	mov	r0, r3
 8015e5a:	3714      	adds	r7, #20
 8015e5c:	46bd      	mov	sp, r7
 8015e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e62:	4770      	bx	lr

08015e64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b084      	sub	sp, #16
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
 8015e6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d10a      	bne.n	8015e8e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7c:	f383 8811 	msr	BASEPRI, r3
 8015e80:	f3bf 8f6f 	isb	sy
 8015e84:	f3bf 8f4f 	dsb	sy
 8015e88:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015e8a:	bf00      	nop
 8015e8c:	e7fe      	b.n	8015e8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015e8e:	f002 ffc9 	bl	8018e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	681a      	ldr	r2, [r3, #0]
 8015e96:	68fb      	ldr	r3, [r7, #12]
 8015e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e9a:	68f9      	ldr	r1, [r7, #12]
 8015e9c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015e9e:	fb01 f303 	mul.w	r3, r1, r3
 8015ea2:	441a      	add	r2, r3
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015ea8:	68fb      	ldr	r3, [r7, #12]
 8015eaa:	2200      	movs	r2, #0
 8015eac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	681a      	ldr	r2, [r3, #0]
 8015eb2:	68fb      	ldr	r3, [r7, #12]
 8015eb4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015eb6:	68fb      	ldr	r3, [r7, #12]
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	68fb      	ldr	r3, [r7, #12]
 8015ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ebe:	3b01      	subs	r3, #1
 8015ec0:	68f9      	ldr	r1, [r7, #12]
 8015ec2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015ec4:	fb01 f303 	mul.w	r3, r1, r3
 8015ec8:	441a      	add	r2, r3
 8015eca:	68fb      	ldr	r3, [r7, #12]
 8015ecc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015ece:	68fb      	ldr	r3, [r7, #12]
 8015ed0:	22ff      	movs	r2, #255	; 0xff
 8015ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	22ff      	movs	r2, #255	; 0xff
 8015eda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d114      	bne.n	8015f0e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	691b      	ldr	r3, [r3, #16]
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d01a      	beq.n	8015f22 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015eec:	68fb      	ldr	r3, [r7, #12]
 8015eee:	3310      	adds	r3, #16
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f001 fd67 	bl	80179c4 <xTaskRemoveFromEventList>
 8015ef6:	4603      	mov	r3, r0
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d012      	beq.n	8015f22 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015efc:	4b0c      	ldr	r3, [pc, #48]	; (8015f30 <xQueueGenericReset+0xcc>)
 8015efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f02:	601a      	str	r2, [r3, #0]
 8015f04:	f3bf 8f4f 	dsb	sy
 8015f08:	f3bf 8f6f 	isb	sy
 8015f0c:	e009      	b.n	8015f22 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	3310      	adds	r3, #16
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7ff fef2 	bl	8015cfc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	3324      	adds	r3, #36	; 0x24
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7ff feed 	bl	8015cfc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015f22:	f002 ffaf 	bl	8018e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015f26:	2301      	movs	r3, #1
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}
 8015f30:	e000ed04 	.word	0xe000ed04

08015f34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b08e      	sub	sp, #56	; 0x38
 8015f38:	af02      	add	r7, sp, #8
 8015f3a:	60f8      	str	r0, [r7, #12]
 8015f3c:	60b9      	str	r1, [r7, #8]
 8015f3e:	607a      	str	r2, [r7, #4]
 8015f40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d10a      	bne.n	8015f5e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f4c:	f383 8811 	msr	BASEPRI, r3
 8015f50:	f3bf 8f6f 	isb	sy
 8015f54:	f3bf 8f4f 	dsb	sy
 8015f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015f5a:	bf00      	nop
 8015f5c:	e7fe      	b.n	8015f5c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d10a      	bne.n	8015f7a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f68:	f383 8811 	msr	BASEPRI, r3
 8015f6c:	f3bf 8f6f 	isb	sy
 8015f70:	f3bf 8f4f 	dsb	sy
 8015f74:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015f76:	bf00      	nop
 8015f78:	e7fe      	b.n	8015f78 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d002      	beq.n	8015f86 <xQueueGenericCreateStatic+0x52>
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d001      	beq.n	8015f8a <xQueueGenericCreateStatic+0x56>
 8015f86:	2301      	movs	r3, #1
 8015f88:	e000      	b.n	8015f8c <xQueueGenericCreateStatic+0x58>
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d10a      	bne.n	8015fa6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f94:	f383 8811 	msr	BASEPRI, r3
 8015f98:	f3bf 8f6f 	isb	sy
 8015f9c:	f3bf 8f4f 	dsb	sy
 8015fa0:	623b      	str	r3, [r7, #32]
}
 8015fa2:	bf00      	nop
 8015fa4:	e7fe      	b.n	8015fa4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d102      	bne.n	8015fb2 <xQueueGenericCreateStatic+0x7e>
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d101      	bne.n	8015fb6 <xQueueGenericCreateStatic+0x82>
 8015fb2:	2301      	movs	r3, #1
 8015fb4:	e000      	b.n	8015fb8 <xQueueGenericCreateStatic+0x84>
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10a      	bne.n	8015fd2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc0:	f383 8811 	msr	BASEPRI, r3
 8015fc4:	f3bf 8f6f 	isb	sy
 8015fc8:	f3bf 8f4f 	dsb	sy
 8015fcc:	61fb      	str	r3, [r7, #28]
}
 8015fce:	bf00      	nop
 8015fd0:	e7fe      	b.n	8015fd0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015fd2:	2350      	movs	r3, #80	; 0x50
 8015fd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	2b50      	cmp	r3, #80	; 0x50
 8015fda:	d00a      	beq.n	8015ff2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe0:	f383 8811 	msr	BASEPRI, r3
 8015fe4:	f3bf 8f6f 	isb	sy
 8015fe8:	f3bf 8f4f 	dsb	sy
 8015fec:	61bb      	str	r3, [r7, #24]
}
 8015fee:	bf00      	nop
 8015ff0:	e7fe      	b.n	8015ff0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015ff2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015ff4:	683b      	ldr	r3, [r7, #0]
 8015ff6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d00d      	beq.n	801601a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016000:	2201      	movs	r2, #1
 8016002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016006:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801600c:	9300      	str	r3, [sp, #0]
 801600e:	4613      	mov	r3, r2
 8016010:	687a      	ldr	r2, [r7, #4]
 8016012:	68b9      	ldr	r1, [r7, #8]
 8016014:	68f8      	ldr	r0, [r7, #12]
 8016016:	f000 f83f 	bl	8016098 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801601a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801601c:	4618      	mov	r0, r3
 801601e:	3730      	adds	r7, #48	; 0x30
 8016020:	46bd      	mov	sp, r7
 8016022:	bd80      	pop	{r7, pc}

08016024 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016024:	b580      	push	{r7, lr}
 8016026:	b08a      	sub	sp, #40	; 0x28
 8016028:	af02      	add	r7, sp, #8
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	4613      	mov	r3, r2
 8016030:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	2b00      	cmp	r3, #0
 8016036:	d10a      	bne.n	801604e <xQueueGenericCreate+0x2a>
	__asm volatile
 8016038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801603c:	f383 8811 	msr	BASEPRI, r3
 8016040:	f3bf 8f6f 	isb	sy
 8016044:	f3bf 8f4f 	dsb	sy
 8016048:	613b      	str	r3, [r7, #16]
}
 801604a:	bf00      	nop
 801604c:	e7fe      	b.n	801604c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	68ba      	ldr	r2, [r7, #8]
 8016052:	fb02 f303 	mul.w	r3, r2, r3
 8016056:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016058:	69fb      	ldr	r3, [r7, #28]
 801605a:	3350      	adds	r3, #80	; 0x50
 801605c:	4618      	mov	r0, r3
 801605e:	f003 f803 	bl	8019068 <pvPortMalloc>
 8016062:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016064:	69bb      	ldr	r3, [r7, #24]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d011      	beq.n	801608e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801606e:	697b      	ldr	r3, [r7, #20]
 8016070:	3350      	adds	r3, #80	; 0x50
 8016072:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016074:	69bb      	ldr	r3, [r7, #24]
 8016076:	2200      	movs	r2, #0
 8016078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801607c:	79fa      	ldrb	r2, [r7, #7]
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	9300      	str	r3, [sp, #0]
 8016082:	4613      	mov	r3, r2
 8016084:	697a      	ldr	r2, [r7, #20]
 8016086:	68b9      	ldr	r1, [r7, #8]
 8016088:	68f8      	ldr	r0, [r7, #12]
 801608a:	f000 f805 	bl	8016098 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801608e:	69bb      	ldr	r3, [r7, #24]
	}
 8016090:	4618      	mov	r0, r3
 8016092:	3720      	adds	r7, #32
 8016094:	46bd      	mov	sp, r7
 8016096:	bd80      	pop	{r7, pc}

08016098 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b084      	sub	sp, #16
 801609c:	af00      	add	r7, sp, #0
 801609e:	60f8      	str	r0, [r7, #12]
 80160a0:	60b9      	str	r1, [r7, #8]
 80160a2:	607a      	str	r2, [r7, #4]
 80160a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80160a6:	68bb      	ldr	r3, [r7, #8]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d103      	bne.n	80160b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80160ac:	69bb      	ldr	r3, [r7, #24]
 80160ae:	69ba      	ldr	r2, [r7, #24]
 80160b0:	601a      	str	r2, [r3, #0]
 80160b2:	e002      	b.n	80160ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80160b4:	69bb      	ldr	r3, [r7, #24]
 80160b6:	687a      	ldr	r2, [r7, #4]
 80160b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80160ba:	69bb      	ldr	r3, [r7, #24]
 80160bc:	68fa      	ldr	r2, [r7, #12]
 80160be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80160c0:	69bb      	ldr	r3, [r7, #24]
 80160c2:	68ba      	ldr	r2, [r7, #8]
 80160c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80160c6:	2101      	movs	r1, #1
 80160c8:	69b8      	ldr	r0, [r7, #24]
 80160ca:	f7ff fecb 	bl	8015e64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80160ce:	69bb      	ldr	r3, [r7, #24]
 80160d0:	78fa      	ldrb	r2, [r7, #3]
 80160d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80160d6:	bf00      	nop
 80160d8:	3710      	adds	r7, #16
 80160da:	46bd      	mov	sp, r7
 80160dc:	bd80      	pop	{r7, pc}

080160de <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80160de:	b580      	push	{r7, lr}
 80160e0:	b08a      	sub	sp, #40	; 0x28
 80160e2:	af02      	add	r7, sp, #8
 80160e4:	60f8      	str	r0, [r7, #12]
 80160e6:	60b9      	str	r1, [r7, #8]
 80160e8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d10a      	bne.n	8016106 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80160f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160f4:	f383 8811 	msr	BASEPRI, r3
 80160f8:	f3bf 8f6f 	isb	sy
 80160fc:	f3bf 8f4f 	dsb	sy
 8016100:	61bb      	str	r3, [r7, #24]
}
 8016102:	bf00      	nop
 8016104:	e7fe      	b.n	8016104 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016106:	68ba      	ldr	r2, [r7, #8]
 8016108:	68fb      	ldr	r3, [r7, #12]
 801610a:	429a      	cmp	r2, r3
 801610c:	d90a      	bls.n	8016124 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 801610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016112:	f383 8811 	msr	BASEPRI, r3
 8016116:	f3bf 8f6f 	isb	sy
 801611a:	f3bf 8f4f 	dsb	sy
 801611e:	617b      	str	r3, [r7, #20]
}
 8016120:	bf00      	nop
 8016122:	e7fe      	b.n	8016122 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016124:	2302      	movs	r3, #2
 8016126:	9300      	str	r3, [sp, #0]
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	2200      	movs	r2, #0
 801612c:	2100      	movs	r1, #0
 801612e:	68f8      	ldr	r0, [r7, #12]
 8016130:	f7ff ff00 	bl	8015f34 <xQueueGenericCreateStatic>
 8016134:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016136:	69fb      	ldr	r3, [r7, #28]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d002      	beq.n	8016142 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801613c:	69fb      	ldr	r3, [r7, #28]
 801613e:	68ba      	ldr	r2, [r7, #8]
 8016140:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016142:	69fb      	ldr	r3, [r7, #28]
	}
 8016144:	4618      	mov	r0, r3
 8016146:	3720      	adds	r7, #32
 8016148:	46bd      	mov	sp, r7
 801614a:	bd80      	pop	{r7, pc}

0801614c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801614c:	b580      	push	{r7, lr}
 801614e:	b086      	sub	sp, #24
 8016150:	af00      	add	r7, sp, #0
 8016152:	6078      	str	r0, [r7, #4]
 8016154:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d10a      	bne.n	8016172 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016160:	f383 8811 	msr	BASEPRI, r3
 8016164:	f3bf 8f6f 	isb	sy
 8016168:	f3bf 8f4f 	dsb	sy
 801616c:	613b      	str	r3, [r7, #16]
}
 801616e:	bf00      	nop
 8016170:	e7fe      	b.n	8016170 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016172:	683a      	ldr	r2, [r7, #0]
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	429a      	cmp	r2, r3
 8016178:	d90a      	bls.n	8016190 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801617e:	f383 8811 	msr	BASEPRI, r3
 8016182:	f3bf 8f6f 	isb	sy
 8016186:	f3bf 8f4f 	dsb	sy
 801618a:	60fb      	str	r3, [r7, #12]
}
 801618c:	bf00      	nop
 801618e:	e7fe      	b.n	801618e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016190:	2202      	movs	r2, #2
 8016192:	2100      	movs	r1, #0
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f7ff ff45 	bl	8016024 <xQueueGenericCreate>
 801619a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d002      	beq.n	80161a8 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80161a2:	697b      	ldr	r3, [r7, #20]
 80161a4:	683a      	ldr	r2, [r7, #0]
 80161a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80161a8:	697b      	ldr	r3, [r7, #20]
	}
 80161aa:	4618      	mov	r0, r3
 80161ac:	3718      	adds	r7, #24
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}
	...

080161b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80161b4:	b580      	push	{r7, lr}
 80161b6:	b08e      	sub	sp, #56	; 0x38
 80161b8:	af00      	add	r7, sp, #0
 80161ba:	60f8      	str	r0, [r7, #12]
 80161bc:	60b9      	str	r1, [r7, #8]
 80161be:	607a      	str	r2, [r7, #4]
 80161c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80161c2:	2300      	movs	r3, #0
 80161c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80161ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d10a      	bne.n	80161e6 <xQueueGenericSend+0x32>
	__asm volatile
 80161d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161d4:	f383 8811 	msr	BASEPRI, r3
 80161d8:	f3bf 8f6f 	isb	sy
 80161dc:	f3bf 8f4f 	dsb	sy
 80161e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80161e2:	bf00      	nop
 80161e4:	e7fe      	b.n	80161e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80161e6:	68bb      	ldr	r3, [r7, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d103      	bne.n	80161f4 <xQueueGenericSend+0x40>
 80161ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d101      	bne.n	80161f8 <xQueueGenericSend+0x44>
 80161f4:	2301      	movs	r3, #1
 80161f6:	e000      	b.n	80161fa <xQueueGenericSend+0x46>
 80161f8:	2300      	movs	r3, #0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d10a      	bne.n	8016214 <xQueueGenericSend+0x60>
	__asm volatile
 80161fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016202:	f383 8811 	msr	BASEPRI, r3
 8016206:	f3bf 8f6f 	isb	sy
 801620a:	f3bf 8f4f 	dsb	sy
 801620e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016210:	bf00      	nop
 8016212:	e7fe      	b.n	8016212 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016214:	683b      	ldr	r3, [r7, #0]
 8016216:	2b02      	cmp	r3, #2
 8016218:	d103      	bne.n	8016222 <xQueueGenericSend+0x6e>
 801621a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801621c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801621e:	2b01      	cmp	r3, #1
 8016220:	d101      	bne.n	8016226 <xQueueGenericSend+0x72>
 8016222:	2301      	movs	r3, #1
 8016224:	e000      	b.n	8016228 <xQueueGenericSend+0x74>
 8016226:	2300      	movs	r3, #0
 8016228:	2b00      	cmp	r3, #0
 801622a:	d10a      	bne.n	8016242 <xQueueGenericSend+0x8e>
	__asm volatile
 801622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016230:	f383 8811 	msr	BASEPRI, r3
 8016234:	f3bf 8f6f 	isb	sy
 8016238:	f3bf 8f4f 	dsb	sy
 801623c:	623b      	str	r3, [r7, #32]
}
 801623e:	bf00      	nop
 8016240:	e7fe      	b.n	8016240 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016242:	f001 fe55 	bl	8017ef0 <xTaskGetSchedulerState>
 8016246:	4603      	mov	r3, r0
 8016248:	2b00      	cmp	r3, #0
 801624a:	d102      	bne.n	8016252 <xQueueGenericSend+0x9e>
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d101      	bne.n	8016256 <xQueueGenericSend+0xa2>
 8016252:	2301      	movs	r3, #1
 8016254:	e000      	b.n	8016258 <xQueueGenericSend+0xa4>
 8016256:	2300      	movs	r3, #0
 8016258:	2b00      	cmp	r3, #0
 801625a:	d10a      	bne.n	8016272 <xQueueGenericSend+0xbe>
	__asm volatile
 801625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016260:	f383 8811 	msr	BASEPRI, r3
 8016264:	f3bf 8f6f 	isb	sy
 8016268:	f3bf 8f4f 	dsb	sy
 801626c:	61fb      	str	r3, [r7, #28]
}
 801626e:	bf00      	nop
 8016270:	e7fe      	b.n	8016270 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016272:	f002 fdd7 	bl	8018e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801627e:	429a      	cmp	r2, r3
 8016280:	d302      	bcc.n	8016288 <xQueueGenericSend+0xd4>
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	2b02      	cmp	r3, #2
 8016286:	d129      	bne.n	80162dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016288:	683a      	ldr	r2, [r7, #0]
 801628a:	68b9      	ldr	r1, [r7, #8]
 801628c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801628e:	f000 fc5e 	bl	8016b4e <prvCopyDataToQueue>
 8016292:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016298:	2b00      	cmp	r3, #0
 801629a:	d010      	beq.n	80162be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629e:	3324      	adds	r3, #36	; 0x24
 80162a0:	4618      	mov	r0, r3
 80162a2:	f001 fb8f 	bl	80179c4 <xTaskRemoveFromEventList>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d013      	beq.n	80162d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80162ac:	4b3f      	ldr	r3, [pc, #252]	; (80163ac <xQueueGenericSend+0x1f8>)
 80162ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162b2:	601a      	str	r2, [r3, #0]
 80162b4:	f3bf 8f4f 	dsb	sy
 80162b8:	f3bf 8f6f 	isb	sy
 80162bc:	e00a      	b.n	80162d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80162be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d007      	beq.n	80162d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80162c4:	4b39      	ldr	r3, [pc, #228]	; (80163ac <xQueueGenericSend+0x1f8>)
 80162c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162ca:	601a      	str	r2, [r3, #0]
 80162cc:	f3bf 8f4f 	dsb	sy
 80162d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80162d4:	f002 fdd6 	bl	8018e84 <vPortExitCritical>
				return pdPASS;
 80162d8:	2301      	movs	r3, #1
 80162da:	e063      	b.n	80163a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d103      	bne.n	80162ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80162e2:	f002 fdcf 	bl	8018e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80162e6:	2300      	movs	r3, #0
 80162e8:	e05c      	b.n	80163a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80162ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d106      	bne.n	80162fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80162f0:	f107 0314 	add.w	r3, r7, #20
 80162f4:	4618      	mov	r0, r3
 80162f6:	f001 fbc9 	bl	8017a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80162fa:	2301      	movs	r3, #1
 80162fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80162fe:	f002 fdc1 	bl	8018e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016302:	f001 f887 	bl	8017414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016306:	f002 fd8d 	bl	8018e24 <vPortEnterCritical>
 801630a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801630c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016310:	b25b      	sxtb	r3, r3
 8016312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016316:	d103      	bne.n	8016320 <xQueueGenericSend+0x16c>
 8016318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631a:	2200      	movs	r2, #0
 801631c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016326:	b25b      	sxtb	r3, r3
 8016328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801632c:	d103      	bne.n	8016336 <xQueueGenericSend+0x182>
 801632e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016330:	2200      	movs	r2, #0
 8016332:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016336:	f002 fda5 	bl	8018e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801633a:	1d3a      	adds	r2, r7, #4
 801633c:	f107 0314 	add.w	r3, r7, #20
 8016340:	4611      	mov	r1, r2
 8016342:	4618      	mov	r0, r3
 8016344:	f001 fbb8 	bl	8017ab8 <xTaskCheckForTimeOut>
 8016348:	4603      	mov	r3, r0
 801634a:	2b00      	cmp	r3, #0
 801634c:	d124      	bne.n	8016398 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801634e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016350:	f000 fcf5 	bl	8016d3e <prvIsQueueFull>
 8016354:	4603      	mov	r3, r0
 8016356:	2b00      	cmp	r3, #0
 8016358:	d018      	beq.n	801638c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635c:	3310      	adds	r3, #16
 801635e:	687a      	ldr	r2, [r7, #4]
 8016360:	4611      	mov	r1, r2
 8016362:	4618      	mov	r0, r3
 8016364:	f001 fade 	bl	8017924 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016368:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801636a:	f000 fc80 	bl	8016c6e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801636e:	f001 f85f 	bl	8017430 <xTaskResumeAll>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	f47f af7c 	bne.w	8016272 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801637a:	4b0c      	ldr	r3, [pc, #48]	; (80163ac <xQueueGenericSend+0x1f8>)
 801637c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016380:	601a      	str	r2, [r3, #0]
 8016382:	f3bf 8f4f 	dsb	sy
 8016386:	f3bf 8f6f 	isb	sy
 801638a:	e772      	b.n	8016272 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801638c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801638e:	f000 fc6e 	bl	8016c6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016392:	f001 f84d 	bl	8017430 <xTaskResumeAll>
 8016396:	e76c      	b.n	8016272 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801639a:	f000 fc68 	bl	8016c6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801639e:	f001 f847 	bl	8017430 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80163a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	3738      	adds	r7, #56	; 0x38
 80163a8:	46bd      	mov	sp, r7
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	e000ed04 	.word	0xe000ed04

080163b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b090      	sub	sp, #64	; 0x40
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	607a      	str	r2, [r7, #4]
 80163bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80163c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d10a      	bne.n	80163de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80163c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163cc:	f383 8811 	msr	BASEPRI, r3
 80163d0:	f3bf 8f6f 	isb	sy
 80163d4:	f3bf 8f4f 	dsb	sy
 80163d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80163da:	bf00      	nop
 80163dc:	e7fe      	b.n	80163dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80163de:	68bb      	ldr	r3, [r7, #8]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	d103      	bne.n	80163ec <xQueueGenericSendFromISR+0x3c>
 80163e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d101      	bne.n	80163f0 <xQueueGenericSendFromISR+0x40>
 80163ec:	2301      	movs	r3, #1
 80163ee:	e000      	b.n	80163f2 <xQueueGenericSendFromISR+0x42>
 80163f0:	2300      	movs	r3, #0
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d10a      	bne.n	801640c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80163f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fa:	f383 8811 	msr	BASEPRI, r3
 80163fe:	f3bf 8f6f 	isb	sy
 8016402:	f3bf 8f4f 	dsb	sy
 8016406:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016408:	bf00      	nop
 801640a:	e7fe      	b.n	801640a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	2b02      	cmp	r3, #2
 8016410:	d103      	bne.n	801641a <xQueueGenericSendFromISR+0x6a>
 8016412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016416:	2b01      	cmp	r3, #1
 8016418:	d101      	bne.n	801641e <xQueueGenericSendFromISR+0x6e>
 801641a:	2301      	movs	r3, #1
 801641c:	e000      	b.n	8016420 <xQueueGenericSendFromISR+0x70>
 801641e:	2300      	movs	r3, #0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d10a      	bne.n	801643a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016428:	f383 8811 	msr	BASEPRI, r3
 801642c:	f3bf 8f6f 	isb	sy
 8016430:	f3bf 8f4f 	dsb	sy
 8016434:	623b      	str	r3, [r7, #32]
}
 8016436:	bf00      	nop
 8016438:	e7fe      	b.n	8016438 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801643a:	f002 fdd5 	bl	8018fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801643e:	f3ef 8211 	mrs	r2, BASEPRI
 8016442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016446:	f383 8811 	msr	BASEPRI, r3
 801644a:	f3bf 8f6f 	isb	sy
 801644e:	f3bf 8f4f 	dsb	sy
 8016452:	61fa      	str	r2, [r7, #28]
 8016454:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016456:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016458:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801645a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016462:	429a      	cmp	r2, r3
 8016464:	d302      	bcc.n	801646c <xQueueGenericSendFromISR+0xbc>
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	2b02      	cmp	r3, #2
 801646a:	d12f      	bne.n	80164cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801646c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801646e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801647a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801647c:	683a      	ldr	r2, [r7, #0]
 801647e:	68b9      	ldr	r1, [r7, #8]
 8016480:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016482:	f000 fb64 	bl	8016b4e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016486:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 801648a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801648e:	d112      	bne.n	80164b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016494:	2b00      	cmp	r3, #0
 8016496:	d016      	beq.n	80164c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649a:	3324      	adds	r3, #36	; 0x24
 801649c:	4618      	mov	r0, r3
 801649e:	f001 fa91 	bl	80179c4 <xTaskRemoveFromEventList>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d00e      	beq.n	80164c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	2b00      	cmp	r3, #0
 80164ac:	d00b      	beq.n	80164c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	2201      	movs	r2, #1
 80164b2:	601a      	str	r2, [r3, #0]
 80164b4:	e007      	b.n	80164c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80164b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164ba:	3301      	adds	r3, #1
 80164bc:	b2db      	uxtb	r3, r3
 80164be:	b25a      	sxtb	r2, r3
 80164c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80164c6:	2301      	movs	r3, #1
 80164c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80164ca:	e001      	b.n	80164d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80164cc:	2300      	movs	r3, #0
 80164ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80164d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80164da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80164dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80164de:	4618      	mov	r0, r3
 80164e0:	3740      	adds	r7, #64	; 0x40
 80164e2:	46bd      	mov	sp, r7
 80164e4:	bd80      	pop	{r7, pc}

080164e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80164e6:	b580      	push	{r7, lr}
 80164e8:	b08e      	sub	sp, #56	; 0x38
 80164ea:	af00      	add	r7, sp, #0
 80164ec:	6078      	str	r0, [r7, #4]
 80164ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80164f0:	687b      	ldr	r3, [r7, #4]
 80164f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80164f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d10a      	bne.n	8016510 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80164fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164fe:	f383 8811 	msr	BASEPRI, r3
 8016502:	f3bf 8f6f 	isb	sy
 8016506:	f3bf 8f4f 	dsb	sy
 801650a:	623b      	str	r3, [r7, #32]
}
 801650c:	bf00      	nop
 801650e:	e7fe      	b.n	801650e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016514:	2b00      	cmp	r3, #0
 8016516:	d00a      	beq.n	801652e <xQueueGiveFromISR+0x48>
	__asm volatile
 8016518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801651c:	f383 8811 	msr	BASEPRI, r3
 8016520:	f3bf 8f6f 	isb	sy
 8016524:	f3bf 8f4f 	dsb	sy
 8016528:	61fb      	str	r3, [r7, #28]
}
 801652a:	bf00      	nop
 801652c:	e7fe      	b.n	801652c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d103      	bne.n	801653e <xQueueGiveFromISR+0x58>
 8016536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016538:	689b      	ldr	r3, [r3, #8]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d101      	bne.n	8016542 <xQueueGiveFromISR+0x5c>
 801653e:	2301      	movs	r3, #1
 8016540:	e000      	b.n	8016544 <xQueueGiveFromISR+0x5e>
 8016542:	2300      	movs	r3, #0
 8016544:	2b00      	cmp	r3, #0
 8016546:	d10a      	bne.n	801655e <xQueueGiveFromISR+0x78>
	__asm volatile
 8016548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801654c:	f383 8811 	msr	BASEPRI, r3
 8016550:	f3bf 8f6f 	isb	sy
 8016554:	f3bf 8f4f 	dsb	sy
 8016558:	61bb      	str	r3, [r7, #24]
}
 801655a:	bf00      	nop
 801655c:	e7fe      	b.n	801655c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801655e:	f002 fd43 	bl	8018fe8 <vPortValidateInterruptPriority>
	__asm volatile
 8016562:	f3ef 8211 	mrs	r2, BASEPRI
 8016566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801656a:	f383 8811 	msr	BASEPRI, r3
 801656e:	f3bf 8f6f 	isb	sy
 8016572:	f3bf 8f4f 	dsb	sy
 8016576:	617a      	str	r2, [r7, #20]
 8016578:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801657a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801657c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801657e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016582:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8016584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801658a:	429a      	cmp	r2, r3
 801658c:	d22b      	bcs.n	80165e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016590:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659a:	1c5a      	adds	r2, r3, #1
 801659c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801659e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80165a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80165a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165a8:	d112      	bne.n	80165d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80165aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d016      	beq.n	80165e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80165b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165b4:	3324      	adds	r3, #36	; 0x24
 80165b6:	4618      	mov	r0, r3
 80165b8:	f001 fa04 	bl	80179c4 <xTaskRemoveFromEventList>
 80165bc:	4603      	mov	r3, r0
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d00e      	beq.n	80165e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d00b      	beq.n	80165e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	2201      	movs	r2, #1
 80165cc:	601a      	str	r2, [r3, #0]
 80165ce:	e007      	b.n	80165e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80165d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80165d4:	3301      	adds	r3, #1
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	b25a      	sxtb	r2, r3
 80165da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80165e0:	2301      	movs	r3, #1
 80165e2:	637b      	str	r3, [r7, #52]	; 0x34
 80165e4:	e001      	b.n	80165ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80165e6:	2300      	movs	r3, #0
 80165e8:	637b      	str	r3, [r7, #52]	; 0x34
 80165ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80165ee:	68fb      	ldr	r3, [r7, #12]
 80165f0:	f383 8811 	msr	BASEPRI, r3
}
 80165f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80165f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80165f8:	4618      	mov	r0, r3
 80165fa:	3738      	adds	r7, #56	; 0x38
 80165fc:	46bd      	mov	sp, r7
 80165fe:	bd80      	pop	{r7, pc}

08016600 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b08c      	sub	sp, #48	; 0x30
 8016604:	af00      	add	r7, sp, #0
 8016606:	60f8      	str	r0, [r7, #12]
 8016608:	60b9      	str	r1, [r7, #8]
 801660a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801660c:	2300      	movs	r3, #0
 801660e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016610:	68fb      	ldr	r3, [r7, #12]
 8016612:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016616:	2b00      	cmp	r3, #0
 8016618:	d10a      	bne.n	8016630 <xQueueReceive+0x30>
	__asm volatile
 801661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801661e:	f383 8811 	msr	BASEPRI, r3
 8016622:	f3bf 8f6f 	isb	sy
 8016626:	f3bf 8f4f 	dsb	sy
 801662a:	623b      	str	r3, [r7, #32]
}
 801662c:	bf00      	nop
 801662e:	e7fe      	b.n	801662e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016630:	68bb      	ldr	r3, [r7, #8]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d103      	bne.n	801663e <xQueueReceive+0x3e>
 8016636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801663a:	2b00      	cmp	r3, #0
 801663c:	d101      	bne.n	8016642 <xQueueReceive+0x42>
 801663e:	2301      	movs	r3, #1
 8016640:	e000      	b.n	8016644 <xQueueReceive+0x44>
 8016642:	2300      	movs	r3, #0
 8016644:	2b00      	cmp	r3, #0
 8016646:	d10a      	bne.n	801665e <xQueueReceive+0x5e>
	__asm volatile
 8016648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664c:	f383 8811 	msr	BASEPRI, r3
 8016650:	f3bf 8f6f 	isb	sy
 8016654:	f3bf 8f4f 	dsb	sy
 8016658:	61fb      	str	r3, [r7, #28]
}
 801665a:	bf00      	nop
 801665c:	e7fe      	b.n	801665c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801665e:	f001 fc47 	bl	8017ef0 <xTaskGetSchedulerState>
 8016662:	4603      	mov	r3, r0
 8016664:	2b00      	cmp	r3, #0
 8016666:	d102      	bne.n	801666e <xQueueReceive+0x6e>
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d101      	bne.n	8016672 <xQueueReceive+0x72>
 801666e:	2301      	movs	r3, #1
 8016670:	e000      	b.n	8016674 <xQueueReceive+0x74>
 8016672:	2300      	movs	r3, #0
 8016674:	2b00      	cmp	r3, #0
 8016676:	d10a      	bne.n	801668e <xQueueReceive+0x8e>
	__asm volatile
 8016678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667c:	f383 8811 	msr	BASEPRI, r3
 8016680:	f3bf 8f6f 	isb	sy
 8016684:	f3bf 8f4f 	dsb	sy
 8016688:	61bb      	str	r3, [r7, #24]
}
 801668a:	bf00      	nop
 801668c:	e7fe      	b.n	801668c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801668e:	f002 fbc9 	bl	8018e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016696:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801669a:	2b00      	cmp	r3, #0
 801669c:	d01f      	beq.n	80166de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801669e:	68b9      	ldr	r1, [r7, #8]
 80166a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80166a2:	f000 fabe 	bl	8016c22 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80166a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166a8:	1e5a      	subs	r2, r3, #1
 80166aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80166ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b0:	691b      	ldr	r3, [r3, #16]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00f      	beq.n	80166d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	3310      	adds	r3, #16
 80166ba:	4618      	mov	r0, r3
 80166bc:	f001 f982 	bl	80179c4 <xTaskRemoveFromEventList>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d007      	beq.n	80166d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80166c6:	4b3d      	ldr	r3, [pc, #244]	; (80167bc <xQueueReceive+0x1bc>)
 80166c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166cc:	601a      	str	r2, [r3, #0]
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80166d6:	f002 fbd5 	bl	8018e84 <vPortExitCritical>
				return pdPASS;
 80166da:	2301      	movs	r3, #1
 80166dc:	e069      	b.n	80167b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d103      	bne.n	80166ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80166e4:	f002 fbce 	bl	8018e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80166e8:	2300      	movs	r3, #0
 80166ea:	e062      	b.n	80167b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80166ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d106      	bne.n	8016700 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80166f2:	f107 0310 	add.w	r3, r7, #16
 80166f6:	4618      	mov	r0, r3
 80166f8:	f001 f9c8 	bl	8017a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80166fc:	2301      	movs	r3, #1
 80166fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016700:	f002 fbc0 	bl	8018e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016704:	f000 fe86 	bl	8017414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016708:	f002 fb8c 	bl	8018e24 <vPortEnterCritical>
 801670c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801670e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016712:	b25b      	sxtb	r3, r3
 8016714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016718:	d103      	bne.n	8016722 <xQueueReceive+0x122>
 801671a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671c:	2200      	movs	r2, #0
 801671e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016728:	b25b      	sxtb	r3, r3
 801672a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801672e:	d103      	bne.n	8016738 <xQueueReceive+0x138>
 8016730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016732:	2200      	movs	r2, #0
 8016734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016738:	f002 fba4 	bl	8018e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801673c:	1d3a      	adds	r2, r7, #4
 801673e:	f107 0310 	add.w	r3, r7, #16
 8016742:	4611      	mov	r1, r2
 8016744:	4618      	mov	r0, r3
 8016746:	f001 f9b7 	bl	8017ab8 <xTaskCheckForTimeOut>
 801674a:	4603      	mov	r3, r0
 801674c:	2b00      	cmp	r3, #0
 801674e:	d123      	bne.n	8016798 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016752:	f000 fade 	bl	8016d12 <prvIsQueueEmpty>
 8016756:	4603      	mov	r3, r0
 8016758:	2b00      	cmp	r3, #0
 801675a:	d017      	beq.n	801678c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801675c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801675e:	3324      	adds	r3, #36	; 0x24
 8016760:	687a      	ldr	r2, [r7, #4]
 8016762:	4611      	mov	r1, r2
 8016764:	4618      	mov	r0, r3
 8016766:	f001 f8dd 	bl	8017924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801676a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801676c:	f000 fa7f 	bl	8016c6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016770:	f000 fe5e 	bl	8017430 <xTaskResumeAll>
 8016774:	4603      	mov	r3, r0
 8016776:	2b00      	cmp	r3, #0
 8016778:	d189      	bne.n	801668e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801677a:	4b10      	ldr	r3, [pc, #64]	; (80167bc <xQueueReceive+0x1bc>)
 801677c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016780:	601a      	str	r2, [r3, #0]
 8016782:	f3bf 8f4f 	dsb	sy
 8016786:	f3bf 8f6f 	isb	sy
 801678a:	e780      	b.n	801668e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801678c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801678e:	f000 fa6e 	bl	8016c6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016792:	f000 fe4d 	bl	8017430 <xTaskResumeAll>
 8016796:	e77a      	b.n	801668e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8016798:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801679a:	f000 fa68 	bl	8016c6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801679e:	f000 fe47 	bl	8017430 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80167a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80167a4:	f000 fab5 	bl	8016d12 <prvIsQueueEmpty>
 80167a8:	4603      	mov	r3, r0
 80167aa:	2b00      	cmp	r3, #0
 80167ac:	f43f af6f 	beq.w	801668e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80167b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	3730      	adds	r7, #48	; 0x30
 80167b6:	46bd      	mov	sp, r7
 80167b8:	bd80      	pop	{r7, pc}
 80167ba:	bf00      	nop
 80167bc:	e000ed04 	.word	0xe000ed04

080167c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b08e      	sub	sp, #56	; 0x38
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
 80167c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80167ca:	2300      	movs	r3, #0
 80167cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80167d2:	2300      	movs	r3, #0
 80167d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80167d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d10a      	bne.n	80167f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80167dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167e0:	f383 8811 	msr	BASEPRI, r3
 80167e4:	f3bf 8f6f 	isb	sy
 80167e8:	f3bf 8f4f 	dsb	sy
 80167ec:	623b      	str	r3, [r7, #32]
}
 80167ee:	bf00      	nop
 80167f0:	e7fe      	b.n	80167f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80167f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d00a      	beq.n	8016810 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80167fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80167fe:	f383 8811 	msr	BASEPRI, r3
 8016802:	f3bf 8f6f 	isb	sy
 8016806:	f3bf 8f4f 	dsb	sy
 801680a:	61fb      	str	r3, [r7, #28]
}
 801680c:	bf00      	nop
 801680e:	e7fe      	b.n	801680e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016810:	f001 fb6e 	bl	8017ef0 <xTaskGetSchedulerState>
 8016814:	4603      	mov	r3, r0
 8016816:	2b00      	cmp	r3, #0
 8016818:	d102      	bne.n	8016820 <xQueueSemaphoreTake+0x60>
 801681a:	683b      	ldr	r3, [r7, #0]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d101      	bne.n	8016824 <xQueueSemaphoreTake+0x64>
 8016820:	2301      	movs	r3, #1
 8016822:	e000      	b.n	8016826 <xQueueSemaphoreTake+0x66>
 8016824:	2300      	movs	r3, #0
 8016826:	2b00      	cmp	r3, #0
 8016828:	d10a      	bne.n	8016840 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801682a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801682e:	f383 8811 	msr	BASEPRI, r3
 8016832:	f3bf 8f6f 	isb	sy
 8016836:	f3bf 8f4f 	dsb	sy
 801683a:	61bb      	str	r3, [r7, #24]
}
 801683c:	bf00      	nop
 801683e:	e7fe      	b.n	801683e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016840:	f002 faf0 	bl	8018e24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016848:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801684c:	2b00      	cmp	r3, #0
 801684e:	d024      	beq.n	801689a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016852:	1e5a      	subs	r2, r3, #1
 8016854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016856:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	2b00      	cmp	r3, #0
 801685e:	d104      	bne.n	801686a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8016860:	f001 fdfc 	bl	801845c <pvTaskIncrementMutexHeldCount>
 8016864:	4602      	mov	r2, r0
 8016866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016868:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801686a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801686c:	691b      	ldr	r3, [r3, #16]
 801686e:	2b00      	cmp	r3, #0
 8016870:	d00f      	beq.n	8016892 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016874:	3310      	adds	r3, #16
 8016876:	4618      	mov	r0, r3
 8016878:	f001 f8a4 	bl	80179c4 <xTaskRemoveFromEventList>
 801687c:	4603      	mov	r3, r0
 801687e:	2b00      	cmp	r3, #0
 8016880:	d007      	beq.n	8016892 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8016882:	4b54      	ldr	r3, [pc, #336]	; (80169d4 <xQueueSemaphoreTake+0x214>)
 8016884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016888:	601a      	str	r2, [r3, #0]
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8016892:	f002 faf7 	bl	8018e84 <vPortExitCritical>
				return pdPASS;
 8016896:	2301      	movs	r3, #1
 8016898:	e097      	b.n	80169ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801689a:	683b      	ldr	r3, [r7, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d111      	bne.n	80168c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80168a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d00a      	beq.n	80168bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80168a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168aa:	f383 8811 	msr	BASEPRI, r3
 80168ae:	f3bf 8f6f 	isb	sy
 80168b2:	f3bf 8f4f 	dsb	sy
 80168b6:	617b      	str	r3, [r7, #20]
}
 80168b8:	bf00      	nop
 80168ba:	e7fe      	b.n	80168ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80168bc:	f002 fae2 	bl	8018e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80168c0:	2300      	movs	r3, #0
 80168c2:	e082      	b.n	80169ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80168c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d106      	bne.n	80168d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80168ca:	f107 030c 	add.w	r3, r7, #12
 80168ce:	4618      	mov	r0, r3
 80168d0:	f001 f8dc 	bl	8017a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80168d4:	2301      	movs	r3, #1
 80168d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80168d8:	f002 fad4 	bl	8018e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80168dc:	f000 fd9a 	bl	8017414 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80168e0:	f002 faa0 	bl	8018e24 <vPortEnterCritical>
 80168e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80168ea:	b25b      	sxtb	r3, r3
 80168ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80168f0:	d103      	bne.n	80168fa <xQueueSemaphoreTake+0x13a>
 80168f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168f4:	2200      	movs	r2, #0
 80168f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80168fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80168fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016900:	b25b      	sxtb	r3, r3
 8016902:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016906:	d103      	bne.n	8016910 <xQueueSemaphoreTake+0x150>
 8016908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801690a:	2200      	movs	r2, #0
 801690c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016910:	f002 fab8 	bl	8018e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016914:	463a      	mov	r2, r7
 8016916:	f107 030c 	add.w	r3, r7, #12
 801691a:	4611      	mov	r1, r2
 801691c:	4618      	mov	r0, r3
 801691e:	f001 f8cb 	bl	8017ab8 <xTaskCheckForTimeOut>
 8016922:	4603      	mov	r3, r0
 8016924:	2b00      	cmp	r3, #0
 8016926:	d132      	bne.n	801698e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801692a:	f000 f9f2 	bl	8016d12 <prvIsQueueEmpty>
 801692e:	4603      	mov	r3, r0
 8016930:	2b00      	cmp	r3, #0
 8016932:	d026      	beq.n	8016982 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d109      	bne.n	8016950 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801693c:	f002 fa72 	bl	8018e24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016942:	689b      	ldr	r3, [r3, #8]
 8016944:	4618      	mov	r0, r3
 8016946:	f001 faf1 	bl	8017f2c <xTaskPriorityInherit>
 801694a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801694c:	f002 fa9a 	bl	8018e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016952:	3324      	adds	r3, #36	; 0x24
 8016954:	683a      	ldr	r2, [r7, #0]
 8016956:	4611      	mov	r1, r2
 8016958:	4618      	mov	r0, r3
 801695a:	f000 ffe3 	bl	8017924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801695e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016960:	f000 f985 	bl	8016c6e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016964:	f000 fd64 	bl	8017430 <xTaskResumeAll>
 8016968:	4603      	mov	r3, r0
 801696a:	2b00      	cmp	r3, #0
 801696c:	f47f af68 	bne.w	8016840 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8016970:	4b18      	ldr	r3, [pc, #96]	; (80169d4 <xQueueSemaphoreTake+0x214>)
 8016972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016976:	601a      	str	r2, [r3, #0]
 8016978:	f3bf 8f4f 	dsb	sy
 801697c:	f3bf 8f6f 	isb	sy
 8016980:	e75e      	b.n	8016840 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8016982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016984:	f000 f973 	bl	8016c6e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016988:	f000 fd52 	bl	8017430 <xTaskResumeAll>
 801698c:	e758      	b.n	8016840 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801698e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016990:	f000 f96d 	bl	8016c6e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016994:	f000 fd4c 	bl	8017430 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016998:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801699a:	f000 f9ba 	bl	8016d12 <prvIsQueueEmpty>
 801699e:	4603      	mov	r3, r0
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	f43f af4d 	beq.w	8016840 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80169a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d00d      	beq.n	80169c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80169ac:	f002 fa3a 	bl	8018e24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80169b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169b2:	f000 f8b4 	bl	8016b1e <prvGetDisinheritPriorityAfterTimeout>
 80169b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80169b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ba:	689b      	ldr	r3, [r3, #8]
 80169bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169be:	4618      	mov	r0, r3
 80169c0:	f001 fb8a 	bl	80180d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80169c4:	f002 fa5e 	bl	8018e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80169c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3738      	adds	r7, #56	; 0x38
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}
 80169d2:	bf00      	nop
 80169d4:	e000ed04 	.word	0xe000ed04

080169d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b08e      	sub	sp, #56	; 0x38
 80169dc:	af00      	add	r7, sp, #0
 80169de:	60f8      	str	r0, [r7, #12]
 80169e0:	60b9      	str	r1, [r7, #8]
 80169e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80169e4:	68fb      	ldr	r3, [r7, #12]
 80169e6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80169e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d10a      	bne.n	8016a04 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80169ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169f2:	f383 8811 	msr	BASEPRI, r3
 80169f6:	f3bf 8f6f 	isb	sy
 80169fa:	f3bf 8f4f 	dsb	sy
 80169fe:	623b      	str	r3, [r7, #32]
}
 8016a00:	bf00      	nop
 8016a02:	e7fe      	b.n	8016a02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d103      	bne.n	8016a12 <xQueueReceiveFromISR+0x3a>
 8016a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d101      	bne.n	8016a16 <xQueueReceiveFromISR+0x3e>
 8016a12:	2301      	movs	r3, #1
 8016a14:	e000      	b.n	8016a18 <xQueueReceiveFromISR+0x40>
 8016a16:	2300      	movs	r3, #0
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d10a      	bne.n	8016a32 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a20:	f383 8811 	msr	BASEPRI, r3
 8016a24:	f3bf 8f6f 	isb	sy
 8016a28:	f3bf 8f4f 	dsb	sy
 8016a2c:	61fb      	str	r3, [r7, #28]
}
 8016a2e:	bf00      	nop
 8016a30:	e7fe      	b.n	8016a30 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016a32:	f002 fad9 	bl	8018fe8 <vPortValidateInterruptPriority>
	__asm volatile
 8016a36:	f3ef 8211 	mrs	r2, BASEPRI
 8016a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a3e:	f383 8811 	msr	BASEPRI, r3
 8016a42:	f3bf 8f6f 	isb	sy
 8016a46:	f3bf 8f4f 	dsb	sy
 8016a4a:	61ba      	str	r2, [r7, #24]
 8016a4c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016a4e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016a56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d02f      	beq.n	8016abe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8016a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016a68:	68b9      	ldr	r1, [r7, #8]
 8016a6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a6c:	f000 f8d9 	bl	8016c22 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8016a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a72:	1e5a      	subs	r2, r3, #1
 8016a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a76:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016a78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a80:	d112      	bne.n	8016aa8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a84:	691b      	ldr	r3, [r3, #16]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d016      	beq.n	8016ab8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a8c:	3310      	adds	r3, #16
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f000 ff98 	bl	80179c4 <xTaskRemoveFromEventList>
 8016a94:	4603      	mov	r3, r0
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d00e      	beq.n	8016ab8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d00b      	beq.n	8016ab8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	601a      	str	r2, [r3, #0]
 8016aa6:	e007      	b.n	8016ab8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8016aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016aac:	3301      	adds	r3, #1
 8016aae:	b2db      	uxtb	r3, r3
 8016ab0:	b25a      	sxtb	r2, r3
 8016ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8016ab8:	2301      	movs	r3, #1
 8016aba:	637b      	str	r3, [r7, #52]	; 0x34
 8016abc:	e001      	b.n	8016ac2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8016ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	f383 8811 	msr	BASEPRI, r3
}
 8016acc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016ad0:	4618      	mov	r0, r3
 8016ad2:	3738      	adds	r7, #56	; 0x38
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	bd80      	pop	{r7, pc}

08016ad8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b084      	sub	sp, #16
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d10a      	bne.n	8016b00 <vQueueDelete+0x28>
	__asm volatile
 8016aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aee:	f383 8811 	msr	BASEPRI, r3
 8016af2:	f3bf 8f6f 	isb	sy
 8016af6:	f3bf 8f4f 	dsb	sy
 8016afa:	60bb      	str	r3, [r7, #8]
}
 8016afc:	bf00      	nop
 8016afe:	e7fe      	b.n	8016afe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016b00:	68f8      	ldr	r0, [r7, #12]
 8016b02:	f000 f95f 	bl	8016dc4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8016b06:	68fb      	ldr	r3, [r7, #12]
 8016b08:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d102      	bne.n	8016b16 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016b10:	68f8      	ldr	r0, [r7, #12]
 8016b12:	f002 fb75 	bl	8019200 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8016b16:	bf00      	nop
 8016b18:	3710      	adds	r7, #16
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}

08016b1e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016b1e:	b480      	push	{r7}
 8016b20:	b085      	sub	sp, #20
 8016b22:	af00      	add	r7, sp, #0
 8016b24:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d006      	beq.n	8016b3c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8016b38:	60fb      	str	r3, [r7, #12]
 8016b3a:	e001      	b.n	8016b40 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016b40:	68fb      	ldr	r3, [r7, #12]
	}
 8016b42:	4618      	mov	r0, r3
 8016b44:	3714      	adds	r7, #20
 8016b46:	46bd      	mov	sp, r7
 8016b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b4c:	4770      	bx	lr

08016b4e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016b4e:	b580      	push	{r7, lr}
 8016b50:	b086      	sub	sp, #24
 8016b52:	af00      	add	r7, sp, #0
 8016b54:	60f8      	str	r0, [r7, #12]
 8016b56:	60b9      	str	r1, [r7, #8]
 8016b58:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b62:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8016b64:	68fb      	ldr	r3, [r7, #12]
 8016b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	d10d      	bne.n	8016b88 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d14d      	bne.n	8016c10 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	689b      	ldr	r3, [r3, #8]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f001 fa3f 	bl	8017ffc <xTaskPriorityDisinherit>
 8016b7e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	2200      	movs	r2, #0
 8016b84:	609a      	str	r2, [r3, #8]
 8016b86:	e043      	b.n	8016c10 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d119      	bne.n	8016bc2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	6858      	ldr	r0, [r3, #4]
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b96:	461a      	mov	r2, r3
 8016b98:	68b9      	ldr	r1, [r7, #8]
 8016b9a:	f003 fad1 	bl	801a140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	685a      	ldr	r2, [r3, #4]
 8016ba2:	68fb      	ldr	r3, [r7, #12]
 8016ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ba6:	441a      	add	r2, r3
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	685a      	ldr	r2, [r3, #4]
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	689b      	ldr	r3, [r3, #8]
 8016bb4:	429a      	cmp	r2, r3
 8016bb6:	d32b      	bcc.n	8016c10 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	605a      	str	r2, [r3, #4]
 8016bc0:	e026      	b.n	8016c10 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	68d8      	ldr	r0, [r3, #12]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bca:	461a      	mov	r2, r3
 8016bcc:	68b9      	ldr	r1, [r7, #8]
 8016bce:	f003 fab7 	bl	801a140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	68da      	ldr	r2, [r3, #12]
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bda:	425b      	negs	r3, r3
 8016bdc:	441a      	add	r2, r3
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	68da      	ldr	r2, [r3, #12]
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	429a      	cmp	r2, r3
 8016bec:	d207      	bcs.n	8016bfe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	689a      	ldr	r2, [r3, #8]
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016bf6:	425b      	negs	r3, r3
 8016bf8:	441a      	add	r2, r3
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2b02      	cmp	r3, #2
 8016c02:	d105      	bne.n	8016c10 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d002      	beq.n	8016c10 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016c0a:	693b      	ldr	r3, [r7, #16]
 8016c0c:	3b01      	subs	r3, #1
 8016c0e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016c10:	693b      	ldr	r3, [r7, #16]
 8016c12:	1c5a      	adds	r2, r3, #1
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016c18:	697b      	ldr	r3, [r7, #20]
}
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	3718      	adds	r7, #24
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}

08016c22 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b082      	sub	sp, #8
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	6078      	str	r0, [r7, #4]
 8016c2a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c30:	2b00      	cmp	r3, #0
 8016c32:	d018      	beq.n	8016c66 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	68da      	ldr	r2, [r3, #12]
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c3c:	441a      	add	r2, r3
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	68da      	ldr	r2, [r3, #12]
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	689b      	ldr	r3, [r3, #8]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d303      	bcc.n	8016c56 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	681a      	ldr	r2, [r3, #0]
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	68d9      	ldr	r1, [r3, #12]
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c5e:	461a      	mov	r2, r3
 8016c60:	6838      	ldr	r0, [r7, #0]
 8016c62:	f003 fa6d 	bl	801a140 <memcpy>
	}
}
 8016c66:	bf00      	nop
 8016c68:	3708      	adds	r7, #8
 8016c6a:	46bd      	mov	sp, r7
 8016c6c:	bd80      	pop	{r7, pc}

08016c6e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016c6e:	b580      	push	{r7, lr}
 8016c70:	b084      	sub	sp, #16
 8016c72:	af00      	add	r7, sp, #0
 8016c74:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016c76:	f002 f8d5 	bl	8018e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c80:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016c82:	e011      	b.n	8016ca8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d012      	beq.n	8016cb2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	3324      	adds	r3, #36	; 0x24
 8016c90:	4618      	mov	r0, r3
 8016c92:	f000 fe97 	bl	80179c4 <xTaskRemoveFromEventList>
 8016c96:	4603      	mov	r3, r0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d001      	beq.n	8016ca0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016c9c:	f000 ff6e 	bl	8017b7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016ca0:	7bfb      	ldrb	r3, [r7, #15]
 8016ca2:	3b01      	subs	r3, #1
 8016ca4:	b2db      	uxtb	r3, r3
 8016ca6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	dce9      	bgt.n	8016c84 <prvUnlockQueue+0x16>
 8016cb0:	e000      	b.n	8016cb4 <prvUnlockQueue+0x46>
					break;
 8016cb2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	22ff      	movs	r2, #255	; 0xff
 8016cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016cbc:	f002 f8e2 	bl	8018e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016cc0:	f002 f8b0 	bl	8018e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016cca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016ccc:	e011      	b.n	8016cf2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016cce:	687b      	ldr	r3, [r7, #4]
 8016cd0:	691b      	ldr	r3, [r3, #16]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d012      	beq.n	8016cfc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	3310      	adds	r3, #16
 8016cda:	4618      	mov	r0, r3
 8016cdc:	f000 fe72 	bl	80179c4 <xTaskRemoveFromEventList>
 8016ce0:	4603      	mov	r3, r0
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d001      	beq.n	8016cea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016ce6:	f000 ff49 	bl	8017b7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016cea:	7bbb      	ldrb	r3, [r7, #14]
 8016cec:	3b01      	subs	r3, #1
 8016cee:	b2db      	uxtb	r3, r3
 8016cf0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016cf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016cf6:	2b00      	cmp	r3, #0
 8016cf8:	dce9      	bgt.n	8016cce <prvUnlockQueue+0x60>
 8016cfa:	e000      	b.n	8016cfe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016cfc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	22ff      	movs	r2, #255	; 0xff
 8016d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016d06:	f002 f8bd 	bl	8018e84 <vPortExitCritical>
}
 8016d0a:	bf00      	nop
 8016d0c:	3710      	adds	r7, #16
 8016d0e:	46bd      	mov	sp, r7
 8016d10:	bd80      	pop	{r7, pc}

08016d12 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016d12:	b580      	push	{r7, lr}
 8016d14:	b084      	sub	sp, #16
 8016d16:	af00      	add	r7, sp, #0
 8016d18:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d1a:	f002 f883 	bl	8018e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d102      	bne.n	8016d2c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016d26:	2301      	movs	r3, #1
 8016d28:	60fb      	str	r3, [r7, #12]
 8016d2a:	e001      	b.n	8016d30 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d30:	f002 f8a8 	bl	8018e84 <vPortExitCritical>

	return xReturn;
 8016d34:	68fb      	ldr	r3, [r7, #12]
}
 8016d36:	4618      	mov	r0, r3
 8016d38:	3710      	adds	r7, #16
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}

08016d3e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016d3e:	b580      	push	{r7, lr}
 8016d40:	b084      	sub	sp, #16
 8016d42:	af00      	add	r7, sp, #0
 8016d44:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016d46:	f002 f86d 	bl	8018e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d52:	429a      	cmp	r2, r3
 8016d54:	d102      	bne.n	8016d5c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016d56:	2301      	movs	r3, #1
 8016d58:	60fb      	str	r3, [r7, #12]
 8016d5a:	e001      	b.n	8016d60 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016d60:	f002 f890 	bl	8018e84 <vPortExitCritical>

	return xReturn;
 8016d64:	68fb      	ldr	r3, [r7, #12]
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
	...

08016d70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016d70:	b480      	push	{r7}
 8016d72:	b085      	sub	sp, #20
 8016d74:	af00      	add	r7, sp, #0
 8016d76:	6078      	str	r0, [r7, #4]
 8016d78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	60fb      	str	r3, [r7, #12]
 8016d7e:	e014      	b.n	8016daa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016d80:	4a0f      	ldr	r2, [pc, #60]	; (8016dc0 <vQueueAddToRegistry+0x50>)
 8016d82:	68fb      	ldr	r3, [r7, #12]
 8016d84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d10b      	bne.n	8016da4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016d8c:	490c      	ldr	r1, [pc, #48]	; (8016dc0 <vQueueAddToRegistry+0x50>)
 8016d8e:	68fb      	ldr	r3, [r7, #12]
 8016d90:	683a      	ldr	r2, [r7, #0]
 8016d92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016d96:	4a0a      	ldr	r2, [pc, #40]	; (8016dc0 <vQueueAddToRegistry+0x50>)
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	00db      	lsls	r3, r3, #3
 8016d9c:	4413      	add	r3, r2
 8016d9e:	687a      	ldr	r2, [r7, #4]
 8016da0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016da2:	e006      	b.n	8016db2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016da4:	68fb      	ldr	r3, [r7, #12]
 8016da6:	3301      	adds	r3, #1
 8016da8:	60fb      	str	r3, [r7, #12]
 8016daa:	68fb      	ldr	r3, [r7, #12]
 8016dac:	2b07      	cmp	r3, #7
 8016dae:	d9e7      	bls.n	8016d80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016db0:	bf00      	nop
 8016db2:	bf00      	nop
 8016db4:	3714      	adds	r7, #20
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	20015130 	.word	0x20015130

08016dc4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016dc4:	b480      	push	{r7}
 8016dc6:	b085      	sub	sp, #20
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016dcc:	2300      	movs	r3, #0
 8016dce:	60fb      	str	r3, [r7, #12]
 8016dd0:	e016      	b.n	8016e00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016dd2:	4a10      	ldr	r2, [pc, #64]	; (8016e14 <vQueueUnregisterQueue+0x50>)
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	00db      	lsls	r3, r3, #3
 8016dd8:	4413      	add	r3, r2
 8016dda:	685b      	ldr	r3, [r3, #4]
 8016ddc:	687a      	ldr	r2, [r7, #4]
 8016dde:	429a      	cmp	r2, r3
 8016de0:	d10b      	bne.n	8016dfa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016de2:	4a0c      	ldr	r2, [pc, #48]	; (8016e14 <vQueueUnregisterQueue+0x50>)
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	2100      	movs	r1, #0
 8016de8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016dec:	4a09      	ldr	r2, [pc, #36]	; (8016e14 <vQueueUnregisterQueue+0x50>)
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	00db      	lsls	r3, r3, #3
 8016df2:	4413      	add	r3, r2
 8016df4:	2200      	movs	r2, #0
 8016df6:	605a      	str	r2, [r3, #4]
				break;
 8016df8:	e006      	b.n	8016e08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	3301      	adds	r3, #1
 8016dfe:	60fb      	str	r3, [r7, #12]
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	2b07      	cmp	r3, #7
 8016e04:	d9e5      	bls.n	8016dd2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016e06:	bf00      	nop
 8016e08:	bf00      	nop
 8016e0a:	3714      	adds	r7, #20
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e12:	4770      	bx	lr
 8016e14:	20015130 	.word	0x20015130

08016e18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b086      	sub	sp, #24
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016e28:	f001 fffc 	bl	8018e24 <vPortEnterCritical>
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e32:	b25b      	sxtb	r3, r3
 8016e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e38:	d103      	bne.n	8016e42 <vQueueWaitForMessageRestricted+0x2a>
 8016e3a:	697b      	ldr	r3, [r7, #20]
 8016e3c:	2200      	movs	r2, #0
 8016e3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e42:	697b      	ldr	r3, [r7, #20]
 8016e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e48:	b25b      	sxtb	r3, r3
 8016e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016e4e:	d103      	bne.n	8016e58 <vQueueWaitForMessageRestricted+0x40>
 8016e50:	697b      	ldr	r3, [r7, #20]
 8016e52:	2200      	movs	r2, #0
 8016e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e58:	f002 f814 	bl	8018e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016e5c:	697b      	ldr	r3, [r7, #20]
 8016e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d106      	bne.n	8016e72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	3324      	adds	r3, #36	; 0x24
 8016e68:	687a      	ldr	r2, [r7, #4]
 8016e6a:	68b9      	ldr	r1, [r7, #8]
 8016e6c:	4618      	mov	r0, r3
 8016e6e:	f000 fd7d 	bl	801796c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016e72:	6978      	ldr	r0, [r7, #20]
 8016e74:	f7ff fefb 	bl	8016c6e <prvUnlockQueue>
	}
 8016e78:	bf00      	nop
 8016e7a:	3718      	adds	r7, #24
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	bd80      	pop	{r7, pc}

08016e80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b08e      	sub	sp, #56	; 0x38
 8016e84:	af04      	add	r7, sp, #16
 8016e86:	60f8      	str	r0, [r7, #12]
 8016e88:	60b9      	str	r1, [r7, #8]
 8016e8a:	607a      	str	r2, [r7, #4]
 8016e8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d10a      	bne.n	8016eaa <xTaskCreateStatic+0x2a>
	__asm volatile
 8016e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e98:	f383 8811 	msr	BASEPRI, r3
 8016e9c:	f3bf 8f6f 	isb	sy
 8016ea0:	f3bf 8f4f 	dsb	sy
 8016ea4:	623b      	str	r3, [r7, #32]
}
 8016ea6:	bf00      	nop
 8016ea8:	e7fe      	b.n	8016ea8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eac:	2b00      	cmp	r3, #0
 8016eae:	d10a      	bne.n	8016ec6 <xTaskCreateStatic+0x46>
	__asm volatile
 8016eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb4:	f383 8811 	msr	BASEPRI, r3
 8016eb8:	f3bf 8f6f 	isb	sy
 8016ebc:	f3bf 8f4f 	dsb	sy
 8016ec0:	61fb      	str	r3, [r7, #28]
}
 8016ec2:	bf00      	nop
 8016ec4:	e7fe      	b.n	8016ec4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016ec6:	23c0      	movs	r3, #192	; 0xc0
 8016ec8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016eca:	693b      	ldr	r3, [r7, #16]
 8016ecc:	2bc0      	cmp	r3, #192	; 0xc0
 8016ece:	d00a      	beq.n	8016ee6 <xTaskCreateStatic+0x66>
	__asm volatile
 8016ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed4:	f383 8811 	msr	BASEPRI, r3
 8016ed8:	f3bf 8f6f 	isb	sy
 8016edc:	f3bf 8f4f 	dsb	sy
 8016ee0:	61bb      	str	r3, [r7, #24]
}
 8016ee2:	bf00      	nop
 8016ee4:	e7fe      	b.n	8016ee4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016ee6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d01e      	beq.n	8016f2c <xTaskCreateStatic+0xac>
 8016eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d01b      	beq.n	8016f2c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016efc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f00:	2202      	movs	r2, #2
 8016f02:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016f06:	2300      	movs	r3, #0
 8016f08:	9303      	str	r3, [sp, #12]
 8016f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f0c:	9302      	str	r3, [sp, #8]
 8016f0e:	f107 0314 	add.w	r3, r7, #20
 8016f12:	9301      	str	r3, [sp, #4]
 8016f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f16:	9300      	str	r3, [sp, #0]
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	687a      	ldr	r2, [r7, #4]
 8016f1c:	68b9      	ldr	r1, [r7, #8]
 8016f1e:	68f8      	ldr	r0, [r7, #12]
 8016f20:	f000 f850 	bl	8016fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f26:	f000 f8f7 	bl	8017118 <prvAddNewTaskToReadyList>
 8016f2a:	e001      	b.n	8016f30 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016f2c:	2300      	movs	r3, #0
 8016f2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016f30:	697b      	ldr	r3, [r7, #20]
	}
 8016f32:	4618      	mov	r0, r3
 8016f34:	3728      	adds	r7, #40	; 0x28
 8016f36:	46bd      	mov	sp, r7
 8016f38:	bd80      	pop	{r7, pc}

08016f3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016f3a:	b580      	push	{r7, lr}
 8016f3c:	b08c      	sub	sp, #48	; 0x30
 8016f3e:	af04      	add	r7, sp, #16
 8016f40:	60f8      	str	r0, [r7, #12]
 8016f42:	60b9      	str	r1, [r7, #8]
 8016f44:	603b      	str	r3, [r7, #0]
 8016f46:	4613      	mov	r3, r2
 8016f48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016f4a:	88fb      	ldrh	r3, [r7, #6]
 8016f4c:	009b      	lsls	r3, r3, #2
 8016f4e:	4618      	mov	r0, r3
 8016f50:	f002 f88a 	bl	8019068 <pvPortMalloc>
 8016f54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016f56:	697b      	ldr	r3, [r7, #20]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d00e      	beq.n	8016f7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016f5c:	20c0      	movs	r0, #192	; 0xc0
 8016f5e:	f002 f883 	bl	8019068 <pvPortMalloc>
 8016f62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016f64:	69fb      	ldr	r3, [r7, #28]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d003      	beq.n	8016f72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016f6a:	69fb      	ldr	r3, [r7, #28]
 8016f6c:	697a      	ldr	r2, [r7, #20]
 8016f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8016f70:	e005      	b.n	8016f7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016f72:	6978      	ldr	r0, [r7, #20]
 8016f74:	f002 f944 	bl	8019200 <vPortFree>
 8016f78:	e001      	b.n	8016f7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016f7e:	69fb      	ldr	r3, [r7, #28]
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d017      	beq.n	8016fb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016f84:	69fb      	ldr	r3, [r7, #28]
 8016f86:	2200      	movs	r2, #0
 8016f88:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016f8c:	88fa      	ldrh	r2, [r7, #6]
 8016f8e:	2300      	movs	r3, #0
 8016f90:	9303      	str	r3, [sp, #12]
 8016f92:	69fb      	ldr	r3, [r7, #28]
 8016f94:	9302      	str	r3, [sp, #8]
 8016f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f98:	9301      	str	r3, [sp, #4]
 8016f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f9c:	9300      	str	r3, [sp, #0]
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	68b9      	ldr	r1, [r7, #8]
 8016fa2:	68f8      	ldr	r0, [r7, #12]
 8016fa4:	f000 f80e 	bl	8016fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016fa8:	69f8      	ldr	r0, [r7, #28]
 8016faa:	f000 f8b5 	bl	8017118 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016fae:	2301      	movs	r3, #1
 8016fb0:	61bb      	str	r3, [r7, #24]
 8016fb2:	e002      	b.n	8016fba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016fb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016fba:	69bb      	ldr	r3, [r7, #24]
	}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	3720      	adds	r7, #32
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	bd80      	pop	{r7, pc}

08016fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b088      	sub	sp, #32
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	60f8      	str	r0, [r7, #12]
 8016fcc:	60b9      	str	r1, [r7, #8]
 8016fce:	607a      	str	r2, [r7, #4]
 8016fd0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	009b      	lsls	r3, r3, #2
 8016fda:	461a      	mov	r2, r3
 8016fdc:	21a5      	movs	r1, #165	; 0xa5
 8016fde:	f003 f8bd 	bl	801a15c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016fec:	3b01      	subs	r3, #1
 8016fee:	009b      	lsls	r3, r3, #2
 8016ff0:	4413      	add	r3, r2
 8016ff2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016ff4:	69bb      	ldr	r3, [r7, #24]
 8016ff6:	f023 0307 	bic.w	r3, r3, #7
 8016ffa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016ffc:	69bb      	ldr	r3, [r7, #24]
 8016ffe:	f003 0307 	and.w	r3, r3, #7
 8017002:	2b00      	cmp	r3, #0
 8017004:	d00a      	beq.n	801701c <prvInitialiseNewTask+0x58>
	__asm volatile
 8017006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801700a:	f383 8811 	msr	BASEPRI, r3
 801700e:	f3bf 8f6f 	isb	sy
 8017012:	f3bf 8f4f 	dsb	sy
 8017016:	617b      	str	r3, [r7, #20]
}
 8017018:	bf00      	nop
 801701a:	e7fe      	b.n	801701a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801701c:	68bb      	ldr	r3, [r7, #8]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d01f      	beq.n	8017062 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017022:	2300      	movs	r3, #0
 8017024:	61fb      	str	r3, [r7, #28]
 8017026:	e012      	b.n	801704e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017028:	68ba      	ldr	r2, [r7, #8]
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	4413      	add	r3, r2
 801702e:	7819      	ldrb	r1, [r3, #0]
 8017030:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017032:	69fb      	ldr	r3, [r7, #28]
 8017034:	4413      	add	r3, r2
 8017036:	3334      	adds	r3, #52	; 0x34
 8017038:	460a      	mov	r2, r1
 801703a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801703c:	68ba      	ldr	r2, [r7, #8]
 801703e:	69fb      	ldr	r3, [r7, #28]
 8017040:	4413      	add	r3, r2
 8017042:	781b      	ldrb	r3, [r3, #0]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d006      	beq.n	8017056 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017048:	69fb      	ldr	r3, [r7, #28]
 801704a:	3301      	adds	r3, #1
 801704c:	61fb      	str	r3, [r7, #28]
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	2b0f      	cmp	r3, #15
 8017052:	d9e9      	bls.n	8017028 <prvInitialiseNewTask+0x64>
 8017054:	e000      	b.n	8017058 <prvInitialiseNewTask+0x94>
			{
				break;
 8017056:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801705a:	2200      	movs	r2, #0
 801705c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017060:	e003      	b.n	801706a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017064:	2200      	movs	r2, #0
 8017066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801706c:	2b37      	cmp	r3, #55	; 0x37
 801706e:	d901      	bls.n	8017074 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017070:	2337      	movs	r3, #55	; 0x37
 8017072:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017076:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017078:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801707a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801707c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801707e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017082:	2200      	movs	r2, #0
 8017084:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017088:	3304      	adds	r3, #4
 801708a:	4618      	mov	r0, r3
 801708c:	f7fe fe56 	bl	8015d3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017092:	3318      	adds	r3, #24
 8017094:	4618      	mov	r0, r3
 8017096:	f7fe fe51 	bl	8015d3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801709a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801709e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80170a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80170aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80170b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b2:	2200      	movs	r2, #0
 80170b4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80170b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170b8:	2200      	movs	r2, #0
 80170ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80170be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c0:	2200      	movs	r2, #0
 80170c2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80170c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170c8:	3358      	adds	r3, #88	; 0x58
 80170ca:	2260      	movs	r2, #96	; 0x60
 80170cc:	2100      	movs	r1, #0
 80170ce:	4618      	mov	r0, r3
 80170d0:	f003 f844 	bl	801a15c <memset>
 80170d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170d6:	4a0d      	ldr	r2, [pc, #52]	; (801710c <prvInitialiseNewTask+0x148>)
 80170d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80170da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170dc:	4a0c      	ldr	r2, [pc, #48]	; (8017110 <prvInitialiseNewTask+0x14c>)
 80170de:	661a      	str	r2, [r3, #96]	; 0x60
 80170e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e2:	4a0c      	ldr	r2, [pc, #48]	; (8017114 <prvInitialiseNewTask+0x150>)
 80170e4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80170e6:	683a      	ldr	r2, [r7, #0]
 80170e8:	68f9      	ldr	r1, [r7, #12]
 80170ea:	69b8      	ldr	r0, [r7, #24]
 80170ec:	f001 fd6c 	bl	8018bc8 <pxPortInitialiseStack>
 80170f0:	4602      	mov	r2, r0
 80170f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80170f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d002      	beq.n	8017102 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80170fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80170fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017100:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017102:	bf00      	nop
 8017104:	3720      	adds	r7, #32
 8017106:	46bd      	mov	sp, r7
 8017108:	bd80      	pop	{r7, pc}
 801710a:	bf00      	nop
 801710c:	080220f8 	.word	0x080220f8
 8017110:	08022118 	.word	0x08022118
 8017114:	080220d8 	.word	0x080220d8

08017118 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017120:	f001 fe80 	bl	8018e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017124:	4b2d      	ldr	r3, [pc, #180]	; (80171dc <prvAddNewTaskToReadyList+0xc4>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	3301      	adds	r3, #1
 801712a:	4a2c      	ldr	r2, [pc, #176]	; (80171dc <prvAddNewTaskToReadyList+0xc4>)
 801712c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801712e:	4b2c      	ldr	r3, [pc, #176]	; (80171e0 <prvAddNewTaskToReadyList+0xc8>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	2b00      	cmp	r3, #0
 8017134:	d109      	bne.n	801714a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017136:	4a2a      	ldr	r2, [pc, #168]	; (80171e0 <prvAddNewTaskToReadyList+0xc8>)
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801713c:	4b27      	ldr	r3, [pc, #156]	; (80171dc <prvAddNewTaskToReadyList+0xc4>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2b01      	cmp	r3, #1
 8017142:	d110      	bne.n	8017166 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017144:	f000 fd3e 	bl	8017bc4 <prvInitialiseTaskLists>
 8017148:	e00d      	b.n	8017166 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801714a:	4b26      	ldr	r3, [pc, #152]	; (80171e4 <prvAddNewTaskToReadyList+0xcc>)
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d109      	bne.n	8017166 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017152:	4b23      	ldr	r3, [pc, #140]	; (80171e0 <prvAddNewTaskToReadyList+0xc8>)
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801715c:	429a      	cmp	r2, r3
 801715e:	d802      	bhi.n	8017166 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017160:	4a1f      	ldr	r2, [pc, #124]	; (80171e0 <prvAddNewTaskToReadyList+0xc8>)
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017166:	4b20      	ldr	r3, [pc, #128]	; (80171e8 <prvAddNewTaskToReadyList+0xd0>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	3301      	adds	r3, #1
 801716c:	4a1e      	ldr	r2, [pc, #120]	; (80171e8 <prvAddNewTaskToReadyList+0xd0>)
 801716e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017170:	4b1d      	ldr	r3, [pc, #116]	; (80171e8 <prvAddNewTaskToReadyList+0xd0>)
 8017172:	681a      	ldr	r2, [r3, #0]
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801717c:	4b1b      	ldr	r3, [pc, #108]	; (80171ec <prvAddNewTaskToReadyList+0xd4>)
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	429a      	cmp	r2, r3
 8017182:	d903      	bls.n	801718c <prvAddNewTaskToReadyList+0x74>
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017188:	4a18      	ldr	r2, [pc, #96]	; (80171ec <prvAddNewTaskToReadyList+0xd4>)
 801718a:	6013      	str	r3, [r2, #0]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017190:	4613      	mov	r3, r2
 8017192:	009b      	lsls	r3, r3, #2
 8017194:	4413      	add	r3, r2
 8017196:	009b      	lsls	r3, r3, #2
 8017198:	4a15      	ldr	r2, [pc, #84]	; (80171f0 <prvAddNewTaskToReadyList+0xd8>)
 801719a:	441a      	add	r2, r3
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	3304      	adds	r3, #4
 80171a0:	4619      	mov	r1, r3
 80171a2:	4610      	mov	r0, r2
 80171a4:	f7fe fdd7 	bl	8015d56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80171a8:	f001 fe6c 	bl	8018e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80171ac:	4b0d      	ldr	r3, [pc, #52]	; (80171e4 <prvAddNewTaskToReadyList+0xcc>)
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d00e      	beq.n	80171d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80171b4:	4b0a      	ldr	r3, [pc, #40]	; (80171e0 <prvAddNewTaskToReadyList+0xc8>)
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171be:	429a      	cmp	r2, r3
 80171c0:	d207      	bcs.n	80171d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80171c2:	4b0c      	ldr	r3, [pc, #48]	; (80171f4 <prvAddNewTaskToReadyList+0xdc>)
 80171c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80171c8:	601a      	str	r2, [r3, #0]
 80171ca:	f3bf 8f4f 	dsb	sy
 80171ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80171d2:	bf00      	nop
 80171d4:	3708      	adds	r7, #8
 80171d6:	46bd      	mov	sp, r7
 80171d8:	bd80      	pop	{r7, pc}
 80171da:	bf00      	nop
 80171dc:	200034e4 	.word	0x200034e4
 80171e0:	20003010 	.word	0x20003010
 80171e4:	200034f0 	.word	0x200034f0
 80171e8:	20003500 	.word	0x20003500
 80171ec:	200034ec 	.word	0x200034ec
 80171f0:	20003014 	.word	0x20003014
 80171f4:	e000ed04 	.word	0xe000ed04

080171f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017200:	2300      	movs	r3, #0
 8017202:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	2b00      	cmp	r3, #0
 8017208:	d017      	beq.n	801723a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801720a:	4b13      	ldr	r3, [pc, #76]	; (8017258 <vTaskDelay+0x60>)
 801720c:	681b      	ldr	r3, [r3, #0]
 801720e:	2b00      	cmp	r3, #0
 8017210:	d00a      	beq.n	8017228 <vTaskDelay+0x30>
	__asm volatile
 8017212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017216:	f383 8811 	msr	BASEPRI, r3
 801721a:	f3bf 8f6f 	isb	sy
 801721e:	f3bf 8f4f 	dsb	sy
 8017222:	60bb      	str	r3, [r7, #8]
}
 8017224:	bf00      	nop
 8017226:	e7fe      	b.n	8017226 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017228:	f000 f8f4 	bl	8017414 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801722c:	2100      	movs	r1, #0
 801722e:	6878      	ldr	r0, [r7, #4]
 8017230:	f001 f928 	bl	8018484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017234:	f000 f8fc 	bl	8017430 <xTaskResumeAll>
 8017238:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d107      	bne.n	8017250 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8017240:	4b06      	ldr	r3, [pc, #24]	; (801725c <vTaskDelay+0x64>)
 8017242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017246:	601a      	str	r2, [r3, #0]
 8017248:	f3bf 8f4f 	dsb	sy
 801724c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017250:	bf00      	nop
 8017252:	3710      	adds	r7, #16
 8017254:	46bd      	mov	sp, r7
 8017256:	bd80      	pop	{r7, pc}
 8017258:	2000350c 	.word	0x2000350c
 801725c:	e000ed04 	.word	0xe000ed04

08017260 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8017260:	b580      	push	{r7, lr}
 8017262:	b088      	sub	sp, #32
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801726c:	69bb      	ldr	r3, [r7, #24]
 801726e:	2b00      	cmp	r3, #0
 8017270:	d10a      	bne.n	8017288 <eTaskGetState+0x28>
	__asm volatile
 8017272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017276:	f383 8811 	msr	BASEPRI, r3
 801727a:	f3bf 8f6f 	isb	sy
 801727e:	f3bf 8f4f 	dsb	sy
 8017282:	60bb      	str	r3, [r7, #8]
}
 8017284:	bf00      	nop
 8017286:	e7fe      	b.n	8017286 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8017288:	4b23      	ldr	r3, [pc, #140]	; (8017318 <eTaskGetState+0xb8>)
 801728a:	681b      	ldr	r3, [r3, #0]
 801728c:	69ba      	ldr	r2, [r7, #24]
 801728e:	429a      	cmp	r2, r3
 8017290:	d102      	bne.n	8017298 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8017292:	2300      	movs	r3, #0
 8017294:	77fb      	strb	r3, [r7, #31]
 8017296:	e03a      	b.n	801730e <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8017298:	f001 fdc4 	bl	8018e24 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801729c:	69bb      	ldr	r3, [r7, #24]
 801729e:	695b      	ldr	r3, [r3, #20]
 80172a0:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80172a2:	4b1e      	ldr	r3, [pc, #120]	; (801731c <eTaskGetState+0xbc>)
 80172a4:	681b      	ldr	r3, [r3, #0]
 80172a6:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80172a8:	4b1d      	ldr	r3, [pc, #116]	; (8017320 <eTaskGetState+0xc0>)
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80172ae:	f001 fde9 	bl	8018e84 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80172b2:	697a      	ldr	r2, [r7, #20]
 80172b4:	693b      	ldr	r3, [r7, #16]
 80172b6:	429a      	cmp	r2, r3
 80172b8:	d003      	beq.n	80172c2 <eTaskGetState+0x62>
 80172ba:	697a      	ldr	r2, [r7, #20]
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	429a      	cmp	r2, r3
 80172c0:	d102      	bne.n	80172c8 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80172c2:	2302      	movs	r3, #2
 80172c4:	77fb      	strb	r3, [r7, #31]
 80172c6:	e022      	b.n	801730e <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80172c8:	697b      	ldr	r3, [r7, #20]
 80172ca:	4a16      	ldr	r2, [pc, #88]	; (8017324 <eTaskGetState+0xc4>)
 80172cc:	4293      	cmp	r3, r2
 80172ce:	d112      	bne.n	80172f6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80172d0:	69bb      	ldr	r3, [r7, #24]
 80172d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d10b      	bne.n	80172f0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80172d8:	69bb      	ldr	r3, [r7, #24]
 80172da:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80172de:	b2db      	uxtb	r3, r3
 80172e0:	2b01      	cmp	r3, #1
 80172e2:	d102      	bne.n	80172ea <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80172e4:	2302      	movs	r3, #2
 80172e6:	77fb      	strb	r3, [r7, #31]
 80172e8:	e011      	b.n	801730e <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80172ea:	2303      	movs	r3, #3
 80172ec:	77fb      	strb	r3, [r7, #31]
 80172ee:	e00e      	b.n	801730e <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80172f0:	2302      	movs	r3, #2
 80172f2:	77fb      	strb	r3, [r7, #31]
 80172f4:	e00b      	b.n	801730e <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	4a0b      	ldr	r2, [pc, #44]	; (8017328 <eTaskGetState+0xc8>)
 80172fa:	4293      	cmp	r3, r2
 80172fc:	d002      	beq.n	8017304 <eTaskGetState+0xa4>
 80172fe:	697b      	ldr	r3, [r7, #20]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d102      	bne.n	801730a <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8017304:	2304      	movs	r3, #4
 8017306:	77fb      	strb	r3, [r7, #31]
 8017308:	e001      	b.n	801730e <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 801730a:	2301      	movs	r3, #1
 801730c:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 801730e:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8017310:	4618      	mov	r0, r3
 8017312:	3720      	adds	r7, #32
 8017314:	46bd      	mov	sp, r7
 8017316:	bd80      	pop	{r7, pc}
 8017318:	20003010 	.word	0x20003010
 801731c:	2000349c 	.word	0x2000349c
 8017320:	200034a0 	.word	0x200034a0
 8017324:	200034d0 	.word	0x200034d0
 8017328:	200034b8 	.word	0x200034b8

0801732c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b08a      	sub	sp, #40	; 0x28
 8017330:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017332:	2300      	movs	r3, #0
 8017334:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017336:	2300      	movs	r3, #0
 8017338:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801733a:	463a      	mov	r2, r7
 801733c:	1d39      	adds	r1, r7, #4
 801733e:	f107 0308 	add.w	r3, r7, #8
 8017342:	4618      	mov	r0, r3
 8017344:	f7fe fca6 	bl	8015c94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017348:	6839      	ldr	r1, [r7, #0]
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	68ba      	ldr	r2, [r7, #8]
 801734e:	9202      	str	r2, [sp, #8]
 8017350:	9301      	str	r3, [sp, #4]
 8017352:	2300      	movs	r3, #0
 8017354:	9300      	str	r3, [sp, #0]
 8017356:	2300      	movs	r3, #0
 8017358:	460a      	mov	r2, r1
 801735a:	4925      	ldr	r1, [pc, #148]	; (80173f0 <vTaskStartScheduler+0xc4>)
 801735c:	4825      	ldr	r0, [pc, #148]	; (80173f4 <vTaskStartScheduler+0xc8>)
 801735e:	f7ff fd8f 	bl	8016e80 <xTaskCreateStatic>
 8017362:	4603      	mov	r3, r0
 8017364:	4a24      	ldr	r2, [pc, #144]	; (80173f8 <vTaskStartScheduler+0xcc>)
 8017366:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017368:	4b23      	ldr	r3, [pc, #140]	; (80173f8 <vTaskStartScheduler+0xcc>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d002      	beq.n	8017376 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017370:	2301      	movs	r3, #1
 8017372:	617b      	str	r3, [r7, #20]
 8017374:	e001      	b.n	801737a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017376:	2300      	movs	r3, #0
 8017378:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801737a:	697b      	ldr	r3, [r7, #20]
 801737c:	2b01      	cmp	r3, #1
 801737e:	d102      	bne.n	8017386 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017380:	f001 f8d4 	bl	801852c <xTimerCreateTimerTask>
 8017384:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017386:	697b      	ldr	r3, [r7, #20]
 8017388:	2b01      	cmp	r3, #1
 801738a:	d11e      	bne.n	80173ca <vTaskStartScheduler+0x9e>
	__asm volatile
 801738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017390:	f383 8811 	msr	BASEPRI, r3
 8017394:	f3bf 8f6f 	isb	sy
 8017398:	f3bf 8f4f 	dsb	sy
 801739c:	613b      	str	r3, [r7, #16]
}
 801739e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80173a0:	4b16      	ldr	r3, [pc, #88]	; (80173fc <vTaskStartScheduler+0xd0>)
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	3358      	adds	r3, #88	; 0x58
 80173a6:	4a16      	ldr	r2, [pc, #88]	; (8017400 <vTaskStartScheduler+0xd4>)
 80173a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80173aa:	4b16      	ldr	r3, [pc, #88]	; (8017404 <vTaskStartScheduler+0xd8>)
 80173ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80173b2:	4b15      	ldr	r3, [pc, #84]	; (8017408 <vTaskStartScheduler+0xdc>)
 80173b4:	2201      	movs	r2, #1
 80173b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80173b8:	4b14      	ldr	r3, [pc, #80]	; (801740c <vTaskStartScheduler+0xe0>)
 80173ba:	2200      	movs	r2, #0
 80173bc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80173be:	4b14      	ldr	r3, [pc, #80]	; (8017410 <vTaskStartScheduler+0xe4>)
 80173c0:	2200      	movs	r2, #0
 80173c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80173c4:	f001 fc8c 	bl	8018ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80173c8:	e00e      	b.n	80173e8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80173ca:	697b      	ldr	r3, [r7, #20]
 80173cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80173d0:	d10a      	bne.n	80173e8 <vTaskStartScheduler+0xbc>
	__asm volatile
 80173d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173d6:	f383 8811 	msr	BASEPRI, r3
 80173da:	f3bf 8f6f 	isb	sy
 80173de:	f3bf 8f4f 	dsb	sy
 80173e2:	60fb      	str	r3, [r7, #12]
}
 80173e4:	bf00      	nop
 80173e6:	e7fe      	b.n	80173e6 <vTaskStartScheduler+0xba>
}
 80173e8:	bf00      	nop
 80173ea:	3718      	adds	r7, #24
 80173ec:	46bd      	mov	sp, r7
 80173ee:	bd80      	pop	{r7, pc}
 80173f0:	0801dca4 	.word	0x0801dca4
 80173f4:	08017b95 	.word	0x08017b95
 80173f8:	20003508 	.word	0x20003508
 80173fc:	20003010 	.word	0x20003010
 8017400:	20000260 	.word	0x20000260
 8017404:	20003504 	.word	0x20003504
 8017408:	200034f0 	.word	0x200034f0
 801740c:	200034e8 	.word	0x200034e8
 8017410:	20011658 	.word	0x20011658

08017414 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017414:	b480      	push	{r7}
 8017416:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017418:	4b04      	ldr	r3, [pc, #16]	; (801742c <vTaskSuspendAll+0x18>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	3301      	adds	r3, #1
 801741e:	4a03      	ldr	r2, [pc, #12]	; (801742c <vTaskSuspendAll+0x18>)
 8017420:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8017422:	bf00      	nop
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr
 801742c:	2000350c 	.word	0x2000350c

08017430 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b084      	sub	sp, #16
 8017434:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017436:	2300      	movs	r3, #0
 8017438:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801743a:	2300      	movs	r3, #0
 801743c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801743e:	4b42      	ldr	r3, [pc, #264]	; (8017548 <xTaskResumeAll+0x118>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d10a      	bne.n	801745c <xTaskResumeAll+0x2c>
	__asm volatile
 8017446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801744a:	f383 8811 	msr	BASEPRI, r3
 801744e:	f3bf 8f6f 	isb	sy
 8017452:	f3bf 8f4f 	dsb	sy
 8017456:	603b      	str	r3, [r7, #0]
}
 8017458:	bf00      	nop
 801745a:	e7fe      	b.n	801745a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801745c:	f001 fce2 	bl	8018e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017460:	4b39      	ldr	r3, [pc, #228]	; (8017548 <xTaskResumeAll+0x118>)
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	3b01      	subs	r3, #1
 8017466:	4a38      	ldr	r2, [pc, #224]	; (8017548 <xTaskResumeAll+0x118>)
 8017468:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801746a:	4b37      	ldr	r3, [pc, #220]	; (8017548 <xTaskResumeAll+0x118>)
 801746c:	681b      	ldr	r3, [r3, #0]
 801746e:	2b00      	cmp	r3, #0
 8017470:	d162      	bne.n	8017538 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017472:	4b36      	ldr	r3, [pc, #216]	; (801754c <xTaskResumeAll+0x11c>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d05e      	beq.n	8017538 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801747a:	e02f      	b.n	80174dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801747c:	4b34      	ldr	r3, [pc, #208]	; (8017550 <xTaskResumeAll+0x120>)
 801747e:	68db      	ldr	r3, [r3, #12]
 8017480:	68db      	ldr	r3, [r3, #12]
 8017482:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017484:	68fb      	ldr	r3, [r7, #12]
 8017486:	3318      	adds	r3, #24
 8017488:	4618      	mov	r0, r3
 801748a:	f7fe fcc1 	bl	8015e10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	3304      	adds	r3, #4
 8017492:	4618      	mov	r0, r3
 8017494:	f7fe fcbc 	bl	8015e10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801749c:	4b2d      	ldr	r3, [pc, #180]	; (8017554 <xTaskResumeAll+0x124>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	429a      	cmp	r2, r3
 80174a2:	d903      	bls.n	80174ac <xTaskResumeAll+0x7c>
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174a8:	4a2a      	ldr	r2, [pc, #168]	; (8017554 <xTaskResumeAll+0x124>)
 80174aa:	6013      	str	r3, [r2, #0]
 80174ac:	68fb      	ldr	r3, [r7, #12]
 80174ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174b0:	4613      	mov	r3, r2
 80174b2:	009b      	lsls	r3, r3, #2
 80174b4:	4413      	add	r3, r2
 80174b6:	009b      	lsls	r3, r3, #2
 80174b8:	4a27      	ldr	r2, [pc, #156]	; (8017558 <xTaskResumeAll+0x128>)
 80174ba:	441a      	add	r2, r3
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	3304      	adds	r3, #4
 80174c0:	4619      	mov	r1, r3
 80174c2:	4610      	mov	r0, r2
 80174c4:	f7fe fc47 	bl	8015d56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174cc:	4b23      	ldr	r3, [pc, #140]	; (801755c <xTaskResumeAll+0x12c>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174d2:	429a      	cmp	r2, r3
 80174d4:	d302      	bcc.n	80174dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80174d6:	4b22      	ldr	r3, [pc, #136]	; (8017560 <xTaskResumeAll+0x130>)
 80174d8:	2201      	movs	r2, #1
 80174da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80174dc:	4b1c      	ldr	r3, [pc, #112]	; (8017550 <xTaskResumeAll+0x120>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d1cb      	bne.n	801747c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80174e4:	68fb      	ldr	r3, [r7, #12]
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d001      	beq.n	80174ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80174ea:	f000 fce1 	bl	8017eb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80174ee:	4b1d      	ldr	r3, [pc, #116]	; (8017564 <xTaskResumeAll+0x134>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	2b00      	cmp	r3, #0
 80174f8:	d010      	beq.n	801751c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80174fa:	f000 f8d7 	bl	80176ac <xTaskIncrementTick>
 80174fe:	4603      	mov	r3, r0
 8017500:	2b00      	cmp	r3, #0
 8017502:	d002      	beq.n	801750a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8017504:	4b16      	ldr	r3, [pc, #88]	; (8017560 <xTaskResumeAll+0x130>)
 8017506:	2201      	movs	r2, #1
 8017508:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	3b01      	subs	r3, #1
 801750e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d1f1      	bne.n	80174fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8017516:	4b13      	ldr	r3, [pc, #76]	; (8017564 <xTaskResumeAll+0x134>)
 8017518:	2200      	movs	r2, #0
 801751a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801751c:	4b10      	ldr	r3, [pc, #64]	; (8017560 <xTaskResumeAll+0x130>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	2b00      	cmp	r3, #0
 8017522:	d009      	beq.n	8017538 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8017524:	2301      	movs	r3, #1
 8017526:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017528:	4b0f      	ldr	r3, [pc, #60]	; (8017568 <xTaskResumeAll+0x138>)
 801752a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801752e:	601a      	str	r2, [r3, #0]
 8017530:	f3bf 8f4f 	dsb	sy
 8017534:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017538:	f001 fca4 	bl	8018e84 <vPortExitCritical>

	return xAlreadyYielded;
 801753c:	68bb      	ldr	r3, [r7, #8]
}
 801753e:	4618      	mov	r0, r3
 8017540:	3710      	adds	r7, #16
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	2000350c 	.word	0x2000350c
 801754c:	200034e4 	.word	0x200034e4
 8017550:	200034a4 	.word	0x200034a4
 8017554:	200034ec 	.word	0x200034ec
 8017558:	20003014 	.word	0x20003014
 801755c:	20003010 	.word	0x20003010
 8017560:	200034f8 	.word	0x200034f8
 8017564:	200034f4 	.word	0x200034f4
 8017568:	e000ed04 	.word	0xe000ed04

0801756c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801756c:	b480      	push	{r7}
 801756e:	b083      	sub	sp, #12
 8017570:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017572:	4b05      	ldr	r3, [pc, #20]	; (8017588 <xTaskGetTickCount+0x1c>)
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017578:	687b      	ldr	r3, [r7, #4]
}
 801757a:	4618      	mov	r0, r3
 801757c:	370c      	adds	r7, #12
 801757e:	46bd      	mov	sp, r7
 8017580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017584:	4770      	bx	lr
 8017586:	bf00      	nop
 8017588:	200034e8 	.word	0x200034e8

0801758c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 801758c:	b580      	push	{r7, lr}
 801758e:	b086      	sub	sp, #24
 8017590:	af00      	add	r7, sp, #0
 8017592:	60f8      	str	r0, [r7, #12]
 8017594:	60b9      	str	r1, [r7, #8]
 8017596:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8017598:	2300      	movs	r3, #0
 801759a:	617b      	str	r3, [r7, #20]
 801759c:	2338      	movs	r3, #56	; 0x38
 801759e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 80175a0:	f7ff ff38 	bl	8017414 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 80175a4:	4b3a      	ldr	r3, [pc, #232]	; (8017690 <uxTaskGetSystemState+0x104>)
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	68ba      	ldr	r2, [r7, #8]
 80175aa:	429a      	cmp	r2, r3
 80175ac:	d369      	bcc.n	8017682 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	3b01      	subs	r3, #1
 80175b2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 80175b4:	697a      	ldr	r2, [r7, #20]
 80175b6:	4613      	mov	r3, r2
 80175b8:	00db      	lsls	r3, r3, #3
 80175ba:	4413      	add	r3, r2
 80175bc:	009b      	lsls	r3, r3, #2
 80175be:	461a      	mov	r2, r3
 80175c0:	68fb      	ldr	r3, [r7, #12]
 80175c2:	1898      	adds	r0, r3, r2
 80175c4:	693a      	ldr	r2, [r7, #16]
 80175c6:	4613      	mov	r3, r2
 80175c8:	009b      	lsls	r3, r3, #2
 80175ca:	4413      	add	r3, r2
 80175cc:	009b      	lsls	r3, r3, #2
 80175ce:	4a31      	ldr	r2, [pc, #196]	; (8017694 <uxTaskGetSystemState+0x108>)
 80175d0:	4413      	add	r3, r2
 80175d2:	2201      	movs	r2, #1
 80175d4:	4619      	mov	r1, r3
 80175d6:	f000 fbc9 	bl	8017d6c <prvListTasksWithinSingleList>
 80175da:	4602      	mov	r2, r0
 80175dc:	697b      	ldr	r3, [r7, #20]
 80175de:	4413      	add	r3, r2
 80175e0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80175e2:	693b      	ldr	r3, [r7, #16]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d1e2      	bne.n	80175ae <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 80175e8:	697a      	ldr	r2, [r7, #20]
 80175ea:	4613      	mov	r3, r2
 80175ec:	00db      	lsls	r3, r3, #3
 80175ee:	4413      	add	r3, r2
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	461a      	mov	r2, r3
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	4413      	add	r3, r2
 80175f8:	4a27      	ldr	r2, [pc, #156]	; (8017698 <uxTaskGetSystemState+0x10c>)
 80175fa:	6811      	ldr	r1, [r2, #0]
 80175fc:	2202      	movs	r2, #2
 80175fe:	4618      	mov	r0, r3
 8017600:	f000 fbb4 	bl	8017d6c <prvListTasksWithinSingleList>
 8017604:	4602      	mov	r2, r0
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	4413      	add	r3, r2
 801760a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 801760c:	697a      	ldr	r2, [r7, #20]
 801760e:	4613      	mov	r3, r2
 8017610:	00db      	lsls	r3, r3, #3
 8017612:	4413      	add	r3, r2
 8017614:	009b      	lsls	r3, r3, #2
 8017616:	461a      	mov	r2, r3
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	4413      	add	r3, r2
 801761c:	4a1f      	ldr	r2, [pc, #124]	; (801769c <uxTaskGetSystemState+0x110>)
 801761e:	6811      	ldr	r1, [r2, #0]
 8017620:	2202      	movs	r2, #2
 8017622:	4618      	mov	r0, r3
 8017624:	f000 fba2 	bl	8017d6c <prvListTasksWithinSingleList>
 8017628:	4602      	mov	r2, r0
 801762a:	697b      	ldr	r3, [r7, #20]
 801762c:	4413      	add	r3, r2
 801762e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8017630:	697a      	ldr	r2, [r7, #20]
 8017632:	4613      	mov	r3, r2
 8017634:	00db      	lsls	r3, r3, #3
 8017636:	4413      	add	r3, r2
 8017638:	009b      	lsls	r3, r3, #2
 801763a:	461a      	mov	r2, r3
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	4413      	add	r3, r2
 8017640:	2204      	movs	r2, #4
 8017642:	4917      	ldr	r1, [pc, #92]	; (80176a0 <uxTaskGetSystemState+0x114>)
 8017644:	4618      	mov	r0, r3
 8017646:	f000 fb91 	bl	8017d6c <prvListTasksWithinSingleList>
 801764a:	4602      	mov	r2, r0
 801764c:	697b      	ldr	r3, [r7, #20]
 801764e:	4413      	add	r3, r2
 8017650:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8017652:	697a      	ldr	r2, [r7, #20]
 8017654:	4613      	mov	r3, r2
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	4413      	add	r3, r2
 801765a:	009b      	lsls	r3, r3, #2
 801765c:	461a      	mov	r2, r3
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	4413      	add	r3, r2
 8017662:	2203      	movs	r2, #3
 8017664:	490f      	ldr	r1, [pc, #60]	; (80176a4 <uxTaskGetSystemState+0x118>)
 8017666:	4618      	mov	r0, r3
 8017668:	f000 fb80 	bl	8017d6c <prvListTasksWithinSingleList>
 801766c:	4602      	mov	r2, r0
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	4413      	add	r3, r2
 8017672:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d003      	beq.n	8017682 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801767a:	4b0b      	ldr	r3, [pc, #44]	; (80176a8 <uxTaskGetSystemState+0x11c>)
 801767c:	681a      	ldr	r2, [r3, #0]
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8017682:	f7ff fed5 	bl	8017430 <xTaskResumeAll>

		return uxTask;
 8017686:	697b      	ldr	r3, [r7, #20]
	}
 8017688:	4618      	mov	r0, r3
 801768a:	3718      	adds	r7, #24
 801768c:	46bd      	mov	sp, r7
 801768e:	bd80      	pop	{r7, pc}
 8017690:	200034e4 	.word	0x200034e4
 8017694:	20003014 	.word	0x20003014
 8017698:	2000349c 	.word	0x2000349c
 801769c:	200034a0 	.word	0x200034a0
 80176a0:	200034b8 	.word	0x200034b8
 80176a4:	200034d0 	.word	0x200034d0
 80176a8:	20011658 	.word	0x20011658

080176ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b086      	sub	sp, #24
 80176b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80176b2:	2300      	movs	r3, #0
 80176b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80176b6:	4b4f      	ldr	r3, [pc, #316]	; (80177f4 <xTaskIncrementTick+0x148>)
 80176b8:	681b      	ldr	r3, [r3, #0]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	f040 808f 	bne.w	80177de <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80176c0:	4b4d      	ldr	r3, [pc, #308]	; (80177f8 <xTaskIncrementTick+0x14c>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	3301      	adds	r3, #1
 80176c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80176c8:	4a4b      	ldr	r2, [pc, #300]	; (80177f8 <xTaskIncrementTick+0x14c>)
 80176ca:	693b      	ldr	r3, [r7, #16]
 80176cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d120      	bne.n	8017716 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80176d4:	4b49      	ldr	r3, [pc, #292]	; (80177fc <xTaskIncrementTick+0x150>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	681b      	ldr	r3, [r3, #0]
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d00a      	beq.n	80176f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80176de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e2:	f383 8811 	msr	BASEPRI, r3
 80176e6:	f3bf 8f6f 	isb	sy
 80176ea:	f3bf 8f4f 	dsb	sy
 80176ee:	603b      	str	r3, [r7, #0]
}
 80176f0:	bf00      	nop
 80176f2:	e7fe      	b.n	80176f2 <xTaskIncrementTick+0x46>
 80176f4:	4b41      	ldr	r3, [pc, #260]	; (80177fc <xTaskIncrementTick+0x150>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	60fb      	str	r3, [r7, #12]
 80176fa:	4b41      	ldr	r3, [pc, #260]	; (8017800 <xTaskIncrementTick+0x154>)
 80176fc:	681b      	ldr	r3, [r3, #0]
 80176fe:	4a3f      	ldr	r2, [pc, #252]	; (80177fc <xTaskIncrementTick+0x150>)
 8017700:	6013      	str	r3, [r2, #0]
 8017702:	4a3f      	ldr	r2, [pc, #252]	; (8017800 <xTaskIncrementTick+0x154>)
 8017704:	68fb      	ldr	r3, [r7, #12]
 8017706:	6013      	str	r3, [r2, #0]
 8017708:	4b3e      	ldr	r3, [pc, #248]	; (8017804 <xTaskIncrementTick+0x158>)
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	3301      	adds	r3, #1
 801770e:	4a3d      	ldr	r2, [pc, #244]	; (8017804 <xTaskIncrementTick+0x158>)
 8017710:	6013      	str	r3, [r2, #0]
 8017712:	f000 fbcd 	bl	8017eb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8017716:	4b3c      	ldr	r3, [pc, #240]	; (8017808 <xTaskIncrementTick+0x15c>)
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	693a      	ldr	r2, [r7, #16]
 801771c:	429a      	cmp	r2, r3
 801771e:	d349      	bcc.n	80177b4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017720:	4b36      	ldr	r3, [pc, #216]	; (80177fc <xTaskIncrementTick+0x150>)
 8017722:	681b      	ldr	r3, [r3, #0]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d104      	bne.n	8017734 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801772a:	4b37      	ldr	r3, [pc, #220]	; (8017808 <xTaskIncrementTick+0x15c>)
 801772c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017730:	601a      	str	r2, [r3, #0]
					break;
 8017732:	e03f      	b.n	80177b4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017734:	4b31      	ldr	r3, [pc, #196]	; (80177fc <xTaskIncrementTick+0x150>)
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	68db      	ldr	r3, [r3, #12]
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801773e:	68bb      	ldr	r3, [r7, #8]
 8017740:	685b      	ldr	r3, [r3, #4]
 8017742:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8017744:	693a      	ldr	r2, [r7, #16]
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	429a      	cmp	r2, r3
 801774a:	d203      	bcs.n	8017754 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801774c:	4a2e      	ldr	r2, [pc, #184]	; (8017808 <xTaskIncrementTick+0x15c>)
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017752:	e02f      	b.n	80177b4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017754:	68bb      	ldr	r3, [r7, #8]
 8017756:	3304      	adds	r3, #4
 8017758:	4618      	mov	r0, r3
 801775a:	f7fe fb59 	bl	8015e10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801775e:	68bb      	ldr	r3, [r7, #8]
 8017760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017762:	2b00      	cmp	r3, #0
 8017764:	d004      	beq.n	8017770 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	3318      	adds	r3, #24
 801776a:	4618      	mov	r0, r3
 801776c:	f7fe fb50 	bl	8015e10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017774:	4b25      	ldr	r3, [pc, #148]	; (801780c <xTaskIncrementTick+0x160>)
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	429a      	cmp	r2, r3
 801777a:	d903      	bls.n	8017784 <xTaskIncrementTick+0xd8>
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017780:	4a22      	ldr	r2, [pc, #136]	; (801780c <xTaskIncrementTick+0x160>)
 8017782:	6013      	str	r3, [r2, #0]
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017788:	4613      	mov	r3, r2
 801778a:	009b      	lsls	r3, r3, #2
 801778c:	4413      	add	r3, r2
 801778e:	009b      	lsls	r3, r3, #2
 8017790:	4a1f      	ldr	r2, [pc, #124]	; (8017810 <xTaskIncrementTick+0x164>)
 8017792:	441a      	add	r2, r3
 8017794:	68bb      	ldr	r3, [r7, #8]
 8017796:	3304      	adds	r3, #4
 8017798:	4619      	mov	r1, r3
 801779a:	4610      	mov	r0, r2
 801779c:	f7fe fadb 	bl	8015d56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80177a0:	68bb      	ldr	r3, [r7, #8]
 80177a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177a4:	4b1b      	ldr	r3, [pc, #108]	; (8017814 <xTaskIncrementTick+0x168>)
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177aa:	429a      	cmp	r2, r3
 80177ac:	d3b8      	bcc.n	8017720 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80177ae:	2301      	movs	r3, #1
 80177b0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80177b2:	e7b5      	b.n	8017720 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80177b4:	4b17      	ldr	r3, [pc, #92]	; (8017814 <xTaskIncrementTick+0x168>)
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80177ba:	4915      	ldr	r1, [pc, #84]	; (8017810 <xTaskIncrementTick+0x164>)
 80177bc:	4613      	mov	r3, r2
 80177be:	009b      	lsls	r3, r3, #2
 80177c0:	4413      	add	r3, r2
 80177c2:	009b      	lsls	r3, r3, #2
 80177c4:	440b      	add	r3, r1
 80177c6:	681b      	ldr	r3, [r3, #0]
 80177c8:	2b01      	cmp	r3, #1
 80177ca:	d901      	bls.n	80177d0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80177cc:	2301      	movs	r3, #1
 80177ce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80177d0:	4b11      	ldr	r3, [pc, #68]	; (8017818 <xTaskIncrementTick+0x16c>)
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d007      	beq.n	80177e8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80177d8:	2301      	movs	r3, #1
 80177da:	617b      	str	r3, [r7, #20]
 80177dc:	e004      	b.n	80177e8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80177de:	4b0f      	ldr	r3, [pc, #60]	; (801781c <xTaskIncrementTick+0x170>)
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	3301      	adds	r3, #1
 80177e4:	4a0d      	ldr	r2, [pc, #52]	; (801781c <xTaskIncrementTick+0x170>)
 80177e6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80177e8:	697b      	ldr	r3, [r7, #20]
}
 80177ea:	4618      	mov	r0, r3
 80177ec:	3718      	adds	r7, #24
 80177ee:	46bd      	mov	sp, r7
 80177f0:	bd80      	pop	{r7, pc}
 80177f2:	bf00      	nop
 80177f4:	2000350c 	.word	0x2000350c
 80177f8:	200034e8 	.word	0x200034e8
 80177fc:	2000349c 	.word	0x2000349c
 8017800:	200034a0 	.word	0x200034a0
 8017804:	200034fc 	.word	0x200034fc
 8017808:	20003504 	.word	0x20003504
 801780c:	200034ec 	.word	0x200034ec
 8017810:	20003014 	.word	0x20003014
 8017814:	20003010 	.word	0x20003010
 8017818:	200034f8 	.word	0x200034f8
 801781c:	200034f4 	.word	0x200034f4

08017820 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017820:	b480      	push	{r7}
 8017822:	b085      	sub	sp, #20
 8017824:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8017826:	4b36      	ldr	r3, [pc, #216]	; (8017900 <vTaskSwitchContext+0xe0>)
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d003      	beq.n	8017836 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801782e:	4b35      	ldr	r3, [pc, #212]	; (8017904 <vTaskSwitchContext+0xe4>)
 8017830:	2201      	movs	r2, #1
 8017832:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8017834:	e05e      	b.n	80178f4 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8017836:	4b33      	ldr	r3, [pc, #204]	; (8017904 <vTaskSwitchContext+0xe4>)
 8017838:	2200      	movs	r2, #0
 801783a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801783c:	4b32      	ldr	r3, [pc, #200]	; (8017908 <vTaskSwitchContext+0xe8>)
 801783e:	681b      	ldr	r3, [r3, #0]
 8017840:	4a32      	ldr	r2, [pc, #200]	; (801790c <vTaskSwitchContext+0xec>)
 8017842:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8017844:	4b31      	ldr	r3, [pc, #196]	; (801790c <vTaskSwitchContext+0xec>)
 8017846:	681a      	ldr	r2, [r3, #0]
 8017848:	4b31      	ldr	r3, [pc, #196]	; (8017910 <vTaskSwitchContext+0xf0>)
 801784a:	681b      	ldr	r3, [r3, #0]
 801784c:	429a      	cmp	r2, r3
 801784e:	d909      	bls.n	8017864 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8017850:	4b30      	ldr	r3, [pc, #192]	; (8017914 <vTaskSwitchContext+0xf4>)
 8017852:	681b      	ldr	r3, [r3, #0]
 8017854:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8017856:	4a2d      	ldr	r2, [pc, #180]	; (801790c <vTaskSwitchContext+0xec>)
 8017858:	6810      	ldr	r0, [r2, #0]
 801785a:	4a2d      	ldr	r2, [pc, #180]	; (8017910 <vTaskSwitchContext+0xf0>)
 801785c:	6812      	ldr	r2, [r2, #0]
 801785e:	1a82      	subs	r2, r0, r2
 8017860:	440a      	add	r2, r1
 8017862:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8017864:	4b29      	ldr	r3, [pc, #164]	; (801790c <vTaskSwitchContext+0xec>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	4a29      	ldr	r2, [pc, #164]	; (8017910 <vTaskSwitchContext+0xf0>)
 801786a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801786c:	4b2a      	ldr	r3, [pc, #168]	; (8017918 <vTaskSwitchContext+0xf8>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	60fb      	str	r3, [r7, #12]
 8017872:	e010      	b.n	8017896 <vTaskSwitchContext+0x76>
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d10a      	bne.n	8017890 <vTaskSwitchContext+0x70>
	__asm volatile
 801787a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801787e:	f383 8811 	msr	BASEPRI, r3
 8017882:	f3bf 8f6f 	isb	sy
 8017886:	f3bf 8f4f 	dsb	sy
 801788a:	607b      	str	r3, [r7, #4]
}
 801788c:	bf00      	nop
 801788e:	e7fe      	b.n	801788e <vTaskSwitchContext+0x6e>
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	3b01      	subs	r3, #1
 8017894:	60fb      	str	r3, [r7, #12]
 8017896:	4921      	ldr	r1, [pc, #132]	; (801791c <vTaskSwitchContext+0xfc>)
 8017898:	68fa      	ldr	r2, [r7, #12]
 801789a:	4613      	mov	r3, r2
 801789c:	009b      	lsls	r3, r3, #2
 801789e:	4413      	add	r3, r2
 80178a0:	009b      	lsls	r3, r3, #2
 80178a2:	440b      	add	r3, r1
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d0e4      	beq.n	8017874 <vTaskSwitchContext+0x54>
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	4613      	mov	r3, r2
 80178ae:	009b      	lsls	r3, r3, #2
 80178b0:	4413      	add	r3, r2
 80178b2:	009b      	lsls	r3, r3, #2
 80178b4:	4a19      	ldr	r2, [pc, #100]	; (801791c <vTaskSwitchContext+0xfc>)
 80178b6:	4413      	add	r3, r2
 80178b8:	60bb      	str	r3, [r7, #8]
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	685b      	ldr	r3, [r3, #4]
 80178be:	685a      	ldr	r2, [r3, #4]
 80178c0:	68bb      	ldr	r3, [r7, #8]
 80178c2:	605a      	str	r2, [r3, #4]
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	685a      	ldr	r2, [r3, #4]
 80178c8:	68bb      	ldr	r3, [r7, #8]
 80178ca:	3308      	adds	r3, #8
 80178cc:	429a      	cmp	r2, r3
 80178ce:	d104      	bne.n	80178da <vTaskSwitchContext+0xba>
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	685b      	ldr	r3, [r3, #4]
 80178d4:	685a      	ldr	r2, [r3, #4]
 80178d6:	68bb      	ldr	r3, [r7, #8]
 80178d8:	605a      	str	r2, [r3, #4]
 80178da:	68bb      	ldr	r3, [r7, #8]
 80178dc:	685b      	ldr	r3, [r3, #4]
 80178de:	68db      	ldr	r3, [r3, #12]
 80178e0:	4a0c      	ldr	r2, [pc, #48]	; (8017914 <vTaskSwitchContext+0xf4>)
 80178e2:	6013      	str	r3, [r2, #0]
 80178e4:	4a0c      	ldr	r2, [pc, #48]	; (8017918 <vTaskSwitchContext+0xf8>)
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80178ea:	4b0a      	ldr	r3, [pc, #40]	; (8017914 <vTaskSwitchContext+0xf4>)
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	3358      	adds	r3, #88	; 0x58
 80178f0:	4a0b      	ldr	r2, [pc, #44]	; (8017920 <vTaskSwitchContext+0x100>)
 80178f2:	6013      	str	r3, [r2, #0]
}
 80178f4:	bf00      	nop
 80178f6:	3714      	adds	r7, #20
 80178f8:	46bd      	mov	sp, r7
 80178fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fe:	4770      	bx	lr
 8017900:	2000350c 	.word	0x2000350c
 8017904:	200034f8 	.word	0x200034f8
 8017908:	20011658 	.word	0x20011658
 801790c:	20003514 	.word	0x20003514
 8017910:	20003510 	.word	0x20003510
 8017914:	20003010 	.word	0x20003010
 8017918:	200034ec 	.word	0x200034ec
 801791c:	20003014 	.word	0x20003014
 8017920:	20000260 	.word	0x20000260

08017924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b084      	sub	sp, #16
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
 801792c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d10a      	bne.n	801794a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017938:	f383 8811 	msr	BASEPRI, r3
 801793c:	f3bf 8f6f 	isb	sy
 8017940:	f3bf 8f4f 	dsb	sy
 8017944:	60fb      	str	r3, [r7, #12]
}
 8017946:	bf00      	nop
 8017948:	e7fe      	b.n	8017948 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801794a:	4b07      	ldr	r3, [pc, #28]	; (8017968 <vTaskPlaceOnEventList+0x44>)
 801794c:	681b      	ldr	r3, [r3, #0]
 801794e:	3318      	adds	r3, #24
 8017950:	4619      	mov	r1, r3
 8017952:	6878      	ldr	r0, [r7, #4]
 8017954:	f7fe fa23 	bl	8015d9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017958:	2101      	movs	r1, #1
 801795a:	6838      	ldr	r0, [r7, #0]
 801795c:	f000 fd92 	bl	8018484 <prvAddCurrentTaskToDelayedList>
}
 8017960:	bf00      	nop
 8017962:	3710      	adds	r7, #16
 8017964:	46bd      	mov	sp, r7
 8017966:	bd80      	pop	{r7, pc}
 8017968:	20003010 	.word	0x20003010

0801796c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801796c:	b580      	push	{r7, lr}
 801796e:	b086      	sub	sp, #24
 8017970:	af00      	add	r7, sp, #0
 8017972:	60f8      	str	r0, [r7, #12]
 8017974:	60b9      	str	r1, [r7, #8]
 8017976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d10a      	bne.n	8017994 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017982:	f383 8811 	msr	BASEPRI, r3
 8017986:	f3bf 8f6f 	isb	sy
 801798a:	f3bf 8f4f 	dsb	sy
 801798e:	617b      	str	r3, [r7, #20]
}
 8017990:	bf00      	nop
 8017992:	e7fe      	b.n	8017992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017994:	4b0a      	ldr	r3, [pc, #40]	; (80179c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8017996:	681b      	ldr	r3, [r3, #0]
 8017998:	3318      	adds	r3, #24
 801799a:	4619      	mov	r1, r3
 801799c:	68f8      	ldr	r0, [r7, #12]
 801799e:	f7fe f9da 	bl	8015d56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	2b00      	cmp	r3, #0
 80179a6:	d002      	beq.n	80179ae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80179a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179ac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80179ae:	6879      	ldr	r1, [r7, #4]
 80179b0:	68b8      	ldr	r0, [r7, #8]
 80179b2:	f000 fd67 	bl	8018484 <prvAddCurrentTaskToDelayedList>
	}
 80179b6:	bf00      	nop
 80179b8:	3718      	adds	r7, #24
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}
 80179be:	bf00      	nop
 80179c0:	20003010 	.word	0x20003010

080179c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b086      	sub	sp, #24
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	68db      	ldr	r3, [r3, #12]
 80179d0:	68db      	ldr	r3, [r3, #12]
 80179d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d10a      	bne.n	80179f0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80179da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179de:	f383 8811 	msr	BASEPRI, r3
 80179e2:	f3bf 8f6f 	isb	sy
 80179e6:	f3bf 8f4f 	dsb	sy
 80179ea:	60fb      	str	r3, [r7, #12]
}
 80179ec:	bf00      	nop
 80179ee:	e7fe      	b.n	80179ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80179f0:	693b      	ldr	r3, [r7, #16]
 80179f2:	3318      	adds	r3, #24
 80179f4:	4618      	mov	r0, r3
 80179f6:	f7fe fa0b 	bl	8015e10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80179fa:	4b1e      	ldr	r3, [pc, #120]	; (8017a74 <xTaskRemoveFromEventList+0xb0>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d11d      	bne.n	8017a3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017a02:	693b      	ldr	r3, [r7, #16]
 8017a04:	3304      	adds	r3, #4
 8017a06:	4618      	mov	r0, r3
 8017a08:	f7fe fa02 	bl	8015e10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a10:	4b19      	ldr	r3, [pc, #100]	; (8017a78 <xTaskRemoveFromEventList+0xb4>)
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	429a      	cmp	r2, r3
 8017a16:	d903      	bls.n	8017a20 <xTaskRemoveFromEventList+0x5c>
 8017a18:	693b      	ldr	r3, [r7, #16]
 8017a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a1c:	4a16      	ldr	r2, [pc, #88]	; (8017a78 <xTaskRemoveFromEventList+0xb4>)
 8017a1e:	6013      	str	r3, [r2, #0]
 8017a20:	693b      	ldr	r3, [r7, #16]
 8017a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a24:	4613      	mov	r3, r2
 8017a26:	009b      	lsls	r3, r3, #2
 8017a28:	4413      	add	r3, r2
 8017a2a:	009b      	lsls	r3, r3, #2
 8017a2c:	4a13      	ldr	r2, [pc, #76]	; (8017a7c <xTaskRemoveFromEventList+0xb8>)
 8017a2e:	441a      	add	r2, r3
 8017a30:	693b      	ldr	r3, [r7, #16]
 8017a32:	3304      	adds	r3, #4
 8017a34:	4619      	mov	r1, r3
 8017a36:	4610      	mov	r0, r2
 8017a38:	f7fe f98d 	bl	8015d56 <vListInsertEnd>
 8017a3c:	e005      	b.n	8017a4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017a3e:	693b      	ldr	r3, [r7, #16]
 8017a40:	3318      	adds	r3, #24
 8017a42:	4619      	mov	r1, r3
 8017a44:	480e      	ldr	r0, [pc, #56]	; (8017a80 <xTaskRemoveFromEventList+0xbc>)
 8017a46:	f7fe f986 	bl	8015d56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017a4a:	693b      	ldr	r3, [r7, #16]
 8017a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a4e:	4b0d      	ldr	r3, [pc, #52]	; (8017a84 <xTaskRemoveFromEventList+0xc0>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a54:	429a      	cmp	r2, r3
 8017a56:	d905      	bls.n	8017a64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017a58:	2301      	movs	r3, #1
 8017a5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017a5c:	4b0a      	ldr	r3, [pc, #40]	; (8017a88 <xTaskRemoveFromEventList+0xc4>)
 8017a5e:	2201      	movs	r2, #1
 8017a60:	601a      	str	r2, [r3, #0]
 8017a62:	e001      	b.n	8017a68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017a64:	2300      	movs	r3, #0
 8017a66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017a68:	697b      	ldr	r3, [r7, #20]
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3718      	adds	r7, #24
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
 8017a72:	bf00      	nop
 8017a74:	2000350c 	.word	0x2000350c
 8017a78:	200034ec 	.word	0x200034ec
 8017a7c:	20003014 	.word	0x20003014
 8017a80:	200034a4 	.word	0x200034a4
 8017a84:	20003010 	.word	0x20003010
 8017a88:	200034f8 	.word	0x200034f8

08017a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017a8c:	b480      	push	{r7}
 8017a8e:	b083      	sub	sp, #12
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017a94:	4b06      	ldr	r3, [pc, #24]	; (8017ab0 <vTaskInternalSetTimeOutState+0x24>)
 8017a96:	681a      	ldr	r2, [r3, #0]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017a9c:	4b05      	ldr	r3, [pc, #20]	; (8017ab4 <vTaskInternalSetTimeOutState+0x28>)
 8017a9e:	681a      	ldr	r2, [r3, #0]
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	605a      	str	r2, [r3, #4]
}
 8017aa4:	bf00      	nop
 8017aa6:	370c      	adds	r7, #12
 8017aa8:	46bd      	mov	sp, r7
 8017aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aae:	4770      	bx	lr
 8017ab0:	200034fc 	.word	0x200034fc
 8017ab4:	200034e8 	.word	0x200034e8

08017ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b088      	sub	sp, #32
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d10a      	bne.n	8017ade <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017acc:	f383 8811 	msr	BASEPRI, r3
 8017ad0:	f3bf 8f6f 	isb	sy
 8017ad4:	f3bf 8f4f 	dsb	sy
 8017ad8:	613b      	str	r3, [r7, #16]
}
 8017ada:	bf00      	nop
 8017adc:	e7fe      	b.n	8017adc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d10a      	bne.n	8017afa <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ae8:	f383 8811 	msr	BASEPRI, r3
 8017aec:	f3bf 8f6f 	isb	sy
 8017af0:	f3bf 8f4f 	dsb	sy
 8017af4:	60fb      	str	r3, [r7, #12]
}
 8017af6:	bf00      	nop
 8017af8:	e7fe      	b.n	8017af8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017afa:	f001 f993 	bl	8018e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017afe:	4b1d      	ldr	r3, [pc, #116]	; (8017b74 <xTaskCheckForTimeOut+0xbc>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	685b      	ldr	r3, [r3, #4]
 8017b08:	69ba      	ldr	r2, [r7, #24]
 8017b0a:	1ad3      	subs	r3, r2, r3
 8017b0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017b0e:	683b      	ldr	r3, [r7, #0]
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017b16:	d102      	bne.n	8017b1e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017b18:	2300      	movs	r3, #0
 8017b1a:	61fb      	str	r3, [r7, #28]
 8017b1c:	e023      	b.n	8017b66 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	4b15      	ldr	r3, [pc, #84]	; (8017b78 <xTaskCheckForTimeOut+0xc0>)
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	429a      	cmp	r2, r3
 8017b28:	d007      	beq.n	8017b3a <xTaskCheckForTimeOut+0x82>
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	685b      	ldr	r3, [r3, #4]
 8017b2e:	69ba      	ldr	r2, [r7, #24]
 8017b30:	429a      	cmp	r2, r3
 8017b32:	d302      	bcc.n	8017b3a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017b34:	2301      	movs	r3, #1
 8017b36:	61fb      	str	r3, [r7, #28]
 8017b38:	e015      	b.n	8017b66 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	697a      	ldr	r2, [r7, #20]
 8017b40:	429a      	cmp	r2, r3
 8017b42:	d20b      	bcs.n	8017b5c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017b44:	683b      	ldr	r3, [r7, #0]
 8017b46:	681a      	ldr	r2, [r3, #0]
 8017b48:	697b      	ldr	r3, [r7, #20]
 8017b4a:	1ad2      	subs	r2, r2, r3
 8017b4c:	683b      	ldr	r3, [r7, #0]
 8017b4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017b50:	6878      	ldr	r0, [r7, #4]
 8017b52:	f7ff ff9b 	bl	8017a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017b56:	2300      	movs	r3, #0
 8017b58:	61fb      	str	r3, [r7, #28]
 8017b5a:	e004      	b.n	8017b66 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017b5c:	683b      	ldr	r3, [r7, #0]
 8017b5e:	2200      	movs	r2, #0
 8017b60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017b62:	2301      	movs	r3, #1
 8017b64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017b66:	f001 f98d 	bl	8018e84 <vPortExitCritical>

	return xReturn;
 8017b6a:	69fb      	ldr	r3, [r7, #28]
}
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	3720      	adds	r7, #32
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}
 8017b74:	200034e8 	.word	0x200034e8
 8017b78:	200034fc 	.word	0x200034fc

08017b7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017b7c:	b480      	push	{r7}
 8017b7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017b80:	4b03      	ldr	r3, [pc, #12]	; (8017b90 <vTaskMissedYield+0x14>)
 8017b82:	2201      	movs	r2, #1
 8017b84:	601a      	str	r2, [r3, #0]
}
 8017b86:	bf00      	nop
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8e:	4770      	bx	lr
 8017b90:	200034f8 	.word	0x200034f8

08017b94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b082      	sub	sp, #8
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017b9c:	f000 f852 	bl	8017c44 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017ba0:	4b06      	ldr	r3, [pc, #24]	; (8017bbc <prvIdleTask+0x28>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	2b01      	cmp	r3, #1
 8017ba6:	d9f9      	bls.n	8017b9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8017ba8:	4b05      	ldr	r3, [pc, #20]	; (8017bc0 <prvIdleTask+0x2c>)
 8017baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bae:	601a      	str	r2, [r3, #0]
 8017bb0:	f3bf 8f4f 	dsb	sy
 8017bb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017bb8:	e7f0      	b.n	8017b9c <prvIdleTask+0x8>
 8017bba:	bf00      	nop
 8017bbc:	20003014 	.word	0x20003014
 8017bc0:	e000ed04 	.word	0xe000ed04

08017bc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b082      	sub	sp, #8
 8017bc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017bca:	2300      	movs	r3, #0
 8017bcc:	607b      	str	r3, [r7, #4]
 8017bce:	e00c      	b.n	8017bea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017bd0:	687a      	ldr	r2, [r7, #4]
 8017bd2:	4613      	mov	r3, r2
 8017bd4:	009b      	lsls	r3, r3, #2
 8017bd6:	4413      	add	r3, r2
 8017bd8:	009b      	lsls	r3, r3, #2
 8017bda:	4a12      	ldr	r2, [pc, #72]	; (8017c24 <prvInitialiseTaskLists+0x60>)
 8017bdc:	4413      	add	r3, r2
 8017bde:	4618      	mov	r0, r3
 8017be0:	f7fe f88c 	bl	8015cfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	3301      	adds	r3, #1
 8017be8:	607b      	str	r3, [r7, #4]
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	2b37      	cmp	r3, #55	; 0x37
 8017bee:	d9ef      	bls.n	8017bd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017bf0:	480d      	ldr	r0, [pc, #52]	; (8017c28 <prvInitialiseTaskLists+0x64>)
 8017bf2:	f7fe f883 	bl	8015cfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017bf6:	480d      	ldr	r0, [pc, #52]	; (8017c2c <prvInitialiseTaskLists+0x68>)
 8017bf8:	f7fe f880 	bl	8015cfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017bfc:	480c      	ldr	r0, [pc, #48]	; (8017c30 <prvInitialiseTaskLists+0x6c>)
 8017bfe:	f7fe f87d 	bl	8015cfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017c02:	480c      	ldr	r0, [pc, #48]	; (8017c34 <prvInitialiseTaskLists+0x70>)
 8017c04:	f7fe f87a 	bl	8015cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017c08:	480b      	ldr	r0, [pc, #44]	; (8017c38 <prvInitialiseTaskLists+0x74>)
 8017c0a:	f7fe f877 	bl	8015cfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017c0e:	4b0b      	ldr	r3, [pc, #44]	; (8017c3c <prvInitialiseTaskLists+0x78>)
 8017c10:	4a05      	ldr	r2, [pc, #20]	; (8017c28 <prvInitialiseTaskLists+0x64>)
 8017c12:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017c14:	4b0a      	ldr	r3, [pc, #40]	; (8017c40 <prvInitialiseTaskLists+0x7c>)
 8017c16:	4a05      	ldr	r2, [pc, #20]	; (8017c2c <prvInitialiseTaskLists+0x68>)
 8017c18:	601a      	str	r2, [r3, #0]
}
 8017c1a:	bf00      	nop
 8017c1c:	3708      	adds	r7, #8
 8017c1e:	46bd      	mov	sp, r7
 8017c20:	bd80      	pop	{r7, pc}
 8017c22:	bf00      	nop
 8017c24:	20003014 	.word	0x20003014
 8017c28:	20003474 	.word	0x20003474
 8017c2c:	20003488 	.word	0x20003488
 8017c30:	200034a4 	.word	0x200034a4
 8017c34:	200034b8 	.word	0x200034b8
 8017c38:	200034d0 	.word	0x200034d0
 8017c3c:	2000349c 	.word	0x2000349c
 8017c40:	200034a0 	.word	0x200034a0

08017c44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017c44:	b580      	push	{r7, lr}
 8017c46:	b082      	sub	sp, #8
 8017c48:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017c4a:	e019      	b.n	8017c80 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017c4c:	f001 f8ea 	bl	8018e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017c50:	4b10      	ldr	r3, [pc, #64]	; (8017c94 <prvCheckTasksWaitingTermination+0x50>)
 8017c52:	68db      	ldr	r3, [r3, #12]
 8017c54:	68db      	ldr	r3, [r3, #12]
 8017c56:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	3304      	adds	r3, #4
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	f7fe f8d7 	bl	8015e10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017c62:	4b0d      	ldr	r3, [pc, #52]	; (8017c98 <prvCheckTasksWaitingTermination+0x54>)
 8017c64:	681b      	ldr	r3, [r3, #0]
 8017c66:	3b01      	subs	r3, #1
 8017c68:	4a0b      	ldr	r2, [pc, #44]	; (8017c98 <prvCheckTasksWaitingTermination+0x54>)
 8017c6a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017c6c:	4b0b      	ldr	r3, [pc, #44]	; (8017c9c <prvCheckTasksWaitingTermination+0x58>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	3b01      	subs	r3, #1
 8017c72:	4a0a      	ldr	r2, [pc, #40]	; (8017c9c <prvCheckTasksWaitingTermination+0x58>)
 8017c74:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017c76:	f001 f905 	bl	8018e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017c7a:	6878      	ldr	r0, [r7, #4]
 8017c7c:	f000 f8e4 	bl	8017e48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017c80:	4b06      	ldr	r3, [pc, #24]	; (8017c9c <prvCheckTasksWaitingTermination+0x58>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d1e1      	bne.n	8017c4c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017c88:	bf00      	nop
 8017c8a:	bf00      	nop
 8017c8c:	3708      	adds	r7, #8
 8017c8e:	46bd      	mov	sp, r7
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	200034b8 	.word	0x200034b8
 8017c98:	200034e4 	.word	0x200034e4
 8017c9c:	200034cc 	.word	0x200034cc

08017ca0 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b086      	sub	sp, #24
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	60f8      	str	r0, [r7, #12]
 8017ca8:	60b9      	str	r1, [r7, #8]
 8017caa:	607a      	str	r2, [r7, #4]
 8017cac:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d102      	bne.n	8017cba <vTaskGetInfo+0x1a>
 8017cb4:	4b2c      	ldr	r3, [pc, #176]	; (8017d68 <vTaskGetInfo+0xc8>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	e000      	b.n	8017cbc <vTaskGetInfo+0x1c>
 8017cba:	68fb      	ldr	r3, [r7, #12]
 8017cbc:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8017cbe:	68bb      	ldr	r3, [r7, #8]
 8017cc0:	697a      	ldr	r2, [r7, #20]
 8017cc2:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8017cca:	68bb      	ldr	r3, [r7, #8]
 8017ccc:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8017cce:	697b      	ldr	r3, [r7, #20]
 8017cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cd2:	68bb      	ldr	r3, [r7, #8]
 8017cd4:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8017cd6:	697b      	ldr	r3, [r7, #20]
 8017cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017cda:	68bb      	ldr	r3, [r7, #8]
 8017cdc:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8017cde:	697b      	ldr	r3, [r7, #20]
 8017ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8017ce6:	697b      	ldr	r3, [r7, #20]
 8017ce8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8017cee:	697b      	ldr	r3, [r7, #20]
 8017cf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017cf2:	68bb      	ldr	r3, [r7, #8]
 8017cf4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8017cf6:	78fb      	ldrb	r3, [r7, #3]
 8017cf8:	2b05      	cmp	r3, #5
 8017cfa:	d01a      	beq.n	8017d32 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8017cfc:	4b1a      	ldr	r3, [pc, #104]	; (8017d68 <vTaskGetInfo+0xc8>)
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	697a      	ldr	r2, [r7, #20]
 8017d02:	429a      	cmp	r2, r3
 8017d04:	d103      	bne.n	8017d0e <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8017d06:	68bb      	ldr	r3, [r7, #8]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	731a      	strb	r2, [r3, #12]
 8017d0c:	e018      	b.n	8017d40 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8017d0e:	68bb      	ldr	r3, [r7, #8]
 8017d10:	78fa      	ldrb	r2, [r7, #3]
 8017d12:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8017d14:	78fb      	ldrb	r3, [r7, #3]
 8017d16:	2b03      	cmp	r3, #3
 8017d18:	d112      	bne.n	8017d40 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8017d1a:	f7ff fb7b 	bl	8017414 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8017d1e:	697b      	ldr	r3, [r7, #20]
 8017d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d002      	beq.n	8017d2c <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8017d26:	68bb      	ldr	r3, [r7, #8]
 8017d28:	2202      	movs	r2, #2
 8017d2a:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8017d2c:	f7ff fb80 	bl	8017430 <xTaskResumeAll>
 8017d30:	e006      	b.n	8017d40 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8017d32:	6978      	ldr	r0, [r7, #20]
 8017d34:	f7ff fa94 	bl	8017260 <eTaskGetState>
 8017d38:	4603      	mov	r3, r0
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	68bb      	ldr	r3, [r7, #8]
 8017d3e:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d009      	beq.n	8017d5a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8017d46:	697b      	ldr	r3, [r7, #20]
 8017d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f000 f860 	bl	8017e10 <prvTaskCheckFreeStackSpace>
 8017d50:	4603      	mov	r3, r0
 8017d52:	461a      	mov	r2, r3
 8017d54:	68bb      	ldr	r3, [r7, #8]
 8017d56:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8017d58:	e002      	b.n	8017d60 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8017d5a:	68bb      	ldr	r3, [r7, #8]
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	841a      	strh	r2, [r3, #32]
	}
 8017d60:	bf00      	nop
 8017d62:	3718      	adds	r7, #24
 8017d64:	46bd      	mov	sp, r7
 8017d66:	bd80      	pop	{r7, pc}
 8017d68:	20003010 	.word	0x20003010

08017d6c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8017d6c:	b580      	push	{r7, lr}
 8017d6e:	b08a      	sub	sp, #40	; 0x28
 8017d70:	af00      	add	r7, sp, #0
 8017d72:	60f8      	str	r0, [r7, #12]
 8017d74:	60b9      	str	r1, [r7, #8]
 8017d76:	4613      	mov	r3, r2
 8017d78:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8017d7a:	2300      	movs	r3, #0
 8017d7c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8017d7e:	68bb      	ldr	r3, [r7, #8]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d03f      	beq.n	8017e06 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017d86:	68bb      	ldr	r3, [r7, #8]
 8017d88:	623b      	str	r3, [r7, #32]
 8017d8a:	6a3b      	ldr	r3, [r7, #32]
 8017d8c:	685b      	ldr	r3, [r3, #4]
 8017d8e:	685a      	ldr	r2, [r3, #4]
 8017d90:	6a3b      	ldr	r3, [r7, #32]
 8017d92:	605a      	str	r2, [r3, #4]
 8017d94:	6a3b      	ldr	r3, [r7, #32]
 8017d96:	685a      	ldr	r2, [r3, #4]
 8017d98:	6a3b      	ldr	r3, [r7, #32]
 8017d9a:	3308      	adds	r3, #8
 8017d9c:	429a      	cmp	r2, r3
 8017d9e:	d104      	bne.n	8017daa <prvListTasksWithinSingleList+0x3e>
 8017da0:	6a3b      	ldr	r3, [r7, #32]
 8017da2:	685b      	ldr	r3, [r3, #4]
 8017da4:	685a      	ldr	r2, [r3, #4]
 8017da6:	6a3b      	ldr	r3, [r7, #32]
 8017da8:	605a      	str	r2, [r3, #4]
 8017daa:	6a3b      	ldr	r3, [r7, #32]
 8017dac:	685b      	ldr	r3, [r3, #4]
 8017dae:	68db      	ldr	r3, [r3, #12]
 8017db0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017db2:	68bb      	ldr	r3, [r7, #8]
 8017db4:	61bb      	str	r3, [r7, #24]
 8017db6:	69bb      	ldr	r3, [r7, #24]
 8017db8:	685b      	ldr	r3, [r3, #4]
 8017dba:	685a      	ldr	r2, [r3, #4]
 8017dbc:	69bb      	ldr	r3, [r7, #24]
 8017dbe:	605a      	str	r2, [r3, #4]
 8017dc0:	69bb      	ldr	r3, [r7, #24]
 8017dc2:	685a      	ldr	r2, [r3, #4]
 8017dc4:	69bb      	ldr	r3, [r7, #24]
 8017dc6:	3308      	adds	r3, #8
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d104      	bne.n	8017dd6 <prvListTasksWithinSingleList+0x6a>
 8017dcc:	69bb      	ldr	r3, [r7, #24]
 8017dce:	685b      	ldr	r3, [r3, #4]
 8017dd0:	685a      	ldr	r2, [r3, #4]
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	605a      	str	r2, [r3, #4]
 8017dd6:	69bb      	ldr	r3, [r7, #24]
 8017dd8:	685b      	ldr	r3, [r3, #4]
 8017dda:	68db      	ldr	r3, [r3, #12]
 8017ddc:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8017dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017de0:	4613      	mov	r3, r2
 8017de2:	00db      	lsls	r3, r3, #3
 8017de4:	4413      	add	r3, r2
 8017de6:	009b      	lsls	r3, r3, #2
 8017de8:	461a      	mov	r2, r3
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	1899      	adds	r1, r3, r2
 8017dee:	79fb      	ldrb	r3, [r7, #7]
 8017df0:	2201      	movs	r2, #1
 8017df2:	6978      	ldr	r0, [r7, #20]
 8017df4:	f7ff ff54 	bl	8017ca0 <vTaskGetInfo>
				uxTask++;
 8017df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017dfa:	3301      	adds	r3, #1
 8017dfc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8017dfe:	697a      	ldr	r2, [r7, #20]
 8017e00:	69fb      	ldr	r3, [r7, #28]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d1d5      	bne.n	8017db2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8017e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8017e08:	4618      	mov	r0, r3
 8017e0a:	3728      	adds	r7, #40	; 0x28
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bd80      	pop	{r7, pc}

08017e10 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8017e10:	b480      	push	{r7}
 8017e12:	b085      	sub	sp, #20
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8017e18:	2300      	movs	r3, #0
 8017e1a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8017e1c:	e005      	b.n	8017e2a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	3301      	adds	r3, #1
 8017e22:	607b      	str	r3, [r7, #4]
			ulCount++;
 8017e24:	68fb      	ldr	r3, [r7, #12]
 8017e26:	3301      	adds	r3, #1
 8017e28:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8017e2a:	687b      	ldr	r3, [r7, #4]
 8017e2c:	781b      	ldrb	r3, [r3, #0]
 8017e2e:	2ba5      	cmp	r3, #165	; 0xa5
 8017e30:	d0f5      	beq.n	8017e1e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	089b      	lsrs	r3, r3, #2
 8017e36:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8017e38:	68fb      	ldr	r3, [r7, #12]
 8017e3a:	b29b      	uxth	r3, r3
	}
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	3714      	adds	r7, #20
 8017e40:	46bd      	mov	sp, r7
 8017e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e46:	4770      	bx	lr

08017e48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017e48:	b580      	push	{r7, lr}
 8017e4a:	b084      	sub	sp, #16
 8017e4c:	af00      	add	r7, sp, #0
 8017e4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	3358      	adds	r3, #88	; 0x58
 8017e54:	4618      	mov	r0, r3
 8017e56:	f002 feab 	bl	801abb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d108      	bne.n	8017e76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e68:	4618      	mov	r0, r3
 8017e6a:	f001 f9c9 	bl	8019200 <vPortFree>
				vPortFree( pxTCB );
 8017e6e:	6878      	ldr	r0, [r7, #4]
 8017e70:	f001 f9c6 	bl	8019200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017e74:	e018      	b.n	8017ea8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017e7c:	2b01      	cmp	r3, #1
 8017e7e:	d103      	bne.n	8017e88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017e80:	6878      	ldr	r0, [r7, #4]
 8017e82:	f001 f9bd 	bl	8019200 <vPortFree>
	}
 8017e86:	e00f      	b.n	8017ea8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d00a      	beq.n	8017ea8 <prvDeleteTCB+0x60>
	__asm volatile
 8017e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e96:	f383 8811 	msr	BASEPRI, r3
 8017e9a:	f3bf 8f6f 	isb	sy
 8017e9e:	f3bf 8f4f 	dsb	sy
 8017ea2:	60fb      	str	r3, [r7, #12]
}
 8017ea4:	bf00      	nop
 8017ea6:	e7fe      	b.n	8017ea6 <prvDeleteTCB+0x5e>
	}
 8017ea8:	bf00      	nop
 8017eaa:	3710      	adds	r7, #16
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}

08017eb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	b083      	sub	sp, #12
 8017eb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017eb6:	4b0c      	ldr	r3, [pc, #48]	; (8017ee8 <prvResetNextTaskUnblockTime+0x38>)
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d104      	bne.n	8017eca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017ec0:	4b0a      	ldr	r3, [pc, #40]	; (8017eec <prvResetNextTaskUnblockTime+0x3c>)
 8017ec2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017ec6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017ec8:	e008      	b.n	8017edc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017eca:	4b07      	ldr	r3, [pc, #28]	; (8017ee8 <prvResetNextTaskUnblockTime+0x38>)
 8017ecc:	681b      	ldr	r3, [r3, #0]
 8017ece:	68db      	ldr	r3, [r3, #12]
 8017ed0:	68db      	ldr	r3, [r3, #12]
 8017ed2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	685b      	ldr	r3, [r3, #4]
 8017ed8:	4a04      	ldr	r2, [pc, #16]	; (8017eec <prvResetNextTaskUnblockTime+0x3c>)
 8017eda:	6013      	str	r3, [r2, #0]
}
 8017edc:	bf00      	nop
 8017ede:	370c      	adds	r7, #12
 8017ee0:	46bd      	mov	sp, r7
 8017ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee6:	4770      	bx	lr
 8017ee8:	2000349c 	.word	0x2000349c
 8017eec:	20003504 	.word	0x20003504

08017ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017ef0:	b480      	push	{r7}
 8017ef2:	b083      	sub	sp, #12
 8017ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017ef6:	4b0b      	ldr	r3, [pc, #44]	; (8017f24 <xTaskGetSchedulerState+0x34>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d102      	bne.n	8017f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017efe:	2301      	movs	r3, #1
 8017f00:	607b      	str	r3, [r7, #4]
 8017f02:	e008      	b.n	8017f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f04:	4b08      	ldr	r3, [pc, #32]	; (8017f28 <xTaskGetSchedulerState+0x38>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d102      	bne.n	8017f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017f0c:	2302      	movs	r3, #2
 8017f0e:	607b      	str	r3, [r7, #4]
 8017f10:	e001      	b.n	8017f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017f12:	2300      	movs	r3, #0
 8017f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017f16:	687b      	ldr	r3, [r7, #4]
	}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	370c      	adds	r7, #12
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr
 8017f24:	200034f0 	.word	0x200034f0
 8017f28:	2000350c 	.word	0x2000350c

08017f2c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	b084      	sub	sp, #16
 8017f30:	af00      	add	r7, sp, #0
 8017f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017f38:	2300      	movs	r3, #0
 8017f3a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d051      	beq.n	8017fe6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f46:	4b2a      	ldr	r3, [pc, #168]	; (8017ff0 <xTaskPriorityInherit+0xc4>)
 8017f48:	681b      	ldr	r3, [r3, #0]
 8017f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f4c:	429a      	cmp	r2, r3
 8017f4e:	d241      	bcs.n	8017fd4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017f50:	68bb      	ldr	r3, [r7, #8]
 8017f52:	699b      	ldr	r3, [r3, #24]
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	db06      	blt.n	8017f66 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017f58:	4b25      	ldr	r3, [pc, #148]	; (8017ff0 <xTaskPriorityInherit+0xc4>)
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017f5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017f62:	68bb      	ldr	r3, [r7, #8]
 8017f64:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	6959      	ldr	r1, [r3, #20]
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f6e:	4613      	mov	r3, r2
 8017f70:	009b      	lsls	r3, r3, #2
 8017f72:	4413      	add	r3, r2
 8017f74:	009b      	lsls	r3, r3, #2
 8017f76:	4a1f      	ldr	r2, [pc, #124]	; (8017ff4 <xTaskPriorityInherit+0xc8>)
 8017f78:	4413      	add	r3, r2
 8017f7a:	4299      	cmp	r1, r3
 8017f7c:	d122      	bne.n	8017fc4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017f7e:	68bb      	ldr	r3, [r7, #8]
 8017f80:	3304      	adds	r3, #4
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7fd ff44 	bl	8015e10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017f88:	4b19      	ldr	r3, [pc, #100]	; (8017ff0 <xTaskPriorityInherit+0xc4>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f8e:	68bb      	ldr	r3, [r7, #8]
 8017f90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8017f92:	68bb      	ldr	r3, [r7, #8]
 8017f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017f96:	4b18      	ldr	r3, [pc, #96]	; (8017ff8 <xTaskPriorityInherit+0xcc>)
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d903      	bls.n	8017fa6 <xTaskPriorityInherit+0x7a>
 8017f9e:	68bb      	ldr	r3, [r7, #8]
 8017fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fa2:	4a15      	ldr	r2, [pc, #84]	; (8017ff8 <xTaskPriorityInherit+0xcc>)
 8017fa4:	6013      	str	r3, [r2, #0]
 8017fa6:	68bb      	ldr	r3, [r7, #8]
 8017fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017faa:	4613      	mov	r3, r2
 8017fac:	009b      	lsls	r3, r3, #2
 8017fae:	4413      	add	r3, r2
 8017fb0:	009b      	lsls	r3, r3, #2
 8017fb2:	4a10      	ldr	r2, [pc, #64]	; (8017ff4 <xTaskPriorityInherit+0xc8>)
 8017fb4:	441a      	add	r2, r3
 8017fb6:	68bb      	ldr	r3, [r7, #8]
 8017fb8:	3304      	adds	r3, #4
 8017fba:	4619      	mov	r1, r3
 8017fbc:	4610      	mov	r0, r2
 8017fbe:	f7fd feca 	bl	8015d56 <vListInsertEnd>
 8017fc2:	e004      	b.n	8017fce <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017fc4:	4b0a      	ldr	r3, [pc, #40]	; (8017ff0 <xTaskPriorityInherit+0xc4>)
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fca:	68bb      	ldr	r3, [r7, #8]
 8017fcc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017fce:	2301      	movs	r3, #1
 8017fd0:	60fb      	str	r3, [r7, #12]
 8017fd2:	e008      	b.n	8017fe6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017fd4:	68bb      	ldr	r3, [r7, #8]
 8017fd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017fd8:	4b05      	ldr	r3, [pc, #20]	; (8017ff0 <xTaskPriorityInherit+0xc4>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d201      	bcs.n	8017fe6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017fe2:	2301      	movs	r3, #1
 8017fe4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
	}
 8017fe8:	4618      	mov	r0, r3
 8017fea:	3710      	adds	r7, #16
 8017fec:	46bd      	mov	sp, r7
 8017fee:	bd80      	pop	{r7, pc}
 8017ff0:	20003010 	.word	0x20003010
 8017ff4:	20003014 	.word	0x20003014
 8017ff8:	200034ec 	.word	0x200034ec

08017ffc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017ffc:	b580      	push	{r7, lr}
 8017ffe:	b086      	sub	sp, #24
 8018000:	af00      	add	r7, sp, #0
 8018002:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018008:	2300      	movs	r3, #0
 801800a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d056      	beq.n	80180c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8018012:	4b2e      	ldr	r3, [pc, #184]	; (80180cc <xTaskPriorityDisinherit+0xd0>)
 8018014:	681b      	ldr	r3, [r3, #0]
 8018016:	693a      	ldr	r2, [r7, #16]
 8018018:	429a      	cmp	r2, r3
 801801a:	d00a      	beq.n	8018032 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801801c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018020:	f383 8811 	msr	BASEPRI, r3
 8018024:	f3bf 8f6f 	isb	sy
 8018028:	f3bf 8f4f 	dsb	sy
 801802c:	60fb      	str	r3, [r7, #12]
}
 801802e:	bf00      	nop
 8018030:	e7fe      	b.n	8018030 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8018032:	693b      	ldr	r3, [r7, #16]
 8018034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018036:	2b00      	cmp	r3, #0
 8018038:	d10a      	bne.n	8018050 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801803e:	f383 8811 	msr	BASEPRI, r3
 8018042:	f3bf 8f6f 	isb	sy
 8018046:	f3bf 8f4f 	dsb	sy
 801804a:	60bb      	str	r3, [r7, #8]
}
 801804c:	bf00      	nop
 801804e:	e7fe      	b.n	801804e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018054:	1e5a      	subs	r2, r3, #1
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801805e:	693b      	ldr	r3, [r7, #16]
 8018060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018062:	429a      	cmp	r2, r3
 8018064:	d02c      	beq.n	80180c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801806a:	2b00      	cmp	r3, #0
 801806c:	d128      	bne.n	80180c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	3304      	adds	r3, #4
 8018072:	4618      	mov	r0, r3
 8018074:	f7fd fecc 	bl	8015e10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018078:	693b      	ldr	r3, [r7, #16]
 801807a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801807c:	693b      	ldr	r3, [r7, #16]
 801807e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018080:	693b      	ldr	r3, [r7, #16]
 8018082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018084:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018088:	693b      	ldr	r3, [r7, #16]
 801808a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018090:	4b0f      	ldr	r3, [pc, #60]	; (80180d0 <xTaskPriorityDisinherit+0xd4>)
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	429a      	cmp	r2, r3
 8018096:	d903      	bls.n	80180a0 <xTaskPriorityDisinherit+0xa4>
 8018098:	693b      	ldr	r3, [r7, #16]
 801809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801809c:	4a0c      	ldr	r2, [pc, #48]	; (80180d0 <xTaskPriorityDisinherit+0xd4>)
 801809e:	6013      	str	r3, [r2, #0]
 80180a0:	693b      	ldr	r3, [r7, #16]
 80180a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180a4:	4613      	mov	r3, r2
 80180a6:	009b      	lsls	r3, r3, #2
 80180a8:	4413      	add	r3, r2
 80180aa:	009b      	lsls	r3, r3, #2
 80180ac:	4a09      	ldr	r2, [pc, #36]	; (80180d4 <xTaskPriorityDisinherit+0xd8>)
 80180ae:	441a      	add	r2, r3
 80180b0:	693b      	ldr	r3, [r7, #16]
 80180b2:	3304      	adds	r3, #4
 80180b4:	4619      	mov	r1, r3
 80180b6:	4610      	mov	r0, r2
 80180b8:	f7fd fe4d 	bl	8015d56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80180bc:	2301      	movs	r3, #1
 80180be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80180c0:	697b      	ldr	r3, [r7, #20]
	}
 80180c2:	4618      	mov	r0, r3
 80180c4:	3718      	adds	r7, #24
 80180c6:	46bd      	mov	sp, r7
 80180c8:	bd80      	pop	{r7, pc}
 80180ca:	bf00      	nop
 80180cc:	20003010 	.word	0x20003010
 80180d0:	200034ec 	.word	0x200034ec
 80180d4:	20003014 	.word	0x20003014

080180d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b088      	sub	sp, #32
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
 80180e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80180e6:	2301      	movs	r3, #1
 80180e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d06a      	beq.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80180f0:	69bb      	ldr	r3, [r7, #24]
 80180f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d10a      	bne.n	801810e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80180f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180fc:	f383 8811 	msr	BASEPRI, r3
 8018100:	f3bf 8f6f 	isb	sy
 8018104:	f3bf 8f4f 	dsb	sy
 8018108:	60fb      	str	r3, [r7, #12]
}
 801810a:	bf00      	nop
 801810c:	e7fe      	b.n	801810c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801810e:	69bb      	ldr	r3, [r7, #24]
 8018110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018112:	683a      	ldr	r2, [r7, #0]
 8018114:	429a      	cmp	r2, r3
 8018116:	d902      	bls.n	801811e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018118:	683b      	ldr	r3, [r7, #0]
 801811a:	61fb      	str	r3, [r7, #28]
 801811c:	e002      	b.n	8018124 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801811e:	69bb      	ldr	r3, [r7, #24]
 8018120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018122:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018124:	69bb      	ldr	r3, [r7, #24]
 8018126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018128:	69fa      	ldr	r2, [r7, #28]
 801812a:	429a      	cmp	r2, r3
 801812c:	d04b      	beq.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801812e:	69bb      	ldr	r3, [r7, #24]
 8018130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018132:	697a      	ldr	r2, [r7, #20]
 8018134:	429a      	cmp	r2, r3
 8018136:	d146      	bne.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018138:	4b25      	ldr	r3, [pc, #148]	; (80181d0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	69ba      	ldr	r2, [r7, #24]
 801813e:	429a      	cmp	r2, r3
 8018140:	d10a      	bne.n	8018158 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8018142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018146:	f383 8811 	msr	BASEPRI, r3
 801814a:	f3bf 8f6f 	isb	sy
 801814e:	f3bf 8f4f 	dsb	sy
 8018152:	60bb      	str	r3, [r7, #8]
}
 8018154:	bf00      	nop
 8018156:	e7fe      	b.n	8018156 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018158:	69bb      	ldr	r3, [r7, #24]
 801815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801815e:	69bb      	ldr	r3, [r7, #24]
 8018160:	69fa      	ldr	r2, [r7, #28]
 8018162:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018164:	69bb      	ldr	r3, [r7, #24]
 8018166:	699b      	ldr	r3, [r3, #24]
 8018168:	2b00      	cmp	r3, #0
 801816a:	db04      	blt.n	8018176 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801816c:	69fb      	ldr	r3, [r7, #28]
 801816e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018172:	69bb      	ldr	r3, [r7, #24]
 8018174:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018176:	69bb      	ldr	r3, [r7, #24]
 8018178:	6959      	ldr	r1, [r3, #20]
 801817a:	693a      	ldr	r2, [r7, #16]
 801817c:	4613      	mov	r3, r2
 801817e:	009b      	lsls	r3, r3, #2
 8018180:	4413      	add	r3, r2
 8018182:	009b      	lsls	r3, r3, #2
 8018184:	4a13      	ldr	r2, [pc, #76]	; (80181d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018186:	4413      	add	r3, r2
 8018188:	4299      	cmp	r1, r3
 801818a:	d11c      	bne.n	80181c6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801818c:	69bb      	ldr	r3, [r7, #24]
 801818e:	3304      	adds	r3, #4
 8018190:	4618      	mov	r0, r3
 8018192:	f7fd fe3d 	bl	8015e10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018196:	69bb      	ldr	r3, [r7, #24]
 8018198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801819a:	4b0f      	ldr	r3, [pc, #60]	; (80181d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	429a      	cmp	r2, r3
 80181a0:	d903      	bls.n	80181aa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80181a2:	69bb      	ldr	r3, [r7, #24]
 80181a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181a6:	4a0c      	ldr	r2, [pc, #48]	; (80181d8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80181a8:	6013      	str	r3, [r2, #0]
 80181aa:	69bb      	ldr	r3, [r7, #24]
 80181ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181ae:	4613      	mov	r3, r2
 80181b0:	009b      	lsls	r3, r3, #2
 80181b2:	4413      	add	r3, r2
 80181b4:	009b      	lsls	r3, r3, #2
 80181b6:	4a07      	ldr	r2, [pc, #28]	; (80181d4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80181b8:	441a      	add	r2, r3
 80181ba:	69bb      	ldr	r3, [r7, #24]
 80181bc:	3304      	adds	r3, #4
 80181be:	4619      	mov	r1, r3
 80181c0:	4610      	mov	r0, r2
 80181c2:	f7fd fdc8 	bl	8015d56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80181c6:	bf00      	nop
 80181c8:	3720      	adds	r7, #32
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bd80      	pop	{r7, pc}
 80181ce:	bf00      	nop
 80181d0:	20003010 	.word	0x20003010
 80181d4:	20003014 	.word	0x20003014
 80181d8:	200034ec 	.word	0x200034ec

080181dc <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b084      	sub	sp, #16
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	6078      	str	r0, [r7, #4]
 80181e4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80181e6:	6839      	ldr	r1, [r7, #0]
 80181e8:	6878      	ldr	r0, [r7, #4]
 80181ea:	f002 fdbf 	bl	801ad6c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80181ee:	6878      	ldr	r0, [r7, #4]
 80181f0:	f7e7 ffee 	bl	80001d0 <strlen>
 80181f4:	60f8      	str	r0, [r7, #12]
 80181f6:	e007      	b.n	8018208 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	4413      	add	r3, r2
 80181fe:	2220      	movs	r2, #32
 8018200:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8018202:	68fb      	ldr	r3, [r7, #12]
 8018204:	3301      	adds	r3, #1
 8018206:	60fb      	str	r3, [r7, #12]
 8018208:	68fb      	ldr	r3, [r7, #12]
 801820a:	2b0e      	cmp	r3, #14
 801820c:	d9f4      	bls.n	80181f8 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 801820e:	687a      	ldr	r2, [r7, #4]
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	4413      	add	r3, r2
 8018214:	2200      	movs	r2, #0
 8018216:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8018218:	687a      	ldr	r2, [r7, #4]
 801821a:	68fb      	ldr	r3, [r7, #12]
 801821c:	4413      	add	r3, r2
	}
 801821e:	4618      	mov	r0, r3
 8018220:	3710      	adds	r7, #16
 8018222:	46bd      	mov	sp, r7
 8018224:	bd80      	pop	{r7, pc}
	...

08018228 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8018228:	b590      	push	{r4, r7, lr}
 801822a:	b089      	sub	sp, #36	; 0x24
 801822c:	af02      	add	r7, sp, #8
 801822e:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2200      	movs	r2, #0
 8018234:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8018236:	4b45      	ldr	r3, [pc, #276]	; (801834c <vTaskList+0x124>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 801823c:	4b43      	ldr	r3, [pc, #268]	; (801834c <vTaskList+0x124>)
 801823e:	681a      	ldr	r2, [r3, #0]
 8018240:	4613      	mov	r3, r2
 8018242:	00db      	lsls	r3, r3, #3
 8018244:	4413      	add	r3, r2
 8018246:	009b      	lsls	r3, r3, #2
 8018248:	4618      	mov	r0, r3
 801824a:	f000 ff0d 	bl	8019068 <pvPortMalloc>
 801824e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8018250:	68bb      	ldr	r3, [r7, #8]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d076      	beq.n	8018344 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8018256:	2200      	movs	r2, #0
 8018258:	68f9      	ldr	r1, [r7, #12]
 801825a:	68b8      	ldr	r0, [r7, #8]
 801825c:	f7ff f996 	bl	801758c <uxTaskGetSystemState>
 8018260:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8018262:	2300      	movs	r3, #0
 8018264:	617b      	str	r3, [r7, #20]
 8018266:	e066      	b.n	8018336 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8018268:	697a      	ldr	r2, [r7, #20]
 801826a:	4613      	mov	r3, r2
 801826c:	00db      	lsls	r3, r3, #3
 801826e:	4413      	add	r3, r2
 8018270:	009b      	lsls	r3, r3, #2
 8018272:	461a      	mov	r2, r3
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	4413      	add	r3, r2
 8018278:	7b1b      	ldrb	r3, [r3, #12]
 801827a:	2b04      	cmp	r3, #4
 801827c:	d81b      	bhi.n	80182b6 <vTaskList+0x8e>
 801827e:	a201      	add	r2, pc, #4	; (adr r2, 8018284 <vTaskList+0x5c>)
 8018280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018284:	08018299 	.word	0x08018299
 8018288:	0801829f 	.word	0x0801829f
 801828c:	080182a5 	.word	0x080182a5
 8018290:	080182ab 	.word	0x080182ab
 8018294:	080182b1 	.word	0x080182b1
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8018298:	2358      	movs	r3, #88	; 0x58
 801829a:	74fb      	strb	r3, [r7, #19]
										break;
 801829c:	e00e      	b.n	80182bc <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 801829e:	2352      	movs	r3, #82	; 0x52
 80182a0:	74fb      	strb	r3, [r7, #19]
										break;
 80182a2:	e00b      	b.n	80182bc <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 80182a4:	2342      	movs	r3, #66	; 0x42
 80182a6:	74fb      	strb	r3, [r7, #19]
										break;
 80182a8:	e008      	b.n	80182bc <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 80182aa:	2353      	movs	r3, #83	; 0x53
 80182ac:	74fb      	strb	r3, [r7, #19]
										break;
 80182ae:	e005      	b.n	80182bc <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 80182b0:	2344      	movs	r3, #68	; 0x44
 80182b2:	74fb      	strb	r3, [r7, #19]
										break;
 80182b4:	e002      	b.n	80182bc <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 80182b6:	2300      	movs	r3, #0
 80182b8:	74fb      	strb	r3, [r7, #19]
										break;
 80182ba:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80182bc:	697a      	ldr	r2, [r7, #20]
 80182be:	4613      	mov	r3, r2
 80182c0:	00db      	lsls	r3, r3, #3
 80182c2:	4413      	add	r3, r2
 80182c4:	009b      	lsls	r3, r3, #2
 80182c6:	461a      	mov	r2, r3
 80182c8:	68bb      	ldr	r3, [r7, #8]
 80182ca:	4413      	add	r3, r2
 80182cc:	685b      	ldr	r3, [r3, #4]
 80182ce:	4619      	mov	r1, r3
 80182d0:	6878      	ldr	r0, [r7, #4]
 80182d2:	f7ff ff83 	bl	80181dc <prvWriteNameToBuffer>
 80182d6:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80182d8:	7cf9      	ldrb	r1, [r7, #19]
 80182da:	697a      	ldr	r2, [r7, #20]
 80182dc:	4613      	mov	r3, r2
 80182de:	00db      	lsls	r3, r3, #3
 80182e0:	4413      	add	r3, r2
 80182e2:	009b      	lsls	r3, r3, #2
 80182e4:	461a      	mov	r2, r3
 80182e6:	68bb      	ldr	r3, [r7, #8]
 80182e8:	4413      	add	r3, r2
 80182ea:	6918      	ldr	r0, [r3, #16]
 80182ec:	697a      	ldr	r2, [r7, #20]
 80182ee:	4613      	mov	r3, r2
 80182f0:	00db      	lsls	r3, r3, #3
 80182f2:	4413      	add	r3, r2
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	461a      	mov	r2, r3
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	4413      	add	r3, r2
 80182fc:	8c1b      	ldrh	r3, [r3, #32]
 80182fe:	461c      	mov	r4, r3
 8018300:	697a      	ldr	r2, [r7, #20]
 8018302:	4613      	mov	r3, r2
 8018304:	00db      	lsls	r3, r3, #3
 8018306:	4413      	add	r3, r2
 8018308:	009b      	lsls	r3, r3, #2
 801830a:	461a      	mov	r2, r3
 801830c:	68bb      	ldr	r3, [r7, #8]
 801830e:	4413      	add	r3, r2
 8018310:	689b      	ldr	r3, [r3, #8]
 8018312:	9301      	str	r3, [sp, #4]
 8018314:	9400      	str	r4, [sp, #0]
 8018316:	4603      	mov	r3, r0
 8018318:	460a      	mov	r2, r1
 801831a:	490d      	ldr	r1, [pc, #52]	; (8018350 <vTaskList+0x128>)
 801831c:	6878      	ldr	r0, [r7, #4]
 801831e:	f002 fcb3 	bl	801ac88 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8018322:	6878      	ldr	r0, [r7, #4]
 8018324:	f7e7 ff54 	bl	80001d0 <strlen>
 8018328:	4602      	mov	r2, r0
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	4413      	add	r3, r2
 801832e:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8018330:	697b      	ldr	r3, [r7, #20]
 8018332:	3301      	adds	r3, #1
 8018334:	617b      	str	r3, [r7, #20]
 8018336:	697a      	ldr	r2, [r7, #20]
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	429a      	cmp	r2, r3
 801833c:	d394      	bcc.n	8018268 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801833e:	68b8      	ldr	r0, [r7, #8]
 8018340:	f000 ff5e 	bl	8019200 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018344:	bf00      	nop
 8018346:	371c      	adds	r7, #28
 8018348:	46bd      	mov	sp, r7
 801834a:	bd90      	pop	{r4, r7, pc}
 801834c:	200034e4 	.word	0x200034e4
 8018350:	0801dcac 	.word	0x0801dcac

08018354 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8018354:	b580      	push	{r7, lr}
 8018356:	b088      	sub	sp, #32
 8018358:	af00      	add	r7, sp, #0
 801835a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	2200      	movs	r2, #0
 8018360:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8018362:	4b3a      	ldr	r3, [pc, #232]	; (801844c <vTaskGetRunTimeStats+0xf8>)
 8018364:	681b      	ldr	r3, [r3, #0]
 8018366:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8018368:	4b38      	ldr	r3, [pc, #224]	; (801844c <vTaskGetRunTimeStats+0xf8>)
 801836a:	681a      	ldr	r2, [r3, #0]
 801836c:	4613      	mov	r3, r2
 801836e:	00db      	lsls	r3, r3, #3
 8018370:	4413      	add	r3, r2
 8018372:	009b      	lsls	r3, r3, #2
 8018374:	4618      	mov	r0, r3
 8018376:	f000 fe77 	bl	8019068 <pvPortMalloc>
 801837a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d05f      	beq.n	8018442 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8018382:	f107 030c 	add.w	r3, r7, #12
 8018386:	461a      	mov	r2, r3
 8018388:	69b9      	ldr	r1, [r7, #24]
 801838a:	6978      	ldr	r0, [r7, #20]
 801838c:	f7ff f8fe 	bl	801758c <uxTaskGetSystemState>
 8018390:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	4a2e      	ldr	r2, [pc, #184]	; (8018450 <vTaskGetRunTimeStats+0xfc>)
 8018396:	fba2 2303 	umull	r2, r3, r2, r3
 801839a:	095b      	lsrs	r3, r3, #5
 801839c:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d04b      	beq.n	801843c <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 80183a4:	2300      	movs	r3, #0
 80183a6:	61fb      	str	r3, [r7, #28]
 80183a8:	e044      	b.n	8018434 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 80183aa:	69fa      	ldr	r2, [r7, #28]
 80183ac:	4613      	mov	r3, r2
 80183ae:	00db      	lsls	r3, r3, #3
 80183b0:	4413      	add	r3, r2
 80183b2:	009b      	lsls	r3, r3, #2
 80183b4:	461a      	mov	r2, r3
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	4413      	add	r3, r2
 80183ba:	699a      	ldr	r2, [r3, #24]
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	fbb2 f3f3 	udiv	r3, r2, r3
 80183c2:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80183c4:	69fa      	ldr	r2, [r7, #28]
 80183c6:	4613      	mov	r3, r2
 80183c8:	00db      	lsls	r3, r3, #3
 80183ca:	4413      	add	r3, r2
 80183cc:	009b      	lsls	r3, r3, #2
 80183ce:	461a      	mov	r2, r3
 80183d0:	697b      	ldr	r3, [r7, #20]
 80183d2:	4413      	add	r3, r2
 80183d4:	685b      	ldr	r3, [r3, #4]
 80183d6:	4619      	mov	r1, r3
 80183d8:	6878      	ldr	r0, [r7, #4]
 80183da:	f7ff feff 	bl	80181dc <prvWriteNameToBuffer>
 80183de:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 80183e0:	693b      	ldr	r3, [r7, #16]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d00e      	beq.n	8018404 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80183e6:	69fa      	ldr	r2, [r7, #28]
 80183e8:	4613      	mov	r3, r2
 80183ea:	00db      	lsls	r3, r3, #3
 80183ec:	4413      	add	r3, r2
 80183ee:	009b      	lsls	r3, r3, #2
 80183f0:	461a      	mov	r2, r3
 80183f2:	697b      	ldr	r3, [r7, #20]
 80183f4:	4413      	add	r3, r2
 80183f6:	699a      	ldr	r2, [r3, #24]
 80183f8:	693b      	ldr	r3, [r7, #16]
 80183fa:	4916      	ldr	r1, [pc, #88]	; (8018454 <vTaskGetRunTimeStats+0x100>)
 80183fc:	6878      	ldr	r0, [r7, #4]
 80183fe:	f002 fc43 	bl	801ac88 <siprintf>
 8018402:	e00d      	b.n	8018420 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8018404:	69fa      	ldr	r2, [r7, #28]
 8018406:	4613      	mov	r3, r2
 8018408:	00db      	lsls	r3, r3, #3
 801840a:	4413      	add	r3, r2
 801840c:	009b      	lsls	r3, r3, #2
 801840e:	461a      	mov	r2, r3
 8018410:	697b      	ldr	r3, [r7, #20]
 8018412:	4413      	add	r3, r2
 8018414:	699b      	ldr	r3, [r3, #24]
 8018416:	461a      	mov	r2, r3
 8018418:	490f      	ldr	r1, [pc, #60]	; (8018458 <vTaskGetRunTimeStats+0x104>)
 801841a:	6878      	ldr	r0, [r7, #4]
 801841c:	f002 fc34 	bl	801ac88 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8018420:	6878      	ldr	r0, [r7, #4]
 8018422:	f7e7 fed5 	bl	80001d0 <strlen>
 8018426:	4602      	mov	r2, r0
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	4413      	add	r3, r2
 801842c:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 801842e:	69fb      	ldr	r3, [r7, #28]
 8018430:	3301      	adds	r3, #1
 8018432:	61fb      	str	r3, [r7, #28]
 8018434:	69fa      	ldr	r2, [r7, #28]
 8018436:	69bb      	ldr	r3, [r7, #24]
 8018438:	429a      	cmp	r2, r3
 801843a:	d3b6      	bcc.n	80183aa <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 801843c:	6978      	ldr	r0, [r7, #20]
 801843e:	f000 fedf 	bl	8019200 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018442:	bf00      	nop
 8018444:	3720      	adds	r7, #32
 8018446:	46bd      	mov	sp, r7
 8018448:	bd80      	pop	{r7, pc}
 801844a:	bf00      	nop
 801844c:	200034e4 	.word	0x200034e4
 8018450:	51eb851f 	.word	0x51eb851f
 8018454:	0801dcbc 	.word	0x0801dcbc
 8018458:	0801dcc8 	.word	0x0801dcc8

0801845c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801845c:	b480      	push	{r7}
 801845e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018460:	4b07      	ldr	r3, [pc, #28]	; (8018480 <pvTaskIncrementMutexHeldCount+0x24>)
 8018462:	681b      	ldr	r3, [r3, #0]
 8018464:	2b00      	cmp	r3, #0
 8018466:	d004      	beq.n	8018472 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018468:	4b05      	ldr	r3, [pc, #20]	; (8018480 <pvTaskIncrementMutexHeldCount+0x24>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801846e:	3201      	adds	r2, #1
 8018470:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018472:	4b03      	ldr	r3, [pc, #12]	; (8018480 <pvTaskIncrementMutexHeldCount+0x24>)
 8018474:	681b      	ldr	r3, [r3, #0]
	}
 8018476:	4618      	mov	r0, r3
 8018478:	46bd      	mov	sp, r7
 801847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801847e:	4770      	bx	lr
 8018480:	20003010 	.word	0x20003010

08018484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018484:	b580      	push	{r7, lr}
 8018486:	b084      	sub	sp, #16
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
 801848c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801848e:	4b21      	ldr	r3, [pc, #132]	; (8018514 <prvAddCurrentTaskToDelayedList+0x90>)
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018494:	4b20      	ldr	r3, [pc, #128]	; (8018518 <prvAddCurrentTaskToDelayedList+0x94>)
 8018496:	681b      	ldr	r3, [r3, #0]
 8018498:	3304      	adds	r3, #4
 801849a:	4618      	mov	r0, r3
 801849c:	f7fd fcb8 	bl	8015e10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80184a6:	d10a      	bne.n	80184be <prvAddCurrentTaskToDelayedList+0x3a>
 80184a8:	683b      	ldr	r3, [r7, #0]
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d007      	beq.n	80184be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80184ae:	4b1a      	ldr	r3, [pc, #104]	; (8018518 <prvAddCurrentTaskToDelayedList+0x94>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	3304      	adds	r3, #4
 80184b4:	4619      	mov	r1, r3
 80184b6:	4819      	ldr	r0, [pc, #100]	; (801851c <prvAddCurrentTaskToDelayedList+0x98>)
 80184b8:	f7fd fc4d 	bl	8015d56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80184bc:	e026      	b.n	801850c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80184be:	68fa      	ldr	r2, [r7, #12]
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	4413      	add	r3, r2
 80184c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80184c6:	4b14      	ldr	r3, [pc, #80]	; (8018518 <prvAddCurrentTaskToDelayedList+0x94>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	68ba      	ldr	r2, [r7, #8]
 80184cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80184ce:	68ba      	ldr	r2, [r7, #8]
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	429a      	cmp	r2, r3
 80184d4:	d209      	bcs.n	80184ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80184d6:	4b12      	ldr	r3, [pc, #72]	; (8018520 <prvAddCurrentTaskToDelayedList+0x9c>)
 80184d8:	681a      	ldr	r2, [r3, #0]
 80184da:	4b0f      	ldr	r3, [pc, #60]	; (8018518 <prvAddCurrentTaskToDelayedList+0x94>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	3304      	adds	r3, #4
 80184e0:	4619      	mov	r1, r3
 80184e2:	4610      	mov	r0, r2
 80184e4:	f7fd fc5b 	bl	8015d9e <vListInsert>
}
 80184e8:	e010      	b.n	801850c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80184ea:	4b0e      	ldr	r3, [pc, #56]	; (8018524 <prvAddCurrentTaskToDelayedList+0xa0>)
 80184ec:	681a      	ldr	r2, [r3, #0]
 80184ee:	4b0a      	ldr	r3, [pc, #40]	; (8018518 <prvAddCurrentTaskToDelayedList+0x94>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	3304      	adds	r3, #4
 80184f4:	4619      	mov	r1, r3
 80184f6:	4610      	mov	r0, r2
 80184f8:	f7fd fc51 	bl	8015d9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80184fc:	4b0a      	ldr	r3, [pc, #40]	; (8018528 <prvAddCurrentTaskToDelayedList+0xa4>)
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	68ba      	ldr	r2, [r7, #8]
 8018502:	429a      	cmp	r2, r3
 8018504:	d202      	bcs.n	801850c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018506:	4a08      	ldr	r2, [pc, #32]	; (8018528 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018508:	68bb      	ldr	r3, [r7, #8]
 801850a:	6013      	str	r3, [r2, #0]
}
 801850c:	bf00      	nop
 801850e:	3710      	adds	r7, #16
 8018510:	46bd      	mov	sp, r7
 8018512:	bd80      	pop	{r7, pc}
 8018514:	200034e8 	.word	0x200034e8
 8018518:	20003010 	.word	0x20003010
 801851c:	200034d0 	.word	0x200034d0
 8018520:	200034a0 	.word	0x200034a0
 8018524:	2000349c 	.word	0x2000349c
 8018528:	20003504 	.word	0x20003504

0801852c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801852c:	b580      	push	{r7, lr}
 801852e:	b08a      	sub	sp, #40	; 0x28
 8018530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018532:	2300      	movs	r3, #0
 8018534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018536:	f000 fb07 	bl	8018b48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801853a:	4b1c      	ldr	r3, [pc, #112]	; (80185ac <xTimerCreateTimerTask+0x80>)
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d021      	beq.n	8018586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018542:	2300      	movs	r3, #0
 8018544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018546:	2300      	movs	r3, #0
 8018548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801854a:	1d3a      	adds	r2, r7, #4
 801854c:	f107 0108 	add.w	r1, r7, #8
 8018550:	f107 030c 	add.w	r3, r7, #12
 8018554:	4618      	mov	r0, r3
 8018556:	f7fd fbb7 	bl	8015cc8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801855a:	6879      	ldr	r1, [r7, #4]
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	68fa      	ldr	r2, [r7, #12]
 8018560:	9202      	str	r2, [sp, #8]
 8018562:	9301      	str	r3, [sp, #4]
 8018564:	2302      	movs	r3, #2
 8018566:	9300      	str	r3, [sp, #0]
 8018568:	2300      	movs	r3, #0
 801856a:	460a      	mov	r2, r1
 801856c:	4910      	ldr	r1, [pc, #64]	; (80185b0 <xTimerCreateTimerTask+0x84>)
 801856e:	4811      	ldr	r0, [pc, #68]	; (80185b4 <xTimerCreateTimerTask+0x88>)
 8018570:	f7fe fc86 	bl	8016e80 <xTaskCreateStatic>
 8018574:	4603      	mov	r3, r0
 8018576:	4a10      	ldr	r2, [pc, #64]	; (80185b8 <xTimerCreateTimerTask+0x8c>)
 8018578:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801857a:	4b0f      	ldr	r3, [pc, #60]	; (80185b8 <xTimerCreateTimerTask+0x8c>)
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d001      	beq.n	8018586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018582:	2301      	movs	r3, #1
 8018584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018586:	697b      	ldr	r3, [r7, #20]
 8018588:	2b00      	cmp	r3, #0
 801858a:	d10a      	bne.n	80185a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018590:	f383 8811 	msr	BASEPRI, r3
 8018594:	f3bf 8f6f 	isb	sy
 8018598:	f3bf 8f4f 	dsb	sy
 801859c:	613b      	str	r3, [r7, #16]
}
 801859e:	bf00      	nop
 80185a0:	e7fe      	b.n	80185a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80185a2:	697b      	ldr	r3, [r7, #20]
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3718      	adds	r7, #24
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	20003548 	.word	0x20003548
 80185b0:	0801dcd4 	.word	0x0801dcd4
 80185b4:	080186f1 	.word	0x080186f1
 80185b8:	2000354c 	.word	0x2000354c

080185bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b08a      	sub	sp, #40	; 0x28
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	607a      	str	r2, [r7, #4]
 80185c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80185ca:	2300      	movs	r3, #0
 80185cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80185ce:	68fb      	ldr	r3, [r7, #12]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d10a      	bne.n	80185ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80185d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80185d8:	f383 8811 	msr	BASEPRI, r3
 80185dc:	f3bf 8f6f 	isb	sy
 80185e0:	f3bf 8f4f 	dsb	sy
 80185e4:	623b      	str	r3, [r7, #32]
}
 80185e6:	bf00      	nop
 80185e8:	e7fe      	b.n	80185e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80185ea:	4b1a      	ldr	r3, [pc, #104]	; (8018654 <xTimerGenericCommand+0x98>)
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d02a      	beq.n	8018648 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80185f2:	68bb      	ldr	r3, [r7, #8]
 80185f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80185fe:	68bb      	ldr	r3, [r7, #8]
 8018600:	2b05      	cmp	r3, #5
 8018602:	dc18      	bgt.n	8018636 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018604:	f7ff fc74 	bl	8017ef0 <xTaskGetSchedulerState>
 8018608:	4603      	mov	r3, r0
 801860a:	2b02      	cmp	r3, #2
 801860c:	d109      	bne.n	8018622 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801860e:	4b11      	ldr	r3, [pc, #68]	; (8018654 <xTimerGenericCommand+0x98>)
 8018610:	6818      	ldr	r0, [r3, #0]
 8018612:	f107 0110 	add.w	r1, r7, #16
 8018616:	2300      	movs	r3, #0
 8018618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801861a:	f7fd fdcb 	bl	80161b4 <xQueueGenericSend>
 801861e:	6278      	str	r0, [r7, #36]	; 0x24
 8018620:	e012      	b.n	8018648 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018622:	4b0c      	ldr	r3, [pc, #48]	; (8018654 <xTimerGenericCommand+0x98>)
 8018624:	6818      	ldr	r0, [r3, #0]
 8018626:	f107 0110 	add.w	r1, r7, #16
 801862a:	2300      	movs	r3, #0
 801862c:	2200      	movs	r2, #0
 801862e:	f7fd fdc1 	bl	80161b4 <xQueueGenericSend>
 8018632:	6278      	str	r0, [r7, #36]	; 0x24
 8018634:	e008      	b.n	8018648 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018636:	4b07      	ldr	r3, [pc, #28]	; (8018654 <xTimerGenericCommand+0x98>)
 8018638:	6818      	ldr	r0, [r3, #0]
 801863a:	f107 0110 	add.w	r1, r7, #16
 801863e:	2300      	movs	r3, #0
 8018640:	683a      	ldr	r2, [r7, #0]
 8018642:	f7fd feb5 	bl	80163b0 <xQueueGenericSendFromISR>
 8018646:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801864a:	4618      	mov	r0, r3
 801864c:	3728      	adds	r7, #40	; 0x28
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	20003548 	.word	0x20003548

08018658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018658:	b580      	push	{r7, lr}
 801865a:	b088      	sub	sp, #32
 801865c:	af02      	add	r7, sp, #8
 801865e:	6078      	str	r0, [r7, #4]
 8018660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018662:	4b22      	ldr	r3, [pc, #136]	; (80186ec <prvProcessExpiredTimer+0x94>)
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	68db      	ldr	r3, [r3, #12]
 8018668:	68db      	ldr	r3, [r3, #12]
 801866a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801866c:	697b      	ldr	r3, [r7, #20]
 801866e:	3304      	adds	r3, #4
 8018670:	4618      	mov	r0, r3
 8018672:	f7fd fbcd 	bl	8015e10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801867c:	f003 0304 	and.w	r3, r3, #4
 8018680:	2b00      	cmp	r3, #0
 8018682:	d022      	beq.n	80186ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018684:	697b      	ldr	r3, [r7, #20]
 8018686:	699a      	ldr	r2, [r3, #24]
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	18d1      	adds	r1, r2, r3
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	683a      	ldr	r2, [r7, #0]
 8018690:	6978      	ldr	r0, [r7, #20]
 8018692:	f000 f8d1 	bl	8018838 <prvInsertTimerInActiveList>
 8018696:	4603      	mov	r3, r0
 8018698:	2b00      	cmp	r3, #0
 801869a:	d01f      	beq.n	80186dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801869c:	2300      	movs	r3, #0
 801869e:	9300      	str	r3, [sp, #0]
 80186a0:	2300      	movs	r3, #0
 80186a2:	687a      	ldr	r2, [r7, #4]
 80186a4:	2100      	movs	r1, #0
 80186a6:	6978      	ldr	r0, [r7, #20]
 80186a8:	f7ff ff88 	bl	80185bc <xTimerGenericCommand>
 80186ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80186ae:	693b      	ldr	r3, [r7, #16]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d113      	bne.n	80186dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80186b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186b8:	f383 8811 	msr	BASEPRI, r3
 80186bc:	f3bf 8f6f 	isb	sy
 80186c0:	f3bf 8f4f 	dsb	sy
 80186c4:	60fb      	str	r3, [r7, #12]
}
 80186c6:	bf00      	nop
 80186c8:	e7fe      	b.n	80186c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80186ca:	697b      	ldr	r3, [r7, #20]
 80186cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80186d0:	f023 0301 	bic.w	r3, r3, #1
 80186d4:	b2da      	uxtb	r2, r3
 80186d6:	697b      	ldr	r3, [r7, #20]
 80186d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80186dc:	697b      	ldr	r3, [r7, #20]
 80186de:	6a1b      	ldr	r3, [r3, #32]
 80186e0:	6978      	ldr	r0, [r7, #20]
 80186e2:	4798      	blx	r3
}
 80186e4:	bf00      	nop
 80186e6:	3718      	adds	r7, #24
 80186e8:	46bd      	mov	sp, r7
 80186ea:	bd80      	pop	{r7, pc}
 80186ec:	20003540 	.word	0x20003540

080186f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80186f8:	f107 0308 	add.w	r3, r7, #8
 80186fc:	4618      	mov	r0, r3
 80186fe:	f000 f857 	bl	80187b0 <prvGetNextExpireTime>
 8018702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	4619      	mov	r1, r3
 8018708:	68f8      	ldr	r0, [r7, #12]
 801870a:	f000 f803 	bl	8018714 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801870e:	f000 f8d5 	bl	80188bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018712:	e7f1      	b.n	80186f8 <prvTimerTask+0x8>

08018714 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b084      	sub	sp, #16
 8018718:	af00      	add	r7, sp, #0
 801871a:	6078      	str	r0, [r7, #4]
 801871c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801871e:	f7fe fe79 	bl	8017414 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018722:	f107 0308 	add.w	r3, r7, #8
 8018726:	4618      	mov	r0, r3
 8018728:	f000 f866 	bl	80187f8 <prvSampleTimeNow>
 801872c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801872e:	68bb      	ldr	r3, [r7, #8]
 8018730:	2b00      	cmp	r3, #0
 8018732:	d130      	bne.n	8018796 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018734:	683b      	ldr	r3, [r7, #0]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d10a      	bne.n	8018750 <prvProcessTimerOrBlockTask+0x3c>
 801873a:	687a      	ldr	r2, [r7, #4]
 801873c:	68fb      	ldr	r3, [r7, #12]
 801873e:	429a      	cmp	r2, r3
 8018740:	d806      	bhi.n	8018750 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018742:	f7fe fe75 	bl	8017430 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018746:	68f9      	ldr	r1, [r7, #12]
 8018748:	6878      	ldr	r0, [r7, #4]
 801874a:	f7ff ff85 	bl	8018658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801874e:	e024      	b.n	801879a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018750:	683b      	ldr	r3, [r7, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d008      	beq.n	8018768 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018756:	4b13      	ldr	r3, [pc, #76]	; (80187a4 <prvProcessTimerOrBlockTask+0x90>)
 8018758:	681b      	ldr	r3, [r3, #0]
 801875a:	681b      	ldr	r3, [r3, #0]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d101      	bne.n	8018764 <prvProcessTimerOrBlockTask+0x50>
 8018760:	2301      	movs	r3, #1
 8018762:	e000      	b.n	8018766 <prvProcessTimerOrBlockTask+0x52>
 8018764:	2300      	movs	r3, #0
 8018766:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018768:	4b0f      	ldr	r3, [pc, #60]	; (80187a8 <prvProcessTimerOrBlockTask+0x94>)
 801876a:	6818      	ldr	r0, [r3, #0]
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	1ad3      	subs	r3, r2, r3
 8018772:	683a      	ldr	r2, [r7, #0]
 8018774:	4619      	mov	r1, r3
 8018776:	f7fe fb4f 	bl	8016e18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801877a:	f7fe fe59 	bl	8017430 <xTaskResumeAll>
 801877e:	4603      	mov	r3, r0
 8018780:	2b00      	cmp	r3, #0
 8018782:	d10a      	bne.n	801879a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018784:	4b09      	ldr	r3, [pc, #36]	; (80187ac <prvProcessTimerOrBlockTask+0x98>)
 8018786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801878a:	601a      	str	r2, [r3, #0]
 801878c:	f3bf 8f4f 	dsb	sy
 8018790:	f3bf 8f6f 	isb	sy
}
 8018794:	e001      	b.n	801879a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018796:	f7fe fe4b 	bl	8017430 <xTaskResumeAll>
}
 801879a:	bf00      	nop
 801879c:	3710      	adds	r7, #16
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	20003544 	.word	0x20003544
 80187a8:	20003548 	.word	0x20003548
 80187ac:	e000ed04 	.word	0xe000ed04

080187b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80187b0:	b480      	push	{r7}
 80187b2:	b085      	sub	sp, #20
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80187b8:	4b0e      	ldr	r3, [pc, #56]	; (80187f4 <prvGetNextExpireTime+0x44>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d101      	bne.n	80187c6 <prvGetNextExpireTime+0x16>
 80187c2:	2201      	movs	r2, #1
 80187c4:	e000      	b.n	80187c8 <prvGetNextExpireTime+0x18>
 80187c6:	2200      	movs	r2, #0
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d105      	bne.n	80187e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80187d4:	4b07      	ldr	r3, [pc, #28]	; (80187f4 <prvGetNextExpireTime+0x44>)
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	68db      	ldr	r3, [r3, #12]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	60fb      	str	r3, [r7, #12]
 80187de:	e001      	b.n	80187e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80187e0:	2300      	movs	r3, #0
 80187e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80187e4:	68fb      	ldr	r3, [r7, #12]
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3714      	adds	r7, #20
 80187ea:	46bd      	mov	sp, r7
 80187ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187f0:	4770      	bx	lr
 80187f2:	bf00      	nop
 80187f4:	20003540 	.word	0x20003540

080187f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80187f8:	b580      	push	{r7, lr}
 80187fa:	b084      	sub	sp, #16
 80187fc:	af00      	add	r7, sp, #0
 80187fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018800:	f7fe feb4 	bl	801756c <xTaskGetTickCount>
 8018804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018806:	4b0b      	ldr	r3, [pc, #44]	; (8018834 <prvSampleTimeNow+0x3c>)
 8018808:	681b      	ldr	r3, [r3, #0]
 801880a:	68fa      	ldr	r2, [r7, #12]
 801880c:	429a      	cmp	r2, r3
 801880e:	d205      	bcs.n	801881c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018810:	f000 f936 	bl	8018a80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2201      	movs	r2, #1
 8018818:	601a      	str	r2, [r3, #0]
 801881a:	e002      	b.n	8018822 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	2200      	movs	r2, #0
 8018820:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018822:	4a04      	ldr	r2, [pc, #16]	; (8018834 <prvSampleTimeNow+0x3c>)
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018828:	68fb      	ldr	r3, [r7, #12]
}
 801882a:	4618      	mov	r0, r3
 801882c:	3710      	adds	r7, #16
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}
 8018832:	bf00      	nop
 8018834:	20003550 	.word	0x20003550

08018838 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b086      	sub	sp, #24
 801883c:	af00      	add	r7, sp, #0
 801883e:	60f8      	str	r0, [r7, #12]
 8018840:	60b9      	str	r1, [r7, #8]
 8018842:	607a      	str	r2, [r7, #4]
 8018844:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018846:	2300      	movs	r3, #0
 8018848:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801884a:	68fb      	ldr	r3, [r7, #12]
 801884c:	68ba      	ldr	r2, [r7, #8]
 801884e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018850:	68fb      	ldr	r3, [r7, #12]
 8018852:	68fa      	ldr	r2, [r7, #12]
 8018854:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018856:	68ba      	ldr	r2, [r7, #8]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	429a      	cmp	r2, r3
 801885c:	d812      	bhi.n	8018884 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	1ad2      	subs	r2, r2, r3
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	699b      	ldr	r3, [r3, #24]
 8018868:	429a      	cmp	r2, r3
 801886a:	d302      	bcc.n	8018872 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801886c:	2301      	movs	r3, #1
 801886e:	617b      	str	r3, [r7, #20]
 8018870:	e01b      	b.n	80188aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018872:	4b10      	ldr	r3, [pc, #64]	; (80188b4 <prvInsertTimerInActiveList+0x7c>)
 8018874:	681a      	ldr	r2, [r3, #0]
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	3304      	adds	r3, #4
 801887a:	4619      	mov	r1, r3
 801887c:	4610      	mov	r0, r2
 801887e:	f7fd fa8e 	bl	8015d9e <vListInsert>
 8018882:	e012      	b.n	80188aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018884:	687a      	ldr	r2, [r7, #4]
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	429a      	cmp	r2, r3
 801888a:	d206      	bcs.n	801889a <prvInsertTimerInActiveList+0x62>
 801888c:	68ba      	ldr	r2, [r7, #8]
 801888e:	683b      	ldr	r3, [r7, #0]
 8018890:	429a      	cmp	r2, r3
 8018892:	d302      	bcc.n	801889a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018894:	2301      	movs	r3, #1
 8018896:	617b      	str	r3, [r7, #20]
 8018898:	e007      	b.n	80188aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801889a:	4b07      	ldr	r3, [pc, #28]	; (80188b8 <prvInsertTimerInActiveList+0x80>)
 801889c:	681a      	ldr	r2, [r3, #0]
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	3304      	adds	r3, #4
 80188a2:	4619      	mov	r1, r3
 80188a4:	4610      	mov	r0, r2
 80188a6:	f7fd fa7a 	bl	8015d9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80188aa:	697b      	ldr	r3, [r7, #20]
}
 80188ac:	4618      	mov	r0, r3
 80188ae:	3718      	adds	r7, #24
 80188b0:	46bd      	mov	sp, r7
 80188b2:	bd80      	pop	{r7, pc}
 80188b4:	20003544 	.word	0x20003544
 80188b8:	20003540 	.word	0x20003540

080188bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b08e      	sub	sp, #56	; 0x38
 80188c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80188c2:	e0ca      	b.n	8018a5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	da18      	bge.n	80188fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80188ca:	1d3b      	adds	r3, r7, #4
 80188cc:	3304      	adds	r3, #4
 80188ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80188d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d10a      	bne.n	80188ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80188d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188da:	f383 8811 	msr	BASEPRI, r3
 80188de:	f3bf 8f6f 	isb	sy
 80188e2:	f3bf 8f4f 	dsb	sy
 80188e6:	61fb      	str	r3, [r7, #28]
}
 80188e8:	bf00      	nop
 80188ea:	e7fe      	b.n	80188ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80188ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188f2:	6850      	ldr	r0, [r2, #4]
 80188f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188f6:	6892      	ldr	r2, [r2, #8]
 80188f8:	4611      	mov	r1, r2
 80188fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	f2c0 80aa 	blt.w	8018a58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801890a:	695b      	ldr	r3, [r3, #20]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d004      	beq.n	801891a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018912:	3304      	adds	r3, #4
 8018914:	4618      	mov	r0, r3
 8018916:	f7fd fa7b 	bl	8015e10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801891a:	463b      	mov	r3, r7
 801891c:	4618      	mov	r0, r3
 801891e:	f7ff ff6b 	bl	80187f8 <prvSampleTimeNow>
 8018922:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	2b09      	cmp	r3, #9
 8018928:	f200 8097 	bhi.w	8018a5a <prvProcessReceivedCommands+0x19e>
 801892c:	a201      	add	r2, pc, #4	; (adr r2, 8018934 <prvProcessReceivedCommands+0x78>)
 801892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018932:	bf00      	nop
 8018934:	0801895d 	.word	0x0801895d
 8018938:	0801895d 	.word	0x0801895d
 801893c:	0801895d 	.word	0x0801895d
 8018940:	080189d1 	.word	0x080189d1
 8018944:	080189e5 	.word	0x080189e5
 8018948:	08018a2f 	.word	0x08018a2f
 801894c:	0801895d 	.word	0x0801895d
 8018950:	0801895d 	.word	0x0801895d
 8018954:	080189d1 	.word	0x080189d1
 8018958:	080189e5 	.word	0x080189e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801895c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801895e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018962:	f043 0301 	orr.w	r3, r3, #1
 8018966:	b2da      	uxtb	r2, r3
 8018968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801896a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801896e:	68ba      	ldr	r2, [r7, #8]
 8018970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018972:	699b      	ldr	r3, [r3, #24]
 8018974:	18d1      	adds	r1, r2, r3
 8018976:	68bb      	ldr	r3, [r7, #8]
 8018978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801897a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801897c:	f7ff ff5c 	bl	8018838 <prvInsertTimerInActiveList>
 8018980:	4603      	mov	r3, r0
 8018982:	2b00      	cmp	r3, #0
 8018984:	d069      	beq.n	8018a5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018988:	6a1b      	ldr	r3, [r3, #32]
 801898a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801898c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801898e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018994:	f003 0304 	and.w	r3, r3, #4
 8018998:	2b00      	cmp	r3, #0
 801899a:	d05e      	beq.n	8018a5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801899c:	68ba      	ldr	r2, [r7, #8]
 801899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a0:	699b      	ldr	r3, [r3, #24]
 80189a2:	441a      	add	r2, r3
 80189a4:	2300      	movs	r3, #0
 80189a6:	9300      	str	r3, [sp, #0]
 80189a8:	2300      	movs	r3, #0
 80189aa:	2100      	movs	r1, #0
 80189ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80189ae:	f7ff fe05 	bl	80185bc <xTimerGenericCommand>
 80189b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80189b4:	6a3b      	ldr	r3, [r7, #32]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d14f      	bne.n	8018a5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80189ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189be:	f383 8811 	msr	BASEPRI, r3
 80189c2:	f3bf 8f6f 	isb	sy
 80189c6:	f3bf 8f4f 	dsb	sy
 80189ca:	61bb      	str	r3, [r7, #24]
}
 80189cc:	bf00      	nop
 80189ce:	e7fe      	b.n	80189ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80189d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80189d6:	f023 0301 	bic.w	r3, r3, #1
 80189da:	b2da      	uxtb	r2, r3
 80189dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80189e2:	e03a      	b.n	8018a5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80189e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80189ea:	f043 0301 	orr.w	r3, r3, #1
 80189ee:	b2da      	uxtb	r2, r3
 80189f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80189f6:	68ba      	ldr	r2, [r7, #8]
 80189f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80189fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189fe:	699b      	ldr	r3, [r3, #24]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d10a      	bne.n	8018a1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a08:	f383 8811 	msr	BASEPRI, r3
 8018a0c:	f3bf 8f6f 	isb	sy
 8018a10:	f3bf 8f4f 	dsb	sy
 8018a14:	617b      	str	r3, [r7, #20]
}
 8018a16:	bf00      	nop
 8018a18:	e7fe      	b.n	8018a18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a1c:	699a      	ldr	r2, [r3, #24]
 8018a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a20:	18d1      	adds	r1, r2, r3
 8018a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a28:	f7ff ff06 	bl	8018838 <prvInsertTimerInActiveList>
					break;
 8018a2c:	e015      	b.n	8018a5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a34:	f003 0302 	and.w	r3, r3, #2
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d103      	bne.n	8018a44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a3e:	f000 fbdf 	bl	8019200 <vPortFree>
 8018a42:	e00a      	b.n	8018a5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a4a:	f023 0301 	bic.w	r3, r3, #1
 8018a4e:	b2da      	uxtb	r2, r3
 8018a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018a56:	e000      	b.n	8018a5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018a58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018a5a:	4b08      	ldr	r3, [pc, #32]	; (8018a7c <prvProcessReceivedCommands+0x1c0>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	1d39      	adds	r1, r7, #4
 8018a60:	2200      	movs	r2, #0
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7fd fdcc 	bl	8016600 <xQueueReceive>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	f47f af2a 	bne.w	80188c4 <prvProcessReceivedCommands+0x8>
	}
}
 8018a70:	bf00      	nop
 8018a72:	bf00      	nop
 8018a74:	3730      	adds	r7, #48	; 0x30
 8018a76:	46bd      	mov	sp, r7
 8018a78:	bd80      	pop	{r7, pc}
 8018a7a:	bf00      	nop
 8018a7c:	20003548 	.word	0x20003548

08018a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018a80:	b580      	push	{r7, lr}
 8018a82:	b088      	sub	sp, #32
 8018a84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018a86:	e048      	b.n	8018b1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018a88:	4b2d      	ldr	r3, [pc, #180]	; (8018b40 <prvSwitchTimerLists+0xc0>)
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	68db      	ldr	r3, [r3, #12]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a92:	4b2b      	ldr	r3, [pc, #172]	; (8018b40 <prvSwitchTimerLists+0xc0>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	68db      	ldr	r3, [r3, #12]
 8018a98:	68db      	ldr	r3, [r3, #12]
 8018a9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018a9c:	68fb      	ldr	r3, [r7, #12]
 8018a9e:	3304      	adds	r3, #4
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	f7fd f9b5 	bl	8015e10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	6a1b      	ldr	r3, [r3, #32]
 8018aaa:	68f8      	ldr	r0, [r7, #12]
 8018aac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ab4:	f003 0304 	and.w	r3, r3, #4
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d02e      	beq.n	8018b1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018abc:	68fb      	ldr	r3, [r7, #12]
 8018abe:	699b      	ldr	r3, [r3, #24]
 8018ac0:	693a      	ldr	r2, [r7, #16]
 8018ac2:	4413      	add	r3, r2
 8018ac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018ac6:	68ba      	ldr	r2, [r7, #8]
 8018ac8:	693b      	ldr	r3, [r7, #16]
 8018aca:	429a      	cmp	r2, r3
 8018acc:	d90e      	bls.n	8018aec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	68ba      	ldr	r2, [r7, #8]
 8018ad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	68fa      	ldr	r2, [r7, #12]
 8018ad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018ada:	4b19      	ldr	r3, [pc, #100]	; (8018b40 <prvSwitchTimerLists+0xc0>)
 8018adc:	681a      	ldr	r2, [r3, #0]
 8018ade:	68fb      	ldr	r3, [r7, #12]
 8018ae0:	3304      	adds	r3, #4
 8018ae2:	4619      	mov	r1, r3
 8018ae4:	4610      	mov	r0, r2
 8018ae6:	f7fd f95a 	bl	8015d9e <vListInsert>
 8018aea:	e016      	b.n	8018b1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018aec:	2300      	movs	r3, #0
 8018aee:	9300      	str	r3, [sp, #0]
 8018af0:	2300      	movs	r3, #0
 8018af2:	693a      	ldr	r2, [r7, #16]
 8018af4:	2100      	movs	r1, #0
 8018af6:	68f8      	ldr	r0, [r7, #12]
 8018af8:	f7ff fd60 	bl	80185bc <xTimerGenericCommand>
 8018afc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	2b00      	cmp	r3, #0
 8018b02:	d10a      	bne.n	8018b1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b08:	f383 8811 	msr	BASEPRI, r3
 8018b0c:	f3bf 8f6f 	isb	sy
 8018b10:	f3bf 8f4f 	dsb	sy
 8018b14:	603b      	str	r3, [r7, #0]
}
 8018b16:	bf00      	nop
 8018b18:	e7fe      	b.n	8018b18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018b1a:	4b09      	ldr	r3, [pc, #36]	; (8018b40 <prvSwitchTimerLists+0xc0>)
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d1b1      	bne.n	8018a88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018b24:	4b06      	ldr	r3, [pc, #24]	; (8018b40 <prvSwitchTimerLists+0xc0>)
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018b2a:	4b06      	ldr	r3, [pc, #24]	; (8018b44 <prvSwitchTimerLists+0xc4>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	4a04      	ldr	r2, [pc, #16]	; (8018b40 <prvSwitchTimerLists+0xc0>)
 8018b30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018b32:	4a04      	ldr	r2, [pc, #16]	; (8018b44 <prvSwitchTimerLists+0xc4>)
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	6013      	str	r3, [r2, #0]
}
 8018b38:	bf00      	nop
 8018b3a:	3718      	adds	r7, #24
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	bd80      	pop	{r7, pc}
 8018b40:	20003540 	.word	0x20003540
 8018b44:	20003544 	.word	0x20003544

08018b48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018b48:	b580      	push	{r7, lr}
 8018b4a:	b082      	sub	sp, #8
 8018b4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018b4e:	f000 f969 	bl	8018e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018b52:	4b15      	ldr	r3, [pc, #84]	; (8018ba8 <prvCheckForValidListAndQueue+0x60>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d120      	bne.n	8018b9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018b5a:	4814      	ldr	r0, [pc, #80]	; (8018bac <prvCheckForValidListAndQueue+0x64>)
 8018b5c:	f7fd f8ce 	bl	8015cfc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018b60:	4813      	ldr	r0, [pc, #76]	; (8018bb0 <prvCheckForValidListAndQueue+0x68>)
 8018b62:	f7fd f8cb 	bl	8015cfc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018b66:	4b13      	ldr	r3, [pc, #76]	; (8018bb4 <prvCheckForValidListAndQueue+0x6c>)
 8018b68:	4a10      	ldr	r2, [pc, #64]	; (8018bac <prvCheckForValidListAndQueue+0x64>)
 8018b6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018b6c:	4b12      	ldr	r3, [pc, #72]	; (8018bb8 <prvCheckForValidListAndQueue+0x70>)
 8018b6e:	4a10      	ldr	r2, [pc, #64]	; (8018bb0 <prvCheckForValidListAndQueue+0x68>)
 8018b70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018b72:	2300      	movs	r3, #0
 8018b74:	9300      	str	r3, [sp, #0]
 8018b76:	4b11      	ldr	r3, [pc, #68]	; (8018bbc <prvCheckForValidListAndQueue+0x74>)
 8018b78:	4a11      	ldr	r2, [pc, #68]	; (8018bc0 <prvCheckForValidListAndQueue+0x78>)
 8018b7a:	2110      	movs	r1, #16
 8018b7c:	200a      	movs	r0, #10
 8018b7e:	f7fd f9d9 	bl	8015f34 <xQueueGenericCreateStatic>
 8018b82:	4603      	mov	r3, r0
 8018b84:	4a08      	ldr	r2, [pc, #32]	; (8018ba8 <prvCheckForValidListAndQueue+0x60>)
 8018b86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018b88:	4b07      	ldr	r3, [pc, #28]	; (8018ba8 <prvCheckForValidListAndQueue+0x60>)
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	2b00      	cmp	r3, #0
 8018b8e:	d005      	beq.n	8018b9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018b90:	4b05      	ldr	r3, [pc, #20]	; (8018ba8 <prvCheckForValidListAndQueue+0x60>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	490b      	ldr	r1, [pc, #44]	; (8018bc4 <prvCheckForValidListAndQueue+0x7c>)
 8018b96:	4618      	mov	r0, r3
 8018b98:	f7fe f8ea 	bl	8016d70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018b9c:	f000 f972 	bl	8018e84 <vPortExitCritical>
}
 8018ba0:	bf00      	nop
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd80      	pop	{r7, pc}
 8018ba6:	bf00      	nop
 8018ba8:	20003548 	.word	0x20003548
 8018bac:	20003518 	.word	0x20003518
 8018bb0:	2000352c 	.word	0x2000352c
 8018bb4:	20003540 	.word	0x20003540
 8018bb8:	20003544 	.word	0x20003544
 8018bbc:	200035f4 	.word	0x200035f4
 8018bc0:	20003554 	.word	0x20003554
 8018bc4:	0801dcdc 	.word	0x0801dcdc

08018bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018bc8:	b480      	push	{r7}
 8018bca:	b085      	sub	sp, #20
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	60f8      	str	r0, [r7, #12]
 8018bd0:	60b9      	str	r1, [r7, #8]
 8018bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018bd4:	68fb      	ldr	r3, [r7, #12]
 8018bd6:	3b04      	subs	r3, #4
 8018bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018be2:	68fb      	ldr	r3, [r7, #12]
 8018be4:	3b04      	subs	r3, #4
 8018be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	f023 0201 	bic.w	r2, r3, #1
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	3b04      	subs	r3, #4
 8018bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018bf8:	4a0c      	ldr	r2, [pc, #48]	; (8018c2c <pxPortInitialiseStack+0x64>)
 8018bfa:	68fb      	ldr	r3, [r7, #12]
 8018bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	3b14      	subs	r3, #20
 8018c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018c04:	687a      	ldr	r2, [r7, #4]
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018c0a:	68fb      	ldr	r3, [r7, #12]
 8018c0c:	3b04      	subs	r3, #4
 8018c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	f06f 0202 	mvn.w	r2, #2
 8018c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	3b20      	subs	r3, #32
 8018c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018c1e:	68fb      	ldr	r3, [r7, #12]
}
 8018c20:	4618      	mov	r0, r3
 8018c22:	3714      	adds	r7, #20
 8018c24:	46bd      	mov	sp, r7
 8018c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c2a:	4770      	bx	lr
 8018c2c:	08018c31 	.word	0x08018c31

08018c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018c30:	b480      	push	{r7}
 8018c32:	b085      	sub	sp, #20
 8018c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018c36:	2300      	movs	r3, #0
 8018c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018c3a:	4b12      	ldr	r3, [pc, #72]	; (8018c84 <prvTaskExitError+0x54>)
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c42:	d00a      	beq.n	8018c5a <prvTaskExitError+0x2a>
	__asm volatile
 8018c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c48:	f383 8811 	msr	BASEPRI, r3
 8018c4c:	f3bf 8f6f 	isb	sy
 8018c50:	f3bf 8f4f 	dsb	sy
 8018c54:	60fb      	str	r3, [r7, #12]
}
 8018c56:	bf00      	nop
 8018c58:	e7fe      	b.n	8018c58 <prvTaskExitError+0x28>
	__asm volatile
 8018c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c5e:	f383 8811 	msr	BASEPRI, r3
 8018c62:	f3bf 8f6f 	isb	sy
 8018c66:	f3bf 8f4f 	dsb	sy
 8018c6a:	60bb      	str	r3, [r7, #8]
}
 8018c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018c6e:	bf00      	nop
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d0fc      	beq.n	8018c70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018c76:	bf00      	nop
 8018c78:	bf00      	nop
 8018c7a:	3714      	adds	r7, #20
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c82:	4770      	bx	lr
 8018c84:	200001f8 	.word	0x200001f8
	...

08018c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018c90:	4b07      	ldr	r3, [pc, #28]	; (8018cb0 <pxCurrentTCBConst2>)
 8018c92:	6819      	ldr	r1, [r3, #0]
 8018c94:	6808      	ldr	r0, [r1, #0]
 8018c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c9a:	f380 8809 	msr	PSP, r0
 8018c9e:	f3bf 8f6f 	isb	sy
 8018ca2:	f04f 0000 	mov.w	r0, #0
 8018ca6:	f380 8811 	msr	BASEPRI, r0
 8018caa:	4770      	bx	lr
 8018cac:	f3af 8000 	nop.w

08018cb0 <pxCurrentTCBConst2>:
 8018cb0:	20003010 	.word	0x20003010
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018cb4:	bf00      	nop
 8018cb6:	bf00      	nop

08018cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018cb8:	4808      	ldr	r0, [pc, #32]	; (8018cdc <prvPortStartFirstTask+0x24>)
 8018cba:	6800      	ldr	r0, [r0, #0]
 8018cbc:	6800      	ldr	r0, [r0, #0]
 8018cbe:	f380 8808 	msr	MSP, r0
 8018cc2:	f04f 0000 	mov.w	r0, #0
 8018cc6:	f380 8814 	msr	CONTROL, r0
 8018cca:	b662      	cpsie	i
 8018ccc:	b661      	cpsie	f
 8018cce:	f3bf 8f4f 	dsb	sy
 8018cd2:	f3bf 8f6f 	isb	sy
 8018cd6:	df00      	svc	0
 8018cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018cda:	bf00      	nop
 8018cdc:	e000ed08 	.word	0xe000ed08

08018ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b086      	sub	sp, #24
 8018ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018ce6:	4b46      	ldr	r3, [pc, #280]	; (8018e00 <xPortStartScheduler+0x120>)
 8018ce8:	681b      	ldr	r3, [r3, #0]
 8018cea:	4a46      	ldr	r2, [pc, #280]	; (8018e04 <xPortStartScheduler+0x124>)
 8018cec:	4293      	cmp	r3, r2
 8018cee:	d10a      	bne.n	8018d06 <xPortStartScheduler+0x26>
	__asm volatile
 8018cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf4:	f383 8811 	msr	BASEPRI, r3
 8018cf8:	f3bf 8f6f 	isb	sy
 8018cfc:	f3bf 8f4f 	dsb	sy
 8018d00:	613b      	str	r3, [r7, #16]
}
 8018d02:	bf00      	nop
 8018d04:	e7fe      	b.n	8018d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018d06:	4b3e      	ldr	r3, [pc, #248]	; (8018e00 <xPortStartScheduler+0x120>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	4a3f      	ldr	r2, [pc, #252]	; (8018e08 <xPortStartScheduler+0x128>)
 8018d0c:	4293      	cmp	r3, r2
 8018d0e:	d10a      	bne.n	8018d26 <xPortStartScheduler+0x46>
	__asm volatile
 8018d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d14:	f383 8811 	msr	BASEPRI, r3
 8018d18:	f3bf 8f6f 	isb	sy
 8018d1c:	f3bf 8f4f 	dsb	sy
 8018d20:	60fb      	str	r3, [r7, #12]
}
 8018d22:	bf00      	nop
 8018d24:	e7fe      	b.n	8018d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018d26:	4b39      	ldr	r3, [pc, #228]	; (8018e0c <xPortStartScheduler+0x12c>)
 8018d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018d2a:	697b      	ldr	r3, [r7, #20]
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	b2db      	uxtb	r3, r3
 8018d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018d32:	697b      	ldr	r3, [r7, #20]
 8018d34:	22ff      	movs	r2, #255	; 0xff
 8018d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018d38:	697b      	ldr	r3, [r7, #20]
 8018d3a:	781b      	ldrb	r3, [r3, #0]
 8018d3c:	b2db      	uxtb	r3, r3
 8018d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018d40:	78fb      	ldrb	r3, [r7, #3]
 8018d42:	b2db      	uxtb	r3, r3
 8018d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018d48:	b2da      	uxtb	r2, r3
 8018d4a:	4b31      	ldr	r3, [pc, #196]	; (8018e10 <xPortStartScheduler+0x130>)
 8018d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018d4e:	4b31      	ldr	r3, [pc, #196]	; (8018e14 <xPortStartScheduler+0x134>)
 8018d50:	2207      	movs	r2, #7
 8018d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018d54:	e009      	b.n	8018d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018d56:	4b2f      	ldr	r3, [pc, #188]	; (8018e14 <xPortStartScheduler+0x134>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	3b01      	subs	r3, #1
 8018d5c:	4a2d      	ldr	r2, [pc, #180]	; (8018e14 <xPortStartScheduler+0x134>)
 8018d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018d60:	78fb      	ldrb	r3, [r7, #3]
 8018d62:	b2db      	uxtb	r3, r3
 8018d64:	005b      	lsls	r3, r3, #1
 8018d66:	b2db      	uxtb	r3, r3
 8018d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018d6a:	78fb      	ldrb	r3, [r7, #3]
 8018d6c:	b2db      	uxtb	r3, r3
 8018d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018d72:	2b80      	cmp	r3, #128	; 0x80
 8018d74:	d0ef      	beq.n	8018d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018d76:	4b27      	ldr	r3, [pc, #156]	; (8018e14 <xPortStartScheduler+0x134>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	f1c3 0307 	rsb	r3, r3, #7
 8018d7e:	2b04      	cmp	r3, #4
 8018d80:	d00a      	beq.n	8018d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8018d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d86:	f383 8811 	msr	BASEPRI, r3
 8018d8a:	f3bf 8f6f 	isb	sy
 8018d8e:	f3bf 8f4f 	dsb	sy
 8018d92:	60bb      	str	r3, [r7, #8]
}
 8018d94:	bf00      	nop
 8018d96:	e7fe      	b.n	8018d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018d98:	4b1e      	ldr	r3, [pc, #120]	; (8018e14 <xPortStartScheduler+0x134>)
 8018d9a:	681b      	ldr	r3, [r3, #0]
 8018d9c:	021b      	lsls	r3, r3, #8
 8018d9e:	4a1d      	ldr	r2, [pc, #116]	; (8018e14 <xPortStartScheduler+0x134>)
 8018da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018da2:	4b1c      	ldr	r3, [pc, #112]	; (8018e14 <xPortStartScheduler+0x134>)
 8018da4:	681b      	ldr	r3, [r3, #0]
 8018da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018daa:	4a1a      	ldr	r2, [pc, #104]	; (8018e14 <xPortStartScheduler+0x134>)
 8018dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	b2da      	uxtb	r2, r3
 8018db2:	697b      	ldr	r3, [r7, #20]
 8018db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018db6:	4b18      	ldr	r3, [pc, #96]	; (8018e18 <xPortStartScheduler+0x138>)
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	4a17      	ldr	r2, [pc, #92]	; (8018e18 <xPortStartScheduler+0x138>)
 8018dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018dc2:	4b15      	ldr	r3, [pc, #84]	; (8018e18 <xPortStartScheduler+0x138>)
 8018dc4:	681b      	ldr	r3, [r3, #0]
 8018dc6:	4a14      	ldr	r2, [pc, #80]	; (8018e18 <xPortStartScheduler+0x138>)
 8018dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018dce:	f000 f8dd 	bl	8018f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018dd2:	4b12      	ldr	r3, [pc, #72]	; (8018e1c <xPortStartScheduler+0x13c>)
 8018dd4:	2200      	movs	r2, #0
 8018dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018dd8:	f000 f8fc 	bl	8018fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018ddc:	4b10      	ldr	r3, [pc, #64]	; (8018e20 <xPortStartScheduler+0x140>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4a0f      	ldr	r2, [pc, #60]	; (8018e20 <xPortStartScheduler+0x140>)
 8018de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018de8:	f7ff ff66 	bl	8018cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018dec:	f7fe fd18 	bl	8017820 <vTaskSwitchContext>
	prvTaskExitError();
 8018df0:	f7ff ff1e 	bl	8018c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018df4:	2300      	movs	r3, #0
}
 8018df6:	4618      	mov	r0, r3
 8018df8:	3718      	adds	r7, #24
 8018dfa:	46bd      	mov	sp, r7
 8018dfc:	bd80      	pop	{r7, pc}
 8018dfe:	bf00      	nop
 8018e00:	e000ed00 	.word	0xe000ed00
 8018e04:	410fc271 	.word	0x410fc271
 8018e08:	410fc270 	.word	0x410fc270
 8018e0c:	e000e400 	.word	0xe000e400
 8018e10:	20003644 	.word	0x20003644
 8018e14:	20003648 	.word	0x20003648
 8018e18:	e000ed20 	.word	0xe000ed20
 8018e1c:	200001f8 	.word	0x200001f8
 8018e20:	e000ef34 	.word	0xe000ef34

08018e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018e24:	b480      	push	{r7}
 8018e26:	b083      	sub	sp, #12
 8018e28:	af00      	add	r7, sp, #0
	__asm volatile
 8018e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e2e:	f383 8811 	msr	BASEPRI, r3
 8018e32:	f3bf 8f6f 	isb	sy
 8018e36:	f3bf 8f4f 	dsb	sy
 8018e3a:	607b      	str	r3, [r7, #4]
}
 8018e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018e3e:	4b0f      	ldr	r3, [pc, #60]	; (8018e7c <vPortEnterCritical+0x58>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	3301      	adds	r3, #1
 8018e44:	4a0d      	ldr	r2, [pc, #52]	; (8018e7c <vPortEnterCritical+0x58>)
 8018e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018e48:	4b0c      	ldr	r3, [pc, #48]	; (8018e7c <vPortEnterCritical+0x58>)
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	2b01      	cmp	r3, #1
 8018e4e:	d10f      	bne.n	8018e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018e50:	4b0b      	ldr	r3, [pc, #44]	; (8018e80 <vPortEnterCritical+0x5c>)
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	b2db      	uxtb	r3, r3
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d00a      	beq.n	8018e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8018e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e5e:	f383 8811 	msr	BASEPRI, r3
 8018e62:	f3bf 8f6f 	isb	sy
 8018e66:	f3bf 8f4f 	dsb	sy
 8018e6a:	603b      	str	r3, [r7, #0]
}
 8018e6c:	bf00      	nop
 8018e6e:	e7fe      	b.n	8018e6e <vPortEnterCritical+0x4a>
	}
}
 8018e70:	bf00      	nop
 8018e72:	370c      	adds	r7, #12
 8018e74:	46bd      	mov	sp, r7
 8018e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e7a:	4770      	bx	lr
 8018e7c:	200001f8 	.word	0x200001f8
 8018e80:	e000ed04 	.word	0xe000ed04

08018e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018e84:	b480      	push	{r7}
 8018e86:	b083      	sub	sp, #12
 8018e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018e8a:	4b12      	ldr	r3, [pc, #72]	; (8018ed4 <vPortExitCritical+0x50>)
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d10a      	bne.n	8018ea8 <vPortExitCritical+0x24>
	__asm volatile
 8018e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e96:	f383 8811 	msr	BASEPRI, r3
 8018e9a:	f3bf 8f6f 	isb	sy
 8018e9e:	f3bf 8f4f 	dsb	sy
 8018ea2:	607b      	str	r3, [r7, #4]
}
 8018ea4:	bf00      	nop
 8018ea6:	e7fe      	b.n	8018ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018ea8:	4b0a      	ldr	r3, [pc, #40]	; (8018ed4 <vPortExitCritical+0x50>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	3b01      	subs	r3, #1
 8018eae:	4a09      	ldr	r2, [pc, #36]	; (8018ed4 <vPortExitCritical+0x50>)
 8018eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018eb2:	4b08      	ldr	r3, [pc, #32]	; (8018ed4 <vPortExitCritical+0x50>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d105      	bne.n	8018ec6 <vPortExitCritical+0x42>
 8018eba:	2300      	movs	r3, #0
 8018ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018ebe:	683b      	ldr	r3, [r7, #0]
 8018ec0:	f383 8811 	msr	BASEPRI, r3
}
 8018ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018ec6:	bf00      	nop
 8018ec8:	370c      	adds	r7, #12
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ed0:	4770      	bx	lr
 8018ed2:	bf00      	nop
 8018ed4:	200001f8 	.word	0x200001f8
	...

08018ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018ee0:	f3ef 8009 	mrs	r0, PSP
 8018ee4:	f3bf 8f6f 	isb	sy
 8018ee8:	4b15      	ldr	r3, [pc, #84]	; (8018f40 <pxCurrentTCBConst>)
 8018eea:	681a      	ldr	r2, [r3, #0]
 8018eec:	f01e 0f10 	tst.w	lr, #16
 8018ef0:	bf08      	it	eq
 8018ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018efa:	6010      	str	r0, [r2, #0]
 8018efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018f04:	f380 8811 	msr	BASEPRI, r0
 8018f08:	f3bf 8f4f 	dsb	sy
 8018f0c:	f3bf 8f6f 	isb	sy
 8018f10:	f7fe fc86 	bl	8017820 <vTaskSwitchContext>
 8018f14:	f04f 0000 	mov.w	r0, #0
 8018f18:	f380 8811 	msr	BASEPRI, r0
 8018f1c:	bc09      	pop	{r0, r3}
 8018f1e:	6819      	ldr	r1, [r3, #0]
 8018f20:	6808      	ldr	r0, [r1, #0]
 8018f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f26:	f01e 0f10 	tst.w	lr, #16
 8018f2a:	bf08      	it	eq
 8018f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018f30:	f380 8809 	msr	PSP, r0
 8018f34:	f3bf 8f6f 	isb	sy
 8018f38:	4770      	bx	lr
 8018f3a:	bf00      	nop
 8018f3c:	f3af 8000 	nop.w

08018f40 <pxCurrentTCBConst>:
 8018f40:	20003010 	.word	0x20003010
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018f44:	bf00      	nop
 8018f46:	bf00      	nop

08018f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b082      	sub	sp, #8
 8018f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8018f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f52:	f383 8811 	msr	BASEPRI, r3
 8018f56:	f3bf 8f6f 	isb	sy
 8018f5a:	f3bf 8f4f 	dsb	sy
 8018f5e:	607b      	str	r3, [r7, #4]
}
 8018f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018f62:	f7fe fba3 	bl	80176ac <xTaskIncrementTick>
 8018f66:	4603      	mov	r3, r0
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d003      	beq.n	8018f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018f6c:	4b06      	ldr	r3, [pc, #24]	; (8018f88 <xPortSysTickHandler+0x40>)
 8018f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018f72:	601a      	str	r2, [r3, #0]
 8018f74:	2300      	movs	r3, #0
 8018f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018f78:	683b      	ldr	r3, [r7, #0]
 8018f7a:	f383 8811 	msr	BASEPRI, r3
}
 8018f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018f80:	bf00      	nop
 8018f82:	3708      	adds	r7, #8
 8018f84:	46bd      	mov	sp, r7
 8018f86:	bd80      	pop	{r7, pc}
 8018f88:	e000ed04 	.word	0xe000ed04

08018f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8018f8c:	b480      	push	{r7}
 8018f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018f90:	4b0b      	ldr	r3, [pc, #44]	; (8018fc0 <vPortSetupTimerInterrupt+0x34>)
 8018f92:	2200      	movs	r2, #0
 8018f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018f96:	4b0b      	ldr	r3, [pc, #44]	; (8018fc4 <vPortSetupTimerInterrupt+0x38>)
 8018f98:	2200      	movs	r2, #0
 8018f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8018f9c:	4b0a      	ldr	r3, [pc, #40]	; (8018fc8 <vPortSetupTimerInterrupt+0x3c>)
 8018f9e:	681b      	ldr	r3, [r3, #0]
 8018fa0:	4a0a      	ldr	r2, [pc, #40]	; (8018fcc <vPortSetupTimerInterrupt+0x40>)
 8018fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8018fa6:	099b      	lsrs	r3, r3, #6
 8018fa8:	4a09      	ldr	r2, [pc, #36]	; (8018fd0 <vPortSetupTimerInterrupt+0x44>)
 8018faa:	3b01      	subs	r3, #1
 8018fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8018fae:	4b04      	ldr	r3, [pc, #16]	; (8018fc0 <vPortSetupTimerInterrupt+0x34>)
 8018fb0:	2207      	movs	r2, #7
 8018fb2:	601a      	str	r2, [r3, #0]
}
 8018fb4:	bf00      	nop
 8018fb6:	46bd      	mov	sp, r7
 8018fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fbc:	4770      	bx	lr
 8018fbe:	bf00      	nop
 8018fc0:	e000e010 	.word	0xe000e010
 8018fc4:	e000e018 	.word	0xe000e018
 8018fc8:	20000030 	.word	0x20000030
 8018fcc:	10624dd3 	.word	0x10624dd3
 8018fd0:	e000e014 	.word	0xe000e014

08018fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8018fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8018fe4 <vPortEnableVFP+0x10>
 8018fd8:	6801      	ldr	r1, [r0, #0]
 8018fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8018fde:	6001      	str	r1, [r0, #0]
 8018fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8018fe2:	bf00      	nop
 8018fe4:	e000ed88 	.word	0xe000ed88

08018fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8018fe8:	b480      	push	{r7}
 8018fea:	b085      	sub	sp, #20
 8018fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8018fee:	f3ef 8305 	mrs	r3, IPSR
 8018ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	2b0f      	cmp	r3, #15
 8018ff8:	d914      	bls.n	8019024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8018ffa:	4a17      	ldr	r2, [pc, #92]	; (8019058 <vPortValidateInterruptPriority+0x70>)
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	4413      	add	r3, r2
 8019000:	781b      	ldrb	r3, [r3, #0]
 8019002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019004:	4b15      	ldr	r3, [pc, #84]	; (801905c <vPortValidateInterruptPriority+0x74>)
 8019006:	781b      	ldrb	r3, [r3, #0]
 8019008:	7afa      	ldrb	r2, [r7, #11]
 801900a:	429a      	cmp	r2, r3
 801900c:	d20a      	bcs.n	8019024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801900e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019012:	f383 8811 	msr	BASEPRI, r3
 8019016:	f3bf 8f6f 	isb	sy
 801901a:	f3bf 8f4f 	dsb	sy
 801901e:	607b      	str	r3, [r7, #4]
}
 8019020:	bf00      	nop
 8019022:	e7fe      	b.n	8019022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019024:	4b0e      	ldr	r3, [pc, #56]	; (8019060 <vPortValidateInterruptPriority+0x78>)
 8019026:	681b      	ldr	r3, [r3, #0]
 8019028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801902c:	4b0d      	ldr	r3, [pc, #52]	; (8019064 <vPortValidateInterruptPriority+0x7c>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	429a      	cmp	r2, r3
 8019032:	d90a      	bls.n	801904a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8019034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019038:	f383 8811 	msr	BASEPRI, r3
 801903c:	f3bf 8f6f 	isb	sy
 8019040:	f3bf 8f4f 	dsb	sy
 8019044:	603b      	str	r3, [r7, #0]
}
 8019046:	bf00      	nop
 8019048:	e7fe      	b.n	8019048 <vPortValidateInterruptPriority+0x60>
	}
 801904a:	bf00      	nop
 801904c:	3714      	adds	r7, #20
 801904e:	46bd      	mov	sp, r7
 8019050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019054:	4770      	bx	lr
 8019056:	bf00      	nop
 8019058:	e000e3f0 	.word	0xe000e3f0
 801905c:	20003644 	.word	0x20003644
 8019060:	e000ed0c 	.word	0xe000ed0c
 8019064:	20003648 	.word	0x20003648

08019068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b08a      	sub	sp, #40	; 0x28
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019070:	2300      	movs	r3, #0
 8019072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019074:	f7fe f9ce 	bl	8017414 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019078:	4b5b      	ldr	r3, [pc, #364]	; (80191e8 <pvPortMalloc+0x180>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d101      	bne.n	8019084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019080:	f000 f92c 	bl	80192dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019084:	4b59      	ldr	r3, [pc, #356]	; (80191ec <pvPortMalloc+0x184>)
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	4013      	ands	r3, r2
 801908c:	2b00      	cmp	r3, #0
 801908e:	f040 8093 	bne.w	80191b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d01d      	beq.n	80190d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019098:	2208      	movs	r2, #8
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	4413      	add	r3, r2
 801909e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	f003 0307 	and.w	r3, r3, #7
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d014      	beq.n	80190d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	f023 0307 	bic.w	r3, r3, #7
 80190b0:	3308      	adds	r3, #8
 80190b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	f003 0307 	and.w	r3, r3, #7
 80190ba:	2b00      	cmp	r3, #0
 80190bc:	d00a      	beq.n	80190d4 <pvPortMalloc+0x6c>
	__asm volatile
 80190be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c2:	f383 8811 	msr	BASEPRI, r3
 80190c6:	f3bf 8f6f 	isb	sy
 80190ca:	f3bf 8f4f 	dsb	sy
 80190ce:	617b      	str	r3, [r7, #20]
}
 80190d0:	bf00      	nop
 80190d2:	e7fe      	b.n	80190d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80190d4:	687b      	ldr	r3, [r7, #4]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d06e      	beq.n	80191b8 <pvPortMalloc+0x150>
 80190da:	4b45      	ldr	r3, [pc, #276]	; (80191f0 <pvPortMalloc+0x188>)
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	687a      	ldr	r2, [r7, #4]
 80190e0:	429a      	cmp	r2, r3
 80190e2:	d869      	bhi.n	80191b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80190e4:	4b43      	ldr	r3, [pc, #268]	; (80191f4 <pvPortMalloc+0x18c>)
 80190e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80190e8:	4b42      	ldr	r3, [pc, #264]	; (80191f4 <pvPortMalloc+0x18c>)
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80190ee:	e004      	b.n	80190fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80190f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80190f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80190fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190fc:	685b      	ldr	r3, [r3, #4]
 80190fe:	687a      	ldr	r2, [r7, #4]
 8019100:	429a      	cmp	r2, r3
 8019102:	d903      	bls.n	801910c <pvPortMalloc+0xa4>
 8019104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d1f1      	bne.n	80190f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801910c:	4b36      	ldr	r3, [pc, #216]	; (80191e8 <pvPortMalloc+0x180>)
 801910e:	681b      	ldr	r3, [r3, #0]
 8019110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019112:	429a      	cmp	r2, r3
 8019114:	d050      	beq.n	80191b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8019116:	6a3b      	ldr	r3, [r7, #32]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	2208      	movs	r2, #8
 801911c:	4413      	add	r3, r2
 801911e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019122:	681a      	ldr	r2, [r3, #0]
 8019124:	6a3b      	ldr	r3, [r7, #32]
 8019126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8019128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912a:	685a      	ldr	r2, [r3, #4]
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	1ad2      	subs	r2, r2, r3
 8019130:	2308      	movs	r3, #8
 8019132:	005b      	lsls	r3, r3, #1
 8019134:	429a      	cmp	r2, r3
 8019136:	d91f      	bls.n	8019178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8019138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	4413      	add	r3, r2
 801913e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019140:	69bb      	ldr	r3, [r7, #24]
 8019142:	f003 0307 	and.w	r3, r3, #7
 8019146:	2b00      	cmp	r3, #0
 8019148:	d00a      	beq.n	8019160 <pvPortMalloc+0xf8>
	__asm volatile
 801914a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801914e:	f383 8811 	msr	BASEPRI, r3
 8019152:	f3bf 8f6f 	isb	sy
 8019156:	f3bf 8f4f 	dsb	sy
 801915a:	613b      	str	r3, [r7, #16]
}
 801915c:	bf00      	nop
 801915e:	e7fe      	b.n	801915e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019162:	685a      	ldr	r2, [r3, #4]
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	1ad2      	subs	r2, r2, r3
 8019168:	69bb      	ldr	r3, [r7, #24]
 801916a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801916c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019172:	69b8      	ldr	r0, [r7, #24]
 8019174:	f000 f914 	bl	80193a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019178:	4b1d      	ldr	r3, [pc, #116]	; (80191f0 <pvPortMalloc+0x188>)
 801917a:	681a      	ldr	r2, [r3, #0]
 801917c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	1ad3      	subs	r3, r2, r3
 8019182:	4a1b      	ldr	r2, [pc, #108]	; (80191f0 <pvPortMalloc+0x188>)
 8019184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019186:	4b1a      	ldr	r3, [pc, #104]	; (80191f0 <pvPortMalloc+0x188>)
 8019188:	681a      	ldr	r2, [r3, #0]
 801918a:	4b1b      	ldr	r3, [pc, #108]	; (80191f8 <pvPortMalloc+0x190>)
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	429a      	cmp	r2, r3
 8019190:	d203      	bcs.n	801919a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019192:	4b17      	ldr	r3, [pc, #92]	; (80191f0 <pvPortMalloc+0x188>)
 8019194:	681b      	ldr	r3, [r3, #0]
 8019196:	4a18      	ldr	r2, [pc, #96]	; (80191f8 <pvPortMalloc+0x190>)
 8019198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801919c:	685a      	ldr	r2, [r3, #4]
 801919e:	4b13      	ldr	r3, [pc, #76]	; (80191ec <pvPortMalloc+0x184>)
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	431a      	orrs	r2, r3
 80191a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80191a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191aa:	2200      	movs	r2, #0
 80191ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80191ae:	4b13      	ldr	r3, [pc, #76]	; (80191fc <pvPortMalloc+0x194>)
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	3301      	adds	r3, #1
 80191b4:	4a11      	ldr	r2, [pc, #68]	; (80191fc <pvPortMalloc+0x194>)
 80191b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80191b8:	f7fe f93a 	bl	8017430 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80191bc:	69fb      	ldr	r3, [r7, #28]
 80191be:	f003 0307 	and.w	r3, r3, #7
 80191c2:	2b00      	cmp	r3, #0
 80191c4:	d00a      	beq.n	80191dc <pvPortMalloc+0x174>
	__asm volatile
 80191c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ca:	f383 8811 	msr	BASEPRI, r3
 80191ce:	f3bf 8f6f 	isb	sy
 80191d2:	f3bf 8f4f 	dsb	sy
 80191d6:	60fb      	str	r3, [r7, #12]
}
 80191d8:	bf00      	nop
 80191da:	e7fe      	b.n	80191da <pvPortMalloc+0x172>
	return pvReturn;
 80191dc:	69fb      	ldr	r3, [r7, #28]
}
 80191de:	4618      	mov	r0, r3
 80191e0:	3728      	adds	r7, #40	; 0x28
 80191e2:	46bd      	mov	sp, r7
 80191e4:	bd80      	pop	{r7, pc}
 80191e6:	bf00      	nop
 80191e8:	200074d4 	.word	0x200074d4
 80191ec:	200074e8 	.word	0x200074e8
 80191f0:	200074d8 	.word	0x200074d8
 80191f4:	200074cc 	.word	0x200074cc
 80191f8:	200074dc 	.word	0x200074dc
 80191fc:	200074e0 	.word	0x200074e0

08019200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b086      	sub	sp, #24
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	2b00      	cmp	r3, #0
 8019210:	d04d      	beq.n	80192ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8019212:	2308      	movs	r3, #8
 8019214:	425b      	negs	r3, r3
 8019216:	697a      	ldr	r2, [r7, #20]
 8019218:	4413      	add	r3, r2
 801921a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801921c:	697b      	ldr	r3, [r7, #20]
 801921e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8019220:	693b      	ldr	r3, [r7, #16]
 8019222:	685a      	ldr	r2, [r3, #4]
 8019224:	4b24      	ldr	r3, [pc, #144]	; (80192b8 <vPortFree+0xb8>)
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	4013      	ands	r3, r2
 801922a:	2b00      	cmp	r3, #0
 801922c:	d10a      	bne.n	8019244 <vPortFree+0x44>
	__asm volatile
 801922e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019232:	f383 8811 	msr	BASEPRI, r3
 8019236:	f3bf 8f6f 	isb	sy
 801923a:	f3bf 8f4f 	dsb	sy
 801923e:	60fb      	str	r3, [r7, #12]
}
 8019240:	bf00      	nop
 8019242:	e7fe      	b.n	8019242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019244:	693b      	ldr	r3, [r7, #16]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d00a      	beq.n	8019262 <vPortFree+0x62>
	__asm volatile
 801924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019250:	f383 8811 	msr	BASEPRI, r3
 8019254:	f3bf 8f6f 	isb	sy
 8019258:	f3bf 8f4f 	dsb	sy
 801925c:	60bb      	str	r3, [r7, #8]
}
 801925e:	bf00      	nop
 8019260:	e7fe      	b.n	8019260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019262:	693b      	ldr	r3, [r7, #16]
 8019264:	685a      	ldr	r2, [r3, #4]
 8019266:	4b14      	ldr	r3, [pc, #80]	; (80192b8 <vPortFree+0xb8>)
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	4013      	ands	r3, r2
 801926c:	2b00      	cmp	r3, #0
 801926e:	d01e      	beq.n	80192ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019270:	693b      	ldr	r3, [r7, #16]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	2b00      	cmp	r3, #0
 8019276:	d11a      	bne.n	80192ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019278:	693b      	ldr	r3, [r7, #16]
 801927a:	685a      	ldr	r2, [r3, #4]
 801927c:	4b0e      	ldr	r3, [pc, #56]	; (80192b8 <vPortFree+0xb8>)
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	43db      	mvns	r3, r3
 8019282:	401a      	ands	r2, r3
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019288:	f7fe f8c4 	bl	8017414 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801928c:	693b      	ldr	r3, [r7, #16]
 801928e:	685a      	ldr	r2, [r3, #4]
 8019290:	4b0a      	ldr	r3, [pc, #40]	; (80192bc <vPortFree+0xbc>)
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	4413      	add	r3, r2
 8019296:	4a09      	ldr	r2, [pc, #36]	; (80192bc <vPortFree+0xbc>)
 8019298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801929a:	6938      	ldr	r0, [r7, #16]
 801929c:	f000 f880 	bl	80193a0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80192a0:	4b07      	ldr	r3, [pc, #28]	; (80192c0 <vPortFree+0xc0>)
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	3301      	adds	r3, #1
 80192a6:	4a06      	ldr	r2, [pc, #24]	; (80192c0 <vPortFree+0xc0>)
 80192a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80192aa:	f7fe f8c1 	bl	8017430 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80192ae:	bf00      	nop
 80192b0:	3718      	adds	r7, #24
 80192b2:	46bd      	mov	sp, r7
 80192b4:	bd80      	pop	{r7, pc}
 80192b6:	bf00      	nop
 80192b8:	200074e8 	.word	0x200074e8
 80192bc:	200074d8 	.word	0x200074d8
 80192c0:	200074e4 	.word	0x200074e4

080192c4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80192c4:	b480      	push	{r7}
 80192c6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80192c8:	4b03      	ldr	r3, [pc, #12]	; (80192d8 <xPortGetFreeHeapSize+0x14>)
 80192ca:	681b      	ldr	r3, [r3, #0]
}
 80192cc:	4618      	mov	r0, r3
 80192ce:	46bd      	mov	sp, r7
 80192d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192d4:	4770      	bx	lr
 80192d6:	bf00      	nop
 80192d8:	200074d8 	.word	0x200074d8

080192dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80192dc:	b480      	push	{r7}
 80192de:	b085      	sub	sp, #20
 80192e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80192e2:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80192e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80192e8:	4b27      	ldr	r3, [pc, #156]	; (8019388 <prvHeapInit+0xac>)
 80192ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	f003 0307 	and.w	r3, r3, #7
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d00c      	beq.n	8019310 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80192f6:	68fb      	ldr	r3, [r7, #12]
 80192f8:	3307      	adds	r3, #7
 80192fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	f023 0307 	bic.w	r3, r3, #7
 8019302:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8019304:	68ba      	ldr	r2, [r7, #8]
 8019306:	68fb      	ldr	r3, [r7, #12]
 8019308:	1ad3      	subs	r3, r2, r3
 801930a:	4a1f      	ldr	r2, [pc, #124]	; (8019388 <prvHeapInit+0xac>)
 801930c:	4413      	add	r3, r2
 801930e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8019310:	68fb      	ldr	r3, [r7, #12]
 8019312:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8019314:	4a1d      	ldr	r2, [pc, #116]	; (801938c <prvHeapInit+0xb0>)
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801931a:	4b1c      	ldr	r3, [pc, #112]	; (801938c <prvHeapInit+0xb0>)
 801931c:	2200      	movs	r2, #0
 801931e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	68ba      	ldr	r2, [r7, #8]
 8019324:	4413      	add	r3, r2
 8019326:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019328:	2208      	movs	r2, #8
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	1a9b      	subs	r3, r3, r2
 801932e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	f023 0307 	bic.w	r3, r3, #7
 8019336:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	4a15      	ldr	r2, [pc, #84]	; (8019390 <prvHeapInit+0xb4>)
 801933c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801933e:	4b14      	ldr	r3, [pc, #80]	; (8019390 <prvHeapInit+0xb4>)
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	2200      	movs	r2, #0
 8019344:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019346:	4b12      	ldr	r3, [pc, #72]	; (8019390 <prvHeapInit+0xb4>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	2200      	movs	r2, #0
 801934c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	68fa      	ldr	r2, [r7, #12]
 8019356:	1ad2      	subs	r2, r2, r3
 8019358:	683b      	ldr	r3, [r7, #0]
 801935a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801935c:	4b0c      	ldr	r3, [pc, #48]	; (8019390 <prvHeapInit+0xb4>)
 801935e:	681a      	ldr	r2, [r3, #0]
 8019360:	683b      	ldr	r3, [r7, #0]
 8019362:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019364:	683b      	ldr	r3, [r7, #0]
 8019366:	685b      	ldr	r3, [r3, #4]
 8019368:	4a0a      	ldr	r2, [pc, #40]	; (8019394 <prvHeapInit+0xb8>)
 801936a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801936c:	683b      	ldr	r3, [r7, #0]
 801936e:	685b      	ldr	r3, [r3, #4]
 8019370:	4a09      	ldr	r2, [pc, #36]	; (8019398 <prvHeapInit+0xbc>)
 8019372:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019374:	4b09      	ldr	r3, [pc, #36]	; (801939c <prvHeapInit+0xc0>)
 8019376:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801937a:	601a      	str	r2, [r3, #0]
}
 801937c:	bf00      	nop
 801937e:	3714      	adds	r7, #20
 8019380:	46bd      	mov	sp, r7
 8019382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019386:	4770      	bx	lr
 8019388:	2000364c 	.word	0x2000364c
 801938c:	200074cc 	.word	0x200074cc
 8019390:	200074d4 	.word	0x200074d4
 8019394:	200074dc 	.word	0x200074dc
 8019398:	200074d8 	.word	0x200074d8
 801939c:	200074e8 	.word	0x200074e8

080193a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80193a0:	b480      	push	{r7}
 80193a2:	b085      	sub	sp, #20
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80193a8:	4b28      	ldr	r3, [pc, #160]	; (801944c <prvInsertBlockIntoFreeList+0xac>)
 80193aa:	60fb      	str	r3, [r7, #12]
 80193ac:	e002      	b.n	80193b4 <prvInsertBlockIntoFreeList+0x14>
 80193ae:	68fb      	ldr	r3, [r7, #12]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	60fb      	str	r3, [r7, #12]
 80193b4:	68fb      	ldr	r3, [r7, #12]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	687a      	ldr	r2, [r7, #4]
 80193ba:	429a      	cmp	r2, r3
 80193bc:	d8f7      	bhi.n	80193ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80193be:	68fb      	ldr	r3, [r7, #12]
 80193c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	685b      	ldr	r3, [r3, #4]
 80193c6:	68ba      	ldr	r2, [r7, #8]
 80193c8:	4413      	add	r3, r2
 80193ca:	687a      	ldr	r2, [r7, #4]
 80193cc:	429a      	cmp	r2, r3
 80193ce:	d108      	bne.n	80193e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	685a      	ldr	r2, [r3, #4]
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	685b      	ldr	r3, [r3, #4]
 80193d8:	441a      	add	r2, r3
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80193e2:	687b      	ldr	r3, [r7, #4]
 80193e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	685b      	ldr	r3, [r3, #4]
 80193ea:	68ba      	ldr	r2, [r7, #8]
 80193ec:	441a      	add	r2, r3
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	429a      	cmp	r2, r3
 80193f4:	d118      	bne.n	8019428 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	681a      	ldr	r2, [r3, #0]
 80193fa:	4b15      	ldr	r3, [pc, #84]	; (8019450 <prvInsertBlockIntoFreeList+0xb0>)
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	429a      	cmp	r2, r3
 8019400:	d00d      	beq.n	801941e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	685a      	ldr	r2, [r3, #4]
 8019406:	68fb      	ldr	r3, [r7, #12]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	685b      	ldr	r3, [r3, #4]
 801940c:	441a      	add	r2, r3
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	681a      	ldr	r2, [r3, #0]
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	601a      	str	r2, [r3, #0]
 801941c:	e008      	b.n	8019430 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801941e:	4b0c      	ldr	r3, [pc, #48]	; (8019450 <prvInsertBlockIntoFreeList+0xb0>)
 8019420:	681a      	ldr	r2, [r3, #0]
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	601a      	str	r2, [r3, #0]
 8019426:	e003      	b.n	8019430 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	681a      	ldr	r2, [r3, #0]
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019430:	68fa      	ldr	r2, [r7, #12]
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	429a      	cmp	r2, r3
 8019436:	d002      	beq.n	801943e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	687a      	ldr	r2, [r7, #4]
 801943c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801943e:	bf00      	nop
 8019440:	3714      	adds	r7, #20
 8019442:	46bd      	mov	sp, r7
 8019444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019448:	4770      	bx	lr
 801944a:	bf00      	nop
 801944c:	200074cc 	.word	0x200074cc
 8019450:	200074d4 	.word	0x200074d4

08019454 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019454:	b580      	push	{r7, lr}
 8019456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019458:	2200      	movs	r2, #0
 801945a:	4912      	ldr	r1, [pc, #72]	; (80194a4 <MX_USB_DEVICE_Init+0x50>)
 801945c:	4812      	ldr	r0, [pc, #72]	; (80194a8 <MX_USB_DEVICE_Init+0x54>)
 801945e:	f7f7 fba7 	bl	8010bb0 <USBD_Init>
 8019462:	4603      	mov	r3, r0
 8019464:	2b00      	cmp	r3, #0
 8019466:	d001      	beq.n	801946c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019468:	f7eb fede 	bl	8005228 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801946c:	490f      	ldr	r1, [pc, #60]	; (80194ac <MX_USB_DEVICE_Init+0x58>)
 801946e:	480e      	ldr	r0, [pc, #56]	; (80194a8 <MX_USB_DEVICE_Init+0x54>)
 8019470:	f7f7 fbce 	bl	8010c10 <USBD_RegisterClass>
 8019474:	4603      	mov	r3, r0
 8019476:	2b00      	cmp	r3, #0
 8019478:	d001      	beq.n	801947e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801947a:	f7eb fed5 	bl	8005228 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801947e:	490c      	ldr	r1, [pc, #48]	; (80194b0 <MX_USB_DEVICE_Init+0x5c>)
 8019480:	4809      	ldr	r0, [pc, #36]	; (80194a8 <MX_USB_DEVICE_Init+0x54>)
 8019482:	f7f7 faef 	bl	8010a64 <USBD_CDC_RegisterInterface>
 8019486:	4603      	mov	r3, r0
 8019488:	2b00      	cmp	r3, #0
 801948a:	d001      	beq.n	8019490 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801948c:	f7eb fecc 	bl	8005228 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019490:	4805      	ldr	r0, [pc, #20]	; (80194a8 <MX_USB_DEVICE_Init+0x54>)
 8019492:	f7f7 fbe4 	bl	8010c5e <USBD_Start>
 8019496:	4603      	mov	r3, r0
 8019498:	2b00      	cmp	r3, #0
 801949a:	d001      	beq.n	80194a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801949c:	f7eb fec4 	bl	8005228 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80194a0:	bf00      	nop
 80194a2:	bd80      	pop	{r7, pc}
 80194a4:	20000210 	.word	0x20000210
 80194a8:	20015170 	.word	0x20015170
 80194ac:	200000f4 	.word	0x200000f4
 80194b0:	200001fc 	.word	0x200001fc

080194b4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80194b8:	2200      	movs	r2, #0
 80194ba:	4905      	ldr	r1, [pc, #20]	; (80194d0 <CDC_Init_FS+0x1c>)
 80194bc:	4805      	ldr	r0, [pc, #20]	; (80194d4 <CDC_Init_FS+0x20>)
 80194be:	f7f7 fae6 	bl	8010a8e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80194c2:	4905      	ldr	r1, [pc, #20]	; (80194d8 <CDC_Init_FS+0x24>)
 80194c4:	4803      	ldr	r0, [pc, #12]	; (80194d4 <CDC_Init_FS+0x20>)
 80194c6:	f7f7 fb00 	bl	8010aca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80194ca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	bd80      	pop	{r7, pc}
 80194d0:	20015c40 	.word	0x20015c40
 80194d4:	20015170 	.word	0x20015170
 80194d8:	20015440 	.word	0x20015440

080194dc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80194dc:	b480      	push	{r7}
 80194de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80194e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80194e2:	4618      	mov	r0, r3
 80194e4:	46bd      	mov	sp, r7
 80194e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ea:	4770      	bx	lr

080194ec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80194ec:	b480      	push	{r7}
 80194ee:	b083      	sub	sp, #12
 80194f0:	af00      	add	r7, sp, #0
 80194f2:	4603      	mov	r3, r0
 80194f4:	6039      	str	r1, [r7, #0]
 80194f6:	71fb      	strb	r3, [r7, #7]
 80194f8:	4613      	mov	r3, r2
 80194fa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80194fc:	79fb      	ldrb	r3, [r7, #7]
 80194fe:	2b23      	cmp	r3, #35	; 0x23
 8019500:	d84a      	bhi.n	8019598 <CDC_Control_FS+0xac>
 8019502:	a201      	add	r2, pc, #4	; (adr r2, 8019508 <CDC_Control_FS+0x1c>)
 8019504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019508:	08019599 	.word	0x08019599
 801950c:	08019599 	.word	0x08019599
 8019510:	08019599 	.word	0x08019599
 8019514:	08019599 	.word	0x08019599
 8019518:	08019599 	.word	0x08019599
 801951c:	08019599 	.word	0x08019599
 8019520:	08019599 	.word	0x08019599
 8019524:	08019599 	.word	0x08019599
 8019528:	08019599 	.word	0x08019599
 801952c:	08019599 	.word	0x08019599
 8019530:	08019599 	.word	0x08019599
 8019534:	08019599 	.word	0x08019599
 8019538:	08019599 	.word	0x08019599
 801953c:	08019599 	.word	0x08019599
 8019540:	08019599 	.word	0x08019599
 8019544:	08019599 	.word	0x08019599
 8019548:	08019599 	.word	0x08019599
 801954c:	08019599 	.word	0x08019599
 8019550:	08019599 	.word	0x08019599
 8019554:	08019599 	.word	0x08019599
 8019558:	08019599 	.word	0x08019599
 801955c:	08019599 	.word	0x08019599
 8019560:	08019599 	.word	0x08019599
 8019564:	08019599 	.word	0x08019599
 8019568:	08019599 	.word	0x08019599
 801956c:	08019599 	.word	0x08019599
 8019570:	08019599 	.word	0x08019599
 8019574:	08019599 	.word	0x08019599
 8019578:	08019599 	.word	0x08019599
 801957c:	08019599 	.word	0x08019599
 8019580:	08019599 	.word	0x08019599
 8019584:	08019599 	.word	0x08019599
 8019588:	08019599 	.word	0x08019599
 801958c:	08019599 	.word	0x08019599
 8019590:	08019599 	.word	0x08019599
 8019594:	08019599 	.word	0x08019599
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019598:	bf00      	nop
  }

  return (USBD_OK);
 801959a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801959c:	4618      	mov	r0, r3
 801959e:	370c      	adds	r7, #12
 80195a0:	46bd      	mov	sp, r7
 80195a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195a6:	4770      	bx	lr

080195a8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b082      	sub	sp, #8
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
 80195b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80195b2:	6879      	ldr	r1, [r7, #4]
 80195b4:	4805      	ldr	r0, [pc, #20]	; (80195cc <CDC_Receive_FS+0x24>)
 80195b6:	f7f7 fa88 	bl	8010aca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80195ba:	4804      	ldr	r0, [pc, #16]	; (80195cc <CDC_Receive_FS+0x24>)
 80195bc:	f7f7 face 	bl	8010b5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80195c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	3708      	adds	r7, #8
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	bf00      	nop
 80195cc:	20015170 	.word	0x20015170

080195d0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b084      	sub	sp, #16
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
 80195d8:	460b      	mov	r3, r1
 80195da:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80195dc:	2300      	movs	r3, #0
 80195de:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80195e0:	4b0d      	ldr	r3, [pc, #52]	; (8019618 <CDC_Transmit_FS+0x48>)
 80195e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80195e6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80195e8:	68bb      	ldr	r3, [r7, #8]
 80195ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d001      	beq.n	80195f6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80195f2:	2301      	movs	r3, #1
 80195f4:	e00b      	b.n	801960e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80195f6:	887b      	ldrh	r3, [r7, #2]
 80195f8:	461a      	mov	r2, r3
 80195fa:	6879      	ldr	r1, [r7, #4]
 80195fc:	4806      	ldr	r0, [pc, #24]	; (8019618 <CDC_Transmit_FS+0x48>)
 80195fe:	f7f7 fa46 	bl	8010a8e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019602:	4805      	ldr	r0, [pc, #20]	; (8019618 <CDC_Transmit_FS+0x48>)
 8019604:	f7f7 fa7a 	bl	8010afc <USBD_CDC_TransmitPacket>
 8019608:	4603      	mov	r3, r0
 801960a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801960c:	7bfb      	ldrb	r3, [r7, #15]
}
 801960e:	4618      	mov	r0, r3
 8019610:	3710      	adds	r7, #16
 8019612:	46bd      	mov	sp, r7
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	20015170 	.word	0x20015170

0801961c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801961c:	b480      	push	{r7}
 801961e:	b087      	sub	sp, #28
 8019620:	af00      	add	r7, sp, #0
 8019622:	60f8      	str	r0, [r7, #12]
 8019624:	60b9      	str	r1, [r7, #8]
 8019626:	4613      	mov	r3, r2
 8019628:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801962a:	2300      	movs	r3, #0
 801962c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801962e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019632:	4618      	mov	r0, r3
 8019634:	371c      	adds	r7, #28
 8019636:	46bd      	mov	sp, r7
 8019638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963c:	4770      	bx	lr
	...

08019640 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019640:	b480      	push	{r7}
 8019642:	b083      	sub	sp, #12
 8019644:	af00      	add	r7, sp, #0
 8019646:	4603      	mov	r3, r0
 8019648:	6039      	str	r1, [r7, #0]
 801964a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	2212      	movs	r2, #18
 8019650:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019652:	4b03      	ldr	r3, [pc, #12]	; (8019660 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019654:	4618      	mov	r0, r3
 8019656:	370c      	adds	r7, #12
 8019658:	46bd      	mov	sp, r7
 801965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801965e:	4770      	bx	lr
 8019660:	2000022c 	.word	0x2000022c

08019664 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019664:	b480      	push	{r7}
 8019666:	b083      	sub	sp, #12
 8019668:	af00      	add	r7, sp, #0
 801966a:	4603      	mov	r3, r0
 801966c:	6039      	str	r1, [r7, #0]
 801966e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019670:	683b      	ldr	r3, [r7, #0]
 8019672:	2204      	movs	r2, #4
 8019674:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019676:	4b03      	ldr	r3, [pc, #12]	; (8019684 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019678:	4618      	mov	r0, r3
 801967a:	370c      	adds	r7, #12
 801967c:	46bd      	mov	sp, r7
 801967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019682:	4770      	bx	lr
 8019684:	20000240 	.word	0x20000240

08019688 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019688:	b580      	push	{r7, lr}
 801968a:	b082      	sub	sp, #8
 801968c:	af00      	add	r7, sp, #0
 801968e:	4603      	mov	r3, r0
 8019690:	6039      	str	r1, [r7, #0]
 8019692:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019694:	79fb      	ldrb	r3, [r7, #7]
 8019696:	2b00      	cmp	r3, #0
 8019698:	d105      	bne.n	80196a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801969a:	683a      	ldr	r2, [r7, #0]
 801969c:	4907      	ldr	r1, [pc, #28]	; (80196bc <USBD_FS_ProductStrDescriptor+0x34>)
 801969e:	4808      	ldr	r0, [pc, #32]	; (80196c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80196a0:	f7f8 fb0f 	bl	8011cc2 <USBD_GetString>
 80196a4:	e004      	b.n	80196b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80196a6:	683a      	ldr	r2, [r7, #0]
 80196a8:	4904      	ldr	r1, [pc, #16]	; (80196bc <USBD_FS_ProductStrDescriptor+0x34>)
 80196aa:	4805      	ldr	r0, [pc, #20]	; (80196c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80196ac:	f7f8 fb09 	bl	8011cc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80196b0:	4b02      	ldr	r3, [pc, #8]	; (80196bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80196b2:	4618      	mov	r0, r3
 80196b4:	3708      	adds	r7, #8
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}
 80196ba:	bf00      	nop
 80196bc:	20016440 	.word	0x20016440
 80196c0:	0801dce4 	.word	0x0801dce4

080196c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b082      	sub	sp, #8
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	4603      	mov	r3, r0
 80196cc:	6039      	str	r1, [r7, #0]
 80196ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80196d0:	683a      	ldr	r2, [r7, #0]
 80196d2:	4904      	ldr	r1, [pc, #16]	; (80196e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80196d4:	4804      	ldr	r0, [pc, #16]	; (80196e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80196d6:	f7f8 faf4 	bl	8011cc2 <USBD_GetString>
  return USBD_StrDesc;
 80196da:	4b02      	ldr	r3, [pc, #8]	; (80196e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80196dc:	4618      	mov	r0, r3
 80196de:	3708      	adds	r7, #8
 80196e0:	46bd      	mov	sp, r7
 80196e2:	bd80      	pop	{r7, pc}
 80196e4:	20016440 	.word	0x20016440
 80196e8:	0801dcfc 	.word	0x0801dcfc

080196ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b082      	sub	sp, #8
 80196f0:	af00      	add	r7, sp, #0
 80196f2:	4603      	mov	r3, r0
 80196f4:	6039      	str	r1, [r7, #0]
 80196f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80196f8:	683b      	ldr	r3, [r7, #0]
 80196fa:	221a      	movs	r2, #26
 80196fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80196fe:	f000 f843 	bl	8019788 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019702:	4b02      	ldr	r3, [pc, #8]	; (801970c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019704:	4618      	mov	r0, r3
 8019706:	3708      	adds	r7, #8
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	20000244 	.word	0x20000244

08019710 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019710:	b580      	push	{r7, lr}
 8019712:	b082      	sub	sp, #8
 8019714:	af00      	add	r7, sp, #0
 8019716:	4603      	mov	r3, r0
 8019718:	6039      	str	r1, [r7, #0]
 801971a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801971c:	79fb      	ldrb	r3, [r7, #7]
 801971e:	2b00      	cmp	r3, #0
 8019720:	d105      	bne.n	801972e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019722:	683a      	ldr	r2, [r7, #0]
 8019724:	4907      	ldr	r1, [pc, #28]	; (8019744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019726:	4808      	ldr	r0, [pc, #32]	; (8019748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019728:	f7f8 facb 	bl	8011cc2 <USBD_GetString>
 801972c:	e004      	b.n	8019738 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801972e:	683a      	ldr	r2, [r7, #0]
 8019730:	4904      	ldr	r1, [pc, #16]	; (8019744 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019732:	4805      	ldr	r0, [pc, #20]	; (8019748 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019734:	f7f8 fac5 	bl	8011cc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019738:	4b02      	ldr	r3, [pc, #8]	; (8019744 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801973a:	4618      	mov	r0, r3
 801973c:	3708      	adds	r7, #8
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}
 8019742:	bf00      	nop
 8019744:	20016440 	.word	0x20016440
 8019748:	0801dd10 	.word	0x0801dd10

0801974c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801974c:	b580      	push	{r7, lr}
 801974e:	b082      	sub	sp, #8
 8019750:	af00      	add	r7, sp, #0
 8019752:	4603      	mov	r3, r0
 8019754:	6039      	str	r1, [r7, #0]
 8019756:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019758:	79fb      	ldrb	r3, [r7, #7]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d105      	bne.n	801976a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801975e:	683a      	ldr	r2, [r7, #0]
 8019760:	4907      	ldr	r1, [pc, #28]	; (8019780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019762:	4808      	ldr	r0, [pc, #32]	; (8019784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019764:	f7f8 faad 	bl	8011cc2 <USBD_GetString>
 8019768:	e004      	b.n	8019774 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801976a:	683a      	ldr	r2, [r7, #0]
 801976c:	4904      	ldr	r1, [pc, #16]	; (8019780 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801976e:	4805      	ldr	r0, [pc, #20]	; (8019784 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019770:	f7f8 faa7 	bl	8011cc2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019774:	4b02      	ldr	r3, [pc, #8]	; (8019780 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019776:	4618      	mov	r0, r3
 8019778:	3708      	adds	r7, #8
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
 801977e:	bf00      	nop
 8019780:	20016440 	.word	0x20016440
 8019784:	0801dd1c 	.word	0x0801dd1c

08019788 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019788:	b580      	push	{r7, lr}
 801978a:	b084      	sub	sp, #16
 801978c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801978e:	4b0f      	ldr	r3, [pc, #60]	; (80197cc <Get_SerialNum+0x44>)
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019794:	4b0e      	ldr	r3, [pc, #56]	; (80197d0 <Get_SerialNum+0x48>)
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801979a:	4b0e      	ldr	r3, [pc, #56]	; (80197d4 <Get_SerialNum+0x4c>)
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80197a0:	68fa      	ldr	r2, [r7, #12]
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	4413      	add	r3, r2
 80197a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80197a8:	68fb      	ldr	r3, [r7, #12]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d009      	beq.n	80197c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80197ae:	2208      	movs	r2, #8
 80197b0:	4909      	ldr	r1, [pc, #36]	; (80197d8 <Get_SerialNum+0x50>)
 80197b2:	68f8      	ldr	r0, [r7, #12]
 80197b4:	f000 f814 	bl	80197e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80197b8:	2204      	movs	r2, #4
 80197ba:	4908      	ldr	r1, [pc, #32]	; (80197dc <Get_SerialNum+0x54>)
 80197bc:	68b8      	ldr	r0, [r7, #8]
 80197be:	f000 f80f 	bl	80197e0 <IntToUnicode>
  }
}
 80197c2:	bf00      	nop
 80197c4:	3710      	adds	r7, #16
 80197c6:	46bd      	mov	sp, r7
 80197c8:	bd80      	pop	{r7, pc}
 80197ca:	bf00      	nop
 80197cc:	1fff7a10 	.word	0x1fff7a10
 80197d0:	1fff7a14 	.word	0x1fff7a14
 80197d4:	1fff7a18 	.word	0x1fff7a18
 80197d8:	20000246 	.word	0x20000246
 80197dc:	20000256 	.word	0x20000256

080197e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80197e0:	b480      	push	{r7}
 80197e2:	b087      	sub	sp, #28
 80197e4:	af00      	add	r7, sp, #0
 80197e6:	60f8      	str	r0, [r7, #12]
 80197e8:	60b9      	str	r1, [r7, #8]
 80197ea:	4613      	mov	r3, r2
 80197ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80197ee:	2300      	movs	r3, #0
 80197f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80197f2:	2300      	movs	r3, #0
 80197f4:	75fb      	strb	r3, [r7, #23]
 80197f6:	e027      	b.n	8019848 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	0f1b      	lsrs	r3, r3, #28
 80197fc:	2b09      	cmp	r3, #9
 80197fe:	d80b      	bhi.n	8019818 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019800:	68fb      	ldr	r3, [r7, #12]
 8019802:	0f1b      	lsrs	r3, r3, #28
 8019804:	b2da      	uxtb	r2, r3
 8019806:	7dfb      	ldrb	r3, [r7, #23]
 8019808:	005b      	lsls	r3, r3, #1
 801980a:	4619      	mov	r1, r3
 801980c:	68bb      	ldr	r3, [r7, #8]
 801980e:	440b      	add	r3, r1
 8019810:	3230      	adds	r2, #48	; 0x30
 8019812:	b2d2      	uxtb	r2, r2
 8019814:	701a      	strb	r2, [r3, #0]
 8019816:	e00a      	b.n	801982e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019818:	68fb      	ldr	r3, [r7, #12]
 801981a:	0f1b      	lsrs	r3, r3, #28
 801981c:	b2da      	uxtb	r2, r3
 801981e:	7dfb      	ldrb	r3, [r7, #23]
 8019820:	005b      	lsls	r3, r3, #1
 8019822:	4619      	mov	r1, r3
 8019824:	68bb      	ldr	r3, [r7, #8]
 8019826:	440b      	add	r3, r1
 8019828:	3237      	adds	r2, #55	; 0x37
 801982a:	b2d2      	uxtb	r2, r2
 801982c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801982e:	68fb      	ldr	r3, [r7, #12]
 8019830:	011b      	lsls	r3, r3, #4
 8019832:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019834:	7dfb      	ldrb	r3, [r7, #23]
 8019836:	005b      	lsls	r3, r3, #1
 8019838:	3301      	adds	r3, #1
 801983a:	68ba      	ldr	r2, [r7, #8]
 801983c:	4413      	add	r3, r2
 801983e:	2200      	movs	r2, #0
 8019840:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019842:	7dfb      	ldrb	r3, [r7, #23]
 8019844:	3301      	adds	r3, #1
 8019846:	75fb      	strb	r3, [r7, #23]
 8019848:	7dfa      	ldrb	r2, [r7, #23]
 801984a:	79fb      	ldrb	r3, [r7, #7]
 801984c:	429a      	cmp	r2, r3
 801984e:	d3d3      	bcc.n	80197f8 <IntToUnicode+0x18>
  }
}
 8019850:	bf00      	nop
 8019852:	bf00      	nop
 8019854:	371c      	adds	r7, #28
 8019856:	46bd      	mov	sp, r7
 8019858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801985c:	4770      	bx	lr
	...

08019860 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019860:	b580      	push	{r7, lr}
 8019862:	b08a      	sub	sp, #40	; 0x28
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019868:	f107 0314 	add.w	r3, r7, #20
 801986c:	2200      	movs	r2, #0
 801986e:	601a      	str	r2, [r3, #0]
 8019870:	605a      	str	r2, [r3, #4]
 8019872:	609a      	str	r2, [r3, #8]
 8019874:	60da      	str	r2, [r3, #12]
 8019876:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019880:	d147      	bne.n	8019912 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019882:	2300      	movs	r3, #0
 8019884:	613b      	str	r3, [r7, #16]
 8019886:	4b25      	ldr	r3, [pc, #148]	; (801991c <HAL_PCD_MspInit+0xbc>)
 8019888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801988a:	4a24      	ldr	r2, [pc, #144]	; (801991c <HAL_PCD_MspInit+0xbc>)
 801988c:	f043 0301 	orr.w	r3, r3, #1
 8019890:	6313      	str	r3, [r2, #48]	; 0x30
 8019892:	4b22      	ldr	r3, [pc, #136]	; (801991c <HAL_PCD_MspInit+0xbc>)
 8019894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019896:	f003 0301 	and.w	r3, r3, #1
 801989a:	613b      	str	r3, [r7, #16]
 801989c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801989e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80198a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80198a4:	2300      	movs	r3, #0
 80198a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80198a8:	2300      	movs	r3, #0
 80198aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80198ac:	f107 0314 	add.w	r3, r7, #20
 80198b0:	4619      	mov	r1, r3
 80198b2:	481b      	ldr	r0, [pc, #108]	; (8019920 <HAL_PCD_MspInit+0xc0>)
 80198b4:	f7ef fc48 	bl	8009148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80198b8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80198bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80198be:	2302      	movs	r3, #2
 80198c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80198c2:	2300      	movs	r3, #0
 80198c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80198c6:	2300      	movs	r3, #0
 80198c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80198ca:	230a      	movs	r3, #10
 80198cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80198ce:	f107 0314 	add.w	r3, r7, #20
 80198d2:	4619      	mov	r1, r3
 80198d4:	4812      	ldr	r0, [pc, #72]	; (8019920 <HAL_PCD_MspInit+0xc0>)
 80198d6:	f7ef fc37 	bl	8009148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80198da:	4b10      	ldr	r3, [pc, #64]	; (801991c <HAL_PCD_MspInit+0xbc>)
 80198dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80198de:	4a0f      	ldr	r2, [pc, #60]	; (801991c <HAL_PCD_MspInit+0xbc>)
 80198e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80198e4:	6353      	str	r3, [r2, #52]	; 0x34
 80198e6:	2300      	movs	r3, #0
 80198e8:	60fb      	str	r3, [r7, #12]
 80198ea:	4b0c      	ldr	r3, [pc, #48]	; (801991c <HAL_PCD_MspInit+0xbc>)
 80198ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198ee:	4a0b      	ldr	r2, [pc, #44]	; (801991c <HAL_PCD_MspInit+0xbc>)
 80198f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80198f4:	6453      	str	r3, [r2, #68]	; 0x44
 80198f6:	4b09      	ldr	r3, [pc, #36]	; (801991c <HAL_PCD_MspInit+0xbc>)
 80198f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80198fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80198fe:	60fb      	str	r3, [r7, #12]
 8019900:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019902:	2200      	movs	r2, #0
 8019904:	2105      	movs	r1, #5
 8019906:	2043      	movs	r0, #67	; 0x43
 8019908:	f7ee ff86 	bl	8008818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801990c:	2043      	movs	r0, #67	; 0x43
 801990e:	f7ee ff9f 	bl	8008850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019912:	bf00      	nop
 8019914:	3728      	adds	r7, #40	; 0x28
 8019916:	46bd      	mov	sp, r7
 8019918:	bd80      	pop	{r7, pc}
 801991a:	bf00      	nop
 801991c:	40023800 	.word	0x40023800
 8019920:	40020000 	.word	0x40020000

08019924 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b082      	sub	sp, #8
 8019928:	af00      	add	r7, sp, #0
 801992a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019938:	4619      	mov	r1, r3
 801993a:	4610      	mov	r0, r2
 801993c:	f7f7 f9da 	bl	8010cf4 <USBD_LL_SetupStage>
}
 8019940:	bf00      	nop
 8019942:	3708      	adds	r7, #8
 8019944:	46bd      	mov	sp, r7
 8019946:	bd80      	pop	{r7, pc}

08019948 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019948:	b580      	push	{r7, lr}
 801994a:	b082      	sub	sp, #8
 801994c:	af00      	add	r7, sp, #0
 801994e:	6078      	str	r0, [r7, #4]
 8019950:	460b      	mov	r3, r1
 8019952:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801995a:	78fa      	ldrb	r2, [r7, #3]
 801995c:	6879      	ldr	r1, [r7, #4]
 801995e:	4613      	mov	r3, r2
 8019960:	00db      	lsls	r3, r3, #3
 8019962:	1a9b      	subs	r3, r3, r2
 8019964:	009b      	lsls	r3, r3, #2
 8019966:	440b      	add	r3, r1
 8019968:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	78fb      	ldrb	r3, [r7, #3]
 8019970:	4619      	mov	r1, r3
 8019972:	f7f7 fa14 	bl	8010d9e <USBD_LL_DataOutStage>
}
 8019976:	bf00      	nop
 8019978:	3708      	adds	r7, #8
 801997a:	46bd      	mov	sp, r7
 801997c:	bd80      	pop	{r7, pc}

0801997e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801997e:	b580      	push	{r7, lr}
 8019980:	b082      	sub	sp, #8
 8019982:	af00      	add	r7, sp, #0
 8019984:	6078      	str	r0, [r7, #4]
 8019986:	460b      	mov	r3, r1
 8019988:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8019990:	78fa      	ldrb	r2, [r7, #3]
 8019992:	6879      	ldr	r1, [r7, #4]
 8019994:	4613      	mov	r3, r2
 8019996:	00db      	lsls	r3, r3, #3
 8019998:	1a9b      	subs	r3, r3, r2
 801999a:	009b      	lsls	r3, r3, #2
 801999c:	440b      	add	r3, r1
 801999e:	3348      	adds	r3, #72	; 0x48
 80199a0:	681a      	ldr	r2, [r3, #0]
 80199a2:	78fb      	ldrb	r3, [r7, #3]
 80199a4:	4619      	mov	r1, r3
 80199a6:	f7f7 fa5d 	bl	8010e64 <USBD_LL_DataInStage>
}
 80199aa:	bf00      	nop
 80199ac:	3708      	adds	r7, #8
 80199ae:	46bd      	mov	sp, r7
 80199b0:	bd80      	pop	{r7, pc}

080199b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80199b2:	b580      	push	{r7, lr}
 80199b4:	b082      	sub	sp, #8
 80199b6:	af00      	add	r7, sp, #0
 80199b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80199c0:	4618      	mov	r0, r3
 80199c2:	f7f7 fb71 	bl	80110a8 <USBD_LL_SOF>
}
 80199c6:	bf00      	nop
 80199c8:	3708      	adds	r7, #8
 80199ca:	46bd      	mov	sp, r7
 80199cc:	bd80      	pop	{r7, pc}

080199ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80199ce:	b580      	push	{r7, lr}
 80199d0:	b084      	sub	sp, #16
 80199d2:	af00      	add	r7, sp, #0
 80199d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80199d6:	2301      	movs	r3, #1
 80199d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	68db      	ldr	r3, [r3, #12]
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d102      	bne.n	80199e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80199e2:	2300      	movs	r3, #0
 80199e4:	73fb      	strb	r3, [r7, #15]
 80199e6:	e008      	b.n	80199fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	68db      	ldr	r3, [r3, #12]
 80199ec:	2b02      	cmp	r3, #2
 80199ee:	d102      	bne.n	80199f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80199f0:	2301      	movs	r3, #1
 80199f2:	73fb      	strb	r3, [r7, #15]
 80199f4:	e001      	b.n	80199fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80199f6:	f7eb fc17 	bl	8005228 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a00:	7bfa      	ldrb	r2, [r7, #15]
 8019a02:	4611      	mov	r1, r2
 8019a04:	4618      	mov	r0, r3
 8019a06:	f7f7 fb11 	bl	801102c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a10:	4618      	mov	r0, r3
 8019a12:	f7f7 fabd 	bl	8010f90 <USBD_LL_Reset>
}
 8019a16:	bf00      	nop
 8019a18:	3710      	adds	r7, #16
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd80      	pop	{r7, pc}
	...

08019a20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b082      	sub	sp, #8
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a2e:	4618      	mov	r0, r3
 8019a30:	f7f7 fb0c 	bl	801104c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019a3c:	681b      	ldr	r3, [r3, #0]
 8019a3e:	687a      	ldr	r2, [r7, #4]
 8019a40:	6812      	ldr	r2, [r2, #0]
 8019a42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8019a46:	f043 0301 	orr.w	r3, r3, #1
 8019a4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	6a1b      	ldr	r3, [r3, #32]
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d005      	beq.n	8019a60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019a54:	4b04      	ldr	r3, [pc, #16]	; (8019a68 <HAL_PCD_SuspendCallback+0x48>)
 8019a56:	691b      	ldr	r3, [r3, #16]
 8019a58:	4a03      	ldr	r2, [pc, #12]	; (8019a68 <HAL_PCD_SuspendCallback+0x48>)
 8019a5a:	f043 0306 	orr.w	r3, r3, #6
 8019a5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019a60:	bf00      	nop
 8019a62:	3708      	adds	r7, #8
 8019a64:	46bd      	mov	sp, r7
 8019a66:	bd80      	pop	{r7, pc}
 8019a68:	e000ed00 	.word	0xe000ed00

08019a6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	b082      	sub	sp, #8
 8019a70:	af00      	add	r7, sp, #0
 8019a72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	f7f7 fafc 	bl	8011078 <USBD_LL_Resume>
}
 8019a80:	bf00      	nop
 8019a82:	3708      	adds	r7, #8
 8019a84:	46bd      	mov	sp, r7
 8019a86:	bd80      	pop	{r7, pc}

08019a88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019a88:	b580      	push	{r7, lr}
 8019a8a:	b082      	sub	sp, #8
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
 8019a90:	460b      	mov	r3, r1
 8019a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019a9a:	78fa      	ldrb	r2, [r7, #3]
 8019a9c:	4611      	mov	r1, r2
 8019a9e:	4618      	mov	r0, r3
 8019aa0:	f7f7 fb4a 	bl	8011138 <USBD_LL_IsoOUTIncomplete>
}
 8019aa4:	bf00      	nop
 8019aa6:	3708      	adds	r7, #8
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}

08019aac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b082      	sub	sp, #8
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
 8019ab4:	460b      	mov	r3, r1
 8019ab6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019abe:	78fa      	ldrb	r2, [r7, #3]
 8019ac0:	4611      	mov	r1, r2
 8019ac2:	4618      	mov	r0, r3
 8019ac4:	f7f7 fb12 	bl	80110ec <USBD_LL_IsoINIncomplete>
}
 8019ac8:	bf00      	nop
 8019aca:	3708      	adds	r7, #8
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}

08019ad0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b082      	sub	sp, #8
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019ade:	4618      	mov	r0, r3
 8019ae0:	f7f7 fb50 	bl	8011184 <USBD_LL_DevConnected>
}
 8019ae4:	bf00      	nop
 8019ae6:	3708      	adds	r7, #8
 8019ae8:	46bd      	mov	sp, r7
 8019aea:	bd80      	pop	{r7, pc}

08019aec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b082      	sub	sp, #8
 8019af0:	af00      	add	r7, sp, #0
 8019af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019afa:	4618      	mov	r0, r3
 8019afc:	f7f7 fb4d 	bl	801119a <USBD_LL_DevDisconnected>
}
 8019b00:	bf00      	nop
 8019b02:	3708      	adds	r7, #8
 8019b04:	46bd      	mov	sp, r7
 8019b06:	bd80      	pop	{r7, pc}

08019b08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b082      	sub	sp, #8
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	781b      	ldrb	r3, [r3, #0]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d13c      	bne.n	8019b92 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019b18:	4a20      	ldr	r2, [pc, #128]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	4a1e      	ldr	r2, [pc, #120]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b24:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019b28:	4b1c      	ldr	r3, [pc, #112]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019b2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8019b30:	4b1a      	ldr	r3, [pc, #104]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b32:	2204      	movs	r2, #4
 8019b34:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019b36:	4b19      	ldr	r3, [pc, #100]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b38:	2202      	movs	r2, #2
 8019b3a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019b3c:	4b17      	ldr	r3, [pc, #92]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b3e:	2200      	movs	r2, #0
 8019b40:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019b42:	4b16      	ldr	r3, [pc, #88]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b44:	2202      	movs	r2, #2
 8019b46:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019b48:	4b14      	ldr	r3, [pc, #80]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8019b4e:	4b13      	ldr	r3, [pc, #76]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b50:	2200      	movs	r2, #0
 8019b52:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019b54:	4b11      	ldr	r3, [pc, #68]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b56:	2200      	movs	r2, #0
 8019b58:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8019b5a:	4b10      	ldr	r3, [pc, #64]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019b60:	4b0e      	ldr	r3, [pc, #56]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b62:	2200      	movs	r2, #0
 8019b64:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8019b66:	480d      	ldr	r0, [pc, #52]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b68:	f7f1 f9eb 	bl	800af42 <HAL_PCD_Init>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d001      	beq.n	8019b76 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8019b72:	f7eb fb59 	bl	8005228 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8019b76:	2180      	movs	r1, #128	; 0x80
 8019b78:	4808      	ldr	r0, [pc, #32]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b7a:	f7f2 fb48 	bl	800c20e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019b7e:	2240      	movs	r2, #64	; 0x40
 8019b80:	2100      	movs	r1, #0
 8019b82:	4806      	ldr	r0, [pc, #24]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b84:	f7f2 fafc 	bl	800c180 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8019b88:	2280      	movs	r2, #128	; 0x80
 8019b8a:	2101      	movs	r1, #1
 8019b8c:	4803      	ldr	r0, [pc, #12]	; (8019b9c <USBD_LL_Init+0x94>)
 8019b8e:	f7f2 faf7 	bl	800c180 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019b92:	2300      	movs	r3, #0
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3708      	adds	r7, #8
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	20016640 	.word	0x20016640

08019ba0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b084      	sub	sp, #16
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ba8:	2300      	movs	r3, #0
 8019baa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bac:	2300      	movs	r3, #0
 8019bae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f7f1 fae0 	bl	800b17c <HAL_PCD_Start>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019bc0:	7bfb      	ldrb	r3, [r7, #15]
 8019bc2:	4618      	mov	r0, r3
 8019bc4:	f000 f942 	bl	8019e4c <USBD_Get_USB_Status>
 8019bc8:	4603      	mov	r3, r0
 8019bca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019bcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8019bce:	4618      	mov	r0, r3
 8019bd0:	3710      	adds	r7, #16
 8019bd2:	46bd      	mov	sp, r7
 8019bd4:	bd80      	pop	{r7, pc}

08019bd6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019bd6:	b580      	push	{r7, lr}
 8019bd8:	b084      	sub	sp, #16
 8019bda:	af00      	add	r7, sp, #0
 8019bdc:	6078      	str	r0, [r7, #4]
 8019bde:	4608      	mov	r0, r1
 8019be0:	4611      	mov	r1, r2
 8019be2:	461a      	mov	r2, r3
 8019be4:	4603      	mov	r3, r0
 8019be6:	70fb      	strb	r3, [r7, #3]
 8019be8:	460b      	mov	r3, r1
 8019bea:	70bb      	strb	r3, [r7, #2]
 8019bec:	4613      	mov	r3, r2
 8019bee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bf4:	2300      	movs	r3, #0
 8019bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019bfe:	78bb      	ldrb	r3, [r7, #2]
 8019c00:	883a      	ldrh	r2, [r7, #0]
 8019c02:	78f9      	ldrb	r1, [r7, #3]
 8019c04:	f7f1 fec4 	bl	800b990 <HAL_PCD_EP_Open>
 8019c08:	4603      	mov	r3, r0
 8019c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c0c:	7bfb      	ldrb	r3, [r7, #15]
 8019c0e:	4618      	mov	r0, r3
 8019c10:	f000 f91c 	bl	8019e4c <USBD_Get_USB_Status>
 8019c14:	4603      	mov	r3, r0
 8019c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c1a:	4618      	mov	r0, r3
 8019c1c:	3710      	adds	r7, #16
 8019c1e:	46bd      	mov	sp, r7
 8019c20:	bd80      	pop	{r7, pc}

08019c22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c22:	b580      	push	{r7, lr}
 8019c24:	b084      	sub	sp, #16
 8019c26:	af00      	add	r7, sp, #0
 8019c28:	6078      	str	r0, [r7, #4]
 8019c2a:	460b      	mov	r3, r1
 8019c2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c2e:	2300      	movs	r3, #0
 8019c30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c32:	2300      	movs	r3, #0
 8019c34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019c3c:	78fa      	ldrb	r2, [r7, #3]
 8019c3e:	4611      	mov	r1, r2
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7f1 ff0d 	bl	800ba60 <HAL_PCD_EP_Close>
 8019c46:	4603      	mov	r3, r0
 8019c48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c4a:	7bfb      	ldrb	r3, [r7, #15]
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f000 f8fd 	bl	8019e4c <USBD_Get_USB_Status>
 8019c52:	4603      	mov	r3, r0
 8019c54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c56:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3710      	adds	r7, #16
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}

08019c60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c60:	b580      	push	{r7, lr}
 8019c62:	b084      	sub	sp, #16
 8019c64:	af00      	add	r7, sp, #0
 8019c66:	6078      	str	r0, [r7, #4]
 8019c68:	460b      	mov	r3, r1
 8019c6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c6c:	2300      	movs	r3, #0
 8019c6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019c70:	2300      	movs	r3, #0
 8019c72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019c7a:	78fa      	ldrb	r2, [r7, #3]
 8019c7c:	4611      	mov	r1, r2
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7f1 ffe5 	bl	800bc4e <HAL_PCD_EP_SetStall>
 8019c84:	4603      	mov	r3, r0
 8019c86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019c88:	7bfb      	ldrb	r3, [r7, #15]
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f000 f8de 	bl	8019e4c <USBD_Get_USB_Status>
 8019c90:	4603      	mov	r3, r0
 8019c92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019c94:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c96:	4618      	mov	r0, r3
 8019c98:	3710      	adds	r7, #16
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}

08019c9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019c9e:	b580      	push	{r7, lr}
 8019ca0:	b084      	sub	sp, #16
 8019ca2:	af00      	add	r7, sp, #0
 8019ca4:	6078      	str	r0, [r7, #4]
 8019ca6:	460b      	mov	r3, r1
 8019ca8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019caa:	2300      	movs	r3, #0
 8019cac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019cae:	2300      	movs	r3, #0
 8019cb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019cb2:	687b      	ldr	r3, [r7, #4]
 8019cb4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019cb8:	78fa      	ldrb	r2, [r7, #3]
 8019cba:	4611      	mov	r1, r2
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	f7f2 f82a 	bl	800bd16 <HAL_PCD_EP_ClrStall>
 8019cc2:	4603      	mov	r3, r0
 8019cc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019cc6:	7bfb      	ldrb	r3, [r7, #15]
 8019cc8:	4618      	mov	r0, r3
 8019cca:	f000 f8bf 	bl	8019e4c <USBD_Get_USB_Status>
 8019cce:	4603      	mov	r3, r0
 8019cd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019cd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019cd4:	4618      	mov	r0, r3
 8019cd6:	3710      	adds	r7, #16
 8019cd8:	46bd      	mov	sp, r7
 8019cda:	bd80      	pop	{r7, pc}

08019cdc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019cdc:	b480      	push	{r7}
 8019cde:	b085      	sub	sp, #20
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	6078      	str	r0, [r7, #4]
 8019ce4:	460b      	mov	r3, r1
 8019ce6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019cee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019cf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	da0b      	bge.n	8019d10 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019cf8:	78fb      	ldrb	r3, [r7, #3]
 8019cfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019cfe:	68f9      	ldr	r1, [r7, #12]
 8019d00:	4613      	mov	r3, r2
 8019d02:	00db      	lsls	r3, r3, #3
 8019d04:	1a9b      	subs	r3, r3, r2
 8019d06:	009b      	lsls	r3, r3, #2
 8019d08:	440b      	add	r3, r1
 8019d0a:	333e      	adds	r3, #62	; 0x3e
 8019d0c:	781b      	ldrb	r3, [r3, #0]
 8019d0e:	e00b      	b.n	8019d28 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019d10:	78fb      	ldrb	r3, [r7, #3]
 8019d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019d16:	68f9      	ldr	r1, [r7, #12]
 8019d18:	4613      	mov	r3, r2
 8019d1a:	00db      	lsls	r3, r3, #3
 8019d1c:	1a9b      	subs	r3, r3, r2
 8019d1e:	009b      	lsls	r3, r3, #2
 8019d20:	440b      	add	r3, r1
 8019d22:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019d26:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019d28:	4618      	mov	r0, r3
 8019d2a:	3714      	adds	r7, #20
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d32:	4770      	bx	lr

08019d34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019d34:	b580      	push	{r7, lr}
 8019d36:	b084      	sub	sp, #16
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
 8019d3c:	460b      	mov	r3, r1
 8019d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d40:	2300      	movs	r3, #0
 8019d42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d44:	2300      	movs	r3, #0
 8019d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019d4e:	78fa      	ldrb	r2, [r7, #3]
 8019d50:	4611      	mov	r1, r2
 8019d52:	4618      	mov	r0, r3
 8019d54:	f7f1 fdf7 	bl	800b946 <HAL_PCD_SetAddress>
 8019d58:	4603      	mov	r3, r0
 8019d5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d5c:	7bfb      	ldrb	r3, [r7, #15]
 8019d5e:	4618      	mov	r0, r3
 8019d60:	f000 f874 	bl	8019e4c <USBD_Get_USB_Status>
 8019d64:	4603      	mov	r3, r0
 8019d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d6a:	4618      	mov	r0, r3
 8019d6c:	3710      	adds	r7, #16
 8019d6e:	46bd      	mov	sp, r7
 8019d70:	bd80      	pop	{r7, pc}

08019d72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019d72:	b580      	push	{r7, lr}
 8019d74:	b086      	sub	sp, #24
 8019d76:	af00      	add	r7, sp, #0
 8019d78:	60f8      	str	r0, [r7, #12]
 8019d7a:	607a      	str	r2, [r7, #4]
 8019d7c:	603b      	str	r3, [r7, #0]
 8019d7e:	460b      	mov	r3, r1
 8019d80:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d82:	2300      	movs	r3, #0
 8019d84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019d86:	2300      	movs	r3, #0
 8019d88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019d8a:	68fb      	ldr	r3, [r7, #12]
 8019d8c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019d90:	7af9      	ldrb	r1, [r7, #11]
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	687a      	ldr	r2, [r7, #4]
 8019d96:	f7f1 ff10 	bl	800bbba <HAL_PCD_EP_Transmit>
 8019d9a:	4603      	mov	r3, r0
 8019d9c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019d9e:	7dfb      	ldrb	r3, [r7, #23]
 8019da0:	4618      	mov	r0, r3
 8019da2:	f000 f853 	bl	8019e4c <USBD_Get_USB_Status>
 8019da6:	4603      	mov	r3, r0
 8019da8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019daa:	7dbb      	ldrb	r3, [r7, #22]
}
 8019dac:	4618      	mov	r0, r3
 8019dae:	3718      	adds	r7, #24
 8019db0:	46bd      	mov	sp, r7
 8019db2:	bd80      	pop	{r7, pc}

08019db4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b086      	sub	sp, #24
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	60f8      	str	r0, [r7, #12]
 8019dbc:	607a      	str	r2, [r7, #4]
 8019dbe:	603b      	str	r3, [r7, #0]
 8019dc0:	460b      	mov	r3, r1
 8019dc2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019dc8:	2300      	movs	r3, #0
 8019dca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019dcc:	68fb      	ldr	r3, [r7, #12]
 8019dce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019dd2:	7af9      	ldrb	r1, [r7, #11]
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	687a      	ldr	r2, [r7, #4]
 8019dd8:	f7f1 fe8c 	bl	800baf4 <HAL_PCD_EP_Receive>
 8019ddc:	4603      	mov	r3, r0
 8019dde:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019de0:	7dfb      	ldrb	r3, [r7, #23]
 8019de2:	4618      	mov	r0, r3
 8019de4:	f000 f832 	bl	8019e4c <USBD_Get_USB_Status>
 8019de8:	4603      	mov	r3, r0
 8019dea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019dec:	7dbb      	ldrb	r3, [r7, #22]
}
 8019dee:	4618      	mov	r0, r3
 8019df0:	3718      	adds	r7, #24
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}

08019df6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019df6:	b580      	push	{r7, lr}
 8019df8:	b082      	sub	sp, #8
 8019dfa:	af00      	add	r7, sp, #0
 8019dfc:	6078      	str	r0, [r7, #4]
 8019dfe:	460b      	mov	r3, r1
 8019e00:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019e02:	687b      	ldr	r3, [r7, #4]
 8019e04:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019e08:	78fa      	ldrb	r2, [r7, #3]
 8019e0a:	4611      	mov	r1, r2
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7f1 febc 	bl	800bb8a <HAL_PCD_EP_GetRxCount>
 8019e12:	4603      	mov	r3, r0
}
 8019e14:	4618      	mov	r0, r3
 8019e16:	3708      	adds	r7, #8
 8019e18:	46bd      	mov	sp, r7
 8019e1a:	bd80      	pop	{r7, pc}

08019e1c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	b083      	sub	sp, #12
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019e24:	4b03      	ldr	r3, [pc, #12]	; (8019e34 <USBD_static_malloc+0x18>)
}
 8019e26:	4618      	mov	r0, r3
 8019e28:	370c      	adds	r7, #12
 8019e2a:	46bd      	mov	sp, r7
 8019e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e30:	4770      	bx	lr
 8019e32:	bf00      	nop
 8019e34:	200074ec 	.word	0x200074ec

08019e38 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019e38:	b480      	push	{r7}
 8019e3a:	b083      	sub	sp, #12
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]

}
 8019e40:	bf00      	nop
 8019e42:	370c      	adds	r7, #12
 8019e44:	46bd      	mov	sp, r7
 8019e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e4a:	4770      	bx	lr

08019e4c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019e4c:	b480      	push	{r7}
 8019e4e:	b085      	sub	sp, #20
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	4603      	mov	r3, r0
 8019e54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019e56:	2300      	movs	r3, #0
 8019e58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019e5a:	79fb      	ldrb	r3, [r7, #7]
 8019e5c:	2b03      	cmp	r3, #3
 8019e5e:	d817      	bhi.n	8019e90 <USBD_Get_USB_Status+0x44>
 8019e60:	a201      	add	r2, pc, #4	; (adr r2, 8019e68 <USBD_Get_USB_Status+0x1c>)
 8019e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e66:	bf00      	nop
 8019e68:	08019e79 	.word	0x08019e79
 8019e6c:	08019e7f 	.word	0x08019e7f
 8019e70:	08019e85 	.word	0x08019e85
 8019e74:	08019e8b 	.word	0x08019e8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019e78:	2300      	movs	r3, #0
 8019e7a:	73fb      	strb	r3, [r7, #15]
    break;
 8019e7c:	e00b      	b.n	8019e96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019e7e:	2303      	movs	r3, #3
 8019e80:	73fb      	strb	r3, [r7, #15]
    break;
 8019e82:	e008      	b.n	8019e96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019e84:	2301      	movs	r3, #1
 8019e86:	73fb      	strb	r3, [r7, #15]
    break;
 8019e88:	e005      	b.n	8019e96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019e8a:	2303      	movs	r3, #3
 8019e8c:	73fb      	strb	r3, [r7, #15]
    break;
 8019e8e:	e002      	b.n	8019e96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019e90:	2303      	movs	r3, #3
 8019e92:	73fb      	strb	r3, [r7, #15]
    break;
 8019e94:	bf00      	nop
  }
  return usb_status;
 8019e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8019e98:	4618      	mov	r0, r3
 8019e9a:	3714      	adds	r7, #20
 8019e9c:	46bd      	mov	sp, r7
 8019e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea2:	4770      	bx	lr

08019ea4 <__errno>:
 8019ea4:	4b01      	ldr	r3, [pc, #4]	; (8019eac <__errno+0x8>)
 8019ea6:	6818      	ldr	r0, [r3, #0]
 8019ea8:	4770      	bx	lr
 8019eaa:	bf00      	nop
 8019eac:	20000260 	.word	0x20000260

08019eb0 <std>:
 8019eb0:	2300      	movs	r3, #0
 8019eb2:	b510      	push	{r4, lr}
 8019eb4:	4604      	mov	r4, r0
 8019eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8019eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019ebe:	6083      	str	r3, [r0, #8]
 8019ec0:	8181      	strh	r1, [r0, #12]
 8019ec2:	6643      	str	r3, [r0, #100]	; 0x64
 8019ec4:	81c2      	strh	r2, [r0, #14]
 8019ec6:	6183      	str	r3, [r0, #24]
 8019ec8:	4619      	mov	r1, r3
 8019eca:	2208      	movs	r2, #8
 8019ecc:	305c      	adds	r0, #92	; 0x5c
 8019ece:	f000 f945 	bl	801a15c <memset>
 8019ed2:	4b05      	ldr	r3, [pc, #20]	; (8019ee8 <std+0x38>)
 8019ed4:	6263      	str	r3, [r4, #36]	; 0x24
 8019ed6:	4b05      	ldr	r3, [pc, #20]	; (8019eec <std+0x3c>)
 8019ed8:	62a3      	str	r3, [r4, #40]	; 0x28
 8019eda:	4b05      	ldr	r3, [pc, #20]	; (8019ef0 <std+0x40>)
 8019edc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019ede:	4b05      	ldr	r3, [pc, #20]	; (8019ef4 <std+0x44>)
 8019ee0:	6224      	str	r4, [r4, #32]
 8019ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8019ee4:	bd10      	pop	{r4, pc}
 8019ee6:	bf00      	nop
 8019ee8:	0801acc9 	.word	0x0801acc9
 8019eec:	0801aceb 	.word	0x0801aceb
 8019ef0:	0801ad23 	.word	0x0801ad23
 8019ef4:	0801ad47 	.word	0x0801ad47

08019ef8 <_cleanup_r>:
 8019ef8:	4901      	ldr	r1, [pc, #4]	; (8019f00 <_cleanup_r+0x8>)
 8019efa:	f000 b8af 	b.w	801a05c <_fwalk_reent>
 8019efe:	bf00      	nop
 8019f00:	0801bc45 	.word	0x0801bc45

08019f04 <__sfmoreglue>:
 8019f04:	b570      	push	{r4, r5, r6, lr}
 8019f06:	1e4a      	subs	r2, r1, #1
 8019f08:	2568      	movs	r5, #104	; 0x68
 8019f0a:	4355      	muls	r5, r2
 8019f0c:	460e      	mov	r6, r1
 8019f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019f12:	f000 f97b 	bl	801a20c <_malloc_r>
 8019f16:	4604      	mov	r4, r0
 8019f18:	b140      	cbz	r0, 8019f2c <__sfmoreglue+0x28>
 8019f1a:	2100      	movs	r1, #0
 8019f1c:	e9c0 1600 	strd	r1, r6, [r0]
 8019f20:	300c      	adds	r0, #12
 8019f22:	60a0      	str	r0, [r4, #8]
 8019f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019f28:	f000 f918 	bl	801a15c <memset>
 8019f2c:	4620      	mov	r0, r4
 8019f2e:	bd70      	pop	{r4, r5, r6, pc}

08019f30 <__sfp_lock_acquire>:
 8019f30:	4801      	ldr	r0, [pc, #4]	; (8019f38 <__sfp_lock_acquire+0x8>)
 8019f32:	f000 b8f2 	b.w	801a11a <__retarget_lock_acquire_recursive>
 8019f36:	bf00      	nop
 8019f38:	20016a50 	.word	0x20016a50

08019f3c <__sfp_lock_release>:
 8019f3c:	4801      	ldr	r0, [pc, #4]	; (8019f44 <__sfp_lock_release+0x8>)
 8019f3e:	f000 b8ed 	b.w	801a11c <__retarget_lock_release_recursive>
 8019f42:	bf00      	nop
 8019f44:	20016a50 	.word	0x20016a50

08019f48 <__sinit_lock_acquire>:
 8019f48:	4801      	ldr	r0, [pc, #4]	; (8019f50 <__sinit_lock_acquire+0x8>)
 8019f4a:	f000 b8e6 	b.w	801a11a <__retarget_lock_acquire_recursive>
 8019f4e:	bf00      	nop
 8019f50:	20016a4b 	.word	0x20016a4b

08019f54 <__sinit_lock_release>:
 8019f54:	4801      	ldr	r0, [pc, #4]	; (8019f5c <__sinit_lock_release+0x8>)
 8019f56:	f000 b8e1 	b.w	801a11c <__retarget_lock_release_recursive>
 8019f5a:	bf00      	nop
 8019f5c:	20016a4b 	.word	0x20016a4b

08019f60 <__sinit>:
 8019f60:	b510      	push	{r4, lr}
 8019f62:	4604      	mov	r4, r0
 8019f64:	f7ff fff0 	bl	8019f48 <__sinit_lock_acquire>
 8019f68:	69a3      	ldr	r3, [r4, #24]
 8019f6a:	b11b      	cbz	r3, 8019f74 <__sinit+0x14>
 8019f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f70:	f7ff bff0 	b.w	8019f54 <__sinit_lock_release>
 8019f74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019f78:	6523      	str	r3, [r4, #80]	; 0x50
 8019f7a:	4b13      	ldr	r3, [pc, #76]	; (8019fc8 <__sinit+0x68>)
 8019f7c:	4a13      	ldr	r2, [pc, #76]	; (8019fcc <__sinit+0x6c>)
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	62a2      	str	r2, [r4, #40]	; 0x28
 8019f82:	42a3      	cmp	r3, r4
 8019f84:	bf04      	itt	eq
 8019f86:	2301      	moveq	r3, #1
 8019f88:	61a3      	streq	r3, [r4, #24]
 8019f8a:	4620      	mov	r0, r4
 8019f8c:	f000 f820 	bl	8019fd0 <__sfp>
 8019f90:	6060      	str	r0, [r4, #4]
 8019f92:	4620      	mov	r0, r4
 8019f94:	f000 f81c 	bl	8019fd0 <__sfp>
 8019f98:	60a0      	str	r0, [r4, #8]
 8019f9a:	4620      	mov	r0, r4
 8019f9c:	f000 f818 	bl	8019fd0 <__sfp>
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	60e0      	str	r0, [r4, #12]
 8019fa4:	2104      	movs	r1, #4
 8019fa6:	6860      	ldr	r0, [r4, #4]
 8019fa8:	f7ff ff82 	bl	8019eb0 <std>
 8019fac:	68a0      	ldr	r0, [r4, #8]
 8019fae:	2201      	movs	r2, #1
 8019fb0:	2109      	movs	r1, #9
 8019fb2:	f7ff ff7d 	bl	8019eb0 <std>
 8019fb6:	68e0      	ldr	r0, [r4, #12]
 8019fb8:	2202      	movs	r2, #2
 8019fba:	2112      	movs	r1, #18
 8019fbc:	f7ff ff78 	bl	8019eb0 <std>
 8019fc0:	2301      	movs	r3, #1
 8019fc2:	61a3      	str	r3, [r4, #24]
 8019fc4:	e7d2      	b.n	8019f6c <__sinit+0xc>
 8019fc6:	bf00      	nop
 8019fc8:	08022138 	.word	0x08022138
 8019fcc:	08019ef9 	.word	0x08019ef9

08019fd0 <__sfp>:
 8019fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fd2:	4607      	mov	r7, r0
 8019fd4:	f7ff ffac 	bl	8019f30 <__sfp_lock_acquire>
 8019fd8:	4b1e      	ldr	r3, [pc, #120]	; (801a054 <__sfp+0x84>)
 8019fda:	681e      	ldr	r6, [r3, #0]
 8019fdc:	69b3      	ldr	r3, [r6, #24]
 8019fde:	b913      	cbnz	r3, 8019fe6 <__sfp+0x16>
 8019fe0:	4630      	mov	r0, r6
 8019fe2:	f7ff ffbd 	bl	8019f60 <__sinit>
 8019fe6:	3648      	adds	r6, #72	; 0x48
 8019fe8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019fec:	3b01      	subs	r3, #1
 8019fee:	d503      	bpl.n	8019ff8 <__sfp+0x28>
 8019ff0:	6833      	ldr	r3, [r6, #0]
 8019ff2:	b30b      	cbz	r3, 801a038 <__sfp+0x68>
 8019ff4:	6836      	ldr	r6, [r6, #0]
 8019ff6:	e7f7      	b.n	8019fe8 <__sfp+0x18>
 8019ff8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019ffc:	b9d5      	cbnz	r5, 801a034 <__sfp+0x64>
 8019ffe:	4b16      	ldr	r3, [pc, #88]	; (801a058 <__sfp+0x88>)
 801a000:	60e3      	str	r3, [r4, #12]
 801a002:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a006:	6665      	str	r5, [r4, #100]	; 0x64
 801a008:	f000 f886 	bl	801a118 <__retarget_lock_init_recursive>
 801a00c:	f7ff ff96 	bl	8019f3c <__sfp_lock_release>
 801a010:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a014:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a018:	6025      	str	r5, [r4, #0]
 801a01a:	61a5      	str	r5, [r4, #24]
 801a01c:	2208      	movs	r2, #8
 801a01e:	4629      	mov	r1, r5
 801a020:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a024:	f000 f89a 	bl	801a15c <memset>
 801a028:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a02c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a030:	4620      	mov	r0, r4
 801a032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a034:	3468      	adds	r4, #104	; 0x68
 801a036:	e7d9      	b.n	8019fec <__sfp+0x1c>
 801a038:	2104      	movs	r1, #4
 801a03a:	4638      	mov	r0, r7
 801a03c:	f7ff ff62 	bl	8019f04 <__sfmoreglue>
 801a040:	4604      	mov	r4, r0
 801a042:	6030      	str	r0, [r6, #0]
 801a044:	2800      	cmp	r0, #0
 801a046:	d1d5      	bne.n	8019ff4 <__sfp+0x24>
 801a048:	f7ff ff78 	bl	8019f3c <__sfp_lock_release>
 801a04c:	230c      	movs	r3, #12
 801a04e:	603b      	str	r3, [r7, #0]
 801a050:	e7ee      	b.n	801a030 <__sfp+0x60>
 801a052:	bf00      	nop
 801a054:	08022138 	.word	0x08022138
 801a058:	ffff0001 	.word	0xffff0001

0801a05c <_fwalk_reent>:
 801a05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a060:	4606      	mov	r6, r0
 801a062:	4688      	mov	r8, r1
 801a064:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a068:	2700      	movs	r7, #0
 801a06a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a06e:	f1b9 0901 	subs.w	r9, r9, #1
 801a072:	d505      	bpl.n	801a080 <_fwalk_reent+0x24>
 801a074:	6824      	ldr	r4, [r4, #0]
 801a076:	2c00      	cmp	r4, #0
 801a078:	d1f7      	bne.n	801a06a <_fwalk_reent+0xe>
 801a07a:	4638      	mov	r0, r7
 801a07c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a080:	89ab      	ldrh	r3, [r5, #12]
 801a082:	2b01      	cmp	r3, #1
 801a084:	d907      	bls.n	801a096 <_fwalk_reent+0x3a>
 801a086:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a08a:	3301      	adds	r3, #1
 801a08c:	d003      	beq.n	801a096 <_fwalk_reent+0x3a>
 801a08e:	4629      	mov	r1, r5
 801a090:	4630      	mov	r0, r6
 801a092:	47c0      	blx	r8
 801a094:	4307      	orrs	r7, r0
 801a096:	3568      	adds	r5, #104	; 0x68
 801a098:	e7e9      	b.n	801a06e <_fwalk_reent+0x12>
	...

0801a09c <__libc_init_array>:
 801a09c:	b570      	push	{r4, r5, r6, lr}
 801a09e:	4d0d      	ldr	r5, [pc, #52]	; (801a0d4 <__libc_init_array+0x38>)
 801a0a0:	4c0d      	ldr	r4, [pc, #52]	; (801a0d8 <__libc_init_array+0x3c>)
 801a0a2:	1b64      	subs	r4, r4, r5
 801a0a4:	10a4      	asrs	r4, r4, #2
 801a0a6:	2600      	movs	r6, #0
 801a0a8:	42a6      	cmp	r6, r4
 801a0aa:	d109      	bne.n	801a0c0 <__libc_init_array+0x24>
 801a0ac:	4d0b      	ldr	r5, [pc, #44]	; (801a0dc <__libc_init_array+0x40>)
 801a0ae:	4c0c      	ldr	r4, [pc, #48]	; (801a0e0 <__libc_init_array+0x44>)
 801a0b0:	f003 fa04 	bl	801d4bc <_init>
 801a0b4:	1b64      	subs	r4, r4, r5
 801a0b6:	10a4      	asrs	r4, r4, #2
 801a0b8:	2600      	movs	r6, #0
 801a0ba:	42a6      	cmp	r6, r4
 801a0bc:	d105      	bne.n	801a0ca <__libc_init_array+0x2e>
 801a0be:	bd70      	pop	{r4, r5, r6, pc}
 801a0c0:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0c4:	4798      	blx	r3
 801a0c6:	3601      	adds	r6, #1
 801a0c8:	e7ee      	b.n	801a0a8 <__libc_init_array+0xc>
 801a0ca:	f855 3b04 	ldr.w	r3, [r5], #4
 801a0ce:	4798      	blx	r3
 801a0d0:	3601      	adds	r6, #1
 801a0d2:	e7f2      	b.n	801a0ba <__libc_init_array+0x1e>
 801a0d4:	08022560 	.word	0x08022560
 801a0d8:	08022560 	.word	0x08022560
 801a0dc:	08022560 	.word	0x08022560
 801a0e0:	08022564 	.word	0x08022564

0801a0e4 <__itoa>:
 801a0e4:	1e93      	subs	r3, r2, #2
 801a0e6:	2b22      	cmp	r3, #34	; 0x22
 801a0e8:	b510      	push	{r4, lr}
 801a0ea:	460c      	mov	r4, r1
 801a0ec:	d904      	bls.n	801a0f8 <__itoa+0x14>
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	700b      	strb	r3, [r1, #0]
 801a0f2:	461c      	mov	r4, r3
 801a0f4:	4620      	mov	r0, r4
 801a0f6:	bd10      	pop	{r4, pc}
 801a0f8:	2a0a      	cmp	r2, #10
 801a0fa:	d109      	bne.n	801a110 <__itoa+0x2c>
 801a0fc:	2800      	cmp	r0, #0
 801a0fe:	da07      	bge.n	801a110 <__itoa+0x2c>
 801a100:	232d      	movs	r3, #45	; 0x2d
 801a102:	700b      	strb	r3, [r1, #0]
 801a104:	4240      	negs	r0, r0
 801a106:	2101      	movs	r1, #1
 801a108:	4421      	add	r1, r4
 801a10a:	f000 fe37 	bl	801ad7c <__utoa>
 801a10e:	e7f1      	b.n	801a0f4 <__itoa+0x10>
 801a110:	2100      	movs	r1, #0
 801a112:	e7f9      	b.n	801a108 <__itoa+0x24>

0801a114 <itoa>:
 801a114:	f7ff bfe6 	b.w	801a0e4 <__itoa>

0801a118 <__retarget_lock_init_recursive>:
 801a118:	4770      	bx	lr

0801a11a <__retarget_lock_acquire_recursive>:
 801a11a:	4770      	bx	lr

0801a11c <__retarget_lock_release_recursive>:
 801a11c:	4770      	bx	lr
	...

0801a120 <malloc>:
 801a120:	4b02      	ldr	r3, [pc, #8]	; (801a12c <malloc+0xc>)
 801a122:	4601      	mov	r1, r0
 801a124:	6818      	ldr	r0, [r3, #0]
 801a126:	f000 b871 	b.w	801a20c <_malloc_r>
 801a12a:	bf00      	nop
 801a12c:	20000260 	.word	0x20000260

0801a130 <free>:
 801a130:	4b02      	ldr	r3, [pc, #8]	; (801a13c <free+0xc>)
 801a132:	4601      	mov	r1, r0
 801a134:	6818      	ldr	r0, [r3, #0]
 801a136:	f000 b819 	b.w	801a16c <_free_r>
 801a13a:	bf00      	nop
 801a13c:	20000260 	.word	0x20000260

0801a140 <memcpy>:
 801a140:	440a      	add	r2, r1
 801a142:	4291      	cmp	r1, r2
 801a144:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801a148:	d100      	bne.n	801a14c <memcpy+0xc>
 801a14a:	4770      	bx	lr
 801a14c:	b510      	push	{r4, lr}
 801a14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a152:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a156:	4291      	cmp	r1, r2
 801a158:	d1f9      	bne.n	801a14e <memcpy+0xe>
 801a15a:	bd10      	pop	{r4, pc}

0801a15c <memset>:
 801a15c:	4402      	add	r2, r0
 801a15e:	4603      	mov	r3, r0
 801a160:	4293      	cmp	r3, r2
 801a162:	d100      	bne.n	801a166 <memset+0xa>
 801a164:	4770      	bx	lr
 801a166:	f803 1b01 	strb.w	r1, [r3], #1
 801a16a:	e7f9      	b.n	801a160 <memset+0x4>

0801a16c <_free_r>:
 801a16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a16e:	2900      	cmp	r1, #0
 801a170:	d048      	beq.n	801a204 <_free_r+0x98>
 801a172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a176:	9001      	str	r0, [sp, #4]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	f1a1 0404 	sub.w	r4, r1, #4
 801a17e:	bfb8      	it	lt
 801a180:	18e4      	addlt	r4, r4, r3
 801a182:	f001 fdb1 	bl	801bce8 <__malloc_lock>
 801a186:	4a20      	ldr	r2, [pc, #128]	; (801a208 <_free_r+0x9c>)
 801a188:	9801      	ldr	r0, [sp, #4]
 801a18a:	6813      	ldr	r3, [r2, #0]
 801a18c:	4615      	mov	r5, r2
 801a18e:	b933      	cbnz	r3, 801a19e <_free_r+0x32>
 801a190:	6063      	str	r3, [r4, #4]
 801a192:	6014      	str	r4, [r2, #0]
 801a194:	b003      	add	sp, #12
 801a196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a19a:	f001 bdab 	b.w	801bcf4 <__malloc_unlock>
 801a19e:	42a3      	cmp	r3, r4
 801a1a0:	d90b      	bls.n	801a1ba <_free_r+0x4e>
 801a1a2:	6821      	ldr	r1, [r4, #0]
 801a1a4:	1862      	adds	r2, r4, r1
 801a1a6:	4293      	cmp	r3, r2
 801a1a8:	bf04      	itt	eq
 801a1aa:	681a      	ldreq	r2, [r3, #0]
 801a1ac:	685b      	ldreq	r3, [r3, #4]
 801a1ae:	6063      	str	r3, [r4, #4]
 801a1b0:	bf04      	itt	eq
 801a1b2:	1852      	addeq	r2, r2, r1
 801a1b4:	6022      	streq	r2, [r4, #0]
 801a1b6:	602c      	str	r4, [r5, #0]
 801a1b8:	e7ec      	b.n	801a194 <_free_r+0x28>
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	685b      	ldr	r3, [r3, #4]
 801a1be:	b10b      	cbz	r3, 801a1c4 <_free_r+0x58>
 801a1c0:	42a3      	cmp	r3, r4
 801a1c2:	d9fa      	bls.n	801a1ba <_free_r+0x4e>
 801a1c4:	6811      	ldr	r1, [r2, #0]
 801a1c6:	1855      	adds	r5, r2, r1
 801a1c8:	42a5      	cmp	r5, r4
 801a1ca:	d10b      	bne.n	801a1e4 <_free_r+0x78>
 801a1cc:	6824      	ldr	r4, [r4, #0]
 801a1ce:	4421      	add	r1, r4
 801a1d0:	1854      	adds	r4, r2, r1
 801a1d2:	42a3      	cmp	r3, r4
 801a1d4:	6011      	str	r1, [r2, #0]
 801a1d6:	d1dd      	bne.n	801a194 <_free_r+0x28>
 801a1d8:	681c      	ldr	r4, [r3, #0]
 801a1da:	685b      	ldr	r3, [r3, #4]
 801a1dc:	6053      	str	r3, [r2, #4]
 801a1de:	4421      	add	r1, r4
 801a1e0:	6011      	str	r1, [r2, #0]
 801a1e2:	e7d7      	b.n	801a194 <_free_r+0x28>
 801a1e4:	d902      	bls.n	801a1ec <_free_r+0x80>
 801a1e6:	230c      	movs	r3, #12
 801a1e8:	6003      	str	r3, [r0, #0]
 801a1ea:	e7d3      	b.n	801a194 <_free_r+0x28>
 801a1ec:	6825      	ldr	r5, [r4, #0]
 801a1ee:	1961      	adds	r1, r4, r5
 801a1f0:	428b      	cmp	r3, r1
 801a1f2:	bf04      	itt	eq
 801a1f4:	6819      	ldreq	r1, [r3, #0]
 801a1f6:	685b      	ldreq	r3, [r3, #4]
 801a1f8:	6063      	str	r3, [r4, #4]
 801a1fa:	bf04      	itt	eq
 801a1fc:	1949      	addeq	r1, r1, r5
 801a1fe:	6021      	streq	r1, [r4, #0]
 801a200:	6054      	str	r4, [r2, #4]
 801a202:	e7c7      	b.n	801a194 <_free_r+0x28>
 801a204:	b003      	add	sp, #12
 801a206:	bd30      	pop	{r4, r5, pc}
 801a208:	2000770c 	.word	0x2000770c

0801a20c <_malloc_r>:
 801a20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a20e:	1ccd      	adds	r5, r1, #3
 801a210:	f025 0503 	bic.w	r5, r5, #3
 801a214:	3508      	adds	r5, #8
 801a216:	2d0c      	cmp	r5, #12
 801a218:	bf38      	it	cc
 801a21a:	250c      	movcc	r5, #12
 801a21c:	2d00      	cmp	r5, #0
 801a21e:	4606      	mov	r6, r0
 801a220:	db01      	blt.n	801a226 <_malloc_r+0x1a>
 801a222:	42a9      	cmp	r1, r5
 801a224:	d903      	bls.n	801a22e <_malloc_r+0x22>
 801a226:	230c      	movs	r3, #12
 801a228:	6033      	str	r3, [r6, #0]
 801a22a:	2000      	movs	r0, #0
 801a22c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a22e:	f001 fd5b 	bl	801bce8 <__malloc_lock>
 801a232:	4921      	ldr	r1, [pc, #132]	; (801a2b8 <_malloc_r+0xac>)
 801a234:	680a      	ldr	r2, [r1, #0]
 801a236:	4614      	mov	r4, r2
 801a238:	b99c      	cbnz	r4, 801a262 <_malloc_r+0x56>
 801a23a:	4f20      	ldr	r7, [pc, #128]	; (801a2bc <_malloc_r+0xb0>)
 801a23c:	683b      	ldr	r3, [r7, #0]
 801a23e:	b923      	cbnz	r3, 801a24a <_malloc_r+0x3e>
 801a240:	4621      	mov	r1, r4
 801a242:	4630      	mov	r0, r6
 801a244:	f000 fd10 	bl	801ac68 <_sbrk_r>
 801a248:	6038      	str	r0, [r7, #0]
 801a24a:	4629      	mov	r1, r5
 801a24c:	4630      	mov	r0, r6
 801a24e:	f000 fd0b 	bl	801ac68 <_sbrk_r>
 801a252:	1c43      	adds	r3, r0, #1
 801a254:	d123      	bne.n	801a29e <_malloc_r+0x92>
 801a256:	230c      	movs	r3, #12
 801a258:	6033      	str	r3, [r6, #0]
 801a25a:	4630      	mov	r0, r6
 801a25c:	f001 fd4a 	bl	801bcf4 <__malloc_unlock>
 801a260:	e7e3      	b.n	801a22a <_malloc_r+0x1e>
 801a262:	6823      	ldr	r3, [r4, #0]
 801a264:	1b5b      	subs	r3, r3, r5
 801a266:	d417      	bmi.n	801a298 <_malloc_r+0x8c>
 801a268:	2b0b      	cmp	r3, #11
 801a26a:	d903      	bls.n	801a274 <_malloc_r+0x68>
 801a26c:	6023      	str	r3, [r4, #0]
 801a26e:	441c      	add	r4, r3
 801a270:	6025      	str	r5, [r4, #0]
 801a272:	e004      	b.n	801a27e <_malloc_r+0x72>
 801a274:	6863      	ldr	r3, [r4, #4]
 801a276:	42a2      	cmp	r2, r4
 801a278:	bf0c      	ite	eq
 801a27a:	600b      	streq	r3, [r1, #0]
 801a27c:	6053      	strne	r3, [r2, #4]
 801a27e:	4630      	mov	r0, r6
 801a280:	f001 fd38 	bl	801bcf4 <__malloc_unlock>
 801a284:	f104 000b 	add.w	r0, r4, #11
 801a288:	1d23      	adds	r3, r4, #4
 801a28a:	f020 0007 	bic.w	r0, r0, #7
 801a28e:	1ac2      	subs	r2, r0, r3
 801a290:	d0cc      	beq.n	801a22c <_malloc_r+0x20>
 801a292:	1a1b      	subs	r3, r3, r0
 801a294:	50a3      	str	r3, [r4, r2]
 801a296:	e7c9      	b.n	801a22c <_malloc_r+0x20>
 801a298:	4622      	mov	r2, r4
 801a29a:	6864      	ldr	r4, [r4, #4]
 801a29c:	e7cc      	b.n	801a238 <_malloc_r+0x2c>
 801a29e:	1cc4      	adds	r4, r0, #3
 801a2a0:	f024 0403 	bic.w	r4, r4, #3
 801a2a4:	42a0      	cmp	r0, r4
 801a2a6:	d0e3      	beq.n	801a270 <_malloc_r+0x64>
 801a2a8:	1a21      	subs	r1, r4, r0
 801a2aa:	4630      	mov	r0, r6
 801a2ac:	f000 fcdc 	bl	801ac68 <_sbrk_r>
 801a2b0:	3001      	adds	r0, #1
 801a2b2:	d1dd      	bne.n	801a270 <_malloc_r+0x64>
 801a2b4:	e7cf      	b.n	801a256 <_malloc_r+0x4a>
 801a2b6:	bf00      	nop
 801a2b8:	2000770c 	.word	0x2000770c
 801a2bc:	20007710 	.word	0x20007710

0801a2c0 <__cvt>:
 801a2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a2c4:	ec55 4b10 	vmov	r4, r5, d0
 801a2c8:	2d00      	cmp	r5, #0
 801a2ca:	460e      	mov	r6, r1
 801a2cc:	4619      	mov	r1, r3
 801a2ce:	462b      	mov	r3, r5
 801a2d0:	bfbb      	ittet	lt
 801a2d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801a2d6:	461d      	movlt	r5, r3
 801a2d8:	2300      	movge	r3, #0
 801a2da:	232d      	movlt	r3, #45	; 0x2d
 801a2dc:	700b      	strb	r3, [r1, #0]
 801a2de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801a2e4:	4691      	mov	r9, r2
 801a2e6:	f023 0820 	bic.w	r8, r3, #32
 801a2ea:	bfbc      	itt	lt
 801a2ec:	4622      	movlt	r2, r4
 801a2ee:	4614      	movlt	r4, r2
 801a2f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a2f4:	d005      	beq.n	801a302 <__cvt+0x42>
 801a2f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801a2fa:	d100      	bne.n	801a2fe <__cvt+0x3e>
 801a2fc:	3601      	adds	r6, #1
 801a2fe:	2102      	movs	r1, #2
 801a300:	e000      	b.n	801a304 <__cvt+0x44>
 801a302:	2103      	movs	r1, #3
 801a304:	ab03      	add	r3, sp, #12
 801a306:	9301      	str	r3, [sp, #4]
 801a308:	ab02      	add	r3, sp, #8
 801a30a:	9300      	str	r3, [sp, #0]
 801a30c:	ec45 4b10 	vmov	d0, r4, r5
 801a310:	4653      	mov	r3, sl
 801a312:	4632      	mov	r2, r6
 801a314:	f000 fe24 	bl	801af60 <_dtoa_r>
 801a318:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801a31c:	4607      	mov	r7, r0
 801a31e:	d102      	bne.n	801a326 <__cvt+0x66>
 801a320:	f019 0f01 	tst.w	r9, #1
 801a324:	d022      	beq.n	801a36c <__cvt+0xac>
 801a326:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801a32a:	eb07 0906 	add.w	r9, r7, r6
 801a32e:	d110      	bne.n	801a352 <__cvt+0x92>
 801a330:	783b      	ldrb	r3, [r7, #0]
 801a332:	2b30      	cmp	r3, #48	; 0x30
 801a334:	d10a      	bne.n	801a34c <__cvt+0x8c>
 801a336:	2200      	movs	r2, #0
 801a338:	2300      	movs	r3, #0
 801a33a:	4620      	mov	r0, r4
 801a33c:	4629      	mov	r1, r5
 801a33e:	f7e6 fbc3 	bl	8000ac8 <__aeabi_dcmpeq>
 801a342:	b918      	cbnz	r0, 801a34c <__cvt+0x8c>
 801a344:	f1c6 0601 	rsb	r6, r6, #1
 801a348:	f8ca 6000 	str.w	r6, [sl]
 801a34c:	f8da 3000 	ldr.w	r3, [sl]
 801a350:	4499      	add	r9, r3
 801a352:	2200      	movs	r2, #0
 801a354:	2300      	movs	r3, #0
 801a356:	4620      	mov	r0, r4
 801a358:	4629      	mov	r1, r5
 801a35a:	f7e6 fbb5 	bl	8000ac8 <__aeabi_dcmpeq>
 801a35e:	b108      	cbz	r0, 801a364 <__cvt+0xa4>
 801a360:	f8cd 900c 	str.w	r9, [sp, #12]
 801a364:	2230      	movs	r2, #48	; 0x30
 801a366:	9b03      	ldr	r3, [sp, #12]
 801a368:	454b      	cmp	r3, r9
 801a36a:	d307      	bcc.n	801a37c <__cvt+0xbc>
 801a36c:	9b03      	ldr	r3, [sp, #12]
 801a36e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a370:	1bdb      	subs	r3, r3, r7
 801a372:	4638      	mov	r0, r7
 801a374:	6013      	str	r3, [r2, #0]
 801a376:	b004      	add	sp, #16
 801a378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a37c:	1c59      	adds	r1, r3, #1
 801a37e:	9103      	str	r1, [sp, #12]
 801a380:	701a      	strb	r2, [r3, #0]
 801a382:	e7f0      	b.n	801a366 <__cvt+0xa6>

0801a384 <__exponent>:
 801a384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a386:	4603      	mov	r3, r0
 801a388:	2900      	cmp	r1, #0
 801a38a:	bfb8      	it	lt
 801a38c:	4249      	neglt	r1, r1
 801a38e:	f803 2b02 	strb.w	r2, [r3], #2
 801a392:	bfb4      	ite	lt
 801a394:	222d      	movlt	r2, #45	; 0x2d
 801a396:	222b      	movge	r2, #43	; 0x2b
 801a398:	2909      	cmp	r1, #9
 801a39a:	7042      	strb	r2, [r0, #1]
 801a39c:	dd2a      	ble.n	801a3f4 <__exponent+0x70>
 801a39e:	f10d 0407 	add.w	r4, sp, #7
 801a3a2:	46a4      	mov	ip, r4
 801a3a4:	270a      	movs	r7, #10
 801a3a6:	46a6      	mov	lr, r4
 801a3a8:	460a      	mov	r2, r1
 801a3aa:	fb91 f6f7 	sdiv	r6, r1, r7
 801a3ae:	fb07 1516 	mls	r5, r7, r6, r1
 801a3b2:	3530      	adds	r5, #48	; 0x30
 801a3b4:	2a63      	cmp	r2, #99	; 0x63
 801a3b6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801a3ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801a3be:	4631      	mov	r1, r6
 801a3c0:	dcf1      	bgt.n	801a3a6 <__exponent+0x22>
 801a3c2:	3130      	adds	r1, #48	; 0x30
 801a3c4:	f1ae 0502 	sub.w	r5, lr, #2
 801a3c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 801a3cc:	1c44      	adds	r4, r0, #1
 801a3ce:	4629      	mov	r1, r5
 801a3d0:	4561      	cmp	r1, ip
 801a3d2:	d30a      	bcc.n	801a3ea <__exponent+0x66>
 801a3d4:	f10d 0209 	add.w	r2, sp, #9
 801a3d8:	eba2 020e 	sub.w	r2, r2, lr
 801a3dc:	4565      	cmp	r5, ip
 801a3de:	bf88      	it	hi
 801a3e0:	2200      	movhi	r2, #0
 801a3e2:	4413      	add	r3, r2
 801a3e4:	1a18      	subs	r0, r3, r0
 801a3e6:	b003      	add	sp, #12
 801a3e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a3ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a3ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 801a3f2:	e7ed      	b.n	801a3d0 <__exponent+0x4c>
 801a3f4:	2330      	movs	r3, #48	; 0x30
 801a3f6:	3130      	adds	r1, #48	; 0x30
 801a3f8:	7083      	strb	r3, [r0, #2]
 801a3fa:	70c1      	strb	r1, [r0, #3]
 801a3fc:	1d03      	adds	r3, r0, #4
 801a3fe:	e7f1      	b.n	801a3e4 <__exponent+0x60>

0801a400 <_printf_float>:
 801a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a404:	ed2d 8b02 	vpush	{d8}
 801a408:	b08d      	sub	sp, #52	; 0x34
 801a40a:	460c      	mov	r4, r1
 801a40c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801a410:	4616      	mov	r6, r2
 801a412:	461f      	mov	r7, r3
 801a414:	4605      	mov	r5, r0
 801a416:	f001 fc51 	bl	801bcbc <_localeconv_r>
 801a41a:	f8d0 a000 	ldr.w	sl, [r0]
 801a41e:	4650      	mov	r0, sl
 801a420:	f7e5 fed6 	bl	80001d0 <strlen>
 801a424:	2300      	movs	r3, #0
 801a426:	930a      	str	r3, [sp, #40]	; 0x28
 801a428:	6823      	ldr	r3, [r4, #0]
 801a42a:	9305      	str	r3, [sp, #20]
 801a42c:	f8d8 3000 	ldr.w	r3, [r8]
 801a430:	f894 b018 	ldrb.w	fp, [r4, #24]
 801a434:	3307      	adds	r3, #7
 801a436:	f023 0307 	bic.w	r3, r3, #7
 801a43a:	f103 0208 	add.w	r2, r3, #8
 801a43e:	f8c8 2000 	str.w	r2, [r8]
 801a442:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a446:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801a44a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801a44e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a452:	9307      	str	r3, [sp, #28]
 801a454:	f8cd 8018 	str.w	r8, [sp, #24]
 801a458:	ee08 0a10 	vmov	s16, r0
 801a45c:	4b9f      	ldr	r3, [pc, #636]	; (801a6dc <_printf_float+0x2dc>)
 801a45e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a466:	f7e6 fb61 	bl	8000b2c <__aeabi_dcmpun>
 801a46a:	bb88      	cbnz	r0, 801a4d0 <_printf_float+0xd0>
 801a46c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a470:	4b9a      	ldr	r3, [pc, #616]	; (801a6dc <_printf_float+0x2dc>)
 801a472:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a476:	f7e6 fb3b 	bl	8000af0 <__aeabi_dcmple>
 801a47a:	bb48      	cbnz	r0, 801a4d0 <_printf_float+0xd0>
 801a47c:	2200      	movs	r2, #0
 801a47e:	2300      	movs	r3, #0
 801a480:	4640      	mov	r0, r8
 801a482:	4649      	mov	r1, r9
 801a484:	f7e6 fb2a 	bl	8000adc <__aeabi_dcmplt>
 801a488:	b110      	cbz	r0, 801a490 <_printf_float+0x90>
 801a48a:	232d      	movs	r3, #45	; 0x2d
 801a48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a490:	4b93      	ldr	r3, [pc, #588]	; (801a6e0 <_printf_float+0x2e0>)
 801a492:	4894      	ldr	r0, [pc, #592]	; (801a6e4 <_printf_float+0x2e4>)
 801a494:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801a498:	bf94      	ite	ls
 801a49a:	4698      	movls	r8, r3
 801a49c:	4680      	movhi	r8, r0
 801a49e:	2303      	movs	r3, #3
 801a4a0:	6123      	str	r3, [r4, #16]
 801a4a2:	9b05      	ldr	r3, [sp, #20]
 801a4a4:	f023 0204 	bic.w	r2, r3, #4
 801a4a8:	6022      	str	r2, [r4, #0]
 801a4aa:	f04f 0900 	mov.w	r9, #0
 801a4ae:	9700      	str	r7, [sp, #0]
 801a4b0:	4633      	mov	r3, r6
 801a4b2:	aa0b      	add	r2, sp, #44	; 0x2c
 801a4b4:	4621      	mov	r1, r4
 801a4b6:	4628      	mov	r0, r5
 801a4b8:	f000 f9d8 	bl	801a86c <_printf_common>
 801a4bc:	3001      	adds	r0, #1
 801a4be:	f040 8090 	bne.w	801a5e2 <_printf_float+0x1e2>
 801a4c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a4c6:	b00d      	add	sp, #52	; 0x34
 801a4c8:	ecbd 8b02 	vpop	{d8}
 801a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4d0:	4642      	mov	r2, r8
 801a4d2:	464b      	mov	r3, r9
 801a4d4:	4640      	mov	r0, r8
 801a4d6:	4649      	mov	r1, r9
 801a4d8:	f7e6 fb28 	bl	8000b2c <__aeabi_dcmpun>
 801a4dc:	b140      	cbz	r0, 801a4f0 <_printf_float+0xf0>
 801a4de:	464b      	mov	r3, r9
 801a4e0:	2b00      	cmp	r3, #0
 801a4e2:	bfbc      	itt	lt
 801a4e4:	232d      	movlt	r3, #45	; 0x2d
 801a4e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a4ea:	487f      	ldr	r0, [pc, #508]	; (801a6e8 <_printf_float+0x2e8>)
 801a4ec:	4b7f      	ldr	r3, [pc, #508]	; (801a6ec <_printf_float+0x2ec>)
 801a4ee:	e7d1      	b.n	801a494 <_printf_float+0x94>
 801a4f0:	6863      	ldr	r3, [r4, #4]
 801a4f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a4f6:	9206      	str	r2, [sp, #24]
 801a4f8:	1c5a      	adds	r2, r3, #1
 801a4fa:	d13f      	bne.n	801a57c <_printf_float+0x17c>
 801a4fc:	2306      	movs	r3, #6
 801a4fe:	6063      	str	r3, [r4, #4]
 801a500:	9b05      	ldr	r3, [sp, #20]
 801a502:	6861      	ldr	r1, [r4, #4]
 801a504:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a508:	2300      	movs	r3, #0
 801a50a:	9303      	str	r3, [sp, #12]
 801a50c:	ab0a      	add	r3, sp, #40	; 0x28
 801a50e:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a512:	ab09      	add	r3, sp, #36	; 0x24
 801a514:	ec49 8b10 	vmov	d0, r8, r9
 801a518:	9300      	str	r3, [sp, #0]
 801a51a:	6022      	str	r2, [r4, #0]
 801a51c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a520:	4628      	mov	r0, r5
 801a522:	f7ff fecd 	bl	801a2c0 <__cvt>
 801a526:	9b06      	ldr	r3, [sp, #24]
 801a528:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a52a:	2b47      	cmp	r3, #71	; 0x47
 801a52c:	4680      	mov	r8, r0
 801a52e:	d108      	bne.n	801a542 <_printf_float+0x142>
 801a530:	1cc8      	adds	r0, r1, #3
 801a532:	db02      	blt.n	801a53a <_printf_float+0x13a>
 801a534:	6863      	ldr	r3, [r4, #4]
 801a536:	4299      	cmp	r1, r3
 801a538:	dd41      	ble.n	801a5be <_printf_float+0x1be>
 801a53a:	f1ab 0b02 	sub.w	fp, fp, #2
 801a53e:	fa5f fb8b 	uxtb.w	fp, fp
 801a542:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a546:	d820      	bhi.n	801a58a <_printf_float+0x18a>
 801a548:	3901      	subs	r1, #1
 801a54a:	465a      	mov	r2, fp
 801a54c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a550:	9109      	str	r1, [sp, #36]	; 0x24
 801a552:	f7ff ff17 	bl	801a384 <__exponent>
 801a556:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a558:	1813      	adds	r3, r2, r0
 801a55a:	2a01      	cmp	r2, #1
 801a55c:	4681      	mov	r9, r0
 801a55e:	6123      	str	r3, [r4, #16]
 801a560:	dc02      	bgt.n	801a568 <_printf_float+0x168>
 801a562:	6822      	ldr	r2, [r4, #0]
 801a564:	07d2      	lsls	r2, r2, #31
 801a566:	d501      	bpl.n	801a56c <_printf_float+0x16c>
 801a568:	3301      	adds	r3, #1
 801a56a:	6123      	str	r3, [r4, #16]
 801a56c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a570:	2b00      	cmp	r3, #0
 801a572:	d09c      	beq.n	801a4ae <_printf_float+0xae>
 801a574:	232d      	movs	r3, #45	; 0x2d
 801a576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a57a:	e798      	b.n	801a4ae <_printf_float+0xae>
 801a57c:	9a06      	ldr	r2, [sp, #24]
 801a57e:	2a47      	cmp	r2, #71	; 0x47
 801a580:	d1be      	bne.n	801a500 <_printf_float+0x100>
 801a582:	2b00      	cmp	r3, #0
 801a584:	d1bc      	bne.n	801a500 <_printf_float+0x100>
 801a586:	2301      	movs	r3, #1
 801a588:	e7b9      	b.n	801a4fe <_printf_float+0xfe>
 801a58a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a58e:	d118      	bne.n	801a5c2 <_printf_float+0x1c2>
 801a590:	2900      	cmp	r1, #0
 801a592:	6863      	ldr	r3, [r4, #4]
 801a594:	dd0b      	ble.n	801a5ae <_printf_float+0x1ae>
 801a596:	6121      	str	r1, [r4, #16]
 801a598:	b913      	cbnz	r3, 801a5a0 <_printf_float+0x1a0>
 801a59a:	6822      	ldr	r2, [r4, #0]
 801a59c:	07d0      	lsls	r0, r2, #31
 801a59e:	d502      	bpl.n	801a5a6 <_printf_float+0x1a6>
 801a5a0:	3301      	adds	r3, #1
 801a5a2:	440b      	add	r3, r1
 801a5a4:	6123      	str	r3, [r4, #16]
 801a5a6:	65a1      	str	r1, [r4, #88]	; 0x58
 801a5a8:	f04f 0900 	mov.w	r9, #0
 801a5ac:	e7de      	b.n	801a56c <_printf_float+0x16c>
 801a5ae:	b913      	cbnz	r3, 801a5b6 <_printf_float+0x1b6>
 801a5b0:	6822      	ldr	r2, [r4, #0]
 801a5b2:	07d2      	lsls	r2, r2, #31
 801a5b4:	d501      	bpl.n	801a5ba <_printf_float+0x1ba>
 801a5b6:	3302      	adds	r3, #2
 801a5b8:	e7f4      	b.n	801a5a4 <_printf_float+0x1a4>
 801a5ba:	2301      	movs	r3, #1
 801a5bc:	e7f2      	b.n	801a5a4 <_printf_float+0x1a4>
 801a5be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a5c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a5c4:	4299      	cmp	r1, r3
 801a5c6:	db05      	blt.n	801a5d4 <_printf_float+0x1d4>
 801a5c8:	6823      	ldr	r3, [r4, #0]
 801a5ca:	6121      	str	r1, [r4, #16]
 801a5cc:	07d8      	lsls	r0, r3, #31
 801a5ce:	d5ea      	bpl.n	801a5a6 <_printf_float+0x1a6>
 801a5d0:	1c4b      	adds	r3, r1, #1
 801a5d2:	e7e7      	b.n	801a5a4 <_printf_float+0x1a4>
 801a5d4:	2900      	cmp	r1, #0
 801a5d6:	bfd4      	ite	le
 801a5d8:	f1c1 0202 	rsble	r2, r1, #2
 801a5dc:	2201      	movgt	r2, #1
 801a5de:	4413      	add	r3, r2
 801a5e0:	e7e0      	b.n	801a5a4 <_printf_float+0x1a4>
 801a5e2:	6823      	ldr	r3, [r4, #0]
 801a5e4:	055a      	lsls	r2, r3, #21
 801a5e6:	d407      	bmi.n	801a5f8 <_printf_float+0x1f8>
 801a5e8:	6923      	ldr	r3, [r4, #16]
 801a5ea:	4642      	mov	r2, r8
 801a5ec:	4631      	mov	r1, r6
 801a5ee:	4628      	mov	r0, r5
 801a5f0:	47b8      	blx	r7
 801a5f2:	3001      	adds	r0, #1
 801a5f4:	d12c      	bne.n	801a650 <_printf_float+0x250>
 801a5f6:	e764      	b.n	801a4c2 <_printf_float+0xc2>
 801a5f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a5fc:	f240 80e0 	bls.w	801a7c0 <_printf_float+0x3c0>
 801a600:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a604:	2200      	movs	r2, #0
 801a606:	2300      	movs	r3, #0
 801a608:	f7e6 fa5e 	bl	8000ac8 <__aeabi_dcmpeq>
 801a60c:	2800      	cmp	r0, #0
 801a60e:	d034      	beq.n	801a67a <_printf_float+0x27a>
 801a610:	4a37      	ldr	r2, [pc, #220]	; (801a6f0 <_printf_float+0x2f0>)
 801a612:	2301      	movs	r3, #1
 801a614:	4631      	mov	r1, r6
 801a616:	4628      	mov	r0, r5
 801a618:	47b8      	blx	r7
 801a61a:	3001      	adds	r0, #1
 801a61c:	f43f af51 	beq.w	801a4c2 <_printf_float+0xc2>
 801a620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a624:	429a      	cmp	r2, r3
 801a626:	db02      	blt.n	801a62e <_printf_float+0x22e>
 801a628:	6823      	ldr	r3, [r4, #0]
 801a62a:	07d8      	lsls	r0, r3, #31
 801a62c:	d510      	bpl.n	801a650 <_printf_float+0x250>
 801a62e:	ee18 3a10 	vmov	r3, s16
 801a632:	4652      	mov	r2, sl
 801a634:	4631      	mov	r1, r6
 801a636:	4628      	mov	r0, r5
 801a638:	47b8      	blx	r7
 801a63a:	3001      	adds	r0, #1
 801a63c:	f43f af41 	beq.w	801a4c2 <_printf_float+0xc2>
 801a640:	f04f 0800 	mov.w	r8, #0
 801a644:	f104 091a 	add.w	r9, r4, #26
 801a648:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a64a:	3b01      	subs	r3, #1
 801a64c:	4543      	cmp	r3, r8
 801a64e:	dc09      	bgt.n	801a664 <_printf_float+0x264>
 801a650:	6823      	ldr	r3, [r4, #0]
 801a652:	079b      	lsls	r3, r3, #30
 801a654:	f100 8105 	bmi.w	801a862 <_printf_float+0x462>
 801a658:	68e0      	ldr	r0, [r4, #12]
 801a65a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a65c:	4298      	cmp	r0, r3
 801a65e:	bfb8      	it	lt
 801a660:	4618      	movlt	r0, r3
 801a662:	e730      	b.n	801a4c6 <_printf_float+0xc6>
 801a664:	2301      	movs	r3, #1
 801a666:	464a      	mov	r2, r9
 801a668:	4631      	mov	r1, r6
 801a66a:	4628      	mov	r0, r5
 801a66c:	47b8      	blx	r7
 801a66e:	3001      	adds	r0, #1
 801a670:	f43f af27 	beq.w	801a4c2 <_printf_float+0xc2>
 801a674:	f108 0801 	add.w	r8, r8, #1
 801a678:	e7e6      	b.n	801a648 <_printf_float+0x248>
 801a67a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	dc39      	bgt.n	801a6f4 <_printf_float+0x2f4>
 801a680:	4a1b      	ldr	r2, [pc, #108]	; (801a6f0 <_printf_float+0x2f0>)
 801a682:	2301      	movs	r3, #1
 801a684:	4631      	mov	r1, r6
 801a686:	4628      	mov	r0, r5
 801a688:	47b8      	blx	r7
 801a68a:	3001      	adds	r0, #1
 801a68c:	f43f af19 	beq.w	801a4c2 <_printf_float+0xc2>
 801a690:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a694:	4313      	orrs	r3, r2
 801a696:	d102      	bne.n	801a69e <_printf_float+0x29e>
 801a698:	6823      	ldr	r3, [r4, #0]
 801a69a:	07d9      	lsls	r1, r3, #31
 801a69c:	d5d8      	bpl.n	801a650 <_printf_float+0x250>
 801a69e:	ee18 3a10 	vmov	r3, s16
 801a6a2:	4652      	mov	r2, sl
 801a6a4:	4631      	mov	r1, r6
 801a6a6:	4628      	mov	r0, r5
 801a6a8:	47b8      	blx	r7
 801a6aa:	3001      	adds	r0, #1
 801a6ac:	f43f af09 	beq.w	801a4c2 <_printf_float+0xc2>
 801a6b0:	f04f 0900 	mov.w	r9, #0
 801a6b4:	f104 0a1a 	add.w	sl, r4, #26
 801a6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a6ba:	425b      	negs	r3, r3
 801a6bc:	454b      	cmp	r3, r9
 801a6be:	dc01      	bgt.n	801a6c4 <_printf_float+0x2c4>
 801a6c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a6c2:	e792      	b.n	801a5ea <_printf_float+0x1ea>
 801a6c4:	2301      	movs	r3, #1
 801a6c6:	4652      	mov	r2, sl
 801a6c8:	4631      	mov	r1, r6
 801a6ca:	4628      	mov	r0, r5
 801a6cc:	47b8      	blx	r7
 801a6ce:	3001      	adds	r0, #1
 801a6d0:	f43f aef7 	beq.w	801a4c2 <_printf_float+0xc2>
 801a6d4:	f109 0901 	add.w	r9, r9, #1
 801a6d8:	e7ee      	b.n	801a6b8 <_printf_float+0x2b8>
 801a6da:	bf00      	nop
 801a6dc:	7fefffff 	.word	0x7fefffff
 801a6e0:	0802213c 	.word	0x0802213c
 801a6e4:	08022140 	.word	0x08022140
 801a6e8:	08022148 	.word	0x08022148
 801a6ec:	08022144 	.word	0x08022144
 801a6f0:	0802214c 	.word	0x0802214c
 801a6f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a6f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a6f8:	429a      	cmp	r2, r3
 801a6fa:	bfa8      	it	ge
 801a6fc:	461a      	movge	r2, r3
 801a6fe:	2a00      	cmp	r2, #0
 801a700:	4691      	mov	r9, r2
 801a702:	dc37      	bgt.n	801a774 <_printf_float+0x374>
 801a704:	f04f 0b00 	mov.w	fp, #0
 801a708:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a70c:	f104 021a 	add.w	r2, r4, #26
 801a710:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a712:	9305      	str	r3, [sp, #20]
 801a714:	eba3 0309 	sub.w	r3, r3, r9
 801a718:	455b      	cmp	r3, fp
 801a71a:	dc33      	bgt.n	801a784 <_printf_float+0x384>
 801a71c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a720:	429a      	cmp	r2, r3
 801a722:	db3b      	blt.n	801a79c <_printf_float+0x39c>
 801a724:	6823      	ldr	r3, [r4, #0]
 801a726:	07da      	lsls	r2, r3, #31
 801a728:	d438      	bmi.n	801a79c <_printf_float+0x39c>
 801a72a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a72c:	9b05      	ldr	r3, [sp, #20]
 801a72e:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a730:	1ad3      	subs	r3, r2, r3
 801a732:	eba2 0901 	sub.w	r9, r2, r1
 801a736:	4599      	cmp	r9, r3
 801a738:	bfa8      	it	ge
 801a73a:	4699      	movge	r9, r3
 801a73c:	f1b9 0f00 	cmp.w	r9, #0
 801a740:	dc35      	bgt.n	801a7ae <_printf_float+0x3ae>
 801a742:	f04f 0800 	mov.w	r8, #0
 801a746:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a74a:	f104 0a1a 	add.w	sl, r4, #26
 801a74e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a752:	1a9b      	subs	r3, r3, r2
 801a754:	eba3 0309 	sub.w	r3, r3, r9
 801a758:	4543      	cmp	r3, r8
 801a75a:	f77f af79 	ble.w	801a650 <_printf_float+0x250>
 801a75e:	2301      	movs	r3, #1
 801a760:	4652      	mov	r2, sl
 801a762:	4631      	mov	r1, r6
 801a764:	4628      	mov	r0, r5
 801a766:	47b8      	blx	r7
 801a768:	3001      	adds	r0, #1
 801a76a:	f43f aeaa 	beq.w	801a4c2 <_printf_float+0xc2>
 801a76e:	f108 0801 	add.w	r8, r8, #1
 801a772:	e7ec      	b.n	801a74e <_printf_float+0x34e>
 801a774:	4613      	mov	r3, r2
 801a776:	4631      	mov	r1, r6
 801a778:	4642      	mov	r2, r8
 801a77a:	4628      	mov	r0, r5
 801a77c:	47b8      	blx	r7
 801a77e:	3001      	adds	r0, #1
 801a780:	d1c0      	bne.n	801a704 <_printf_float+0x304>
 801a782:	e69e      	b.n	801a4c2 <_printf_float+0xc2>
 801a784:	2301      	movs	r3, #1
 801a786:	4631      	mov	r1, r6
 801a788:	4628      	mov	r0, r5
 801a78a:	9205      	str	r2, [sp, #20]
 801a78c:	47b8      	blx	r7
 801a78e:	3001      	adds	r0, #1
 801a790:	f43f ae97 	beq.w	801a4c2 <_printf_float+0xc2>
 801a794:	9a05      	ldr	r2, [sp, #20]
 801a796:	f10b 0b01 	add.w	fp, fp, #1
 801a79a:	e7b9      	b.n	801a710 <_printf_float+0x310>
 801a79c:	ee18 3a10 	vmov	r3, s16
 801a7a0:	4652      	mov	r2, sl
 801a7a2:	4631      	mov	r1, r6
 801a7a4:	4628      	mov	r0, r5
 801a7a6:	47b8      	blx	r7
 801a7a8:	3001      	adds	r0, #1
 801a7aa:	d1be      	bne.n	801a72a <_printf_float+0x32a>
 801a7ac:	e689      	b.n	801a4c2 <_printf_float+0xc2>
 801a7ae:	9a05      	ldr	r2, [sp, #20]
 801a7b0:	464b      	mov	r3, r9
 801a7b2:	4442      	add	r2, r8
 801a7b4:	4631      	mov	r1, r6
 801a7b6:	4628      	mov	r0, r5
 801a7b8:	47b8      	blx	r7
 801a7ba:	3001      	adds	r0, #1
 801a7bc:	d1c1      	bne.n	801a742 <_printf_float+0x342>
 801a7be:	e680      	b.n	801a4c2 <_printf_float+0xc2>
 801a7c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a7c2:	2a01      	cmp	r2, #1
 801a7c4:	dc01      	bgt.n	801a7ca <_printf_float+0x3ca>
 801a7c6:	07db      	lsls	r3, r3, #31
 801a7c8:	d538      	bpl.n	801a83c <_printf_float+0x43c>
 801a7ca:	2301      	movs	r3, #1
 801a7cc:	4642      	mov	r2, r8
 801a7ce:	4631      	mov	r1, r6
 801a7d0:	4628      	mov	r0, r5
 801a7d2:	47b8      	blx	r7
 801a7d4:	3001      	adds	r0, #1
 801a7d6:	f43f ae74 	beq.w	801a4c2 <_printf_float+0xc2>
 801a7da:	ee18 3a10 	vmov	r3, s16
 801a7de:	4652      	mov	r2, sl
 801a7e0:	4631      	mov	r1, r6
 801a7e2:	4628      	mov	r0, r5
 801a7e4:	47b8      	blx	r7
 801a7e6:	3001      	adds	r0, #1
 801a7e8:	f43f ae6b 	beq.w	801a4c2 <_printf_float+0xc2>
 801a7ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a7f0:	2200      	movs	r2, #0
 801a7f2:	2300      	movs	r3, #0
 801a7f4:	f7e6 f968 	bl	8000ac8 <__aeabi_dcmpeq>
 801a7f8:	b9d8      	cbnz	r0, 801a832 <_printf_float+0x432>
 801a7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a7fc:	f108 0201 	add.w	r2, r8, #1
 801a800:	3b01      	subs	r3, #1
 801a802:	4631      	mov	r1, r6
 801a804:	4628      	mov	r0, r5
 801a806:	47b8      	blx	r7
 801a808:	3001      	adds	r0, #1
 801a80a:	d10e      	bne.n	801a82a <_printf_float+0x42a>
 801a80c:	e659      	b.n	801a4c2 <_printf_float+0xc2>
 801a80e:	2301      	movs	r3, #1
 801a810:	4652      	mov	r2, sl
 801a812:	4631      	mov	r1, r6
 801a814:	4628      	mov	r0, r5
 801a816:	47b8      	blx	r7
 801a818:	3001      	adds	r0, #1
 801a81a:	f43f ae52 	beq.w	801a4c2 <_printf_float+0xc2>
 801a81e:	f108 0801 	add.w	r8, r8, #1
 801a822:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a824:	3b01      	subs	r3, #1
 801a826:	4543      	cmp	r3, r8
 801a828:	dcf1      	bgt.n	801a80e <_printf_float+0x40e>
 801a82a:	464b      	mov	r3, r9
 801a82c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a830:	e6dc      	b.n	801a5ec <_printf_float+0x1ec>
 801a832:	f04f 0800 	mov.w	r8, #0
 801a836:	f104 0a1a 	add.w	sl, r4, #26
 801a83a:	e7f2      	b.n	801a822 <_printf_float+0x422>
 801a83c:	2301      	movs	r3, #1
 801a83e:	4642      	mov	r2, r8
 801a840:	e7df      	b.n	801a802 <_printf_float+0x402>
 801a842:	2301      	movs	r3, #1
 801a844:	464a      	mov	r2, r9
 801a846:	4631      	mov	r1, r6
 801a848:	4628      	mov	r0, r5
 801a84a:	47b8      	blx	r7
 801a84c:	3001      	adds	r0, #1
 801a84e:	f43f ae38 	beq.w	801a4c2 <_printf_float+0xc2>
 801a852:	f108 0801 	add.w	r8, r8, #1
 801a856:	68e3      	ldr	r3, [r4, #12]
 801a858:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a85a:	1a5b      	subs	r3, r3, r1
 801a85c:	4543      	cmp	r3, r8
 801a85e:	dcf0      	bgt.n	801a842 <_printf_float+0x442>
 801a860:	e6fa      	b.n	801a658 <_printf_float+0x258>
 801a862:	f04f 0800 	mov.w	r8, #0
 801a866:	f104 0919 	add.w	r9, r4, #25
 801a86a:	e7f4      	b.n	801a856 <_printf_float+0x456>

0801a86c <_printf_common>:
 801a86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a870:	4616      	mov	r6, r2
 801a872:	4699      	mov	r9, r3
 801a874:	688a      	ldr	r2, [r1, #8]
 801a876:	690b      	ldr	r3, [r1, #16]
 801a878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a87c:	4293      	cmp	r3, r2
 801a87e:	bfb8      	it	lt
 801a880:	4613      	movlt	r3, r2
 801a882:	6033      	str	r3, [r6, #0]
 801a884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a888:	4607      	mov	r7, r0
 801a88a:	460c      	mov	r4, r1
 801a88c:	b10a      	cbz	r2, 801a892 <_printf_common+0x26>
 801a88e:	3301      	adds	r3, #1
 801a890:	6033      	str	r3, [r6, #0]
 801a892:	6823      	ldr	r3, [r4, #0]
 801a894:	0699      	lsls	r1, r3, #26
 801a896:	bf42      	ittt	mi
 801a898:	6833      	ldrmi	r3, [r6, #0]
 801a89a:	3302      	addmi	r3, #2
 801a89c:	6033      	strmi	r3, [r6, #0]
 801a89e:	6825      	ldr	r5, [r4, #0]
 801a8a0:	f015 0506 	ands.w	r5, r5, #6
 801a8a4:	d106      	bne.n	801a8b4 <_printf_common+0x48>
 801a8a6:	f104 0a19 	add.w	sl, r4, #25
 801a8aa:	68e3      	ldr	r3, [r4, #12]
 801a8ac:	6832      	ldr	r2, [r6, #0]
 801a8ae:	1a9b      	subs	r3, r3, r2
 801a8b0:	42ab      	cmp	r3, r5
 801a8b2:	dc26      	bgt.n	801a902 <_printf_common+0x96>
 801a8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a8b8:	1e13      	subs	r3, r2, #0
 801a8ba:	6822      	ldr	r2, [r4, #0]
 801a8bc:	bf18      	it	ne
 801a8be:	2301      	movne	r3, #1
 801a8c0:	0692      	lsls	r2, r2, #26
 801a8c2:	d42b      	bmi.n	801a91c <_printf_common+0xb0>
 801a8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a8c8:	4649      	mov	r1, r9
 801a8ca:	4638      	mov	r0, r7
 801a8cc:	47c0      	blx	r8
 801a8ce:	3001      	adds	r0, #1
 801a8d0:	d01e      	beq.n	801a910 <_printf_common+0xa4>
 801a8d2:	6823      	ldr	r3, [r4, #0]
 801a8d4:	68e5      	ldr	r5, [r4, #12]
 801a8d6:	6832      	ldr	r2, [r6, #0]
 801a8d8:	f003 0306 	and.w	r3, r3, #6
 801a8dc:	2b04      	cmp	r3, #4
 801a8de:	bf08      	it	eq
 801a8e0:	1aad      	subeq	r5, r5, r2
 801a8e2:	68a3      	ldr	r3, [r4, #8]
 801a8e4:	6922      	ldr	r2, [r4, #16]
 801a8e6:	bf0c      	ite	eq
 801a8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a8ec:	2500      	movne	r5, #0
 801a8ee:	4293      	cmp	r3, r2
 801a8f0:	bfc4      	itt	gt
 801a8f2:	1a9b      	subgt	r3, r3, r2
 801a8f4:	18ed      	addgt	r5, r5, r3
 801a8f6:	2600      	movs	r6, #0
 801a8f8:	341a      	adds	r4, #26
 801a8fa:	42b5      	cmp	r5, r6
 801a8fc:	d11a      	bne.n	801a934 <_printf_common+0xc8>
 801a8fe:	2000      	movs	r0, #0
 801a900:	e008      	b.n	801a914 <_printf_common+0xa8>
 801a902:	2301      	movs	r3, #1
 801a904:	4652      	mov	r2, sl
 801a906:	4649      	mov	r1, r9
 801a908:	4638      	mov	r0, r7
 801a90a:	47c0      	blx	r8
 801a90c:	3001      	adds	r0, #1
 801a90e:	d103      	bne.n	801a918 <_printf_common+0xac>
 801a910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a918:	3501      	adds	r5, #1
 801a91a:	e7c6      	b.n	801a8aa <_printf_common+0x3e>
 801a91c:	18e1      	adds	r1, r4, r3
 801a91e:	1c5a      	adds	r2, r3, #1
 801a920:	2030      	movs	r0, #48	; 0x30
 801a922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a926:	4422      	add	r2, r4
 801a928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a930:	3302      	adds	r3, #2
 801a932:	e7c7      	b.n	801a8c4 <_printf_common+0x58>
 801a934:	2301      	movs	r3, #1
 801a936:	4622      	mov	r2, r4
 801a938:	4649      	mov	r1, r9
 801a93a:	4638      	mov	r0, r7
 801a93c:	47c0      	blx	r8
 801a93e:	3001      	adds	r0, #1
 801a940:	d0e6      	beq.n	801a910 <_printf_common+0xa4>
 801a942:	3601      	adds	r6, #1
 801a944:	e7d9      	b.n	801a8fa <_printf_common+0x8e>
	...

0801a948 <_printf_i>:
 801a948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a94c:	460c      	mov	r4, r1
 801a94e:	4691      	mov	r9, r2
 801a950:	7e27      	ldrb	r7, [r4, #24]
 801a952:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a954:	2f78      	cmp	r7, #120	; 0x78
 801a956:	4680      	mov	r8, r0
 801a958:	469a      	mov	sl, r3
 801a95a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a95e:	d807      	bhi.n	801a970 <_printf_i+0x28>
 801a960:	2f62      	cmp	r7, #98	; 0x62
 801a962:	d80a      	bhi.n	801a97a <_printf_i+0x32>
 801a964:	2f00      	cmp	r7, #0
 801a966:	f000 80d8 	beq.w	801ab1a <_printf_i+0x1d2>
 801a96a:	2f58      	cmp	r7, #88	; 0x58
 801a96c:	f000 80a3 	beq.w	801aab6 <_printf_i+0x16e>
 801a970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a978:	e03a      	b.n	801a9f0 <_printf_i+0xa8>
 801a97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a97e:	2b15      	cmp	r3, #21
 801a980:	d8f6      	bhi.n	801a970 <_printf_i+0x28>
 801a982:	a001      	add	r0, pc, #4	; (adr r0, 801a988 <_printf_i+0x40>)
 801a984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a988:	0801a9e1 	.word	0x0801a9e1
 801a98c:	0801a9f5 	.word	0x0801a9f5
 801a990:	0801a971 	.word	0x0801a971
 801a994:	0801a971 	.word	0x0801a971
 801a998:	0801a971 	.word	0x0801a971
 801a99c:	0801a971 	.word	0x0801a971
 801a9a0:	0801a9f5 	.word	0x0801a9f5
 801a9a4:	0801a971 	.word	0x0801a971
 801a9a8:	0801a971 	.word	0x0801a971
 801a9ac:	0801a971 	.word	0x0801a971
 801a9b0:	0801a971 	.word	0x0801a971
 801a9b4:	0801ab01 	.word	0x0801ab01
 801a9b8:	0801aa25 	.word	0x0801aa25
 801a9bc:	0801aae3 	.word	0x0801aae3
 801a9c0:	0801a971 	.word	0x0801a971
 801a9c4:	0801a971 	.word	0x0801a971
 801a9c8:	0801ab23 	.word	0x0801ab23
 801a9cc:	0801a971 	.word	0x0801a971
 801a9d0:	0801aa25 	.word	0x0801aa25
 801a9d4:	0801a971 	.word	0x0801a971
 801a9d8:	0801a971 	.word	0x0801a971
 801a9dc:	0801aaeb 	.word	0x0801aaeb
 801a9e0:	680b      	ldr	r3, [r1, #0]
 801a9e2:	1d1a      	adds	r2, r3, #4
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	600a      	str	r2, [r1, #0]
 801a9e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a9f0:	2301      	movs	r3, #1
 801a9f2:	e0a3      	b.n	801ab3c <_printf_i+0x1f4>
 801a9f4:	6825      	ldr	r5, [r4, #0]
 801a9f6:	6808      	ldr	r0, [r1, #0]
 801a9f8:	062e      	lsls	r6, r5, #24
 801a9fa:	f100 0304 	add.w	r3, r0, #4
 801a9fe:	d50a      	bpl.n	801aa16 <_printf_i+0xce>
 801aa00:	6805      	ldr	r5, [r0, #0]
 801aa02:	600b      	str	r3, [r1, #0]
 801aa04:	2d00      	cmp	r5, #0
 801aa06:	da03      	bge.n	801aa10 <_printf_i+0xc8>
 801aa08:	232d      	movs	r3, #45	; 0x2d
 801aa0a:	426d      	negs	r5, r5
 801aa0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa10:	485e      	ldr	r0, [pc, #376]	; (801ab8c <_printf_i+0x244>)
 801aa12:	230a      	movs	r3, #10
 801aa14:	e019      	b.n	801aa4a <_printf_i+0x102>
 801aa16:	f015 0f40 	tst.w	r5, #64	; 0x40
 801aa1a:	6805      	ldr	r5, [r0, #0]
 801aa1c:	600b      	str	r3, [r1, #0]
 801aa1e:	bf18      	it	ne
 801aa20:	b22d      	sxthne	r5, r5
 801aa22:	e7ef      	b.n	801aa04 <_printf_i+0xbc>
 801aa24:	680b      	ldr	r3, [r1, #0]
 801aa26:	6825      	ldr	r5, [r4, #0]
 801aa28:	1d18      	adds	r0, r3, #4
 801aa2a:	6008      	str	r0, [r1, #0]
 801aa2c:	0628      	lsls	r0, r5, #24
 801aa2e:	d501      	bpl.n	801aa34 <_printf_i+0xec>
 801aa30:	681d      	ldr	r5, [r3, #0]
 801aa32:	e002      	b.n	801aa3a <_printf_i+0xf2>
 801aa34:	0669      	lsls	r1, r5, #25
 801aa36:	d5fb      	bpl.n	801aa30 <_printf_i+0xe8>
 801aa38:	881d      	ldrh	r5, [r3, #0]
 801aa3a:	4854      	ldr	r0, [pc, #336]	; (801ab8c <_printf_i+0x244>)
 801aa3c:	2f6f      	cmp	r7, #111	; 0x6f
 801aa3e:	bf0c      	ite	eq
 801aa40:	2308      	moveq	r3, #8
 801aa42:	230a      	movne	r3, #10
 801aa44:	2100      	movs	r1, #0
 801aa46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aa4a:	6866      	ldr	r6, [r4, #4]
 801aa4c:	60a6      	str	r6, [r4, #8]
 801aa4e:	2e00      	cmp	r6, #0
 801aa50:	bfa2      	ittt	ge
 801aa52:	6821      	ldrge	r1, [r4, #0]
 801aa54:	f021 0104 	bicge.w	r1, r1, #4
 801aa58:	6021      	strge	r1, [r4, #0]
 801aa5a:	b90d      	cbnz	r5, 801aa60 <_printf_i+0x118>
 801aa5c:	2e00      	cmp	r6, #0
 801aa5e:	d04d      	beq.n	801aafc <_printf_i+0x1b4>
 801aa60:	4616      	mov	r6, r2
 801aa62:	fbb5 f1f3 	udiv	r1, r5, r3
 801aa66:	fb03 5711 	mls	r7, r3, r1, r5
 801aa6a:	5dc7      	ldrb	r7, [r0, r7]
 801aa6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801aa70:	462f      	mov	r7, r5
 801aa72:	42bb      	cmp	r3, r7
 801aa74:	460d      	mov	r5, r1
 801aa76:	d9f4      	bls.n	801aa62 <_printf_i+0x11a>
 801aa78:	2b08      	cmp	r3, #8
 801aa7a:	d10b      	bne.n	801aa94 <_printf_i+0x14c>
 801aa7c:	6823      	ldr	r3, [r4, #0]
 801aa7e:	07df      	lsls	r7, r3, #31
 801aa80:	d508      	bpl.n	801aa94 <_printf_i+0x14c>
 801aa82:	6923      	ldr	r3, [r4, #16]
 801aa84:	6861      	ldr	r1, [r4, #4]
 801aa86:	4299      	cmp	r1, r3
 801aa88:	bfde      	ittt	le
 801aa8a:	2330      	movle	r3, #48	; 0x30
 801aa8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aa90:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 801aa94:	1b92      	subs	r2, r2, r6
 801aa96:	6122      	str	r2, [r4, #16]
 801aa98:	f8cd a000 	str.w	sl, [sp]
 801aa9c:	464b      	mov	r3, r9
 801aa9e:	aa03      	add	r2, sp, #12
 801aaa0:	4621      	mov	r1, r4
 801aaa2:	4640      	mov	r0, r8
 801aaa4:	f7ff fee2 	bl	801a86c <_printf_common>
 801aaa8:	3001      	adds	r0, #1
 801aaaa:	d14c      	bne.n	801ab46 <_printf_i+0x1fe>
 801aaac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801aab0:	b004      	add	sp, #16
 801aab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aab6:	4835      	ldr	r0, [pc, #212]	; (801ab8c <_printf_i+0x244>)
 801aab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801aabc:	6823      	ldr	r3, [r4, #0]
 801aabe:	680e      	ldr	r6, [r1, #0]
 801aac0:	061f      	lsls	r7, r3, #24
 801aac2:	f856 5b04 	ldr.w	r5, [r6], #4
 801aac6:	600e      	str	r6, [r1, #0]
 801aac8:	d514      	bpl.n	801aaf4 <_printf_i+0x1ac>
 801aaca:	07d9      	lsls	r1, r3, #31
 801aacc:	bf44      	itt	mi
 801aace:	f043 0320 	orrmi.w	r3, r3, #32
 801aad2:	6023      	strmi	r3, [r4, #0]
 801aad4:	b91d      	cbnz	r5, 801aade <_printf_i+0x196>
 801aad6:	6823      	ldr	r3, [r4, #0]
 801aad8:	f023 0320 	bic.w	r3, r3, #32
 801aadc:	6023      	str	r3, [r4, #0]
 801aade:	2310      	movs	r3, #16
 801aae0:	e7b0      	b.n	801aa44 <_printf_i+0xfc>
 801aae2:	6823      	ldr	r3, [r4, #0]
 801aae4:	f043 0320 	orr.w	r3, r3, #32
 801aae8:	6023      	str	r3, [r4, #0]
 801aaea:	2378      	movs	r3, #120	; 0x78
 801aaec:	4828      	ldr	r0, [pc, #160]	; (801ab90 <_printf_i+0x248>)
 801aaee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801aaf2:	e7e3      	b.n	801aabc <_printf_i+0x174>
 801aaf4:	065e      	lsls	r6, r3, #25
 801aaf6:	bf48      	it	mi
 801aaf8:	b2ad      	uxthmi	r5, r5
 801aafa:	e7e6      	b.n	801aaca <_printf_i+0x182>
 801aafc:	4616      	mov	r6, r2
 801aafe:	e7bb      	b.n	801aa78 <_printf_i+0x130>
 801ab00:	680b      	ldr	r3, [r1, #0]
 801ab02:	6826      	ldr	r6, [r4, #0]
 801ab04:	6960      	ldr	r0, [r4, #20]
 801ab06:	1d1d      	adds	r5, r3, #4
 801ab08:	600d      	str	r5, [r1, #0]
 801ab0a:	0635      	lsls	r5, r6, #24
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	d501      	bpl.n	801ab14 <_printf_i+0x1cc>
 801ab10:	6018      	str	r0, [r3, #0]
 801ab12:	e002      	b.n	801ab1a <_printf_i+0x1d2>
 801ab14:	0671      	lsls	r1, r6, #25
 801ab16:	d5fb      	bpl.n	801ab10 <_printf_i+0x1c8>
 801ab18:	8018      	strh	r0, [r3, #0]
 801ab1a:	2300      	movs	r3, #0
 801ab1c:	6123      	str	r3, [r4, #16]
 801ab1e:	4616      	mov	r6, r2
 801ab20:	e7ba      	b.n	801aa98 <_printf_i+0x150>
 801ab22:	680b      	ldr	r3, [r1, #0]
 801ab24:	1d1a      	adds	r2, r3, #4
 801ab26:	600a      	str	r2, [r1, #0]
 801ab28:	681e      	ldr	r6, [r3, #0]
 801ab2a:	6862      	ldr	r2, [r4, #4]
 801ab2c:	2100      	movs	r1, #0
 801ab2e:	4630      	mov	r0, r6
 801ab30:	f7e5 fb56 	bl	80001e0 <memchr>
 801ab34:	b108      	cbz	r0, 801ab3a <_printf_i+0x1f2>
 801ab36:	1b80      	subs	r0, r0, r6
 801ab38:	6060      	str	r0, [r4, #4]
 801ab3a:	6863      	ldr	r3, [r4, #4]
 801ab3c:	6123      	str	r3, [r4, #16]
 801ab3e:	2300      	movs	r3, #0
 801ab40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab44:	e7a8      	b.n	801aa98 <_printf_i+0x150>
 801ab46:	6923      	ldr	r3, [r4, #16]
 801ab48:	4632      	mov	r2, r6
 801ab4a:	4649      	mov	r1, r9
 801ab4c:	4640      	mov	r0, r8
 801ab4e:	47d0      	blx	sl
 801ab50:	3001      	adds	r0, #1
 801ab52:	d0ab      	beq.n	801aaac <_printf_i+0x164>
 801ab54:	6823      	ldr	r3, [r4, #0]
 801ab56:	079b      	lsls	r3, r3, #30
 801ab58:	d413      	bmi.n	801ab82 <_printf_i+0x23a>
 801ab5a:	68e0      	ldr	r0, [r4, #12]
 801ab5c:	9b03      	ldr	r3, [sp, #12]
 801ab5e:	4298      	cmp	r0, r3
 801ab60:	bfb8      	it	lt
 801ab62:	4618      	movlt	r0, r3
 801ab64:	e7a4      	b.n	801aab0 <_printf_i+0x168>
 801ab66:	2301      	movs	r3, #1
 801ab68:	4632      	mov	r2, r6
 801ab6a:	4649      	mov	r1, r9
 801ab6c:	4640      	mov	r0, r8
 801ab6e:	47d0      	blx	sl
 801ab70:	3001      	adds	r0, #1
 801ab72:	d09b      	beq.n	801aaac <_printf_i+0x164>
 801ab74:	3501      	adds	r5, #1
 801ab76:	68e3      	ldr	r3, [r4, #12]
 801ab78:	9903      	ldr	r1, [sp, #12]
 801ab7a:	1a5b      	subs	r3, r3, r1
 801ab7c:	42ab      	cmp	r3, r5
 801ab7e:	dcf2      	bgt.n	801ab66 <_printf_i+0x21e>
 801ab80:	e7eb      	b.n	801ab5a <_printf_i+0x212>
 801ab82:	2500      	movs	r5, #0
 801ab84:	f104 0619 	add.w	r6, r4, #25
 801ab88:	e7f5      	b.n	801ab76 <_printf_i+0x22e>
 801ab8a:	bf00      	nop
 801ab8c:	0802214e 	.word	0x0802214e
 801ab90:	0802215f 	.word	0x0802215f

0801ab94 <cleanup_glue>:
 801ab94:	b538      	push	{r3, r4, r5, lr}
 801ab96:	460c      	mov	r4, r1
 801ab98:	6809      	ldr	r1, [r1, #0]
 801ab9a:	4605      	mov	r5, r0
 801ab9c:	b109      	cbz	r1, 801aba2 <cleanup_glue+0xe>
 801ab9e:	f7ff fff9 	bl	801ab94 <cleanup_glue>
 801aba2:	4621      	mov	r1, r4
 801aba4:	4628      	mov	r0, r5
 801aba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801abaa:	f7ff badf 	b.w	801a16c <_free_r>
	...

0801abb0 <_reclaim_reent>:
 801abb0:	4b2c      	ldr	r3, [pc, #176]	; (801ac64 <_reclaim_reent+0xb4>)
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	4283      	cmp	r3, r0
 801abb6:	b570      	push	{r4, r5, r6, lr}
 801abb8:	4604      	mov	r4, r0
 801abba:	d051      	beq.n	801ac60 <_reclaim_reent+0xb0>
 801abbc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801abbe:	b143      	cbz	r3, 801abd2 <_reclaim_reent+0x22>
 801abc0:	68db      	ldr	r3, [r3, #12]
 801abc2:	2b00      	cmp	r3, #0
 801abc4:	d14a      	bne.n	801ac5c <_reclaim_reent+0xac>
 801abc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801abc8:	6819      	ldr	r1, [r3, #0]
 801abca:	b111      	cbz	r1, 801abd2 <_reclaim_reent+0x22>
 801abcc:	4620      	mov	r0, r4
 801abce:	f7ff facd 	bl	801a16c <_free_r>
 801abd2:	6961      	ldr	r1, [r4, #20]
 801abd4:	b111      	cbz	r1, 801abdc <_reclaim_reent+0x2c>
 801abd6:	4620      	mov	r0, r4
 801abd8:	f7ff fac8 	bl	801a16c <_free_r>
 801abdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801abde:	b111      	cbz	r1, 801abe6 <_reclaim_reent+0x36>
 801abe0:	4620      	mov	r0, r4
 801abe2:	f7ff fac3 	bl	801a16c <_free_r>
 801abe6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801abe8:	b111      	cbz	r1, 801abf0 <_reclaim_reent+0x40>
 801abea:	4620      	mov	r0, r4
 801abec:	f7ff fabe 	bl	801a16c <_free_r>
 801abf0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801abf2:	b111      	cbz	r1, 801abfa <_reclaim_reent+0x4a>
 801abf4:	4620      	mov	r0, r4
 801abf6:	f7ff fab9 	bl	801a16c <_free_r>
 801abfa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801abfc:	b111      	cbz	r1, 801ac04 <_reclaim_reent+0x54>
 801abfe:	4620      	mov	r0, r4
 801ac00:	f7ff fab4 	bl	801a16c <_free_r>
 801ac04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ac06:	b111      	cbz	r1, 801ac0e <_reclaim_reent+0x5e>
 801ac08:	4620      	mov	r0, r4
 801ac0a:	f7ff faaf 	bl	801a16c <_free_r>
 801ac0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801ac10:	b111      	cbz	r1, 801ac18 <_reclaim_reent+0x68>
 801ac12:	4620      	mov	r0, r4
 801ac14:	f7ff faaa 	bl	801a16c <_free_r>
 801ac18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ac1a:	b111      	cbz	r1, 801ac22 <_reclaim_reent+0x72>
 801ac1c:	4620      	mov	r0, r4
 801ac1e:	f7ff faa5 	bl	801a16c <_free_r>
 801ac22:	69a3      	ldr	r3, [r4, #24]
 801ac24:	b1e3      	cbz	r3, 801ac60 <_reclaim_reent+0xb0>
 801ac26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ac28:	4620      	mov	r0, r4
 801ac2a:	4798      	blx	r3
 801ac2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801ac2e:	b1b9      	cbz	r1, 801ac60 <_reclaim_reent+0xb0>
 801ac30:	4620      	mov	r0, r4
 801ac32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac36:	f7ff bfad 	b.w	801ab94 <cleanup_glue>
 801ac3a:	5949      	ldr	r1, [r1, r5]
 801ac3c:	b941      	cbnz	r1, 801ac50 <_reclaim_reent+0xa0>
 801ac3e:	3504      	adds	r5, #4
 801ac40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ac42:	2d80      	cmp	r5, #128	; 0x80
 801ac44:	68d9      	ldr	r1, [r3, #12]
 801ac46:	d1f8      	bne.n	801ac3a <_reclaim_reent+0x8a>
 801ac48:	4620      	mov	r0, r4
 801ac4a:	f7ff fa8f 	bl	801a16c <_free_r>
 801ac4e:	e7ba      	b.n	801abc6 <_reclaim_reent+0x16>
 801ac50:	680e      	ldr	r6, [r1, #0]
 801ac52:	4620      	mov	r0, r4
 801ac54:	f7ff fa8a 	bl	801a16c <_free_r>
 801ac58:	4631      	mov	r1, r6
 801ac5a:	e7ef      	b.n	801ac3c <_reclaim_reent+0x8c>
 801ac5c:	2500      	movs	r5, #0
 801ac5e:	e7ef      	b.n	801ac40 <_reclaim_reent+0x90>
 801ac60:	bd70      	pop	{r4, r5, r6, pc}
 801ac62:	bf00      	nop
 801ac64:	20000260 	.word	0x20000260

0801ac68 <_sbrk_r>:
 801ac68:	b538      	push	{r3, r4, r5, lr}
 801ac6a:	4d06      	ldr	r5, [pc, #24]	; (801ac84 <_sbrk_r+0x1c>)
 801ac6c:	2300      	movs	r3, #0
 801ac6e:	4604      	mov	r4, r0
 801ac70:	4608      	mov	r0, r1
 801ac72:	602b      	str	r3, [r5, #0]
 801ac74:	f7ea ff1e 	bl	8005ab4 <_sbrk>
 801ac78:	1c43      	adds	r3, r0, #1
 801ac7a:	d102      	bne.n	801ac82 <_sbrk_r+0x1a>
 801ac7c:	682b      	ldr	r3, [r5, #0]
 801ac7e:	b103      	cbz	r3, 801ac82 <_sbrk_r+0x1a>
 801ac80:	6023      	str	r3, [r4, #0]
 801ac82:	bd38      	pop	{r3, r4, r5, pc}
 801ac84:	20016a54 	.word	0x20016a54

0801ac88 <siprintf>:
 801ac88:	b40e      	push	{r1, r2, r3}
 801ac8a:	b500      	push	{lr}
 801ac8c:	b09c      	sub	sp, #112	; 0x70
 801ac8e:	ab1d      	add	r3, sp, #116	; 0x74
 801ac90:	9002      	str	r0, [sp, #8]
 801ac92:	9006      	str	r0, [sp, #24]
 801ac94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ac98:	4809      	ldr	r0, [pc, #36]	; (801acc0 <siprintf+0x38>)
 801ac9a:	9107      	str	r1, [sp, #28]
 801ac9c:	9104      	str	r1, [sp, #16]
 801ac9e:	4909      	ldr	r1, [pc, #36]	; (801acc4 <siprintf+0x3c>)
 801aca0:	f853 2b04 	ldr.w	r2, [r3], #4
 801aca4:	9105      	str	r1, [sp, #20]
 801aca6:	6800      	ldr	r0, [r0, #0]
 801aca8:	9301      	str	r3, [sp, #4]
 801acaa:	a902      	add	r1, sp, #8
 801acac:	f001 fc10 	bl	801c4d0 <_svfiprintf_r>
 801acb0:	9b02      	ldr	r3, [sp, #8]
 801acb2:	2200      	movs	r2, #0
 801acb4:	701a      	strb	r2, [r3, #0]
 801acb6:	b01c      	add	sp, #112	; 0x70
 801acb8:	f85d eb04 	ldr.w	lr, [sp], #4
 801acbc:	b003      	add	sp, #12
 801acbe:	4770      	bx	lr
 801acc0:	20000260 	.word	0x20000260
 801acc4:	ffff0208 	.word	0xffff0208

0801acc8 <__sread>:
 801acc8:	b510      	push	{r4, lr}
 801acca:	460c      	mov	r4, r1
 801accc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801acd0:	f001 fcfe 	bl	801c6d0 <_read_r>
 801acd4:	2800      	cmp	r0, #0
 801acd6:	bfab      	itete	ge
 801acd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801acda:	89a3      	ldrhlt	r3, [r4, #12]
 801acdc:	181b      	addge	r3, r3, r0
 801acde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ace2:	bfac      	ite	ge
 801ace4:	6563      	strge	r3, [r4, #84]	; 0x54
 801ace6:	81a3      	strhlt	r3, [r4, #12]
 801ace8:	bd10      	pop	{r4, pc}

0801acea <__swrite>:
 801acea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801acee:	461f      	mov	r7, r3
 801acf0:	898b      	ldrh	r3, [r1, #12]
 801acf2:	05db      	lsls	r3, r3, #23
 801acf4:	4605      	mov	r5, r0
 801acf6:	460c      	mov	r4, r1
 801acf8:	4616      	mov	r6, r2
 801acfa:	d505      	bpl.n	801ad08 <__swrite+0x1e>
 801acfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad00:	2302      	movs	r3, #2
 801ad02:	2200      	movs	r2, #0
 801ad04:	f000 ffde 	bl	801bcc4 <_lseek_r>
 801ad08:	89a3      	ldrh	r3, [r4, #12]
 801ad0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ad0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ad12:	81a3      	strh	r3, [r4, #12]
 801ad14:	4632      	mov	r2, r6
 801ad16:	463b      	mov	r3, r7
 801ad18:	4628      	mov	r0, r5
 801ad1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad1e:	f000 b86f 	b.w	801ae00 <_write_r>

0801ad22 <__sseek>:
 801ad22:	b510      	push	{r4, lr}
 801ad24:	460c      	mov	r4, r1
 801ad26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad2a:	f000 ffcb 	bl	801bcc4 <_lseek_r>
 801ad2e:	1c43      	adds	r3, r0, #1
 801ad30:	89a3      	ldrh	r3, [r4, #12]
 801ad32:	bf15      	itete	ne
 801ad34:	6560      	strne	r0, [r4, #84]	; 0x54
 801ad36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ad3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ad3e:	81a3      	strheq	r3, [r4, #12]
 801ad40:	bf18      	it	ne
 801ad42:	81a3      	strhne	r3, [r4, #12]
 801ad44:	bd10      	pop	{r4, pc}

0801ad46 <__sclose>:
 801ad46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ad4a:	f000 b86b 	b.w	801ae24 <_close_r>

0801ad4e <strcat>:
 801ad4e:	b510      	push	{r4, lr}
 801ad50:	4602      	mov	r2, r0
 801ad52:	7814      	ldrb	r4, [r2, #0]
 801ad54:	4613      	mov	r3, r2
 801ad56:	3201      	adds	r2, #1
 801ad58:	2c00      	cmp	r4, #0
 801ad5a:	d1fa      	bne.n	801ad52 <strcat+0x4>
 801ad5c:	3b01      	subs	r3, #1
 801ad5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad62:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad66:	2a00      	cmp	r2, #0
 801ad68:	d1f9      	bne.n	801ad5e <strcat+0x10>
 801ad6a:	bd10      	pop	{r4, pc}

0801ad6c <strcpy>:
 801ad6c:	4603      	mov	r3, r0
 801ad6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad72:	f803 2b01 	strb.w	r2, [r3], #1
 801ad76:	2a00      	cmp	r2, #0
 801ad78:	d1f9      	bne.n	801ad6e <strcpy+0x2>
 801ad7a:	4770      	bx	lr

0801ad7c <__utoa>:
 801ad7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ad7e:	4c1f      	ldr	r4, [pc, #124]	; (801adfc <__utoa+0x80>)
 801ad80:	b08b      	sub	sp, #44	; 0x2c
 801ad82:	4605      	mov	r5, r0
 801ad84:	460b      	mov	r3, r1
 801ad86:	466e      	mov	r6, sp
 801ad88:	f104 0c20 	add.w	ip, r4, #32
 801ad8c:	6820      	ldr	r0, [r4, #0]
 801ad8e:	6861      	ldr	r1, [r4, #4]
 801ad90:	4637      	mov	r7, r6
 801ad92:	c703      	stmia	r7!, {r0, r1}
 801ad94:	3408      	adds	r4, #8
 801ad96:	4564      	cmp	r4, ip
 801ad98:	463e      	mov	r6, r7
 801ad9a:	d1f7      	bne.n	801ad8c <__utoa+0x10>
 801ad9c:	7921      	ldrb	r1, [r4, #4]
 801ad9e:	7139      	strb	r1, [r7, #4]
 801ada0:	1e91      	subs	r1, r2, #2
 801ada2:	6820      	ldr	r0, [r4, #0]
 801ada4:	6038      	str	r0, [r7, #0]
 801ada6:	2922      	cmp	r1, #34	; 0x22
 801ada8:	f04f 0100 	mov.w	r1, #0
 801adac:	d904      	bls.n	801adb8 <__utoa+0x3c>
 801adae:	7019      	strb	r1, [r3, #0]
 801adb0:	460b      	mov	r3, r1
 801adb2:	4618      	mov	r0, r3
 801adb4:	b00b      	add	sp, #44	; 0x2c
 801adb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801adb8:	1e58      	subs	r0, r3, #1
 801adba:	4684      	mov	ip, r0
 801adbc:	fbb5 f7f2 	udiv	r7, r5, r2
 801adc0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 801adc4:	fb02 5617 	mls	r6, r2, r7, r5
 801adc8:	4476      	add	r6, lr
 801adca:	460c      	mov	r4, r1
 801adcc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801add0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801add4:	462e      	mov	r6, r5
 801add6:	42b2      	cmp	r2, r6
 801add8:	f101 0101 	add.w	r1, r1, #1
 801addc:	463d      	mov	r5, r7
 801adde:	d9ed      	bls.n	801adbc <__utoa+0x40>
 801ade0:	2200      	movs	r2, #0
 801ade2:	545a      	strb	r2, [r3, r1]
 801ade4:	1919      	adds	r1, r3, r4
 801ade6:	1aa5      	subs	r5, r4, r2
 801ade8:	42aa      	cmp	r2, r5
 801adea:	dae2      	bge.n	801adb2 <__utoa+0x36>
 801adec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801adf0:	780e      	ldrb	r6, [r1, #0]
 801adf2:	7006      	strb	r6, [r0, #0]
 801adf4:	3201      	adds	r2, #1
 801adf6:	f801 5901 	strb.w	r5, [r1], #-1
 801adfa:	e7f4      	b.n	801ade6 <__utoa+0x6a>
 801adfc:	08022170 	.word	0x08022170

0801ae00 <_write_r>:
 801ae00:	b538      	push	{r3, r4, r5, lr}
 801ae02:	4d07      	ldr	r5, [pc, #28]	; (801ae20 <_write_r+0x20>)
 801ae04:	4604      	mov	r4, r0
 801ae06:	4608      	mov	r0, r1
 801ae08:	4611      	mov	r1, r2
 801ae0a:	2200      	movs	r2, #0
 801ae0c:	602a      	str	r2, [r5, #0]
 801ae0e:	461a      	mov	r2, r3
 801ae10:	f7ea fdff 	bl	8005a12 <_write>
 801ae14:	1c43      	adds	r3, r0, #1
 801ae16:	d102      	bne.n	801ae1e <_write_r+0x1e>
 801ae18:	682b      	ldr	r3, [r5, #0]
 801ae1a:	b103      	cbz	r3, 801ae1e <_write_r+0x1e>
 801ae1c:	6023      	str	r3, [r4, #0]
 801ae1e:	bd38      	pop	{r3, r4, r5, pc}
 801ae20:	20016a54 	.word	0x20016a54

0801ae24 <_close_r>:
 801ae24:	b538      	push	{r3, r4, r5, lr}
 801ae26:	4d06      	ldr	r5, [pc, #24]	; (801ae40 <_close_r+0x1c>)
 801ae28:	2300      	movs	r3, #0
 801ae2a:	4604      	mov	r4, r0
 801ae2c:	4608      	mov	r0, r1
 801ae2e:	602b      	str	r3, [r5, #0]
 801ae30:	f7ea fe0b 	bl	8005a4a <_close>
 801ae34:	1c43      	adds	r3, r0, #1
 801ae36:	d102      	bne.n	801ae3e <_close_r+0x1a>
 801ae38:	682b      	ldr	r3, [r5, #0]
 801ae3a:	b103      	cbz	r3, 801ae3e <_close_r+0x1a>
 801ae3c:	6023      	str	r3, [r4, #0]
 801ae3e:	bd38      	pop	{r3, r4, r5, pc}
 801ae40:	20016a54 	.word	0x20016a54

0801ae44 <quorem>:
 801ae44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae48:	6903      	ldr	r3, [r0, #16]
 801ae4a:	690c      	ldr	r4, [r1, #16]
 801ae4c:	42a3      	cmp	r3, r4
 801ae4e:	4607      	mov	r7, r0
 801ae50:	f2c0 8081 	blt.w	801af56 <quorem+0x112>
 801ae54:	3c01      	subs	r4, #1
 801ae56:	f101 0814 	add.w	r8, r1, #20
 801ae5a:	f100 0514 	add.w	r5, r0, #20
 801ae5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ae62:	9301      	str	r3, [sp, #4]
 801ae64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ae68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ae6c:	3301      	adds	r3, #1
 801ae6e:	429a      	cmp	r2, r3
 801ae70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ae74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ae78:	fbb2 f6f3 	udiv	r6, r2, r3
 801ae7c:	d331      	bcc.n	801aee2 <quorem+0x9e>
 801ae7e:	f04f 0e00 	mov.w	lr, #0
 801ae82:	4640      	mov	r0, r8
 801ae84:	46ac      	mov	ip, r5
 801ae86:	46f2      	mov	sl, lr
 801ae88:	f850 2b04 	ldr.w	r2, [r0], #4
 801ae8c:	b293      	uxth	r3, r2
 801ae8e:	fb06 e303 	mla	r3, r6, r3, lr
 801ae92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	ebaa 0303 	sub.w	r3, sl, r3
 801ae9c:	0c12      	lsrs	r2, r2, #16
 801ae9e:	f8dc a000 	ldr.w	sl, [ip]
 801aea2:	fb06 e202 	mla	r2, r6, r2, lr
 801aea6:	fa13 f38a 	uxtah	r3, r3, sl
 801aeaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aeae:	fa1f fa82 	uxth.w	sl, r2
 801aeb2:	f8dc 2000 	ldr.w	r2, [ip]
 801aeb6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801aeba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aebe:	b29b      	uxth	r3, r3
 801aec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aec4:	4581      	cmp	r9, r0
 801aec6:	f84c 3b04 	str.w	r3, [ip], #4
 801aeca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801aece:	d2db      	bcs.n	801ae88 <quorem+0x44>
 801aed0:	f855 300b 	ldr.w	r3, [r5, fp]
 801aed4:	b92b      	cbnz	r3, 801aee2 <quorem+0x9e>
 801aed6:	9b01      	ldr	r3, [sp, #4]
 801aed8:	3b04      	subs	r3, #4
 801aeda:	429d      	cmp	r5, r3
 801aedc:	461a      	mov	r2, r3
 801aede:	d32e      	bcc.n	801af3e <quorem+0xfa>
 801aee0:	613c      	str	r4, [r7, #16]
 801aee2:	4638      	mov	r0, r7
 801aee4:	f001 f98a 	bl	801c1fc <__mcmp>
 801aee8:	2800      	cmp	r0, #0
 801aeea:	db24      	blt.n	801af36 <quorem+0xf2>
 801aeec:	3601      	adds	r6, #1
 801aeee:	4628      	mov	r0, r5
 801aef0:	f04f 0c00 	mov.w	ip, #0
 801aef4:	f858 2b04 	ldr.w	r2, [r8], #4
 801aef8:	f8d0 e000 	ldr.w	lr, [r0]
 801aefc:	b293      	uxth	r3, r2
 801aefe:	ebac 0303 	sub.w	r3, ip, r3
 801af02:	0c12      	lsrs	r2, r2, #16
 801af04:	fa13 f38e 	uxtah	r3, r3, lr
 801af08:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801af0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801af10:	b29b      	uxth	r3, r3
 801af12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801af16:	45c1      	cmp	r9, r8
 801af18:	f840 3b04 	str.w	r3, [r0], #4
 801af1c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801af20:	d2e8      	bcs.n	801aef4 <quorem+0xb0>
 801af22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801af26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801af2a:	b922      	cbnz	r2, 801af36 <quorem+0xf2>
 801af2c:	3b04      	subs	r3, #4
 801af2e:	429d      	cmp	r5, r3
 801af30:	461a      	mov	r2, r3
 801af32:	d30a      	bcc.n	801af4a <quorem+0x106>
 801af34:	613c      	str	r4, [r7, #16]
 801af36:	4630      	mov	r0, r6
 801af38:	b003      	add	sp, #12
 801af3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af3e:	6812      	ldr	r2, [r2, #0]
 801af40:	3b04      	subs	r3, #4
 801af42:	2a00      	cmp	r2, #0
 801af44:	d1cc      	bne.n	801aee0 <quorem+0x9c>
 801af46:	3c01      	subs	r4, #1
 801af48:	e7c7      	b.n	801aeda <quorem+0x96>
 801af4a:	6812      	ldr	r2, [r2, #0]
 801af4c:	3b04      	subs	r3, #4
 801af4e:	2a00      	cmp	r2, #0
 801af50:	d1f0      	bne.n	801af34 <quorem+0xf0>
 801af52:	3c01      	subs	r4, #1
 801af54:	e7eb      	b.n	801af2e <quorem+0xea>
 801af56:	2000      	movs	r0, #0
 801af58:	e7ee      	b.n	801af38 <quorem+0xf4>
 801af5a:	0000      	movs	r0, r0
 801af5c:	0000      	movs	r0, r0
	...

0801af60 <_dtoa_r>:
 801af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af64:	ed2d 8b02 	vpush	{d8}
 801af68:	ec57 6b10 	vmov	r6, r7, d0
 801af6c:	b095      	sub	sp, #84	; 0x54
 801af6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801af70:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801af74:	9105      	str	r1, [sp, #20]
 801af76:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801af7a:	4604      	mov	r4, r0
 801af7c:	9209      	str	r2, [sp, #36]	; 0x24
 801af7e:	930f      	str	r3, [sp, #60]	; 0x3c
 801af80:	b975      	cbnz	r5, 801afa0 <_dtoa_r+0x40>
 801af82:	2010      	movs	r0, #16
 801af84:	f7ff f8cc 	bl	801a120 <malloc>
 801af88:	4602      	mov	r2, r0
 801af8a:	6260      	str	r0, [r4, #36]	; 0x24
 801af8c:	b920      	cbnz	r0, 801af98 <_dtoa_r+0x38>
 801af8e:	4bb2      	ldr	r3, [pc, #712]	; (801b258 <_dtoa_r+0x2f8>)
 801af90:	21ea      	movs	r1, #234	; 0xea
 801af92:	48b2      	ldr	r0, [pc, #712]	; (801b25c <_dtoa_r+0x2fc>)
 801af94:	f001 fbae 	bl	801c6f4 <__assert_func>
 801af98:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801af9c:	6005      	str	r5, [r0, #0]
 801af9e:	60c5      	str	r5, [r0, #12]
 801afa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afa2:	6819      	ldr	r1, [r3, #0]
 801afa4:	b151      	cbz	r1, 801afbc <_dtoa_r+0x5c>
 801afa6:	685a      	ldr	r2, [r3, #4]
 801afa8:	604a      	str	r2, [r1, #4]
 801afaa:	2301      	movs	r3, #1
 801afac:	4093      	lsls	r3, r2
 801afae:	608b      	str	r3, [r1, #8]
 801afb0:	4620      	mov	r0, r4
 801afb2:	f000 fee5 	bl	801bd80 <_Bfree>
 801afb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801afb8:	2200      	movs	r2, #0
 801afba:	601a      	str	r2, [r3, #0]
 801afbc:	1e3b      	subs	r3, r7, #0
 801afbe:	bfb9      	ittee	lt
 801afc0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801afc4:	9303      	strlt	r3, [sp, #12]
 801afc6:	2300      	movge	r3, #0
 801afc8:	f8c8 3000 	strge.w	r3, [r8]
 801afcc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 801afd0:	4ba3      	ldr	r3, [pc, #652]	; (801b260 <_dtoa_r+0x300>)
 801afd2:	bfbc      	itt	lt
 801afd4:	2201      	movlt	r2, #1
 801afd6:	f8c8 2000 	strlt.w	r2, [r8]
 801afda:	ea33 0309 	bics.w	r3, r3, r9
 801afde:	d11b      	bne.n	801b018 <_dtoa_r+0xb8>
 801afe0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801afe2:	f242 730f 	movw	r3, #9999	; 0x270f
 801afe6:	6013      	str	r3, [r2, #0]
 801afe8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801afec:	4333      	orrs	r3, r6
 801afee:	f000 857a 	beq.w	801bae6 <_dtoa_r+0xb86>
 801aff2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aff4:	b963      	cbnz	r3, 801b010 <_dtoa_r+0xb0>
 801aff6:	4b9b      	ldr	r3, [pc, #620]	; (801b264 <_dtoa_r+0x304>)
 801aff8:	e024      	b.n	801b044 <_dtoa_r+0xe4>
 801affa:	4b9b      	ldr	r3, [pc, #620]	; (801b268 <_dtoa_r+0x308>)
 801affc:	9300      	str	r3, [sp, #0]
 801affe:	3308      	adds	r3, #8
 801b000:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b002:	6013      	str	r3, [r2, #0]
 801b004:	9800      	ldr	r0, [sp, #0]
 801b006:	b015      	add	sp, #84	; 0x54
 801b008:	ecbd 8b02 	vpop	{d8}
 801b00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b010:	4b94      	ldr	r3, [pc, #592]	; (801b264 <_dtoa_r+0x304>)
 801b012:	9300      	str	r3, [sp, #0]
 801b014:	3303      	adds	r3, #3
 801b016:	e7f3      	b.n	801b000 <_dtoa_r+0xa0>
 801b018:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b01c:	2200      	movs	r2, #0
 801b01e:	ec51 0b17 	vmov	r0, r1, d7
 801b022:	2300      	movs	r3, #0
 801b024:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801b028:	f7e5 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 801b02c:	4680      	mov	r8, r0
 801b02e:	b158      	cbz	r0, 801b048 <_dtoa_r+0xe8>
 801b030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b032:	2301      	movs	r3, #1
 801b034:	6013      	str	r3, [r2, #0]
 801b036:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b038:	2b00      	cmp	r3, #0
 801b03a:	f000 8551 	beq.w	801bae0 <_dtoa_r+0xb80>
 801b03e:	488b      	ldr	r0, [pc, #556]	; (801b26c <_dtoa_r+0x30c>)
 801b040:	6018      	str	r0, [r3, #0]
 801b042:	1e43      	subs	r3, r0, #1
 801b044:	9300      	str	r3, [sp, #0]
 801b046:	e7dd      	b.n	801b004 <_dtoa_r+0xa4>
 801b048:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801b04c:	aa12      	add	r2, sp, #72	; 0x48
 801b04e:	a913      	add	r1, sp, #76	; 0x4c
 801b050:	4620      	mov	r0, r4
 801b052:	f001 f977 	bl	801c344 <__d2b>
 801b056:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b05a:	4683      	mov	fp, r0
 801b05c:	2d00      	cmp	r5, #0
 801b05e:	d07c      	beq.n	801b15a <_dtoa_r+0x1fa>
 801b060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b062:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801b066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b06a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801b06e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801b072:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801b076:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801b07a:	4b7d      	ldr	r3, [pc, #500]	; (801b270 <_dtoa_r+0x310>)
 801b07c:	2200      	movs	r2, #0
 801b07e:	4630      	mov	r0, r6
 801b080:	4639      	mov	r1, r7
 801b082:	f7e5 f901 	bl	8000288 <__aeabi_dsub>
 801b086:	a36e      	add	r3, pc, #440	; (adr r3, 801b240 <_dtoa_r+0x2e0>)
 801b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b08c:	f7e5 fab4 	bl	80005f8 <__aeabi_dmul>
 801b090:	a36d      	add	r3, pc, #436	; (adr r3, 801b248 <_dtoa_r+0x2e8>)
 801b092:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b096:	f7e5 f8f9 	bl	800028c <__adddf3>
 801b09a:	4606      	mov	r6, r0
 801b09c:	4628      	mov	r0, r5
 801b09e:	460f      	mov	r7, r1
 801b0a0:	f7e5 fa40 	bl	8000524 <__aeabi_i2d>
 801b0a4:	a36a      	add	r3, pc, #424	; (adr r3, 801b250 <_dtoa_r+0x2f0>)
 801b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0aa:	f7e5 faa5 	bl	80005f8 <__aeabi_dmul>
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	460b      	mov	r3, r1
 801b0b2:	4630      	mov	r0, r6
 801b0b4:	4639      	mov	r1, r7
 801b0b6:	f7e5 f8e9 	bl	800028c <__adddf3>
 801b0ba:	4606      	mov	r6, r0
 801b0bc:	460f      	mov	r7, r1
 801b0be:	f7e5 fd4b 	bl	8000b58 <__aeabi_d2iz>
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	4682      	mov	sl, r0
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	4630      	mov	r0, r6
 801b0ca:	4639      	mov	r1, r7
 801b0cc:	f7e5 fd06 	bl	8000adc <__aeabi_dcmplt>
 801b0d0:	b148      	cbz	r0, 801b0e6 <_dtoa_r+0x186>
 801b0d2:	4650      	mov	r0, sl
 801b0d4:	f7e5 fa26 	bl	8000524 <__aeabi_i2d>
 801b0d8:	4632      	mov	r2, r6
 801b0da:	463b      	mov	r3, r7
 801b0dc:	f7e5 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 801b0e0:	b908      	cbnz	r0, 801b0e6 <_dtoa_r+0x186>
 801b0e2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b0e6:	f1ba 0f16 	cmp.w	sl, #22
 801b0ea:	d854      	bhi.n	801b196 <_dtoa_r+0x236>
 801b0ec:	4b61      	ldr	r3, [pc, #388]	; (801b274 <_dtoa_r+0x314>)
 801b0ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b0fa:	f7e5 fcef 	bl	8000adc <__aeabi_dcmplt>
 801b0fe:	2800      	cmp	r0, #0
 801b100:	d04b      	beq.n	801b19a <_dtoa_r+0x23a>
 801b102:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b106:	2300      	movs	r3, #0
 801b108:	930e      	str	r3, [sp, #56]	; 0x38
 801b10a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b10c:	1b5d      	subs	r5, r3, r5
 801b10e:	1e6b      	subs	r3, r5, #1
 801b110:	9304      	str	r3, [sp, #16]
 801b112:	bf43      	ittte	mi
 801b114:	2300      	movmi	r3, #0
 801b116:	f1c5 0801 	rsbmi	r8, r5, #1
 801b11a:	9304      	strmi	r3, [sp, #16]
 801b11c:	f04f 0800 	movpl.w	r8, #0
 801b120:	f1ba 0f00 	cmp.w	sl, #0
 801b124:	db3b      	blt.n	801b19e <_dtoa_r+0x23e>
 801b126:	9b04      	ldr	r3, [sp, #16]
 801b128:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801b12c:	4453      	add	r3, sl
 801b12e:	9304      	str	r3, [sp, #16]
 801b130:	2300      	movs	r3, #0
 801b132:	9306      	str	r3, [sp, #24]
 801b134:	9b05      	ldr	r3, [sp, #20]
 801b136:	2b09      	cmp	r3, #9
 801b138:	d869      	bhi.n	801b20e <_dtoa_r+0x2ae>
 801b13a:	2b05      	cmp	r3, #5
 801b13c:	bfc4      	itt	gt
 801b13e:	3b04      	subgt	r3, #4
 801b140:	9305      	strgt	r3, [sp, #20]
 801b142:	9b05      	ldr	r3, [sp, #20]
 801b144:	f1a3 0302 	sub.w	r3, r3, #2
 801b148:	bfcc      	ite	gt
 801b14a:	2500      	movgt	r5, #0
 801b14c:	2501      	movle	r5, #1
 801b14e:	2b03      	cmp	r3, #3
 801b150:	d869      	bhi.n	801b226 <_dtoa_r+0x2c6>
 801b152:	e8df f003 	tbb	[pc, r3]
 801b156:	4e2c      	.short	0x4e2c
 801b158:	5a4c      	.short	0x5a4c
 801b15a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801b15e:	441d      	add	r5, r3
 801b160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801b164:	2b20      	cmp	r3, #32
 801b166:	bfc1      	itttt	gt
 801b168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b16c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801b170:	fa09 f303 	lslgt.w	r3, r9, r3
 801b174:	fa26 f000 	lsrgt.w	r0, r6, r0
 801b178:	bfda      	itte	le
 801b17a:	f1c3 0320 	rsble	r3, r3, #32
 801b17e:	fa06 f003 	lslle.w	r0, r6, r3
 801b182:	4318      	orrgt	r0, r3
 801b184:	f7e5 f9be 	bl	8000504 <__aeabi_ui2d>
 801b188:	2301      	movs	r3, #1
 801b18a:	4606      	mov	r6, r0
 801b18c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801b190:	3d01      	subs	r5, #1
 801b192:	9310      	str	r3, [sp, #64]	; 0x40
 801b194:	e771      	b.n	801b07a <_dtoa_r+0x11a>
 801b196:	2301      	movs	r3, #1
 801b198:	e7b6      	b.n	801b108 <_dtoa_r+0x1a8>
 801b19a:	900e      	str	r0, [sp, #56]	; 0x38
 801b19c:	e7b5      	b.n	801b10a <_dtoa_r+0x1aa>
 801b19e:	f1ca 0300 	rsb	r3, sl, #0
 801b1a2:	9306      	str	r3, [sp, #24]
 801b1a4:	2300      	movs	r3, #0
 801b1a6:	eba8 080a 	sub.w	r8, r8, sl
 801b1aa:	930d      	str	r3, [sp, #52]	; 0x34
 801b1ac:	e7c2      	b.n	801b134 <_dtoa_r+0x1d4>
 801b1ae:	2300      	movs	r3, #0
 801b1b0:	9308      	str	r3, [sp, #32]
 801b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	dc39      	bgt.n	801b22c <_dtoa_r+0x2cc>
 801b1b8:	f04f 0901 	mov.w	r9, #1
 801b1bc:	f8cd 9004 	str.w	r9, [sp, #4]
 801b1c0:	464b      	mov	r3, r9
 801b1c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801b1c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801b1c8:	2200      	movs	r2, #0
 801b1ca:	6042      	str	r2, [r0, #4]
 801b1cc:	2204      	movs	r2, #4
 801b1ce:	f102 0614 	add.w	r6, r2, #20
 801b1d2:	429e      	cmp	r6, r3
 801b1d4:	6841      	ldr	r1, [r0, #4]
 801b1d6:	d92f      	bls.n	801b238 <_dtoa_r+0x2d8>
 801b1d8:	4620      	mov	r0, r4
 801b1da:	f000 fd91 	bl	801bd00 <_Balloc>
 801b1de:	9000      	str	r0, [sp, #0]
 801b1e0:	2800      	cmp	r0, #0
 801b1e2:	d14b      	bne.n	801b27c <_dtoa_r+0x31c>
 801b1e4:	4b24      	ldr	r3, [pc, #144]	; (801b278 <_dtoa_r+0x318>)
 801b1e6:	4602      	mov	r2, r0
 801b1e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b1ec:	e6d1      	b.n	801af92 <_dtoa_r+0x32>
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	e7de      	b.n	801b1b0 <_dtoa_r+0x250>
 801b1f2:	2300      	movs	r3, #0
 801b1f4:	9308      	str	r3, [sp, #32]
 801b1f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b1f8:	eb0a 0903 	add.w	r9, sl, r3
 801b1fc:	f109 0301 	add.w	r3, r9, #1
 801b200:	2b01      	cmp	r3, #1
 801b202:	9301      	str	r3, [sp, #4]
 801b204:	bfb8      	it	lt
 801b206:	2301      	movlt	r3, #1
 801b208:	e7dd      	b.n	801b1c6 <_dtoa_r+0x266>
 801b20a:	2301      	movs	r3, #1
 801b20c:	e7f2      	b.n	801b1f4 <_dtoa_r+0x294>
 801b20e:	2501      	movs	r5, #1
 801b210:	2300      	movs	r3, #0
 801b212:	9305      	str	r3, [sp, #20]
 801b214:	9508      	str	r5, [sp, #32]
 801b216:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801b21a:	2200      	movs	r2, #0
 801b21c:	f8cd 9004 	str.w	r9, [sp, #4]
 801b220:	2312      	movs	r3, #18
 801b222:	9209      	str	r2, [sp, #36]	; 0x24
 801b224:	e7cf      	b.n	801b1c6 <_dtoa_r+0x266>
 801b226:	2301      	movs	r3, #1
 801b228:	9308      	str	r3, [sp, #32]
 801b22a:	e7f4      	b.n	801b216 <_dtoa_r+0x2b6>
 801b22c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 801b230:	f8cd 9004 	str.w	r9, [sp, #4]
 801b234:	464b      	mov	r3, r9
 801b236:	e7c6      	b.n	801b1c6 <_dtoa_r+0x266>
 801b238:	3101      	adds	r1, #1
 801b23a:	6041      	str	r1, [r0, #4]
 801b23c:	0052      	lsls	r2, r2, #1
 801b23e:	e7c6      	b.n	801b1ce <_dtoa_r+0x26e>
 801b240:	636f4361 	.word	0x636f4361
 801b244:	3fd287a7 	.word	0x3fd287a7
 801b248:	8b60c8b3 	.word	0x8b60c8b3
 801b24c:	3fc68a28 	.word	0x3fc68a28
 801b250:	509f79fb 	.word	0x509f79fb
 801b254:	3fd34413 	.word	0x3fd34413
 801b258:	080221a2 	.word	0x080221a2
 801b25c:	080221b9 	.word	0x080221b9
 801b260:	7ff00000 	.word	0x7ff00000
 801b264:	0802219e 	.word	0x0802219e
 801b268:	08022195 	.word	0x08022195
 801b26c:	0802214d 	.word	0x0802214d
 801b270:	3ff80000 	.word	0x3ff80000
 801b274:	080222b8 	.word	0x080222b8
 801b278:	08022218 	.word	0x08022218
 801b27c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b27e:	9a00      	ldr	r2, [sp, #0]
 801b280:	601a      	str	r2, [r3, #0]
 801b282:	9b01      	ldr	r3, [sp, #4]
 801b284:	2b0e      	cmp	r3, #14
 801b286:	f200 80ad 	bhi.w	801b3e4 <_dtoa_r+0x484>
 801b28a:	2d00      	cmp	r5, #0
 801b28c:	f000 80aa 	beq.w	801b3e4 <_dtoa_r+0x484>
 801b290:	f1ba 0f00 	cmp.w	sl, #0
 801b294:	dd36      	ble.n	801b304 <_dtoa_r+0x3a4>
 801b296:	4ac3      	ldr	r2, [pc, #780]	; (801b5a4 <_dtoa_r+0x644>)
 801b298:	f00a 030f 	and.w	r3, sl, #15
 801b29c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801b2a0:	ed93 7b00 	vldr	d7, [r3]
 801b2a4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 801b2a8:	ea4f 172a 	mov.w	r7, sl, asr #4
 801b2ac:	eeb0 8a47 	vmov.f32	s16, s14
 801b2b0:	eef0 8a67 	vmov.f32	s17, s15
 801b2b4:	d016      	beq.n	801b2e4 <_dtoa_r+0x384>
 801b2b6:	4bbc      	ldr	r3, [pc, #752]	; (801b5a8 <_dtoa_r+0x648>)
 801b2b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b2bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801b2c0:	f7e5 fac4 	bl	800084c <__aeabi_ddiv>
 801b2c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2c8:	f007 070f 	and.w	r7, r7, #15
 801b2cc:	2503      	movs	r5, #3
 801b2ce:	4eb6      	ldr	r6, [pc, #728]	; (801b5a8 <_dtoa_r+0x648>)
 801b2d0:	b957      	cbnz	r7, 801b2e8 <_dtoa_r+0x388>
 801b2d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b2d6:	ec53 2b18 	vmov	r2, r3, d8
 801b2da:	f7e5 fab7 	bl	800084c <__aeabi_ddiv>
 801b2de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2e2:	e029      	b.n	801b338 <_dtoa_r+0x3d8>
 801b2e4:	2502      	movs	r5, #2
 801b2e6:	e7f2      	b.n	801b2ce <_dtoa_r+0x36e>
 801b2e8:	07f9      	lsls	r1, r7, #31
 801b2ea:	d508      	bpl.n	801b2fe <_dtoa_r+0x39e>
 801b2ec:	ec51 0b18 	vmov	r0, r1, d8
 801b2f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 801b2f4:	f7e5 f980 	bl	80005f8 <__aeabi_dmul>
 801b2f8:	ec41 0b18 	vmov	d8, r0, r1
 801b2fc:	3501      	adds	r5, #1
 801b2fe:	107f      	asrs	r7, r7, #1
 801b300:	3608      	adds	r6, #8
 801b302:	e7e5      	b.n	801b2d0 <_dtoa_r+0x370>
 801b304:	f000 80a6 	beq.w	801b454 <_dtoa_r+0x4f4>
 801b308:	f1ca 0600 	rsb	r6, sl, #0
 801b30c:	4ba5      	ldr	r3, [pc, #660]	; (801b5a4 <_dtoa_r+0x644>)
 801b30e:	4fa6      	ldr	r7, [pc, #664]	; (801b5a8 <_dtoa_r+0x648>)
 801b310:	f006 020f 	and.w	r2, r6, #15
 801b314:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b31c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b320:	f7e5 f96a 	bl	80005f8 <__aeabi_dmul>
 801b324:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b328:	1136      	asrs	r6, r6, #4
 801b32a:	2300      	movs	r3, #0
 801b32c:	2502      	movs	r5, #2
 801b32e:	2e00      	cmp	r6, #0
 801b330:	f040 8085 	bne.w	801b43e <_dtoa_r+0x4de>
 801b334:	2b00      	cmp	r3, #0
 801b336:	d1d2      	bne.n	801b2de <_dtoa_r+0x37e>
 801b338:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b33a:	2b00      	cmp	r3, #0
 801b33c:	f000 808c 	beq.w	801b458 <_dtoa_r+0x4f8>
 801b340:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b344:	4b99      	ldr	r3, [pc, #612]	; (801b5ac <_dtoa_r+0x64c>)
 801b346:	2200      	movs	r2, #0
 801b348:	4630      	mov	r0, r6
 801b34a:	4639      	mov	r1, r7
 801b34c:	f7e5 fbc6 	bl	8000adc <__aeabi_dcmplt>
 801b350:	2800      	cmp	r0, #0
 801b352:	f000 8081 	beq.w	801b458 <_dtoa_r+0x4f8>
 801b356:	9b01      	ldr	r3, [sp, #4]
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d07d      	beq.n	801b458 <_dtoa_r+0x4f8>
 801b35c:	f1b9 0f00 	cmp.w	r9, #0
 801b360:	dd3c      	ble.n	801b3dc <_dtoa_r+0x47c>
 801b362:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801b366:	9307      	str	r3, [sp, #28]
 801b368:	2200      	movs	r2, #0
 801b36a:	4b91      	ldr	r3, [pc, #580]	; (801b5b0 <_dtoa_r+0x650>)
 801b36c:	4630      	mov	r0, r6
 801b36e:	4639      	mov	r1, r7
 801b370:	f7e5 f942 	bl	80005f8 <__aeabi_dmul>
 801b374:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b378:	3501      	adds	r5, #1
 801b37a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801b37e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b382:	4628      	mov	r0, r5
 801b384:	f7e5 f8ce 	bl	8000524 <__aeabi_i2d>
 801b388:	4632      	mov	r2, r6
 801b38a:	463b      	mov	r3, r7
 801b38c:	f7e5 f934 	bl	80005f8 <__aeabi_dmul>
 801b390:	4b88      	ldr	r3, [pc, #544]	; (801b5b4 <_dtoa_r+0x654>)
 801b392:	2200      	movs	r2, #0
 801b394:	f7e4 ff7a 	bl	800028c <__adddf3>
 801b398:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801b39c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3a0:	9303      	str	r3, [sp, #12]
 801b3a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d15c      	bne.n	801b462 <_dtoa_r+0x502>
 801b3a8:	4b83      	ldr	r3, [pc, #524]	; (801b5b8 <_dtoa_r+0x658>)
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	4630      	mov	r0, r6
 801b3ae:	4639      	mov	r1, r7
 801b3b0:	f7e4 ff6a 	bl	8000288 <__aeabi_dsub>
 801b3b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b3b8:	4606      	mov	r6, r0
 801b3ba:	460f      	mov	r7, r1
 801b3bc:	f7e5 fbac 	bl	8000b18 <__aeabi_dcmpgt>
 801b3c0:	2800      	cmp	r0, #0
 801b3c2:	f040 8296 	bne.w	801b8f2 <_dtoa_r+0x992>
 801b3c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801b3ca:	4630      	mov	r0, r6
 801b3cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3d0:	4639      	mov	r1, r7
 801b3d2:	f7e5 fb83 	bl	8000adc <__aeabi_dcmplt>
 801b3d6:	2800      	cmp	r0, #0
 801b3d8:	f040 8288 	bne.w	801b8ec <_dtoa_r+0x98c>
 801b3dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b3e0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b3e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b3e6:	2b00      	cmp	r3, #0
 801b3e8:	f2c0 8158 	blt.w	801b69c <_dtoa_r+0x73c>
 801b3ec:	f1ba 0f0e 	cmp.w	sl, #14
 801b3f0:	f300 8154 	bgt.w	801b69c <_dtoa_r+0x73c>
 801b3f4:	4b6b      	ldr	r3, [pc, #428]	; (801b5a4 <_dtoa_r+0x644>)
 801b3f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801b3fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b3fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b400:	2b00      	cmp	r3, #0
 801b402:	f280 80e3 	bge.w	801b5cc <_dtoa_r+0x66c>
 801b406:	9b01      	ldr	r3, [sp, #4]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	f300 80df 	bgt.w	801b5cc <_dtoa_r+0x66c>
 801b40e:	f040 826d 	bne.w	801b8ec <_dtoa_r+0x98c>
 801b412:	4b69      	ldr	r3, [pc, #420]	; (801b5b8 <_dtoa_r+0x658>)
 801b414:	2200      	movs	r2, #0
 801b416:	4640      	mov	r0, r8
 801b418:	4649      	mov	r1, r9
 801b41a:	f7e5 f8ed 	bl	80005f8 <__aeabi_dmul>
 801b41e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b422:	f7e5 fb6f 	bl	8000b04 <__aeabi_dcmpge>
 801b426:	9e01      	ldr	r6, [sp, #4]
 801b428:	4637      	mov	r7, r6
 801b42a:	2800      	cmp	r0, #0
 801b42c:	f040 8243 	bne.w	801b8b6 <_dtoa_r+0x956>
 801b430:	9d00      	ldr	r5, [sp, #0]
 801b432:	2331      	movs	r3, #49	; 0x31
 801b434:	f805 3b01 	strb.w	r3, [r5], #1
 801b438:	f10a 0a01 	add.w	sl, sl, #1
 801b43c:	e23f      	b.n	801b8be <_dtoa_r+0x95e>
 801b43e:	07f2      	lsls	r2, r6, #31
 801b440:	d505      	bpl.n	801b44e <_dtoa_r+0x4ee>
 801b442:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b446:	f7e5 f8d7 	bl	80005f8 <__aeabi_dmul>
 801b44a:	3501      	adds	r5, #1
 801b44c:	2301      	movs	r3, #1
 801b44e:	1076      	asrs	r6, r6, #1
 801b450:	3708      	adds	r7, #8
 801b452:	e76c      	b.n	801b32e <_dtoa_r+0x3ce>
 801b454:	2502      	movs	r5, #2
 801b456:	e76f      	b.n	801b338 <_dtoa_r+0x3d8>
 801b458:	9b01      	ldr	r3, [sp, #4]
 801b45a:	f8cd a01c 	str.w	sl, [sp, #28]
 801b45e:	930c      	str	r3, [sp, #48]	; 0x30
 801b460:	e78d      	b.n	801b37e <_dtoa_r+0x41e>
 801b462:	9900      	ldr	r1, [sp, #0]
 801b464:	980c      	ldr	r0, [sp, #48]	; 0x30
 801b466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b468:	4b4e      	ldr	r3, [pc, #312]	; (801b5a4 <_dtoa_r+0x644>)
 801b46a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b46e:	4401      	add	r1, r0
 801b470:	9102      	str	r1, [sp, #8]
 801b472:	9908      	ldr	r1, [sp, #32]
 801b474:	eeb0 8a47 	vmov.f32	s16, s14
 801b478:	eef0 8a67 	vmov.f32	s17, s15
 801b47c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801b480:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b484:	2900      	cmp	r1, #0
 801b486:	d045      	beq.n	801b514 <_dtoa_r+0x5b4>
 801b488:	494c      	ldr	r1, [pc, #304]	; (801b5bc <_dtoa_r+0x65c>)
 801b48a:	2000      	movs	r0, #0
 801b48c:	f7e5 f9de 	bl	800084c <__aeabi_ddiv>
 801b490:	ec53 2b18 	vmov	r2, r3, d8
 801b494:	f7e4 fef8 	bl	8000288 <__aeabi_dsub>
 801b498:	9d00      	ldr	r5, [sp, #0]
 801b49a:	ec41 0b18 	vmov	d8, r0, r1
 801b49e:	4639      	mov	r1, r7
 801b4a0:	4630      	mov	r0, r6
 801b4a2:	f7e5 fb59 	bl	8000b58 <__aeabi_d2iz>
 801b4a6:	900c      	str	r0, [sp, #48]	; 0x30
 801b4a8:	f7e5 f83c 	bl	8000524 <__aeabi_i2d>
 801b4ac:	4602      	mov	r2, r0
 801b4ae:	460b      	mov	r3, r1
 801b4b0:	4630      	mov	r0, r6
 801b4b2:	4639      	mov	r1, r7
 801b4b4:	f7e4 fee8 	bl	8000288 <__aeabi_dsub>
 801b4b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4ba:	3330      	adds	r3, #48	; 0x30
 801b4bc:	f805 3b01 	strb.w	r3, [r5], #1
 801b4c0:	ec53 2b18 	vmov	r2, r3, d8
 801b4c4:	4606      	mov	r6, r0
 801b4c6:	460f      	mov	r7, r1
 801b4c8:	f7e5 fb08 	bl	8000adc <__aeabi_dcmplt>
 801b4cc:	2800      	cmp	r0, #0
 801b4ce:	d165      	bne.n	801b59c <_dtoa_r+0x63c>
 801b4d0:	4632      	mov	r2, r6
 801b4d2:	463b      	mov	r3, r7
 801b4d4:	4935      	ldr	r1, [pc, #212]	; (801b5ac <_dtoa_r+0x64c>)
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	f7e4 fed6 	bl	8000288 <__aeabi_dsub>
 801b4dc:	ec53 2b18 	vmov	r2, r3, d8
 801b4e0:	f7e5 fafc 	bl	8000adc <__aeabi_dcmplt>
 801b4e4:	2800      	cmp	r0, #0
 801b4e6:	f040 80b9 	bne.w	801b65c <_dtoa_r+0x6fc>
 801b4ea:	9b02      	ldr	r3, [sp, #8]
 801b4ec:	429d      	cmp	r5, r3
 801b4ee:	f43f af75 	beq.w	801b3dc <_dtoa_r+0x47c>
 801b4f2:	4b2f      	ldr	r3, [pc, #188]	; (801b5b0 <_dtoa_r+0x650>)
 801b4f4:	ec51 0b18 	vmov	r0, r1, d8
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	f7e5 f87d 	bl	80005f8 <__aeabi_dmul>
 801b4fe:	4b2c      	ldr	r3, [pc, #176]	; (801b5b0 <_dtoa_r+0x650>)
 801b500:	ec41 0b18 	vmov	d8, r0, r1
 801b504:	2200      	movs	r2, #0
 801b506:	4630      	mov	r0, r6
 801b508:	4639      	mov	r1, r7
 801b50a:	f7e5 f875 	bl	80005f8 <__aeabi_dmul>
 801b50e:	4606      	mov	r6, r0
 801b510:	460f      	mov	r7, r1
 801b512:	e7c4      	b.n	801b49e <_dtoa_r+0x53e>
 801b514:	ec51 0b17 	vmov	r0, r1, d7
 801b518:	f7e5 f86e 	bl	80005f8 <__aeabi_dmul>
 801b51c:	9b02      	ldr	r3, [sp, #8]
 801b51e:	9d00      	ldr	r5, [sp, #0]
 801b520:	930c      	str	r3, [sp, #48]	; 0x30
 801b522:	ec41 0b18 	vmov	d8, r0, r1
 801b526:	4639      	mov	r1, r7
 801b528:	4630      	mov	r0, r6
 801b52a:	f7e5 fb15 	bl	8000b58 <__aeabi_d2iz>
 801b52e:	9011      	str	r0, [sp, #68]	; 0x44
 801b530:	f7e4 fff8 	bl	8000524 <__aeabi_i2d>
 801b534:	4602      	mov	r2, r0
 801b536:	460b      	mov	r3, r1
 801b538:	4630      	mov	r0, r6
 801b53a:	4639      	mov	r1, r7
 801b53c:	f7e4 fea4 	bl	8000288 <__aeabi_dsub>
 801b540:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b542:	3330      	adds	r3, #48	; 0x30
 801b544:	f805 3b01 	strb.w	r3, [r5], #1
 801b548:	9b02      	ldr	r3, [sp, #8]
 801b54a:	429d      	cmp	r5, r3
 801b54c:	4606      	mov	r6, r0
 801b54e:	460f      	mov	r7, r1
 801b550:	f04f 0200 	mov.w	r2, #0
 801b554:	d134      	bne.n	801b5c0 <_dtoa_r+0x660>
 801b556:	4b19      	ldr	r3, [pc, #100]	; (801b5bc <_dtoa_r+0x65c>)
 801b558:	ec51 0b18 	vmov	r0, r1, d8
 801b55c:	f7e4 fe96 	bl	800028c <__adddf3>
 801b560:	4602      	mov	r2, r0
 801b562:	460b      	mov	r3, r1
 801b564:	4630      	mov	r0, r6
 801b566:	4639      	mov	r1, r7
 801b568:	f7e5 fad6 	bl	8000b18 <__aeabi_dcmpgt>
 801b56c:	2800      	cmp	r0, #0
 801b56e:	d175      	bne.n	801b65c <_dtoa_r+0x6fc>
 801b570:	ec53 2b18 	vmov	r2, r3, d8
 801b574:	4911      	ldr	r1, [pc, #68]	; (801b5bc <_dtoa_r+0x65c>)
 801b576:	2000      	movs	r0, #0
 801b578:	f7e4 fe86 	bl	8000288 <__aeabi_dsub>
 801b57c:	4602      	mov	r2, r0
 801b57e:	460b      	mov	r3, r1
 801b580:	4630      	mov	r0, r6
 801b582:	4639      	mov	r1, r7
 801b584:	f7e5 faaa 	bl	8000adc <__aeabi_dcmplt>
 801b588:	2800      	cmp	r0, #0
 801b58a:	f43f af27 	beq.w	801b3dc <_dtoa_r+0x47c>
 801b58e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b590:	1e6b      	subs	r3, r5, #1
 801b592:	930c      	str	r3, [sp, #48]	; 0x30
 801b594:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b598:	2b30      	cmp	r3, #48	; 0x30
 801b59a:	d0f8      	beq.n	801b58e <_dtoa_r+0x62e>
 801b59c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b5a0:	e04a      	b.n	801b638 <_dtoa_r+0x6d8>
 801b5a2:	bf00      	nop
 801b5a4:	080222b8 	.word	0x080222b8
 801b5a8:	08022290 	.word	0x08022290
 801b5ac:	3ff00000 	.word	0x3ff00000
 801b5b0:	40240000 	.word	0x40240000
 801b5b4:	401c0000 	.word	0x401c0000
 801b5b8:	40140000 	.word	0x40140000
 801b5bc:	3fe00000 	.word	0x3fe00000
 801b5c0:	4baf      	ldr	r3, [pc, #700]	; (801b880 <_dtoa_r+0x920>)
 801b5c2:	f7e5 f819 	bl	80005f8 <__aeabi_dmul>
 801b5c6:	4606      	mov	r6, r0
 801b5c8:	460f      	mov	r7, r1
 801b5ca:	e7ac      	b.n	801b526 <_dtoa_r+0x5c6>
 801b5cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b5d0:	9d00      	ldr	r5, [sp, #0]
 801b5d2:	4642      	mov	r2, r8
 801b5d4:	464b      	mov	r3, r9
 801b5d6:	4630      	mov	r0, r6
 801b5d8:	4639      	mov	r1, r7
 801b5da:	f7e5 f937 	bl	800084c <__aeabi_ddiv>
 801b5de:	f7e5 fabb 	bl	8000b58 <__aeabi_d2iz>
 801b5e2:	9002      	str	r0, [sp, #8]
 801b5e4:	f7e4 ff9e 	bl	8000524 <__aeabi_i2d>
 801b5e8:	4642      	mov	r2, r8
 801b5ea:	464b      	mov	r3, r9
 801b5ec:	f7e5 f804 	bl	80005f8 <__aeabi_dmul>
 801b5f0:	4602      	mov	r2, r0
 801b5f2:	460b      	mov	r3, r1
 801b5f4:	4630      	mov	r0, r6
 801b5f6:	4639      	mov	r1, r7
 801b5f8:	f7e4 fe46 	bl	8000288 <__aeabi_dsub>
 801b5fc:	9e02      	ldr	r6, [sp, #8]
 801b5fe:	9f01      	ldr	r7, [sp, #4]
 801b600:	3630      	adds	r6, #48	; 0x30
 801b602:	f805 6b01 	strb.w	r6, [r5], #1
 801b606:	9e00      	ldr	r6, [sp, #0]
 801b608:	1bae      	subs	r6, r5, r6
 801b60a:	42b7      	cmp	r7, r6
 801b60c:	4602      	mov	r2, r0
 801b60e:	460b      	mov	r3, r1
 801b610:	d137      	bne.n	801b682 <_dtoa_r+0x722>
 801b612:	f7e4 fe3b 	bl	800028c <__adddf3>
 801b616:	4642      	mov	r2, r8
 801b618:	464b      	mov	r3, r9
 801b61a:	4606      	mov	r6, r0
 801b61c:	460f      	mov	r7, r1
 801b61e:	f7e5 fa7b 	bl	8000b18 <__aeabi_dcmpgt>
 801b622:	b9c8      	cbnz	r0, 801b658 <_dtoa_r+0x6f8>
 801b624:	4642      	mov	r2, r8
 801b626:	464b      	mov	r3, r9
 801b628:	4630      	mov	r0, r6
 801b62a:	4639      	mov	r1, r7
 801b62c:	f7e5 fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 801b630:	b110      	cbz	r0, 801b638 <_dtoa_r+0x6d8>
 801b632:	9b02      	ldr	r3, [sp, #8]
 801b634:	07d9      	lsls	r1, r3, #31
 801b636:	d40f      	bmi.n	801b658 <_dtoa_r+0x6f8>
 801b638:	4620      	mov	r0, r4
 801b63a:	4659      	mov	r1, fp
 801b63c:	f000 fba0 	bl	801bd80 <_Bfree>
 801b640:	2300      	movs	r3, #0
 801b642:	702b      	strb	r3, [r5, #0]
 801b644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b646:	f10a 0001 	add.w	r0, sl, #1
 801b64a:	6018      	str	r0, [r3, #0]
 801b64c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b64e:	2b00      	cmp	r3, #0
 801b650:	f43f acd8 	beq.w	801b004 <_dtoa_r+0xa4>
 801b654:	601d      	str	r5, [r3, #0]
 801b656:	e4d5      	b.n	801b004 <_dtoa_r+0xa4>
 801b658:	f8cd a01c 	str.w	sl, [sp, #28]
 801b65c:	462b      	mov	r3, r5
 801b65e:	461d      	mov	r5, r3
 801b660:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b664:	2a39      	cmp	r2, #57	; 0x39
 801b666:	d108      	bne.n	801b67a <_dtoa_r+0x71a>
 801b668:	9a00      	ldr	r2, [sp, #0]
 801b66a:	429a      	cmp	r2, r3
 801b66c:	d1f7      	bne.n	801b65e <_dtoa_r+0x6fe>
 801b66e:	9a07      	ldr	r2, [sp, #28]
 801b670:	9900      	ldr	r1, [sp, #0]
 801b672:	3201      	adds	r2, #1
 801b674:	9207      	str	r2, [sp, #28]
 801b676:	2230      	movs	r2, #48	; 0x30
 801b678:	700a      	strb	r2, [r1, #0]
 801b67a:	781a      	ldrb	r2, [r3, #0]
 801b67c:	3201      	adds	r2, #1
 801b67e:	701a      	strb	r2, [r3, #0]
 801b680:	e78c      	b.n	801b59c <_dtoa_r+0x63c>
 801b682:	4b7f      	ldr	r3, [pc, #508]	; (801b880 <_dtoa_r+0x920>)
 801b684:	2200      	movs	r2, #0
 801b686:	f7e4 ffb7 	bl	80005f8 <__aeabi_dmul>
 801b68a:	2200      	movs	r2, #0
 801b68c:	2300      	movs	r3, #0
 801b68e:	4606      	mov	r6, r0
 801b690:	460f      	mov	r7, r1
 801b692:	f7e5 fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 801b696:	2800      	cmp	r0, #0
 801b698:	d09b      	beq.n	801b5d2 <_dtoa_r+0x672>
 801b69a:	e7cd      	b.n	801b638 <_dtoa_r+0x6d8>
 801b69c:	9a08      	ldr	r2, [sp, #32]
 801b69e:	2a00      	cmp	r2, #0
 801b6a0:	f000 80c4 	beq.w	801b82c <_dtoa_r+0x8cc>
 801b6a4:	9a05      	ldr	r2, [sp, #20]
 801b6a6:	2a01      	cmp	r2, #1
 801b6a8:	f300 80a8 	bgt.w	801b7fc <_dtoa_r+0x89c>
 801b6ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801b6ae:	2a00      	cmp	r2, #0
 801b6b0:	f000 80a0 	beq.w	801b7f4 <_dtoa_r+0x894>
 801b6b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b6b8:	9e06      	ldr	r6, [sp, #24]
 801b6ba:	4645      	mov	r5, r8
 801b6bc:	9a04      	ldr	r2, [sp, #16]
 801b6be:	2101      	movs	r1, #1
 801b6c0:	441a      	add	r2, r3
 801b6c2:	4620      	mov	r0, r4
 801b6c4:	4498      	add	r8, r3
 801b6c6:	9204      	str	r2, [sp, #16]
 801b6c8:	f000 fc16 	bl	801bef8 <__i2b>
 801b6cc:	4607      	mov	r7, r0
 801b6ce:	2d00      	cmp	r5, #0
 801b6d0:	dd0b      	ble.n	801b6ea <_dtoa_r+0x78a>
 801b6d2:	9b04      	ldr	r3, [sp, #16]
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	dd08      	ble.n	801b6ea <_dtoa_r+0x78a>
 801b6d8:	42ab      	cmp	r3, r5
 801b6da:	9a04      	ldr	r2, [sp, #16]
 801b6dc:	bfa8      	it	ge
 801b6de:	462b      	movge	r3, r5
 801b6e0:	eba8 0803 	sub.w	r8, r8, r3
 801b6e4:	1aed      	subs	r5, r5, r3
 801b6e6:	1ad3      	subs	r3, r2, r3
 801b6e8:	9304      	str	r3, [sp, #16]
 801b6ea:	9b06      	ldr	r3, [sp, #24]
 801b6ec:	b1fb      	cbz	r3, 801b72e <_dtoa_r+0x7ce>
 801b6ee:	9b08      	ldr	r3, [sp, #32]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	f000 809f 	beq.w	801b834 <_dtoa_r+0x8d4>
 801b6f6:	2e00      	cmp	r6, #0
 801b6f8:	dd11      	ble.n	801b71e <_dtoa_r+0x7be>
 801b6fa:	4639      	mov	r1, r7
 801b6fc:	4632      	mov	r2, r6
 801b6fe:	4620      	mov	r0, r4
 801b700:	f000 fcb6 	bl	801c070 <__pow5mult>
 801b704:	465a      	mov	r2, fp
 801b706:	4601      	mov	r1, r0
 801b708:	4607      	mov	r7, r0
 801b70a:	4620      	mov	r0, r4
 801b70c:	f000 fc0a 	bl	801bf24 <__multiply>
 801b710:	4659      	mov	r1, fp
 801b712:	9007      	str	r0, [sp, #28]
 801b714:	4620      	mov	r0, r4
 801b716:	f000 fb33 	bl	801bd80 <_Bfree>
 801b71a:	9b07      	ldr	r3, [sp, #28]
 801b71c:	469b      	mov	fp, r3
 801b71e:	9b06      	ldr	r3, [sp, #24]
 801b720:	1b9a      	subs	r2, r3, r6
 801b722:	d004      	beq.n	801b72e <_dtoa_r+0x7ce>
 801b724:	4659      	mov	r1, fp
 801b726:	4620      	mov	r0, r4
 801b728:	f000 fca2 	bl	801c070 <__pow5mult>
 801b72c:	4683      	mov	fp, r0
 801b72e:	2101      	movs	r1, #1
 801b730:	4620      	mov	r0, r4
 801b732:	f000 fbe1 	bl	801bef8 <__i2b>
 801b736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b738:	2b00      	cmp	r3, #0
 801b73a:	4606      	mov	r6, r0
 801b73c:	dd7c      	ble.n	801b838 <_dtoa_r+0x8d8>
 801b73e:	461a      	mov	r2, r3
 801b740:	4601      	mov	r1, r0
 801b742:	4620      	mov	r0, r4
 801b744:	f000 fc94 	bl	801c070 <__pow5mult>
 801b748:	9b05      	ldr	r3, [sp, #20]
 801b74a:	2b01      	cmp	r3, #1
 801b74c:	4606      	mov	r6, r0
 801b74e:	dd76      	ble.n	801b83e <_dtoa_r+0x8de>
 801b750:	2300      	movs	r3, #0
 801b752:	9306      	str	r3, [sp, #24]
 801b754:	6933      	ldr	r3, [r6, #16]
 801b756:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b75a:	6918      	ldr	r0, [r3, #16]
 801b75c:	f000 fb7c 	bl	801be58 <__hi0bits>
 801b760:	f1c0 0020 	rsb	r0, r0, #32
 801b764:	9b04      	ldr	r3, [sp, #16]
 801b766:	4418      	add	r0, r3
 801b768:	f010 001f 	ands.w	r0, r0, #31
 801b76c:	f000 8086 	beq.w	801b87c <_dtoa_r+0x91c>
 801b770:	f1c0 0320 	rsb	r3, r0, #32
 801b774:	2b04      	cmp	r3, #4
 801b776:	dd7f      	ble.n	801b878 <_dtoa_r+0x918>
 801b778:	f1c0 001c 	rsb	r0, r0, #28
 801b77c:	9b04      	ldr	r3, [sp, #16]
 801b77e:	4403      	add	r3, r0
 801b780:	4480      	add	r8, r0
 801b782:	4405      	add	r5, r0
 801b784:	9304      	str	r3, [sp, #16]
 801b786:	f1b8 0f00 	cmp.w	r8, #0
 801b78a:	dd05      	ble.n	801b798 <_dtoa_r+0x838>
 801b78c:	4659      	mov	r1, fp
 801b78e:	4642      	mov	r2, r8
 801b790:	4620      	mov	r0, r4
 801b792:	f000 fcc7 	bl	801c124 <__lshift>
 801b796:	4683      	mov	fp, r0
 801b798:	9b04      	ldr	r3, [sp, #16]
 801b79a:	2b00      	cmp	r3, #0
 801b79c:	dd05      	ble.n	801b7aa <_dtoa_r+0x84a>
 801b79e:	4631      	mov	r1, r6
 801b7a0:	461a      	mov	r2, r3
 801b7a2:	4620      	mov	r0, r4
 801b7a4:	f000 fcbe 	bl	801c124 <__lshift>
 801b7a8:	4606      	mov	r6, r0
 801b7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d069      	beq.n	801b884 <_dtoa_r+0x924>
 801b7b0:	4631      	mov	r1, r6
 801b7b2:	4658      	mov	r0, fp
 801b7b4:	f000 fd22 	bl	801c1fc <__mcmp>
 801b7b8:	2800      	cmp	r0, #0
 801b7ba:	da63      	bge.n	801b884 <_dtoa_r+0x924>
 801b7bc:	2300      	movs	r3, #0
 801b7be:	4659      	mov	r1, fp
 801b7c0:	220a      	movs	r2, #10
 801b7c2:	4620      	mov	r0, r4
 801b7c4:	f000 fafe 	bl	801bdc4 <__multadd>
 801b7c8:	9b08      	ldr	r3, [sp, #32]
 801b7ca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801b7ce:	4683      	mov	fp, r0
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	f000 818f 	beq.w	801baf4 <_dtoa_r+0xb94>
 801b7d6:	4639      	mov	r1, r7
 801b7d8:	2300      	movs	r3, #0
 801b7da:	220a      	movs	r2, #10
 801b7dc:	4620      	mov	r0, r4
 801b7de:	f000 faf1 	bl	801bdc4 <__multadd>
 801b7e2:	f1b9 0f00 	cmp.w	r9, #0
 801b7e6:	4607      	mov	r7, r0
 801b7e8:	f300 808e 	bgt.w	801b908 <_dtoa_r+0x9a8>
 801b7ec:	9b05      	ldr	r3, [sp, #20]
 801b7ee:	2b02      	cmp	r3, #2
 801b7f0:	dc50      	bgt.n	801b894 <_dtoa_r+0x934>
 801b7f2:	e089      	b.n	801b908 <_dtoa_r+0x9a8>
 801b7f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801b7f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b7fa:	e75d      	b.n	801b6b8 <_dtoa_r+0x758>
 801b7fc:	9b01      	ldr	r3, [sp, #4]
 801b7fe:	1e5e      	subs	r6, r3, #1
 801b800:	9b06      	ldr	r3, [sp, #24]
 801b802:	42b3      	cmp	r3, r6
 801b804:	bfbf      	itttt	lt
 801b806:	9b06      	ldrlt	r3, [sp, #24]
 801b808:	9606      	strlt	r6, [sp, #24]
 801b80a:	1af2      	sublt	r2, r6, r3
 801b80c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801b80e:	bfb6      	itet	lt
 801b810:	189b      	addlt	r3, r3, r2
 801b812:	1b9e      	subge	r6, r3, r6
 801b814:	930d      	strlt	r3, [sp, #52]	; 0x34
 801b816:	9b01      	ldr	r3, [sp, #4]
 801b818:	bfb8      	it	lt
 801b81a:	2600      	movlt	r6, #0
 801b81c:	2b00      	cmp	r3, #0
 801b81e:	bfb5      	itete	lt
 801b820:	eba8 0503 	sublt.w	r5, r8, r3
 801b824:	9b01      	ldrge	r3, [sp, #4]
 801b826:	2300      	movlt	r3, #0
 801b828:	4645      	movge	r5, r8
 801b82a:	e747      	b.n	801b6bc <_dtoa_r+0x75c>
 801b82c:	9e06      	ldr	r6, [sp, #24]
 801b82e:	9f08      	ldr	r7, [sp, #32]
 801b830:	4645      	mov	r5, r8
 801b832:	e74c      	b.n	801b6ce <_dtoa_r+0x76e>
 801b834:	9a06      	ldr	r2, [sp, #24]
 801b836:	e775      	b.n	801b724 <_dtoa_r+0x7c4>
 801b838:	9b05      	ldr	r3, [sp, #20]
 801b83a:	2b01      	cmp	r3, #1
 801b83c:	dc18      	bgt.n	801b870 <_dtoa_r+0x910>
 801b83e:	9b02      	ldr	r3, [sp, #8]
 801b840:	b9b3      	cbnz	r3, 801b870 <_dtoa_r+0x910>
 801b842:	9b03      	ldr	r3, [sp, #12]
 801b844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b848:	b9a3      	cbnz	r3, 801b874 <_dtoa_r+0x914>
 801b84a:	9b03      	ldr	r3, [sp, #12]
 801b84c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b850:	0d1b      	lsrs	r3, r3, #20
 801b852:	051b      	lsls	r3, r3, #20
 801b854:	b12b      	cbz	r3, 801b862 <_dtoa_r+0x902>
 801b856:	9b04      	ldr	r3, [sp, #16]
 801b858:	3301      	adds	r3, #1
 801b85a:	9304      	str	r3, [sp, #16]
 801b85c:	f108 0801 	add.w	r8, r8, #1
 801b860:	2301      	movs	r3, #1
 801b862:	9306      	str	r3, [sp, #24]
 801b864:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b866:	2b00      	cmp	r3, #0
 801b868:	f47f af74 	bne.w	801b754 <_dtoa_r+0x7f4>
 801b86c:	2001      	movs	r0, #1
 801b86e:	e779      	b.n	801b764 <_dtoa_r+0x804>
 801b870:	2300      	movs	r3, #0
 801b872:	e7f6      	b.n	801b862 <_dtoa_r+0x902>
 801b874:	9b02      	ldr	r3, [sp, #8]
 801b876:	e7f4      	b.n	801b862 <_dtoa_r+0x902>
 801b878:	d085      	beq.n	801b786 <_dtoa_r+0x826>
 801b87a:	4618      	mov	r0, r3
 801b87c:	301c      	adds	r0, #28
 801b87e:	e77d      	b.n	801b77c <_dtoa_r+0x81c>
 801b880:	40240000 	.word	0x40240000
 801b884:	9b01      	ldr	r3, [sp, #4]
 801b886:	2b00      	cmp	r3, #0
 801b888:	dc38      	bgt.n	801b8fc <_dtoa_r+0x99c>
 801b88a:	9b05      	ldr	r3, [sp, #20]
 801b88c:	2b02      	cmp	r3, #2
 801b88e:	dd35      	ble.n	801b8fc <_dtoa_r+0x99c>
 801b890:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801b894:	f1b9 0f00 	cmp.w	r9, #0
 801b898:	d10d      	bne.n	801b8b6 <_dtoa_r+0x956>
 801b89a:	4631      	mov	r1, r6
 801b89c:	464b      	mov	r3, r9
 801b89e:	2205      	movs	r2, #5
 801b8a0:	4620      	mov	r0, r4
 801b8a2:	f000 fa8f 	bl	801bdc4 <__multadd>
 801b8a6:	4601      	mov	r1, r0
 801b8a8:	4606      	mov	r6, r0
 801b8aa:	4658      	mov	r0, fp
 801b8ac:	f000 fca6 	bl	801c1fc <__mcmp>
 801b8b0:	2800      	cmp	r0, #0
 801b8b2:	f73f adbd 	bgt.w	801b430 <_dtoa_r+0x4d0>
 801b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b8b8:	9d00      	ldr	r5, [sp, #0]
 801b8ba:	ea6f 0a03 	mvn.w	sl, r3
 801b8be:	f04f 0800 	mov.w	r8, #0
 801b8c2:	4631      	mov	r1, r6
 801b8c4:	4620      	mov	r0, r4
 801b8c6:	f000 fa5b 	bl	801bd80 <_Bfree>
 801b8ca:	2f00      	cmp	r7, #0
 801b8cc:	f43f aeb4 	beq.w	801b638 <_dtoa_r+0x6d8>
 801b8d0:	f1b8 0f00 	cmp.w	r8, #0
 801b8d4:	d005      	beq.n	801b8e2 <_dtoa_r+0x982>
 801b8d6:	45b8      	cmp	r8, r7
 801b8d8:	d003      	beq.n	801b8e2 <_dtoa_r+0x982>
 801b8da:	4641      	mov	r1, r8
 801b8dc:	4620      	mov	r0, r4
 801b8de:	f000 fa4f 	bl	801bd80 <_Bfree>
 801b8e2:	4639      	mov	r1, r7
 801b8e4:	4620      	mov	r0, r4
 801b8e6:	f000 fa4b 	bl	801bd80 <_Bfree>
 801b8ea:	e6a5      	b.n	801b638 <_dtoa_r+0x6d8>
 801b8ec:	2600      	movs	r6, #0
 801b8ee:	4637      	mov	r7, r6
 801b8f0:	e7e1      	b.n	801b8b6 <_dtoa_r+0x956>
 801b8f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b8f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801b8f8:	4637      	mov	r7, r6
 801b8fa:	e599      	b.n	801b430 <_dtoa_r+0x4d0>
 801b8fc:	9b08      	ldr	r3, [sp, #32]
 801b8fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801b902:	2b00      	cmp	r3, #0
 801b904:	f000 80fd 	beq.w	801bb02 <_dtoa_r+0xba2>
 801b908:	2d00      	cmp	r5, #0
 801b90a:	dd05      	ble.n	801b918 <_dtoa_r+0x9b8>
 801b90c:	4639      	mov	r1, r7
 801b90e:	462a      	mov	r2, r5
 801b910:	4620      	mov	r0, r4
 801b912:	f000 fc07 	bl	801c124 <__lshift>
 801b916:	4607      	mov	r7, r0
 801b918:	9b06      	ldr	r3, [sp, #24]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d05c      	beq.n	801b9d8 <_dtoa_r+0xa78>
 801b91e:	6879      	ldr	r1, [r7, #4]
 801b920:	4620      	mov	r0, r4
 801b922:	f000 f9ed 	bl	801bd00 <_Balloc>
 801b926:	4605      	mov	r5, r0
 801b928:	b928      	cbnz	r0, 801b936 <_dtoa_r+0x9d6>
 801b92a:	4b80      	ldr	r3, [pc, #512]	; (801bb2c <_dtoa_r+0xbcc>)
 801b92c:	4602      	mov	r2, r0
 801b92e:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b932:	f7ff bb2e 	b.w	801af92 <_dtoa_r+0x32>
 801b936:	693a      	ldr	r2, [r7, #16]
 801b938:	3202      	adds	r2, #2
 801b93a:	0092      	lsls	r2, r2, #2
 801b93c:	f107 010c 	add.w	r1, r7, #12
 801b940:	300c      	adds	r0, #12
 801b942:	f7fe fbfd 	bl	801a140 <memcpy>
 801b946:	2201      	movs	r2, #1
 801b948:	4629      	mov	r1, r5
 801b94a:	4620      	mov	r0, r4
 801b94c:	f000 fbea 	bl	801c124 <__lshift>
 801b950:	9b00      	ldr	r3, [sp, #0]
 801b952:	3301      	adds	r3, #1
 801b954:	9301      	str	r3, [sp, #4]
 801b956:	9b00      	ldr	r3, [sp, #0]
 801b958:	444b      	add	r3, r9
 801b95a:	9307      	str	r3, [sp, #28]
 801b95c:	9b02      	ldr	r3, [sp, #8]
 801b95e:	f003 0301 	and.w	r3, r3, #1
 801b962:	46b8      	mov	r8, r7
 801b964:	9306      	str	r3, [sp, #24]
 801b966:	4607      	mov	r7, r0
 801b968:	9b01      	ldr	r3, [sp, #4]
 801b96a:	4631      	mov	r1, r6
 801b96c:	3b01      	subs	r3, #1
 801b96e:	4658      	mov	r0, fp
 801b970:	9302      	str	r3, [sp, #8]
 801b972:	f7ff fa67 	bl	801ae44 <quorem>
 801b976:	4603      	mov	r3, r0
 801b978:	3330      	adds	r3, #48	; 0x30
 801b97a:	9004      	str	r0, [sp, #16]
 801b97c:	4641      	mov	r1, r8
 801b97e:	4658      	mov	r0, fp
 801b980:	9308      	str	r3, [sp, #32]
 801b982:	f000 fc3b 	bl	801c1fc <__mcmp>
 801b986:	463a      	mov	r2, r7
 801b988:	4681      	mov	r9, r0
 801b98a:	4631      	mov	r1, r6
 801b98c:	4620      	mov	r0, r4
 801b98e:	f000 fc51 	bl	801c234 <__mdiff>
 801b992:	68c2      	ldr	r2, [r0, #12]
 801b994:	9b08      	ldr	r3, [sp, #32]
 801b996:	4605      	mov	r5, r0
 801b998:	bb02      	cbnz	r2, 801b9dc <_dtoa_r+0xa7c>
 801b99a:	4601      	mov	r1, r0
 801b99c:	4658      	mov	r0, fp
 801b99e:	f000 fc2d 	bl	801c1fc <__mcmp>
 801b9a2:	9b08      	ldr	r3, [sp, #32]
 801b9a4:	4602      	mov	r2, r0
 801b9a6:	4629      	mov	r1, r5
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801b9ae:	f000 f9e7 	bl	801bd80 <_Bfree>
 801b9b2:	9b05      	ldr	r3, [sp, #20]
 801b9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b9b6:	9d01      	ldr	r5, [sp, #4]
 801b9b8:	ea43 0102 	orr.w	r1, r3, r2
 801b9bc:	9b06      	ldr	r3, [sp, #24]
 801b9be:	430b      	orrs	r3, r1
 801b9c0:	9b08      	ldr	r3, [sp, #32]
 801b9c2:	d10d      	bne.n	801b9e0 <_dtoa_r+0xa80>
 801b9c4:	2b39      	cmp	r3, #57	; 0x39
 801b9c6:	d029      	beq.n	801ba1c <_dtoa_r+0xabc>
 801b9c8:	f1b9 0f00 	cmp.w	r9, #0
 801b9cc:	dd01      	ble.n	801b9d2 <_dtoa_r+0xa72>
 801b9ce:	9b04      	ldr	r3, [sp, #16]
 801b9d0:	3331      	adds	r3, #49	; 0x31
 801b9d2:	9a02      	ldr	r2, [sp, #8]
 801b9d4:	7013      	strb	r3, [r2, #0]
 801b9d6:	e774      	b.n	801b8c2 <_dtoa_r+0x962>
 801b9d8:	4638      	mov	r0, r7
 801b9da:	e7b9      	b.n	801b950 <_dtoa_r+0x9f0>
 801b9dc:	2201      	movs	r2, #1
 801b9de:	e7e2      	b.n	801b9a6 <_dtoa_r+0xa46>
 801b9e0:	f1b9 0f00 	cmp.w	r9, #0
 801b9e4:	db06      	blt.n	801b9f4 <_dtoa_r+0xa94>
 801b9e6:	9905      	ldr	r1, [sp, #20]
 801b9e8:	ea41 0909 	orr.w	r9, r1, r9
 801b9ec:	9906      	ldr	r1, [sp, #24]
 801b9ee:	ea59 0101 	orrs.w	r1, r9, r1
 801b9f2:	d120      	bne.n	801ba36 <_dtoa_r+0xad6>
 801b9f4:	2a00      	cmp	r2, #0
 801b9f6:	ddec      	ble.n	801b9d2 <_dtoa_r+0xa72>
 801b9f8:	4659      	mov	r1, fp
 801b9fa:	2201      	movs	r2, #1
 801b9fc:	4620      	mov	r0, r4
 801b9fe:	9301      	str	r3, [sp, #4]
 801ba00:	f000 fb90 	bl	801c124 <__lshift>
 801ba04:	4631      	mov	r1, r6
 801ba06:	4683      	mov	fp, r0
 801ba08:	f000 fbf8 	bl	801c1fc <__mcmp>
 801ba0c:	2800      	cmp	r0, #0
 801ba0e:	9b01      	ldr	r3, [sp, #4]
 801ba10:	dc02      	bgt.n	801ba18 <_dtoa_r+0xab8>
 801ba12:	d1de      	bne.n	801b9d2 <_dtoa_r+0xa72>
 801ba14:	07da      	lsls	r2, r3, #31
 801ba16:	d5dc      	bpl.n	801b9d2 <_dtoa_r+0xa72>
 801ba18:	2b39      	cmp	r3, #57	; 0x39
 801ba1a:	d1d8      	bne.n	801b9ce <_dtoa_r+0xa6e>
 801ba1c:	9a02      	ldr	r2, [sp, #8]
 801ba1e:	2339      	movs	r3, #57	; 0x39
 801ba20:	7013      	strb	r3, [r2, #0]
 801ba22:	462b      	mov	r3, r5
 801ba24:	461d      	mov	r5, r3
 801ba26:	3b01      	subs	r3, #1
 801ba28:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801ba2c:	2a39      	cmp	r2, #57	; 0x39
 801ba2e:	d050      	beq.n	801bad2 <_dtoa_r+0xb72>
 801ba30:	3201      	adds	r2, #1
 801ba32:	701a      	strb	r2, [r3, #0]
 801ba34:	e745      	b.n	801b8c2 <_dtoa_r+0x962>
 801ba36:	2a00      	cmp	r2, #0
 801ba38:	dd03      	ble.n	801ba42 <_dtoa_r+0xae2>
 801ba3a:	2b39      	cmp	r3, #57	; 0x39
 801ba3c:	d0ee      	beq.n	801ba1c <_dtoa_r+0xabc>
 801ba3e:	3301      	adds	r3, #1
 801ba40:	e7c7      	b.n	801b9d2 <_dtoa_r+0xa72>
 801ba42:	9a01      	ldr	r2, [sp, #4]
 801ba44:	9907      	ldr	r1, [sp, #28]
 801ba46:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ba4a:	428a      	cmp	r2, r1
 801ba4c:	d02a      	beq.n	801baa4 <_dtoa_r+0xb44>
 801ba4e:	4659      	mov	r1, fp
 801ba50:	2300      	movs	r3, #0
 801ba52:	220a      	movs	r2, #10
 801ba54:	4620      	mov	r0, r4
 801ba56:	f000 f9b5 	bl	801bdc4 <__multadd>
 801ba5a:	45b8      	cmp	r8, r7
 801ba5c:	4683      	mov	fp, r0
 801ba5e:	f04f 0300 	mov.w	r3, #0
 801ba62:	f04f 020a 	mov.w	r2, #10
 801ba66:	4641      	mov	r1, r8
 801ba68:	4620      	mov	r0, r4
 801ba6a:	d107      	bne.n	801ba7c <_dtoa_r+0xb1c>
 801ba6c:	f000 f9aa 	bl	801bdc4 <__multadd>
 801ba70:	4680      	mov	r8, r0
 801ba72:	4607      	mov	r7, r0
 801ba74:	9b01      	ldr	r3, [sp, #4]
 801ba76:	3301      	adds	r3, #1
 801ba78:	9301      	str	r3, [sp, #4]
 801ba7a:	e775      	b.n	801b968 <_dtoa_r+0xa08>
 801ba7c:	f000 f9a2 	bl	801bdc4 <__multadd>
 801ba80:	4639      	mov	r1, r7
 801ba82:	4680      	mov	r8, r0
 801ba84:	2300      	movs	r3, #0
 801ba86:	220a      	movs	r2, #10
 801ba88:	4620      	mov	r0, r4
 801ba8a:	f000 f99b 	bl	801bdc4 <__multadd>
 801ba8e:	4607      	mov	r7, r0
 801ba90:	e7f0      	b.n	801ba74 <_dtoa_r+0xb14>
 801ba92:	f1b9 0f00 	cmp.w	r9, #0
 801ba96:	9a00      	ldr	r2, [sp, #0]
 801ba98:	bfcc      	ite	gt
 801ba9a:	464d      	movgt	r5, r9
 801ba9c:	2501      	movle	r5, #1
 801ba9e:	4415      	add	r5, r2
 801baa0:	f04f 0800 	mov.w	r8, #0
 801baa4:	4659      	mov	r1, fp
 801baa6:	2201      	movs	r2, #1
 801baa8:	4620      	mov	r0, r4
 801baaa:	9301      	str	r3, [sp, #4]
 801baac:	f000 fb3a 	bl	801c124 <__lshift>
 801bab0:	4631      	mov	r1, r6
 801bab2:	4683      	mov	fp, r0
 801bab4:	f000 fba2 	bl	801c1fc <__mcmp>
 801bab8:	2800      	cmp	r0, #0
 801baba:	dcb2      	bgt.n	801ba22 <_dtoa_r+0xac2>
 801babc:	d102      	bne.n	801bac4 <_dtoa_r+0xb64>
 801babe:	9b01      	ldr	r3, [sp, #4]
 801bac0:	07db      	lsls	r3, r3, #31
 801bac2:	d4ae      	bmi.n	801ba22 <_dtoa_r+0xac2>
 801bac4:	462b      	mov	r3, r5
 801bac6:	461d      	mov	r5, r3
 801bac8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bacc:	2a30      	cmp	r2, #48	; 0x30
 801bace:	d0fa      	beq.n	801bac6 <_dtoa_r+0xb66>
 801bad0:	e6f7      	b.n	801b8c2 <_dtoa_r+0x962>
 801bad2:	9a00      	ldr	r2, [sp, #0]
 801bad4:	429a      	cmp	r2, r3
 801bad6:	d1a5      	bne.n	801ba24 <_dtoa_r+0xac4>
 801bad8:	f10a 0a01 	add.w	sl, sl, #1
 801badc:	2331      	movs	r3, #49	; 0x31
 801bade:	e779      	b.n	801b9d4 <_dtoa_r+0xa74>
 801bae0:	4b13      	ldr	r3, [pc, #76]	; (801bb30 <_dtoa_r+0xbd0>)
 801bae2:	f7ff baaf 	b.w	801b044 <_dtoa_r+0xe4>
 801bae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bae8:	2b00      	cmp	r3, #0
 801baea:	f47f aa86 	bne.w	801affa <_dtoa_r+0x9a>
 801baee:	4b11      	ldr	r3, [pc, #68]	; (801bb34 <_dtoa_r+0xbd4>)
 801baf0:	f7ff baa8 	b.w	801b044 <_dtoa_r+0xe4>
 801baf4:	f1b9 0f00 	cmp.w	r9, #0
 801baf8:	dc03      	bgt.n	801bb02 <_dtoa_r+0xba2>
 801bafa:	9b05      	ldr	r3, [sp, #20]
 801bafc:	2b02      	cmp	r3, #2
 801bafe:	f73f aec9 	bgt.w	801b894 <_dtoa_r+0x934>
 801bb02:	9d00      	ldr	r5, [sp, #0]
 801bb04:	4631      	mov	r1, r6
 801bb06:	4658      	mov	r0, fp
 801bb08:	f7ff f99c 	bl	801ae44 <quorem>
 801bb0c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801bb10:	f805 3b01 	strb.w	r3, [r5], #1
 801bb14:	9a00      	ldr	r2, [sp, #0]
 801bb16:	1aaa      	subs	r2, r5, r2
 801bb18:	4591      	cmp	r9, r2
 801bb1a:	ddba      	ble.n	801ba92 <_dtoa_r+0xb32>
 801bb1c:	4659      	mov	r1, fp
 801bb1e:	2300      	movs	r3, #0
 801bb20:	220a      	movs	r2, #10
 801bb22:	4620      	mov	r0, r4
 801bb24:	f000 f94e 	bl	801bdc4 <__multadd>
 801bb28:	4683      	mov	fp, r0
 801bb2a:	e7eb      	b.n	801bb04 <_dtoa_r+0xba4>
 801bb2c:	08022218 	.word	0x08022218
 801bb30:	0802214c 	.word	0x0802214c
 801bb34:	08022195 	.word	0x08022195

0801bb38 <__sflush_r>:
 801bb38:	898a      	ldrh	r2, [r1, #12]
 801bb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb3e:	4605      	mov	r5, r0
 801bb40:	0710      	lsls	r0, r2, #28
 801bb42:	460c      	mov	r4, r1
 801bb44:	d458      	bmi.n	801bbf8 <__sflush_r+0xc0>
 801bb46:	684b      	ldr	r3, [r1, #4]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	dc05      	bgt.n	801bb58 <__sflush_r+0x20>
 801bb4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	dc02      	bgt.n	801bb58 <__sflush_r+0x20>
 801bb52:	2000      	movs	r0, #0
 801bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb5a:	2e00      	cmp	r6, #0
 801bb5c:	d0f9      	beq.n	801bb52 <__sflush_r+0x1a>
 801bb5e:	2300      	movs	r3, #0
 801bb60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bb64:	682f      	ldr	r7, [r5, #0]
 801bb66:	602b      	str	r3, [r5, #0]
 801bb68:	d032      	beq.n	801bbd0 <__sflush_r+0x98>
 801bb6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bb6c:	89a3      	ldrh	r3, [r4, #12]
 801bb6e:	075a      	lsls	r2, r3, #29
 801bb70:	d505      	bpl.n	801bb7e <__sflush_r+0x46>
 801bb72:	6863      	ldr	r3, [r4, #4]
 801bb74:	1ac0      	subs	r0, r0, r3
 801bb76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bb78:	b10b      	cbz	r3, 801bb7e <__sflush_r+0x46>
 801bb7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bb7c:	1ac0      	subs	r0, r0, r3
 801bb7e:	2300      	movs	r3, #0
 801bb80:	4602      	mov	r2, r0
 801bb82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb84:	6a21      	ldr	r1, [r4, #32]
 801bb86:	4628      	mov	r0, r5
 801bb88:	47b0      	blx	r6
 801bb8a:	1c43      	adds	r3, r0, #1
 801bb8c:	89a3      	ldrh	r3, [r4, #12]
 801bb8e:	d106      	bne.n	801bb9e <__sflush_r+0x66>
 801bb90:	6829      	ldr	r1, [r5, #0]
 801bb92:	291d      	cmp	r1, #29
 801bb94:	d82c      	bhi.n	801bbf0 <__sflush_r+0xb8>
 801bb96:	4a2a      	ldr	r2, [pc, #168]	; (801bc40 <__sflush_r+0x108>)
 801bb98:	40ca      	lsrs	r2, r1
 801bb9a:	07d6      	lsls	r6, r2, #31
 801bb9c:	d528      	bpl.n	801bbf0 <__sflush_r+0xb8>
 801bb9e:	2200      	movs	r2, #0
 801bba0:	6062      	str	r2, [r4, #4]
 801bba2:	04d9      	lsls	r1, r3, #19
 801bba4:	6922      	ldr	r2, [r4, #16]
 801bba6:	6022      	str	r2, [r4, #0]
 801bba8:	d504      	bpl.n	801bbb4 <__sflush_r+0x7c>
 801bbaa:	1c42      	adds	r2, r0, #1
 801bbac:	d101      	bne.n	801bbb2 <__sflush_r+0x7a>
 801bbae:	682b      	ldr	r3, [r5, #0]
 801bbb0:	b903      	cbnz	r3, 801bbb4 <__sflush_r+0x7c>
 801bbb2:	6560      	str	r0, [r4, #84]	; 0x54
 801bbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bbb6:	602f      	str	r7, [r5, #0]
 801bbb8:	2900      	cmp	r1, #0
 801bbba:	d0ca      	beq.n	801bb52 <__sflush_r+0x1a>
 801bbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bbc0:	4299      	cmp	r1, r3
 801bbc2:	d002      	beq.n	801bbca <__sflush_r+0x92>
 801bbc4:	4628      	mov	r0, r5
 801bbc6:	f7fe fad1 	bl	801a16c <_free_r>
 801bbca:	2000      	movs	r0, #0
 801bbcc:	6360      	str	r0, [r4, #52]	; 0x34
 801bbce:	e7c1      	b.n	801bb54 <__sflush_r+0x1c>
 801bbd0:	6a21      	ldr	r1, [r4, #32]
 801bbd2:	2301      	movs	r3, #1
 801bbd4:	4628      	mov	r0, r5
 801bbd6:	47b0      	blx	r6
 801bbd8:	1c41      	adds	r1, r0, #1
 801bbda:	d1c7      	bne.n	801bb6c <__sflush_r+0x34>
 801bbdc:	682b      	ldr	r3, [r5, #0]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d0c4      	beq.n	801bb6c <__sflush_r+0x34>
 801bbe2:	2b1d      	cmp	r3, #29
 801bbe4:	d001      	beq.n	801bbea <__sflush_r+0xb2>
 801bbe6:	2b16      	cmp	r3, #22
 801bbe8:	d101      	bne.n	801bbee <__sflush_r+0xb6>
 801bbea:	602f      	str	r7, [r5, #0]
 801bbec:	e7b1      	b.n	801bb52 <__sflush_r+0x1a>
 801bbee:	89a3      	ldrh	r3, [r4, #12]
 801bbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbf4:	81a3      	strh	r3, [r4, #12]
 801bbf6:	e7ad      	b.n	801bb54 <__sflush_r+0x1c>
 801bbf8:	690f      	ldr	r7, [r1, #16]
 801bbfa:	2f00      	cmp	r7, #0
 801bbfc:	d0a9      	beq.n	801bb52 <__sflush_r+0x1a>
 801bbfe:	0793      	lsls	r3, r2, #30
 801bc00:	680e      	ldr	r6, [r1, #0]
 801bc02:	bf08      	it	eq
 801bc04:	694b      	ldreq	r3, [r1, #20]
 801bc06:	600f      	str	r7, [r1, #0]
 801bc08:	bf18      	it	ne
 801bc0a:	2300      	movne	r3, #0
 801bc0c:	eba6 0807 	sub.w	r8, r6, r7
 801bc10:	608b      	str	r3, [r1, #8]
 801bc12:	f1b8 0f00 	cmp.w	r8, #0
 801bc16:	dd9c      	ble.n	801bb52 <__sflush_r+0x1a>
 801bc18:	6a21      	ldr	r1, [r4, #32]
 801bc1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bc1c:	4643      	mov	r3, r8
 801bc1e:	463a      	mov	r2, r7
 801bc20:	4628      	mov	r0, r5
 801bc22:	47b0      	blx	r6
 801bc24:	2800      	cmp	r0, #0
 801bc26:	dc06      	bgt.n	801bc36 <__sflush_r+0xfe>
 801bc28:	89a3      	ldrh	r3, [r4, #12]
 801bc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bc2e:	81a3      	strh	r3, [r4, #12]
 801bc30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bc34:	e78e      	b.n	801bb54 <__sflush_r+0x1c>
 801bc36:	4407      	add	r7, r0
 801bc38:	eba8 0800 	sub.w	r8, r8, r0
 801bc3c:	e7e9      	b.n	801bc12 <__sflush_r+0xda>
 801bc3e:	bf00      	nop
 801bc40:	20400001 	.word	0x20400001

0801bc44 <_fflush_r>:
 801bc44:	b538      	push	{r3, r4, r5, lr}
 801bc46:	690b      	ldr	r3, [r1, #16]
 801bc48:	4605      	mov	r5, r0
 801bc4a:	460c      	mov	r4, r1
 801bc4c:	b913      	cbnz	r3, 801bc54 <_fflush_r+0x10>
 801bc4e:	2500      	movs	r5, #0
 801bc50:	4628      	mov	r0, r5
 801bc52:	bd38      	pop	{r3, r4, r5, pc}
 801bc54:	b118      	cbz	r0, 801bc5e <_fflush_r+0x1a>
 801bc56:	6983      	ldr	r3, [r0, #24]
 801bc58:	b90b      	cbnz	r3, 801bc5e <_fflush_r+0x1a>
 801bc5a:	f7fe f981 	bl	8019f60 <__sinit>
 801bc5e:	4b14      	ldr	r3, [pc, #80]	; (801bcb0 <_fflush_r+0x6c>)
 801bc60:	429c      	cmp	r4, r3
 801bc62:	d11b      	bne.n	801bc9c <_fflush_r+0x58>
 801bc64:	686c      	ldr	r4, [r5, #4]
 801bc66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc6a:	2b00      	cmp	r3, #0
 801bc6c:	d0ef      	beq.n	801bc4e <_fflush_r+0xa>
 801bc6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bc70:	07d0      	lsls	r0, r2, #31
 801bc72:	d404      	bmi.n	801bc7e <_fflush_r+0x3a>
 801bc74:	0599      	lsls	r1, r3, #22
 801bc76:	d402      	bmi.n	801bc7e <_fflush_r+0x3a>
 801bc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc7a:	f7fe fa4e 	bl	801a11a <__retarget_lock_acquire_recursive>
 801bc7e:	4628      	mov	r0, r5
 801bc80:	4621      	mov	r1, r4
 801bc82:	f7ff ff59 	bl	801bb38 <__sflush_r>
 801bc86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bc88:	07da      	lsls	r2, r3, #31
 801bc8a:	4605      	mov	r5, r0
 801bc8c:	d4e0      	bmi.n	801bc50 <_fflush_r+0xc>
 801bc8e:	89a3      	ldrh	r3, [r4, #12]
 801bc90:	059b      	lsls	r3, r3, #22
 801bc92:	d4dd      	bmi.n	801bc50 <_fflush_r+0xc>
 801bc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc96:	f7fe fa41 	bl	801a11c <__retarget_lock_release_recursive>
 801bc9a:	e7d9      	b.n	801bc50 <_fflush_r+0xc>
 801bc9c:	4b05      	ldr	r3, [pc, #20]	; (801bcb4 <_fflush_r+0x70>)
 801bc9e:	429c      	cmp	r4, r3
 801bca0:	d101      	bne.n	801bca6 <_fflush_r+0x62>
 801bca2:	68ac      	ldr	r4, [r5, #8]
 801bca4:	e7df      	b.n	801bc66 <_fflush_r+0x22>
 801bca6:	4b04      	ldr	r3, [pc, #16]	; (801bcb8 <_fflush_r+0x74>)
 801bca8:	429c      	cmp	r4, r3
 801bcaa:	bf08      	it	eq
 801bcac:	68ec      	ldreq	r4, [r5, #12]
 801bcae:	e7da      	b.n	801bc66 <_fflush_r+0x22>
 801bcb0:	080220f8 	.word	0x080220f8
 801bcb4:	08022118 	.word	0x08022118
 801bcb8:	080220d8 	.word	0x080220d8

0801bcbc <_localeconv_r>:
 801bcbc:	4800      	ldr	r0, [pc, #0]	; (801bcc0 <_localeconv_r+0x4>)
 801bcbe:	4770      	bx	lr
 801bcc0:	200003b4 	.word	0x200003b4

0801bcc4 <_lseek_r>:
 801bcc4:	b538      	push	{r3, r4, r5, lr}
 801bcc6:	4d07      	ldr	r5, [pc, #28]	; (801bce4 <_lseek_r+0x20>)
 801bcc8:	4604      	mov	r4, r0
 801bcca:	4608      	mov	r0, r1
 801bccc:	4611      	mov	r1, r2
 801bcce:	2200      	movs	r2, #0
 801bcd0:	602a      	str	r2, [r5, #0]
 801bcd2:	461a      	mov	r2, r3
 801bcd4:	f7e9 fee0 	bl	8005a98 <_lseek>
 801bcd8:	1c43      	adds	r3, r0, #1
 801bcda:	d102      	bne.n	801bce2 <_lseek_r+0x1e>
 801bcdc:	682b      	ldr	r3, [r5, #0]
 801bcde:	b103      	cbz	r3, 801bce2 <_lseek_r+0x1e>
 801bce0:	6023      	str	r3, [r4, #0]
 801bce2:	bd38      	pop	{r3, r4, r5, pc}
 801bce4:	20016a54 	.word	0x20016a54

0801bce8 <__malloc_lock>:
 801bce8:	4801      	ldr	r0, [pc, #4]	; (801bcf0 <__malloc_lock+0x8>)
 801bcea:	f7fe ba16 	b.w	801a11a <__retarget_lock_acquire_recursive>
 801bcee:	bf00      	nop
 801bcf0:	20016a4c 	.word	0x20016a4c

0801bcf4 <__malloc_unlock>:
 801bcf4:	4801      	ldr	r0, [pc, #4]	; (801bcfc <__malloc_unlock+0x8>)
 801bcf6:	f7fe ba11 	b.w	801a11c <__retarget_lock_release_recursive>
 801bcfa:	bf00      	nop
 801bcfc:	20016a4c 	.word	0x20016a4c

0801bd00 <_Balloc>:
 801bd00:	b570      	push	{r4, r5, r6, lr}
 801bd02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bd04:	4604      	mov	r4, r0
 801bd06:	460d      	mov	r5, r1
 801bd08:	b976      	cbnz	r6, 801bd28 <_Balloc+0x28>
 801bd0a:	2010      	movs	r0, #16
 801bd0c:	f7fe fa08 	bl	801a120 <malloc>
 801bd10:	4602      	mov	r2, r0
 801bd12:	6260      	str	r0, [r4, #36]	; 0x24
 801bd14:	b920      	cbnz	r0, 801bd20 <_Balloc+0x20>
 801bd16:	4b18      	ldr	r3, [pc, #96]	; (801bd78 <_Balloc+0x78>)
 801bd18:	4818      	ldr	r0, [pc, #96]	; (801bd7c <_Balloc+0x7c>)
 801bd1a:	2166      	movs	r1, #102	; 0x66
 801bd1c:	f000 fcea 	bl	801c6f4 <__assert_func>
 801bd20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bd24:	6006      	str	r6, [r0, #0]
 801bd26:	60c6      	str	r6, [r0, #12]
 801bd28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801bd2a:	68f3      	ldr	r3, [r6, #12]
 801bd2c:	b183      	cbz	r3, 801bd50 <_Balloc+0x50>
 801bd2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bd30:	68db      	ldr	r3, [r3, #12]
 801bd32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801bd36:	b9b8      	cbnz	r0, 801bd68 <_Balloc+0x68>
 801bd38:	2101      	movs	r1, #1
 801bd3a:	fa01 f605 	lsl.w	r6, r1, r5
 801bd3e:	1d72      	adds	r2, r6, #5
 801bd40:	0092      	lsls	r2, r2, #2
 801bd42:	4620      	mov	r0, r4
 801bd44:	f000 fb5a 	bl	801c3fc <_calloc_r>
 801bd48:	b160      	cbz	r0, 801bd64 <_Balloc+0x64>
 801bd4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801bd4e:	e00e      	b.n	801bd6e <_Balloc+0x6e>
 801bd50:	2221      	movs	r2, #33	; 0x21
 801bd52:	2104      	movs	r1, #4
 801bd54:	4620      	mov	r0, r4
 801bd56:	f000 fb51 	bl	801c3fc <_calloc_r>
 801bd5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bd5c:	60f0      	str	r0, [r6, #12]
 801bd5e:	68db      	ldr	r3, [r3, #12]
 801bd60:	2b00      	cmp	r3, #0
 801bd62:	d1e4      	bne.n	801bd2e <_Balloc+0x2e>
 801bd64:	2000      	movs	r0, #0
 801bd66:	bd70      	pop	{r4, r5, r6, pc}
 801bd68:	6802      	ldr	r2, [r0, #0]
 801bd6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801bd6e:	2300      	movs	r3, #0
 801bd70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801bd74:	e7f7      	b.n	801bd66 <_Balloc+0x66>
 801bd76:	bf00      	nop
 801bd78:	080221a2 	.word	0x080221a2
 801bd7c:	08022229 	.word	0x08022229

0801bd80 <_Bfree>:
 801bd80:	b570      	push	{r4, r5, r6, lr}
 801bd82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801bd84:	4605      	mov	r5, r0
 801bd86:	460c      	mov	r4, r1
 801bd88:	b976      	cbnz	r6, 801bda8 <_Bfree+0x28>
 801bd8a:	2010      	movs	r0, #16
 801bd8c:	f7fe f9c8 	bl	801a120 <malloc>
 801bd90:	4602      	mov	r2, r0
 801bd92:	6268      	str	r0, [r5, #36]	; 0x24
 801bd94:	b920      	cbnz	r0, 801bda0 <_Bfree+0x20>
 801bd96:	4b09      	ldr	r3, [pc, #36]	; (801bdbc <_Bfree+0x3c>)
 801bd98:	4809      	ldr	r0, [pc, #36]	; (801bdc0 <_Bfree+0x40>)
 801bd9a:	218a      	movs	r1, #138	; 0x8a
 801bd9c:	f000 fcaa 	bl	801c6f4 <__assert_func>
 801bda0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801bda4:	6006      	str	r6, [r0, #0]
 801bda6:	60c6      	str	r6, [r0, #12]
 801bda8:	b13c      	cbz	r4, 801bdba <_Bfree+0x3a>
 801bdaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801bdac:	6862      	ldr	r2, [r4, #4]
 801bdae:	68db      	ldr	r3, [r3, #12]
 801bdb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bdb4:	6021      	str	r1, [r4, #0]
 801bdb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801bdba:	bd70      	pop	{r4, r5, r6, pc}
 801bdbc:	080221a2 	.word	0x080221a2
 801bdc0:	08022229 	.word	0x08022229

0801bdc4 <__multadd>:
 801bdc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bdc8:	690e      	ldr	r6, [r1, #16]
 801bdca:	4607      	mov	r7, r0
 801bdcc:	4698      	mov	r8, r3
 801bdce:	460c      	mov	r4, r1
 801bdd0:	f101 0014 	add.w	r0, r1, #20
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	6805      	ldr	r5, [r0, #0]
 801bdd8:	b2a9      	uxth	r1, r5
 801bdda:	fb02 8101 	mla	r1, r2, r1, r8
 801bdde:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801bde2:	0c2d      	lsrs	r5, r5, #16
 801bde4:	fb02 c505 	mla	r5, r2, r5, ip
 801bde8:	b289      	uxth	r1, r1
 801bdea:	3301      	adds	r3, #1
 801bdec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801bdf0:	429e      	cmp	r6, r3
 801bdf2:	f840 1b04 	str.w	r1, [r0], #4
 801bdf6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801bdfa:	dcec      	bgt.n	801bdd6 <__multadd+0x12>
 801bdfc:	f1b8 0f00 	cmp.w	r8, #0
 801be00:	d022      	beq.n	801be48 <__multadd+0x84>
 801be02:	68a3      	ldr	r3, [r4, #8]
 801be04:	42b3      	cmp	r3, r6
 801be06:	dc19      	bgt.n	801be3c <__multadd+0x78>
 801be08:	6861      	ldr	r1, [r4, #4]
 801be0a:	4638      	mov	r0, r7
 801be0c:	3101      	adds	r1, #1
 801be0e:	f7ff ff77 	bl	801bd00 <_Balloc>
 801be12:	4605      	mov	r5, r0
 801be14:	b928      	cbnz	r0, 801be22 <__multadd+0x5e>
 801be16:	4602      	mov	r2, r0
 801be18:	4b0d      	ldr	r3, [pc, #52]	; (801be50 <__multadd+0x8c>)
 801be1a:	480e      	ldr	r0, [pc, #56]	; (801be54 <__multadd+0x90>)
 801be1c:	21b5      	movs	r1, #181	; 0xb5
 801be1e:	f000 fc69 	bl	801c6f4 <__assert_func>
 801be22:	6922      	ldr	r2, [r4, #16]
 801be24:	3202      	adds	r2, #2
 801be26:	f104 010c 	add.w	r1, r4, #12
 801be2a:	0092      	lsls	r2, r2, #2
 801be2c:	300c      	adds	r0, #12
 801be2e:	f7fe f987 	bl	801a140 <memcpy>
 801be32:	4621      	mov	r1, r4
 801be34:	4638      	mov	r0, r7
 801be36:	f7ff ffa3 	bl	801bd80 <_Bfree>
 801be3a:	462c      	mov	r4, r5
 801be3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801be40:	3601      	adds	r6, #1
 801be42:	f8c3 8014 	str.w	r8, [r3, #20]
 801be46:	6126      	str	r6, [r4, #16]
 801be48:	4620      	mov	r0, r4
 801be4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be4e:	bf00      	nop
 801be50:	08022218 	.word	0x08022218
 801be54:	08022229 	.word	0x08022229

0801be58 <__hi0bits>:
 801be58:	0c03      	lsrs	r3, r0, #16
 801be5a:	041b      	lsls	r3, r3, #16
 801be5c:	b9d3      	cbnz	r3, 801be94 <__hi0bits+0x3c>
 801be5e:	0400      	lsls	r0, r0, #16
 801be60:	2310      	movs	r3, #16
 801be62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801be66:	bf04      	itt	eq
 801be68:	0200      	lsleq	r0, r0, #8
 801be6a:	3308      	addeq	r3, #8
 801be6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801be70:	bf04      	itt	eq
 801be72:	0100      	lsleq	r0, r0, #4
 801be74:	3304      	addeq	r3, #4
 801be76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801be7a:	bf04      	itt	eq
 801be7c:	0080      	lsleq	r0, r0, #2
 801be7e:	3302      	addeq	r3, #2
 801be80:	2800      	cmp	r0, #0
 801be82:	db05      	blt.n	801be90 <__hi0bits+0x38>
 801be84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801be88:	f103 0301 	add.w	r3, r3, #1
 801be8c:	bf08      	it	eq
 801be8e:	2320      	moveq	r3, #32
 801be90:	4618      	mov	r0, r3
 801be92:	4770      	bx	lr
 801be94:	2300      	movs	r3, #0
 801be96:	e7e4      	b.n	801be62 <__hi0bits+0xa>

0801be98 <__lo0bits>:
 801be98:	6803      	ldr	r3, [r0, #0]
 801be9a:	f013 0207 	ands.w	r2, r3, #7
 801be9e:	4601      	mov	r1, r0
 801bea0:	d00b      	beq.n	801beba <__lo0bits+0x22>
 801bea2:	07da      	lsls	r2, r3, #31
 801bea4:	d424      	bmi.n	801bef0 <__lo0bits+0x58>
 801bea6:	0798      	lsls	r0, r3, #30
 801bea8:	bf49      	itett	mi
 801beaa:	085b      	lsrmi	r3, r3, #1
 801beac:	089b      	lsrpl	r3, r3, #2
 801beae:	2001      	movmi	r0, #1
 801beb0:	600b      	strmi	r3, [r1, #0]
 801beb2:	bf5c      	itt	pl
 801beb4:	600b      	strpl	r3, [r1, #0]
 801beb6:	2002      	movpl	r0, #2
 801beb8:	4770      	bx	lr
 801beba:	b298      	uxth	r0, r3
 801bebc:	b9b0      	cbnz	r0, 801beec <__lo0bits+0x54>
 801bebe:	0c1b      	lsrs	r3, r3, #16
 801bec0:	2010      	movs	r0, #16
 801bec2:	f013 0fff 	tst.w	r3, #255	; 0xff
 801bec6:	bf04      	itt	eq
 801bec8:	0a1b      	lsreq	r3, r3, #8
 801beca:	3008      	addeq	r0, #8
 801becc:	071a      	lsls	r2, r3, #28
 801bece:	bf04      	itt	eq
 801bed0:	091b      	lsreq	r3, r3, #4
 801bed2:	3004      	addeq	r0, #4
 801bed4:	079a      	lsls	r2, r3, #30
 801bed6:	bf04      	itt	eq
 801bed8:	089b      	lsreq	r3, r3, #2
 801beda:	3002      	addeq	r0, #2
 801bedc:	07da      	lsls	r2, r3, #31
 801bede:	d403      	bmi.n	801bee8 <__lo0bits+0x50>
 801bee0:	085b      	lsrs	r3, r3, #1
 801bee2:	f100 0001 	add.w	r0, r0, #1
 801bee6:	d005      	beq.n	801bef4 <__lo0bits+0x5c>
 801bee8:	600b      	str	r3, [r1, #0]
 801beea:	4770      	bx	lr
 801beec:	4610      	mov	r0, r2
 801beee:	e7e8      	b.n	801bec2 <__lo0bits+0x2a>
 801bef0:	2000      	movs	r0, #0
 801bef2:	4770      	bx	lr
 801bef4:	2020      	movs	r0, #32
 801bef6:	4770      	bx	lr

0801bef8 <__i2b>:
 801bef8:	b510      	push	{r4, lr}
 801befa:	460c      	mov	r4, r1
 801befc:	2101      	movs	r1, #1
 801befe:	f7ff feff 	bl	801bd00 <_Balloc>
 801bf02:	4602      	mov	r2, r0
 801bf04:	b928      	cbnz	r0, 801bf12 <__i2b+0x1a>
 801bf06:	4b05      	ldr	r3, [pc, #20]	; (801bf1c <__i2b+0x24>)
 801bf08:	4805      	ldr	r0, [pc, #20]	; (801bf20 <__i2b+0x28>)
 801bf0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801bf0e:	f000 fbf1 	bl	801c6f4 <__assert_func>
 801bf12:	2301      	movs	r3, #1
 801bf14:	6144      	str	r4, [r0, #20]
 801bf16:	6103      	str	r3, [r0, #16]
 801bf18:	bd10      	pop	{r4, pc}
 801bf1a:	bf00      	nop
 801bf1c:	08022218 	.word	0x08022218
 801bf20:	08022229 	.word	0x08022229

0801bf24 <__multiply>:
 801bf24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf28:	4614      	mov	r4, r2
 801bf2a:	690a      	ldr	r2, [r1, #16]
 801bf2c:	6923      	ldr	r3, [r4, #16]
 801bf2e:	429a      	cmp	r2, r3
 801bf30:	bfb8      	it	lt
 801bf32:	460b      	movlt	r3, r1
 801bf34:	460d      	mov	r5, r1
 801bf36:	bfbc      	itt	lt
 801bf38:	4625      	movlt	r5, r4
 801bf3a:	461c      	movlt	r4, r3
 801bf3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801bf40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801bf44:	68ab      	ldr	r3, [r5, #8]
 801bf46:	6869      	ldr	r1, [r5, #4]
 801bf48:	eb0a 0709 	add.w	r7, sl, r9
 801bf4c:	42bb      	cmp	r3, r7
 801bf4e:	b085      	sub	sp, #20
 801bf50:	bfb8      	it	lt
 801bf52:	3101      	addlt	r1, #1
 801bf54:	f7ff fed4 	bl	801bd00 <_Balloc>
 801bf58:	b930      	cbnz	r0, 801bf68 <__multiply+0x44>
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	4b42      	ldr	r3, [pc, #264]	; (801c068 <__multiply+0x144>)
 801bf5e:	4843      	ldr	r0, [pc, #268]	; (801c06c <__multiply+0x148>)
 801bf60:	f240 115d 	movw	r1, #349	; 0x15d
 801bf64:	f000 fbc6 	bl	801c6f4 <__assert_func>
 801bf68:	f100 0614 	add.w	r6, r0, #20
 801bf6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801bf70:	4633      	mov	r3, r6
 801bf72:	2200      	movs	r2, #0
 801bf74:	4543      	cmp	r3, r8
 801bf76:	d31e      	bcc.n	801bfb6 <__multiply+0x92>
 801bf78:	f105 0c14 	add.w	ip, r5, #20
 801bf7c:	f104 0314 	add.w	r3, r4, #20
 801bf80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801bf84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801bf88:	9202      	str	r2, [sp, #8]
 801bf8a:	ebac 0205 	sub.w	r2, ip, r5
 801bf8e:	3a15      	subs	r2, #21
 801bf90:	f022 0203 	bic.w	r2, r2, #3
 801bf94:	3204      	adds	r2, #4
 801bf96:	f105 0115 	add.w	r1, r5, #21
 801bf9a:	458c      	cmp	ip, r1
 801bf9c:	bf38      	it	cc
 801bf9e:	2204      	movcc	r2, #4
 801bfa0:	9201      	str	r2, [sp, #4]
 801bfa2:	9a02      	ldr	r2, [sp, #8]
 801bfa4:	9303      	str	r3, [sp, #12]
 801bfa6:	429a      	cmp	r2, r3
 801bfa8:	d808      	bhi.n	801bfbc <__multiply+0x98>
 801bfaa:	2f00      	cmp	r7, #0
 801bfac:	dc55      	bgt.n	801c05a <__multiply+0x136>
 801bfae:	6107      	str	r7, [r0, #16]
 801bfb0:	b005      	add	sp, #20
 801bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb6:	f843 2b04 	str.w	r2, [r3], #4
 801bfba:	e7db      	b.n	801bf74 <__multiply+0x50>
 801bfbc:	f8b3 a000 	ldrh.w	sl, [r3]
 801bfc0:	f1ba 0f00 	cmp.w	sl, #0
 801bfc4:	d020      	beq.n	801c008 <__multiply+0xe4>
 801bfc6:	f105 0e14 	add.w	lr, r5, #20
 801bfca:	46b1      	mov	r9, r6
 801bfcc:	2200      	movs	r2, #0
 801bfce:	f85e 4b04 	ldr.w	r4, [lr], #4
 801bfd2:	f8d9 b000 	ldr.w	fp, [r9]
 801bfd6:	b2a1      	uxth	r1, r4
 801bfd8:	fa1f fb8b 	uxth.w	fp, fp
 801bfdc:	fb0a b101 	mla	r1, sl, r1, fp
 801bfe0:	4411      	add	r1, r2
 801bfe2:	f8d9 2000 	ldr.w	r2, [r9]
 801bfe6:	0c24      	lsrs	r4, r4, #16
 801bfe8:	0c12      	lsrs	r2, r2, #16
 801bfea:	fb0a 2404 	mla	r4, sl, r4, r2
 801bfee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801bff2:	b289      	uxth	r1, r1
 801bff4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801bff8:	45f4      	cmp	ip, lr
 801bffa:	f849 1b04 	str.w	r1, [r9], #4
 801bffe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801c002:	d8e4      	bhi.n	801bfce <__multiply+0xaa>
 801c004:	9901      	ldr	r1, [sp, #4]
 801c006:	5072      	str	r2, [r6, r1]
 801c008:	9a03      	ldr	r2, [sp, #12]
 801c00a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c00e:	3304      	adds	r3, #4
 801c010:	f1b9 0f00 	cmp.w	r9, #0
 801c014:	d01f      	beq.n	801c056 <__multiply+0x132>
 801c016:	6834      	ldr	r4, [r6, #0]
 801c018:	f105 0114 	add.w	r1, r5, #20
 801c01c:	46b6      	mov	lr, r6
 801c01e:	f04f 0a00 	mov.w	sl, #0
 801c022:	880a      	ldrh	r2, [r1, #0]
 801c024:	f8be b002 	ldrh.w	fp, [lr, #2]
 801c028:	fb09 b202 	mla	r2, r9, r2, fp
 801c02c:	4492      	add	sl, r2
 801c02e:	b2a4      	uxth	r4, r4
 801c030:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801c034:	f84e 4b04 	str.w	r4, [lr], #4
 801c038:	f851 4b04 	ldr.w	r4, [r1], #4
 801c03c:	f8be 2000 	ldrh.w	r2, [lr]
 801c040:	0c24      	lsrs	r4, r4, #16
 801c042:	fb09 2404 	mla	r4, r9, r4, r2
 801c046:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801c04a:	458c      	cmp	ip, r1
 801c04c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801c050:	d8e7      	bhi.n	801c022 <__multiply+0xfe>
 801c052:	9a01      	ldr	r2, [sp, #4]
 801c054:	50b4      	str	r4, [r6, r2]
 801c056:	3604      	adds	r6, #4
 801c058:	e7a3      	b.n	801bfa2 <__multiply+0x7e>
 801c05a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c05e:	2b00      	cmp	r3, #0
 801c060:	d1a5      	bne.n	801bfae <__multiply+0x8a>
 801c062:	3f01      	subs	r7, #1
 801c064:	e7a1      	b.n	801bfaa <__multiply+0x86>
 801c066:	bf00      	nop
 801c068:	08022218 	.word	0x08022218
 801c06c:	08022229 	.word	0x08022229

0801c070 <__pow5mult>:
 801c070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c074:	4615      	mov	r5, r2
 801c076:	f012 0203 	ands.w	r2, r2, #3
 801c07a:	4606      	mov	r6, r0
 801c07c:	460f      	mov	r7, r1
 801c07e:	d007      	beq.n	801c090 <__pow5mult+0x20>
 801c080:	4c25      	ldr	r4, [pc, #148]	; (801c118 <__pow5mult+0xa8>)
 801c082:	3a01      	subs	r2, #1
 801c084:	2300      	movs	r3, #0
 801c086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c08a:	f7ff fe9b 	bl	801bdc4 <__multadd>
 801c08e:	4607      	mov	r7, r0
 801c090:	10ad      	asrs	r5, r5, #2
 801c092:	d03d      	beq.n	801c110 <__pow5mult+0xa0>
 801c094:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c096:	b97c      	cbnz	r4, 801c0b8 <__pow5mult+0x48>
 801c098:	2010      	movs	r0, #16
 801c09a:	f7fe f841 	bl	801a120 <malloc>
 801c09e:	4602      	mov	r2, r0
 801c0a0:	6270      	str	r0, [r6, #36]	; 0x24
 801c0a2:	b928      	cbnz	r0, 801c0b0 <__pow5mult+0x40>
 801c0a4:	4b1d      	ldr	r3, [pc, #116]	; (801c11c <__pow5mult+0xac>)
 801c0a6:	481e      	ldr	r0, [pc, #120]	; (801c120 <__pow5mult+0xb0>)
 801c0a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c0ac:	f000 fb22 	bl	801c6f4 <__assert_func>
 801c0b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c0b4:	6004      	str	r4, [r0, #0]
 801c0b6:	60c4      	str	r4, [r0, #12]
 801c0b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c0bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c0c0:	b94c      	cbnz	r4, 801c0d6 <__pow5mult+0x66>
 801c0c2:	f240 2171 	movw	r1, #625	; 0x271
 801c0c6:	4630      	mov	r0, r6
 801c0c8:	f7ff ff16 	bl	801bef8 <__i2b>
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	f8c8 0008 	str.w	r0, [r8, #8]
 801c0d2:	4604      	mov	r4, r0
 801c0d4:	6003      	str	r3, [r0, #0]
 801c0d6:	f04f 0900 	mov.w	r9, #0
 801c0da:	07eb      	lsls	r3, r5, #31
 801c0dc:	d50a      	bpl.n	801c0f4 <__pow5mult+0x84>
 801c0de:	4639      	mov	r1, r7
 801c0e0:	4622      	mov	r2, r4
 801c0e2:	4630      	mov	r0, r6
 801c0e4:	f7ff ff1e 	bl	801bf24 <__multiply>
 801c0e8:	4639      	mov	r1, r7
 801c0ea:	4680      	mov	r8, r0
 801c0ec:	4630      	mov	r0, r6
 801c0ee:	f7ff fe47 	bl	801bd80 <_Bfree>
 801c0f2:	4647      	mov	r7, r8
 801c0f4:	106d      	asrs	r5, r5, #1
 801c0f6:	d00b      	beq.n	801c110 <__pow5mult+0xa0>
 801c0f8:	6820      	ldr	r0, [r4, #0]
 801c0fa:	b938      	cbnz	r0, 801c10c <__pow5mult+0x9c>
 801c0fc:	4622      	mov	r2, r4
 801c0fe:	4621      	mov	r1, r4
 801c100:	4630      	mov	r0, r6
 801c102:	f7ff ff0f 	bl	801bf24 <__multiply>
 801c106:	6020      	str	r0, [r4, #0]
 801c108:	f8c0 9000 	str.w	r9, [r0]
 801c10c:	4604      	mov	r4, r0
 801c10e:	e7e4      	b.n	801c0da <__pow5mult+0x6a>
 801c110:	4638      	mov	r0, r7
 801c112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c116:	bf00      	nop
 801c118:	08022380 	.word	0x08022380
 801c11c:	080221a2 	.word	0x080221a2
 801c120:	08022229 	.word	0x08022229

0801c124 <__lshift>:
 801c124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c128:	460c      	mov	r4, r1
 801c12a:	6849      	ldr	r1, [r1, #4]
 801c12c:	6923      	ldr	r3, [r4, #16]
 801c12e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c132:	68a3      	ldr	r3, [r4, #8]
 801c134:	4607      	mov	r7, r0
 801c136:	4691      	mov	r9, r2
 801c138:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c13c:	f108 0601 	add.w	r6, r8, #1
 801c140:	42b3      	cmp	r3, r6
 801c142:	db0b      	blt.n	801c15c <__lshift+0x38>
 801c144:	4638      	mov	r0, r7
 801c146:	f7ff fddb 	bl	801bd00 <_Balloc>
 801c14a:	4605      	mov	r5, r0
 801c14c:	b948      	cbnz	r0, 801c162 <__lshift+0x3e>
 801c14e:	4602      	mov	r2, r0
 801c150:	4b28      	ldr	r3, [pc, #160]	; (801c1f4 <__lshift+0xd0>)
 801c152:	4829      	ldr	r0, [pc, #164]	; (801c1f8 <__lshift+0xd4>)
 801c154:	f240 11d9 	movw	r1, #473	; 0x1d9
 801c158:	f000 facc 	bl	801c6f4 <__assert_func>
 801c15c:	3101      	adds	r1, #1
 801c15e:	005b      	lsls	r3, r3, #1
 801c160:	e7ee      	b.n	801c140 <__lshift+0x1c>
 801c162:	2300      	movs	r3, #0
 801c164:	f100 0114 	add.w	r1, r0, #20
 801c168:	f100 0210 	add.w	r2, r0, #16
 801c16c:	4618      	mov	r0, r3
 801c16e:	4553      	cmp	r3, sl
 801c170:	db33      	blt.n	801c1da <__lshift+0xb6>
 801c172:	6920      	ldr	r0, [r4, #16]
 801c174:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c178:	f104 0314 	add.w	r3, r4, #20
 801c17c:	f019 091f 	ands.w	r9, r9, #31
 801c180:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c184:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c188:	d02b      	beq.n	801c1e2 <__lshift+0xbe>
 801c18a:	f1c9 0e20 	rsb	lr, r9, #32
 801c18e:	468a      	mov	sl, r1
 801c190:	2200      	movs	r2, #0
 801c192:	6818      	ldr	r0, [r3, #0]
 801c194:	fa00 f009 	lsl.w	r0, r0, r9
 801c198:	4302      	orrs	r2, r0
 801c19a:	f84a 2b04 	str.w	r2, [sl], #4
 801c19e:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1a2:	459c      	cmp	ip, r3
 801c1a4:	fa22 f20e 	lsr.w	r2, r2, lr
 801c1a8:	d8f3      	bhi.n	801c192 <__lshift+0x6e>
 801c1aa:	ebac 0304 	sub.w	r3, ip, r4
 801c1ae:	3b15      	subs	r3, #21
 801c1b0:	f023 0303 	bic.w	r3, r3, #3
 801c1b4:	3304      	adds	r3, #4
 801c1b6:	f104 0015 	add.w	r0, r4, #21
 801c1ba:	4584      	cmp	ip, r0
 801c1bc:	bf38      	it	cc
 801c1be:	2304      	movcc	r3, #4
 801c1c0:	50ca      	str	r2, [r1, r3]
 801c1c2:	b10a      	cbz	r2, 801c1c8 <__lshift+0xa4>
 801c1c4:	f108 0602 	add.w	r6, r8, #2
 801c1c8:	3e01      	subs	r6, #1
 801c1ca:	4638      	mov	r0, r7
 801c1cc:	612e      	str	r6, [r5, #16]
 801c1ce:	4621      	mov	r1, r4
 801c1d0:	f7ff fdd6 	bl	801bd80 <_Bfree>
 801c1d4:	4628      	mov	r0, r5
 801c1d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c1da:	f842 0f04 	str.w	r0, [r2, #4]!
 801c1de:	3301      	adds	r3, #1
 801c1e0:	e7c5      	b.n	801c16e <__lshift+0x4a>
 801c1e2:	3904      	subs	r1, #4
 801c1e4:	f853 2b04 	ldr.w	r2, [r3], #4
 801c1e8:	f841 2f04 	str.w	r2, [r1, #4]!
 801c1ec:	459c      	cmp	ip, r3
 801c1ee:	d8f9      	bhi.n	801c1e4 <__lshift+0xc0>
 801c1f0:	e7ea      	b.n	801c1c8 <__lshift+0xa4>
 801c1f2:	bf00      	nop
 801c1f4:	08022218 	.word	0x08022218
 801c1f8:	08022229 	.word	0x08022229

0801c1fc <__mcmp>:
 801c1fc:	b530      	push	{r4, r5, lr}
 801c1fe:	6902      	ldr	r2, [r0, #16]
 801c200:	690c      	ldr	r4, [r1, #16]
 801c202:	1b12      	subs	r2, r2, r4
 801c204:	d10e      	bne.n	801c224 <__mcmp+0x28>
 801c206:	f100 0314 	add.w	r3, r0, #20
 801c20a:	3114      	adds	r1, #20
 801c20c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801c210:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801c214:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801c218:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801c21c:	42a5      	cmp	r5, r4
 801c21e:	d003      	beq.n	801c228 <__mcmp+0x2c>
 801c220:	d305      	bcc.n	801c22e <__mcmp+0x32>
 801c222:	2201      	movs	r2, #1
 801c224:	4610      	mov	r0, r2
 801c226:	bd30      	pop	{r4, r5, pc}
 801c228:	4283      	cmp	r3, r0
 801c22a:	d3f3      	bcc.n	801c214 <__mcmp+0x18>
 801c22c:	e7fa      	b.n	801c224 <__mcmp+0x28>
 801c22e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c232:	e7f7      	b.n	801c224 <__mcmp+0x28>

0801c234 <__mdiff>:
 801c234:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c238:	460c      	mov	r4, r1
 801c23a:	4606      	mov	r6, r0
 801c23c:	4611      	mov	r1, r2
 801c23e:	4620      	mov	r0, r4
 801c240:	4617      	mov	r7, r2
 801c242:	f7ff ffdb 	bl	801c1fc <__mcmp>
 801c246:	1e05      	subs	r5, r0, #0
 801c248:	d110      	bne.n	801c26c <__mdiff+0x38>
 801c24a:	4629      	mov	r1, r5
 801c24c:	4630      	mov	r0, r6
 801c24e:	f7ff fd57 	bl	801bd00 <_Balloc>
 801c252:	b930      	cbnz	r0, 801c262 <__mdiff+0x2e>
 801c254:	4b39      	ldr	r3, [pc, #228]	; (801c33c <__mdiff+0x108>)
 801c256:	4602      	mov	r2, r0
 801c258:	f240 2132 	movw	r1, #562	; 0x232
 801c25c:	4838      	ldr	r0, [pc, #224]	; (801c340 <__mdiff+0x10c>)
 801c25e:	f000 fa49 	bl	801c6f4 <__assert_func>
 801c262:	2301      	movs	r3, #1
 801c264:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801c268:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c26c:	bfa4      	itt	ge
 801c26e:	463b      	movge	r3, r7
 801c270:	4627      	movge	r7, r4
 801c272:	4630      	mov	r0, r6
 801c274:	6879      	ldr	r1, [r7, #4]
 801c276:	bfa6      	itte	ge
 801c278:	461c      	movge	r4, r3
 801c27a:	2500      	movge	r5, #0
 801c27c:	2501      	movlt	r5, #1
 801c27e:	f7ff fd3f 	bl	801bd00 <_Balloc>
 801c282:	b920      	cbnz	r0, 801c28e <__mdiff+0x5a>
 801c284:	4b2d      	ldr	r3, [pc, #180]	; (801c33c <__mdiff+0x108>)
 801c286:	4602      	mov	r2, r0
 801c288:	f44f 7110 	mov.w	r1, #576	; 0x240
 801c28c:	e7e6      	b.n	801c25c <__mdiff+0x28>
 801c28e:	693e      	ldr	r6, [r7, #16]
 801c290:	60c5      	str	r5, [r0, #12]
 801c292:	6925      	ldr	r5, [r4, #16]
 801c294:	f107 0114 	add.w	r1, r7, #20
 801c298:	f104 0914 	add.w	r9, r4, #20
 801c29c:	f100 0e14 	add.w	lr, r0, #20
 801c2a0:	f107 0210 	add.w	r2, r7, #16
 801c2a4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801c2a8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801c2ac:	46f2      	mov	sl, lr
 801c2ae:	2700      	movs	r7, #0
 801c2b0:	f859 3b04 	ldr.w	r3, [r9], #4
 801c2b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801c2b8:	fa1f f883 	uxth.w	r8, r3
 801c2bc:	fa17 f78b 	uxtah	r7, r7, fp
 801c2c0:	0c1b      	lsrs	r3, r3, #16
 801c2c2:	eba7 0808 	sub.w	r8, r7, r8
 801c2c6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801c2ca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801c2ce:	fa1f f888 	uxth.w	r8, r8
 801c2d2:	141f      	asrs	r7, r3, #16
 801c2d4:	454d      	cmp	r5, r9
 801c2d6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801c2da:	f84a 3b04 	str.w	r3, [sl], #4
 801c2de:	d8e7      	bhi.n	801c2b0 <__mdiff+0x7c>
 801c2e0:	1b2b      	subs	r3, r5, r4
 801c2e2:	3b15      	subs	r3, #21
 801c2e4:	f023 0303 	bic.w	r3, r3, #3
 801c2e8:	3304      	adds	r3, #4
 801c2ea:	3415      	adds	r4, #21
 801c2ec:	42a5      	cmp	r5, r4
 801c2ee:	bf38      	it	cc
 801c2f0:	2304      	movcc	r3, #4
 801c2f2:	4419      	add	r1, r3
 801c2f4:	4473      	add	r3, lr
 801c2f6:	469e      	mov	lr, r3
 801c2f8:	460d      	mov	r5, r1
 801c2fa:	4565      	cmp	r5, ip
 801c2fc:	d30e      	bcc.n	801c31c <__mdiff+0xe8>
 801c2fe:	f10c 0203 	add.w	r2, ip, #3
 801c302:	1a52      	subs	r2, r2, r1
 801c304:	f022 0203 	bic.w	r2, r2, #3
 801c308:	3903      	subs	r1, #3
 801c30a:	458c      	cmp	ip, r1
 801c30c:	bf38      	it	cc
 801c30e:	2200      	movcc	r2, #0
 801c310:	441a      	add	r2, r3
 801c312:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801c316:	b17b      	cbz	r3, 801c338 <__mdiff+0x104>
 801c318:	6106      	str	r6, [r0, #16]
 801c31a:	e7a5      	b.n	801c268 <__mdiff+0x34>
 801c31c:	f855 8b04 	ldr.w	r8, [r5], #4
 801c320:	fa17 f488 	uxtah	r4, r7, r8
 801c324:	1422      	asrs	r2, r4, #16
 801c326:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801c32a:	b2a4      	uxth	r4, r4
 801c32c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801c330:	f84e 4b04 	str.w	r4, [lr], #4
 801c334:	1417      	asrs	r7, r2, #16
 801c336:	e7e0      	b.n	801c2fa <__mdiff+0xc6>
 801c338:	3e01      	subs	r6, #1
 801c33a:	e7ea      	b.n	801c312 <__mdiff+0xde>
 801c33c:	08022218 	.word	0x08022218
 801c340:	08022229 	.word	0x08022229

0801c344 <__d2b>:
 801c344:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c348:	4689      	mov	r9, r1
 801c34a:	2101      	movs	r1, #1
 801c34c:	ec57 6b10 	vmov	r6, r7, d0
 801c350:	4690      	mov	r8, r2
 801c352:	f7ff fcd5 	bl	801bd00 <_Balloc>
 801c356:	4604      	mov	r4, r0
 801c358:	b930      	cbnz	r0, 801c368 <__d2b+0x24>
 801c35a:	4602      	mov	r2, r0
 801c35c:	4b25      	ldr	r3, [pc, #148]	; (801c3f4 <__d2b+0xb0>)
 801c35e:	4826      	ldr	r0, [pc, #152]	; (801c3f8 <__d2b+0xb4>)
 801c360:	f240 310a 	movw	r1, #778	; 0x30a
 801c364:	f000 f9c6 	bl	801c6f4 <__assert_func>
 801c368:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801c36c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801c370:	bb35      	cbnz	r5, 801c3c0 <__d2b+0x7c>
 801c372:	2e00      	cmp	r6, #0
 801c374:	9301      	str	r3, [sp, #4]
 801c376:	d028      	beq.n	801c3ca <__d2b+0x86>
 801c378:	4668      	mov	r0, sp
 801c37a:	9600      	str	r6, [sp, #0]
 801c37c:	f7ff fd8c 	bl	801be98 <__lo0bits>
 801c380:	9900      	ldr	r1, [sp, #0]
 801c382:	b300      	cbz	r0, 801c3c6 <__d2b+0x82>
 801c384:	9a01      	ldr	r2, [sp, #4]
 801c386:	f1c0 0320 	rsb	r3, r0, #32
 801c38a:	fa02 f303 	lsl.w	r3, r2, r3
 801c38e:	430b      	orrs	r3, r1
 801c390:	40c2      	lsrs	r2, r0
 801c392:	6163      	str	r3, [r4, #20]
 801c394:	9201      	str	r2, [sp, #4]
 801c396:	9b01      	ldr	r3, [sp, #4]
 801c398:	61a3      	str	r3, [r4, #24]
 801c39a:	2b00      	cmp	r3, #0
 801c39c:	bf14      	ite	ne
 801c39e:	2202      	movne	r2, #2
 801c3a0:	2201      	moveq	r2, #1
 801c3a2:	6122      	str	r2, [r4, #16]
 801c3a4:	b1d5      	cbz	r5, 801c3dc <__d2b+0x98>
 801c3a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801c3aa:	4405      	add	r5, r0
 801c3ac:	f8c9 5000 	str.w	r5, [r9]
 801c3b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801c3b4:	f8c8 0000 	str.w	r0, [r8]
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	b003      	add	sp, #12
 801c3bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801c3c4:	e7d5      	b.n	801c372 <__d2b+0x2e>
 801c3c6:	6161      	str	r1, [r4, #20]
 801c3c8:	e7e5      	b.n	801c396 <__d2b+0x52>
 801c3ca:	a801      	add	r0, sp, #4
 801c3cc:	f7ff fd64 	bl	801be98 <__lo0bits>
 801c3d0:	9b01      	ldr	r3, [sp, #4]
 801c3d2:	6163      	str	r3, [r4, #20]
 801c3d4:	2201      	movs	r2, #1
 801c3d6:	6122      	str	r2, [r4, #16]
 801c3d8:	3020      	adds	r0, #32
 801c3da:	e7e3      	b.n	801c3a4 <__d2b+0x60>
 801c3dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c3e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801c3e4:	f8c9 0000 	str.w	r0, [r9]
 801c3e8:	6918      	ldr	r0, [r3, #16]
 801c3ea:	f7ff fd35 	bl	801be58 <__hi0bits>
 801c3ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c3f2:	e7df      	b.n	801c3b4 <__d2b+0x70>
 801c3f4:	08022218 	.word	0x08022218
 801c3f8:	08022229 	.word	0x08022229

0801c3fc <_calloc_r>:
 801c3fc:	b513      	push	{r0, r1, r4, lr}
 801c3fe:	434a      	muls	r2, r1
 801c400:	4611      	mov	r1, r2
 801c402:	9201      	str	r2, [sp, #4]
 801c404:	f7fd ff02 	bl	801a20c <_malloc_r>
 801c408:	4604      	mov	r4, r0
 801c40a:	b118      	cbz	r0, 801c414 <_calloc_r+0x18>
 801c40c:	9a01      	ldr	r2, [sp, #4]
 801c40e:	2100      	movs	r1, #0
 801c410:	f7fd fea4 	bl	801a15c <memset>
 801c414:	4620      	mov	r0, r4
 801c416:	b002      	add	sp, #8
 801c418:	bd10      	pop	{r4, pc}

0801c41a <__ssputs_r>:
 801c41a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c41e:	688e      	ldr	r6, [r1, #8]
 801c420:	429e      	cmp	r6, r3
 801c422:	4682      	mov	sl, r0
 801c424:	460c      	mov	r4, r1
 801c426:	4690      	mov	r8, r2
 801c428:	461f      	mov	r7, r3
 801c42a:	d838      	bhi.n	801c49e <__ssputs_r+0x84>
 801c42c:	898a      	ldrh	r2, [r1, #12]
 801c42e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c432:	d032      	beq.n	801c49a <__ssputs_r+0x80>
 801c434:	6825      	ldr	r5, [r4, #0]
 801c436:	6909      	ldr	r1, [r1, #16]
 801c438:	eba5 0901 	sub.w	r9, r5, r1
 801c43c:	6965      	ldr	r5, [r4, #20]
 801c43e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c442:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c446:	3301      	adds	r3, #1
 801c448:	444b      	add	r3, r9
 801c44a:	106d      	asrs	r5, r5, #1
 801c44c:	429d      	cmp	r5, r3
 801c44e:	bf38      	it	cc
 801c450:	461d      	movcc	r5, r3
 801c452:	0553      	lsls	r3, r2, #21
 801c454:	d531      	bpl.n	801c4ba <__ssputs_r+0xa0>
 801c456:	4629      	mov	r1, r5
 801c458:	f7fd fed8 	bl	801a20c <_malloc_r>
 801c45c:	4606      	mov	r6, r0
 801c45e:	b950      	cbnz	r0, 801c476 <__ssputs_r+0x5c>
 801c460:	230c      	movs	r3, #12
 801c462:	f8ca 3000 	str.w	r3, [sl]
 801c466:	89a3      	ldrh	r3, [r4, #12]
 801c468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c46c:	81a3      	strh	r3, [r4, #12]
 801c46e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c476:	6921      	ldr	r1, [r4, #16]
 801c478:	464a      	mov	r2, r9
 801c47a:	f7fd fe61 	bl	801a140 <memcpy>
 801c47e:	89a3      	ldrh	r3, [r4, #12]
 801c480:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c488:	81a3      	strh	r3, [r4, #12]
 801c48a:	6126      	str	r6, [r4, #16]
 801c48c:	6165      	str	r5, [r4, #20]
 801c48e:	444e      	add	r6, r9
 801c490:	eba5 0509 	sub.w	r5, r5, r9
 801c494:	6026      	str	r6, [r4, #0]
 801c496:	60a5      	str	r5, [r4, #8]
 801c498:	463e      	mov	r6, r7
 801c49a:	42be      	cmp	r6, r7
 801c49c:	d900      	bls.n	801c4a0 <__ssputs_r+0x86>
 801c49e:	463e      	mov	r6, r7
 801c4a0:	4632      	mov	r2, r6
 801c4a2:	6820      	ldr	r0, [r4, #0]
 801c4a4:	4641      	mov	r1, r8
 801c4a6:	f000 f967 	bl	801c778 <memmove>
 801c4aa:	68a3      	ldr	r3, [r4, #8]
 801c4ac:	6822      	ldr	r2, [r4, #0]
 801c4ae:	1b9b      	subs	r3, r3, r6
 801c4b0:	4432      	add	r2, r6
 801c4b2:	60a3      	str	r3, [r4, #8]
 801c4b4:	6022      	str	r2, [r4, #0]
 801c4b6:	2000      	movs	r0, #0
 801c4b8:	e7db      	b.n	801c472 <__ssputs_r+0x58>
 801c4ba:	462a      	mov	r2, r5
 801c4bc:	f000 f976 	bl	801c7ac <_realloc_r>
 801c4c0:	4606      	mov	r6, r0
 801c4c2:	2800      	cmp	r0, #0
 801c4c4:	d1e1      	bne.n	801c48a <__ssputs_r+0x70>
 801c4c6:	6921      	ldr	r1, [r4, #16]
 801c4c8:	4650      	mov	r0, sl
 801c4ca:	f7fd fe4f 	bl	801a16c <_free_r>
 801c4ce:	e7c7      	b.n	801c460 <__ssputs_r+0x46>

0801c4d0 <_svfiprintf_r>:
 801c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c4d4:	4698      	mov	r8, r3
 801c4d6:	898b      	ldrh	r3, [r1, #12]
 801c4d8:	061b      	lsls	r3, r3, #24
 801c4da:	b09d      	sub	sp, #116	; 0x74
 801c4dc:	4607      	mov	r7, r0
 801c4de:	460d      	mov	r5, r1
 801c4e0:	4614      	mov	r4, r2
 801c4e2:	d50e      	bpl.n	801c502 <_svfiprintf_r+0x32>
 801c4e4:	690b      	ldr	r3, [r1, #16]
 801c4e6:	b963      	cbnz	r3, 801c502 <_svfiprintf_r+0x32>
 801c4e8:	2140      	movs	r1, #64	; 0x40
 801c4ea:	f7fd fe8f 	bl	801a20c <_malloc_r>
 801c4ee:	6028      	str	r0, [r5, #0]
 801c4f0:	6128      	str	r0, [r5, #16]
 801c4f2:	b920      	cbnz	r0, 801c4fe <_svfiprintf_r+0x2e>
 801c4f4:	230c      	movs	r3, #12
 801c4f6:	603b      	str	r3, [r7, #0]
 801c4f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c4fc:	e0d1      	b.n	801c6a2 <_svfiprintf_r+0x1d2>
 801c4fe:	2340      	movs	r3, #64	; 0x40
 801c500:	616b      	str	r3, [r5, #20]
 801c502:	2300      	movs	r3, #0
 801c504:	9309      	str	r3, [sp, #36]	; 0x24
 801c506:	2320      	movs	r3, #32
 801c508:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c50c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c510:	2330      	movs	r3, #48	; 0x30
 801c512:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c6bc <_svfiprintf_r+0x1ec>
 801c516:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c51a:	f04f 0901 	mov.w	r9, #1
 801c51e:	4623      	mov	r3, r4
 801c520:	469a      	mov	sl, r3
 801c522:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c526:	b10a      	cbz	r2, 801c52c <_svfiprintf_r+0x5c>
 801c528:	2a25      	cmp	r2, #37	; 0x25
 801c52a:	d1f9      	bne.n	801c520 <_svfiprintf_r+0x50>
 801c52c:	ebba 0b04 	subs.w	fp, sl, r4
 801c530:	d00b      	beq.n	801c54a <_svfiprintf_r+0x7a>
 801c532:	465b      	mov	r3, fp
 801c534:	4622      	mov	r2, r4
 801c536:	4629      	mov	r1, r5
 801c538:	4638      	mov	r0, r7
 801c53a:	f7ff ff6e 	bl	801c41a <__ssputs_r>
 801c53e:	3001      	adds	r0, #1
 801c540:	f000 80aa 	beq.w	801c698 <_svfiprintf_r+0x1c8>
 801c544:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c546:	445a      	add	r2, fp
 801c548:	9209      	str	r2, [sp, #36]	; 0x24
 801c54a:	f89a 3000 	ldrb.w	r3, [sl]
 801c54e:	2b00      	cmp	r3, #0
 801c550:	f000 80a2 	beq.w	801c698 <_svfiprintf_r+0x1c8>
 801c554:	2300      	movs	r3, #0
 801c556:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c55a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c55e:	f10a 0a01 	add.w	sl, sl, #1
 801c562:	9304      	str	r3, [sp, #16]
 801c564:	9307      	str	r3, [sp, #28]
 801c566:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c56a:	931a      	str	r3, [sp, #104]	; 0x68
 801c56c:	4654      	mov	r4, sl
 801c56e:	2205      	movs	r2, #5
 801c570:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c574:	4851      	ldr	r0, [pc, #324]	; (801c6bc <_svfiprintf_r+0x1ec>)
 801c576:	f7e3 fe33 	bl	80001e0 <memchr>
 801c57a:	9a04      	ldr	r2, [sp, #16]
 801c57c:	b9d8      	cbnz	r0, 801c5b6 <_svfiprintf_r+0xe6>
 801c57e:	06d0      	lsls	r0, r2, #27
 801c580:	bf44      	itt	mi
 801c582:	2320      	movmi	r3, #32
 801c584:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c588:	0711      	lsls	r1, r2, #28
 801c58a:	bf44      	itt	mi
 801c58c:	232b      	movmi	r3, #43	; 0x2b
 801c58e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c592:	f89a 3000 	ldrb.w	r3, [sl]
 801c596:	2b2a      	cmp	r3, #42	; 0x2a
 801c598:	d015      	beq.n	801c5c6 <_svfiprintf_r+0xf6>
 801c59a:	9a07      	ldr	r2, [sp, #28]
 801c59c:	4654      	mov	r4, sl
 801c59e:	2000      	movs	r0, #0
 801c5a0:	f04f 0c0a 	mov.w	ip, #10
 801c5a4:	4621      	mov	r1, r4
 801c5a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c5aa:	3b30      	subs	r3, #48	; 0x30
 801c5ac:	2b09      	cmp	r3, #9
 801c5ae:	d94e      	bls.n	801c64e <_svfiprintf_r+0x17e>
 801c5b0:	b1b0      	cbz	r0, 801c5e0 <_svfiprintf_r+0x110>
 801c5b2:	9207      	str	r2, [sp, #28]
 801c5b4:	e014      	b.n	801c5e0 <_svfiprintf_r+0x110>
 801c5b6:	eba0 0308 	sub.w	r3, r0, r8
 801c5ba:	fa09 f303 	lsl.w	r3, r9, r3
 801c5be:	4313      	orrs	r3, r2
 801c5c0:	9304      	str	r3, [sp, #16]
 801c5c2:	46a2      	mov	sl, r4
 801c5c4:	e7d2      	b.n	801c56c <_svfiprintf_r+0x9c>
 801c5c6:	9b03      	ldr	r3, [sp, #12]
 801c5c8:	1d19      	adds	r1, r3, #4
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	9103      	str	r1, [sp, #12]
 801c5ce:	2b00      	cmp	r3, #0
 801c5d0:	bfbb      	ittet	lt
 801c5d2:	425b      	neglt	r3, r3
 801c5d4:	f042 0202 	orrlt.w	r2, r2, #2
 801c5d8:	9307      	strge	r3, [sp, #28]
 801c5da:	9307      	strlt	r3, [sp, #28]
 801c5dc:	bfb8      	it	lt
 801c5de:	9204      	strlt	r2, [sp, #16]
 801c5e0:	7823      	ldrb	r3, [r4, #0]
 801c5e2:	2b2e      	cmp	r3, #46	; 0x2e
 801c5e4:	d10c      	bne.n	801c600 <_svfiprintf_r+0x130>
 801c5e6:	7863      	ldrb	r3, [r4, #1]
 801c5e8:	2b2a      	cmp	r3, #42	; 0x2a
 801c5ea:	d135      	bne.n	801c658 <_svfiprintf_r+0x188>
 801c5ec:	9b03      	ldr	r3, [sp, #12]
 801c5ee:	1d1a      	adds	r2, r3, #4
 801c5f0:	681b      	ldr	r3, [r3, #0]
 801c5f2:	9203      	str	r2, [sp, #12]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	bfb8      	it	lt
 801c5f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c5fc:	3402      	adds	r4, #2
 801c5fe:	9305      	str	r3, [sp, #20]
 801c600:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c6cc <_svfiprintf_r+0x1fc>
 801c604:	7821      	ldrb	r1, [r4, #0]
 801c606:	2203      	movs	r2, #3
 801c608:	4650      	mov	r0, sl
 801c60a:	f7e3 fde9 	bl	80001e0 <memchr>
 801c60e:	b140      	cbz	r0, 801c622 <_svfiprintf_r+0x152>
 801c610:	2340      	movs	r3, #64	; 0x40
 801c612:	eba0 000a 	sub.w	r0, r0, sl
 801c616:	fa03 f000 	lsl.w	r0, r3, r0
 801c61a:	9b04      	ldr	r3, [sp, #16]
 801c61c:	4303      	orrs	r3, r0
 801c61e:	3401      	adds	r4, #1
 801c620:	9304      	str	r3, [sp, #16]
 801c622:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c626:	4826      	ldr	r0, [pc, #152]	; (801c6c0 <_svfiprintf_r+0x1f0>)
 801c628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c62c:	2206      	movs	r2, #6
 801c62e:	f7e3 fdd7 	bl	80001e0 <memchr>
 801c632:	2800      	cmp	r0, #0
 801c634:	d038      	beq.n	801c6a8 <_svfiprintf_r+0x1d8>
 801c636:	4b23      	ldr	r3, [pc, #140]	; (801c6c4 <_svfiprintf_r+0x1f4>)
 801c638:	bb1b      	cbnz	r3, 801c682 <_svfiprintf_r+0x1b2>
 801c63a:	9b03      	ldr	r3, [sp, #12]
 801c63c:	3307      	adds	r3, #7
 801c63e:	f023 0307 	bic.w	r3, r3, #7
 801c642:	3308      	adds	r3, #8
 801c644:	9303      	str	r3, [sp, #12]
 801c646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c648:	4433      	add	r3, r6
 801c64a:	9309      	str	r3, [sp, #36]	; 0x24
 801c64c:	e767      	b.n	801c51e <_svfiprintf_r+0x4e>
 801c64e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c652:	460c      	mov	r4, r1
 801c654:	2001      	movs	r0, #1
 801c656:	e7a5      	b.n	801c5a4 <_svfiprintf_r+0xd4>
 801c658:	2300      	movs	r3, #0
 801c65a:	3401      	adds	r4, #1
 801c65c:	9305      	str	r3, [sp, #20]
 801c65e:	4619      	mov	r1, r3
 801c660:	f04f 0c0a 	mov.w	ip, #10
 801c664:	4620      	mov	r0, r4
 801c666:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c66a:	3a30      	subs	r2, #48	; 0x30
 801c66c:	2a09      	cmp	r2, #9
 801c66e:	d903      	bls.n	801c678 <_svfiprintf_r+0x1a8>
 801c670:	2b00      	cmp	r3, #0
 801c672:	d0c5      	beq.n	801c600 <_svfiprintf_r+0x130>
 801c674:	9105      	str	r1, [sp, #20]
 801c676:	e7c3      	b.n	801c600 <_svfiprintf_r+0x130>
 801c678:	fb0c 2101 	mla	r1, ip, r1, r2
 801c67c:	4604      	mov	r4, r0
 801c67e:	2301      	movs	r3, #1
 801c680:	e7f0      	b.n	801c664 <_svfiprintf_r+0x194>
 801c682:	ab03      	add	r3, sp, #12
 801c684:	9300      	str	r3, [sp, #0]
 801c686:	462a      	mov	r2, r5
 801c688:	4b0f      	ldr	r3, [pc, #60]	; (801c6c8 <_svfiprintf_r+0x1f8>)
 801c68a:	a904      	add	r1, sp, #16
 801c68c:	4638      	mov	r0, r7
 801c68e:	f7fd feb7 	bl	801a400 <_printf_float>
 801c692:	1c42      	adds	r2, r0, #1
 801c694:	4606      	mov	r6, r0
 801c696:	d1d6      	bne.n	801c646 <_svfiprintf_r+0x176>
 801c698:	89ab      	ldrh	r3, [r5, #12]
 801c69a:	065b      	lsls	r3, r3, #25
 801c69c:	f53f af2c 	bmi.w	801c4f8 <_svfiprintf_r+0x28>
 801c6a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c6a2:	b01d      	add	sp, #116	; 0x74
 801c6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c6a8:	ab03      	add	r3, sp, #12
 801c6aa:	9300      	str	r3, [sp, #0]
 801c6ac:	462a      	mov	r2, r5
 801c6ae:	4b06      	ldr	r3, [pc, #24]	; (801c6c8 <_svfiprintf_r+0x1f8>)
 801c6b0:	a904      	add	r1, sp, #16
 801c6b2:	4638      	mov	r0, r7
 801c6b4:	f7fe f948 	bl	801a948 <_printf_i>
 801c6b8:	e7eb      	b.n	801c692 <_svfiprintf_r+0x1c2>
 801c6ba:	bf00      	nop
 801c6bc:	0802238c 	.word	0x0802238c
 801c6c0:	08022396 	.word	0x08022396
 801c6c4:	0801a401 	.word	0x0801a401
 801c6c8:	0801c41b 	.word	0x0801c41b
 801c6cc:	08022392 	.word	0x08022392

0801c6d0 <_read_r>:
 801c6d0:	b538      	push	{r3, r4, r5, lr}
 801c6d2:	4d07      	ldr	r5, [pc, #28]	; (801c6f0 <_read_r+0x20>)
 801c6d4:	4604      	mov	r4, r0
 801c6d6:	4608      	mov	r0, r1
 801c6d8:	4611      	mov	r1, r2
 801c6da:	2200      	movs	r2, #0
 801c6dc:	602a      	str	r2, [r5, #0]
 801c6de:	461a      	mov	r2, r3
 801c6e0:	f7e9 f97a 	bl	80059d8 <_read>
 801c6e4:	1c43      	adds	r3, r0, #1
 801c6e6:	d102      	bne.n	801c6ee <_read_r+0x1e>
 801c6e8:	682b      	ldr	r3, [r5, #0]
 801c6ea:	b103      	cbz	r3, 801c6ee <_read_r+0x1e>
 801c6ec:	6023      	str	r3, [r4, #0]
 801c6ee:	bd38      	pop	{r3, r4, r5, pc}
 801c6f0:	20016a54 	.word	0x20016a54

0801c6f4 <__assert_func>:
 801c6f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c6f6:	4614      	mov	r4, r2
 801c6f8:	461a      	mov	r2, r3
 801c6fa:	4b09      	ldr	r3, [pc, #36]	; (801c720 <__assert_func+0x2c>)
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	4605      	mov	r5, r0
 801c700:	68d8      	ldr	r0, [r3, #12]
 801c702:	b14c      	cbz	r4, 801c718 <__assert_func+0x24>
 801c704:	4b07      	ldr	r3, [pc, #28]	; (801c724 <__assert_func+0x30>)
 801c706:	9100      	str	r1, [sp, #0]
 801c708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c70c:	4906      	ldr	r1, [pc, #24]	; (801c728 <__assert_func+0x34>)
 801c70e:	462b      	mov	r3, r5
 801c710:	f000 f80e 	bl	801c730 <fiprintf>
 801c714:	f000 fa98 	bl	801cc48 <abort>
 801c718:	4b04      	ldr	r3, [pc, #16]	; (801c72c <__assert_func+0x38>)
 801c71a:	461c      	mov	r4, r3
 801c71c:	e7f3      	b.n	801c706 <__assert_func+0x12>
 801c71e:	bf00      	nop
 801c720:	20000260 	.word	0x20000260
 801c724:	0802239d 	.word	0x0802239d
 801c728:	080223aa 	.word	0x080223aa
 801c72c:	080223d8 	.word	0x080223d8

0801c730 <fiprintf>:
 801c730:	b40e      	push	{r1, r2, r3}
 801c732:	b503      	push	{r0, r1, lr}
 801c734:	4601      	mov	r1, r0
 801c736:	ab03      	add	r3, sp, #12
 801c738:	4805      	ldr	r0, [pc, #20]	; (801c750 <fiprintf+0x20>)
 801c73a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c73e:	6800      	ldr	r0, [r0, #0]
 801c740:	9301      	str	r3, [sp, #4]
 801c742:	f000 f883 	bl	801c84c <_vfiprintf_r>
 801c746:	b002      	add	sp, #8
 801c748:	f85d eb04 	ldr.w	lr, [sp], #4
 801c74c:	b003      	add	sp, #12
 801c74e:	4770      	bx	lr
 801c750:	20000260 	.word	0x20000260

0801c754 <__ascii_mbtowc>:
 801c754:	b082      	sub	sp, #8
 801c756:	b901      	cbnz	r1, 801c75a <__ascii_mbtowc+0x6>
 801c758:	a901      	add	r1, sp, #4
 801c75a:	b142      	cbz	r2, 801c76e <__ascii_mbtowc+0x1a>
 801c75c:	b14b      	cbz	r3, 801c772 <__ascii_mbtowc+0x1e>
 801c75e:	7813      	ldrb	r3, [r2, #0]
 801c760:	600b      	str	r3, [r1, #0]
 801c762:	7812      	ldrb	r2, [r2, #0]
 801c764:	1e10      	subs	r0, r2, #0
 801c766:	bf18      	it	ne
 801c768:	2001      	movne	r0, #1
 801c76a:	b002      	add	sp, #8
 801c76c:	4770      	bx	lr
 801c76e:	4610      	mov	r0, r2
 801c770:	e7fb      	b.n	801c76a <__ascii_mbtowc+0x16>
 801c772:	f06f 0001 	mvn.w	r0, #1
 801c776:	e7f8      	b.n	801c76a <__ascii_mbtowc+0x16>

0801c778 <memmove>:
 801c778:	4288      	cmp	r0, r1
 801c77a:	b510      	push	{r4, lr}
 801c77c:	eb01 0402 	add.w	r4, r1, r2
 801c780:	d902      	bls.n	801c788 <memmove+0x10>
 801c782:	4284      	cmp	r4, r0
 801c784:	4623      	mov	r3, r4
 801c786:	d807      	bhi.n	801c798 <memmove+0x20>
 801c788:	1e43      	subs	r3, r0, #1
 801c78a:	42a1      	cmp	r1, r4
 801c78c:	d008      	beq.n	801c7a0 <memmove+0x28>
 801c78e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c792:	f803 2f01 	strb.w	r2, [r3, #1]!
 801c796:	e7f8      	b.n	801c78a <memmove+0x12>
 801c798:	4402      	add	r2, r0
 801c79a:	4601      	mov	r1, r0
 801c79c:	428a      	cmp	r2, r1
 801c79e:	d100      	bne.n	801c7a2 <memmove+0x2a>
 801c7a0:	bd10      	pop	{r4, pc}
 801c7a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801c7a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801c7aa:	e7f7      	b.n	801c79c <memmove+0x24>

0801c7ac <_realloc_r>:
 801c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c7ae:	4607      	mov	r7, r0
 801c7b0:	4614      	mov	r4, r2
 801c7b2:	460e      	mov	r6, r1
 801c7b4:	b921      	cbnz	r1, 801c7c0 <_realloc_r+0x14>
 801c7b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c7ba:	4611      	mov	r1, r2
 801c7bc:	f7fd bd26 	b.w	801a20c <_malloc_r>
 801c7c0:	b922      	cbnz	r2, 801c7cc <_realloc_r+0x20>
 801c7c2:	f7fd fcd3 	bl	801a16c <_free_r>
 801c7c6:	4625      	mov	r5, r4
 801c7c8:	4628      	mov	r0, r5
 801c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c7cc:	f000 faa8 	bl	801cd20 <_malloc_usable_size_r>
 801c7d0:	42a0      	cmp	r0, r4
 801c7d2:	d20f      	bcs.n	801c7f4 <_realloc_r+0x48>
 801c7d4:	4621      	mov	r1, r4
 801c7d6:	4638      	mov	r0, r7
 801c7d8:	f7fd fd18 	bl	801a20c <_malloc_r>
 801c7dc:	4605      	mov	r5, r0
 801c7de:	2800      	cmp	r0, #0
 801c7e0:	d0f2      	beq.n	801c7c8 <_realloc_r+0x1c>
 801c7e2:	4631      	mov	r1, r6
 801c7e4:	4622      	mov	r2, r4
 801c7e6:	f7fd fcab 	bl	801a140 <memcpy>
 801c7ea:	4631      	mov	r1, r6
 801c7ec:	4638      	mov	r0, r7
 801c7ee:	f7fd fcbd 	bl	801a16c <_free_r>
 801c7f2:	e7e9      	b.n	801c7c8 <_realloc_r+0x1c>
 801c7f4:	4635      	mov	r5, r6
 801c7f6:	e7e7      	b.n	801c7c8 <_realloc_r+0x1c>

0801c7f8 <__sfputc_r>:
 801c7f8:	6893      	ldr	r3, [r2, #8]
 801c7fa:	3b01      	subs	r3, #1
 801c7fc:	2b00      	cmp	r3, #0
 801c7fe:	b410      	push	{r4}
 801c800:	6093      	str	r3, [r2, #8]
 801c802:	da08      	bge.n	801c816 <__sfputc_r+0x1e>
 801c804:	6994      	ldr	r4, [r2, #24]
 801c806:	42a3      	cmp	r3, r4
 801c808:	db01      	blt.n	801c80e <__sfputc_r+0x16>
 801c80a:	290a      	cmp	r1, #10
 801c80c:	d103      	bne.n	801c816 <__sfputc_r+0x1e>
 801c80e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c812:	f000 b94b 	b.w	801caac <__swbuf_r>
 801c816:	6813      	ldr	r3, [r2, #0]
 801c818:	1c58      	adds	r0, r3, #1
 801c81a:	6010      	str	r0, [r2, #0]
 801c81c:	7019      	strb	r1, [r3, #0]
 801c81e:	4608      	mov	r0, r1
 801c820:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c824:	4770      	bx	lr

0801c826 <__sfputs_r>:
 801c826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c828:	4606      	mov	r6, r0
 801c82a:	460f      	mov	r7, r1
 801c82c:	4614      	mov	r4, r2
 801c82e:	18d5      	adds	r5, r2, r3
 801c830:	42ac      	cmp	r4, r5
 801c832:	d101      	bne.n	801c838 <__sfputs_r+0x12>
 801c834:	2000      	movs	r0, #0
 801c836:	e007      	b.n	801c848 <__sfputs_r+0x22>
 801c838:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c83c:	463a      	mov	r2, r7
 801c83e:	4630      	mov	r0, r6
 801c840:	f7ff ffda 	bl	801c7f8 <__sfputc_r>
 801c844:	1c43      	adds	r3, r0, #1
 801c846:	d1f3      	bne.n	801c830 <__sfputs_r+0xa>
 801c848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c84c <_vfiprintf_r>:
 801c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c850:	460d      	mov	r5, r1
 801c852:	b09d      	sub	sp, #116	; 0x74
 801c854:	4614      	mov	r4, r2
 801c856:	4698      	mov	r8, r3
 801c858:	4606      	mov	r6, r0
 801c85a:	b118      	cbz	r0, 801c864 <_vfiprintf_r+0x18>
 801c85c:	6983      	ldr	r3, [r0, #24]
 801c85e:	b90b      	cbnz	r3, 801c864 <_vfiprintf_r+0x18>
 801c860:	f7fd fb7e 	bl	8019f60 <__sinit>
 801c864:	4b89      	ldr	r3, [pc, #548]	; (801ca8c <_vfiprintf_r+0x240>)
 801c866:	429d      	cmp	r5, r3
 801c868:	d11b      	bne.n	801c8a2 <_vfiprintf_r+0x56>
 801c86a:	6875      	ldr	r5, [r6, #4]
 801c86c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c86e:	07d9      	lsls	r1, r3, #31
 801c870:	d405      	bmi.n	801c87e <_vfiprintf_r+0x32>
 801c872:	89ab      	ldrh	r3, [r5, #12]
 801c874:	059a      	lsls	r2, r3, #22
 801c876:	d402      	bmi.n	801c87e <_vfiprintf_r+0x32>
 801c878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c87a:	f7fd fc4e 	bl	801a11a <__retarget_lock_acquire_recursive>
 801c87e:	89ab      	ldrh	r3, [r5, #12]
 801c880:	071b      	lsls	r3, r3, #28
 801c882:	d501      	bpl.n	801c888 <_vfiprintf_r+0x3c>
 801c884:	692b      	ldr	r3, [r5, #16]
 801c886:	b9eb      	cbnz	r3, 801c8c4 <_vfiprintf_r+0x78>
 801c888:	4629      	mov	r1, r5
 801c88a:	4630      	mov	r0, r6
 801c88c:	f000 f96e 	bl	801cb6c <__swsetup_r>
 801c890:	b1c0      	cbz	r0, 801c8c4 <_vfiprintf_r+0x78>
 801c892:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c894:	07dc      	lsls	r4, r3, #31
 801c896:	d50e      	bpl.n	801c8b6 <_vfiprintf_r+0x6a>
 801c898:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801c89c:	b01d      	add	sp, #116	; 0x74
 801c89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8a2:	4b7b      	ldr	r3, [pc, #492]	; (801ca90 <_vfiprintf_r+0x244>)
 801c8a4:	429d      	cmp	r5, r3
 801c8a6:	d101      	bne.n	801c8ac <_vfiprintf_r+0x60>
 801c8a8:	68b5      	ldr	r5, [r6, #8]
 801c8aa:	e7df      	b.n	801c86c <_vfiprintf_r+0x20>
 801c8ac:	4b79      	ldr	r3, [pc, #484]	; (801ca94 <_vfiprintf_r+0x248>)
 801c8ae:	429d      	cmp	r5, r3
 801c8b0:	bf08      	it	eq
 801c8b2:	68f5      	ldreq	r5, [r6, #12]
 801c8b4:	e7da      	b.n	801c86c <_vfiprintf_r+0x20>
 801c8b6:	89ab      	ldrh	r3, [r5, #12]
 801c8b8:	0598      	lsls	r0, r3, #22
 801c8ba:	d4ed      	bmi.n	801c898 <_vfiprintf_r+0x4c>
 801c8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c8be:	f7fd fc2d 	bl	801a11c <__retarget_lock_release_recursive>
 801c8c2:	e7e9      	b.n	801c898 <_vfiprintf_r+0x4c>
 801c8c4:	2300      	movs	r3, #0
 801c8c6:	9309      	str	r3, [sp, #36]	; 0x24
 801c8c8:	2320      	movs	r3, #32
 801c8ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c8ce:	f8cd 800c 	str.w	r8, [sp, #12]
 801c8d2:	2330      	movs	r3, #48	; 0x30
 801c8d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801ca98 <_vfiprintf_r+0x24c>
 801c8d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c8dc:	f04f 0901 	mov.w	r9, #1
 801c8e0:	4623      	mov	r3, r4
 801c8e2:	469a      	mov	sl, r3
 801c8e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c8e8:	b10a      	cbz	r2, 801c8ee <_vfiprintf_r+0xa2>
 801c8ea:	2a25      	cmp	r2, #37	; 0x25
 801c8ec:	d1f9      	bne.n	801c8e2 <_vfiprintf_r+0x96>
 801c8ee:	ebba 0b04 	subs.w	fp, sl, r4
 801c8f2:	d00b      	beq.n	801c90c <_vfiprintf_r+0xc0>
 801c8f4:	465b      	mov	r3, fp
 801c8f6:	4622      	mov	r2, r4
 801c8f8:	4629      	mov	r1, r5
 801c8fa:	4630      	mov	r0, r6
 801c8fc:	f7ff ff93 	bl	801c826 <__sfputs_r>
 801c900:	3001      	adds	r0, #1
 801c902:	f000 80aa 	beq.w	801ca5a <_vfiprintf_r+0x20e>
 801c906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c908:	445a      	add	r2, fp
 801c90a:	9209      	str	r2, [sp, #36]	; 0x24
 801c90c:	f89a 3000 	ldrb.w	r3, [sl]
 801c910:	2b00      	cmp	r3, #0
 801c912:	f000 80a2 	beq.w	801ca5a <_vfiprintf_r+0x20e>
 801c916:	2300      	movs	r3, #0
 801c918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801c91c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c920:	f10a 0a01 	add.w	sl, sl, #1
 801c924:	9304      	str	r3, [sp, #16]
 801c926:	9307      	str	r3, [sp, #28]
 801c928:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c92c:	931a      	str	r3, [sp, #104]	; 0x68
 801c92e:	4654      	mov	r4, sl
 801c930:	2205      	movs	r2, #5
 801c932:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c936:	4858      	ldr	r0, [pc, #352]	; (801ca98 <_vfiprintf_r+0x24c>)
 801c938:	f7e3 fc52 	bl	80001e0 <memchr>
 801c93c:	9a04      	ldr	r2, [sp, #16]
 801c93e:	b9d8      	cbnz	r0, 801c978 <_vfiprintf_r+0x12c>
 801c940:	06d1      	lsls	r1, r2, #27
 801c942:	bf44      	itt	mi
 801c944:	2320      	movmi	r3, #32
 801c946:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c94a:	0713      	lsls	r3, r2, #28
 801c94c:	bf44      	itt	mi
 801c94e:	232b      	movmi	r3, #43	; 0x2b
 801c950:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c954:	f89a 3000 	ldrb.w	r3, [sl]
 801c958:	2b2a      	cmp	r3, #42	; 0x2a
 801c95a:	d015      	beq.n	801c988 <_vfiprintf_r+0x13c>
 801c95c:	9a07      	ldr	r2, [sp, #28]
 801c95e:	4654      	mov	r4, sl
 801c960:	2000      	movs	r0, #0
 801c962:	f04f 0c0a 	mov.w	ip, #10
 801c966:	4621      	mov	r1, r4
 801c968:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c96c:	3b30      	subs	r3, #48	; 0x30
 801c96e:	2b09      	cmp	r3, #9
 801c970:	d94e      	bls.n	801ca10 <_vfiprintf_r+0x1c4>
 801c972:	b1b0      	cbz	r0, 801c9a2 <_vfiprintf_r+0x156>
 801c974:	9207      	str	r2, [sp, #28]
 801c976:	e014      	b.n	801c9a2 <_vfiprintf_r+0x156>
 801c978:	eba0 0308 	sub.w	r3, r0, r8
 801c97c:	fa09 f303 	lsl.w	r3, r9, r3
 801c980:	4313      	orrs	r3, r2
 801c982:	9304      	str	r3, [sp, #16]
 801c984:	46a2      	mov	sl, r4
 801c986:	e7d2      	b.n	801c92e <_vfiprintf_r+0xe2>
 801c988:	9b03      	ldr	r3, [sp, #12]
 801c98a:	1d19      	adds	r1, r3, #4
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	9103      	str	r1, [sp, #12]
 801c990:	2b00      	cmp	r3, #0
 801c992:	bfbb      	ittet	lt
 801c994:	425b      	neglt	r3, r3
 801c996:	f042 0202 	orrlt.w	r2, r2, #2
 801c99a:	9307      	strge	r3, [sp, #28]
 801c99c:	9307      	strlt	r3, [sp, #28]
 801c99e:	bfb8      	it	lt
 801c9a0:	9204      	strlt	r2, [sp, #16]
 801c9a2:	7823      	ldrb	r3, [r4, #0]
 801c9a4:	2b2e      	cmp	r3, #46	; 0x2e
 801c9a6:	d10c      	bne.n	801c9c2 <_vfiprintf_r+0x176>
 801c9a8:	7863      	ldrb	r3, [r4, #1]
 801c9aa:	2b2a      	cmp	r3, #42	; 0x2a
 801c9ac:	d135      	bne.n	801ca1a <_vfiprintf_r+0x1ce>
 801c9ae:	9b03      	ldr	r3, [sp, #12]
 801c9b0:	1d1a      	adds	r2, r3, #4
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	9203      	str	r2, [sp, #12]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	bfb8      	it	lt
 801c9ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801c9be:	3402      	adds	r4, #2
 801c9c0:	9305      	str	r3, [sp, #20]
 801c9c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801caa8 <_vfiprintf_r+0x25c>
 801c9c6:	7821      	ldrb	r1, [r4, #0]
 801c9c8:	2203      	movs	r2, #3
 801c9ca:	4650      	mov	r0, sl
 801c9cc:	f7e3 fc08 	bl	80001e0 <memchr>
 801c9d0:	b140      	cbz	r0, 801c9e4 <_vfiprintf_r+0x198>
 801c9d2:	2340      	movs	r3, #64	; 0x40
 801c9d4:	eba0 000a 	sub.w	r0, r0, sl
 801c9d8:	fa03 f000 	lsl.w	r0, r3, r0
 801c9dc:	9b04      	ldr	r3, [sp, #16]
 801c9de:	4303      	orrs	r3, r0
 801c9e0:	3401      	adds	r4, #1
 801c9e2:	9304      	str	r3, [sp, #16]
 801c9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c9e8:	482c      	ldr	r0, [pc, #176]	; (801ca9c <_vfiprintf_r+0x250>)
 801c9ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c9ee:	2206      	movs	r2, #6
 801c9f0:	f7e3 fbf6 	bl	80001e0 <memchr>
 801c9f4:	2800      	cmp	r0, #0
 801c9f6:	d03f      	beq.n	801ca78 <_vfiprintf_r+0x22c>
 801c9f8:	4b29      	ldr	r3, [pc, #164]	; (801caa0 <_vfiprintf_r+0x254>)
 801c9fa:	bb1b      	cbnz	r3, 801ca44 <_vfiprintf_r+0x1f8>
 801c9fc:	9b03      	ldr	r3, [sp, #12]
 801c9fe:	3307      	adds	r3, #7
 801ca00:	f023 0307 	bic.w	r3, r3, #7
 801ca04:	3308      	adds	r3, #8
 801ca06:	9303      	str	r3, [sp, #12]
 801ca08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca0a:	443b      	add	r3, r7
 801ca0c:	9309      	str	r3, [sp, #36]	; 0x24
 801ca0e:	e767      	b.n	801c8e0 <_vfiprintf_r+0x94>
 801ca10:	fb0c 3202 	mla	r2, ip, r2, r3
 801ca14:	460c      	mov	r4, r1
 801ca16:	2001      	movs	r0, #1
 801ca18:	e7a5      	b.n	801c966 <_vfiprintf_r+0x11a>
 801ca1a:	2300      	movs	r3, #0
 801ca1c:	3401      	adds	r4, #1
 801ca1e:	9305      	str	r3, [sp, #20]
 801ca20:	4619      	mov	r1, r3
 801ca22:	f04f 0c0a 	mov.w	ip, #10
 801ca26:	4620      	mov	r0, r4
 801ca28:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ca2c:	3a30      	subs	r2, #48	; 0x30
 801ca2e:	2a09      	cmp	r2, #9
 801ca30:	d903      	bls.n	801ca3a <_vfiprintf_r+0x1ee>
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d0c5      	beq.n	801c9c2 <_vfiprintf_r+0x176>
 801ca36:	9105      	str	r1, [sp, #20]
 801ca38:	e7c3      	b.n	801c9c2 <_vfiprintf_r+0x176>
 801ca3a:	fb0c 2101 	mla	r1, ip, r1, r2
 801ca3e:	4604      	mov	r4, r0
 801ca40:	2301      	movs	r3, #1
 801ca42:	e7f0      	b.n	801ca26 <_vfiprintf_r+0x1da>
 801ca44:	ab03      	add	r3, sp, #12
 801ca46:	9300      	str	r3, [sp, #0]
 801ca48:	462a      	mov	r2, r5
 801ca4a:	4b16      	ldr	r3, [pc, #88]	; (801caa4 <_vfiprintf_r+0x258>)
 801ca4c:	a904      	add	r1, sp, #16
 801ca4e:	4630      	mov	r0, r6
 801ca50:	f7fd fcd6 	bl	801a400 <_printf_float>
 801ca54:	4607      	mov	r7, r0
 801ca56:	1c78      	adds	r0, r7, #1
 801ca58:	d1d6      	bne.n	801ca08 <_vfiprintf_r+0x1bc>
 801ca5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ca5c:	07d9      	lsls	r1, r3, #31
 801ca5e:	d405      	bmi.n	801ca6c <_vfiprintf_r+0x220>
 801ca60:	89ab      	ldrh	r3, [r5, #12]
 801ca62:	059a      	lsls	r2, r3, #22
 801ca64:	d402      	bmi.n	801ca6c <_vfiprintf_r+0x220>
 801ca66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ca68:	f7fd fb58 	bl	801a11c <__retarget_lock_release_recursive>
 801ca6c:	89ab      	ldrh	r3, [r5, #12]
 801ca6e:	065b      	lsls	r3, r3, #25
 801ca70:	f53f af12 	bmi.w	801c898 <_vfiprintf_r+0x4c>
 801ca74:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ca76:	e711      	b.n	801c89c <_vfiprintf_r+0x50>
 801ca78:	ab03      	add	r3, sp, #12
 801ca7a:	9300      	str	r3, [sp, #0]
 801ca7c:	462a      	mov	r2, r5
 801ca7e:	4b09      	ldr	r3, [pc, #36]	; (801caa4 <_vfiprintf_r+0x258>)
 801ca80:	a904      	add	r1, sp, #16
 801ca82:	4630      	mov	r0, r6
 801ca84:	f7fd ff60 	bl	801a948 <_printf_i>
 801ca88:	e7e4      	b.n	801ca54 <_vfiprintf_r+0x208>
 801ca8a:	bf00      	nop
 801ca8c:	080220f8 	.word	0x080220f8
 801ca90:	08022118 	.word	0x08022118
 801ca94:	080220d8 	.word	0x080220d8
 801ca98:	0802238c 	.word	0x0802238c
 801ca9c:	08022396 	.word	0x08022396
 801caa0:	0801a401 	.word	0x0801a401
 801caa4:	0801c827 	.word	0x0801c827
 801caa8:	08022392 	.word	0x08022392

0801caac <__swbuf_r>:
 801caac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caae:	460e      	mov	r6, r1
 801cab0:	4614      	mov	r4, r2
 801cab2:	4605      	mov	r5, r0
 801cab4:	b118      	cbz	r0, 801cabe <__swbuf_r+0x12>
 801cab6:	6983      	ldr	r3, [r0, #24]
 801cab8:	b90b      	cbnz	r3, 801cabe <__swbuf_r+0x12>
 801caba:	f7fd fa51 	bl	8019f60 <__sinit>
 801cabe:	4b21      	ldr	r3, [pc, #132]	; (801cb44 <__swbuf_r+0x98>)
 801cac0:	429c      	cmp	r4, r3
 801cac2:	d12b      	bne.n	801cb1c <__swbuf_r+0x70>
 801cac4:	686c      	ldr	r4, [r5, #4]
 801cac6:	69a3      	ldr	r3, [r4, #24]
 801cac8:	60a3      	str	r3, [r4, #8]
 801caca:	89a3      	ldrh	r3, [r4, #12]
 801cacc:	071a      	lsls	r2, r3, #28
 801cace:	d52f      	bpl.n	801cb30 <__swbuf_r+0x84>
 801cad0:	6923      	ldr	r3, [r4, #16]
 801cad2:	b36b      	cbz	r3, 801cb30 <__swbuf_r+0x84>
 801cad4:	6923      	ldr	r3, [r4, #16]
 801cad6:	6820      	ldr	r0, [r4, #0]
 801cad8:	1ac0      	subs	r0, r0, r3
 801cada:	6963      	ldr	r3, [r4, #20]
 801cadc:	b2f6      	uxtb	r6, r6
 801cade:	4283      	cmp	r3, r0
 801cae0:	4637      	mov	r7, r6
 801cae2:	dc04      	bgt.n	801caee <__swbuf_r+0x42>
 801cae4:	4621      	mov	r1, r4
 801cae6:	4628      	mov	r0, r5
 801cae8:	f7ff f8ac 	bl	801bc44 <_fflush_r>
 801caec:	bb30      	cbnz	r0, 801cb3c <__swbuf_r+0x90>
 801caee:	68a3      	ldr	r3, [r4, #8]
 801caf0:	3b01      	subs	r3, #1
 801caf2:	60a3      	str	r3, [r4, #8]
 801caf4:	6823      	ldr	r3, [r4, #0]
 801caf6:	1c5a      	adds	r2, r3, #1
 801caf8:	6022      	str	r2, [r4, #0]
 801cafa:	701e      	strb	r6, [r3, #0]
 801cafc:	6963      	ldr	r3, [r4, #20]
 801cafe:	3001      	adds	r0, #1
 801cb00:	4283      	cmp	r3, r0
 801cb02:	d004      	beq.n	801cb0e <__swbuf_r+0x62>
 801cb04:	89a3      	ldrh	r3, [r4, #12]
 801cb06:	07db      	lsls	r3, r3, #31
 801cb08:	d506      	bpl.n	801cb18 <__swbuf_r+0x6c>
 801cb0a:	2e0a      	cmp	r6, #10
 801cb0c:	d104      	bne.n	801cb18 <__swbuf_r+0x6c>
 801cb0e:	4621      	mov	r1, r4
 801cb10:	4628      	mov	r0, r5
 801cb12:	f7ff f897 	bl	801bc44 <_fflush_r>
 801cb16:	b988      	cbnz	r0, 801cb3c <__swbuf_r+0x90>
 801cb18:	4638      	mov	r0, r7
 801cb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cb1c:	4b0a      	ldr	r3, [pc, #40]	; (801cb48 <__swbuf_r+0x9c>)
 801cb1e:	429c      	cmp	r4, r3
 801cb20:	d101      	bne.n	801cb26 <__swbuf_r+0x7a>
 801cb22:	68ac      	ldr	r4, [r5, #8]
 801cb24:	e7cf      	b.n	801cac6 <__swbuf_r+0x1a>
 801cb26:	4b09      	ldr	r3, [pc, #36]	; (801cb4c <__swbuf_r+0xa0>)
 801cb28:	429c      	cmp	r4, r3
 801cb2a:	bf08      	it	eq
 801cb2c:	68ec      	ldreq	r4, [r5, #12]
 801cb2e:	e7ca      	b.n	801cac6 <__swbuf_r+0x1a>
 801cb30:	4621      	mov	r1, r4
 801cb32:	4628      	mov	r0, r5
 801cb34:	f000 f81a 	bl	801cb6c <__swsetup_r>
 801cb38:	2800      	cmp	r0, #0
 801cb3a:	d0cb      	beq.n	801cad4 <__swbuf_r+0x28>
 801cb3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801cb40:	e7ea      	b.n	801cb18 <__swbuf_r+0x6c>
 801cb42:	bf00      	nop
 801cb44:	080220f8 	.word	0x080220f8
 801cb48:	08022118 	.word	0x08022118
 801cb4c:	080220d8 	.word	0x080220d8

0801cb50 <__ascii_wctomb>:
 801cb50:	b149      	cbz	r1, 801cb66 <__ascii_wctomb+0x16>
 801cb52:	2aff      	cmp	r2, #255	; 0xff
 801cb54:	bf85      	ittet	hi
 801cb56:	238a      	movhi	r3, #138	; 0x8a
 801cb58:	6003      	strhi	r3, [r0, #0]
 801cb5a:	700a      	strbls	r2, [r1, #0]
 801cb5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801cb60:	bf98      	it	ls
 801cb62:	2001      	movls	r0, #1
 801cb64:	4770      	bx	lr
 801cb66:	4608      	mov	r0, r1
 801cb68:	4770      	bx	lr
	...

0801cb6c <__swsetup_r>:
 801cb6c:	4b32      	ldr	r3, [pc, #200]	; (801cc38 <__swsetup_r+0xcc>)
 801cb6e:	b570      	push	{r4, r5, r6, lr}
 801cb70:	681d      	ldr	r5, [r3, #0]
 801cb72:	4606      	mov	r6, r0
 801cb74:	460c      	mov	r4, r1
 801cb76:	b125      	cbz	r5, 801cb82 <__swsetup_r+0x16>
 801cb78:	69ab      	ldr	r3, [r5, #24]
 801cb7a:	b913      	cbnz	r3, 801cb82 <__swsetup_r+0x16>
 801cb7c:	4628      	mov	r0, r5
 801cb7e:	f7fd f9ef 	bl	8019f60 <__sinit>
 801cb82:	4b2e      	ldr	r3, [pc, #184]	; (801cc3c <__swsetup_r+0xd0>)
 801cb84:	429c      	cmp	r4, r3
 801cb86:	d10f      	bne.n	801cba8 <__swsetup_r+0x3c>
 801cb88:	686c      	ldr	r4, [r5, #4]
 801cb8a:	89a3      	ldrh	r3, [r4, #12]
 801cb8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cb90:	0719      	lsls	r1, r3, #28
 801cb92:	d42c      	bmi.n	801cbee <__swsetup_r+0x82>
 801cb94:	06dd      	lsls	r5, r3, #27
 801cb96:	d411      	bmi.n	801cbbc <__swsetup_r+0x50>
 801cb98:	2309      	movs	r3, #9
 801cb9a:	6033      	str	r3, [r6, #0]
 801cb9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801cba0:	81a3      	strh	r3, [r4, #12]
 801cba2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cba6:	e03e      	b.n	801cc26 <__swsetup_r+0xba>
 801cba8:	4b25      	ldr	r3, [pc, #148]	; (801cc40 <__swsetup_r+0xd4>)
 801cbaa:	429c      	cmp	r4, r3
 801cbac:	d101      	bne.n	801cbb2 <__swsetup_r+0x46>
 801cbae:	68ac      	ldr	r4, [r5, #8]
 801cbb0:	e7eb      	b.n	801cb8a <__swsetup_r+0x1e>
 801cbb2:	4b24      	ldr	r3, [pc, #144]	; (801cc44 <__swsetup_r+0xd8>)
 801cbb4:	429c      	cmp	r4, r3
 801cbb6:	bf08      	it	eq
 801cbb8:	68ec      	ldreq	r4, [r5, #12]
 801cbba:	e7e6      	b.n	801cb8a <__swsetup_r+0x1e>
 801cbbc:	0758      	lsls	r0, r3, #29
 801cbbe:	d512      	bpl.n	801cbe6 <__swsetup_r+0x7a>
 801cbc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cbc2:	b141      	cbz	r1, 801cbd6 <__swsetup_r+0x6a>
 801cbc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cbc8:	4299      	cmp	r1, r3
 801cbca:	d002      	beq.n	801cbd2 <__swsetup_r+0x66>
 801cbcc:	4630      	mov	r0, r6
 801cbce:	f7fd facd 	bl	801a16c <_free_r>
 801cbd2:	2300      	movs	r3, #0
 801cbd4:	6363      	str	r3, [r4, #52]	; 0x34
 801cbd6:	89a3      	ldrh	r3, [r4, #12]
 801cbd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801cbdc:	81a3      	strh	r3, [r4, #12]
 801cbde:	2300      	movs	r3, #0
 801cbe0:	6063      	str	r3, [r4, #4]
 801cbe2:	6923      	ldr	r3, [r4, #16]
 801cbe4:	6023      	str	r3, [r4, #0]
 801cbe6:	89a3      	ldrh	r3, [r4, #12]
 801cbe8:	f043 0308 	orr.w	r3, r3, #8
 801cbec:	81a3      	strh	r3, [r4, #12]
 801cbee:	6923      	ldr	r3, [r4, #16]
 801cbf0:	b94b      	cbnz	r3, 801cc06 <__swsetup_r+0x9a>
 801cbf2:	89a3      	ldrh	r3, [r4, #12]
 801cbf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801cbf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cbfc:	d003      	beq.n	801cc06 <__swsetup_r+0x9a>
 801cbfe:	4621      	mov	r1, r4
 801cc00:	4630      	mov	r0, r6
 801cc02:	f000 f84d 	bl	801cca0 <__smakebuf_r>
 801cc06:	89a0      	ldrh	r0, [r4, #12]
 801cc08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801cc0c:	f010 0301 	ands.w	r3, r0, #1
 801cc10:	d00a      	beq.n	801cc28 <__swsetup_r+0xbc>
 801cc12:	2300      	movs	r3, #0
 801cc14:	60a3      	str	r3, [r4, #8]
 801cc16:	6963      	ldr	r3, [r4, #20]
 801cc18:	425b      	negs	r3, r3
 801cc1a:	61a3      	str	r3, [r4, #24]
 801cc1c:	6923      	ldr	r3, [r4, #16]
 801cc1e:	b943      	cbnz	r3, 801cc32 <__swsetup_r+0xc6>
 801cc20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801cc24:	d1ba      	bne.n	801cb9c <__swsetup_r+0x30>
 801cc26:	bd70      	pop	{r4, r5, r6, pc}
 801cc28:	0781      	lsls	r1, r0, #30
 801cc2a:	bf58      	it	pl
 801cc2c:	6963      	ldrpl	r3, [r4, #20]
 801cc2e:	60a3      	str	r3, [r4, #8]
 801cc30:	e7f4      	b.n	801cc1c <__swsetup_r+0xb0>
 801cc32:	2000      	movs	r0, #0
 801cc34:	e7f7      	b.n	801cc26 <__swsetup_r+0xba>
 801cc36:	bf00      	nop
 801cc38:	20000260 	.word	0x20000260
 801cc3c:	080220f8 	.word	0x080220f8
 801cc40:	08022118 	.word	0x08022118
 801cc44:	080220d8 	.word	0x080220d8

0801cc48 <abort>:
 801cc48:	b508      	push	{r3, lr}
 801cc4a:	2006      	movs	r0, #6
 801cc4c:	f000 f898 	bl	801cd80 <raise>
 801cc50:	2001      	movs	r0, #1
 801cc52:	f7e8 feb7 	bl	80059c4 <_exit>

0801cc56 <__swhatbuf_r>:
 801cc56:	b570      	push	{r4, r5, r6, lr}
 801cc58:	460e      	mov	r6, r1
 801cc5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cc5e:	2900      	cmp	r1, #0
 801cc60:	b096      	sub	sp, #88	; 0x58
 801cc62:	4614      	mov	r4, r2
 801cc64:	461d      	mov	r5, r3
 801cc66:	da07      	bge.n	801cc78 <__swhatbuf_r+0x22>
 801cc68:	2300      	movs	r3, #0
 801cc6a:	602b      	str	r3, [r5, #0]
 801cc6c:	89b3      	ldrh	r3, [r6, #12]
 801cc6e:	061a      	lsls	r2, r3, #24
 801cc70:	d410      	bmi.n	801cc94 <__swhatbuf_r+0x3e>
 801cc72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cc76:	e00e      	b.n	801cc96 <__swhatbuf_r+0x40>
 801cc78:	466a      	mov	r2, sp
 801cc7a:	f000 f89d 	bl	801cdb8 <_fstat_r>
 801cc7e:	2800      	cmp	r0, #0
 801cc80:	dbf2      	blt.n	801cc68 <__swhatbuf_r+0x12>
 801cc82:	9a01      	ldr	r2, [sp, #4]
 801cc84:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801cc88:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801cc8c:	425a      	negs	r2, r3
 801cc8e:	415a      	adcs	r2, r3
 801cc90:	602a      	str	r2, [r5, #0]
 801cc92:	e7ee      	b.n	801cc72 <__swhatbuf_r+0x1c>
 801cc94:	2340      	movs	r3, #64	; 0x40
 801cc96:	2000      	movs	r0, #0
 801cc98:	6023      	str	r3, [r4, #0]
 801cc9a:	b016      	add	sp, #88	; 0x58
 801cc9c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801cca0 <__smakebuf_r>:
 801cca0:	898b      	ldrh	r3, [r1, #12]
 801cca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801cca4:	079d      	lsls	r5, r3, #30
 801cca6:	4606      	mov	r6, r0
 801cca8:	460c      	mov	r4, r1
 801ccaa:	d507      	bpl.n	801ccbc <__smakebuf_r+0x1c>
 801ccac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ccb0:	6023      	str	r3, [r4, #0]
 801ccb2:	6123      	str	r3, [r4, #16]
 801ccb4:	2301      	movs	r3, #1
 801ccb6:	6163      	str	r3, [r4, #20]
 801ccb8:	b002      	add	sp, #8
 801ccba:	bd70      	pop	{r4, r5, r6, pc}
 801ccbc:	ab01      	add	r3, sp, #4
 801ccbe:	466a      	mov	r2, sp
 801ccc0:	f7ff ffc9 	bl	801cc56 <__swhatbuf_r>
 801ccc4:	9900      	ldr	r1, [sp, #0]
 801ccc6:	4605      	mov	r5, r0
 801ccc8:	4630      	mov	r0, r6
 801ccca:	f7fd fa9f 	bl	801a20c <_malloc_r>
 801ccce:	b948      	cbnz	r0, 801cce4 <__smakebuf_r+0x44>
 801ccd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ccd4:	059a      	lsls	r2, r3, #22
 801ccd6:	d4ef      	bmi.n	801ccb8 <__smakebuf_r+0x18>
 801ccd8:	f023 0303 	bic.w	r3, r3, #3
 801ccdc:	f043 0302 	orr.w	r3, r3, #2
 801cce0:	81a3      	strh	r3, [r4, #12]
 801cce2:	e7e3      	b.n	801ccac <__smakebuf_r+0xc>
 801cce4:	4b0d      	ldr	r3, [pc, #52]	; (801cd1c <__smakebuf_r+0x7c>)
 801cce6:	62b3      	str	r3, [r6, #40]	; 0x28
 801cce8:	89a3      	ldrh	r3, [r4, #12]
 801ccea:	6020      	str	r0, [r4, #0]
 801ccec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ccf0:	81a3      	strh	r3, [r4, #12]
 801ccf2:	9b00      	ldr	r3, [sp, #0]
 801ccf4:	6163      	str	r3, [r4, #20]
 801ccf6:	9b01      	ldr	r3, [sp, #4]
 801ccf8:	6120      	str	r0, [r4, #16]
 801ccfa:	b15b      	cbz	r3, 801cd14 <__smakebuf_r+0x74>
 801ccfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd00:	4630      	mov	r0, r6
 801cd02:	f000 f86b 	bl	801cddc <_isatty_r>
 801cd06:	b128      	cbz	r0, 801cd14 <__smakebuf_r+0x74>
 801cd08:	89a3      	ldrh	r3, [r4, #12]
 801cd0a:	f023 0303 	bic.w	r3, r3, #3
 801cd0e:	f043 0301 	orr.w	r3, r3, #1
 801cd12:	81a3      	strh	r3, [r4, #12]
 801cd14:	89a0      	ldrh	r0, [r4, #12]
 801cd16:	4305      	orrs	r5, r0
 801cd18:	81a5      	strh	r5, [r4, #12]
 801cd1a:	e7cd      	b.n	801ccb8 <__smakebuf_r+0x18>
 801cd1c:	08019ef9 	.word	0x08019ef9

0801cd20 <_malloc_usable_size_r>:
 801cd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cd24:	1f18      	subs	r0, r3, #4
 801cd26:	2b00      	cmp	r3, #0
 801cd28:	bfbc      	itt	lt
 801cd2a:	580b      	ldrlt	r3, [r1, r0]
 801cd2c:	18c0      	addlt	r0, r0, r3
 801cd2e:	4770      	bx	lr

0801cd30 <_raise_r>:
 801cd30:	291f      	cmp	r1, #31
 801cd32:	b538      	push	{r3, r4, r5, lr}
 801cd34:	4604      	mov	r4, r0
 801cd36:	460d      	mov	r5, r1
 801cd38:	d904      	bls.n	801cd44 <_raise_r+0x14>
 801cd3a:	2316      	movs	r3, #22
 801cd3c:	6003      	str	r3, [r0, #0]
 801cd3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801cd42:	bd38      	pop	{r3, r4, r5, pc}
 801cd44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cd46:	b112      	cbz	r2, 801cd4e <_raise_r+0x1e>
 801cd48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cd4c:	b94b      	cbnz	r3, 801cd62 <_raise_r+0x32>
 801cd4e:	4620      	mov	r0, r4
 801cd50:	f000 f830 	bl	801cdb4 <_getpid_r>
 801cd54:	462a      	mov	r2, r5
 801cd56:	4601      	mov	r1, r0
 801cd58:	4620      	mov	r0, r4
 801cd5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cd5e:	f000 b817 	b.w	801cd90 <_kill_r>
 801cd62:	2b01      	cmp	r3, #1
 801cd64:	d00a      	beq.n	801cd7c <_raise_r+0x4c>
 801cd66:	1c59      	adds	r1, r3, #1
 801cd68:	d103      	bne.n	801cd72 <_raise_r+0x42>
 801cd6a:	2316      	movs	r3, #22
 801cd6c:	6003      	str	r3, [r0, #0]
 801cd6e:	2001      	movs	r0, #1
 801cd70:	e7e7      	b.n	801cd42 <_raise_r+0x12>
 801cd72:	2400      	movs	r4, #0
 801cd74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801cd78:	4628      	mov	r0, r5
 801cd7a:	4798      	blx	r3
 801cd7c:	2000      	movs	r0, #0
 801cd7e:	e7e0      	b.n	801cd42 <_raise_r+0x12>

0801cd80 <raise>:
 801cd80:	4b02      	ldr	r3, [pc, #8]	; (801cd8c <raise+0xc>)
 801cd82:	4601      	mov	r1, r0
 801cd84:	6818      	ldr	r0, [r3, #0]
 801cd86:	f7ff bfd3 	b.w	801cd30 <_raise_r>
 801cd8a:	bf00      	nop
 801cd8c:	20000260 	.word	0x20000260

0801cd90 <_kill_r>:
 801cd90:	b538      	push	{r3, r4, r5, lr}
 801cd92:	4d07      	ldr	r5, [pc, #28]	; (801cdb0 <_kill_r+0x20>)
 801cd94:	2300      	movs	r3, #0
 801cd96:	4604      	mov	r4, r0
 801cd98:	4608      	mov	r0, r1
 801cd9a:	4611      	mov	r1, r2
 801cd9c:	602b      	str	r3, [r5, #0]
 801cd9e:	f7e8 fe01 	bl	80059a4 <_kill>
 801cda2:	1c43      	adds	r3, r0, #1
 801cda4:	d102      	bne.n	801cdac <_kill_r+0x1c>
 801cda6:	682b      	ldr	r3, [r5, #0]
 801cda8:	b103      	cbz	r3, 801cdac <_kill_r+0x1c>
 801cdaa:	6023      	str	r3, [r4, #0]
 801cdac:	bd38      	pop	{r3, r4, r5, pc}
 801cdae:	bf00      	nop
 801cdb0:	20016a54 	.word	0x20016a54

0801cdb4 <_getpid_r>:
 801cdb4:	f7e8 bdee 	b.w	8005994 <_getpid>

0801cdb8 <_fstat_r>:
 801cdb8:	b538      	push	{r3, r4, r5, lr}
 801cdba:	4d07      	ldr	r5, [pc, #28]	; (801cdd8 <_fstat_r+0x20>)
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	4604      	mov	r4, r0
 801cdc0:	4608      	mov	r0, r1
 801cdc2:	4611      	mov	r1, r2
 801cdc4:	602b      	str	r3, [r5, #0]
 801cdc6:	f7e8 fe4c 	bl	8005a62 <_fstat>
 801cdca:	1c43      	adds	r3, r0, #1
 801cdcc:	d102      	bne.n	801cdd4 <_fstat_r+0x1c>
 801cdce:	682b      	ldr	r3, [r5, #0]
 801cdd0:	b103      	cbz	r3, 801cdd4 <_fstat_r+0x1c>
 801cdd2:	6023      	str	r3, [r4, #0]
 801cdd4:	bd38      	pop	{r3, r4, r5, pc}
 801cdd6:	bf00      	nop
 801cdd8:	20016a54 	.word	0x20016a54

0801cddc <_isatty_r>:
 801cddc:	b538      	push	{r3, r4, r5, lr}
 801cdde:	4d06      	ldr	r5, [pc, #24]	; (801cdf8 <_isatty_r+0x1c>)
 801cde0:	2300      	movs	r3, #0
 801cde2:	4604      	mov	r4, r0
 801cde4:	4608      	mov	r0, r1
 801cde6:	602b      	str	r3, [r5, #0]
 801cde8:	f7e8 fe4b 	bl	8005a82 <_isatty>
 801cdec:	1c43      	adds	r3, r0, #1
 801cdee:	d102      	bne.n	801cdf6 <_isatty_r+0x1a>
 801cdf0:	682b      	ldr	r3, [r5, #0]
 801cdf2:	b103      	cbz	r3, 801cdf6 <_isatty_r+0x1a>
 801cdf4:	6023      	str	r3, [r4, #0]
 801cdf6:	bd38      	pop	{r3, r4, r5, pc}
 801cdf8:	20016a54 	.word	0x20016a54
 801cdfc:	00000000 	.word	0x00000000

0801ce00 <atan>:
 801ce00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce04:	ec55 4b10 	vmov	r4, r5, d0
 801ce08:	4bc3      	ldr	r3, [pc, #780]	; (801d118 <atan+0x318>)
 801ce0a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ce0e:	429e      	cmp	r6, r3
 801ce10:	46ab      	mov	fp, r5
 801ce12:	dd18      	ble.n	801ce46 <atan+0x46>
 801ce14:	4bc1      	ldr	r3, [pc, #772]	; (801d11c <atan+0x31c>)
 801ce16:	429e      	cmp	r6, r3
 801ce18:	dc01      	bgt.n	801ce1e <atan+0x1e>
 801ce1a:	d109      	bne.n	801ce30 <atan+0x30>
 801ce1c:	b144      	cbz	r4, 801ce30 <atan+0x30>
 801ce1e:	4622      	mov	r2, r4
 801ce20:	462b      	mov	r3, r5
 801ce22:	4620      	mov	r0, r4
 801ce24:	4629      	mov	r1, r5
 801ce26:	f7e3 fa31 	bl	800028c <__adddf3>
 801ce2a:	4604      	mov	r4, r0
 801ce2c:	460d      	mov	r5, r1
 801ce2e:	e006      	b.n	801ce3e <atan+0x3e>
 801ce30:	f1bb 0f00 	cmp.w	fp, #0
 801ce34:	f300 8131 	bgt.w	801d09a <atan+0x29a>
 801ce38:	a59b      	add	r5, pc, #620	; (adr r5, 801d0a8 <atan+0x2a8>)
 801ce3a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ce3e:	ec45 4b10 	vmov	d0, r4, r5
 801ce42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce46:	4bb6      	ldr	r3, [pc, #728]	; (801d120 <atan+0x320>)
 801ce48:	429e      	cmp	r6, r3
 801ce4a:	dc14      	bgt.n	801ce76 <atan+0x76>
 801ce4c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801ce50:	429e      	cmp	r6, r3
 801ce52:	dc0d      	bgt.n	801ce70 <atan+0x70>
 801ce54:	a396      	add	r3, pc, #600	; (adr r3, 801d0b0 <atan+0x2b0>)
 801ce56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce5a:	ee10 0a10 	vmov	r0, s0
 801ce5e:	4629      	mov	r1, r5
 801ce60:	f7e3 fa14 	bl	800028c <__adddf3>
 801ce64:	4baf      	ldr	r3, [pc, #700]	; (801d124 <atan+0x324>)
 801ce66:	2200      	movs	r2, #0
 801ce68:	f7e3 fe56 	bl	8000b18 <__aeabi_dcmpgt>
 801ce6c:	2800      	cmp	r0, #0
 801ce6e:	d1e6      	bne.n	801ce3e <atan+0x3e>
 801ce70:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801ce74:	e02b      	b.n	801cece <atan+0xce>
 801ce76:	f000 f963 	bl	801d140 <fabs>
 801ce7a:	4bab      	ldr	r3, [pc, #684]	; (801d128 <atan+0x328>)
 801ce7c:	429e      	cmp	r6, r3
 801ce7e:	ec55 4b10 	vmov	r4, r5, d0
 801ce82:	f300 80bf 	bgt.w	801d004 <atan+0x204>
 801ce86:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801ce8a:	429e      	cmp	r6, r3
 801ce8c:	f300 80a0 	bgt.w	801cfd0 <atan+0x1d0>
 801ce90:	ee10 2a10 	vmov	r2, s0
 801ce94:	ee10 0a10 	vmov	r0, s0
 801ce98:	462b      	mov	r3, r5
 801ce9a:	4629      	mov	r1, r5
 801ce9c:	f7e3 f9f6 	bl	800028c <__adddf3>
 801cea0:	4ba0      	ldr	r3, [pc, #640]	; (801d124 <atan+0x324>)
 801cea2:	2200      	movs	r2, #0
 801cea4:	f7e3 f9f0 	bl	8000288 <__aeabi_dsub>
 801cea8:	2200      	movs	r2, #0
 801ceaa:	4606      	mov	r6, r0
 801ceac:	460f      	mov	r7, r1
 801ceae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ceb2:	4620      	mov	r0, r4
 801ceb4:	4629      	mov	r1, r5
 801ceb6:	f7e3 f9e9 	bl	800028c <__adddf3>
 801ceba:	4602      	mov	r2, r0
 801cebc:	460b      	mov	r3, r1
 801cebe:	4630      	mov	r0, r6
 801cec0:	4639      	mov	r1, r7
 801cec2:	f7e3 fcc3 	bl	800084c <__aeabi_ddiv>
 801cec6:	f04f 0a00 	mov.w	sl, #0
 801ceca:	4604      	mov	r4, r0
 801cecc:	460d      	mov	r5, r1
 801cece:	4622      	mov	r2, r4
 801ced0:	462b      	mov	r3, r5
 801ced2:	4620      	mov	r0, r4
 801ced4:	4629      	mov	r1, r5
 801ced6:	f7e3 fb8f 	bl	80005f8 <__aeabi_dmul>
 801ceda:	4602      	mov	r2, r0
 801cedc:	460b      	mov	r3, r1
 801cede:	4680      	mov	r8, r0
 801cee0:	4689      	mov	r9, r1
 801cee2:	f7e3 fb89 	bl	80005f8 <__aeabi_dmul>
 801cee6:	a374      	add	r3, pc, #464	; (adr r3, 801d0b8 <atan+0x2b8>)
 801cee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceec:	4606      	mov	r6, r0
 801ceee:	460f      	mov	r7, r1
 801cef0:	f7e3 fb82 	bl	80005f8 <__aeabi_dmul>
 801cef4:	a372      	add	r3, pc, #456	; (adr r3, 801d0c0 <atan+0x2c0>)
 801cef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cefa:	f7e3 f9c7 	bl	800028c <__adddf3>
 801cefe:	4632      	mov	r2, r6
 801cf00:	463b      	mov	r3, r7
 801cf02:	f7e3 fb79 	bl	80005f8 <__aeabi_dmul>
 801cf06:	a370      	add	r3, pc, #448	; (adr r3, 801d0c8 <atan+0x2c8>)
 801cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0c:	f7e3 f9be 	bl	800028c <__adddf3>
 801cf10:	4632      	mov	r2, r6
 801cf12:	463b      	mov	r3, r7
 801cf14:	f7e3 fb70 	bl	80005f8 <__aeabi_dmul>
 801cf18:	a36d      	add	r3, pc, #436	; (adr r3, 801d0d0 <atan+0x2d0>)
 801cf1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf1e:	f7e3 f9b5 	bl	800028c <__adddf3>
 801cf22:	4632      	mov	r2, r6
 801cf24:	463b      	mov	r3, r7
 801cf26:	f7e3 fb67 	bl	80005f8 <__aeabi_dmul>
 801cf2a:	a36b      	add	r3, pc, #428	; (adr r3, 801d0d8 <atan+0x2d8>)
 801cf2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf30:	f7e3 f9ac 	bl	800028c <__adddf3>
 801cf34:	4632      	mov	r2, r6
 801cf36:	463b      	mov	r3, r7
 801cf38:	f7e3 fb5e 	bl	80005f8 <__aeabi_dmul>
 801cf3c:	a368      	add	r3, pc, #416	; (adr r3, 801d0e0 <atan+0x2e0>)
 801cf3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf42:	f7e3 f9a3 	bl	800028c <__adddf3>
 801cf46:	4642      	mov	r2, r8
 801cf48:	464b      	mov	r3, r9
 801cf4a:	f7e3 fb55 	bl	80005f8 <__aeabi_dmul>
 801cf4e:	a366      	add	r3, pc, #408	; (adr r3, 801d0e8 <atan+0x2e8>)
 801cf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf54:	4680      	mov	r8, r0
 801cf56:	4689      	mov	r9, r1
 801cf58:	4630      	mov	r0, r6
 801cf5a:	4639      	mov	r1, r7
 801cf5c:	f7e3 fb4c 	bl	80005f8 <__aeabi_dmul>
 801cf60:	a363      	add	r3, pc, #396	; (adr r3, 801d0f0 <atan+0x2f0>)
 801cf62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf66:	f7e3 f98f 	bl	8000288 <__aeabi_dsub>
 801cf6a:	4632      	mov	r2, r6
 801cf6c:	463b      	mov	r3, r7
 801cf6e:	f7e3 fb43 	bl	80005f8 <__aeabi_dmul>
 801cf72:	a361      	add	r3, pc, #388	; (adr r3, 801d0f8 <atan+0x2f8>)
 801cf74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf78:	f7e3 f986 	bl	8000288 <__aeabi_dsub>
 801cf7c:	4632      	mov	r2, r6
 801cf7e:	463b      	mov	r3, r7
 801cf80:	f7e3 fb3a 	bl	80005f8 <__aeabi_dmul>
 801cf84:	a35e      	add	r3, pc, #376	; (adr r3, 801d100 <atan+0x300>)
 801cf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf8a:	f7e3 f97d 	bl	8000288 <__aeabi_dsub>
 801cf8e:	4632      	mov	r2, r6
 801cf90:	463b      	mov	r3, r7
 801cf92:	f7e3 fb31 	bl	80005f8 <__aeabi_dmul>
 801cf96:	a35c      	add	r3, pc, #368	; (adr r3, 801d108 <atan+0x308>)
 801cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf9c:	f7e3 f974 	bl	8000288 <__aeabi_dsub>
 801cfa0:	4632      	mov	r2, r6
 801cfa2:	463b      	mov	r3, r7
 801cfa4:	f7e3 fb28 	bl	80005f8 <__aeabi_dmul>
 801cfa8:	4602      	mov	r2, r0
 801cfaa:	460b      	mov	r3, r1
 801cfac:	4640      	mov	r0, r8
 801cfae:	4649      	mov	r1, r9
 801cfb0:	f7e3 f96c 	bl	800028c <__adddf3>
 801cfb4:	4622      	mov	r2, r4
 801cfb6:	462b      	mov	r3, r5
 801cfb8:	f7e3 fb1e 	bl	80005f8 <__aeabi_dmul>
 801cfbc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801cfc0:	4602      	mov	r2, r0
 801cfc2:	460b      	mov	r3, r1
 801cfc4:	d14b      	bne.n	801d05e <atan+0x25e>
 801cfc6:	4620      	mov	r0, r4
 801cfc8:	4629      	mov	r1, r5
 801cfca:	f7e3 f95d 	bl	8000288 <__aeabi_dsub>
 801cfce:	e72c      	b.n	801ce2a <atan+0x2a>
 801cfd0:	ee10 0a10 	vmov	r0, s0
 801cfd4:	4b53      	ldr	r3, [pc, #332]	; (801d124 <atan+0x324>)
 801cfd6:	2200      	movs	r2, #0
 801cfd8:	4629      	mov	r1, r5
 801cfda:	f7e3 f955 	bl	8000288 <__aeabi_dsub>
 801cfde:	4b51      	ldr	r3, [pc, #324]	; (801d124 <atan+0x324>)
 801cfe0:	4606      	mov	r6, r0
 801cfe2:	460f      	mov	r7, r1
 801cfe4:	2200      	movs	r2, #0
 801cfe6:	4620      	mov	r0, r4
 801cfe8:	4629      	mov	r1, r5
 801cfea:	f7e3 f94f 	bl	800028c <__adddf3>
 801cfee:	4602      	mov	r2, r0
 801cff0:	460b      	mov	r3, r1
 801cff2:	4630      	mov	r0, r6
 801cff4:	4639      	mov	r1, r7
 801cff6:	f7e3 fc29 	bl	800084c <__aeabi_ddiv>
 801cffa:	f04f 0a01 	mov.w	sl, #1
 801cffe:	4604      	mov	r4, r0
 801d000:	460d      	mov	r5, r1
 801d002:	e764      	b.n	801cece <atan+0xce>
 801d004:	4b49      	ldr	r3, [pc, #292]	; (801d12c <atan+0x32c>)
 801d006:	429e      	cmp	r6, r3
 801d008:	da1d      	bge.n	801d046 <atan+0x246>
 801d00a:	ee10 0a10 	vmov	r0, s0
 801d00e:	4b48      	ldr	r3, [pc, #288]	; (801d130 <atan+0x330>)
 801d010:	2200      	movs	r2, #0
 801d012:	4629      	mov	r1, r5
 801d014:	f7e3 f938 	bl	8000288 <__aeabi_dsub>
 801d018:	4b45      	ldr	r3, [pc, #276]	; (801d130 <atan+0x330>)
 801d01a:	4606      	mov	r6, r0
 801d01c:	460f      	mov	r7, r1
 801d01e:	2200      	movs	r2, #0
 801d020:	4620      	mov	r0, r4
 801d022:	4629      	mov	r1, r5
 801d024:	f7e3 fae8 	bl	80005f8 <__aeabi_dmul>
 801d028:	4b3e      	ldr	r3, [pc, #248]	; (801d124 <atan+0x324>)
 801d02a:	2200      	movs	r2, #0
 801d02c:	f7e3 f92e 	bl	800028c <__adddf3>
 801d030:	4602      	mov	r2, r0
 801d032:	460b      	mov	r3, r1
 801d034:	4630      	mov	r0, r6
 801d036:	4639      	mov	r1, r7
 801d038:	f7e3 fc08 	bl	800084c <__aeabi_ddiv>
 801d03c:	f04f 0a02 	mov.w	sl, #2
 801d040:	4604      	mov	r4, r0
 801d042:	460d      	mov	r5, r1
 801d044:	e743      	b.n	801cece <atan+0xce>
 801d046:	462b      	mov	r3, r5
 801d048:	ee10 2a10 	vmov	r2, s0
 801d04c:	4939      	ldr	r1, [pc, #228]	; (801d134 <atan+0x334>)
 801d04e:	2000      	movs	r0, #0
 801d050:	f7e3 fbfc 	bl	800084c <__aeabi_ddiv>
 801d054:	f04f 0a03 	mov.w	sl, #3
 801d058:	4604      	mov	r4, r0
 801d05a:	460d      	mov	r5, r1
 801d05c:	e737      	b.n	801cece <atan+0xce>
 801d05e:	4b36      	ldr	r3, [pc, #216]	; (801d138 <atan+0x338>)
 801d060:	4e36      	ldr	r6, [pc, #216]	; (801d13c <atan+0x33c>)
 801d062:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801d066:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801d06a:	e9da 2300 	ldrd	r2, r3, [sl]
 801d06e:	f7e3 f90b 	bl	8000288 <__aeabi_dsub>
 801d072:	4622      	mov	r2, r4
 801d074:	462b      	mov	r3, r5
 801d076:	f7e3 f907 	bl	8000288 <__aeabi_dsub>
 801d07a:	4602      	mov	r2, r0
 801d07c:	460b      	mov	r3, r1
 801d07e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801d082:	f7e3 f901 	bl	8000288 <__aeabi_dsub>
 801d086:	f1bb 0f00 	cmp.w	fp, #0
 801d08a:	4604      	mov	r4, r0
 801d08c:	460d      	mov	r5, r1
 801d08e:	f6bf aed6 	bge.w	801ce3e <atan+0x3e>
 801d092:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d096:	461d      	mov	r5, r3
 801d098:	e6d1      	b.n	801ce3e <atan+0x3e>
 801d09a:	a51d      	add	r5, pc, #116	; (adr r5, 801d110 <atan+0x310>)
 801d09c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801d0a0:	e6cd      	b.n	801ce3e <atan+0x3e>
 801d0a2:	bf00      	nop
 801d0a4:	f3af 8000 	nop.w
 801d0a8:	54442d18 	.word	0x54442d18
 801d0ac:	bff921fb 	.word	0xbff921fb
 801d0b0:	8800759c 	.word	0x8800759c
 801d0b4:	7e37e43c 	.word	0x7e37e43c
 801d0b8:	e322da11 	.word	0xe322da11
 801d0bc:	3f90ad3a 	.word	0x3f90ad3a
 801d0c0:	24760deb 	.word	0x24760deb
 801d0c4:	3fa97b4b 	.word	0x3fa97b4b
 801d0c8:	a0d03d51 	.word	0xa0d03d51
 801d0cc:	3fb10d66 	.word	0x3fb10d66
 801d0d0:	c54c206e 	.word	0xc54c206e
 801d0d4:	3fb745cd 	.word	0x3fb745cd
 801d0d8:	920083ff 	.word	0x920083ff
 801d0dc:	3fc24924 	.word	0x3fc24924
 801d0e0:	5555550d 	.word	0x5555550d
 801d0e4:	3fd55555 	.word	0x3fd55555
 801d0e8:	2c6a6c2f 	.word	0x2c6a6c2f
 801d0ec:	bfa2b444 	.word	0xbfa2b444
 801d0f0:	52defd9a 	.word	0x52defd9a
 801d0f4:	3fadde2d 	.word	0x3fadde2d
 801d0f8:	af749a6d 	.word	0xaf749a6d
 801d0fc:	3fb3b0f2 	.word	0x3fb3b0f2
 801d100:	fe231671 	.word	0xfe231671
 801d104:	3fbc71c6 	.word	0x3fbc71c6
 801d108:	9998ebc4 	.word	0x9998ebc4
 801d10c:	3fc99999 	.word	0x3fc99999
 801d110:	54442d18 	.word	0x54442d18
 801d114:	3ff921fb 	.word	0x3ff921fb
 801d118:	440fffff 	.word	0x440fffff
 801d11c:	7ff00000 	.word	0x7ff00000
 801d120:	3fdbffff 	.word	0x3fdbffff
 801d124:	3ff00000 	.word	0x3ff00000
 801d128:	3ff2ffff 	.word	0x3ff2ffff
 801d12c:	40038000 	.word	0x40038000
 801d130:	3ff80000 	.word	0x3ff80000
 801d134:	bff00000 	.word	0xbff00000
 801d138:	08022508 	.word	0x08022508
 801d13c:	080224e8 	.word	0x080224e8

0801d140 <fabs>:
 801d140:	ec51 0b10 	vmov	r0, r1, d0
 801d144:	ee10 2a10 	vmov	r2, s0
 801d148:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d14c:	ec43 2b10 	vmov	d0, r2, r3
 801d150:	4770      	bx	lr

0801d152 <atan2>:
 801d152:	f000 b835 	b.w	801d1c0 <__ieee754_atan2>
	...

0801d158 <sqrt>:
 801d158:	b538      	push	{r3, r4, r5, lr}
 801d15a:	ed2d 8b02 	vpush	{d8}
 801d15e:	ec55 4b10 	vmov	r4, r5, d0
 801d162:	f000 f8f7 	bl	801d354 <__ieee754_sqrt>
 801d166:	4b15      	ldr	r3, [pc, #84]	; (801d1bc <sqrt+0x64>)
 801d168:	eeb0 8a40 	vmov.f32	s16, s0
 801d16c:	eef0 8a60 	vmov.f32	s17, s1
 801d170:	f993 3000 	ldrsb.w	r3, [r3]
 801d174:	3301      	adds	r3, #1
 801d176:	d019      	beq.n	801d1ac <sqrt+0x54>
 801d178:	4622      	mov	r2, r4
 801d17a:	462b      	mov	r3, r5
 801d17c:	4620      	mov	r0, r4
 801d17e:	4629      	mov	r1, r5
 801d180:	f7e3 fcd4 	bl	8000b2c <__aeabi_dcmpun>
 801d184:	b990      	cbnz	r0, 801d1ac <sqrt+0x54>
 801d186:	2200      	movs	r2, #0
 801d188:	2300      	movs	r3, #0
 801d18a:	4620      	mov	r0, r4
 801d18c:	4629      	mov	r1, r5
 801d18e:	f7e3 fca5 	bl	8000adc <__aeabi_dcmplt>
 801d192:	b158      	cbz	r0, 801d1ac <sqrt+0x54>
 801d194:	f7fc fe86 	bl	8019ea4 <__errno>
 801d198:	2321      	movs	r3, #33	; 0x21
 801d19a:	6003      	str	r3, [r0, #0]
 801d19c:	2200      	movs	r2, #0
 801d19e:	2300      	movs	r3, #0
 801d1a0:	4610      	mov	r0, r2
 801d1a2:	4619      	mov	r1, r3
 801d1a4:	f7e3 fb52 	bl	800084c <__aeabi_ddiv>
 801d1a8:	ec41 0b18 	vmov	d8, r0, r1
 801d1ac:	eeb0 0a48 	vmov.f32	s0, s16
 801d1b0:	eef0 0a68 	vmov.f32	s1, s17
 801d1b4:	ecbd 8b02 	vpop	{d8}
 801d1b8:	bd38      	pop	{r3, r4, r5, pc}
 801d1ba:	bf00      	nop
 801d1bc:	20000430 	.word	0x20000430

0801d1c0 <__ieee754_atan2>:
 801d1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d1c4:	ec57 6b11 	vmov	r6, r7, d1
 801d1c8:	4273      	negs	r3, r6
 801d1ca:	f8df e184 	ldr.w	lr, [pc, #388]	; 801d350 <__ieee754_atan2+0x190>
 801d1ce:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801d1d2:	4333      	orrs	r3, r6
 801d1d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801d1d8:	4573      	cmp	r3, lr
 801d1da:	ec51 0b10 	vmov	r0, r1, d0
 801d1de:	ee11 8a10 	vmov	r8, s2
 801d1e2:	d80a      	bhi.n	801d1fa <__ieee754_atan2+0x3a>
 801d1e4:	4244      	negs	r4, r0
 801d1e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801d1ea:	4304      	orrs	r4, r0
 801d1ec:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801d1f0:	4574      	cmp	r4, lr
 801d1f2:	ee10 9a10 	vmov	r9, s0
 801d1f6:	468c      	mov	ip, r1
 801d1f8:	d907      	bls.n	801d20a <__ieee754_atan2+0x4a>
 801d1fa:	4632      	mov	r2, r6
 801d1fc:	463b      	mov	r3, r7
 801d1fe:	f7e3 f845 	bl	800028c <__adddf3>
 801d202:	ec41 0b10 	vmov	d0, r0, r1
 801d206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d20a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801d20e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801d212:	4334      	orrs	r4, r6
 801d214:	d103      	bne.n	801d21e <__ieee754_atan2+0x5e>
 801d216:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d21a:	f7ff bdf1 	b.w	801ce00 <atan>
 801d21e:	17bc      	asrs	r4, r7, #30
 801d220:	f004 0402 	and.w	r4, r4, #2
 801d224:	ea53 0909 	orrs.w	r9, r3, r9
 801d228:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801d22c:	d107      	bne.n	801d23e <__ieee754_atan2+0x7e>
 801d22e:	2c02      	cmp	r4, #2
 801d230:	d060      	beq.n	801d2f4 <__ieee754_atan2+0x134>
 801d232:	2c03      	cmp	r4, #3
 801d234:	d1e5      	bne.n	801d202 <__ieee754_atan2+0x42>
 801d236:	a142      	add	r1, pc, #264	; (adr r1, 801d340 <__ieee754_atan2+0x180>)
 801d238:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d23c:	e7e1      	b.n	801d202 <__ieee754_atan2+0x42>
 801d23e:	ea52 0808 	orrs.w	r8, r2, r8
 801d242:	d106      	bne.n	801d252 <__ieee754_atan2+0x92>
 801d244:	f1bc 0f00 	cmp.w	ip, #0
 801d248:	da5f      	bge.n	801d30a <__ieee754_atan2+0x14a>
 801d24a:	a13f      	add	r1, pc, #252	; (adr r1, 801d348 <__ieee754_atan2+0x188>)
 801d24c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d250:	e7d7      	b.n	801d202 <__ieee754_atan2+0x42>
 801d252:	4572      	cmp	r2, lr
 801d254:	d10f      	bne.n	801d276 <__ieee754_atan2+0xb6>
 801d256:	4293      	cmp	r3, r2
 801d258:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801d25c:	d107      	bne.n	801d26e <__ieee754_atan2+0xae>
 801d25e:	2c02      	cmp	r4, #2
 801d260:	d84c      	bhi.n	801d2fc <__ieee754_atan2+0x13c>
 801d262:	4b35      	ldr	r3, [pc, #212]	; (801d338 <__ieee754_atan2+0x178>)
 801d264:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801d268:	e9d4 0100 	ldrd	r0, r1, [r4]
 801d26c:	e7c9      	b.n	801d202 <__ieee754_atan2+0x42>
 801d26e:	2c02      	cmp	r4, #2
 801d270:	d848      	bhi.n	801d304 <__ieee754_atan2+0x144>
 801d272:	4b32      	ldr	r3, [pc, #200]	; (801d33c <__ieee754_atan2+0x17c>)
 801d274:	e7f6      	b.n	801d264 <__ieee754_atan2+0xa4>
 801d276:	4573      	cmp	r3, lr
 801d278:	d0e4      	beq.n	801d244 <__ieee754_atan2+0x84>
 801d27a:	1a9b      	subs	r3, r3, r2
 801d27c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801d280:	ea4f 5223 	mov.w	r2, r3, asr #20
 801d284:	da1e      	bge.n	801d2c4 <__ieee754_atan2+0x104>
 801d286:	2f00      	cmp	r7, #0
 801d288:	da01      	bge.n	801d28e <__ieee754_atan2+0xce>
 801d28a:	323c      	adds	r2, #60	; 0x3c
 801d28c:	db1e      	blt.n	801d2cc <__ieee754_atan2+0x10c>
 801d28e:	4632      	mov	r2, r6
 801d290:	463b      	mov	r3, r7
 801d292:	f7e3 fadb 	bl	800084c <__aeabi_ddiv>
 801d296:	ec41 0b10 	vmov	d0, r0, r1
 801d29a:	f7ff ff51 	bl	801d140 <fabs>
 801d29e:	f7ff fdaf 	bl	801ce00 <atan>
 801d2a2:	ec51 0b10 	vmov	r0, r1, d0
 801d2a6:	2c01      	cmp	r4, #1
 801d2a8:	d013      	beq.n	801d2d2 <__ieee754_atan2+0x112>
 801d2aa:	2c02      	cmp	r4, #2
 801d2ac:	d015      	beq.n	801d2da <__ieee754_atan2+0x11a>
 801d2ae:	2c00      	cmp	r4, #0
 801d2b0:	d0a7      	beq.n	801d202 <__ieee754_atan2+0x42>
 801d2b2:	a319      	add	r3, pc, #100	; (adr r3, 801d318 <__ieee754_atan2+0x158>)
 801d2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2b8:	f7e2 ffe6 	bl	8000288 <__aeabi_dsub>
 801d2bc:	a318      	add	r3, pc, #96	; (adr r3, 801d320 <__ieee754_atan2+0x160>)
 801d2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2c2:	e014      	b.n	801d2ee <__ieee754_atan2+0x12e>
 801d2c4:	a118      	add	r1, pc, #96	; (adr r1, 801d328 <__ieee754_atan2+0x168>)
 801d2c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2ca:	e7ec      	b.n	801d2a6 <__ieee754_atan2+0xe6>
 801d2cc:	2000      	movs	r0, #0
 801d2ce:	2100      	movs	r1, #0
 801d2d0:	e7e9      	b.n	801d2a6 <__ieee754_atan2+0xe6>
 801d2d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801d2d6:	4619      	mov	r1, r3
 801d2d8:	e793      	b.n	801d202 <__ieee754_atan2+0x42>
 801d2da:	a30f      	add	r3, pc, #60	; (adr r3, 801d318 <__ieee754_atan2+0x158>)
 801d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2e0:	f7e2 ffd2 	bl	8000288 <__aeabi_dsub>
 801d2e4:	4602      	mov	r2, r0
 801d2e6:	460b      	mov	r3, r1
 801d2e8:	a10d      	add	r1, pc, #52	; (adr r1, 801d320 <__ieee754_atan2+0x160>)
 801d2ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2ee:	f7e2 ffcb 	bl	8000288 <__aeabi_dsub>
 801d2f2:	e786      	b.n	801d202 <__ieee754_atan2+0x42>
 801d2f4:	a10a      	add	r1, pc, #40	; (adr r1, 801d320 <__ieee754_atan2+0x160>)
 801d2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d2fa:	e782      	b.n	801d202 <__ieee754_atan2+0x42>
 801d2fc:	a10c      	add	r1, pc, #48	; (adr r1, 801d330 <__ieee754_atan2+0x170>)
 801d2fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d302:	e77e      	b.n	801d202 <__ieee754_atan2+0x42>
 801d304:	2000      	movs	r0, #0
 801d306:	2100      	movs	r1, #0
 801d308:	e77b      	b.n	801d202 <__ieee754_atan2+0x42>
 801d30a:	a107      	add	r1, pc, #28	; (adr r1, 801d328 <__ieee754_atan2+0x168>)
 801d30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d310:	e777      	b.n	801d202 <__ieee754_atan2+0x42>
 801d312:	bf00      	nop
 801d314:	f3af 8000 	nop.w
 801d318:	33145c07 	.word	0x33145c07
 801d31c:	3ca1a626 	.word	0x3ca1a626
 801d320:	54442d18 	.word	0x54442d18
 801d324:	400921fb 	.word	0x400921fb
 801d328:	54442d18 	.word	0x54442d18
 801d32c:	3ff921fb 	.word	0x3ff921fb
 801d330:	54442d18 	.word	0x54442d18
 801d334:	3fe921fb 	.word	0x3fe921fb
 801d338:	08022528 	.word	0x08022528
 801d33c:	08022540 	.word	0x08022540
 801d340:	54442d18 	.word	0x54442d18
 801d344:	c00921fb 	.word	0xc00921fb
 801d348:	54442d18 	.word	0x54442d18
 801d34c:	bff921fb 	.word	0xbff921fb
 801d350:	7ff00000 	.word	0x7ff00000

0801d354 <__ieee754_sqrt>:
 801d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d358:	ec55 4b10 	vmov	r4, r5, d0
 801d35c:	4e56      	ldr	r6, [pc, #344]	; (801d4b8 <__ieee754_sqrt+0x164>)
 801d35e:	43ae      	bics	r6, r5
 801d360:	ee10 0a10 	vmov	r0, s0
 801d364:	ee10 3a10 	vmov	r3, s0
 801d368:	4629      	mov	r1, r5
 801d36a:	462a      	mov	r2, r5
 801d36c:	d110      	bne.n	801d390 <__ieee754_sqrt+0x3c>
 801d36e:	ee10 2a10 	vmov	r2, s0
 801d372:	462b      	mov	r3, r5
 801d374:	f7e3 f940 	bl	80005f8 <__aeabi_dmul>
 801d378:	4602      	mov	r2, r0
 801d37a:	460b      	mov	r3, r1
 801d37c:	4620      	mov	r0, r4
 801d37e:	4629      	mov	r1, r5
 801d380:	f7e2 ff84 	bl	800028c <__adddf3>
 801d384:	4604      	mov	r4, r0
 801d386:	460d      	mov	r5, r1
 801d388:	ec45 4b10 	vmov	d0, r4, r5
 801d38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d390:	2d00      	cmp	r5, #0
 801d392:	dc10      	bgt.n	801d3b6 <__ieee754_sqrt+0x62>
 801d394:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801d398:	4330      	orrs	r0, r6
 801d39a:	d0f5      	beq.n	801d388 <__ieee754_sqrt+0x34>
 801d39c:	b15d      	cbz	r5, 801d3b6 <__ieee754_sqrt+0x62>
 801d39e:	ee10 2a10 	vmov	r2, s0
 801d3a2:	462b      	mov	r3, r5
 801d3a4:	ee10 0a10 	vmov	r0, s0
 801d3a8:	f7e2 ff6e 	bl	8000288 <__aeabi_dsub>
 801d3ac:	4602      	mov	r2, r0
 801d3ae:	460b      	mov	r3, r1
 801d3b0:	f7e3 fa4c 	bl	800084c <__aeabi_ddiv>
 801d3b4:	e7e6      	b.n	801d384 <__ieee754_sqrt+0x30>
 801d3b6:	1509      	asrs	r1, r1, #20
 801d3b8:	d076      	beq.n	801d4a8 <__ieee754_sqrt+0x154>
 801d3ba:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801d3be:	07ce      	lsls	r6, r1, #31
 801d3c0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801d3c4:	bf5e      	ittt	pl
 801d3c6:	0fda      	lsrpl	r2, r3, #31
 801d3c8:	005b      	lslpl	r3, r3, #1
 801d3ca:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801d3ce:	0fda      	lsrs	r2, r3, #31
 801d3d0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801d3d4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801d3d8:	2000      	movs	r0, #0
 801d3da:	106d      	asrs	r5, r5, #1
 801d3dc:	005b      	lsls	r3, r3, #1
 801d3de:	f04f 0e16 	mov.w	lr, #22
 801d3e2:	4684      	mov	ip, r0
 801d3e4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801d3e8:	eb0c 0401 	add.w	r4, ip, r1
 801d3ec:	4294      	cmp	r4, r2
 801d3ee:	bfde      	ittt	le
 801d3f0:	1b12      	suble	r2, r2, r4
 801d3f2:	eb04 0c01 	addle.w	ip, r4, r1
 801d3f6:	1840      	addle	r0, r0, r1
 801d3f8:	0052      	lsls	r2, r2, #1
 801d3fa:	f1be 0e01 	subs.w	lr, lr, #1
 801d3fe:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801d402:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801d406:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d40a:	d1ed      	bne.n	801d3e8 <__ieee754_sqrt+0x94>
 801d40c:	4671      	mov	r1, lr
 801d40e:	2720      	movs	r7, #32
 801d410:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801d414:	4562      	cmp	r2, ip
 801d416:	eb04 060e 	add.w	r6, r4, lr
 801d41a:	dc02      	bgt.n	801d422 <__ieee754_sqrt+0xce>
 801d41c:	d113      	bne.n	801d446 <__ieee754_sqrt+0xf2>
 801d41e:	429e      	cmp	r6, r3
 801d420:	d811      	bhi.n	801d446 <__ieee754_sqrt+0xf2>
 801d422:	2e00      	cmp	r6, #0
 801d424:	eb06 0e04 	add.w	lr, r6, r4
 801d428:	da43      	bge.n	801d4b2 <__ieee754_sqrt+0x15e>
 801d42a:	f1be 0f00 	cmp.w	lr, #0
 801d42e:	db40      	blt.n	801d4b2 <__ieee754_sqrt+0x15e>
 801d430:	f10c 0801 	add.w	r8, ip, #1
 801d434:	eba2 020c 	sub.w	r2, r2, ip
 801d438:	429e      	cmp	r6, r3
 801d43a:	bf88      	it	hi
 801d43c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801d440:	1b9b      	subs	r3, r3, r6
 801d442:	4421      	add	r1, r4
 801d444:	46c4      	mov	ip, r8
 801d446:	0052      	lsls	r2, r2, #1
 801d448:	3f01      	subs	r7, #1
 801d44a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801d44e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801d452:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801d456:	d1dd      	bne.n	801d414 <__ieee754_sqrt+0xc0>
 801d458:	4313      	orrs	r3, r2
 801d45a:	d006      	beq.n	801d46a <__ieee754_sqrt+0x116>
 801d45c:	1c4c      	adds	r4, r1, #1
 801d45e:	bf13      	iteet	ne
 801d460:	3101      	addne	r1, #1
 801d462:	3001      	addeq	r0, #1
 801d464:	4639      	moveq	r1, r7
 801d466:	f021 0101 	bicne.w	r1, r1, #1
 801d46a:	1043      	asrs	r3, r0, #1
 801d46c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801d470:	0849      	lsrs	r1, r1, #1
 801d472:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801d476:	07c2      	lsls	r2, r0, #31
 801d478:	bf48      	it	mi
 801d47a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801d47e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801d482:	460c      	mov	r4, r1
 801d484:	463d      	mov	r5, r7
 801d486:	e77f      	b.n	801d388 <__ieee754_sqrt+0x34>
 801d488:	0ada      	lsrs	r2, r3, #11
 801d48a:	3815      	subs	r0, #21
 801d48c:	055b      	lsls	r3, r3, #21
 801d48e:	2a00      	cmp	r2, #0
 801d490:	d0fa      	beq.n	801d488 <__ieee754_sqrt+0x134>
 801d492:	02d7      	lsls	r7, r2, #11
 801d494:	d50a      	bpl.n	801d4ac <__ieee754_sqrt+0x158>
 801d496:	f1c1 0420 	rsb	r4, r1, #32
 801d49a:	fa23 f404 	lsr.w	r4, r3, r4
 801d49e:	1e4d      	subs	r5, r1, #1
 801d4a0:	408b      	lsls	r3, r1
 801d4a2:	4322      	orrs	r2, r4
 801d4a4:	1b41      	subs	r1, r0, r5
 801d4a6:	e788      	b.n	801d3ba <__ieee754_sqrt+0x66>
 801d4a8:	4608      	mov	r0, r1
 801d4aa:	e7f0      	b.n	801d48e <__ieee754_sqrt+0x13a>
 801d4ac:	0052      	lsls	r2, r2, #1
 801d4ae:	3101      	adds	r1, #1
 801d4b0:	e7ef      	b.n	801d492 <__ieee754_sqrt+0x13e>
 801d4b2:	46e0      	mov	r8, ip
 801d4b4:	e7be      	b.n	801d434 <__ieee754_sqrt+0xe0>
 801d4b6:	bf00      	nop
 801d4b8:	7ff00000 	.word	0x7ff00000

0801d4bc <_init>:
 801d4bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4be:	bf00      	nop
 801d4c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d4c2:	bc08      	pop	{r3}
 801d4c4:	469e      	mov	lr, r3
 801d4c6:	4770      	bx	lr

0801d4c8 <_fini>:
 801d4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4ca:	bf00      	nop
 801d4cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d4ce:	bc08      	pop	{r3}
 801d4d0:	469e      	mov	lr, r3
 801d4d2:	4770      	bx	lr

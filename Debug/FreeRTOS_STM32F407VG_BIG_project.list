
FreeRTOS_STM32F407VG_BIG_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bdd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fa0  0801bf68  0801bf68  0002bf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020f08  08020f08  00040430  2**0
                  CONTENTS
  4 .ARM          00000008  08020f08  08020f08  00030f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020f10  08020f10  00040430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020f10  08020f10  00030f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08020f14  08020f14  00030f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  08020f18  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040430  2**0
                  CONTENTS
 10 .bss          00014fd8  20000430  20000430  00040430  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20015408  20015408  00040430  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040430  2**0
                  CONTENTS, READONLY
 13 .debug_info   000400e7  00000000  00000000  00040460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000818a  00000000  00000000  00080547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000028e0  00000000  00000000  000886d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002590  00000000  00000000  0008afb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0da  00000000  00000000  0008d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003b6d0  00000000  00000000  000ba622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7fd4  00000000  00000000  000f5cf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001ddcc6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000bcc4  00000000  00000000  001ddd1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000430 	.word	0x20000430
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bf4c 	.word	0x0801bf4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000434 	.word	0x20000434
 80001cc:	0801bf4c 	.word	0x0801bf4c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8000f86:	2310      	movs	r3, #16
 8000f88:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8000f8e:	e019      	b.n	8000fc4 <TP_Read+0x44>
    {
        value <<= 1;
 8000f90:	88bb      	ldrh	r3, [r7, #4]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8000f96:	2201      	movs	r2, #1
 8000f98:	2180      	movs	r1, #128	; 0x80
 8000f9a:	480e      	ldr	r0, [pc, #56]	; (8000fd4 <TP_Read+0x54>)
 8000f9c:	f007 f8ce 	bl	800813c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2180      	movs	r1, #128	; 0x80
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <TP_Read+0x54>)
 8000fa6:	f007 f8c9 	bl	800813c <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8000faa:	2101      	movs	r1, #1
 8000fac:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <TP_Read+0x58>)
 8000fae:	f007 f8ad 	bl	800810c <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <TP_Read+0x3e>
        {
            value++;
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1e2      	bne.n	8000f90 <TP_Read+0x10>
    };

    return value;
 8000fca:	88bb      	ldrh	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	40021000 	.word	0x40021000

08000fdc <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8000fe6:	2308      	movs	r3, #8
 8000fe8:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2180      	movs	r1, #128	; 0x80
 8000fee:	4815      	ldr	r0, [pc, #84]	; (8001044 <TP_Write+0x68>)
 8000ff0:	f007 f8a4 	bl	800813c <HAL_GPIO_WritePin>

    while(i > 0)
 8000ff4:	e01e      	b.n	8001034 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da05      	bge.n	800100a <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8000ffe:	2201      	movs	r2, #1
 8001000:	2104      	movs	r1, #4
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <TP_Write+0x6c>)
 8001004:	f007 f89a 	bl	800813c <HAL_GPIO_WritePin>
 8001008:	e004      	b.n	8001014 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2104      	movs	r1, #4
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <TP_Write+0x6c>)
 8001010:	f007 f894 	bl	800813c <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2180      	movs	r1, #128	; 0x80
 800101e:	4809      	ldr	r0, [pc, #36]	; (8001044 <TP_Write+0x68>)
 8001020:	f007 f88c 	bl	800813c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8001024:	2200      	movs	r2, #0
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	4806      	ldr	r0, [pc, #24]	; (8001044 <TP_Write+0x68>)
 800102a:	f007 f887 	bl	800813c <HAL_GPIO_WritePin>
        i--;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3b01      	subs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d1dd      	bne.n	8000ff6 <TP_Write+0x1a>
    };
}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020400 	.word	0x40020400
 8001048:	40021000 	.word	0x40021000
 800104c:	00000000 	.word	0x00000000

08001050 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	; 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	4862      	ldr	r0, [pc, #392]	; (80011e8 <TP_Read_Coordinates+0x198>)
 800105e:	f007 f86d 	bl	800813c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	2104      	movs	r1, #4
 8001066:	4861      	ldr	r0, [pc, #388]	; (80011ec <TP_Read_Coordinates+0x19c>)
 8001068:	f007 f868 	bl	800813c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001072:	485d      	ldr	r0, [pc, #372]	; (80011e8 <TP_Read_Coordinates+0x198>)
 8001074:	f007 f862 	bl	800813c <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 8001080:	2300      	movs	r3, #0
 8001082:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8001090:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001094:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 800109a:	2200      	movs	r2, #0
 800109c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010a0:	4851      	ldr	r0, [pc, #324]	; (80011e8 <TP_Read_Coordinates+0x198>)
 80010a2:	f007 f84b 	bl	800813c <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80010a6:	e023      	b.n	80010f0 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 80010a8:	2090      	movs	r0, #144	; 0x90
 80010aa:	f7ff ff97 	bl	8000fdc <TP_Write>

		rawy = TP_Read();
 80010ae:	f7ff ff67 	bl	8000f80 <TP_Read>
 80010b2:	4603      	mov	r3, r0
 80010b4:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	6a3a      	ldr	r2, [r7, #32]
 80010ba:	4413      	add	r3, r2
 80010bc:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80010be:	89bb      	ldrh	r3, [r7, #12]
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4413      	add	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 80010c6:	20d0      	movs	r0, #208	; 0xd0
 80010c8:	f7ff ff88 	bl	8000fdc <TP_Write>
        rawx = TP_Read();
 80010cc:	f7ff ff58 	bl	8000f80 <TP_Read>
 80010d0:	4603      	mov	r3, r0
 80010d2:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 80010d4:	89fb      	ldrh	r3, [r7, #14]
 80010d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010d8:	4413      	add	r3, r2
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 80010dc:	89fb      	ldrh	r3, [r7, #14]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
        samples--;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
		counted_samples++;
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	3301      	adds	r3, #1
 80010ee:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d007      	beq.n	8001106 <TP_Read_Coordinates+0xb6>
 80010f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010fa:	483d      	ldr	r0, [pc, #244]	; (80011f0 <TP_Read_Coordinates+0x1a0>)
 80010fc:	f007 f806 	bl	800810c <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d0d0      	beq.n	80010a8 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110c:	4836      	ldr	r0, [pc, #216]	; (80011e8 <TP_Read_Coordinates+0x198>)
 800110e:	f007 f815 	bl	800813c <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001118:	d154      	bne.n	80011c4 <TP_Read_Coordinates+0x174>
 800111a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111e:	4834      	ldr	r0, [pc, #208]	; (80011f0 <TP_Read_Coordinates+0x1a0>)
 8001120:	f006 fff4 	bl	800810c <HAL_GPIO_ReadPin>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d14c      	bne.n	80011c4 <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 8001146:	89fb      	ldrh	r3, [r7, #14]
 8001148:	425b      	negs	r3, r3
 800114a:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 800114c:	89bb      	ldrh	r3, [r7, #12]
 800114e:	425b      	negs	r3, r3
 8001150:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8001152:	89fa      	ldrh	r2, [r7, #14]
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <TP_Read_Coordinates+0x1a4>)
 8001156:	fba3 1302 	umull	r1, r3, r3, r2
 800115a:	1ad2      	subs	r2, r2, r3
 800115c:	0852      	lsrs	r2, r2, #1
 800115e:	4413      	add	r3, r2
 8001160:	0a1b      	lsrs	r3, r3, #8
 8001162:	b29b      	uxth	r3, r3
 8001164:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9db 	bl	8000524 <__aeabi_i2d>
 800116e:	a31c      	add	r3, pc, #112	; (adr r3, 80011e0 <TP_Read_Coordinates+0x190>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fa40 	bl	80005f8 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	1c9c      	adds	r4, r3, #2
 8001184:	f7ff fd10 	bl	8000ba8 <__aeabi_d2uiz>
 8001188:	4603      	mov	r3, r0
 800118a:	b29b      	uxth	r3, r3
 800118c:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <TP_Read_Coordinates+0x1a8>)
 8001192:	fba2 2303 	umull	r2, r3, r2, r3
 8001196:	09db      	lsrs	r3, r3, #7
 8001198:	b29b      	uxth	r3, r3
 800119a:	3b0f      	subs	r3, #15
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f9c1 	bl	8000524 <__aeabi_i2d>
 80011a2:	a30f      	add	r3, pc, #60	; (adr r3, 80011e0 <TP_Read_Coordinates+0x190>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa26 	bl	80005f8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fcf8 	bl	8000ba8 <__aeabi_d2uiz>
 80011b8:	4603      	mov	r3, r0
 80011ba:	b29a      	uxth	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e007      	b.n	80011d4 <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3302      	adds	r3, #2
 80011ce:	2200      	movs	r2, #0
 80011d0:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80011d2:	2300      	movs	r3, #0
		}
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	372c      	adds	r7, #44	; 0x2c
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	f3af 8000 	nop.w
 80011e0:	28f5c28f 	.word	0x28f5c28f
 80011e4:	3ff28f5c 	.word	0x3ff28f5c
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40020800 	.word	0x40020800
 80011f4:	e01e01e1 	.word	0xe01e01e1
 80011f8:	a0a0a0a1 	.word	0xa0a0a0a1

080011fc <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8001200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <TP_Touchpad_Pressed+0x20>)
 8001206:	f006 ff81 	bl	800810c <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8001214:	2300      	movs	r3, #0
	}
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40020800 	.word	0x40020800

08001220 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8001224:	4b16      	ldr	r3, [pc, #88]	; (8001280 <TFT9341_FontsIni+0x60>)
 8001226:	2208      	movs	r2, #8
 8001228:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 800122a:	4b15      	ldr	r3, [pc, #84]	; (8001280 <TFT9341_FontsIni+0x60>)
 800122c:	2205      	movs	r2, #5
 800122e:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <TFT9341_FontsIni+0x64>)
 8001232:	220c      	movs	r2, #12
 8001234:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <TFT9341_FontsIni+0x64>)
 8001238:	2207      	movs	r2, #7
 800123a:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <TFT9341_FontsIni+0x68>)
 800123e:	2210      	movs	r2, #16
 8001240:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <TFT9341_FontsIni+0x68>)
 8001244:	220b      	movs	r2, #11
 8001246:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8001248:	4b10      	ldr	r3, [pc, #64]	; (800128c <TFT9341_FontsIni+0x6c>)
 800124a:	2214      	movs	r2, #20
 800124c:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 800124e:	4b0f      	ldr	r3, [pc, #60]	; (800128c <TFT9341_FontsIni+0x6c>)
 8001250:	220e      	movs	r2, #14
 8001252:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 8001254:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <TFT9341_FontsIni+0x70>)
 8001256:	2218      	movs	r2, #24
 8001258:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <TFT9341_FontsIni+0x70>)
 800125c:	2211      	movs	r2, #17
 800125e:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 8001266:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001268:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800126c:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <TFT9341_FontsIni+0x74>)
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <TFT9341_FontsIni+0x68>)
 8001272:	605a      	str	r2, [r3, #4]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000020 	.word	0x20000020
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000010 	.word	0x20000010
 8001290:	20000018 	.word	0x20000018
 8001294:	20007710 	.word	0x20007710

08001298 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 80012a2:	2201      	movs	r2, #1
 80012a4:	2140      	movs	r1, #64	; 0x40
 80012a6:	4807      	ldr	r0, [pc, #28]	; (80012c4 <TFT9341_SendData+0x2c>)
 80012a8:	f006 ff48 	bl	800813c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 80012ac:	1df9      	adds	r1, r7, #7
 80012ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80012b2:	2201      	movs	r2, #1
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <TFT9341_SendData+0x30>)
 80012b6:	f00a ffaa 	bl	800c20e <HAL_SPI_Transmit>
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	2000aad8 	.word	0x2000aad8

080012cc <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 80012d6:	2200      	movs	r2, #0
 80012d8:	2140      	movs	r1, #64	; 0x40
 80012da:	4807      	ldr	r0, [pc, #28]	; (80012f8 <TFT9341_SendCommand+0x2c>)
 80012dc:	f006 ff2e 	bl	800813c <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 80012e0:	1df9      	adds	r1, r7, #7
 80012e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012e6:	2201      	movs	r2, #1
 80012e8:	4804      	ldr	r0, [pc, #16]	; (80012fc <TFT9341_SendCommand+0x30>)
 80012ea:	f00a ff90 	bl	800c20e <HAL_SPI_Transmit>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40021000 	.word	0x40021000
 80012fc:	2000aad8 	.word	0x2000aad8

08001300 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 8001304:	2200      	movs	r2, #0
 8001306:	2120      	movs	r1, #32
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <TFT9341_reset+0x24>)
 800130a:	f006 ff17 	bl	800813c <HAL_GPIO_WritePin>
	osDelay(5);
 800130e:	2005      	movs	r0, #5
 8001310:	f012 ff7a 	bl	8014208 <osDelay>
	RESET_IDLE();
 8001314:	2201      	movs	r2, #1
 8001316:	2120      	movs	r1, #32
 8001318:	4802      	ldr	r0, [pc, #8]	; (8001324 <TFT9341_reset+0x24>)
 800131a:	f006 ff0f 	bl	800813c <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40021000 	.word	0x40021000

08001328 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	80fb      	strh	r3, [r7, #6]
 8001334:	4613      	mov	r3, r2
 8001336:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8001338:	2200      	movs	r2, #0
 800133a:	2110      	movs	r1, #16
 800133c:	48a3      	ldr	r0, [pc, #652]	; (80015cc <TFT9341_ini+0x2a4>)
 800133e:	f006 fefd 	bl	800813c <HAL_GPIO_WritePin>
  TFT9341_reset();
 8001342:	f7ff ffdd 	bl	8001300 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 8001346:	2001      	movs	r0, #1
 8001348:	f7ff ffc0 	bl	80012cc <TFT9341_SendCommand>
  osDelay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f012 ff5a 	bl	8014208 <osDelay>

  //Power Control A
    data[0] = 0x39;
 8001354:	2339      	movs	r3, #57	; 0x39
 8001356:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 8001358:	232c      	movs	r3, #44	; 0x2c
 800135a:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 800135c:	2300      	movs	r3, #0
 800135e:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 8001360:	2334      	movs	r3, #52	; 0x34
 8001362:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 8001364:	2302      	movs	r3, #2
 8001366:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 8001368:	20cb      	movs	r0, #203	; 0xcb
 800136a:	f7ff ffaf 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 800136e:	f107 0308 	add.w	r3, r7, #8
 8001372:	2105      	movs	r1, #5
 8001374:	4618      	mov	r0, r3
 8001376:	f000 f92f 	bl	80015d8 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 800137e:	23c1      	movs	r3, #193	; 0xc1
 8001380:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 8001382:	2330      	movs	r3, #48	; 0x30
 8001384:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 8001386:	20cf      	movs	r0, #207	; 0xcf
 8001388:	f7ff ffa0 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	2103      	movs	r1, #3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f920 	bl	80015d8 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 8001398:	2385      	movs	r3, #133	; 0x85
 800139a:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 800139c:	2300      	movs	r3, #0
 800139e:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 80013a0:	2378      	movs	r3, #120	; 0x78
 80013a2:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 80013a4:	20e8      	movs	r0, #232	; 0xe8
 80013a6:	f7ff ff91 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	2103      	movs	r1, #3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f911 	bl	80015d8 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 80013b6:	2300      	movs	r3, #0
 80013b8:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 80013be:	20ea      	movs	r0, #234	; 0xea
 80013c0:	f7ff ff84 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80013c4:	f107 0308 	add.w	r3, r7, #8
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f904 	bl	80015d8 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 80013d0:	2364      	movs	r3, #100	; 0x64
 80013d2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 80013d4:	2303      	movs	r3, #3
 80013d6:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 80013d8:	2312      	movs	r3, #18
 80013da:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 80013dc:	2381      	movs	r3, #129	; 0x81
 80013de:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 80013e0:	20ed      	movs	r0, #237	; 0xed
 80013e2:	f7ff ff73 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 80013e6:	f107 0308 	add.w	r3, r7, #8
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 f8f3 	bl	80015d8 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 80013f2:	2320      	movs	r3, #32
 80013f4:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 80013f6:	20f7      	movs	r0, #247	; 0xf7
 80013f8:	f7ff ff68 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	2101      	movs	r1, #1
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f8e8 	bl	80015d8 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8001408:	2310      	movs	r3, #16
 800140a:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 800140c:	20c0      	movs	r0, #192	; 0xc0
 800140e:	f7ff ff5d 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2101      	movs	r1, #1
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8dd 	bl	80015d8 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 800141e:	2310      	movs	r3, #16
 8001420:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8001422:	20c1      	movs	r0, #193	; 0xc1
 8001424:	f7ff ff52 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2101      	movs	r1, #1
 800142e:	4618      	mov	r0, r3
 8001430:	f000 f8d2 	bl	80015d8 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8001434:	233e      	movs	r3, #62	; 0x3e
 8001436:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8001438:	2328      	movs	r3, #40	; 0x28
 800143a:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 800143c:	20c5      	movs	r0, #197	; 0xc5
 800143e:	f7ff ff45 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	2102      	movs	r1, #2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f8c5 	bl	80015d8 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 800144e:	2386      	movs	r3, #134	; 0x86
 8001450:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 8001452:	20c7      	movs	r0, #199	; 0xc7
 8001454:	f7ff ff3a 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2101      	movs	r1, #1
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f8ba 	bl	80015d8 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 8001464:	2348      	movs	r3, #72	; 0x48
 8001466:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 8001468:	2036      	movs	r0, #54	; 0x36
 800146a:	f7ff ff2f 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2101      	movs	r1, #1
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f8af 	bl	80015d8 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 800147a:	2355      	movs	r3, #85	; 0x55
 800147c:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 800147e:	203a      	movs	r0, #58	; 0x3a
 8001480:	f7ff ff24 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2101      	movs	r1, #1
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f8a4 	bl	80015d8 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 8001490:	2300      	movs	r3, #0
 8001492:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 8001494:	2318      	movs	r3, #24
 8001496:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 8001498:	20b1      	movs	r0, #177	; 0xb1
 800149a:	f7ff ff17 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	2102      	movs	r1, #2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f897 	bl	80015d8 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 80014aa:	2308      	movs	r3, #8
 80014ac:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 80014ae:	2382      	movs	r3, #130	; 0x82
 80014b0:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 80014b2:	2327      	movs	r3, #39	; 0x27
 80014b4:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 80014b6:	20b6      	movs	r0, #182	; 0xb6
 80014b8:	f7ff ff08 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2103      	movs	r1, #3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f888 	bl	80015d8 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 80014c8:	2300      	movs	r3, #0
 80014ca:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 80014cc:	20f2      	movs	r0, #242	; 0xf2
 80014ce:	f7ff fefd 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	2101      	movs	r1, #1
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 f87d 	bl	80015d8 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 80014de:	2301      	movs	r3, #1
 80014e0:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 80014e2:	2026      	movs	r0, #38	; 0x26
 80014e4:	f7ff fef2 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	2101      	movs	r1, #1
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f872 	bl	80015d8 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 80014f4:	230f      	movs	r3, #15
 80014f6:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 80014f8:	2331      	movs	r3, #49	; 0x31
 80014fa:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 80014fc:	232b      	movs	r3, #43	; 0x2b
 80014fe:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8001500:	230c      	movs	r3, #12
 8001502:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8001504:	230e      	movs	r3, #14
 8001506:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8001508:	2308      	movs	r3, #8
 800150a:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 800150c:	234e      	movs	r3, #78	; 0x4e
 800150e:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8001510:	23f1      	movs	r3, #241	; 0xf1
 8001512:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8001514:	2337      	movs	r3, #55	; 0x37
 8001516:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8001518:	2307      	movs	r3, #7
 800151a:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 800151c:	2310      	movs	r3, #16
 800151e:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8001520:	2303      	movs	r3, #3
 8001522:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8001524:	230e      	movs	r3, #14
 8001526:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8001528:	2309      	movs	r3, #9
 800152a:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 800152c:	2300      	movs	r3, #0
 800152e:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8001530:	20e0      	movs	r0, #224	; 0xe0
 8001532:	f7ff fecb 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	210f      	movs	r1, #15
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f84b 	bl	80015d8 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 8001542:	2300      	movs	r3, #0
 8001544:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 8001546:	230e      	movs	r3, #14
 8001548:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 800154a:	2314      	movs	r3, #20
 800154c:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 800154e:	2303      	movs	r3, #3
 8001550:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 8001552:	2311      	movs	r3, #17
 8001554:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 8001556:	2307      	movs	r3, #7
 8001558:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 800155a:	2331      	movs	r3, #49	; 0x31
 800155c:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 800155e:	23c1      	movs	r3, #193	; 0xc1
 8001560:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 8001562:	2348      	movs	r3, #72	; 0x48
 8001564:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 8001566:	2308      	movs	r3, #8
 8001568:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 800156a:	230f      	movs	r3, #15
 800156c:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 800156e:	230c      	movs	r3, #12
 8001570:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 8001572:	2331      	movs	r3, #49	; 0x31
 8001574:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 8001576:	2336      	movs	r3, #54	; 0x36
 8001578:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 800157a:	230f      	movs	r3, #15
 800157c:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 800157e:	20e1      	movs	r0, #225	; 0xe1
 8001580:	f7ff fea4 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8001584:	f107 0308 	add.w	r3, r7, #8
 8001588:	210f      	movs	r1, #15
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f824 	bl	80015d8 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8001590:	2011      	movs	r0, #17
 8001592:	f7ff fe9b 	bl	80012cc <TFT9341_SendCommand>

    osDelay(120);
 8001596:	2078      	movs	r0, #120	; 0x78
 8001598:	f012 fe36 	bl	8014208 <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 800159c:	2348      	movs	r3, #72	; 0x48
 800159e:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 80015a0:	2029      	movs	r0, #41	; 0x29
 80015a2:	f7ff fe93 	bl	80012cc <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	2101      	movs	r1, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 f813 	bl	80015d8 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 80015b2:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <TFT9341_ini+0x2a8>)
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 80015b8:	4a06      	ldr	r2, [pc, #24]	; (80015d4 <TFT9341_ini+0x2ac>)
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 80015be:	f7ff fe2f 	bl	8001220 <TFT9341_FontsIni>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	2000770e 	.word	0x2000770e
 80015d4:	2000770c 	.word	0x2000770c

080015d8 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80015e2:	2201      	movs	r2, #1
 80015e4:	2140      	movs	r1, #64	; 0x40
 80015e6:	4811      	ldr	r0, [pc, #68]	; (800162c <TFT9341_WriteData+0x54>)
 80015e8:	f006 fda8 	bl	800813c <HAL_GPIO_WritePin>
	while(buff_size > 0)
 80015ec:	e015      	b.n	800161a <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015f4:	bf28      	it	cs
 80015f6:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80015fa:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 80015fc:	89fa      	ldrh	r2, [r7, #14]
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	480a      	ldr	r0, [pc, #40]	; (8001630 <TFT9341_WriteData+0x58>)
 8001606:	f00a fe02 	bl	800c20e <HAL_SPI_Transmit>
		buff += chunk_size;
 800160a:	89fb      	ldrh	r3, [r7, #14]
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4413      	add	r3, r2
 8001610:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	683a      	ldr	r2, [r7, #0]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1e6      	bne.n	80015ee <TFT9341_WriteData+0x16>
	}
}
 8001620:	bf00      	nop
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	2000aad8 	.word	0x2000aad8

08001634 <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	4604      	mov	r4, r0
 800163c:	4608      	mov	r0, r1
 800163e:	4611      	mov	r1, r2
 8001640:	461a      	mov	r2, r3
 8001642:	4623      	mov	r3, r4
 8001644:	80fb      	strh	r3, [r7, #6]
 8001646:	4603      	mov	r3, r0
 8001648:	80bb      	strh	r3, [r7, #4]
 800164a:	460b      	mov	r3, r1
 800164c:	807b      	strh	r3, [r7, #2]
 800164e:	4613      	mov	r3, r2
 8001650:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8001652:	202a      	movs	r0, #42	; 0x2a
 8001654:	f7ff fe3a 	bl	80012cc <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8001658:	88fb      	ldrh	r3, [r7, #6]
 800165a:	0a1b      	lsrs	r3, r3, #8
 800165c:	b29b      	uxth	r3, r3
 800165e:	b2db      	uxtb	r3, r3
 8001660:	733b      	strb	r3, [r7, #12]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	737b      	strb	r3, [r7, #13]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	b2db      	uxtb	r3, r3
 8001670:	73bb      	strb	r3, [r7, #14]
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8001678:	f107 030c 	add.w	r3, r7, #12
 800167c:	2104      	movs	r1, #4
 800167e:	4618      	mov	r0, r3
 8001680:	f7ff ffaa 	bl	80015d8 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8001684:	202b      	movs	r0, #43	; 0x2b
 8001686:	f7ff fe21 	bl	80012cc <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	0a1b      	lsrs	r3, r3, #8
 800168e:	b29b      	uxth	r3, r3
 8001690:	b2db      	uxtb	r3, r3
 8001692:	723b      	strb	r3, [r7, #8]
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	b2db      	uxtb	r3, r3
 8001698:	727b      	strb	r3, [r7, #9]
 800169a:	883b      	ldrh	r3, [r7, #0]
 800169c:	0a1b      	lsrs	r3, r3, #8
 800169e:	b29b      	uxth	r3, r3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	72bb      	strb	r3, [r7, #10]
 80016a4:	883b      	ldrh	r3, [r7, #0]
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2104      	movs	r1, #4
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff91 	bl	80015d8 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f7ff fe08 	bl	80012cc <TFT9341_SendCommand>
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 80016ce:	4b21      	ldr	r3, [pc, #132]	; (8001754 <TFT9341_FillScreen+0x90>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <TFT9341_FillScreen+0x94>)
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffa7 	bl	8001634 <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e011      	b.n	8001710 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	0a1b      	lsrs	r3, r3, #8
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	b2d1      	uxtb	r1, r2
 80016f8:	4a18      	ldr	r2, [pc, #96]	; (800175c <TFT9341_FillScreen+0x98>)
 80016fa:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	3301      	adds	r3, #1
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	b2d1      	uxtb	r1, r2
 8001706:	4a15      	ldr	r2, [pc, #84]	; (800175c <TFT9341_FillScreen+0x98>)
 8001708:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	3301      	adds	r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8001716:	d3e9      	bcc.n	80016ec <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8001718:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800171c:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 800171e:	2201      	movs	r2, #1
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	480f      	ldr	r0, [pc, #60]	; (8001760 <TFT9341_FillScreen+0x9c>)
 8001724:	f006 fd0a 	bl	800813c <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8001728:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <TFT9341_FillScreen+0xa0>)
 800172a:	2218      	movs	r2, #24
 800172c:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	b29b      	uxth	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	4909      	ldr	r1, [pc, #36]	; (800175c <TFT9341_FillScreen+0x98>)
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <TFT9341_FillScreen+0xa4>)
 8001738:	f00b f848 	bl	800c7cc <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 800173c:	bf00      	nop
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <TFT9341_FillScreen+0xa8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0fb      	beq.n	800173e <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <TFT9341_FillScreen+0xa8>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000770e 	.word	0x2000770e
 8001758:	2000770c 	.word	0x2000770c
 800175c:	2000044c 	.word	0x2000044c
 8001760:	40021000 	.word	0x40021000
 8001764:	2000002c 	.word	0x2000002c
 8001768:	2000aad8 	.word	0x2000aad8
 800176c:	20002840 	.word	0x20002840

08001770 <TFT9341_DrawPixel>:
{
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	4613      	mov	r3, r2
 800177c:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db28      	blt.n	80017d6 <TFT9341_DrawPixel+0x66>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2b00      	cmp	r3, #0
 8001788:	db25      	blt.n	80017d6 <TFT9341_DrawPixel+0x66>
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <TFT9341_DrawPixel+0x70>)
 800178c:	881b      	ldrh	r3, [r3, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4293      	cmp	r3, r2
 8001794:	da1f      	bge.n	80017d6 <TFT9341_DrawPixel+0x66>
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <TFT9341_DrawPixel+0x74>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	4293      	cmp	r3, r2
 80017a0:	da19      	bge.n	80017d6 <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	b298      	uxth	r0, r3
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	b299      	uxth	r1, r3
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	f7ff ff3f 	bl	8001634 <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 80017b6:	202c      	movs	r0, #44	; 0x2c
 80017b8:	f7ff fd88 	bl	80012cc <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 80017bc:	88fb      	ldrh	r3, [r7, #6]
 80017be:	0a1b      	lsrs	r3, r3, #8
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fd67 	bl	8001298 <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fd62 	bl	8001298 <TFT9341_SendData>
 80017d4:	e000      	b.n	80017d8 <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 80017d6:	bf00      	nop
}
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000770e 	.word	0x2000770e
 80017e4:	2000770c 	.word	0x2000770c

080017e8 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 80017f2:	4a04      	ldr	r2, [pc, #16]	; (8001804 <TFT9341_SetTextColor+0x1c>)
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	8013      	strh	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	20007710 	.word	0x20007710

08001808 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <TFT9341_SetBackColor+0x1c>)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	8053      	strh	r3, [r2, #2]
}
 8001818:	bf00      	nop
 800181a:	370c      	adds	r7, #12
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	20007710 	.word	0x20007710

08001828 <TFT9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	460b      	mov	r3, r1
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
  height = lcdprop.pFont->Height;
 8001846:	4b4e      	ldr	r3, [pc, #312]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	88db      	ldrh	r3, [r3, #6]
 800184c:	837b      	strh	r3, [r7, #26]
  width  = lcdprop.pFont->Width;
 800184e:	4b4c      	ldr	r3, [pc, #304]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	889b      	ldrh	r3, [r3, #4]
 8001854:	833b      	strh	r3, [r7, #24]
  offset = 8 *((width + 7)/8) -  width ;
 8001856:	8b3b      	ldrh	r3, [r7, #24]
 8001858:	3307      	adds	r3, #7
 800185a:	2b00      	cmp	r3, #0
 800185c:	da00      	bge.n	8001860 <TFT9341_DrawChar+0x38>
 800185e:	3307      	adds	r3, #7
 8001860:	10db      	asrs	r3, r3, #3
 8001862:	b2db      	uxtb	r3, r3
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	b2da      	uxtb	r2, r3
 8001868:	8b3b      	ldrh	r3, [r7, #24]
 800186a:	b2db      	uxtb	r3, r3
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	75fb      	strb	r3, [r7, #23]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);	// c_t =0
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	3b20      	subs	r3, #32
 800187a:	4941      	ldr	r1, [pc, #260]	; (8001980 <TFT9341_DrawChar+0x158>)
 800187c:	6849      	ldr	r1, [r1, #4]
 800187e:	88c9      	ldrh	r1, [r1, #6]
 8001880:	fb01 f103 	mul.w	r1, r1, r3
 8001884:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	889b      	ldrh	r3, [r3, #4]
 800188a:	3307      	adds	r3, #7
 800188c:	2b00      	cmp	r3, #0
 800188e:	da00      	bge.n	8001892 <TFT9341_DrawChar+0x6a>
 8001890:	3307      	adds	r3, #7
 8001892:	10db      	asrs	r3, r3, #3
 8001894:	fb03 f301 	mul.w	r3, r3, r1
 8001898:	4413      	add	r3, r2
 800189a:	613b      	str	r3, [r7, #16]

  for(i = 0; i < height; i++)
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
 80018a0:	e065      	b.n	800196e <TFT9341_DrawChar+0x146>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 80018a2:	8b3b      	ldrh	r3, [r7, #24]
 80018a4:	3307      	adds	r3, #7
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	da00      	bge.n	80018ac <TFT9341_DrawChar+0x84>
 80018aa:	3307      	adds	r3, #7
 80018ac:	10db      	asrs	r3, r3, #3
 80018ae:	461a      	mov	r2, r3
 80018b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b2:	fb03 f302 	mul.w	r3, r3, r2
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4413      	add	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
    switch(((width + 7)/8))
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	3307      	adds	r3, #7
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	da00      	bge.n	80018c6 <TFT9341_DrawChar+0x9e>
 80018c4:	3307      	adds	r3, #7
 80018c6:	10db      	asrs	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <TFT9341_DrawChar+0xaa>
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d004      	beq.n	80018da <TFT9341_DrawChar+0xb2>
 80018d0:	e00c      	b.n	80018ec <TFT9341_DrawChar+0xc4>
    {
      case 1:
          line =  pchar[0];
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	61fb      	str	r3, [r7, #28]
          break;
 80018d8:	e016      	b.n	8001908 <TFT9341_DrawChar+0xe0>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	021b      	lsls	r3, r3, #8
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	3201      	adds	r2, #1
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61fb      	str	r3, [r7, #28]
          break;
 80018ea:	e00d      	b.n	8001908 <TFT9341_DrawChar+0xe0>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	041a      	lsls	r2, r3, #16
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3301      	adds	r3, #1
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	021b      	lsls	r3, r3, #8
 80018fa:	4313      	orrs	r3, r2
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	3202      	adds	r2, #2
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	61fb      	str	r3, [r7, #28]
        break;
 8001906:	bf00      	nop
    }
    for (j = 0; j < width; j++)								// print row pixel by pixel
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
 800190c:	e025      	b.n	800195a <TFT9341_DrawChar+0x132>
    {
      if(line & (1 << (width- j + offset- 1)))
 800190e:	8b3a      	ldrh	r2, [r7, #24]
 8001910:	6a3b      	ldr	r3, [r7, #32]
 8001912:	1ad2      	subs	r2, r2, r3
 8001914:	7dfb      	ldrb	r3, [r7, #23]
 8001916:	4413      	add	r3, r2
 8001918:	3b01      	subs	r3, #1
 800191a:	2201      	movs	r2, #1
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	461a      	mov	r2, r3
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	4013      	ands	r3, r2
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <TFT9341_DrawChar+0x118>
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.TextColor);	// Print text pixel
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	6a3b      	ldr	r3, [r7, #32]
 800192e:	4413      	add	r3, r2
 8001930:	4618      	mov	r0, r3
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <TFT9341_DrawChar+0x158>)
 8001936:	8812      	ldrh	r2, [r2, #0]
 8001938:	4619      	mov	r1, r3
 800193a:	f7ff ff19 	bl	8001770 <TFT9341_DrawPixel>
 800193e:	e009      	b.n	8001954 <TFT9341_DrawChar+0x12c>
      }
      else
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.BackColor);	// Print background pixel
 8001940:	88fa      	ldrh	r2, [r7, #6]
 8001942:	6a3b      	ldr	r3, [r7, #32]
 8001944:	4413      	add	r3, r2
 8001946:	4618      	mov	r0, r3
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <TFT9341_DrawChar+0x158>)
 800194c:	8852      	ldrh	r2, [r2, #2]
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff ff0e 	bl	8001770 <TFT9341_DrawPixel>
    for (j = 0; j < width; j++)								// print row pixel by pixel
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	3301      	adds	r3, #1
 8001958:	623b      	str	r3, [r7, #32]
 800195a:	8b3b      	ldrh	r3, [r7, #24]
 800195c:	6a3a      	ldr	r2, [r7, #32]
 800195e:	429a      	cmp	r2, r3
 8001960:	d3d5      	bcc.n	800190e <TFT9341_DrawChar+0xe6>
      }
    }
    y++;
 8001962:	88bb      	ldrh	r3, [r7, #4]
 8001964:	3301      	adds	r3, #1
 8001966:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	3301      	adds	r3, #1
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	8b7b      	ldrh	r3, [r7, #26]
 8001970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001972:	429a      	cmp	r2, r3
 8001974:	d395      	bcc.n	80018a2 <TFT9341_DrawChar+0x7a>
  }
}
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20007710 	.word	0x20007710

08001984 <TFT9341_DrawChar_DMA>:
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar_DMA(uint16_t x, uint16_t y, uint8_t c)
{
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
 800198e:	460b      	mov	r3, r1
 8001990:	80bb      	strh	r3, [r7, #4]
 8001992:	4613      	mov	r3, r2
 8001994:	70fb      	strb	r3, [r7, #3]

	uint32_t i = 0, j = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *c_t;
	uint8_t *pchar;
	uint32_t line=0;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]


	height = lcdprop.pFont->Height;
 80019a2:	4b72      	ldr	r3, [pc, #456]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	88db      	ldrh	r3, [r3, #6]
 80019a8:	837b      	strh	r3, [r7, #26]
	width = lcdprop.pFont->Width;
 80019aa:	4b70      	ldr	r3, [pc, #448]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	889b      	ldrh	r3, [r3, #4]
 80019b0:	833b      	strh	r3, [r7, #24]
	offset = 8 *((width + 7)/8) - width ;
 80019b2:	8b3b      	ldrh	r3, [r7, #24]
 80019b4:	3307      	adds	r3, #7
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	da00      	bge.n	80019bc <TFT9341_DrawChar_DMA+0x38>
 80019ba:	3307      	adds	r3, #7
 80019bc:	10db      	asrs	r3, r3, #3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	b2da      	uxtb	r2, r3
 80019c4:	8b3b      	ldrh	r3, [r7, #24]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	75fb      	strb	r3, [r7, #23]
	c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 80019cc:	4b67      	ldr	r3, [pc, #412]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	78fb      	ldrb	r3, [r7, #3]
 80019d4:	3b20      	subs	r3, #32
 80019d6:	4965      	ldr	r1, [pc, #404]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019d8:	6849      	ldr	r1, [r1, #4]
 80019da:	88c9      	ldrh	r1, [r1, #6]
 80019dc:	fb01 f103 	mul.w	r1, r1, r3
 80019e0:	4b62      	ldr	r3, [pc, #392]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	889b      	ldrh	r3, [r3, #4]
 80019e6:	3307      	adds	r3, #7
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	da00      	bge.n	80019ee <TFT9341_DrawChar_DMA+0x6a>
 80019ec:	3307      	adds	r3, #7
 80019ee:	10db      	asrs	r3, r3, #3
 80019f0:	fb03 f301 	mul.w	r3, r3, r1
 80019f4:	4413      	add	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]

	y = y - height;											// Because BUG inside function
 80019f8:	88ba      	ldrh	r2, [r7, #4]
 80019fa:	8b7b      	ldrh	r3, [r7, #26]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	80bb      	strh	r3, [r7, #4]

	for(i = 0; i < height; i++)
 8001a00:	2300      	movs	r3, #0
 8001a02:	627b      	str	r3, [r7, #36]	; 0x24
 8001a04:	e07c      	b.n	8001b00 <TFT9341_DrawChar_DMA+0x17c>
	{
		pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8001a06:	8b3b      	ldrh	r3, [r7, #24]
 8001a08:	3307      	adds	r3, #7
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	da00      	bge.n	8001a10 <TFT9341_DrawChar_DMA+0x8c>
 8001a0e:	3307      	adds	r3, #7
 8001a10:	10db      	asrs	r3, r3, #3
 8001a12:	461a      	mov	r2, r3
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	fb03 f302 	mul.w	r3, r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	60fb      	str	r3, [r7, #12]
		switch(((width + 7)/8))
 8001a20:	8b3b      	ldrh	r3, [r7, #24]
 8001a22:	3307      	adds	r3, #7
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	da00      	bge.n	8001a2a <TFT9341_DrawChar_DMA+0xa6>
 8001a28:	3307      	adds	r3, #7
 8001a2a:	10db      	asrs	r3, r3, #3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d002      	beq.n	8001a36 <TFT9341_DrawChar_DMA+0xb2>
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d004      	beq.n	8001a3e <TFT9341_DrawChar_DMA+0xba>
 8001a34:	e00c      	b.n	8001a50 <TFT9341_DrawChar_DMA+0xcc>
		{
			case 1:
				line = pchar[0];
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	61fb      	str	r3, [r7, #28]
				break;
 8001a3c:	e016      	b.n	8001a6c <TFT9341_DrawChar_DMA+0xe8>
			case 2:
				line = (pchar[0]<< 8) | pchar[1];
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	021b      	lsls	r3, r3, #8
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	3201      	adds	r2, #1
 8001a48:	7812      	ldrb	r2, [r2, #0]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61fb      	str	r3, [r7, #28]
				break;
 8001a4e:	e00d      	b.n	8001a6c <TFT9341_DrawChar_DMA+0xe8>
			case 3:
			default:
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	021b      	lsls	r3, r3, #8
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	68fa      	ldr	r2, [r7, #12]
 8001a62:	3202      	adds	r2, #2
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61fb      	str	r3, [r7, #28]
				break;
 8001a6a:	bf00      	nop
		}

		for (j = 0; j < width; j++)
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	623b      	str	r3, [r7, #32]
 8001a70:	e03c      	b.n	8001aec <TFT9341_DrawChar_DMA+0x168>
		{
			int buf_index = j + i*(width+1);
 8001a72:	8b3b      	ldrh	r3, [r7, #24]
 8001a74:	3301      	adds	r3, #1
 8001a76:	461a      	mov	r2, r3
 8001a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7a:	fb03 f202 	mul.w	r2, r3, r2
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	4413      	add	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
			if(line & (1 << (width- j + offset- 1)))
 8001a84:	8b3a      	ldrh	r2, [r7, #24]
 8001a86:	6a3b      	ldr	r3, [r7, #32]
 8001a88:	1ad2      	subs	r2, r2, r3
 8001a8a:	7dfb      	ldrb	r3, [r7, #23]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	2201      	movs	r2, #1
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d011      	beq.n	8001ac4 <TFT9341_DrawChar_DMA+0x140>
			{
				frm_buf[buf_index*2] = lcdprop.TextColor >> 8;
 8001aa0:	4b32      	ldr	r3, [pc, #200]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001aa2:	881b      	ldrh	r3, [r3, #0]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b2d1      	uxtb	r1, r2
 8001aae:	4a30      	ldr	r2, [pc, #192]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ab0:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.TextColor & 0xFF;
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ab4:	881a      	ldrh	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	3301      	adds	r3, #1
 8001abc:	b2d1      	uxtb	r1, r2
 8001abe:	4a2c      	ldr	r2, [pc, #176]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ac0:	54d1      	strb	r1, [r2, r3]
 8001ac2:	e010      	b.n	8001ae6 <TFT9341_DrawChar_DMA+0x162>
			}
			else
			{
				frm_buf[buf_index*2] = lcdprop.BackColor >> 8;
 8001ac4:	4b29      	ldr	r3, [pc, #164]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ac6:	885b      	ldrh	r3, [r3, #2]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	b2d1      	uxtb	r1, r2
 8001ad2:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ad4:	54d1      	strb	r1, [r2, r3]
				frm_buf[buf_index*2+1] = lcdprop.BackColor & 0xFF;
 8001ad6:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <TFT9341_DrawChar_DMA+0x1e8>)
 8001ad8:	885a      	ldrh	r2, [r3, #2]
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2d1      	uxtb	r1, r2
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001ae4:	54d1      	strb	r1, [r2, r3]
		for (j = 0; j < width; j++)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	623b      	str	r3, [r7, #32]
 8001aec:	8b3b      	ldrh	r3, [r7, #24]
 8001aee:	6a3a      	ldr	r2, [r7, #32]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d3be      	bcc.n	8001a72 <TFT9341_DrawChar_DMA+0xee>
			}
		}
		y++;
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	3301      	adds	r3, #1
 8001af8:	80bb      	strh	r3, [r7, #4]
	for(i = 0; i < height; i++)
 8001afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afc:	3301      	adds	r3, #1
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
 8001b00:	8b7b      	ldrh	r3, [r7, #26]
 8001b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f4ff af7e 	bcc.w	8001a06 <TFT9341_DrawChar_DMA+0x82>
	}

	TFT9341_SetAddrWindow(x, y, x+width, y+height);
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	8b3b      	ldrh	r3, [r7, #24]
 8001b0e:	4413      	add	r3, r2
 8001b10:	b29c      	uxth	r4, r3
 8001b12:	88ba      	ldrh	r2, [r7, #4]
 8001b14:	8b7b      	ldrh	r3, [r7, #26]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	88b9      	ldrh	r1, [r7, #4]
 8001b1c:	88f8      	ldrh	r0, [r7, #6]
 8001b1e:	4622      	mov	r2, r4
 8001b20:	f7ff fd88 	bl	8001634 <TFT9341_SetAddrWindow>
	DC_DATA();
 8001b24:	2201      	movs	r2, #1
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	4812      	ldr	r0, [pc, #72]	; (8001b74 <TFT9341_DrawChar_DMA+0x1f0>)
 8001b2a:	f006 fb07 	bl	800813c <HAL_GPIO_WritePin>
	dma_spi_cnt = 1;
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <TFT9341_DrawChar_DMA+0x1f4>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(&hspi2, frm_buf, (width+1)*(height+1)*2);
 8001b34:	8b3b      	ldrh	r3, [r7, #24]
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	8b7b      	ldrh	r3, [r7, #26]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	fb12 f303 	smulbb	r3, r2, r3
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4908      	ldr	r1, [pc, #32]	; (8001b70 <TFT9341_DrawChar_DMA+0x1ec>)
 8001b4e:	480b      	ldr	r0, [pc, #44]	; (8001b7c <TFT9341_DrawChar_DMA+0x1f8>)
 8001b50:	f00a fe3c 	bl	800c7cc <HAL_SPI_Transmit_DMA>
	while(!dma_spi_fl) {}
 8001b54:	bf00      	nop
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <TFT9341_DrawChar_DMA+0x1fc>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0fb      	beq.n	8001b56 <TFT9341_DrawChar_DMA+0x1d2>
	dma_spi_fl=0;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <TFT9341_DrawChar_DMA+0x1fc>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	372c      	adds	r7, #44	; 0x2c
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	20007710 	.word	0x20007710
 8001b70:	2000044c 	.word	0x2000044c
 8001b74:	40021000 	.word	0x40021000
 8001b78:	2000002c 	.word	0x2000002c
 8001b7c:	2000aad8 	.word	0x2000aad8
 8001b80:	20002840 	.word	0x20002840

08001b84 <TFT9341_String>:
// ---------------------------------------------------------------------------------
void TFT9341_String(uint16_t x,uint16_t y, char *str)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	603a      	str	r2, [r7, #0]
 8001b8e:	80fb      	strh	r3, [r7, #6]
 8001b90:	460b      	mov	r3, r1
 8001b92:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001b94:	e00f      	b.n	8001bb6 <TFT9341_String+0x32>
  {
    TFT9341_DrawChar(x,y,str[0]);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	88b9      	ldrh	r1, [r7, #4]
 8001b9c:	88fb      	ldrh	r3, [r7, #6]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff fe42 	bl	8001828 <TFT9341_DrawChar>
    x+=lcdprop.pFont->Width;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <TFT9341_String+0x44>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	889a      	ldrh	r2, [r3, #4]
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	4413      	add	r3, r2
 8001bae:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
  while(*str)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1eb      	bne.n	8001b96 <TFT9341_String+0x12>
  }
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20007710 	.word	0x20007710

08001bcc <TFT9341_String_DMA>:
// ---------------------------------------------------------------------------------
void TFT9341_String_DMA(uint16_t x,uint16_t y, char *str)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	603a      	str	r2, [r7, #0]
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8001bdc:	e00f      	b.n	8001bfe <TFT9341_String_DMA+0x32>
  {
	TFT9341_DrawChar_DMA(x,y,str[0]);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	781a      	ldrb	r2, [r3, #0]
 8001be2:	88b9      	ldrh	r1, [r7, #4]
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fecc 	bl	8001984 <TFT9341_DrawChar_DMA>
    x+=lcdprop.pFont->Width;
 8001bec:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <TFT9341_String_DMA+0x44>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	889a      	ldrh	r2, [r3, #4]
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	603b      	str	r3, [r7, #0]
  while(*str)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1eb      	bne.n	8001bde <TFT9341_String_DMA+0x12>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	20007710 	.word	0x20007710

08001c14 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8001c1e:	2036      	movs	r0, #54	; 0x36
 8001c20:	f7ff fb54 	bl	80012cc <TFT9341_SendCommand>
  switch(r)
 8001c24:	79fb      	ldrb	r3, [r7, #7]
 8001c26:	2b03      	cmp	r3, #3
 8001c28:	d836      	bhi.n	8001c98 <TFT9341_SetRotation+0x84>
 8001c2a:	a201      	add	r2, pc, #4	; (adr r2, 8001c30 <TFT9341_SetRotation+0x1c>)
 8001c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c30:	08001c41 	.word	0x08001c41
 8001c34:	08001c57 	.word	0x08001c57
 8001c38:	08001c6d 	.word	0x08001c6d
 8001c3c:	08001c83 	.word	0x08001c83
  {
    case 0:
      TFT9341_SendData(0x48);
 8001c40:	2048      	movs	r0, #72	; 0x48
 8001c42:	f7ff fb29 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8001c46:	4b16      	ldr	r3, [pc, #88]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c48:	22f0      	movs	r2, #240	; 0xf0
 8001c4a:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001c4c:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c52:	801a      	strh	r2, [r3, #0]
      break;
 8001c54:	e020      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 8001c56:	2028      	movs	r0, #40	; 0x28
 8001c58:	f7ff fb1e 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c5e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c62:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8001c64:	4b0f      	ldr	r3, [pc, #60]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c66:	22f0      	movs	r2, #240	; 0xf0
 8001c68:	801a      	strh	r2, [r3, #0]
      break;
 8001c6a:	e015      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 8001c6c:	2088      	movs	r0, #136	; 0x88
 8001c6e:	f7ff fb13 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c74:	22f0      	movs	r2, #240	; 0xf0
 8001c76:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c7a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c7e:	801a      	strh	r2, [r3, #0]
      break;
 8001c80:	e00a      	b.n	8001c98 <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 8001c82:	20e8      	movs	r0, #232	; 0xe8
 8001c84:	f7ff fb08 	bl	8001298 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8001c88:	4b05      	ldr	r3, [pc, #20]	; (8001ca0 <TFT9341_SetRotation+0x8c>)
 8001c8a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001c8e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <TFT9341_SetRotation+0x90>)
 8001c92:	22f0      	movs	r2, #240	; 0xf0
 8001c94:	801a      	strh	r2, [r3, #0]
      break;
 8001c96:	bf00      	nop
  }
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	2000770e 	.word	0x2000770e
 8001ca4:	2000770c 	.word	0x2000770c

08001ca8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 8001cb0:	bf00      	nop
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	6879      	ldr	r1, [r7, #4]
 8001cc8:	480a      	ldr	r0, [pc, #40]	; (8001cf4 <Mount_SD+0x38>)
 8001cca:	f011 f927 	bl	8012f1c <f_mount>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <Mount_SD+0x3c>)
 8001cd4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001cd6:	4b08      	ldr	r3, [pc, #32]	; (8001cf8 <Mount_SD+0x3c>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001cde:	4807      	ldr	r0, [pc, #28]	; (8001cfc <Mount_SD+0x40>)
 8001ce0:	f7ff ffe2 	bl	8001ca8 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 8001ce4:	e002      	b.n	8001cec <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <Mount_SD+0x44>)
 8001ce8:	f7ff ffde 	bl	8001ca8 <Send_Uart>
}
 8001cec:	bf00      	nop
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20007834 	.word	0x20007834
 8001cf8:	20008880 	.word	0x20008880
 8001cfc:	0801bf68 	.word	0x0801bf68
 8001d00:	0801bf8c 	.word	0x0801bf8c

08001d04 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2000      	movs	r0, #0
 8001d12:	f011 f903 	bl	8012f1c <f_mount>
 8001d16:	4603      	mov	r3, r0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <Unmount_SD+0x38>)
 8001d1c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <Unmount_SD+0x38>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <Unmount_SD+0x2a>
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <Unmount_SD+0x3c>)
 8001d28:	f7ff ffbe 	bl	8001ca8 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8001d2c:	e002      	b.n	8001d34 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8001d2e:	4805      	ldr	r0, [pc, #20]	; (8001d44 <Unmount_SD+0x40>)
 8001d30:	f7ff ffba 	bl	8001ca8 <Send_Uart>
}
 8001d34:	bf00      	nop
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20008880 	.word	0x20008880
 8001d40:	0801bfb0 	.word	0x0801bfb0
 8001d44:	0801bfd8 	.word	0x0801bfd8

08001d48 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001d50:	4940      	ldr	r1, [pc, #256]	; (8001e54 <Create_File+0x10c>)
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f011 fe24 	bl	80139a0 <f_stat>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <Create_File+0x110>)
 8001d5e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001d60:	4b3d      	ldr	r3, [pc, #244]	; (8001e58 <Create_File+0x110>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d111      	bne.n	8001d8c <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001d68:	2064      	movs	r0, #100	; 0x64
 8001d6a:	f015 fec5 	bl	8017af8 <pvPortMalloc>
 8001d6e:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	493a      	ldr	r1, [pc, #232]	; (8001e5c <Create_File+0x114>)
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f017 fccf 	bl	8019718 <siprintf>
		Send_Uart(buf);
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff ff94 	bl	8001ca8 <Send_Uart>
		vPortFree(buf);
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f015 ff85 	bl	8017c90 <vPortFree>
	    return fresult;
 8001d86:	4b34      	ldr	r3, [pc, #208]	; (8001e58 <Create_File+0x110>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	e05f      	b.n	8001e4c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001d8c:	220b      	movs	r2, #11
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4833      	ldr	r0, [pc, #204]	; (8001e60 <Create_File+0x118>)
 8001d92:	f011 f927 	bl	8012fe4 <f_open>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <Create_File+0x110>)
 8001d9c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <Create_File+0x110>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d014      	beq.n	8001dd0 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f015 fea6 	bl	8017af8 <pvPortMalloc>
 8001dac:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <Create_File+0x110>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	461a      	mov	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	492b      	ldr	r1, [pc, #172]	; (8001e64 <Create_File+0x11c>)
 8001db8:	6938      	ldr	r0, [r7, #16]
 8001dba:	f017 fcad 	bl	8019718 <siprintf>
			Send_Uart(buf);
 8001dbe:	6938      	ldr	r0, [r7, #16]
 8001dc0:	f7ff ff72 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001dc4:	6938      	ldr	r0, [r7, #16]
 8001dc6:	f015 ff63 	bl	8017c90 <vPortFree>
		    return fresult;
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <Create_File+0x110>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	e03d      	b.n	8001e4c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001dd0:	2064      	movs	r0, #100	; 0x64
 8001dd2:	f015 fe91 	bl	8017af8 <pvPortMalloc>
 8001dd6:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	4923      	ldr	r1, [pc, #140]	; (8001e68 <Create_File+0x120>)
 8001ddc:	69f8      	ldr	r0, [r7, #28]
 8001dde:	f017 fc9b 	bl	8019718 <siprintf>
			Send_Uart(buf);
 8001de2:	69f8      	ldr	r0, [r7, #28]
 8001de4:	f7ff ff60 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001de8:	69f8      	ldr	r0, [r7, #28]
 8001dea:	f015 ff51 	bl	8017c90 <vPortFree>
		}

		fresult = f_close(&fil);
 8001dee:	481c      	ldr	r0, [pc, #112]	; (8001e60 <Create_File+0x118>)
 8001df0:	f011 fda7 	bl	8013942 <f_close>
 8001df4:	4603      	mov	r3, r0
 8001df6:	461a      	mov	r2, r3
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <Create_File+0x110>)
 8001dfa:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <Create_File+0x110>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d012      	beq.n	8001e2a <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001e04:	2064      	movs	r0, #100	; 0x64
 8001e06:	f015 fe77 	bl	8017af8 <pvPortMalloc>
 8001e0a:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8001e0c:	4b12      	ldr	r3, [pc, #72]	; (8001e58 <Create_File+0x110>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4915      	ldr	r1, [pc, #84]	; (8001e6c <Create_File+0x124>)
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f017 fc7e 	bl	8019718 <siprintf>
			Send_Uart(buf);
 8001e1c:	6978      	ldr	r0, [r7, #20]
 8001e1e:	f7ff ff43 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001e22:	6978      	ldr	r0, [r7, #20]
 8001e24:	f015 ff34 	bl	8017c90 <vPortFree>
 8001e28:	e00e      	b.n	8001e48 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8001e2a:	2064      	movs	r0, #100	; 0x64
 8001e2c:	f015 fe64 	bl	8017af8 <pvPortMalloc>
 8001e30:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	490e      	ldr	r1, [pc, #56]	; (8001e70 <Create_File+0x128>)
 8001e36:	69b8      	ldr	r0, [r7, #24]
 8001e38:	f017 fc6e 	bl	8019718 <siprintf>
			Send_Uart(buf);
 8001e3c:	69b8      	ldr	r0, [r7, #24]
 8001e3e:	f7ff ff33 	bl	8001ca8 <Send_Uart>
			vPortFree(buf);
 8001e42:	69b8      	ldr	r0, [r7, #24]
 8001e44:	f015 ff24 	bl	8017c90 <vPortFree>
		}
	}
    return fresult;
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <Create_File+0x110>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3720      	adds	r7, #32
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	2000771c 	.word	0x2000771c
 8001e58:	20008880 	.word	0x20008880
 8001e5c:	0801c1a8 	.word	0x0801c1a8
 8001e60:	20008888 	.word	0x20008888
 8001e64:	0801c1e0 	.word	0x0801c1e0
 8001e68:	0801c208 	.word	0x0801c208
 8001e6c:	0801c248 	.word	0x0801c248
 8001e70:	0801c188 	.word	0x0801c188

08001e74 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b088      	sub	sp, #32
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 8001e7e:	4953      	ldr	r1, [pc, #332]	; (8001fcc <Update_File+0x158>)
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f011 fd8d 	bl	80139a0 <f_stat>
 8001e86:	4603      	mov	r3, r0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <Update_File+0x15c>)
 8001e8c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <Update_File+0x15c>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d011      	beq.n	8001eba <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8001e96:	2064      	movs	r0, #100	; 0x64
 8001e98:	f015 fe2e 	bl	8017af8 <pvPortMalloc>
 8001e9c:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	494c      	ldr	r1, [pc, #304]	; (8001fd4 <Update_File+0x160>)
 8001ea2:	68b8      	ldr	r0, [r7, #8]
 8001ea4:	f017 fc38 	bl	8019718 <siprintf>
		Send_Uart (buf);
 8001ea8:	68b8      	ldr	r0, [r7, #8]
 8001eaa:	f7ff fefd 	bl	8001ca8 <Send_Uart>
		vPortFree(buf);
 8001eae:	68b8      	ldr	r0, [r7, #8]
 8001eb0:	f015 feee 	bl	8017c90 <vPortFree>
	    return fresult;
 8001eb4:	4b46      	ldr	r3, [pc, #280]	; (8001fd0 <Update_File+0x15c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	e083      	b.n	8001fc2 <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001eba:	2232      	movs	r2, #50	; 0x32
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4846      	ldr	r0, [pc, #280]	; (8001fd8 <Update_File+0x164>)
 8001ec0:	f011 f890 	bl	8012fe4 <f_open>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	4b41      	ldr	r3, [pc, #260]	; (8001fd0 <Update_File+0x15c>)
 8001eca:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001ecc:	4b40      	ldr	r3, [pc, #256]	; (8001fd0 <Update_File+0x15c>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d014      	beq.n	8001efe <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001ed4:	2064      	movs	r0, #100	; 0x64
 8001ed6:	f015 fe0f 	bl	8017af8 <pvPortMalloc>
 8001eda:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001edc:	4b3c      	ldr	r3, [pc, #240]	; (8001fd0 <Update_File+0x15c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	493d      	ldr	r1, [pc, #244]	; (8001fdc <Update_File+0x168>)
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f017 fc16 	bl	8019718 <siprintf>
	    	Send_Uart(buf);
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	f7ff fedb 	bl	8001ca8 <Send_Uart>
	        vPortFree(buf);
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f015 fecc 	bl	8017c90 <vPortFree>
	        return fresult;
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <Update_File+0x15c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	e061      	b.n	8001fc2 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001efe:	6838      	ldr	r0, [r7, #0]
 8001f00:	f7fe f966 	bl	80001d0 <strlen>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <Update_File+0x16c>)
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	4833      	ldr	r0, [pc, #204]	; (8001fd8 <Update_File+0x164>)
 8001f0c:	f011 facd 	bl	80134aa <f_write>
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <Update_File+0x15c>)
 8001f16:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f18:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <Update_File+0x15c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f015 fde9 	bl	8017af8 <pvPortMalloc>
 8001f26:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001f28:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <Update_File+0x15c>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	492c      	ldr	r1, [pc, #176]	; (8001fe4 <Update_File+0x170>)
 8001f32:	69b8      	ldr	r0, [r7, #24]
 8001f34:	f017 fbf0 	bl	8019718 <siprintf>
	    	Send_Uart(buf);
 8001f38:	69b8      	ldr	r0, [r7, #24]
 8001f3a:	f7ff feb5 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f3e:	69b8      	ldr	r0, [r7, #24]
 8001f40:	f015 fea6 	bl	8017c90 <vPortFree>
 8001f44:	e00e      	b.n	8001f64 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f46:	2064      	movs	r0, #100	; 0x64
 8001f48:	f015 fdd6 	bl	8017af8 <pvPortMalloc>
 8001f4c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4925      	ldr	r1, [pc, #148]	; (8001fe8 <Update_File+0x174>)
 8001f52:	69f8      	ldr	r0, [r7, #28]
 8001f54:	f017 fbe0 	bl	8019718 <siprintf>
	    	Send_Uart(buf);
 8001f58:	69f8      	ldr	r0, [r7, #28]
 8001f5a:	f7ff fea5 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f5e:	69f8      	ldr	r0, [r7, #28]
 8001f60:	f015 fe96 	bl	8017c90 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8001f64:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <Update_File+0x164>)
 8001f66:	f011 fcec 	bl	8013942 <f_close>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <Update_File+0x15c>)
 8001f70:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <Update_File+0x15c>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d012      	beq.n	8001fa0 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001f7a:	2064      	movs	r0, #100	; 0x64
 8001f7c:	f015 fdbc 	bl	8017af8 <pvPortMalloc>
 8001f80:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001f82:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <Update_File+0x15c>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4918      	ldr	r1, [pc, #96]	; (8001fec <Update_File+0x178>)
 8001f8c:	6938      	ldr	r0, [r7, #16]
 8001f8e:	f017 fbc3 	bl	8019718 <siprintf>
	    	Send_Uart(buf);
 8001f92:	6938      	ldr	r0, [r7, #16]
 8001f94:	f7ff fe88 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001f98:	6938      	ldr	r0, [r7, #16]
 8001f9a:	f015 fe79 	bl	8017c90 <vPortFree>
 8001f9e:	e00e      	b.n	8001fbe <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8001fa0:	2064      	movs	r0, #100	; 0x64
 8001fa2:	f015 fda9 	bl	8017af8 <pvPortMalloc>
 8001fa6:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <Update_File+0x17c>)
 8001fac:	6978      	ldr	r0, [r7, #20]
 8001fae:	f017 fbb3 	bl	8019718 <siprintf>
	    	Send_Uart(buf);
 8001fb2:	6978      	ldr	r0, [r7, #20]
 8001fb4:	f7ff fe78 	bl	8001ca8 <Send_Uart>
	    	vPortFree(buf);
 8001fb8:	6978      	ldr	r0, [r7, #20]
 8001fba:	f015 fe69 	bl	8017c90 <vPortFree>
	     }
	}
    return fresult;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <Update_File+0x15c>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000771c 	.word	0x2000771c
 8001fd0:	20008880 	.word	0x20008880
 8001fd4:	0801c030 	.word	0x0801c030
 8001fd8:	20008888 	.word	0x20008888
 8001fdc:	0801c050 	.word	0x0801c050
 8001fe0:	20008878 	.word	0x20008878
 8001fe4:	0801c26c 	.word	0x0801c26c
 8001fe8:	0801c294 	.word	0x0801c294
 8001fec:	0801c160 	.word	0x0801c160
 8001ff0:	0801c188 	.word	0x0801c188

08001ff4 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f011 fd1c 	bl	8013a3a <f_mkdir>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	4b17      	ldr	r3, [pc, #92]	; (8002064 <Create_Dir+0x70>)
 8002008:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <Create_Dir+0x70>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d10f      	bne.n	8002032 <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8002012:	2064      	movs	r0, #100	; 0x64
 8002014:	f015 fd70 	bl	8017af8 <pvPortMalloc>
 8002018:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 800201a:	687a      	ldr	r2, [r7, #4]
 800201c:	4912      	ldr	r1, [pc, #72]	; (8002068 <Create_Dir+0x74>)
 800201e:	68b8      	ldr	r0, [r7, #8]
 8002020:	f017 fb7a 	bl	8019718 <siprintf>
    	Send_Uart (buf);
 8002024:	68b8      	ldr	r0, [r7, #8]
 8002026:	f7ff fe3f 	bl	8001ca8 <Send_Uart>
    	vPortFree(buf);
 800202a:	68b8      	ldr	r0, [r7, #8]
 800202c:	f015 fe30 	bl	8017c90 <vPortFree>
 8002030:	e011      	b.n	8002056 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 8002032:	2064      	movs	r0, #100	; 0x64
 8002034:	f015 fd60 	bl	8017af8 <pvPortMalloc>
 8002038:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <Create_Dir+0x70>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <Create_Dir+0x78>)
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f017 fb67 	bl	8019718 <siprintf>
    	Send_Uart(buf);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f7ff fe2c 	bl	8001ca8 <Send_Uart>
    	vPortFree(buf);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f015 fe1d 	bl	8017c90 <vPortFree>
    }
    return fresult;
 8002056:	4b03      	ldr	r3, [pc, #12]	; (8002064 <Create_Dir+0x70>)
 8002058:	781b      	ldrb	r3, [r3, #0]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20008880 	.word	0x20008880
 8002068:	0801c2f4 	.word	0x0801c2f4
 800206c:	0801c318 	.word	0x0801c318

08002070 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002074:	2200      	movs	r2, #0
 8002076:	2140      	movs	r1, #64	; 0x40
 8002078:	4802      	ldr	r0, [pc, #8]	; (8002084 <SELECT+0x14>)
 800207a:	f006 f85f 	bl	800813c <HAL_GPIO_WritePin>
}
 800207e:	bf00      	nop
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40020800 	.word	0x40020800

08002088 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	2140      	movs	r1, #64	; 0x40
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <DESELECT+0x14>)
 8002092:	f006 f853 	bl	800813c <HAL_GPIO_WritePin>
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40020800 	.word	0x40020800

080020a0 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80020aa:	bf00      	nop
 80020ac:	4808      	ldr	r0, [pc, #32]	; (80020d0 <SPI_TxByte+0x30>)
 80020ae:	f00a fd97 	bl	800cbe0 <HAL_SPI_GetState>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d1f9      	bne.n	80020ac <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80020b8:	1df9      	adds	r1, r7, #7
 80020ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020be:	2201      	movs	r2, #1
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <SPI_TxByte+0x30>)
 80020c2:	f00a f8a4 	bl	800c20e <HAL_SPI_Transmit>
}
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200104c0 	.word	0x200104c0

080020d4 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80020da:	23ff      	movs	r3, #255	; 0xff
 80020dc:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80020e2:	bf00      	nop
 80020e4:	4809      	ldr	r0, [pc, #36]	; (800210c <SPI_RxByte+0x38>)
 80020e6:	f00a fd7b 	bl	800cbe0 <HAL_SPI_GetState>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d1f9      	bne.n	80020e4 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80020f0:	1dba      	adds	r2, r7, #6
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2301      	movs	r3, #1
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <SPI_RxByte+0x38>)
 80020fe:	f00a f9c2 	bl	800c486 <HAL_SPI_TransmitReceive>
  
  return data;
 8002102:	79bb      	ldrb	r3, [r7, #6]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200104c0 	.word	0x200104c0

08002110 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002118:	f7ff ffdc 	bl	80020d4 <SPI_RxByte>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	701a      	strb	r2, [r3, #0]
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8002132:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <SD_ReadyWait+0x34>)
 8002134:	2232      	movs	r2, #50	; 0x32
 8002136:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002138:	f7ff ffcc 	bl	80020d4 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 800213c:	f7ff ffca 	bl	80020d4 <SPI_RxByte>
 8002140:	4603      	mov	r3, r0
 8002142:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002144:	79fb      	ldrb	r3, [r7, #7]
 8002146:	2bff      	cmp	r3, #255	; 0xff
 8002148:	d004      	beq.n	8002154 <SD_ReadyWait+0x28>
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <SD_ReadyWait+0x34>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f3      	bne.n	800213c <SD_ReadyWait+0x10>
  
  return res;
 8002154:	79fb      	ldrb	r3, [r7, #7]
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200104b8 	.word	0x200104b8

08002164 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 800216a:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800216e:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8002170:	f7ff ff8a 	bl	8002088 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002174:	2300      	movs	r3, #0
 8002176:	613b      	str	r3, [r7, #16]
 8002178:	e005      	b.n	8002186 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800217a:	20ff      	movs	r0, #255	; 0xff
 800217c:	f7ff ff90 	bl	80020a0 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	2b09      	cmp	r3, #9
 800218a:	ddf6      	ble.n	800217a <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 800218c:	f7ff ff70 	bl	8002070 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 800219c:	2300      	movs	r3, #0
 800219e:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80021a4:	2395      	movs	r3, #149	; 0x95
 80021a6:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e009      	b.n	80021c2 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80021ae:	1d3a      	adds	r2, r7, #4
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	4413      	add	r3, r2
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff ff72 	bl	80020a0 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b05      	cmp	r3, #5
 80021c6:	ddf2      	ble.n	80021ae <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80021c8:	e002      	b.n	80021d0 <SD_PowerOn+0x6c>
  {
    Count--;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80021d0:	f7ff ff80 	bl	80020d4 <SPI_RxByte>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d002      	beq.n	80021e0 <SD_PowerOn+0x7c>
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1f4      	bne.n	80021ca <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80021e0:	f7ff ff52 	bl	8002088 <DESELECT>
  SPI_TxByte(0XFF);
 80021e4:	20ff      	movs	r0, #255	; 0xff
 80021e6:	f7ff ff5b 	bl	80020a0 <SPI_TxByte>
  
  PowerFlag = 1;
 80021ea:	4b03      	ldr	r3, [pc, #12]	; (80021f8 <SD_PowerOn+0x94>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	2000244d 	.word	0x2000244d

080021fc <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <SD_PowerOff+0x14>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	bf00      	nop
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	2000244d 	.word	0x2000244d

08002214 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <SD_CheckPower+0x14>)
 800221a:	781b      	ldrb	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	2000244d 	.word	0x2000244d

0800222c <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002236:	4b17      	ldr	r3, [pc, #92]	; (8002294 <SD_RxDataBlock+0x68>)
 8002238:	220a      	movs	r2, #10
 800223a:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 800223c:	f7ff ff4a 	bl	80020d4 <SPI_RxByte>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002244:	7bfb      	ldrb	r3, [r7, #15]
 8002246:	2bff      	cmp	r3, #255	; 0xff
 8002248:	d104      	bne.n	8002254 <SD_RxDataBlock+0x28>
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <SD_RxDataBlock+0x68>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f3      	bne.n	800223c <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002254:	7bfb      	ldrb	r3, [r7, #15]
 8002256:	2bfe      	cmp	r3, #254	; 0xfe
 8002258:	d001      	beq.n	800225e <SD_RxDataBlock+0x32>
    return FALSE;
 800225a:	2300      	movs	r3, #0
 800225c:	e016      	b.n	800228c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	607a      	str	r2, [r7, #4]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff ff53 	bl	8002110 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff4d 	bl	8002110 <SPI_RxBytePtr>
  } while(btr -= 2);
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	3b02      	subs	r3, #2
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1ed      	bne.n	800225e <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8002282:	f7ff ff27 	bl	80020d4 <SPI_RxByte>
  SPI_RxByte();
 8002286:	f7ff ff25 	bl	80020d4 <SPI_RxByte>
  
  return TRUE;
 800228a:	2301      	movs	r3, #1
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20011070 	.word	0x20011070

08002298 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	460b      	mov	r3, r1
 80022a2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80022a8:	f7ff ff40 	bl	800212c <SD_ReadyWait>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2bff      	cmp	r3, #255	; 0xff
 80022b0:	d001      	beq.n	80022b6 <SD_TxDataBlock+0x1e>
    return FALSE;
 80022b2:	2300      	movs	r3, #0
 80022b4:	e040      	b.n	8002338 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80022b6:	78fb      	ldrb	r3, [r7, #3]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fef1 	bl	80020a0 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	2bfd      	cmp	r3, #253	; 0xfd
 80022c2:	d031      	beq.n	8002328 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	1c5a      	adds	r2, r3, #1
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fee5 	bl	80020a0 <SPI_TxByte>
      SPI_TxByte(*buff++);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff fede 	bl	80020a0 <SPI_TxByte>
    } while (--wc);
 80022e4:	7bbb      	ldrb	r3, [r7, #14]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	73bb      	strb	r3, [r7, #14]
 80022ea:	7bbb      	ldrb	r3, [r7, #14]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d1eb      	bne.n	80022c8 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80022f0:	f7ff fef0 	bl	80020d4 <SPI_RxByte>
    SPI_RxByte();
 80022f4:	f7ff feee 	bl	80020d4 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80022f8:	e00b      	b.n	8002312 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80022fa:	f7ff feeb 	bl	80020d4 <SPI_RxByte>
 80022fe:	4603      	mov	r3, r0
 8002300:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	f003 031f 	and.w	r3, r3, #31
 8002308:	2b05      	cmp	r3, #5
 800230a:	d006      	beq.n	800231a <SD_TxDataBlock+0x82>
        break;
      
      i++;
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	3301      	adds	r3, #1
 8002310:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8002312:	7b7b      	ldrb	r3, [r7, #13]
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d9f0      	bls.n	80022fa <SD_TxDataBlock+0x62>
 8002318:	e000      	b.n	800231c <SD_TxDataBlock+0x84>
        break;
 800231a:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 800231c:	bf00      	nop
 800231e:	f7ff fed9 	bl	80020d4 <SPI_RxByte>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0fa      	beq.n	800231e <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	f003 031f 	and.w	r3, r3, #31
 800232e:	2b05      	cmp	r3, #5
 8002330:	d101      	bne.n	8002336 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3710      	adds	r7, #16
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 800234c:	f7ff feee 	bl	800212c <SD_ReadyWait>
 8002350:	4603      	mov	r3, r0
 8002352:	2bff      	cmp	r3, #255	; 0xff
 8002354:	d001      	beq.n	800235a <SD_SendCmd+0x1a>
    return 0xFF;
 8002356:	23ff      	movs	r3, #255	; 0xff
 8002358:	e040      	b.n	80023dc <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 800235a:	79fb      	ldrb	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff fe9f 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0e1b      	lsrs	r3, r3, #24
 8002366:	b2db      	uxtb	r3, r3
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fe99 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	0c1b      	lsrs	r3, r3, #16
 8002372:	b2db      	uxtb	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fe93 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b2db      	uxtb	r3, r3
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fe8d 	bl	80020a0 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fe88 	bl	80020a0 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002390:	2300      	movs	r3, #0
 8002392:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	2b40      	cmp	r3, #64	; 0x40
 8002398:	d101      	bne.n	800239e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 800239a:	2395      	movs	r3, #149	; 0x95
 800239c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	2b48      	cmp	r3, #72	; 0x48
 80023a2:	d101      	bne.n	80023a8 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80023a4:	2387      	movs	r3, #135	; 0x87
 80023a6:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fe78 	bl	80020a0 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	2b4c      	cmp	r3, #76	; 0x4c
 80023b4:	d101      	bne.n	80023ba <SD_SendCmd+0x7a>
    SPI_RxByte();
 80023b6:	f7ff fe8d 	bl	80020d4 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 80023ba:	230a      	movs	r3, #10
 80023bc:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 80023be:	f7ff fe89 	bl	80020d4 <SPI_RxByte>
 80023c2:	4603      	mov	r3, r0
 80023c4:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80023c6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da05      	bge.n	80023da <SD_SendCmd+0x9a>
 80023ce:	7bbb      	ldrb	r3, [r7, #14]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	73bb      	strb	r3, [r7, #14]
 80023d4:	7bbb      	ldrb	r3, [r7, #14]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f1      	bne.n	80023be <SD_SendCmd+0x7e>
  
  return res;
 80023da:	7b7b      	ldrb	r3, [r7, #13]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d5      	b.n	80025a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80023f8:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <SD_disk_initialize+0x1c8>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <SD_disk_initialize+0x2a>
    return Stat;        
 8002406:	4b69      	ldr	r3, [pc, #420]	; (80025ac <SD_disk_initialize+0x1c8>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	e0ca      	b.n	80025a4 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 800240e:	f7ff fea9 	bl	8002164 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002412:	f7ff fe2d 	bl	8002070 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800241a:	2100      	movs	r1, #0
 800241c:	2040      	movs	r0, #64	; 0x40
 800241e:	f7ff ff8f 	bl	8002340 <SD_SendCmd>
 8002422:	4603      	mov	r3, r0
 8002424:	2b01      	cmp	r3, #1
 8002426:	f040 80a5 	bne.w	8002574 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800242a:	4b61      	ldr	r3, [pc, #388]	; (80025b0 <SD_disk_initialize+0x1cc>)
 800242c:	2264      	movs	r2, #100	; 0x64
 800242e:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002430:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002434:	2048      	movs	r0, #72	; 0x48
 8002436:	f7ff ff83 	bl	8002340 <SD_SendCmd>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d158      	bne.n	80024f2 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e00c      	b.n	8002460 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002446:	7bfc      	ldrb	r4, [r7, #15]
 8002448:	f7ff fe44 	bl	80020d4 <SPI_RxByte>
 800244c:	4603      	mov	r3, r0
 800244e:	461a      	mov	r2, r3
 8002450:	f107 0310 	add.w	r3, r7, #16
 8002454:	4423      	add	r3, r4
 8002456:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	3301      	adds	r3, #1
 800245e:	73fb      	strb	r3, [r7, #15]
 8002460:	7bfb      	ldrb	r3, [r7, #15]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d9ef      	bls.n	8002446 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002466:	7abb      	ldrb	r3, [r7, #10]
 8002468:	2b01      	cmp	r3, #1
 800246a:	f040 8083 	bne.w	8002574 <SD_disk_initialize+0x190>
 800246e:	7afb      	ldrb	r3, [r7, #11]
 8002470:	2baa      	cmp	r3, #170	; 0xaa
 8002472:	d17f      	bne.n	8002574 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002474:	2100      	movs	r1, #0
 8002476:	2077      	movs	r0, #119	; 0x77
 8002478:	f7ff ff62 	bl	8002340 <SD_SendCmd>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d807      	bhi.n	8002492 <SD_disk_initialize+0xae>
 8002482:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002486:	2069      	movs	r0, #105	; 0x69
 8002488:	f7ff ff5a 	bl	8002340 <SD_SendCmd>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002492:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <SD_disk_initialize+0x1cc>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1eb      	bne.n	8002474 <SD_disk_initialize+0x90>
 800249c:	e000      	b.n	80024a0 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800249e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80024a0:	4b43      	ldr	r3, [pc, #268]	; (80025b0 <SD_disk_initialize+0x1cc>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d064      	beq.n	8002574 <SD_disk_initialize+0x190>
 80024aa:	2100      	movs	r1, #0
 80024ac:	207a      	movs	r0, #122	; 0x7a
 80024ae:	f7ff ff47 	bl	8002340 <SD_SendCmd>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d15d      	bne.n	8002574 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e00c      	b.n	80024d8 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 80024be:	7bfc      	ldrb	r4, [r7, #15]
 80024c0:	f7ff fe08 	bl	80020d4 <SPI_RxByte>
 80024c4:	4603      	mov	r3, r0
 80024c6:	461a      	mov	r2, r3
 80024c8:	f107 0310 	add.w	r3, r7, #16
 80024cc:	4423      	add	r3, r4
 80024ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d9ef      	bls.n	80024be <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80024de:	7a3b      	ldrb	r3, [r7, #8]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d001      	beq.n	80024ec <SD_disk_initialize+0x108>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e000      	b.n	80024ee <SD_disk_initialize+0x10a>
 80024ec:	2302      	movs	r3, #2
 80024ee:	73bb      	strb	r3, [r7, #14]
 80024f0:	e040      	b.n	8002574 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80024f2:	2100      	movs	r1, #0
 80024f4:	2077      	movs	r0, #119	; 0x77
 80024f6:	f7ff ff23 	bl	8002340 <SD_SendCmd>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d808      	bhi.n	8002512 <SD_disk_initialize+0x12e>
 8002500:	2100      	movs	r1, #0
 8002502:	2069      	movs	r0, #105	; 0x69
 8002504:	f7ff ff1c 	bl	8002340 <SD_SendCmd>
 8002508:	4603      	mov	r3, r0
 800250a:	2b01      	cmp	r3, #1
 800250c:	d801      	bhi.n	8002512 <SD_disk_initialize+0x12e>
 800250e:	2302      	movs	r3, #2
 8002510:	e000      	b.n	8002514 <SD_disk_initialize+0x130>
 8002512:	2301      	movs	r3, #1
 8002514:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d10e      	bne.n	800253a <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 800251c:	2100      	movs	r1, #0
 800251e:	2077      	movs	r0, #119	; 0x77
 8002520:	f7ff ff0e 	bl	8002340 <SD_SendCmd>
 8002524:	4603      	mov	r3, r0
 8002526:	2b01      	cmp	r3, #1
 8002528:	d80e      	bhi.n	8002548 <SD_disk_initialize+0x164>
 800252a:	2100      	movs	r1, #0
 800252c:	2069      	movs	r0, #105	; 0x69
 800252e:	f7ff ff07 	bl	8002340 <SD_SendCmd>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d107      	bne.n	8002548 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002538:	e00d      	b.n	8002556 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800253a:	2100      	movs	r1, #0
 800253c:	2041      	movs	r0, #65	; 0x41
 800253e:	f7ff feff 	bl	8002340 <SD_SendCmd>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002548:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <SD_disk_initialize+0x1cc>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1e1      	bne.n	8002516 <SD_disk_initialize+0x132>
 8002552:	e000      	b.n	8002556 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002554:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002556:	4b16      	ldr	r3, [pc, #88]	; (80025b0 <SD_disk_initialize+0x1cc>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <SD_disk_initialize+0x18c>
 8002560:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002564:	2050      	movs	r0, #80	; 0x50
 8002566:	f7ff feeb 	bl	8002340 <SD_SendCmd>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002570:	2300      	movs	r3, #0
 8002572:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002574:	4a0f      	ldr	r2, [pc, #60]	; (80025b4 <SD_disk_initialize+0x1d0>)
 8002576:	7bbb      	ldrb	r3, [r7, #14]
 8002578:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800257a:	f7ff fd85 	bl	8002088 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800257e:	f7ff fda9 	bl	80020d4 <SPI_RxByte>
  
  if (type) 
 8002582:	7bbb      	ldrb	r3, [r7, #14]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002588:	4b08      	ldr	r3, [pc, #32]	; (80025ac <SD_disk_initialize+0x1c8>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f023 0301 	bic.w	r3, r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b05      	ldr	r3, [pc, #20]	; (80025ac <SD_disk_initialize+0x1c8>)
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e001      	b.n	800259e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800259a:	f7ff fe2f 	bl	80021fc <SD_PowerOff>
  }
  
  return Stat;
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <SD_disk_initialize+0x1c8>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	b2db      	uxtb	r3, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd90      	pop	{r4, r7, pc}
 80025ac:	20000028 	.word	0x20000028
 80025b0:	20011070 	.word	0x20011070
 80025b4:	2000244c 	.word	0x2000244c

080025b8 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <SD_disk_status+0x14>
    return STA_NOINIT; 
 80025c8:	2301      	movs	r3, #1
 80025ca:	e002      	b.n	80025d2 <SD_disk_status+0x1a>
  
  return Stat;
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SD_disk_status+0x28>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	b2db      	uxtb	r3, r3
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	20000028 	.word	0x20000028

080025e4 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d102      	bne.n	8002600 <SD_disk_read+0x1c>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <SD_disk_read+0x20>
    return RES_PARERR;
 8002600:	2304      	movs	r3, #4
 8002602:	e051      	b.n	80026a8 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <SD_disk_read+0xcc>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	b2db      	uxtb	r3, r3
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002612:	2303      	movs	r3, #3
 8002614:	e048      	b.n	80026a8 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002616:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <SD_disk_read+0xd0>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b00      	cmp	r3, #0
 8002620:	d102      	bne.n	8002628 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	025b      	lsls	r3, r3, #9
 8002626:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002628:	f7ff fd22 	bl	8002070 <SELECT>
  
  if (count == 1) 
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d111      	bne.n	8002656 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	2051      	movs	r0, #81	; 0x51
 8002636:	f7ff fe83 	bl	8002340 <SD_SendCmd>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d129      	bne.n	8002694 <SD_disk_read+0xb0>
 8002640:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002644:	68b8      	ldr	r0, [r7, #8]
 8002646:	f7ff fdf1 	bl	800222c <SD_RxDataBlock>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d021      	beq.n	8002694 <SD_disk_read+0xb0>
      count = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	e01e      	b.n	8002694 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	2052      	movs	r0, #82	; 0x52
 800265a:	f7ff fe71 	bl	8002340 <SD_SendCmd>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d117      	bne.n	8002694 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002664:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002668:	68b8      	ldr	r0, [r7, #8]
 800266a:	f7ff fddf 	bl	800222c <SD_RxDataBlock>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00a      	beq.n	800268a <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800267a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	3b01      	subs	r3, #1
 8002680:	603b      	str	r3, [r7, #0]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ed      	bne.n	8002664 <SD_disk_read+0x80>
 8002688:	e000      	b.n	800268c <SD_disk_read+0xa8>
          break;
 800268a:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 800268c:	2100      	movs	r1, #0
 800268e:	204c      	movs	r0, #76	; 0x4c
 8002690:	f7ff fe56 	bl	8002340 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002694:	f7ff fcf8 	bl	8002088 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002698:	f7ff fd1c 	bl	80020d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000028 	.word	0x20000028
 80026b4:	2000244c 	.word	0x2000244c

080026b8 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d102      	bne.n	80026d4 <SD_disk_write+0x1c>
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <SD_disk_write+0x20>
    return RES_PARERR;
 80026d4:	2304      	movs	r3, #4
 80026d6:	e06b      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80026d8:	4b37      	ldr	r3, [pc, #220]	; (80027b8 <SD_disk_write+0x100>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <SD_disk_write+0x32>
    return RES_NOTRDY;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e062      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80026ea:	4b33      	ldr	r3, [pc, #204]	; (80027b8 <SD_disk_write+0x100>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d001      	beq.n	80026fc <SD_disk_write+0x44>
    return RES_WRPRT;
 80026f8:	2302      	movs	r3, #2
 80026fa:	e059      	b.n	80027b0 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80026fc:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <SD_disk_write+0x104>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d102      	bne.n	800270e <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	025b      	lsls	r3, r3, #9
 800270c:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800270e:	f7ff fcaf 	bl	8002070 <SELECT>
  
  if (count == 1) 
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d110      	bne.n	800273a <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	2058      	movs	r0, #88	; 0x58
 800271c:	f7ff fe10 	bl	8002340 <SD_SendCmd>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d13a      	bne.n	800279c <SD_disk_write+0xe4>
 8002726:	21fe      	movs	r1, #254	; 0xfe
 8002728:	68b8      	ldr	r0, [r7, #8]
 800272a:	f7ff fdb5 	bl	8002298 <SD_TxDataBlock>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d033      	beq.n	800279c <SD_disk_write+0xe4>
      count = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	603b      	str	r3, [r7, #0]
 8002738:	e030      	b.n	800279c <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 800273a:	4b20      	ldr	r3, [pc, #128]	; (80027bc <SD_disk_write+0x104>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002746:	2100      	movs	r1, #0
 8002748:	2077      	movs	r0, #119	; 0x77
 800274a:	f7ff fdf9 	bl	8002340 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	2057      	movs	r0, #87	; 0x57
 8002752:	f7ff fdf5 	bl	8002340 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	2059      	movs	r0, #89	; 0x59
 800275a:	f7ff fdf1 	bl	8002340 <SD_SendCmd>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d11b      	bne.n	800279c <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002764:	21fc      	movs	r1, #252	; 0xfc
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	f7ff fd96 	bl	8002298 <SD_TxDataBlock>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002778:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	3b01      	subs	r3, #1
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1ee      	bne.n	8002764 <SD_disk_write+0xac>
 8002786:	e000      	b.n	800278a <SD_disk_write+0xd2>
          break;
 8002788:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 800278a:	21fd      	movs	r1, #253	; 0xfd
 800278c:	2000      	movs	r0, #0
 800278e:	f7ff fd83 	bl	8002298 <SD_TxDataBlock>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <SD_disk_write+0xe4>
      {        
        count = 1;
 8002798:	2301      	movs	r3, #1
 800279a:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 800279c:	f7ff fc74 	bl	8002088 <DESELECT>
  SPI_RxByte();
 80027a0:	f7ff fc98 	bl	80020d4 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bf14      	ite	ne
 80027aa:	2301      	movne	r3, #1
 80027ac:	2300      	moveq	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000028 	.word	0x20000028
 80027bc:	2000244c 	.word	0x2000244c

080027c0 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 80027c0:	b590      	push	{r4, r7, lr}
 80027c2:	b08b      	sub	sp, #44	; 0x2c
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	603a      	str	r2, [r7, #0]
 80027ca:	71fb      	strb	r3, [r7, #7]
 80027cc:	460b      	mov	r3, r1
 80027ce:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80027d4:	79fb      	ldrb	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80027da:	2304      	movs	r3, #4
 80027dc:	e11b      	b.n	8002a16 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80027e4:	79bb      	ldrb	r3, [r7, #6]
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d129      	bne.n	800283e <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d017      	beq.n	8002822 <SD_disk_ioctl+0x62>
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	dc1f      	bgt.n	8002836 <SD_disk_ioctl+0x76>
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d002      	beq.n	8002800 <SD_disk_ioctl+0x40>
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d00b      	beq.n	8002816 <SD_disk_ioctl+0x56>
 80027fe:	e01a      	b.n	8002836 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002800:	f7ff fd08 	bl	8002214 <SD_CheckPower>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800280a:	f7ff fcf7 	bl	80021fc <SD_PowerOff>
      res = RES_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002814:	e0fd      	b.n	8002a12 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002816:	f7ff fca5 	bl	8002164 <SD_PowerOn>
      res = RES_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002820:	e0f7      	b.n	8002a12 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002822:	6a3b      	ldr	r3, [r7, #32]
 8002824:	1c5c      	adds	r4, r3, #1
 8002826:	f7ff fcf5 	bl	8002214 <SD_CheckPower>
 800282a:	4603      	mov	r3, r0
 800282c:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 800282e:	2300      	movs	r3, #0
 8002830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002834:	e0ed      	b.n	8002a12 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002836:	2304      	movs	r3, #4
 8002838:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800283c:	e0e9      	b.n	8002a12 <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800283e:	4b78      	ldr	r3, [pc, #480]	; (8002a20 <SD_disk_ioctl+0x260>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b2db      	uxtb	r3, r3
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 800284c:	2303      	movs	r3, #3
 800284e:	e0e2      	b.n	8002a16 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002850:	f7ff fc0e 	bl	8002070 <SELECT>
    
    switch (ctrl) 
 8002854:	79bb      	ldrb	r3, [r7, #6]
 8002856:	2b0d      	cmp	r3, #13
 8002858:	f200 80cc 	bhi.w	80029f4 <SD_disk_ioctl+0x234>
 800285c:	a201      	add	r2, pc, #4	; (adr r2, 8002864 <SD_disk_ioctl+0xa4>)
 800285e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002862:	bf00      	nop
 8002864:	0800295f 	.word	0x0800295f
 8002868:	0800289d 	.word	0x0800289d
 800286c:	0800294f 	.word	0x0800294f
 8002870:	080029f5 	.word	0x080029f5
 8002874:	080029f5 	.word	0x080029f5
 8002878:	080029f5 	.word	0x080029f5
 800287c:	080029f5 	.word	0x080029f5
 8002880:	080029f5 	.word	0x080029f5
 8002884:	080029f5 	.word	0x080029f5
 8002888:	080029f5 	.word	0x080029f5
 800288c:	080029f5 	.word	0x080029f5
 8002890:	08002971 	.word	0x08002971
 8002894:	08002995 	.word	0x08002995
 8002898:	080029b9 	.word	0x080029b9
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 800289c:	2100      	movs	r1, #0
 800289e:	2049      	movs	r0, #73	; 0x49
 80028a0:	f7ff fd4e 	bl	8002340 <SD_SendCmd>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f040 80a8 	bne.w	80029fc <SD_disk_ioctl+0x23c>
 80028ac:	f107 030c 	add.w	r3, r7, #12
 80028b0:	2110      	movs	r1, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff fcba 	bl	800222c <SD_RxDataBlock>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 809e 	beq.w	80029fc <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 80028c0:	7b3b      	ldrb	r3, [r7, #12]
 80028c2:	099b      	lsrs	r3, r3, #6
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10e      	bne.n	80028e8 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80028ca:	7d7b      	ldrb	r3, [r7, #21]
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	7d3b      	ldrb	r3, [r7, #20]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	4413      	add	r3, r2
 80028d8:	b29b      	uxth	r3, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80028de:	8bfb      	ldrh	r3, [r7, #30]
 80028e0:	029a      	lsls	r2, r3, #10
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e02e      	b.n	8002946 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80028e8:	7c7b      	ldrb	r3, [r7, #17]
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	7dbb      	ldrb	r3, [r7, #22]
 80028f2:	09db      	lsrs	r3, r3, #7
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	4413      	add	r3, r2
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	7d7b      	ldrb	r3, [r7, #21]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	f003 0306 	and.w	r3, r3, #6
 8002904:	b2db      	uxtb	r3, r3
 8002906:	4413      	add	r3, r2
 8002908:	b2db      	uxtb	r3, r3
 800290a:	3302      	adds	r3, #2
 800290c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002910:	7d3b      	ldrb	r3, [r7, #20]
 8002912:	099b      	lsrs	r3, r3, #6
 8002914:	b2db      	uxtb	r3, r3
 8002916:	b29a      	uxth	r2, r3
 8002918:	7cfb      	ldrb	r3, [r7, #19]
 800291a:	b29b      	uxth	r3, r3
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	b29b      	uxth	r3, r3
 8002920:	4413      	add	r3, r2
 8002922:	b29a      	uxth	r2, r3
 8002924:	7cbb      	ldrb	r3, [r7, #18]
 8002926:	029b      	lsls	r3, r3, #10
 8002928:	b29b      	uxth	r3, r3
 800292a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800292e:	b29b      	uxth	r3, r3
 8002930:	4413      	add	r3, r2
 8002932:	b29b      	uxth	r3, r3
 8002934:	3301      	adds	r3, #1
 8002936:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002938:	8bfa      	ldrh	r2, [r7, #30]
 800293a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800293e:	3b09      	subs	r3, #9
 8002940:	409a      	lsls	r2, r3
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800294c:	e056      	b.n	80029fc <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002954:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800295c:	e055      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800295e:	f7ff fbe5 	bl	800212c <SD_ReadyWait>
 8002962:	4603      	mov	r3, r0
 8002964:	2bff      	cmp	r3, #255	; 0xff
 8002966:	d14b      	bne.n	8002a00 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800296e:	e047      	b.n	8002a00 <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002970:	2100      	movs	r1, #0
 8002972:	2049      	movs	r0, #73	; 0x49
 8002974:	f7ff fce4 	bl	8002340 <SD_SendCmd>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d142      	bne.n	8002a04 <SD_disk_ioctl+0x244>
 800297e:	2110      	movs	r1, #16
 8002980:	6a38      	ldr	r0, [r7, #32]
 8002982:	f7ff fc53 	bl	800222c <SD_RxDataBlock>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d03b      	beq.n	8002a04 <SD_disk_ioctl+0x244>
        res = RES_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002992:	e037      	b.n	8002a04 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002994:	2100      	movs	r1, #0
 8002996:	204a      	movs	r0, #74	; 0x4a
 8002998:	f7ff fcd2 	bl	8002340 <SD_SendCmd>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d132      	bne.n	8002a08 <SD_disk_ioctl+0x248>
 80029a2:	2110      	movs	r1, #16
 80029a4:	6a38      	ldr	r0, [r7, #32]
 80029a6:	f7ff fc41 	bl	800222c <SD_RxDataBlock>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02b      	beq.n	8002a08 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80029b0:	2300      	movs	r3, #0
 80029b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80029b6:	e027      	b.n	8002a08 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80029b8:	2100      	movs	r1, #0
 80029ba:	207a      	movs	r0, #122	; 0x7a
 80029bc:	f7ff fcc0 	bl	8002340 <SD_SendCmd>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d116      	bne.n	80029f4 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80029c6:	2300      	movs	r3, #0
 80029c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029cc:	e00b      	b.n	80029e6 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80029ce:	6a3c      	ldr	r4, [r7, #32]
 80029d0:	1c63      	adds	r3, r4, #1
 80029d2:	623b      	str	r3, [r7, #32]
 80029d4:	f7ff fb7e 	bl	80020d4 <SPI_RxByte>
 80029d8:	4603      	mov	r3, r0
 80029da:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80029dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029e0:	3301      	adds	r3, #1
 80029e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80029e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	d9ef      	bls.n	80029ce <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80029fa:	e006      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 80029fc:	bf00      	nop
 80029fe:	e004      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a00:	bf00      	nop
 8002a02:	e002      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <SD_disk_ioctl+0x24a>
      break;
 8002a08:	bf00      	nop
    }
    
    DESELECT();
 8002a0a:	f7ff fb3d 	bl	8002088 <DESELECT>
    SPI_RxByte();
 8002a0e:	f7ff fb61 	bl	80020d4 <SPI_RxByte>
  }
  
  return res;
 8002a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	372c      	adds	r7, #44	; 0x2c
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd90      	pop	{r4, r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000028 	.word	0x20000028

08002a24 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af02      	add	r7, sp, #8
 8002a2a:	603a      	str	r2, [r7, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
 8002a32:	460b      	mov	r3, r1
 8002a34:	71bb      	strb	r3, [r7, #6]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8002a3a:	79fb      	ldrb	r3, [r7, #7]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	b299      	uxth	r1, r3
 8002a42:	1dba      	adds	r2, r7, #6
 8002a44:	230a      	movs	r3, #10
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2301      	movs	r3, #1
 8002a4a:	4811      	ldr	r0, [pc, #68]	; (8002a90 <user_i2c_read+0x6c>)
 8002a4c:	f005 fcd4 	bl	80083f8 <HAL_I2C_Master_Transmit>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <user_i2c_read+0x38>
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a5a:	e014      	b.n	8002a86 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	b21b      	sxth	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	b299      	uxth	r1, r3
 8002a6a:	88bb      	ldrh	r3, [r7, #4]
 8002a6c:	220a      	movs	r2, #10
 8002a6e:	9200      	str	r2, [sp, #0]
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	4807      	ldr	r0, [pc, #28]	; (8002a90 <user_i2c_read+0x6c>)
 8002a74:	f005 fdbe 	bl	80085f4 <HAL_I2C_Master_Receive>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <user_i2c_read+0x60>
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a82:	e000      	b.n	8002a86 <user_i2c_read+0x62>

  return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	200099c0 	.word	0x200099c0

08002a94 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f004 fb05 	bl	80070ac <HAL_Delay>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	603a      	str	r2, [r7, #0]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
 8002aba:	460b      	mov	r3, r1
 8002abc:	71bb      	strb	r3, [r7, #6]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 8002ac2:	88bb      	ldrh	r3, [r7, #4]
 8002ac4:	3301      	adds	r3, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f016 f872 	bl	8018bb0 <malloc>
 8002acc:	4603      	mov	r3, r0
 8002ace:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 8002ad0:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3301      	adds	r3, #1
 8002adc:	88ba      	ldrh	r2, [r7, #4]
 8002ade:	6839      	ldr	r1, [r7, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f016 f875 	bl	8018bd0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	b299      	uxth	r1, r3
 8002aee:	88bb      	ldrh	r3, [r7, #4]
 8002af0:	3301      	adds	r3, #1
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002af8:	9200      	str	r2, [sp, #0]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4808      	ldr	r0, [pc, #32]	; (8002b20 <user_i2c_write+0x74>)
 8002afe:	f005 fc7b 	bl	80083f8 <HAL_I2C_Master_Transmit>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <user_i2c_write+0x62>
 8002b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0c:	e003      	b.n	8002b16 <user_i2c_write+0x6a>

  free(buf);
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f016 f856 	bl	8018bc0 <free>
  return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	200099c0 	.word	0x200099c0

08002b24 <delay_us>:
// End BME280 part/////////////////////////////////////////////////////////////////////////////////////

// ---------------------------------------------------------------------------------
// Function for generate dalay more than 10 us (using for AM2302 T and H sensor)
bool delay_us(uint16_t us)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <delay_us+0x50>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8002b36:	88fb      	ldrh	r3, [r7, #6]
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <delay_us+0x54>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	461a      	mov	r2, r3
 8002b44:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <delay_us+0x58>)
 8002b46:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8002b48:	480a      	ldr	r0, [pc, #40]	; (8002b74 <delay_us+0x50>)
 8002b4a:	f00a fa07 	bl	800cf5c <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 8002b4e:	bf00      	nop
 8002b50:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <delay_us+0x58>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1fb      	bne.n	8002b50 <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8002b58:	4806      	ldr	r0, [pc, #24]	; (8002b74 <delay_us+0x50>)
 8002b5a:	f00a fa6f 	bl	800d03c <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <delay_us+0x58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
	int s = 99;
 8002b64:	2363      	movs	r3, #99	; 0x63
 8002b66:	60fb      	str	r3, [r7, #12]
	return true;
 8002b68:	2301      	movs	r3, #1
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000abf0 	.word	0x2000abf0
 8002b78:	cccccccd 	.word	0xcccccccd
 8002b7c:	2000283c 	.word	0x2000283c

08002b80 <HAL_SPI_TxCpltCallback>:
// ---------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	; (8002bbc <HAL_SPI_TxCpltCallback+0x3c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d111      	bne.n	8002bb4 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b98:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d108      	bne.n	8002bb4 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 8002ba2:	4806      	ldr	r0, [pc, #24]	; (8002bbc <HAL_SPI_TxCpltCallback+0x3c>)
 8002ba4:	f009 fec8 	bl	800c938 <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_SPI_TxCpltCallback+0x40>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_SPI_TxCpltCallback+0x44>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	2000aad8 	.word	0x2000aad8
 8002bc0:	2000002c 	.word	0x2000002c
 8002bc4:	20002840 	.word	0x20002840

08002bc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bcc:	f004 fa2c 	bl	8007028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bd0:	f000 f90c 	bl	8002dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd4:	f000 fc0e 	bl	80033f4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8002bd8:	f000 fb7c 	bl	80032d4 <MX_TIM3_Init>
  MX_I2C3_Init();
 8002bdc:	f000 f9a0 	bl	8002f20 <MX_I2C3_Init>
  MX_TIM2_Init();
 8002be0:	f000 fb2c 	bl	800323c <MX_TIM2_Init>
  MX_TIM10_Init();
 8002be4:	f000 fbc4 	bl	8003370 <MX_TIM10_Init>
  MX_SPI1_Init();
 8002be8:	f000 fa6a 	bl	80030c0 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002bec:	f00c f990 	bl	800ef10 <MX_FATFS_Init>
  MX_TIM1_Init();
 8002bf0:	f000 fad2 	bl	8003198 <MX_TIM1_Init>
  MX_RTC_Init();
 8002bf4:	f000 f9d6 	bl	8002fa4 <MX_RTC_Init>
  MX_SPI2_Init();
 8002bf8:	f000 fa98 	bl	800312c <MX_SPI2_Init>
  MX_DMA_Init();
 8002bfc:	f000 fbda 	bl	80033b4 <MX_DMA_Init>
  MX_RNG_Init();
 8002c00:	f000 f9bc 	bl	8002f7c <MX_RNG_Init>
  MX_I2C2_Init();
 8002c04:	f000 f95e 	bl	8002ec4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8002c08:	484a      	ldr	r0, [pc, #296]	; (8002d34 <main+0x16c>)
 8002c0a:	f00a f9a7 	bl	800cf5c <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8002c0e:	484a      	ldr	r0, [pc, #296]	; (8002d38 <main+0x170>)
 8002c10:	f00a f9a4 	bl	800cf5c <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 8002c14:	4849      	ldr	r0, [pc, #292]	; (8002d3c <main+0x174>)
 8002c16:	f004 fc2f 	bl	8007478 <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8002c1a:	4849      	ldr	r0, [pc, #292]	; (8002d40 <main+0x178>)
 8002c1c:	f009 facf 	bl	800c1be <HAL_SPI_DeInit>
  MX_DMA_Init();
 8002c20:	f000 fbc8 	bl	80033b4 <MX_DMA_Init>
  MX_SPI2_Init();
 8002c24:	f000 fa82 	bl	800312c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002c28:	f011 fa12 	bl	8014050 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8002c2c:	4a45      	ldr	r2, [pc, #276]	; (8002d44 <main+0x17c>)
 8002c2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c32:	200a      	movs	r0, #10
 8002c34:	f011 fc46 	bl	80144c4 <osMessageQueueNew>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4a43      	ldr	r2, [pc, #268]	; (8002d48 <main+0x180>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 8002c3e:	4a43      	ldr	r2, [pc, #268]	; (8002d4c <main+0x184>)
 8002c40:	2164      	movs	r1, #100	; 0x64
 8002c42:	2001      	movs	r0, #1
 8002c44:	f011 fc3e 	bl	80144c4 <osMessageQueueNew>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	4a41      	ldr	r2, [pc, #260]	; (8002d50 <main+0x188>)
 8002c4c:	6013      	str	r3, [r2, #0]

  /* creation of BME280_Queue */
  BME280_QueueHandle = osMessageQueueNew (2, sizeof(BME280QUEUE), &BME280_Queue_attributes);
 8002c4e:	4a41      	ldr	r2, [pc, #260]	; (8002d54 <main+0x18c>)
 8002c50:	2114      	movs	r1, #20
 8002c52:	2002      	movs	r0, #2
 8002c54:	f011 fc36 	bl	80144c4 <osMessageQueueNew>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	4a3f      	ldr	r2, [pc, #252]	; (8002d58 <main+0x190>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050_Acc_Queue */
  MPU6050_Acc_QueueHandle = osMessageQueueNew (1, sizeof(MPU6050ACCQUEUE), &MPU6050_Acc_Queue_attributes);
 8002c5e:	4a3f      	ldr	r2, [pc, #252]	; (8002d5c <main+0x194>)
 8002c60:	211e      	movs	r1, #30
 8002c62:	2001      	movs	r0, #1
 8002c64:	f011 fc2e 	bl	80144c4 <osMessageQueueNew>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	4a3d      	ldr	r2, [pc, #244]	; (8002d60 <main+0x198>)
 8002c6c:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050_Gyro_Queue */
  MPU6050_Gyro_QueueHandle = osMessageQueueNew (1, sizeof(MPU6050GYROQUEUE), &MPU6050_Gyro_Queue_attributes);
 8002c6e:	4a3d      	ldr	r2, [pc, #244]	; (8002d64 <main+0x19c>)
 8002c70:	211e      	movs	r1, #30
 8002c72:	2001      	movs	r0, #1
 8002c74:	f011 fc26 	bl	80144c4 <osMessageQueueNew>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4a3b      	ldr	r2, [pc, #236]	; (8002d68 <main+0x1a0>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050_Temp_Queue */
  MPU6050_Temp_QueueHandle = osMessageQueueNew (1, sizeof(MPU6050TEMPQUEUE), &MPU6050_Temp_Queue_attributes);
 8002c7e:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <main+0x1a4>)
 8002c80:	210a      	movs	r1, #10
 8002c82:	2001      	movs	r0, #1
 8002c84:	f011 fc1e 	bl	80144c4 <osMessageQueueNew>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a39      	ldr	r2, [pc, #228]	; (8002d70 <main+0x1a8>)
 8002c8c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002c8e:	4a39      	ldr	r2, [pc, #228]	; (8002d74 <main+0x1ac>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	4839      	ldr	r0, [pc, #228]	; (8002d78 <main+0x1b0>)
 8002c94:	f011 fa26 	bl	80140e4 <osThreadNew>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a38      	ldr	r2, [pc, #224]	; (8002d7c <main+0x1b4>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8002c9e:	4a38      	ldr	r2, [pc, #224]	; (8002d80 <main+0x1b8>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4838      	ldr	r0, [pc, #224]	; (8002d84 <main+0x1bc>)
 8002ca4:	f011 fa1e 	bl	80140e4 <osThreadNew>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a37      	ldr	r2, [pc, #220]	; (8002d88 <main+0x1c0>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8002cae:	4a37      	ldr	r2, [pc, #220]	; (8002d8c <main+0x1c4>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	4837      	ldr	r0, [pc, #220]	; (8002d90 <main+0x1c8>)
 8002cb4:	f011 fa16 	bl	80140e4 <osThreadNew>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a36      	ldr	r2, [pc, #216]	; (8002d94 <main+0x1cc>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8002cbe:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <main+0x1d0>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4836      	ldr	r0, [pc, #216]	; (8002d9c <main+0x1d4>)
 8002cc4:	f011 fa0e 	bl	80140e4 <osThreadNew>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a35      	ldr	r2, [pc, #212]	; (8002da0 <main+0x1d8>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 8002cce:	4a35      	ldr	r2, [pc, #212]	; (8002da4 <main+0x1dc>)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4835      	ldr	r0, [pc, #212]	; (8002da8 <main+0x1e0>)
 8002cd4:	f011 fa06 	bl	80140e4 <osThreadNew>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a34      	ldr	r2, [pc, #208]	; (8002dac <main+0x1e4>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 8002cde:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <main+0x1e8>)
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4834      	ldr	r0, [pc, #208]	; (8002db4 <main+0x1ec>)
 8002ce4:	f011 f9fe 	bl	80140e4 <osThreadNew>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <main+0x1f0>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 8002cee:	4a33      	ldr	r2, [pc, #204]	; (8002dbc <main+0x1f4>)
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4833      	ldr	r0, [pc, #204]	; (8002dc0 <main+0x1f8>)
 8002cf4:	f011 f9f6 	bl	80140e4 <osThreadNew>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4a32      	ldr	r2, [pc, #200]	; (8002dc4 <main+0x1fc>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8002cfe:	4a32      	ldr	r2, [pc, #200]	; (8002dc8 <main+0x200>)
 8002d00:	2100      	movs	r1, #0
 8002d02:	4832      	ldr	r0, [pc, #200]	; (8002dcc <main+0x204>)
 8002d04:	f011 f9ee 	bl	80140e4 <osThreadNew>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <main+0x208>)
 8002d0c:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 8002d0e:	4a31      	ldr	r2, [pc, #196]	; (8002dd4 <main+0x20c>)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4831      	ldr	r0, [pc, #196]	; (8002dd8 <main+0x210>)
 8002d14:	f011 f9e6 	bl	80140e4 <osThreadNew>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <main+0x214>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* creation of MPU6050 */
  MPU6050Handle = osThreadNew(Start_MPU6050, NULL, &MPU6050_attributes);
 8002d1e:	4a30      	ldr	r2, [pc, #192]	; (8002de0 <main+0x218>)
 8002d20:	2100      	movs	r1, #0
 8002d22:	4830      	ldr	r0, [pc, #192]	; (8002de4 <main+0x21c>)
 8002d24:	f011 f9de 	bl	80140e4 <osThreadNew>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	4a2f      	ldr	r2, [pc, #188]	; (8002de8 <main+0x220>)
 8002d2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002d2e:	f011 f9b3 	bl	8014098 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <main+0x16a>
 8002d34:	2000e754 	.word	0x2000e754
 8002d38:	20010200 	.word	0x20010200
 8002d3c:	20011010 	.word	0x20011010
 8002d40:	2000aad8 	.word	0x2000aad8
 8002d44:	0802059c 	.word	0x0802059c
 8002d48:	2000b6c0 	.word	0x2000b6c0
 8002d4c:	080205b4 	.word	0x080205b4
 8002d50:	2000f864 	.word	0x2000f864
 8002d54:	080205cc 	.word	0x080205cc
 8002d58:	2000e79c 	.word	0x2000e79c
 8002d5c:	080205e4 	.word	0x080205e4
 8002d60:	200098b8 	.word	0x200098b8
 8002d64:	080205fc 	.word	0x080205fc
 8002d68:	200104ac 	.word	0x200104ac
 8002d6c:	08020614 	.word	0x08020614
 8002d70:	200104b4 	.word	0x200104b4
 8002d74:	08020434 	.word	0x08020434
 8002d78:	080036d1 	.word	0x080036d1
 8002d7c:	2000997c 	.word	0x2000997c
 8002d80:	08020458 	.word	0x08020458
 8002d84:	080036e5 	.word	0x080036e5
 8002d88:	20011a14 	.word	0x20011a14
 8002d8c:	0802047c 	.word	0x0802047c
 8002d90:	08003961 	.word	0x08003961
 8002d94:	200104bc 	.word	0x200104bc
 8002d98:	080204a0 	.word	0x080204a0
 8002d9c:	08003bdd 	.word	0x08003bdd
 8002da0:	2000e7a0 	.word	0x2000e7a0
 8002da4:	080204c4 	.word	0x080204c4
 8002da8:	08003c39 	.word	0x08003c39
 8002dac:	20011a18 	.word	0x20011a18
 8002db0:	080204e8 	.word	0x080204e8
 8002db4:	08003f11 	.word	0x08003f11
 8002db8:	200104b0 	.word	0x200104b0
 8002dbc:	0802050c 	.word	0x0802050c
 8002dc0:	080042c9 	.word	0x080042c9
 8002dc4:	2000b4e8 	.word	0x2000b4e8
 8002dc8:	08020530 	.word	0x08020530
 8002dcc:	0800438d 	.word	0x0800438d
 8002dd0:	2000f86c 	.word	0x2000f86c
 8002dd4:	08020554 	.word	0x08020554
 8002dd8:	080044b9 	.word	0x080044b9
 8002ddc:	2000f868 	.word	0x2000f868
 8002de0:	08020578 	.word	0x08020578
 8002de4:	080046a1 	.word	0x080046a1
 8002de8:	2000b4ec 	.word	0x2000b4ec

08002dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b094      	sub	sp, #80	; 0x50
 8002df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002df2:	f107 0320 	add.w	r3, r7, #32
 8002df6:	2230      	movs	r2, #48	; 0x30
 8002df8:	2100      	movs	r1, #0
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f015 fef6 	bl	8018bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e00:	f107 030c 	add.w	r3, r7, #12
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	60da      	str	r2, [r3, #12]
 8002e0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	4b29      	ldr	r3, [pc, #164]	; (8002ebc <SystemClock_Config+0xd0>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <SystemClock_Config+0xd0>)
 8002e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e20:	4b26      	ldr	r3, [pc, #152]	; (8002ebc <SystemClock_Config+0xd0>)
 8002e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	4b23      	ldr	r3, [pc, #140]	; (8002ec0 <SystemClock_Config+0xd4>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a22      	ldr	r2, [pc, #136]	; (8002ec0 <SystemClock_Config+0xd4>)
 8002e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e3a:	6013      	str	r3, [r2, #0]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <SystemClock_Config+0xd4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002e48:	2305      	movs	r3, #5
 8002e4a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e52:	2301      	movs	r3, #1
 8002e54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e56:	2302      	movs	r3, #2
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e60:	2308      	movs	r3, #8
 8002e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002e64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002e6e:	2307      	movs	r3, #7
 8002e70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e72:	f107 0320 	add.w	r3, r7, #32
 8002e76:	4618      	mov	r0, r3
 8002e78:	f007 ff30 	bl	800acdc <HAL_RCC_OscConfig>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002e82:	f001 fea7 	bl	8004bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e86:	230f      	movs	r3, #15
 8002e88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e9e:	f107 030c 	add.w	r3, r7, #12
 8002ea2:	2105      	movs	r1, #5
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f008 f991 	bl	800b1cc <HAL_RCC_ClockConfig>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d001      	beq.n	8002eb4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002eb0:	f001 fe90 	bl	8004bd4 <Error_Handler>
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	3750      	adds	r7, #80	; 0x50
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40007000 	.word	0x40007000

08002ec4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002ec8:	4b12      	ldr	r3, [pc, #72]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002eca:	4a13      	ldr	r2, [pc, #76]	; (8002f18 <MX_I2C2_Init+0x54>)
 8002ecc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002ed0:	4a12      	ldr	r2, [pc, #72]	; (8002f1c <MX_I2C2_Init+0x58>)
 8002ed2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ed4:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002ee2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ee6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ef4:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002efa:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002f00:	4804      	ldr	r0, [pc, #16]	; (8002f14 <MX_I2C2_Init+0x50>)
 8002f02:	f005 f935 	bl	8008170 <HAL_I2C_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002f0c:	f001 fe62 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000ac38 	.word	0x2000ac38
 8002f18:	40005800 	.word	0x40005800
 8002f1c:	000186a0 	.word	0x000186a0

08002f20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002f24:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <MX_I2C3_Init+0x54>)
 8002f28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f2c:	4a12      	ldr	r2, [pc, #72]	; (8002f78 <MX_I2C3_Init+0x58>)
 8002f2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002f4a:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f50:	4b07      	ldr	r3, [pc, #28]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f56:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <MX_I2C3_Init+0x50>)
 8002f5e:	f005 f907 	bl	8008170 <HAL_I2C_Init>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002f68:	f001 fe34 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002f6c:	bf00      	nop
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	200099c0 	.word	0x200099c0
 8002f74:	40005c00 	.word	0x40005c00
 8002f78:	000186a0 	.word	0x000186a0

08002f7c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <MX_RNG_Init+0x20>)
 8002f82:	4a07      	ldr	r2, [pc, #28]	; (8002fa0 <MX_RNG_Init+0x24>)
 8002f84:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <MX_RNG_Init+0x20>)
 8002f88:	f008 fc1c 	bl	800b7c4 <HAL_RNG_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002f92:	f001 fe1f 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002f96:	bf00      	nop
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	2001044c 	.word	0x2001044c
 8002fa0:	50060800 	.word	0x50060800

08002fa4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b090      	sub	sp, #64	; 0x40
 8002fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002faa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	609a      	str	r2, [r3, #8]
 8002fb6:	60da      	str	r2, [r3, #12]
 8002fb8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002fba:	2300      	movs	r3, #0
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8002fbe:	463b      	mov	r3, r7
 8002fc0:	2228      	movs	r2, #40	; 0x28
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f015 fe11 	bl	8018bec <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <MX_RTC_Init+0x114>)
 8002fcc:	4a3b      	ldr	r2, [pc, #236]	; (80030bc <MX_RTC_Init+0x118>)
 8002fce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002fd0:	4b39      	ldr	r3, [pc, #228]	; (80030b8 <MX_RTC_Init+0x114>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002fd6:	4b38      	ldr	r3, [pc, #224]	; (80030b8 <MX_RTC_Init+0x114>)
 8002fd8:	227f      	movs	r2, #127	; 0x7f
 8002fda:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002fdc:	4b36      	ldr	r3, [pc, #216]	; (80030b8 <MX_RTC_Init+0x114>)
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002fe2:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <MX_RTC_Init+0x114>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002fe8:	4b33      	ldr	r3, [pc, #204]	; (80030b8 <MX_RTC_Init+0x114>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002fee:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <MX_RTC_Init+0x114>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ff4:	4830      	ldr	r0, [pc, #192]	; (80030b8 <MX_RTC_Init+0x114>)
 8002ff6:	f008 fc0f 	bl	800b818 <HAL_RTC_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003000:	f001 fde8 	bl	8004bd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8003004:	2323      	movs	r3, #35	; 0x23
 8003006:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 800300a:	2359      	movs	r3, #89	; 0x59
 800300c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8003010:	2345      	movs	r3, #69	; 0x45
 8003012:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003016:	2300      	movs	r3, #0
 8003018:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800301a:	2300      	movs	r3, #0
 800301c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800301e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003022:	2201      	movs	r2, #1
 8003024:	4619      	mov	r1, r3
 8003026:	4824      	ldr	r0, [pc, #144]	; (80030b8 <MX_RTC_Init+0x114>)
 8003028:	f008 fc87 	bl	800b93a <HAL_RTC_SetTime>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003032:	f001 fdcf 	bl	8004bd4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003036:	2302      	movs	r3, #2
 8003038:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 800303c:	2312      	movs	r3, #18
 800303e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 8003042:	2328      	movs	r3, #40	; 0x28
 8003044:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800304e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003052:	2201      	movs	r2, #1
 8003054:	4619      	mov	r1, r3
 8003056:	4818      	ldr	r0, [pc, #96]	; (80030b8 <MX_RTC_Init+0x114>)
 8003058:	f008 fd8a 	bl	800bb70 <HAL_RTC_SetDate>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003062:	f001 fdb7 	bl	8004bd4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003066:	2300      	movs	r3, #0
 8003068:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800306a:	2300      	movs	r3, #0
 800306c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800306e:	2310      	movs	r3, #16
 8003070:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003072:	2300      	movs	r3, #0
 8003074:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003082:	2300      	movs	r3, #0
 8003084:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003086:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800308a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003092:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003098:	463b      	mov	r3, r7
 800309a:	2201      	movs	r2, #1
 800309c:	4619      	mov	r1, r3
 800309e:	4806      	ldr	r0, [pc, #24]	; (80030b8 <MX_RTC_Init+0x114>)
 80030a0:	f008 fe5c 	bl	800bd5c <HAL_RTC_SetAlarm>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80030aa:	f001 fd93 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80030ae:	bf00      	nop
 80030b0:	3740      	adds	r7, #64	; 0x40
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	2000f890 	.word	0x2000f890
 80030bc:	40002800 	.word	0x40002800

080030c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <MX_SPI1_Init+0x64>)
 80030c6:	4a18      	ldr	r2, [pc, #96]	; (8003128 <MX_SPI1_Init+0x68>)
 80030c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ca:	4b16      	ldr	r3, [pc, #88]	; (8003124 <MX_SPI1_Init+0x64>)
 80030cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <MX_SPI1_Init+0x64>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <MX_SPI1_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030de:	4b11      	ldr	r3, [pc, #68]	; (8003124 <MX_SPI1_Init+0x64>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <MX_SPI1_Init+0x64>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <MX_SPI1_Init+0x64>)
 80030ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80030f2:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <MX_SPI1_Init+0x64>)
 80030f4:	2220      	movs	r2, #32
 80030f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <MX_SPI1_Init+0x64>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030fe:	4b09      	ldr	r3, [pc, #36]	; (8003124 <MX_SPI1_Init+0x64>)
 8003100:	2200      	movs	r2, #0
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003104:	4b07      	ldr	r3, [pc, #28]	; (8003124 <MX_SPI1_Init+0x64>)
 8003106:	2200      	movs	r2, #0
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800310a:	4b06      	ldr	r3, [pc, #24]	; (8003124 <MX_SPI1_Init+0x64>)
 800310c:	220a      	movs	r2, #10
 800310e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003110:	4804      	ldr	r0, [pc, #16]	; (8003124 <MX_SPI1_Init+0x64>)
 8003112:	f008 ffcb 	bl	800c0ac <HAL_SPI_Init>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800311c:	f001 fd5a 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003120:	bf00      	nop
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200104c0 	.word	0x200104c0
 8003128:	40013000 	.word	0x40013000

0800312c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <MX_SPI2_Init+0x64>)
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <MX_SPI2_Init+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <MX_SPI2_Init+0x64>)
 8003138:	f44f 7282 	mov.w	r2, #260	; 0x104
 800313c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <MX_SPI2_Init+0x64>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003144:	4b12      	ldr	r3, [pc, #72]	; (8003190 <MX_SPI2_Init+0x64>)
 8003146:	2200      	movs	r2, #0
 8003148:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800314a:	4b11      	ldr	r3, [pc, #68]	; (8003190 <MX_SPI2_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003150:	4b0f      	ldr	r3, [pc, #60]	; (8003190 <MX_SPI2_Init+0x64>)
 8003152:	2200      	movs	r2, #0
 8003154:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003156:	4b0e      	ldr	r3, [pc, #56]	; (8003190 <MX_SPI2_Init+0x64>)
 8003158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800315c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800315e:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <MX_SPI2_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <MX_SPI2_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <MX_SPI2_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <MX_SPI2_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003176:	4b06      	ldr	r3, [pc, #24]	; (8003190 <MX_SPI2_Init+0x64>)
 8003178:	220a      	movs	r2, #10
 800317a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <MX_SPI2_Init+0x64>)
 800317e:	f008 ff95 	bl	800c0ac <HAL_SPI_Init>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d001      	beq.n	800318c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003188:	f001 fd24 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800318c:	bf00      	nop
 800318e:	bd80      	pop	{r7, pc}
 8003190:	2000aad8 	.word	0x2000aad8
 8003194:	40003800 	.word	0x40003800

08003198 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800319e:	f107 0308 	add.w	r3, r7, #8
 80031a2:	2200      	movs	r2, #0
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	609a      	str	r2, [r3, #8]
 80031aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ac:	463b      	mov	r3, r7
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031b6:	4a20      	ldr	r2, [pc, #128]	; (8003238 <MX_TIM1_Init+0xa0>)
 80031b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80031ba:	4b1e      	ldr	r3, [pc, #120]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031bc:	f244 129f 	movw	r2, #16799	; 0x419f
 80031c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031c2:	4b1c      	ldr	r3, [pc, #112]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80031ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031d0:	4b18      	ldr	r3, [pc, #96]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031d6:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031dc:	4b15      	ldr	r3, [pc, #84]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031e2:	4814      	ldr	r0, [pc, #80]	; (8003234 <MX_TIM1_Init+0x9c>)
 80031e4:	f009 fe6a 	bl	800cebc <HAL_TIM_Base_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80031ee:	f001 fcf1 	bl	8004bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031f8:	f107 0308 	add.w	r3, r7, #8
 80031fc:	4619      	mov	r1, r3
 80031fe:	480d      	ldr	r0, [pc, #52]	; (8003234 <MX_TIM1_Init+0x9c>)
 8003200:	f00a f853 	bl	800d2aa <HAL_TIM_ConfigClockSource>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800320a:	f001 fce3 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800320e:	2320      	movs	r3, #32
 8003210:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003216:	463b      	mov	r3, r7
 8003218:	4619      	mov	r1, r3
 800321a:	4806      	ldr	r0, [pc, #24]	; (8003234 <MX_TIM1_Init+0x9c>)
 800321c:	f00a fa6e 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003226:	f001 fcd5 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20010200 	.word	0x20010200
 8003238:	40010000 	.word	0x40010000

0800323c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003242:	f107 0308 	add.w	r3, r7, #8
 8003246:	2200      	movs	r2, #0
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003250:	463b      	mov	r3, r7
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003258:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <MX_TIM2_Init+0x94>)
 800325a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800325e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <MX_TIM2_Init+0x94>)
 8003262:	220a      	movs	r2, #10
 8003264:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003266:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <MX_TIM2_Init+0x94>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <MX_TIM2_Init+0x94>)
 800326e:	220a      	movs	r2, #10
 8003270:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <MX_TIM2_Init+0x94>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003278:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <MX_TIM2_Init+0x94>)
 800327a:	2200      	movs	r2, #0
 800327c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800327e:	4814      	ldr	r0, [pc, #80]	; (80032d0 <MX_TIM2_Init+0x94>)
 8003280:	f009 fe1c 	bl	800cebc <HAL_TIM_Base_Init>
 8003284:	4603      	mov	r3, r0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800328a:	f001 fca3 	bl	8004bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800328e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003292:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003294:	f107 0308 	add.w	r3, r7, #8
 8003298:	4619      	mov	r1, r3
 800329a:	480d      	ldr	r0, [pc, #52]	; (80032d0 <MX_TIM2_Init+0x94>)
 800329c:	f00a f805 	bl	800d2aa <HAL_TIM_ConfigClockSource>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80032a6:	f001 fc95 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032b2:	463b      	mov	r3, r7
 80032b4:	4619      	mov	r1, r3
 80032b6:	4806      	ldr	r0, [pc, #24]	; (80032d0 <MX_TIM2_Init+0x94>)
 80032b8:	f00a fa20 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80032c2:	f001 fc87 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200105d8 	.word	0x200105d8

080032d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032da:	f107 0308 	add.w	r3, r7, #8
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	605a      	str	r2, [r3, #4]
 80032e4:	609a      	str	r2, [r3, #8]
 80032e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e8:	463b      	mov	r3, r7
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
 80032ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032f0:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <MX_TIM3_Init+0x94>)
 80032f2:	4a1e      	ldr	r2, [pc, #120]	; (800336c <MX_TIM3_Init+0x98>)
 80032f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <MX_TIM3_Init+0x94>)
 80032f8:	f240 3247 	movw	r2, #839	; 0x347
 80032fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <MX_TIM3_Init+0x94>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <MX_TIM3_Init+0x94>)
 8003306:	220a      	movs	r2, #10
 8003308:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <MX_TIM3_Init+0x94>)
 800330c:	2200      	movs	r2, #0
 800330e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <MX_TIM3_Init+0x94>)
 8003312:	2280      	movs	r2, #128	; 0x80
 8003314:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003316:	4814      	ldr	r0, [pc, #80]	; (8003368 <MX_TIM3_Init+0x94>)
 8003318:	f009 fdd0 	bl	800cebc <HAL_TIM_Base_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003322:	f001 fc57 	bl	8004bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800332a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	4619      	mov	r1, r3
 8003332:	480d      	ldr	r0, [pc, #52]	; (8003368 <MX_TIM3_Init+0x94>)
 8003334:	f009 ffb9 	bl	800d2aa <HAL_TIM_ConfigClockSource>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800333e:	f001 fc49 	bl	8004bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003342:	2300      	movs	r3, #0
 8003344:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003346:	2300      	movs	r3, #0
 8003348:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800334a:	463b      	mov	r3, r7
 800334c:	4619      	mov	r1, r3
 800334e:	4806      	ldr	r0, [pc, #24]	; (8003368 <MX_TIM3_Init+0x94>)
 8003350:	f00a f9d4 	bl	800d6fc <HAL_TIMEx_MasterConfigSynchronization>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800335a:	f001 fc3b 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800335e:	bf00      	nop
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	2000e754 	.word	0x2000e754
 800336c:	40000400 	.word	0x40000400

08003370 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003374:	4b0d      	ldr	r3, [pc, #52]	; (80033ac <MX_TIM10_Init+0x3c>)
 8003376:	4a0e      	ldr	r2, [pc, #56]	; (80033b0 <MX_TIM10_Init+0x40>)
 8003378:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800337a:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <MX_TIM10_Init+0x3c>)
 800337c:	22a7      	movs	r2, #167	; 0xa7
 800337e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <MX_TIM10_Init+0x3c>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <MX_TIM10_Init+0x3c>)
 8003388:	2209      	movs	r2, #9
 800338a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338c:	4b07      	ldr	r3, [pc, #28]	; (80033ac <MX_TIM10_Init+0x3c>)
 800338e:	2200      	movs	r2, #0
 8003390:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003392:	4b06      	ldr	r3, [pc, #24]	; (80033ac <MX_TIM10_Init+0x3c>)
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003398:	4804      	ldr	r0, [pc, #16]	; (80033ac <MX_TIM10_Init+0x3c>)
 800339a:	f009 fd8f 	bl	800cebc <HAL_TIM_Base_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80033a4:	f001 fc16 	bl	8004bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80033a8:	bf00      	nop
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	2000abf0 	.word	0x2000abf0
 80033b0:	40014400 	.word	0x40014400

080033b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_DMA_Init+0x3c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <MX_DMA_Init+0x3c>)
 80033c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_DMA_Init+0x3c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2105      	movs	r1, #5
 80033da:	200f      	movs	r0, #15
 80033dc:	f003 ff66 	bl	80072ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80033e0:	200f      	movs	r0, #15
 80033e2:	f003 ff7f 	bl	80072e4 <HAL_NVIC_EnableIRQ>

}
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800

080033f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	; 0x30
 80033f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fa:	f107 031c 	add.w	r3, r7, #28
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]
 8003402:	605a      	str	r2, [r3, #4]
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	60da      	str	r2, [r3, #12]
 8003408:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	4baa      	ldr	r3, [pc, #680]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4aa9      	ldr	r2, [pc, #676]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003414:	f043 0310 	orr.w	r3, r3, #16
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4ba7      	ldr	r3, [pc, #668]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	61bb      	str	r3, [r7, #24]
 8003424:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
 800342a:	4ba3      	ldr	r3, [pc, #652]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	4aa2      	ldr	r2, [pc, #648]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003430:	f043 0304 	orr.w	r3, r3, #4
 8003434:	6313      	str	r3, [r2, #48]	; 0x30
 8003436:	4ba0      	ldr	r3, [pc, #640]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	617b      	str	r3, [r7, #20]
 8003440:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	4b9c      	ldr	r3, [pc, #624]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a9b      	ldr	r2, [pc, #620]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 800344c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b99      	ldr	r3, [pc, #612]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b95      	ldr	r3, [pc, #596]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a94      	ldr	r2, [pc, #592]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b92      	ldr	r3, [pc, #584]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	4b8e      	ldr	r3, [pc, #568]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	4a8d      	ldr	r2, [pc, #564]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 8003484:	f043 0302 	orr.w	r3, r3, #2
 8003488:	6313      	str	r3, [r2, #48]	; 0x30
 800348a:	4b8b      	ldr	r3, [pc, #556]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 800348c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003496:	2300      	movs	r3, #0
 8003498:	607b      	str	r3, [r7, #4]
 800349a:	4b87      	ldr	r3, [pc, #540]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	4a86      	ldr	r2, [pc, #536]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 80034a0:	f043 0308 	orr.w	r3, r3, #8
 80034a4:	6313      	str	r3, [r2, #48]	; 0x30
 80034a6:	4b84      	ldr	r3, [pc, #528]	; (80036b8 <MX_GPIO_Init+0x2c4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	607b      	str	r3, [r7, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80034b2:	2200      	movs	r2, #0
 80034b4:	217c      	movs	r1, #124	; 0x7c
 80034b6:	4881      	ldr	r0, [pc, #516]	; (80036bc <MX_GPIO_Init+0x2c8>)
 80034b8:	f004 fe40 	bl	800813c <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80034bc:	2201      	movs	r2, #1
 80034be:	2101      	movs	r1, #1
 80034c0:	487f      	ldr	r0, [pc, #508]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 80034c2:	f004 fe3b 	bl	800813c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2142      	movs	r1, #66	; 0x42
 80034ca:	487d      	ldr	r0, [pc, #500]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 80034cc:	f004 fe36 	bl	800813c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80034d0:	2200      	movs	r2, #0
 80034d2:	f24f 0110 	movw	r1, #61456	; 0xf010
 80034d6:	487b      	ldr	r0, [pc, #492]	; (80036c4 <MX_GPIO_Init+0x2d0>)
 80034d8:	f004 fe30 	bl	800813c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80034e2:	4879      	ldr	r0, [pc, #484]	; (80036c8 <MX_GPIO_Init+0x2d4>)
 80034e4:	f004 fe2a 	bl	800813c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 80034e8:	231c      	movs	r3, #28
 80034ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034ec:	2301      	movs	r3, #1
 80034ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034f4:	2300      	movs	r3, #0
 80034f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034f8:	f107 031c 	add.w	r3, r7, #28
 80034fc:	4619      	mov	r1, r3
 80034fe:	486f      	ldr	r0, [pc, #444]	; (80036bc <MX_GPIO_Init+0x2c8>)
 8003500:	f004 fb6c 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8003504:	2360      	movs	r3, #96	; 0x60
 8003506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003508:	2301      	movs	r3, #1
 800350a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003510:	2303      	movs	r3, #3
 8003512:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003514:	f107 031c 	add.w	r3, r7, #28
 8003518:	4619      	mov	r1, r3
 800351a:	4868      	ldr	r0, [pc, #416]	; (80036bc <MX_GPIO_Init+0x2c8>)
 800351c:	f004 fb5e 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8003520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352a:	2300      	movs	r3, #0
 800352c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 800352e:	f107 031c 	add.w	r3, r7, #28
 8003532:	4619      	mov	r1, r3
 8003534:	4862      	ldr	r0, [pc, #392]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 8003536:	f004 fb51 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 800353a:	2303      	movs	r3, #3
 800353c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800353e:	2301      	movs	r3, #1
 8003540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003546:	2300      	movs	r3, #0
 8003548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354a:	f107 031c 	add.w	r3, r7, #28
 800354e:	4619      	mov	r1, r3
 8003550:	485b      	ldr	r0, [pc, #364]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 8003552:	f004 fb43 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003556:	2308      	movs	r3, #8
 8003558:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355a:	2302      	movs	r3, #2
 800355c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800355e:	2300      	movs	r3, #0
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003562:	2300      	movs	r3, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003566:	2305      	movs	r3, #5
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800356a:	f107 031c 	add.w	r3, r7, #28
 800356e:	4619      	mov	r1, r3
 8003570:	4853      	ldr	r0, [pc, #332]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 8003572:	f004 fb33 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003576:	2301      	movs	r3, #1
 8003578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800357a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800357e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003580:	2300      	movs	r3, #0
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003584:	f107 031c 	add.w	r3, r7, #28
 8003588:	4619      	mov	r1, r3
 800358a:	4850      	ldr	r0, [pc, #320]	; (80036cc <MX_GPIO_Init+0x2d8>)
 800358c:	f004 fb26 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003590:	2310      	movs	r3, #16
 8003592:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359c:	2300      	movs	r3, #0
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035a0:	2306      	movs	r3, #6
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	4619      	mov	r1, r3
 80035aa:	4848      	ldr	r0, [pc, #288]	; (80036cc <MX_GPIO_Init+0x2d8>)
 80035ac:	f004 fb16 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80035b0:	2304      	movs	r3, #4
 80035b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b4:	2300      	movs	r3, #0
 80035b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80035bc:	f107 031c 	add.w	r3, r7, #28
 80035c0:	4619      	mov	r1, r3
 80035c2:	4841      	ldr	r0, [pc, #260]	; (80036c8 <MX_GPIO_Init+0x2d4>)
 80035c4:	f004 fb0a 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80035c8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80035cc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ce:	2301      	movs	r3, #1
 80035d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035d6:	2300      	movs	r3, #0
 80035d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80035da:	f107 031c 	add.w	r3, r7, #28
 80035de:	4619      	mov	r1, r3
 80035e0:	4838      	ldr	r0, [pc, #224]	; (80036c4 <MX_GPIO_Init+0x2d0>)
 80035e2:	f004 fafb 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 80035e6:	2340      	movs	r3, #64	; 0x40
 80035e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ea:	2301      	movs	r3, #1
 80035ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f2:	2302      	movs	r3, #2
 80035f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f107 031c 	add.w	r3, r7, #28
 80035fa:	4619      	mov	r1, r3
 80035fc:	4830      	ldr	r0, [pc, #192]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 80035fe:	f004 faed 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003602:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003608:	2302      	movs	r3, #2
 800360a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003610:	2300      	movs	r3, #0
 8003612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003614:	2306      	movs	r3, #6
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003618:	f107 031c 	add.w	r3, r7, #28
 800361c:	4619      	mov	r1, r3
 800361e:	4828      	ldr	r0, [pc, #160]	; (80036c0 <MX_GPIO_Init+0x2cc>)
 8003620:	f004 fadc 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003624:	2320      	movs	r3, #32
 8003626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003628:	2300      	movs	r3, #0
 800362a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4619      	mov	r1, r3
 8003636:	4823      	ldr	r0, [pc, #140]	; (80036c4 <MX_GPIO_Init+0x2d0>)
 8003638:	f004 fad0 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800363c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003642:	2312      	movs	r3, #18
 8003644:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003646:	2301      	movs	r3, #1
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800364a:	2300      	movs	r3, #0
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800364e:	2304      	movs	r3, #4
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003652:	f107 031c 	add.w	r3, r7, #28
 8003656:	4619      	mov	r1, r3
 8003658:	481b      	ldr	r0, [pc, #108]	; (80036c8 <MX_GPIO_Init+0x2d4>)
 800365a:	f004 fabf 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 800365e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003664:	2301      	movs	r3, #1
 8003666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003670:	f107 031c 	add.w	r3, r7, #28
 8003674:	4619      	mov	r1, r3
 8003676:	4814      	ldr	r0, [pc, #80]	; (80036c8 <MX_GPIO_Init+0x2d4>)
 8003678:	f004 fab0 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 800367c:	2301      	movs	r3, #1
 800367e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003680:	2300      	movs	r3, #0
 8003682:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003688:	f107 031c 	add.w	r3, r7, #28
 800368c:	4619      	mov	r1, r3
 800368e:	480b      	ldr	r0, [pc, #44]	; (80036bc <MX_GPIO_Init+0x2c8>)
 8003690:	f004 faa4 	bl	8007bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003694:	2302      	movs	r3, #2
 8003696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003698:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800369c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80036a2:	f107 031c 	add.w	r3, r7, #28
 80036a6:	4619      	mov	r1, r3
 80036a8:	4804      	ldr	r0, [pc, #16]	; (80036bc <MX_GPIO_Init+0x2c8>)
 80036aa:	f004 fa97 	bl	8007bdc <HAL_GPIO_Init>

}
 80036ae:	bf00      	nop
 80036b0:	3730      	adds	r7, #48	; 0x30
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40020800 	.word	0x40020800
 80036c4:	40020c00 	.word	0x40020c00
 80036c8:	40020400 	.word	0x40020400
 80036cc:	40020000 	.word	0x40020000

080036d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80036d8:	f014 fc04 	bl	8017ee4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80036dc:	200a      	movs	r0, #10
 80036de:	f010 fd93 	bl	8014208 <osDelay>
 80036e2:	e7fb      	b.n	80036dc <StartDefaultTask+0xc>

080036e4 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	1d3b      	adds	r3, r7, #4
 80036ee:	6018      	str	r0, [r3, #0]
		 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
		 * Also, need solder the LF Crystal and two capacitors.
		 */

		// 1. Set time
		  RTC_TimeTypeDef sTime = {0};
 80036f0:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
 80036fa:	609a      	str	r2, [r3, #8]
 80036fc:	60da      	str	r2, [r3, #12]
 80036fe:	611a      	str	r2, [r3, #16]
	//	  sTime.Minutes = 33;
	//	  sTime.Seconds = 00;
	//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		  // Set date

		  RTC_DateTypeDef sDate = {0};
 8003700:	2300      	movs	r3, #0
 8003702:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003706:	f107 0314 	add.w	r3, r7, #20
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]
 800370e:	3304      	adds	r3, #4
 8003710:	222e      	movs	r2, #46	; 0x2e
 8003712:	2100      	movs	r1, #0
 8003714:	4618      	mov	r0, r3
 8003716:	f015 fa69 	bl	8018bec <memset>
	char buf[5] = {0};
 800371a:	f107 030c 	add.w	r3, r7, #12
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	2200      	movs	r2, #0
 8003724:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003726:	f107 0308 	add.w	r3, r7, #8
 800372a:	f640 220d 	movw	r2, #2573	; 0xa0d
 800372e:	601a      	str	r2, [r3, #0]

	static uint8_t i = 1;
	for(;;)
	{
		// Blue LED blink//
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003730:	2201      	movs	r2, #1
 8003732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003736:	4883      	ldr	r0, [pc, #524]	; (8003944 <Start_RTC+0x260>)
 8003738:	f004 fd00 	bl	800813c <HAL_GPIO_WritePin>
		osDelay(100);
 800373c:	2064      	movs	r0, #100	; 0x64
 800373e:	f010 fd63 	bl	8014208 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003742:	2200      	movs	r2, #0
 8003744:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003748:	487e      	ldr	r0, [pc, #504]	; (8003944 <Start_RTC+0x260>)
 800374a:	f004 fcf7 	bl	800813c <HAL_GPIO_WritePin>
		osDelay(900);
 800374e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003752:	f010 fd59 	bl	8014208 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003756:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800375a:	2200      	movs	r2, #0
 800375c:	4619      	mov	r1, r3
 800375e:	487a      	ldr	r0, [pc, #488]	; (8003948 <Start_RTC+0x264>)
 8003760:	f008 f9a8 	bl	800bab4 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003764:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003768:	2200      	movs	r2, #0
 800376a:	4619      	mov	r1, r3
 800376c:	4876      	ldr	r0, [pc, #472]	; (8003948 <Start_RTC+0x264>)
 800376e:	f008 faa6 	bl	800bcbe <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003772:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003776:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f015 fa35 	bl	8018bec <memset>
		memset(buff, 0, sizeof(buff));
 8003782:	f107 0314 	add.w	r3, r7, #20
 8003786:	2232      	movs	r2, #50	; 0x32
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f015 fa2e 	bl	8018bec <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003790:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fd1b 	bl	80001d0 <strlen>
 800379a:	4603      	mov	r3, r0
 800379c:	461a      	mov	r2, r3
 800379e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037a2:	4413      	add	r3, r2
 80037a4:	4a69      	ldr	r2, [pc, #420]	; (800394c <Start_RTC+0x268>)
 80037a6:	461d      	mov	r5, r3
 80037a8:	4614      	mov	r4, r2
 80037aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ac:	6028      	str	r0, [r5, #0]
 80037ae:	6069      	str	r1, [r5, #4]
 80037b0:	60aa      	str	r2, [r5, #8]
 80037b2:	60eb      	str	r3, [r5, #12]
 80037b4:	cc07      	ldmia	r4!, {r0, r1, r2}
 80037b6:	6128      	str	r0, [r5, #16]
 80037b8:	6169      	str	r1, [r5, #20]
 80037ba:	61aa      	str	r2, [r5, #24]
 80037bc:	8823      	ldrh	r3, [r4, #0]
 80037be:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 80037c0:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 80037c4:	4618      	mov	r0, r3
 80037c6:	f107 030c 	add.w	r3, r7, #12
 80037ca:	220a      	movs	r2, #10
 80037cc:	4619      	mov	r1, r3
 80037ce:	f015 f9e9 	bl	8018ba4 <itoa>
		strcat(msg.Buf, buf);
 80037d2:	f107 020c 	add.w	r2, r7, #12
 80037d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f015 fffe 	bl	80197de <strcat>

		itoa(sDate.Month, buf, 10);
 80037e2:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 80037e6:	4618      	mov	r0, r3
 80037e8:	f107 030c 	add.w	r3, r7, #12
 80037ec:	220a      	movs	r2, #10
 80037ee:	4619      	mov	r1, r3
 80037f0:	f015 f9d8 	bl	8018ba4 <itoa>
		strcat(msg.Buf, "-");
 80037f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7fc fce9 	bl	80001d0 <strlen>
 80037fe:	4603      	mov	r3, r0
 8003800:	461a      	mov	r2, r3
 8003802:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003806:	4413      	add	r3, r2
 8003808:	4951      	ldr	r1, [pc, #324]	; (8003950 <Start_RTC+0x26c>)
 800380a:	461a      	mov	r2, r3
 800380c:	460b      	mov	r3, r1
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003812:	f107 020c 	add.w	r2, r7, #12
 8003816:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800381a:	4611      	mov	r1, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f015 ffde 	bl	80197de <strcat>

		itoa(sDate.Date, buf, 10);
 8003822:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003826:	4618      	mov	r0, r3
 8003828:	f107 030c 	add.w	r3, r7, #12
 800382c:	220a      	movs	r2, #10
 800382e:	4619      	mov	r1, r3
 8003830:	f015 f9b8 	bl	8018ba4 <itoa>
		strcat(msg.Buf, "-");
 8003834:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fcc9 	bl	80001d0 <strlen>
 800383e:	4603      	mov	r3, r0
 8003840:	461a      	mov	r2, r3
 8003842:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003846:	4413      	add	r3, r2
 8003848:	4941      	ldr	r1, [pc, #260]	; (8003950 <Start_RTC+0x26c>)
 800384a:	461a      	mov	r2, r3
 800384c:	460b      	mov	r3, r1
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003852:	f107 020c 	add.w	r2, r7, #12
 8003856:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f015 ffbe 	bl	80197de <strcat>

		strcat(msg.Buf, " | ");
 8003862:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003866:	4618      	mov	r0, r3
 8003868:	f7fc fcb2 	bl	80001d0 <strlen>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003874:	4413      	add	r3, r2
 8003876:	4a37      	ldr	r2, [pc, #220]	; (8003954 <Start_RTC+0x270>)
 8003878:	6810      	ldr	r0, [r2, #0]
 800387a:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 800387c:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003880:	4618      	mov	r0, r3
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	220a      	movs	r2, #10
 8003888:	4619      	mov	r1, r3
 800388a:	f015 f98b 	bl	8018ba4 <itoa>
		strcat(msg.Buf, buf);
 800388e:	f107 020c 	add.w	r2, r7, #12
 8003892:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003896:	4611      	mov	r1, r2
 8003898:	4618      	mov	r0, r3
 800389a:	f015 ffa0 	bl	80197de <strcat>

		itoa(sTime.Minutes, buf, 10);
 800389e:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 80038a2:	4618      	mov	r0, r3
 80038a4:	f107 030c 	add.w	r3, r7, #12
 80038a8:	220a      	movs	r2, #10
 80038aa:	4619      	mov	r1, r3
 80038ac:	f015 f97a 	bl	8018ba4 <itoa>
		strcat(msg.Buf, ":");
 80038b0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fc fc8b 	bl	80001d0 <strlen>
 80038ba:	4603      	mov	r3, r0
 80038bc:	461a      	mov	r2, r3
 80038be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038c2:	4413      	add	r3, r2
 80038c4:	4924      	ldr	r1, [pc, #144]	; (8003958 <Start_RTC+0x274>)
 80038c6:	461a      	mov	r2, r3
 80038c8:	460b      	mov	r3, r1
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 80038ce:	f107 020c 	add.w	r2, r7, #12
 80038d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038d6:	4611      	mov	r1, r2
 80038d8:	4618      	mov	r0, r3
 80038da:	f015 ff80 	bl	80197de <strcat>

		itoa(sTime.Seconds, buf, 10);
 80038de:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 80038e2:	4618      	mov	r0, r3
 80038e4:	f107 030c 	add.w	r3, r7, #12
 80038e8:	220a      	movs	r2, #10
 80038ea:	4619      	mov	r1, r3
 80038ec:	f015 f95a 	bl	8018ba4 <itoa>
		strcat(msg.Buf, ":");
 80038f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7fc fc6b 	bl	80001d0 <strlen>
 80038fa:	4603      	mov	r3, r0
 80038fc:	461a      	mov	r2, r3
 80038fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003902:	4413      	add	r3, r2
 8003904:	4914      	ldr	r1, [pc, #80]	; (8003958 <Start_RTC+0x274>)
 8003906:	461a      	mov	r2, r3
 8003908:	460b      	mov	r3, r1
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 800390e:	f107 020c 	add.w	r2, r7, #12
 8003912:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f015 ff60 	bl	80197de <strcat>

		strcat(msg.Buf, str_end_of_line);
 800391e:	f107 0208 	add.w	r2, r7, #8
 8003922:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f015 ff58 	bl	80197de <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <Start_RTC+0x278>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800393a:	2200      	movs	r2, #0
 800393c:	f010 fe36 	bl	80145ac <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003940:	e6f6      	b.n	8003730 <Start_RTC+0x4c>
 8003942:	bf00      	nop
 8003944:	40020c00 	.word	0x40020c00
 8003948:	2000f890 	.word	0x2000f890
 800394c:	0801c444 	.word	0x0801c444
 8003950:	0801c464 	.word	0x0801c464
 8003954:	0801c468 	.word	0x0801c468
 8003958:	0801c46c 	.word	0x0801c46c
 800395c:	2000b6c0 	.word	0x2000b6c0

08003960 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003962:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 8003966:	af00      	add	r7, sp, #0
 8003968:	1d3b      	adds	r3, r7, #4
 800396a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 800396c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003970:	f010 fc4a 	bl	8014208 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003974:	4a90      	ldr	r2, [pc, #576]	; (8003bb8 <Start_Show_Resources+0x258>)
 8003976:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	4611      	mov	r1, r2
 800397e:	8019      	strh	r1, [r3, #0]
 8003980:	3302      	adds	r3, #2
 8003982:	0c12      	lsrs	r2, r2, #16
 8003984:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003986:	232d      	movs	r3, #45	; 0x2d
 8003988:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  char buff[10] = {0};
 800398c:	2300      	movs	r3, #0
 800398e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8003992:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8003996:	2200      	movs	r2, #0
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 800399c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f015 f920 	bl	8018bec <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 80039ac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fc0d 	bl	80001d0 <strlen>
 80039b6:	4603      	mov	r3, r0
 80039b8:	461a      	mov	r2, r3
 80039ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039be:	4413      	add	r3, r2
 80039c0:	4a7e      	ldr	r2, [pc, #504]	; (8003bbc <Start_Show_Resources+0x25c>)
 80039c2:	461d      	mov	r5, r3
 80039c4:	4614      	mov	r4, r2
 80039c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039c8:	6028      	str	r0, [r5, #0]
 80039ca:	6069      	str	r1, [r5, #4]
 80039cc:	60aa      	str	r2, [r5, #8]
 80039ce:	60eb      	str	r3, [r5, #12]
 80039d0:	cc03      	ldmia	r4!, {r0, r1}
 80039d2:	6128      	str	r0, [r5, #16]
 80039d4:	6169      	str	r1, [r5, #20]
 80039d6:	7823      	ldrb	r3, [r4, #0]
 80039d8:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 80039da:	f014 f9bb 	bl	8017d54 <xPortGetFreeHeapSize>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	4b77      	ldr	r3, [pc, #476]	; (8003bc0 <Start_Show_Resources+0x260>)
 80039e4:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <Start_Show_Resources+0x260>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f507 618a 	add.w	r1, r7, #1104	; 0x450
 80039ee:	220a      	movs	r2, #10
 80039f0:	4618      	mov	r0, r3
 80039f2:	f015 f8d7 	bl	8018ba4 <itoa>
	  strcat(msg.Buf, buff);
 80039f6:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80039fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80039fe:	4611      	mov	r1, r2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f015 feec 	bl	80197de <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003a06:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 8003a0a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a0e:	4611      	mov	r1, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	f015 fee4 	bl	80197de <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME  | STATUS | PRIOR | STACK | NUM |\n\r\0");
 8003a16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fc fbd8 	bl	80001d0 <strlen>
 8003a20:	4603      	mov	r3, r0
 8003a22:	461a      	mov	r2, r3
 8003a24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a28:	4413      	add	r3, r2
 8003a2a:	4a66      	ldr	r2, [pc, #408]	; (8003bc4 <Start_Show_Resources+0x264>)
 8003a2c:	4614      	mov	r4, r2
 8003a2e:	469c      	mov	ip, r3
 8003a30:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8003a34:	4665      	mov	r5, ip
 8003a36:	4626      	mov	r6, r4
 8003a38:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003a3a:	6028      	str	r0, [r5, #0]
 8003a3c:	6069      	str	r1, [r5, #4]
 8003a3e:	60aa      	str	r2, [r5, #8]
 8003a40:	60eb      	str	r3, [r5, #12]
 8003a42:	3410      	adds	r4, #16
 8003a44:	f10c 0c10 	add.w	ip, ip, #16
 8003a48:	4574      	cmp	r4, lr
 8003a4a:	d1f3      	bne.n	8003a34 <Start_Show_Resources+0xd4>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003a4c:	485e      	ldr	r0, [pc, #376]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003a4e:	f013 f935 	bl	8016cbc <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8003a58:	e004      	b.n	8003a64 <Start_Show_Resources+0x104>
	  {
	  	buffer_size ++;
 8003a5a:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  while(msg.Buf[buffer_size] != '\0')
 8003a64:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003a68:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a6c:	5cd3      	ldrb	r3, [r2, r3]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1f3      	bne.n	8003a5a <Start_Show_Resources+0xfa>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003a7e:	e011      	b.n	8003aa4 <Start_Show_Resources+0x144>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003a80:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003a84:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003a88:	4413      	add	r3, r2
 8003a8a:	494f      	ldr	r1, [pc, #316]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003a8c:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003a90:	440a      	add	r2, r1
 8003a92:	7811      	ldrb	r1, [r2, #0]
 8003a94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003a98:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003a9a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003aa4:	4a48      	ldr	r2, [pc, #288]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003aa6:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003aaa:	4413      	add	r3, r2
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e6      	bne.n	8003a80 <Start_Show_Resources+0x120>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003ab2:	4b46      	ldr	r3, [pc, #280]	; (8003bcc <Start_Show_Resources+0x26c>)
 8003ab4:	f207 4434 	addw	r4, r7, #1076	; 0x434
 8003ab8:	461d      	mov	r5, r3
 8003aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003abe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003ac2:	c403      	stmia	r4!, {r0, r1}
 8003ac4:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME | ABS TIME | TASK TIME% |\n\r"};
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	4a41      	ldr	r2, [pc, #260]	; (8003bd0 <Start_Show_Resources+0x270>)
 8003acc:	461c      	mov	r4, r3
 8003ace:	4615      	mov	r5, r2
 8003ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ad8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003adc:	e884 0003 	stmia.w	r4, {r0, r1}
	  strcat(msg.Buf, str_line);
 8003ae0:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8003ae4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ae8:	4611      	mov	r1, r2
 8003aea:	4618      	mov	r0, r3
 8003aec:	f015 fe77 	bl	80197de <strcat>
	  strcat(msg.Buf, str_head_2);
 8003af0:	f107 020c 	add.w	r2, r7, #12
 8003af4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003af8:	4611      	mov	r1, r2
 8003afa:	4618      	mov	r0, r3
 8003afc:	f015 fe6f 	bl	80197de <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8003b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b04:	2100      	movs	r1, #0
 8003b06:	4830      	ldr	r0, [pc, #192]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003b08:	f015 f870 	bl	8018bec <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8003b0c:	482e      	ldr	r0, [pc, #184]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003b0e:	f013 f96b 	bl	8016de8 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);
 8003b12:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	f8b7 3466 	ldrh.w	r3, [r7, #1126]	; 0x466
 8003b1c:	4413      	add	r3, r2
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	3340      	adds	r3, #64	; 0x40
 8003b22:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003b2c:	e011      	b.n	8003b52 <Start_Show_Resources+0x1f2>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003b2e:	f8b7 2466 	ldrh.w	r2, [r7, #1126]	; 0x466
 8003b32:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003b36:	4413      	add	r3, r2
 8003b38:	4923      	ldr	r1, [pc, #140]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003b3a:	f8d7 2460 	ldr.w	r2, [r7, #1120]	; 0x460
 8003b3e:	440a      	add	r2, r1
 8003b40:	7811      	ldrb	r1, [r2, #0]
 8003b42:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003b46:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003b48:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003b4c:	3301      	adds	r3, #1
 8003b4e:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8003b52:	4a1d      	ldr	r2, [pc, #116]	; (8003bc8 <Start_Show_Resources+0x268>)
 8003b54:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8003b58:	4413      	add	r3, r2
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1e6      	bne.n	8003b2e <Start_Show_Resources+0x1ce>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8003b60:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fc fb33 	bl	80001d0 <strlen>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b72:	4413      	add	r3, r2
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <Start_Show_Resources+0x274>)
 8003b76:	4614      	mov	r4, r2
 8003b78:	469c      	mov	ip, r3
 8003b7a:	f104 0e20 	add.w	lr, r4, #32
 8003b7e:	4665      	mov	r5, ip
 8003b80:	4626      	mov	r6, r4
 8003b82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003b84:	6028      	str	r0, [r5, #0]
 8003b86:	6069      	str	r1, [r5, #4]
 8003b88:	60aa      	str	r2, [r5, #8]
 8003b8a:	60eb      	str	r3, [r5, #12]
 8003b8c:	3410      	adds	r4, #16
 8003b8e:	f10c 0c10 	add.w	ip, ip, #16
 8003b92:	4574      	cmp	r4, lr
 8003b94:	d1f3      	bne.n	8003b7e <Start_Show_Resources+0x21e>
 8003b96:	4665      	mov	r5, ip
 8003b98:	4623      	mov	r3, r4
 8003b9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003b9c:	6028      	str	r0, [r5, #0]
 8003b9e:	6069      	str	r1, [r5, #4]
 8003ba0:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	; (8003bd8 <Start_Show_Resources+0x278>)
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8003baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f010 fcfc 	bl	80145ac <osMessageQueuePut>
  {
 8003bb4:	e6da      	b.n	800396c <Start_Show_Resources+0xc>
 8003bb6:	bf00      	nop
 8003bb8:	0801c4ec 	.word	0x0801c4ec
 8003bbc:	0801c470 	.word	0x0801c470
 8003bc0:	20002838 	.word	0x20002838
 8003bc4:	0801c48c 	.word	0x0801c48c
 8003bc8:	20002450 	.word	0x20002450
 8003bcc:	0801c4f0 	.word	0x0801c4f0
 8003bd0:	0801c50c 	.word	0x0801c50c
 8003bd4:	0801c4c0 	.word	0x0801c4c0
 8003bd8:	2000b6c0 	.word	0x2000b6c0

08003bdc <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	1d3b      	adds	r3, r7, #4
 8003be6:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <Start_UART_Task+0x58>)
 8003bea:	6818      	ldr	r0, [r3, #0]
 8003bec:	f107 010c 	add.w	r1, r7, #12
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f010 fd39 	bl	801466c <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003c00:	e004      	b.n	8003c0c <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8003c02:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003c06:	3301      	adds	r3, #1
 8003c08:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8003c0c:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8003c10:	f107 020c 	add.w	r2, r7, #12
 8003c14:	5cd3      	ldrb	r3, [r2, r3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f3      	bne.n	8003c02 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8003c1a:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8003c1e:	f107 030c 	add.w	r3, r7, #12
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f014 fa1b 	bl	8018060 <CDC_Transmit_FS>
    osDelay(1);
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	f010 faec 	bl	8014208 <osDelay>
  {
 8003c30:	e7da      	b.n	8003be8 <Start_UART_Task+0xc>
 8003c32:	bf00      	nop
 8003c34:	2000b6c0 	.word	0x2000b6c0

08003c38 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b0a4      	sub	sp, #144	; 0x90
 8003c3c:	af04      	add	r7, sp, #16
 8003c3e:	6078      	str	r0, [r7, #4]
	//QUEUE_t msg;												// Make a queue

	BME280QUEUE bme280_meg;
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	uint16_t addres_device = 0x76;  		 	// BME280
 8003c46:	2376      	movs	r3, #118	; 0x76
 8003c48:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	uint16_t id_addr = 0xD0;
 8003c4c:	23d0      	movs	r3, #208	; 0xd0
 8003c4e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	uint8_t id = 96;							// in hex form
 8003c52:	2360      	movs	r3, #96	; 0x60
 8003c54:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8003c58:	2300      	movs	r3, #0
 8003c5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8003c5e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	b299      	uxth	r1, r3
 8003c66:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8003c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c6e:	9302      	str	r3, [sp, #8]
 8003c70:	2301      	movs	r3, #1
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	f107 0357 	add.w	r3, r7, #87	; 0x57
 8003c78:	9300      	str	r3, [sp, #0]
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	4895      	ldr	r0, [pc, #596]	; (8003ed4 <Start_bme280+0x29c>)
 8003c7e:	f004 ffd9 	bl	8008c34 <HAL_I2C_Mem_Read>
 8003c82:	4603      	mov	r3, r0
 8003c84:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8003c88:	4b93      	ldr	r3, [pc, #588]	; (8003ed8 <Start_bme280+0x2a0>)
 8003c8a:	2276      	movs	r2, #118	; 0x76
 8003c8c:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8003c8e:	4b92      	ldr	r3, [pc, #584]	; (8003ed8 <Start_bme280+0x2a0>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8003c94:	4b90      	ldr	r3, [pc, #576]	; (8003ed8 <Start_bme280+0x2a0>)
 8003c96:	4a91      	ldr	r2, [pc, #580]	; (8003edc <Start_bme280+0x2a4>)
 8003c98:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8003c9a:	4b8f      	ldr	r3, [pc, #572]	; (8003ed8 <Start_bme280+0x2a0>)
 8003c9c:	4a90      	ldr	r2, [pc, #576]	; (8003ee0 <Start_bme280+0x2a8>)
 8003c9e:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 8003ca0:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <Start_bme280+0x2a0>)
 8003ca2:	4a90      	ldr	r2, [pc, #576]	; (8003ee4 <Start_bme280+0x2ac>)
 8003ca4:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8003ca6:	488c      	ldr	r0, [pc, #560]	; (8003ed8 <Start_bme280+0x2a0>)
 8003ca8:	f001 fbde 	bl	8005468 <bme280_init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	461a      	mov	r2, r3
 8003cb0:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <Start_bme280+0x2b0>)
 8003cb2:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8003cb4:	4b88      	ldr	r3, [pc, #544]	; (8003ed8 <Start_bme280+0x2a0>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8003cbc:	4b86      	ldr	r3, [pc, #536]	; (8003ed8 <Start_bme280+0x2a0>)
 8003cbe:	2205      	movs	r2, #5
 8003cc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8003cc4:	4b84      	ldr	r3, [pc, #528]	; (8003ed8 <Start_bme280+0x2a0>)
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8003ccc:	4b82      	ldr	r3, [pc, #520]	; (8003ed8 <Start_bme280+0x2a0>)
 8003cce:	2204      	movs	r2, #4
 8003cd0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8003cd4:	4980      	ldr	r1, [pc, #512]	; (8003ed8 <Start_bme280+0x2a0>)
 8003cd6:	200f      	movs	r0, #15
 8003cd8:	f001 fcb8 	bl	800564c <bme280_set_sensor_settings>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <Start_bme280+0x2b0>)
 8003ce2:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8003ce4:	497c      	ldr	r1, [pc, #496]	; (8003ed8 <Start_bme280+0x2a0>)
 8003ce6:	2003      	movs	r0, #3
 8003ce8:	f001 fd05 	bl	80056f6 <bme280_set_sensor_mode>
 8003cec:	4603      	mov	r3, r0
 8003cee:	461a      	mov	r2, r3
 8003cf0:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <Start_bme280+0x2b0>)
 8003cf2:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8003cf4:	4b78      	ldr	r3, [pc, #480]	; (8003ed8 <Start_bme280+0x2a0>)
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2028      	movs	r0, #40	; 0x28
 8003cfa:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8003cfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d00:	f010 fa82 	bl	8014208 <osDelay>

	  char str_t_h_and_p[60] = {0};
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	f107 0310 	add.w	r3, r7, #16
 8003d0c:	2238      	movs	r2, #56	; 0x38
 8003d0e:	2100      	movs	r1, #0
 8003d10:	4618      	mov	r0, r3
 8003d12:	f014 ff6b 	bl	8018bec <memset>
	  char str_thp_buffer[12] = {0};
 8003d16:	2300      	movs	r3, #0
 8003d18:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]

	//  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
	  memset(bme280_meg.bme280_temperature_and_humidity, 0, sizeof(bme280_meg.bme280_temperature_and_humidity));								// Fill in buff '\0'
 8003d24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d28:	2214      	movs	r2, #20
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f014 ff5d 	bl	8018bec <memset>

	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 8003d32:	4a69      	ldr	r2, [pc, #420]	; (8003ed8 <Start_bme280+0x2a0>)
 8003d34:	496d      	ldr	r1, [pc, #436]	; (8003eec <Start_bme280+0x2b4>)
 8003d36:	2007      	movs	r0, #7
 8003d38:	f001 fd59 	bl	80057ee <bme280_get_sensor_data>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	4b69      	ldr	r3, [pc, #420]	; (8003ee8 <Start_bme280+0x2b0>)
 8003d42:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8003d44:	4b68      	ldr	r3, [pc, #416]	; (8003ee8 <Start_bme280+0x2b0>)
 8003d46:	f993 3000 	ldrsb.w	r3, [r3]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f040 80a5 	bne.w	8003e9a <Start_bme280+0x262>
	  {
	  		// Save data variables
	  		int BME280_temperature = comp_data.temperature;
 8003d50:	4b66      	ldr	r3, [pc, #408]	; (8003eec <Start_bme280+0x2b4>)
 8003d52:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f7fc fefd 	bl	8000b58 <__aeabi_d2iz>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	677b      	str	r3, [r7, #116]	; 0x74
	  		int BME280_humidity = comp_data.humidity;
 8003d62:	4b62      	ldr	r3, [pc, #392]	; (8003eec <Start_bme280+0x2b4>)
 8003d64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d68:	4610      	mov	r0, r2
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	f7fc fef4 	bl	8000b58 <__aeabi_d2iz>
 8003d70:	4603      	mov	r3, r0
 8003d72:	673b      	str	r3, [r7, #112]	; 0x70
	  		int BME280_preasure = comp_data.pressure;
 8003d74:	4b5d      	ldr	r3, [pc, #372]	; (8003eec <Start_bme280+0x2b4>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	4610      	mov	r0, r2
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f7fc feeb 	bl	8000b58 <__aeabi_d2iz>
 8003d82:	4603      	mov	r3, r0
 8003d84:	66fb      	str	r3, [r7, #108]	; 0x6c

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
//	  		strcat(str_t_h_and_p, "      BME280: \n\r");
	  		strcat(str_t_h_and_p, "T");
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fa20 	bl	80001d0 <strlen>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	f107 030c 	add.w	r3, r7, #12
 8003d98:	4413      	add	r3, r2
 8003d9a:	4955      	ldr	r1, [pc, #340]	; (8003ef0 <Start_bme280+0x2b8>)
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	460b      	mov	r3, r1
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_temperature);
 8003da4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003da8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003daa:	4952      	ldr	r1, [pc, #328]	; (8003ef4 <Start_bme280+0x2bc>)
 8003dac:	4618      	mov	r0, r3
 8003dae:	f015 fcb3 	bl	8019718 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003db2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003db6:	f107 030c 	add.w	r3, r7, #12
 8003dba:	4611      	mov	r1, r2
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f015 fd0e 	bl	80197de <strcat>
	  		strcat(str_t_h_and_p, "C ");
 8003dc2:	f107 030c 	add.w	r3, r7, #12
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fc fa02 	bl	80001d0 <strlen>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	461a      	mov	r2, r3
 8003dd0:	f107 030c 	add.w	r3, r7, #12
 8003dd4:	4413      	add	r3, r2
 8003dd6:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <Start_bme280+0x2c0>)
 8003dd8:	8811      	ldrh	r1, [r2, #0]
 8003dda:	7892      	ldrb	r2, [r2, #2]
 8003ddc:	8019      	strh	r1, [r3, #0]
 8003dde:	709a      	strb	r2, [r3, #2]

	  		// Write HUMIDYTY
	  		// memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
	  		strcat(str_t_h_and_p, "H");
 8003de0:	f107 030c 	add.w	r3, r7, #12
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc f9f3 	bl	80001d0 <strlen>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	f107 030c 	add.w	r3, r7, #12
 8003df2:	4413      	add	r3, r2
 8003df4:	4941      	ldr	r1, [pc, #260]	; (8003efc <Start_bme280+0x2c4>)
 8003df6:	461a      	mov	r2, r3
 8003df8:	460b      	mov	r3, r1
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_humidity);
 8003dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003e04:	493b      	ldr	r1, [pc, #236]	; (8003ef4 <Start_bme280+0x2bc>)
 8003e06:	4618      	mov	r0, r3
 8003e08:	f015 fc86 	bl	8019718 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003e0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f015 fce1 	bl	80197de <strcat>
	  		strcat(str_t_h_and_p, "% ");
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fc f9d5 	bl	80001d0 <strlen>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f107 030c 	add.w	r3, r7, #12
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a33      	ldr	r2, [pc, #204]	; (8003f00 <Start_bme280+0x2c8>)
 8003e32:	8811      	ldrh	r1, [r2, #0]
 8003e34:	7892      	ldrb	r2, [r2, #2]
 8003e36:	8019      	strh	r1, [r3, #0]
 8003e38:	709a      	strb	r2, [r3, #2]

	  		// Write PRERASURE
	  		//memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
	  		strcat(str_t_h_and_p, "P");
 8003e3a:	f107 030c 	add.w	r3, r7, #12
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc f9c6 	bl	80001d0 <strlen>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	f107 030c 	add.w	r3, r7, #12
 8003e4c:	4413      	add	r3, r2
 8003e4e:	492d      	ldr	r1, [pc, #180]	; (8003f04 <Start_bme280+0x2cc>)
 8003e50:	461a      	mov	r2, r3
 8003e52:	460b      	mov	r3, r1
 8003e54:	881b      	ldrh	r3, [r3, #0]
 8003e56:	8013      	strh	r3, [r2, #0]
	  		sprintf(str_thp_buffer, "%d", BME280_preasure);
 8003e58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5e:	4925      	ldr	r1, [pc, #148]	; (8003ef4 <Start_bme280+0x2bc>)
 8003e60:	4618      	mov	r0, r3
 8003e62:	f015 fc59 	bl	8019718 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8003e66:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f015 fcb4 	bl	80197de <strcat>
	  		//strcat(str_t_h_and_p, " mm\n\r\0");

//	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
//	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)

	  		strcat(bme280_meg.bme280_temperature_and_humidity, str_t_h_and_p);
 8003e76:	f107 020c 	add.w	r2, r7, #12
 8003e7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f015 fcac 	bl	80197de <strcat>
	  		osMessageQueuePut(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <Start_bme280+0x2d0>)
 8003e88:	6818      	ldr	r0, [r3, #0]
 8003e8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e92:	2200      	movs	r2, #0
 8003e94:	f010 fb8a 	bl	80145ac <osMessageQueuePut>
 8003e98:	e730      	b.n	8003cfc <Start_bme280+0xc4>
	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!!");
 8003e9a:	f107 030c 	add.w	r3, r7, #12
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fc f996 	bl	80001d0 <strlen>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4413      	add	r3, r2
 8003eae:	4917      	ldr	r1, [pc, #92]	; (8003f0c <Start_bme280+0x2d4>)
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	cb03      	ldmia	r3!, {r0, r1}
 8003eb6:	6010      	str	r0, [r2, #0]
 8003eb8:	6051      	str	r1, [r2, #4]
 8003eba:	781b      	ldrb	r3, [r3, #0]
 8003ebc:	7213      	strb	r3, [r2, #8]
		  osMessageQueuePut(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8003ebe:	4b12      	ldr	r3, [pc, #72]	; (8003f08 <Start_bme280+0x2d0>)
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f010 fb6e 	bl	80145ac <osMessageQueuePut>
  {
 8003ed0:	e714      	b.n	8003cfc <Start_bme280+0xc4>
 8003ed2:	bf00      	nop
 8003ed4:	200099c0 	.word	0x200099c0
 8003ed8:	20009980 	.word	0x20009980
 8003edc:	08002a25 	.word	0x08002a25
 8003ee0:	08002aad 	.word	0x08002aad
 8003ee4:	08002a95 	.word	0x08002a95
 8003ee8:	2000abd0 	.word	0x2000abd0
 8003eec:	2000abd8 	.word	0x2000abd8
 8003ef0:	0801c534 	.word	0x0801c534
 8003ef4:	0801c538 	.word	0x0801c538
 8003ef8:	0801c53c 	.word	0x0801c53c
 8003efc:	0801c540 	.word	0x0801c540
 8003f00:	0801c544 	.word	0x0801c544
 8003f04:	0801c548 	.word	0x0801c548
 8003f08:	2000e79c 	.word	0x2000e79c
 8003f0c:	0801c54c 	.word	0x0801c54c

08003f10 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 8003f10:	b5b0      	push	{r4, r5, r7, lr}
 8003f12:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	1d3b      	adds	r3, r7, #4
 8003f1a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f014 fe60 	bl	8018bec <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8003f2c:	4b48      	ldr	r3, [pc, #288]	; (8004050 <Start_AM2302+0x140>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a47      	ldr	r2, [pc, #284]	; (8004050 <Start_AM2302+0x140>)
 8003f32:	f043 0304 	orr.w	r3, r3, #4
 8003f36:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8003f38:	4b45      	ldr	r3, [pc, #276]	; (8004050 <Start_AM2302+0x140>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	4a44      	ldr	r2, [pc, #272]	; (8004050 <Start_AM2302+0x140>)
 8003f3e:	f023 0302 	bic.w	r3, r3, #2
 8003f42:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <Start_AM2302+0x140>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4a41      	ldr	r2, [pc, #260]	; (8004050 <Start_AM2302+0x140>)
 8003f4a:	f043 0302 	orr.w	r3, r3, #2
 8003f4e:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8003f50:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <Start_AM2302+0x140>)
 8003f52:	695b      	ldr	r3, [r3, #20]
 8003f54:	4a3e      	ldr	r2, [pc, #248]	; (8004050 <Start_AM2302+0x140>)
 8003f56:	f083 0302 	eor.w	r3, r3, #2
 8003f5a:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 8003f5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f60:	f010 f952 	bl	8014208 <osDelay>

  for(;;)
  {
	  osDelay(3500);			// Measure every 3 seconds
 8003f64:	f640 50ac 	movw	r0, #3500	; 0xdac
 8003f68:	f010 f94e 	bl	8014208 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	int j = 0;   							// Counter bytes
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  	int i = 0;								// Counter bits
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8003f7e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8003f86:	4b32      	ldr	r3, [pc, #200]	; (8004050 <Start_AM2302+0x140>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a31      	ldr	r2, [pc, #196]	; (8004050 <Start_AM2302+0x140>)
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <Start_AM2302+0x140>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	4a2e      	ldr	r2, [pc, #184]	; (8004050 <Start_AM2302+0x140>)
 8003f98:	f023 0302 	bic.w	r3, r3, #2
 8003f9c:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8003f9e:	4b2c      	ldr	r3, [pc, #176]	; (8004050 <Start_AM2302+0x140>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4a2b      	ldr	r2, [pc, #172]	; (8004050 <Start_AM2302+0x140>)
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <Start_AM2302+0x140>)
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	4a28      	ldr	r2, [pc, #160]	; (8004050 <Start_AM2302+0x140>)
 8003fb0:	f023 0302 	bic.w	r3, r3, #2
 8003fb4:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 8003fb6:	2012      	movs	r0, #18
 8003fb8:	f010 f926 	bl	8014208 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 8003fbc:	4b24      	ldr	r3, [pc, #144]	; (8004050 <Start_AM2302+0x140>)
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	4a23      	ldr	r2, [pc, #140]	; (8004050 <Start_AM2302+0x140>)
 8003fc2:	f083 0302 	eor.w	r3, r3, #2
 8003fc6:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 8003fc8:	2028      	movs	r0, #40	; 0x28
 8003fca:	f7fe fdab 	bl	8002b24 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 8003fce:	4b20      	ldr	r3, [pc, #128]	; (8004050 <Start_AM2302+0x140>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <Start_AM2302+0x140>)
 8003fd4:	f023 0304 	bic.w	r3, r3, #4
 8003fd8:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 8003fda:	4b1d      	ldr	r3, [pc, #116]	; (8004050 <Start_AM2302+0x140>)
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4a1c      	ldr	r2, [pc, #112]	; (8004050 <Start_AM2302+0x140>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 8003fe6:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <Start_AM2302+0x140>)
 8003fe8:	691b      	ldr	r3, [r3, #16]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8003ff8:	e002      	b.n	8004000 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}

	  	delay_us(80);
 8004000:	2050      	movs	r0, #80	; 0x50
 8004002:	f7fe fd8f 	bl	8002b24 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 8004006:	4b12      	ldr	r3, [pc, #72]	; (8004050 <Start_AM2302+0x140>)
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d103      	bne.n	800401a <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8004012:	2300      	movs	r3, #0
 8004014:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 8004018:	e002      	b.n	8004020 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}
	  	delay_us(80);
 8004020:	2050      	movs	r0, #80	; 0x50
 8004022:	f7fe fd7f 	bl	8002b24 <delay_us>

	  	if(get_data_status == true)
 8004026:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 800402a:	2b00      	cmp	r3, #0
 800402c:	d09a      	beq.n	8003f64 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 800402e:	2300      	movs	r3, #0
 8004030:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8004034:	e050      	b.n	80040d8 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 8004036:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800403a:	f1c3 0304 	rsb	r3, r3, #4
 800403e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004042:	2100      	movs	r1, #0
 8004044:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004046:	2300      	movs	r3, #0
 8004048:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 800404c:	e038      	b.n	80040c0 <Start_AM2302+0x1b0>
 800404e:	bf00      	nop
 8004050:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8004054:	bf00      	nop
 8004056:	4b94      	ldr	r3, [pc, #592]	; (80042a8 <Start_AM2302+0x398>)
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d0f9      	beq.n	8004056 <Start_AM2302+0x146>
	  				delay_us(30);
 8004062:	201e      	movs	r0, #30
 8004064:	f7fe fd5e 	bl	8002b24 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8004068:	4b8f      	ldr	r3, [pc, #572]	; (80042a8 <Start_AM2302+0x398>)
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d019      	beq.n	80040a8 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8004074:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004078:	f1c3 0304 	rsb	r3, r3, #4
 800407c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004080:	5cd3      	ldrb	r3, [r2, r3]
 8004082:	b25a      	sxtb	r2, r3
 8004084:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8004088:	f1c3 0307 	rsb	r3, r3, #7
 800408c:	2101      	movs	r1, #1
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	b25b      	sxtb	r3, r3
 8004094:	4313      	orrs	r3, r2
 8004096:	b25a      	sxtb	r2, r3
 8004098:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800409c:	f1c3 0304 	rsb	r3, r3, #4
 80040a0:	b2d1      	uxtb	r1, r2
 80040a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80040a6:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 80040a8:	bf00      	nop
 80040aa:	4b7f      	ldr	r3, [pc, #508]	; (80042a8 <Start_AM2302+0x398>)
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f9      	bne.n	80040aa <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 80040b6:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80040ba:	3301      	adds	r3, #1
 80040bc:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80040c0:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80040c4:	2b07      	cmp	r3, #7
 80040c6:	ddc5      	ble.n	8004054 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 80040c8:	2301      	movs	r3, #1
 80040ca:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80040ce:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80040d2:	3301      	adds	r3, #1
 80040d4:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80040d8:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80040dc:	2b04      	cmp	r3, #4
 80040de:	ddaa      	ble.n	8004036 <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80040e0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80040e4:	3301      	adds	r3, #1
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80040f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80040fc:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004100:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8004104:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004108:	3301      	adds	r3, #1
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b21b      	sxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	da13      	bge.n	800413a <Start_AM2302+0x22a>
 8004112:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	f7fc fa16 	bl	8000548 <__aeabi_f2d>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	f7fc fd60 	bl	8000be8 <__aeabi_d2f>
 8004128:	4603      	mov	r3, r0
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef1 7a67 	vneg.f32	s15, s15
 8004132:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004136:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 800413a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800413e:	3303      	adds	r3, #3
 8004140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004144:	ee07 3a90 	vmov	s15, r3
 8004148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800414c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004150:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004154:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004158:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[60] = {0};
 800415c:	f107 0308 	add.w	r3, r7, #8
 8004160:	2200      	movs	r2, #0
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	3304      	adds	r3, #4
 8004166:	2238      	movs	r2, #56	; 0x38
 8004168:	2100      	movs	r1, #0
 800416a:	4618      	mov	r0, r3
 800416c:	f014 fd3e 	bl	8018bec <memset>
	  		char str_t_and_h_buffer[12] = {0};
 8004170:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	3304      	adds	r3, #4
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004184:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f014 fd2e 	bl	8018bec <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "     AM2302: \n\r");
 8004190:	f107 0308 	add.w	r3, r7, #8
 8004194:	4618      	mov	r0, r3
 8004196:	f7fc f81b 	bl	80001d0 <strlen>
 800419a:	4603      	mov	r3, r0
 800419c:	461a      	mov	r2, r3
 800419e:	f107 0308 	add.w	r3, r7, #8
 80041a2:	4413      	add	r3, r2
 80041a4:	4a41      	ldr	r2, [pc, #260]	; (80042ac <Start_AM2302+0x39c>)
 80041a6:	461c      	mov	r4, r3
 80041a8:	4615      	mov	r5, r2
 80041aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80041ac:	6020      	str	r0, [r4, #0]
 80041ae:	6061      	str	r1, [r4, #4]
 80041b0:	60a2      	str	r2, [r4, #8]
 80041b2:	60e3      	str	r3, [r4, #12]
	  		strcat(str_t_and_h, "T: ");
 80041b4:	f107 0308 	add.w	r3, r7, #8
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fc f809 	bl	80001d0 <strlen>
 80041be:	4603      	mov	r3, r0
 80041c0:	461a      	mov	r2, r3
 80041c2:	f107 0308 	add.w	r3, r7, #8
 80041c6:	4413      	add	r3, r2
 80041c8:	4a39      	ldr	r2, [pc, #228]	; (80042b0 <Start_AM2302+0x3a0>)
 80041ca:	6810      	ldr	r0, [r2, #0]
 80041cc:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 80041ce:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	f7fc f9b8 	bl	8000548 <__aeabi_f2d>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80041e0:	4934      	ldr	r1, [pc, #208]	; (80042b4 <Start_AM2302+0x3a4>)
 80041e2:	f015 fa99 	bl	8019718 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80041e6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80041ea:	f107 0308 	add.w	r3, r7, #8
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f015 faf4 	bl	80197de <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 80041f6:	f107 0308 	add.w	r3, r7, #8
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fb ffe8 	bl	80001d0 <strlen>
 8004200:	4603      	mov	r3, r0
 8004202:	461a      	mov	r2, r3
 8004204:	f107 0308 	add.w	r3, r7, #8
 8004208:	4413      	add	r3, r2
 800420a:	4a2b      	ldr	r2, [pc, #172]	; (80042b8 <Start_AM2302+0x3a8>)
 800420c:	6810      	ldr	r0, [r2, #0]
 800420e:	6018      	str	r0, [r3, #0]
 8004210:	7912      	ldrb	r2, [r2, #4]
 8004212:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 8004214:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004218:	220c      	movs	r2, #12
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f014 fce5 	bl	8018bec <memset>

	  		strcat(str_t_and_h, "H: ");
 8004222:	f107 0308 	add.w	r3, r7, #8
 8004226:	4618      	mov	r0, r3
 8004228:	f7fb ffd2 	bl	80001d0 <strlen>
 800422c:	4603      	mov	r3, r0
 800422e:	461a      	mov	r2, r3
 8004230:	f107 0308 	add.w	r3, r7, #8
 8004234:	4413      	add	r3, r2
 8004236:	4a21      	ldr	r2, [pc, #132]	; (80042bc <Start_AM2302+0x3ac>)
 8004238:	6810      	ldr	r0, [r2, #0]
 800423a:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 800423c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	f7fc f981 	bl	8000548 <__aeabi_f2d>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800424e:	4919      	ldr	r1, [pc, #100]	; (80042b4 <Start_AM2302+0x3a4>)
 8004250:	f015 fa62 	bl	8019718 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004254:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	4611      	mov	r1, r2
 800425e:	4618      	mov	r0, r3
 8004260:	f015 fabd 	bl	80197de <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004264:	f107 0308 	add.w	r3, r7, #8
 8004268:	4618      	mov	r0, r3
 800426a:	f7fb ffb1 	bl	80001d0 <strlen>
 800426e:	4603      	mov	r3, r0
 8004270:	461a      	mov	r2, r3
 8004272:	f107 0308 	add.w	r3, r7, #8
 8004276:	4413      	add	r3, r2
 8004278:	4a11      	ldr	r2, [pc, #68]	; (80042c0 <Start_AM2302+0x3b0>)
 800427a:	6810      	ldr	r0, [r2, #0]
 800427c:	6018      	str	r0, [r3, #0]
 800427e:	7912      	ldrb	r2, [r2, #4]
 8004280:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 8004282:	f107 0208 	add.w	r2, r7, #8
 8004286:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f015 faa6 	bl	80197de <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <Start_AM2302+0x3b4>)
 8004294:	6818      	ldr	r0, [r3, #0]
 8004296:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800429a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800429e:	2200      	movs	r2, #0
 80042a0:	f010 f984 	bl	80145ac <osMessageQueuePut>
  {
 80042a4:	e65e      	b.n	8003f64 <Start_AM2302+0x54>
 80042a6:	bf00      	nop
 80042a8:	40020800 	.word	0x40020800
 80042ac:	0801c558 	.word	0x0801c558
 80042b0:	0801c568 	.word	0x0801c568
 80042b4:	0801c56c 	.word	0x0801c56c
 80042b8:	0801c570 	.word	0x0801c570
 80042bc:	0801c578 	.word	0x0801c578
 80042c0:	0801c57c 	.word	0x0801c57c
 80042c4:	2000b6c0 	.word	0x2000b6c0

080042c8 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	osDelay(1000);
 80042d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042d4:	f00f ff98 	bl	8014208 <osDelay>
	Mount_SD("/");
 80042d8:	4823      	ldr	r0, [pc, #140]	; (8004368 <Start_SD_CARD+0xa0>)
 80042da:	f7fd fcef 	bl	8001cbc <Mount_SD>

	Create_File("test_data_1.txt");
 80042de:	4823      	ldr	r0, [pc, #140]	; (800436c <Start_SD_CARD+0xa4>)
 80042e0:	f7fd fd32 	bl	8001d48 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 80042e4:	4922      	ldr	r1, [pc, #136]	; (8004370 <Start_SD_CARD+0xa8>)
 80042e6:	4821      	ldr	r0, [pc, #132]	; (800436c <Start_SD_CARD+0xa4>)
 80042e8:	f7fd fdc4 	bl	8001e74 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 80042ec:	4821      	ldr	r0, [pc, #132]	; (8004374 <Start_SD_CARD+0xac>)
 80042ee:	f7fd fe81 	bl	8001ff4 <Create_Dir>
	Create_Dir("test_folder_2");
 80042f2:	4821      	ldr	r0, [pc, #132]	; (8004378 <Start_SD_CARD+0xb0>)
 80042f4:	f7fd fe7e 	bl	8001ff4 <Create_Dir>
	Create_Dir("test_folder_3");
 80042f8:	4820      	ldr	r0, [pc, #128]	; (800437c <Start_SD_CARD+0xb4>)
 80042fa:	f7fd fe7b 	bl	8001ff4 <Create_Dir>

	Unmount_SD("/");
 80042fe:	481a      	ldr	r0, [pc, #104]	; (8004368 <Start_SD_CARD+0xa0>)
 8004300:	f7fd fd00 	bl	8001d04 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 8004304:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004308:	f00f ff7e 	bl	8014208 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 800430c:	2201      	movs	r2, #1
 800430e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004312:	481b      	ldr	r0, [pc, #108]	; (8004380 <Start_SD_CARD+0xb8>)
 8004314:	f003 ff12 	bl	800813c <HAL_GPIO_WritePin>

	  Mount_SD("/");
 8004318:	4813      	ldr	r0, [pc, #76]	; (8004368 <Start_SD_CARD+0xa0>)
 800431a:	f7fd fccf 	bl	8001cbc <Mount_SD>

	  char data[10] = {0};
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	f107 0310 	add.w	r3, r7, #16
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 800432c:	4b15      	ldr	r3, [pc, #84]	; (8004384 <Start_SD_CARD+0xbc>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	f107 030c 	add.w	r3, r7, #12
 8004334:	4914      	ldr	r1, [pc, #80]	; (8004388 <Start_SD_CARD+0xc0>)
 8004336:	4618      	mov	r0, r3
 8004338:	f015 f9ee 	bl	8019718 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 800433c:	f107 030c 	add.w	r3, r7, #12
 8004340:	4619      	mov	r1, r3
 8004342:	480a      	ldr	r0, [pc, #40]	; (800436c <Start_SD_CARD+0xa4>)
 8004344:	f7fd fd96 	bl	8001e74 <Update_File>
	  i++;
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <Start_SD_CARD+0xbc>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <Start_SD_CARD+0xbc>)
 8004350:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 8004352:	4805      	ldr	r0, [pc, #20]	; (8004368 <Start_SD_CARD+0xa0>)
 8004354:	f7fd fcd6 	bl	8001d04 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 8004358:	2200      	movs	r2, #0
 800435a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800435e:	4808      	ldr	r0, [pc, #32]	; (8004380 <Start_SD_CARD+0xb8>)
 8004360:	f003 feec 	bl	800813c <HAL_GPIO_WritePin>
  {
 8004364:	e7ce      	b.n	8004304 <Start_SD_CARD+0x3c>
 8004366:	bf00      	nop
 8004368:	0801c584 	.word	0x0801c584
 800436c:	0801c588 	.word	0x0801c588
 8004370:	0801c598 	.word	0x0801c598
 8004374:	0801c5ac 	.word	0x0801c5ac
 8004378:	0801c5bc 	.word	0x0801c5bc
 800437c:	0801c5cc 	.word	0x0801c5cc
 8004380:	40020c00 	.word	0x40020c00
 8004384:	20002844 	.word	0x20002844
 8004388:	0801c5dc 	.word	0x0801c5dc

0800438c <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b098      	sub	sp, #96	; 0x60
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	BME280QUEUE bme280_meg;
	MPU6050ACCQUEUE mpu6050_acc_meg;
	MPU6050GYROQUEUE mpu6050_gyro_meg;

	// Init LCD
	TFT9341_ini(240, 320);
 8004394:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004398:	20f0      	movs	r0, #240	; 0xf0
 800439a:	f7fc ffc5 	bl	8001328 <TFT9341_ini>
	TFT9341_SetRotation(3);
 800439e:	2003      	movs	r0, #3
 80043a0:	f7fd fc38 	bl	8001c14 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);
 80043a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80043a8:	f7fd fa1e 	bl	80017e8 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 80043ac:	201f      	movs	r0, #31
 80043ae:	f7fd fa2b 	bl	8001808 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 80043b2:	201f      	movs	r0, #31
 80043b4:	f7fd f986 	bl	80016c4 <TFT9341_FillScreen>

	// Init names sensors
	TFT9341_String_DMA(2,30, "1.RTC ");
 80043b8:	4a32      	ldr	r2, [pc, #200]	; (8004484 <Start_LCD+0xf8>)
 80043ba:	211e      	movs	r1, #30
 80043bc:	2002      	movs	r0, #2
 80043be:	f7fd fc05 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,45, "2.AM2302");
 80043c2:	4a31      	ldr	r2, [pc, #196]	; (8004488 <Start_LCD+0xfc>)
 80043c4:	212d      	movs	r1, #45	; 0x2d
 80043c6:	2002      	movs	r0, #2
 80043c8:	f7fd fc00 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,60, "3.BME280");
 80043cc:	4a2f      	ldr	r2, [pc, #188]	; (800448c <Start_LCD+0x100>)
 80043ce:	213c      	movs	r1, #60	; 0x3c
 80043d0:	2002      	movs	r0, #2
 80043d2:	f7fd fbfb 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,75, "4.MPU6050a");
 80043d6:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <Start_LCD+0x104>)
 80043d8:	214b      	movs	r1, #75	; 0x4b
 80043da:	2002      	movs	r0, #2
 80043dc:	f7fd fbf6 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,90, "5.MPU6050g");
 80043e0:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <Start_LCD+0x108>)
 80043e2:	215a      	movs	r1, #90	; 0x5a
 80043e4:	2002      	movs	r0, #2
 80043e6:	f7fd fbf1 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,105, "6.MPU6050t");
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <Start_LCD+0x10c>)
 80043ec:	2169      	movs	r1, #105	; 0x69
 80043ee:	2002      	movs	r0, #2
 80043f0:	f7fd fbec 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,120, "7.L883");
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <Start_LCD+0x110>)
 80043f6:	2178      	movs	r1, #120	; 0x78
 80043f8:	2002      	movs	r0, #2
 80043fa:	f7fd fbe7 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,135, "8.BMP180");
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <Start_LCD+0x114>)
 8004400:	2187      	movs	r1, #135	; 0x87
 8004402:	2002      	movs	r0, #2
 8004404:	f7fd fbe2 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,150, "8.APDS9960");
 8004408:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <Start_LCD+0x118>)
 800440a:	2196      	movs	r1, #150	; 0x96
 800440c:	2002      	movs	r0, #2
 800440e:	f7fd fbdd 	bl	8001bcc <TFT9341_String_DMA>
	TFT9341_String_DMA(2,165, "9.ADC");
 8004412:	4a25      	ldr	r2, [pc, #148]	; (80044a8 <Start_LCD+0x11c>)
 8004414:	21a5      	movs	r1, #165	; 0xa5
 8004416:	2002      	movs	r0, #2
 8004418:	f7fd fbd8 	bl	8001bcc <TFT9341_String_DMA>
	for(;;)
	{


		// Waiting on BME280 data in queue
		osMessageQueueGet(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 800441c:	4b23      	ldr	r3, [pc, #140]	; (80044ac <Start_LCD+0x120>)
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004424:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004428:	2200      	movs	r2, #0
 800442a:	f010 f91f 	bl	801466c <osMessageQueueGet>
		TFT9341_String(120, 60, bme280_meg.bme280_temperature_and_humidity);
 800442e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004432:	461a      	mov	r2, r3
 8004434:	213c      	movs	r1, #60	; 0x3c
 8004436:	2078      	movs	r0, #120	; 0x78
 8004438:	f7fd fba4 	bl	8001b84 <TFT9341_String>

		// Waiting on MPU6050 Acc data in queue
		osMessageQueueGet(MPU6050_Acc_QueueHandle, &mpu6050_acc_meg, 0, osWaitForever);
 800443c:	4b1c      	ldr	r3, [pc, #112]	; (80044b0 <Start_LCD+0x124>)
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004448:	2200      	movs	r2, #0
 800444a:	f010 f90f 	bl	801466c <osMessageQueueGet>
		TFT9341_String_DMA(120,75, mpu6050_acc_meg.mpu6050_acc_x_y_z);
 800444e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004452:	461a      	mov	r2, r3
 8004454:	214b      	movs	r1, #75	; 0x4b
 8004456:	2078      	movs	r0, #120	; 0x78
 8004458:	f7fd fbb8 	bl	8001bcc <TFT9341_String_DMA>

		// Waiting on MPU6050 Gyro data in queue
		osMessageQueueGet(MPU6050_Gyro_QueueHandle, &mpu6050_gyro_meg, 0, osWaitForever);
 800445c:	4b15      	ldr	r3, [pc, #84]	; (80044b4 <Start_LCD+0x128>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	f107 010c 	add.w	r1, r7, #12
 8004464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004468:	2200      	movs	r2, #0
 800446a:	f010 f8ff 	bl	801466c <osMessageQueueGet>
		TFT9341_String_DMA(120,90, mpu6050_gyro_meg.mpu6050_gyro_x_y_z);
 800446e:	f107 030c 	add.w	r3, r7, #12
 8004472:	461a      	mov	r2, r3
 8004474:	215a      	movs	r1, #90	; 0x5a
 8004476:	2078      	movs	r0, #120	; 0x78
 8004478:	f7fd fba8 	bl	8001bcc <TFT9341_String_DMA>



		osDelay(100);
 800447c:	2064      	movs	r0, #100	; 0x64
 800447e:	f00f fec3 	bl	8014208 <osDelay>
		osMessageQueueGet(BME280_QueueHandle, &bme280_meg, 0, osWaitForever);
 8004482:	e7cb      	b.n	800441c <Start_LCD+0x90>
 8004484:	0801c5e0 	.word	0x0801c5e0
 8004488:	0801c5e8 	.word	0x0801c5e8
 800448c:	0801c5f4 	.word	0x0801c5f4
 8004490:	0801c600 	.word	0x0801c600
 8004494:	0801c60c 	.word	0x0801c60c
 8004498:	0801c618 	.word	0x0801c618
 800449c:	0801c624 	.word	0x0801c624
 80044a0:	0801c62c 	.word	0x0801c62c
 80044a4:	0801c638 	.word	0x0801c638
 80044a8:	0801c644 	.word	0x0801c644
 80044ac:	2000e79c 	.word	0x2000e79c
 80044b0:	200098b8 	.word	0x200098b8
 80044b4:	200104ac 	.word	0x200104ac

080044b8 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 80044b8:	b5b0      	push	{r4, r5, r7, lr}
 80044ba:	b0b2      	sub	sp, #200	; 0xc8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 80044c0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044c4:	2264      	movs	r2, #100	; 0x64
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f014 fb8f 	bl	8018bec <memset>
	char buffer[50] = {0};
 80044ce:	2300      	movs	r3, #0
 80044d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044d6:	222e      	movs	r2, #46	; 0x2e
 80044d8:	2100      	movs	r1, #0
 80044da:	4618      	mov	r0, r3
 80044dc:	f014 fb86 	bl	8018bec <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 80044e0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80044e4:	2264      	movs	r2, #100	; 0x64
 80044e6:	2100      	movs	r1, #0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f014 fb7f 	bl	8018bec <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 80044ee:	f7fc fe85 	bl	80011fc <TP_Touchpad_Pressed>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	f040 8091 	bne.w	800461c <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 80044fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fb fe66 	bl	80001d0 <strlen>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800450c:	4413      	add	r3, r2
 800450e:	495e      	ldr	r1, [pc, #376]	; (8004688 <Start_LCD_touchscreen+0x1d0>)
 8004510:	461a      	mov	r2, r3
 8004512:	460b      	mov	r3, r1
 8004514:	cb03      	ldmia	r3!, {r0, r1}
 8004516:	6010      	str	r0, [r2, #0]
 8004518:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 800451a:	2300      	movs	r3, #0
 800451c:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 800451e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004522:	4618      	mov	r0, r3
 8004524:	f7fc fd94 	bl	8001050 <TP_Read_Coordinates>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 800452e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004532:	2b01      	cmp	r3, #1
 8004534:	f040 808c 	bne.w	8004650 <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 8004538:	2300      	movs	r3, #0
 800453a:	623b      	str	r3, [r7, #32]
 800453c:	2300      	movs	r3, #0
 800453e:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 8004540:	2300      	movs	r3, #0
 8004542:	61bb      	str	r3, [r7, #24]
 8004544:	2300      	movs	r3, #0
 8004546:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 8004548:	2300      	movs	r3, #0
 800454a:	60bb      	str	r3, [r7, #8]
 800454c:	f107 030c 	add.w	r3, r7, #12
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 800455a:	f107 0320 	add.w	r3, r7, #32
 800455e:	4618      	mov	r0, r3
 8004560:	f7fb fe36 	bl	80001d0 <strlen>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	f107 0320 	add.w	r3, r7, #32
 800456c:	4413      	add	r3, r2
 800456e:	4a47      	ldr	r2, [pc, #284]	; (800468c <Start_LCD_touchscreen+0x1d4>)
 8004570:	6810      	ldr	r0, [r2, #0]
 8004572:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 8004574:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004576:	4618      	mov	r0, r3
 8004578:	f107 0320 	add.w	r3, r7, #32
 800457c:	220a      	movs	r2, #10
 800457e:	4619      	mov	r1, r3
 8004580:	f014 fb10 	bl	8018ba4 <itoa>
			  strcat(buff_x_coordinates, " ");
 8004584:	f107 0320 	add.w	r3, r7, #32
 8004588:	4618      	mov	r0, r3
 800458a:	f7fb fe21 	bl	80001d0 <strlen>
 800458e:	4603      	mov	r3, r0
 8004590:	461a      	mov	r2, r3
 8004592:	f107 0320 	add.w	r3, r7, #32
 8004596:	4413      	add	r3, r2
 8004598:	493d      	ldr	r1, [pc, #244]	; (8004690 <Start_LCD_touchscreen+0x1d8>)
 800459a:	461a      	mov	r2, r3
 800459c:	460b      	mov	r3, r1
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 80045a2:	f107 0318 	add.w	r3, r7, #24
 80045a6:	4618      	mov	r0, r3
 80045a8:	f7fb fe12 	bl	80001d0 <strlen>
 80045ac:	4603      	mov	r3, r0
 80045ae:	461a      	mov	r2, r3
 80045b0:	f107 0318 	add.w	r3, r7, #24
 80045b4:	4413      	add	r3, r2
 80045b6:	4a37      	ldr	r2, [pc, #220]	; (8004694 <Start_LCD_touchscreen+0x1dc>)
 80045b8:	6810      	ldr	r0, [r2, #0]
 80045ba:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 80045bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80045be:	4618      	mov	r0, r3
 80045c0:	f107 0318 	add.w	r3, r7, #24
 80045c4:	220a      	movs	r2, #10
 80045c6:	4619      	mov	r1, r3
 80045c8:	f014 faec 	bl	8018ba4 <itoa>
			  strcat(buff_y_coordinates, " ");
 80045cc:	f107 0318 	add.w	r3, r7, #24
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7fb fdfd 	bl	80001d0 <strlen>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	f107 0318 	add.w	r3, r7, #24
 80045de:	4413      	add	r3, r2
 80045e0:	492b      	ldr	r1, [pc, #172]	; (8004690 <Start_LCD_touchscreen+0x1d8>)
 80045e2:	461a      	mov	r2, r3
 80045e4:	460b      	mov	r3, r1
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 80045ea:	f107 0220 	add.w	r2, r7, #32
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f015 f8f2 	bl	80197de <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 80045fa:	f107 0218 	add.w	r2, r7, #24
 80045fe:	f107 0308 	add.w	r3, r7, #8
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f015 f8ea 	bl	80197de <strcat>
			  strcat(buffer, buff_coordinates);
 800460a:	f107 0208 	add.w	r2, r7, #8
 800460e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004612:	4611      	mov	r1, r2
 8004614:	4618      	mov	r0, r3
 8004616:	f015 f8e2 	bl	80197de <strcat>
 800461a:	e019      	b.n	8004650 <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 800461c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004620:	4618      	mov	r0, r3
 8004622:	f7fb fdd5 	bl	80001d0 <strlen>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800462e:	4413      	add	r3, r2
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <Start_LCD_touchscreen+0x1e0>)
 8004632:	461d      	mov	r5, r3
 8004634:	4614      	mov	r4, r2
 8004636:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004638:	6028      	str	r0, [r5, #0]
 800463a:	6069      	str	r1, [r5, #4]
 800463c:	60aa      	str	r2, [r5, #8]
 800463e:	60eb      	str	r3, [r5, #12]
 8004640:	cc03      	ldmia	r4!, {r0, r1}
 8004642:	6128      	str	r0, [r5, #16]
 8004644:	6169      	str	r1, [r5, #20]
 8004646:	8823      	ldrh	r3, [r4, #0]
 8004648:	78a2      	ldrb	r2, [r4, #2]
 800464a:	832b      	strh	r3, [r5, #24]
 800464c:	4613      	mov	r3, r2
 800464e:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 8004650:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004654:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f015 f8bf 	bl	80197de <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 8004660:	4b0e      	ldr	r3, [pc, #56]	; (800469c <Start_LCD_touchscreen+0x1e4>)
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800466c:	2200      	movs	r2, #0
 800466e:	f00f ff9d 	bl	80145ac <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 8004672:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004676:	2232      	movs	r2, #50	; 0x32
 8004678:	2100      	movs	r1, #0
 800467a:	4618      	mov	r0, r3
 800467c:	f014 fab6 	bl	8018bec <memset>

	  osDelay(200);
 8004680:	20c8      	movs	r0, #200	; 0xc8
 8004682:	f00f fdc1 	bl	8014208 <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8004686:	e72b      	b.n	80044e0 <Start_LCD_touchscreen+0x28>
 8004688:	0801c64c 	.word	0x0801c64c
 800468c:	0801c654 	.word	0x0801c654
 8004690:	0801c658 	.word	0x0801c658
 8004694:	0801c65c 	.word	0x0801c65c
 8004698:	0801c660 	.word	0x0801c660
 800469c:	2000f864 	.word	0x2000f864

080046a0 <Start_MPU6050>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_MPU6050 */
void Start_MPU6050(void *argument)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b0bc      	sub	sp, #240	; 0xf0
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  MPU6050GYROQUEUE msg_gyro;

	//char mpu6050_gyro_x_y_z[30];


  char mpu6050_acc[20] = {0};
 80046a8:	2300      	movs	r3, #0
 80046aa:	637b      	str	r3, [r7, #52]	; 0x34
 80046ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	60da      	str	r2, [r3, #12]
  char mpu6050_gyro[20] = {0};
 80046ba:	2300      	movs	r3, #0
 80046bc:	623b      	str	r3, [r7, #32]
 80046be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	605a      	str	r2, [r3, #4]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	60da      	str	r2, [r3, #12]
  char mpu6050_temp[8] = {0};
 80046cc:	2300      	movs	r3, #0
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	2300      	movs	r3, #0
 80046d2:	61fb      	str	r3, [r7, #28]

  osDelay(500);
 80046d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046d8:	f00f fd96 	bl	8014208 <osDelay>

  MPU6050_Init(&hi2c2);
 80046dc:	48e1      	ldr	r0, [pc, #900]	; (8004a64 <Start_MPU6050+0x3c4>)
 80046de:	f002 f8dd 	bl	800689c <MPU6050_Init>
  osDelay(500);
 80046e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80046e6:	f00f fd8f 	bl	8014208 <osDelay>
  //uint8_t pissition = 0;


  for(;;)
  {
	  int i = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  uint8_t start_pissition = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
	  char mpu6050_buf[10] = {0};
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	809a      	strh	r2, [r3, #4]
	  memset(msg_acc.mpu6050_acc_x_y_z, 0, sizeof(msg_acc.mpu6050_acc_x_y_z));
 8004704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004708:	221e      	movs	r2, #30
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f014 fa6d 	bl	8018bec <memset>
	  memset(msg_gyro.mpu6050_gyro_x_y_z, 0, sizeof(msg_gyro.mpu6050_gyro_x_y_z));
 8004712:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004716:	221e      	movs	r2, #30
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f014 fa66 	bl	8018bec <memset>

	  MPU6050_Read_All(&hi2c2, &MPU6050);					// Writr data in MPU6050 struct
 8004720:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8004724:	4619      	mov	r1, r3
 8004726:	48cf      	ldr	r0, [pc, #828]	; (8004a64 <Start_MPU6050+0x3c4>)
 8004728:	f002 f912 	bl	8006950 <MPU6050_Read_All>

	  ////////////////// ACCELERATION
	  // X
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Ax);
 800472c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8004730:	f107 000c 	add.w	r0, r7, #12
 8004734:	49cc      	ldr	r1, [pc, #816]	; (8004a68 <Start_MPU6050+0x3c8>)
 8004736:	f014 ffef 	bl	8019718 <siprintf>
	  strcat(mpu6050_acc, "X");
 800473a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb fd46 	bl	80001d0 <strlen>
 8004744:	4603      	mov	r3, r0
 8004746:	461a      	mov	r2, r3
 8004748:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800474c:	4413      	add	r3, r2
 800474e:	49c7      	ldr	r1, [pc, #796]	; (8004a6c <Start_MPU6050+0x3cc>)
 8004750:	461a      	mov	r2, r3
 8004752:	460b      	mov	r3, r1
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	8013      	strh	r3, [r2, #0]
	  // Read only first digits
	  i = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  do{
		  i++;
 800475e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004762:	3301      	adds	r3, #1
 8004764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(mpu6050_acc[i] != '\0');
 8004768:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800476c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004770:	4413      	add	r3, r2
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f2      	bne.n	800475e <Start_MPU6050+0xbe>

	  do{
		  mpu6050_acc[i] = mpu6050_buf[i];
 8004778:	f107 020c 	add.w	r2, r7, #12
 800477c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004780:	4413      	add	r3, r2
 8004782:	7819      	ldrb	r1, [r3, #0]
 8004784:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004788:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800478c:	4413      	add	r3, r2
 800478e:	460a      	mov	r2, r1
 8004790:	701a      	strb	r2, [r3, #0]
		  i++;
 8004792:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004796:	3301      	adds	r3, #1
 8004798:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(i <= 3);										// Read only first digits
 800479c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	dde9      	ble.n	8004778 <Start_MPU6050+0xd8>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 80047a4:	f107 030c 	add.w	r3, r7, #12
 80047a8:	220a      	movs	r2, #10
 80047aa:	2100      	movs	r1, #0
 80047ac:	4618      	mov	r0, r3
 80047ae:	f014 fa1d 	bl	8018bec <memset>

	  // Y
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Ay);
 80047b2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80047b6:	f107 000c 	add.w	r0, r7, #12
 80047ba:	49ab      	ldr	r1, [pc, #684]	; (8004a68 <Start_MPU6050+0x3c8>)
 80047bc:	f014 ffac 	bl	8019718 <siprintf>
	  strcat(mpu6050_acc, " Y");
 80047c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fb fd03 	bl	80001d0 <strlen>
 80047ca:	4603      	mov	r3, r0
 80047cc:	461a      	mov	r2, r3
 80047ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047d2:	4413      	add	r3, r2
 80047d4:	4aa6      	ldr	r2, [pc, #664]	; (8004a70 <Start_MPU6050+0x3d0>)
 80047d6:	8811      	ldrh	r1, [r2, #0]
 80047d8:	7892      	ldrb	r2, [r2, #2]
 80047da:	8019      	strh	r1, [r3, #0]
 80047dc:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  do{
		  i++;
 80047e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047e8:	3301      	adds	r3, #1
 80047ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(mpu6050_acc[i] != '\0');
 80047ee:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80047f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047f6:	4413      	add	r3, r2
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f2      	bne.n	80047e4 <Start_MPU6050+0x144>

	  uint8_t j = 0;
 80047fe:	2300      	movs	r3, #0
 8004800:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  do{
		  mpu6050_acc[i] = mpu6050_buf[j];
 8004804:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004808:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 800480c:	4413      	add	r3, r2
 800480e:	f813 1ce4 	ldrb.w	r1, [r3, #-228]
 8004812:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8004816:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800481a:	4413      	add	r3, r2
 800481c:	460a      	mov	r2, r1
 800481e:	701a      	strb	r2, [r3, #0]
		  i++;
 8004820:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004824:	3301      	adds	r3, #1
 8004826:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  j++;
 800482a:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 800482e:	3301      	adds	r3, #1
 8004830:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  }while(j<=3);											// Read only first digits
 8004834:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004838:	2b03      	cmp	r3, #3
 800483a:	d9e3      	bls.n	8004804 <Start_MPU6050+0x164>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 800483c:	f107 030c 	add.w	r3, r7, #12
 8004840:	220a      	movs	r2, #10
 8004842:	2100      	movs	r1, #0
 8004844:	4618      	mov	r0, r3
 8004846:	f014 f9d1 	bl	8018bec <memset>

	  // Z
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Az);
 800484a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800484e:	f107 000c 	add.w	r0, r7, #12
 8004852:	4985      	ldr	r1, [pc, #532]	; (8004a68 <Start_MPU6050+0x3c8>)
 8004854:	f014 ff60 	bl	8019718 <siprintf>
	  strcat(mpu6050_acc, " Z");
 8004858:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800485c:	4618      	mov	r0, r3
 800485e:	f7fb fcb7 	bl	80001d0 <strlen>
 8004862:	4603      	mov	r3, r0
 8004864:	461a      	mov	r2, r3
 8004866:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800486a:	4413      	add	r3, r2
 800486c:	4a81      	ldr	r2, [pc, #516]	; (8004a74 <Start_MPU6050+0x3d4>)
 800486e:	8811      	ldrh	r1, [r2, #0]
 8004870:	7892      	ldrb	r2, [r2, #2]
 8004872:	8019      	strh	r1, [r3, #0]
 8004874:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 8004876:	2300      	movs	r3, #0
 8004878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  do{
		  i++;
 800487c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004880:	3301      	adds	r3, #1
 8004882:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(mpu6050_acc[i] != '\0');
 8004886:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800488a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800488e:	4413      	add	r3, r2
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f2      	bne.n	800487c <Start_MPU6050+0x1dc>

	  j = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  do{
	  	mpu6050_acc[i] = mpu6050_buf[j];
 800489c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80048a0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80048a4:	4413      	add	r3, r2
 80048a6:	f813 1ce4 	ldrb.w	r1, [r3, #-228]
 80048aa:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80048ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048b2:	4413      	add	r3, r2
 80048b4:	460a      	mov	r2, r1
 80048b6:	701a      	strb	r2, [r3, #0]
	  	i++;
 80048b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048bc:	3301      	adds	r3, #1
 80048be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  	j++;
 80048c2:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80048c6:	3301      	adds	r3, #1
 80048c8:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  }while(j<=3);											// Read only first digits
 80048cc:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d9e3      	bls.n	800489c <Start_MPU6050+0x1fc>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 80048d4:	f107 030c 	add.w	r3, r7, #12
 80048d8:	220a      	movs	r2, #10
 80048da:	2100      	movs	r1, #0
 80048dc:	4618      	mov	r0, r3
 80048de:	f014 f985 	bl	8018bec <memset>

	  // Write in the acc queue
	  strcat(msg_acc.mpu6050_acc_x_y_z, mpu6050_acc);
 80048e2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80048e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80048ea:	4611      	mov	r1, r2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f014 ff76 	bl	80197de <strcat>
	  memset(mpu6050_acc, 0, sizeof(mpu6050_acc));
 80048f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80048f6:	2214      	movs	r2, #20
 80048f8:	2100      	movs	r1, #0
 80048fa:	4618      	mov	r0, r3
 80048fc:	f014 f976 	bl	8018bec <memset>
	  osMessageQueuePut(MPU6050_Acc_QueueHandle, &msg_acc, 0, osWaitForever);
 8004900:	4b5d      	ldr	r3, [pc, #372]	; (8004a78 <Start_MPU6050+0x3d8>)
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8004908:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800490c:	2200      	movs	r2, #0
 800490e:	f00f fe4d 	bl	80145ac <osMessageQueuePut>

	  ////////////////// GYRO
	  // X
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Gx);
 8004912:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8004916:	f107 000c 	add.w	r0, r7, #12
 800491a:	4953      	ldr	r1, [pc, #332]	; (8004a68 <Start_MPU6050+0x3c8>)
 800491c:	f014 fefc 	bl	8019718 <siprintf>
	  strcat(mpu6050_gyro, "X");
 8004920:	f107 0320 	add.w	r3, r7, #32
 8004924:	4618      	mov	r0, r3
 8004926:	f7fb fc53 	bl	80001d0 <strlen>
 800492a:	4603      	mov	r3, r0
 800492c:	461a      	mov	r2, r3
 800492e:	f107 0320 	add.w	r3, r7, #32
 8004932:	4413      	add	r3, r2
 8004934:	494d      	ldr	r1, [pc, #308]	; (8004a6c <Start_MPU6050+0x3cc>)
 8004936:	461a      	mov	r2, r3
 8004938:	460b      	mov	r3, r1
 800493a:	881b      	ldrh	r3, [r3, #0]
 800493c:	8013      	strh	r3, [r2, #0]
	  // Read only first digits
	  i = 0;
 800493e:	2300      	movs	r3, #0
 8004940:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  do{
		  i++;
 8004944:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004948:	3301      	adds	r3, #1
 800494a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(mpu6050_gyro[i] != '\0');
 800494e:	f107 0220 	add.w	r2, r7, #32
 8004952:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004956:	4413      	add	r3, r2
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1f2      	bne.n	8004944 <Start_MPU6050+0x2a4>

	  do{
		  mpu6050_gyro[i] = mpu6050_buf[i];
 800495e:	f107 020c 	add.w	r2, r7, #12
 8004962:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004966:	4413      	add	r3, r2
 8004968:	7819      	ldrb	r1, [r3, #0]
 800496a:	f107 0220 	add.w	r2, r7, #32
 800496e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004972:	4413      	add	r3, r2
 8004974:	460a      	mov	r2, r1
 8004976:	701a      	strb	r2, [r3, #0]
	  	i++;
 8004978:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800497c:	3301      	adds	r3, #1
 800497e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(i <= 3);										// Read only first digits
 8004982:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004986:	2b03      	cmp	r3, #3
 8004988:	dde9      	ble.n	800495e <Start_MPU6050+0x2be>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 800498a:	f107 030c 	add.w	r3, r7, #12
 800498e:	220a      	movs	r2, #10
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f014 f92a 	bl	8018bec <memset>

	  // Y
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Gy);
 8004998:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800499c:	f107 000c 	add.w	r0, r7, #12
 80049a0:	4931      	ldr	r1, [pc, #196]	; (8004a68 <Start_MPU6050+0x3c8>)
 80049a2:	f014 feb9 	bl	8019718 <siprintf>
	  strcat(mpu6050_gyro, " Y");
 80049a6:	f107 0320 	add.w	r3, r7, #32
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fc10 	bl	80001d0 <strlen>
 80049b0:	4603      	mov	r3, r0
 80049b2:	461a      	mov	r2, r3
 80049b4:	f107 0320 	add.w	r3, r7, #32
 80049b8:	4413      	add	r3, r2
 80049ba:	4a2d      	ldr	r2, [pc, #180]	; (8004a70 <Start_MPU6050+0x3d0>)
 80049bc:	8811      	ldrh	r1, [r2, #0]
 80049be:	7892      	ldrb	r2, [r2, #2]
 80049c0:	8019      	strh	r1, [r3, #0]
 80049c2:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  do{
		  i++;
 80049ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049ce:	3301      	adds	r3, #1
 80049d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(mpu6050_gyro[i] != '\0');
 80049d4:	f107 0220 	add.w	r2, r7, #32
 80049d8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80049dc:	4413      	add	r3, r2
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1f2      	bne.n	80049ca <Start_MPU6050+0x32a>

	  j = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  do{
		  mpu6050_gyro[i] = mpu6050_buf[j];
 80049ea:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 80049ee:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 80049f2:	4413      	add	r3, r2
 80049f4:	f813 1ce4 	ldrb.w	r1, [r3, #-228]
 80049f8:	f107 0220 	add.w	r2, r7, #32
 80049fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a00:	4413      	add	r3, r2
 8004a02:	460a      	mov	r2, r1
 8004a04:	701a      	strb	r2, [r3, #0]
		  i++;
 8004a06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  j++;
 8004a10:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004a14:	3301      	adds	r3, #1
 8004a16:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  }while(j<=3);											// Read only first digits
 8004a1a:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004a1e:	2b03      	cmp	r3, #3
 8004a20:	d9e3      	bls.n	80049ea <Start_MPU6050+0x34a>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004a22:	f107 030c 	add.w	r3, r7, #12
 8004a26:	220a      	movs	r2, #10
 8004a28:	2100      	movs	r1, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f014 f8de 	bl	8018bec <memset>

	  // Z
	  sprintf(mpu6050_buf ,"%f" ,MPU6050.Gz);
 8004a30:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004a34:	f107 000c 	add.w	r0, r7, #12
 8004a38:	490b      	ldr	r1, [pc, #44]	; (8004a68 <Start_MPU6050+0x3c8>)
 8004a3a:	f014 fe6d 	bl	8019718 <siprintf>
	  strcat(mpu6050_gyro, " Z");
 8004a3e:	f107 0320 	add.w	r3, r7, #32
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fbc4 	bl	80001d0 <strlen>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f107 0320 	add.w	r3, r7, #32
 8004a50:	4413      	add	r3, r2
 8004a52:	4a08      	ldr	r2, [pc, #32]	; (8004a74 <Start_MPU6050+0x3d4>)
 8004a54:	8811      	ldrh	r1, [r2, #0]
 8004a56:	7892      	ldrb	r2, [r2, #2]
 8004a58:	8019      	strh	r1, [r3, #0]
 8004a5a:	709a      	strb	r2, [r3, #2]
	  // findings end of string
	  i = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8004a62:	e00b      	b.n	8004a7c <Start_MPU6050+0x3dc>
 8004a64:	2000ac38 	.word	0x2000ac38
 8004a68:	0801c56c 	.word	0x0801c56c
 8004a6c:	0801c67c 	.word	0x0801c67c
 8004a70:	0801c680 	.word	0x0801c680
 8004a74:	0801c684 	.word	0x0801c684
 8004a78:	200098b8 	.word	0x200098b8
	  do{
		  i++;
 8004a7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a80:	3301      	adds	r3, #1
 8004a82:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }while(mpu6050_gyro[i] != '\0');
 8004a86:	f107 0220 	add.w	r2, r7, #32
 8004a8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004a8e:	4413      	add	r3, r2
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f2      	bne.n	8004a7c <Start_MPU6050+0x3dc>

	  j = 0;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  do{
		  mpu6050_gyro[i] = mpu6050_buf[j];
 8004a9c:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004aa0:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f813 1ce4 	ldrb.w	r1, [r3, #-228]
 8004aaa:	f107 0220 	add.w	r2, r7, #32
 8004aae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004ab2:	4413      	add	r3, r2
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	701a      	strb	r2, [r3, #0]
		  i++;
 8004ab8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004abc:	3301      	adds	r3, #1
 8004abe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  	  j++;
 8004ac2:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	  }while(j<=3);											// Read only first digits
 8004acc:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d9e3      	bls.n	8004a9c <Start_MPU6050+0x3fc>
	  memset(mpu6050_buf, 0, sizeof(mpu6050_buf));
 8004ad4:	f107 030c 	add.w	r3, r7, #12
 8004ad8:	220a      	movs	r2, #10
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f014 f885 	bl	8018bec <memset>

	  // Write in the acc queue
	  strcat(msg_gyro.mpu6050_gyro_x_y_z, mpu6050_gyro);
 8004ae2:	f107 0220 	add.w	r2, r7, #32
 8004ae6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004aea:	4611      	mov	r1, r2
 8004aec:	4618      	mov	r0, r3
 8004aee:	f014 fe76 	bl	80197de <strcat>
	  memset(mpu6050_gyro, 0, sizeof(mpu6050_gyro));
 8004af2:	f107 0320 	add.w	r3, r7, #32
 8004af6:	2214      	movs	r2, #20
 8004af8:	2100      	movs	r1, #0
 8004afa:	4618      	mov	r0, r3
 8004afc:	f014 f876 	bl	8018bec <memset>

	  osMessageQueuePut(MPU6050_Gyro_QueueHandle, &msg_gyro, 0, osWaitForever);
 8004b00:	4b08      	ldr	r3, [pc, #32]	; (8004b24 <Start_MPU6050+0x484>)
 8004b02:	6818      	ldr	r0, [r3, #0]
 8004b04:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8004b08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f00f fd4d 	bl	80145ac <osMessageQueuePut>
	  // відправити чергу

	  // Заповнити чергу температури
	  // відправити чергу

	  int gggg = 9999;
 8004b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    osDelay(1000);
 8004b1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b1e:	f00f fb73 	bl	8014208 <osDelay>
  {
 8004b22:	e5e2      	b.n	80046ea <Start_MPU6050+0x4a>
 8004b24:	200104ac 	.word	0x200104ac

08004b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a20      	ldr	r2, [pc, #128]	; (8004bb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d10c      	bne.n	8004b54 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d005      	beq.n	8004b4e <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8004b42:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3b01      	subs	r3, #1
 8004b48:	4a1c      	ldr	r2, [pc, #112]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b4a:	6013      	str	r3, [r2, #0]
 8004b4c:	e002      	b.n	8004b54 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	; (8004bbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]
	{
		//HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a19      	ldr	r2, [pc, #100]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d104      	bne.n	8004b68 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a17      	ldr	r2, [pc, #92]	; (8004bc4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004b66:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8004b72:	f002 fa7b 	bl	800706c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d117      	bne.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		if(Timer1 > 0)
 8004b80:	4b12      	ldr	r3, [pc, #72]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d006      	beq.n	8004b98 <HAL_TIM_PeriodElapsedCallback+0x70>
		    Timer1--;
 8004b8a:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004b96:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 8004b98:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <HAL_TIM_PeriodElapsedCallback+0x88>
		    Timer2--;
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b2da      	uxtb	r2, r3
 8004bac:	4b08      	ldr	r3, [pc, #32]	; (8004bd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004bae:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004bb0:	bf00      	nop
 8004bb2:	3708      	adds	r7, #8
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40014400 	.word	0x40014400
 8004bbc:	2000283c 	.word	0x2000283c
 8004bc0:	40000400 	.word	0x40000400
 8004bc4:	20010448 	.word	0x20010448
 8004bc8:	40002000 	.word	0x40002000
 8004bcc:	20011070 	.word	0x20011070
 8004bd0:	200104b8 	.word	0x200104b8

08004bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bd8:	b672      	cpsid	i
}
 8004bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bdc:	e7fe      	b.n	8004bdc <Error_Handler+0x8>
	...

08004be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <HAL_MspInit+0x54>)
 8004bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bee:	4a11      	ldr	r2, [pc, #68]	; (8004c34 <HAL_MspInit+0x54>)
 8004bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8004bf6:	4b0f      	ldr	r3, [pc, #60]	; (8004c34 <HAL_MspInit+0x54>)
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	603b      	str	r3, [r7, #0]
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <HAL_MspInit+0x54>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0a:	4a0a      	ldr	r2, [pc, #40]	; (8004c34 <HAL_MspInit+0x54>)
 8004c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c10:	6413      	str	r3, [r2, #64]	; 0x40
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <HAL_MspInit+0x54>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c1e:	2200      	movs	r2, #0
 8004c20:	210f      	movs	r1, #15
 8004c22:	f06f 0001 	mvn.w	r0, #1
 8004c26:	f002 fb41 	bl	80072ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	3708      	adds	r7, #8
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40023800 	.word	0x40023800

08004c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08c      	sub	sp, #48	; 0x30
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	f107 031c 	add.w	r3, r7, #28
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a42      	ldr	r2, [pc, #264]	; (8004d60 <HAL_I2C_MspInit+0x128>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d12d      	bne.n	8004cb6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	4b41      	ldr	r3, [pc, #260]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a40      	ldr	r2, [pc, #256]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b3e      	ldr	r3, [pc, #248]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004c76:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004c7c:	2312      	movs	r3, #18
 8004c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004c88:	2304      	movs	r3, #4
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	4619      	mov	r1, r3
 8004c92:	4835      	ldr	r0, [pc, #212]	; (8004d68 <HAL_I2C_MspInit+0x130>)
 8004c94:	f002 ffa2 	bl	8007bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	4a30      	ldr	r2, [pc, #192]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ca6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb0:	617b      	str	r3, [r7, #20]
 8004cb2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004cb4:	e050      	b.n	8004d58 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a2c      	ldr	r2, [pc, #176]	; (8004d6c <HAL_I2C_MspInit+0x134>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d14b      	bne.n	8004d58 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc8:	4a26      	ldr	r2, [pc, #152]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004cca:	f043 0304 	orr.w	r3, r3, #4
 8004cce:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd0:	4b24      	ldr	r3, [pc, #144]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cdc:	2300      	movs	r3, #0
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	4b20      	ldr	r3, [pc, #128]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce4:	4a1f      	ldr	r2, [pc, #124]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004ce6:	f043 0301 	orr.w	r3, r3, #1
 8004cea:	6313      	str	r3, [r2, #48]	; 0x30
 8004cec:	4b1d      	ldr	r3, [pc, #116]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cfe:	2312      	movs	r3, #18
 8004d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	2300      	movs	r3, #0
 8004d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d06:	2303      	movs	r3, #3
 8004d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d0a:	2304      	movs	r3, #4
 8004d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d0e:	f107 031c 	add.w	r3, r7, #28
 8004d12:	4619      	mov	r1, r3
 8004d14:	4816      	ldr	r0, [pc, #88]	; (8004d70 <HAL_I2C_MspInit+0x138>)
 8004d16:	f002 ff61 	bl	8007bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d20:	2312      	movs	r3, #18
 8004d22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d24:	2300      	movs	r3, #0
 8004d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d2c:	2304      	movs	r3, #4
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d30:	f107 031c 	add.w	r3, r7, #28
 8004d34:	4619      	mov	r1, r3
 8004d36:	480f      	ldr	r0, [pc, #60]	; (8004d74 <HAL_I2C_MspInit+0x13c>)
 8004d38:	f002 ff50 	bl	8007bdc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	60bb      	str	r3, [r7, #8]
 8004d40:	4b08      	ldr	r3, [pc, #32]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d44:	4a07      	ldr	r2, [pc, #28]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004d46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_I2C_MspInit+0x12c>)
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	3730      	adds	r7, #48	; 0x30
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40005800 	.word	0x40005800
 8004d64:	40023800 	.word	0x40023800
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	40005c00 	.word	0x40005c00
 8004d70:	40020800 	.word	0x40020800
 8004d74:	40020000 	.word	0x40020000

08004d78 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a0b      	ldr	r2, [pc, #44]	; (8004db4 <HAL_RNG_MspInit+0x3c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10d      	bne.n	8004da6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RNG_MspInit+0x40>)
 8004d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d92:	4a09      	ldr	r2, [pc, #36]	; (8004db8 <HAL_RNG_MspInit+0x40>)
 8004d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d98:	6353      	str	r3, [r2, #52]	; 0x34
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <HAL_RNG_MspInit+0x40>)
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	50060800 	.word	0x50060800
 8004db8:	40023800 	.word	0x40023800

08004dbc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004dc4:	f107 0308 	add.w	r3, r7, #8
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	609a      	str	r2, [r3, #8]
 8004dd0:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0c      	ldr	r2, [pc, #48]	; (8004e08 <HAL_RTC_MspInit+0x4c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d111      	bne.n	8004e00 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ddc:	2302      	movs	r3, #2
 8004dde:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004de0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004de4:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004de6:	f107 0308 	add.w	r3, r7, #8
 8004dea:	4618      	mov	r0, r3
 8004dec:	f006 fc08 	bl	800b600 <HAL_RCCEx_PeriphCLKConfig>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004df6:	f7ff feed 	bl	8004bd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004dfa:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <HAL_RTC_MspInit+0x50>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004e00:	bf00      	nop
 8004e02:	3718      	adds	r7, #24
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	40002800 	.word	0x40002800
 8004e0c:	42470e3c 	.word	0x42470e3c

08004e10 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08c      	sub	sp, #48	; 0x30
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e18:	f107 031c 	add.w	r3, r7, #28
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	609a      	str	r2, [r3, #8]
 8004e24:	60da      	str	r2, [r3, #12]
 8004e26:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a5d      	ldr	r2, [pc, #372]	; (8004fa4 <HAL_SPI_MspInit+0x194>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d12c      	bne.n	8004e8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	61bb      	str	r3, [r7, #24]
 8004e36:	4b5c      	ldr	r3, [pc, #368]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	4a5b      	ldr	r2, [pc, #364]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e40:	6453      	str	r3, [r2, #68]	; 0x44
 8004e42:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e4a:	61bb      	str	r3, [r7, #24]
 8004e4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	4b55      	ldr	r3, [pc, #340]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	4a54      	ldr	r2, [pc, #336]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e58:	f043 0301 	orr.w	r3, r3, #1
 8004e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5e:	4b52      	ldr	r3, [pc, #328]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004e6a:	23e0      	movs	r3, #224	; 0xe0
 8004e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e76:	2302      	movs	r3, #2
 8004e78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e7a:	2305      	movs	r3, #5
 8004e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7e:	f107 031c 	add.w	r3, r7, #28
 8004e82:	4619      	mov	r1, r3
 8004e84:	4849      	ldr	r0, [pc, #292]	; (8004fac <HAL_SPI_MspInit+0x19c>)
 8004e86:	f002 fea9 	bl	8007bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004e8a:	e086      	b.n	8004f9a <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a47      	ldr	r2, [pc, #284]	; (8004fb0 <HAL_SPI_MspInit+0x1a0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	f040 8081 	bne.w	8004f9a <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004e98:	2300      	movs	r3, #0
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	4b42      	ldr	r3, [pc, #264]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	4a41      	ldr	r2, [pc, #260]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004ea2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	4a3a      	ldr	r2, [pc, #232]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004ebe:	f043 0304 	orr.w	r3, r3, #4
 8004ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec4:	4b38      	ldr	r3, [pc, #224]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	4b34      	ldr	r3, [pc, #208]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed8:	4a33      	ldr	r2, [pc, #204]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004eda:	f043 0302 	orr.w	r3, r3, #2
 8004ede:	6313      	str	r3, [r2, #48]	; 0x30
 8004ee0:	4b31      	ldr	r3, [pc, #196]	; (8004fa8 <HAL_SPI_MspInit+0x198>)
 8004ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004eec:	2304      	movs	r3, #4
 8004eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004efc:	2305      	movs	r3, #5
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f00:	f107 031c 	add.w	r3, r7, #28
 8004f04:	4619      	mov	r1, r3
 8004f06:	482b      	ldr	r0, [pc, #172]	; (8004fb4 <HAL_SPI_MspInit+0x1a4>)
 8004f08:	f002 fe68 	bl	8007bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004f0c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f12:	2302      	movs	r3, #2
 8004f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004f1e:	2305      	movs	r3, #5
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f22:	f107 031c 	add.w	r3, r7, #28
 8004f26:	4619      	mov	r1, r3
 8004f28:	4823      	ldr	r0, [pc, #140]	; (8004fb8 <HAL_SPI_MspInit+0x1a8>)
 8004f2a:	f002 fe57 	bl	8007bdc <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004f2e:	4b23      	ldr	r3, [pc, #140]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f30:	4a23      	ldr	r2, [pc, #140]	; (8004fc0 <HAL_SPI_MspInit+0x1b0>)
 8004f32:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004f34:	4b21      	ldr	r3, [pc, #132]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f3a:	4b20      	ldr	r3, [pc, #128]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f3c:	2240      	movs	r2, #64	; 0x40
 8004f3e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f40:	4b1e      	ldr	r3, [pc, #120]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f46:	4b1d      	ldr	r3, [pc, #116]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f4c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f54:	4b19      	ldr	r3, [pc, #100]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004f5a:	4b18      	ldr	r3, [pc, #96]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f60:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f68:	4b14      	ldr	r3, [pc, #80]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004f6e:	4813      	ldr	r0, [pc, #76]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f70:	f002 f9d4 	bl	800731c <HAL_DMA_Init>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d001      	beq.n	8004f7e <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 8004f7a:	f7ff fe2b 	bl	8004bd4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a0e      	ldr	r2, [pc, #56]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f82:	649a      	str	r2, [r3, #72]	; 0x48
 8004f84:	4a0d      	ldr	r2, [pc, #52]	; (8004fbc <HAL_SPI_MspInit+0x1ac>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	2105      	movs	r1, #5
 8004f8e:	2024      	movs	r0, #36	; 0x24
 8004f90:	f002 f98c 	bl	80072ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004f94:	2024      	movs	r0, #36	; 0x24
 8004f96:	f002 f9a5 	bl	80072e4 <HAL_NVIC_EnableIRQ>
}
 8004f9a:	bf00      	nop
 8004f9c:	3730      	adds	r7, #48	; 0x30
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40013000 	.word	0x40013000
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	40020000 	.word	0x40020000
 8004fb0:	40003800 	.word	0x40003800
 8004fb4:	40020800 	.word	0x40020800
 8004fb8:	40020400 	.word	0x40020400
 8004fbc:	20011010 	.word	0x20011010
 8004fc0:	40026070 	.word	0x40026070

08004fc4 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a16      	ldr	r2, [pc, #88]	; (800502c <HAL_SPI_MspDeInit+0x68>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d10a      	bne.n	8004fec <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8004fd6:	4b16      	ldr	r3, [pc, #88]	; (8005030 <HAL_SPI_MspDeInit+0x6c>)
 8004fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fda:	4a15      	ldr	r2, [pc, #84]	; (8005030 <HAL_SPI_MspDeInit+0x6c>)
 8004fdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe0:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8004fe2:	21e0      	movs	r1, #224	; 0xe0
 8004fe4:	4813      	ldr	r0, [pc, #76]	; (8005034 <HAL_SPI_MspDeInit+0x70>)
 8004fe6:	f002 ff95 	bl	8007f14 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8004fea:	e01b      	b.n	8005024 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a11      	ldr	r2, [pc, #68]	; (8005038 <HAL_SPI_MspDeInit+0x74>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d116      	bne.n	8005024 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_SPI_MspDeInit+0x6c>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	4a0d      	ldr	r2, [pc, #52]	; (8005030 <HAL_SPI_MspDeInit+0x6c>)
 8004ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005000:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8005002:	2104      	movs	r1, #4
 8005004:	480d      	ldr	r0, [pc, #52]	; (800503c <HAL_SPI_MspDeInit+0x78>)
 8005006:	f002 ff85 	bl	8007f14 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 800500a:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 800500e:	480c      	ldr	r0, [pc, #48]	; (8005040 <HAL_SPI_MspDeInit+0x7c>)
 8005010:	f002 ff80 	bl	8007f14 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005018:	4618      	mov	r0, r3
 800501a:	f002 fa2d 	bl	8007478 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 800501e:	2024      	movs	r0, #36	; 0x24
 8005020:	f002 f96e 	bl	8007300 <HAL_NVIC_DisableIRQ>
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40013000 	.word	0x40013000
 8005030:	40023800 	.word	0x40023800
 8005034:	40020000 	.word	0x40020000
 8005038:	40003800 	.word	0x40003800
 800503c:	40020800 	.word	0x40020800
 8005040:	40020400 	.word	0x40020400

08005044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b086      	sub	sp, #24
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a38      	ldr	r2, [pc, #224]	; (8005134 <HAL_TIM_Base_MspInit+0xf0>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d116      	bne.n	8005084 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	4b37      	ldr	r3, [pc, #220]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505e:	4a36      	ldr	r2, [pc, #216]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6453      	str	r3, [r2, #68]	; 0x44
 8005066:	4b34      	ldr	r3, [pc, #208]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8005072:	2200      	movs	r2, #0
 8005074:	2105      	movs	r1, #5
 8005076:	2019      	movs	r0, #25
 8005078:	f002 f918 	bl	80072ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800507c:	2019      	movs	r0, #25
 800507e:	f002 f931 	bl	80072e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005082:	e052      	b.n	800512a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d116      	bne.n	80050bc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	613b      	str	r3, [r7, #16]
 8005092:	4b29      	ldr	r3, [pc, #164]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	4a28      	ldr	r2, [pc, #160]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6413      	str	r3, [r2, #64]	; 0x40
 800509e:	4b26      	ldr	r3, [pc, #152]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2105      	movs	r1, #5
 80050ae:	201c      	movs	r0, #28
 80050b0:	f002 f8fc 	bl	80072ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050b4:	201c      	movs	r0, #28
 80050b6:	f002 f915 	bl	80072e4 <HAL_NVIC_EnableIRQ>
}
 80050ba:	e036      	b.n	800512a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a1e      	ldr	r2, [pc, #120]	; (800513c <HAL_TIM_Base_MspInit+0xf8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d116      	bne.n	80050f4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050c6:	2300      	movs	r3, #0
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	4a1a      	ldr	r2, [pc, #104]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	6413      	str	r3, [r2, #64]	; 0x40
 80050d6:	4b18      	ldr	r3, [pc, #96]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 80050d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	60fb      	str	r3, [r7, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2105      	movs	r1, #5
 80050e6:	201d      	movs	r0, #29
 80050e8:	f002 f8e0 	bl	80072ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80050ec:	201d      	movs	r0, #29
 80050ee:	f002 f8f9 	bl	80072e4 <HAL_NVIC_EnableIRQ>
}
 80050f2:	e01a      	b.n	800512a <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a11      	ldr	r2, [pc, #68]	; (8005140 <HAL_TIM_Base_MspInit+0xfc>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d115      	bne.n	800512a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	4a0c      	ldr	r2, [pc, #48]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800510c:	6453      	str	r3, [r2, #68]	; 0x44
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <HAL_TIM_Base_MspInit+0xf4>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800511a:	2200      	movs	r2, #0
 800511c:	2105      	movs	r1, #5
 800511e:	2019      	movs	r0, #25
 8005120:	f002 f8c4 	bl	80072ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005124:	2019      	movs	r0, #25
 8005126:	f002 f8dd 	bl	80072e4 <HAL_NVIC_EnableIRQ>
}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40010000 	.word	0x40010000
 8005138:	40023800 	.word	0x40023800
 800513c:	40000400 	.word	0x40000400
 8005140:	40014400 	.word	0x40014400

08005144 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08c      	sub	sp, #48	; 0x30
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800514c:	2300      	movs	r3, #0
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8005154:	2200      	movs	r2, #0
 8005156:	6879      	ldr	r1, [r7, #4]
 8005158:	202d      	movs	r0, #45	; 0x2d
 800515a:	f002 f8a7 	bl	80072ac <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800515e:	202d      	movs	r0, #45	; 0x2d
 8005160:	f002 f8c0 	bl	80072e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	4b1f      	ldr	r3, [pc, #124]	; (80051e8 <HAL_InitTick+0xa4>)
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_InitTick+0xa4>)
 800516e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005172:	6413      	str	r3, [r2, #64]	; 0x40
 8005174:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <HAL_InitTick+0xa4>)
 8005176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005180:	f107 0210 	add.w	r2, r7, #16
 8005184:	f107 0314 	add.w	r3, r7, #20
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f006 fa06 	bl	800b59c <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005190:	f006 f9f0 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 8005194:	4603      	mov	r3, r0
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800519a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519c:	4a13      	ldr	r2, [pc, #76]	; (80051ec <HAL_InitTick+0xa8>)
 800519e:	fba2 2303 	umull	r2, r3, r2, r3
 80051a2:	0c9b      	lsrs	r3, r3, #18
 80051a4:	3b01      	subs	r3, #1
 80051a6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80051a8:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_InitTick+0xac>)
 80051aa:	4a12      	ldr	r2, [pc, #72]	; (80051f4 <HAL_InitTick+0xb0>)
 80051ac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80051ae:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <HAL_InitTick+0xac>)
 80051b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80051b4:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80051b6:	4a0e      	ldr	r2, [pc, #56]	; (80051f0 <HAL_InitTick+0xac>)
 80051b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ba:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80051bc:	4b0c      	ldr	r3, [pc, #48]	; (80051f0 <HAL_InitTick+0xac>)
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051c2:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_InitTick+0xac>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 80051c8:	4809      	ldr	r0, [pc, #36]	; (80051f0 <HAL_InitTick+0xac>)
 80051ca:	f007 fe77 	bl	800cebc <HAL_TIM_Base_Init>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 80051d4:	4806      	ldr	r0, [pc, #24]	; (80051f0 <HAL_InitTick+0xac>)
 80051d6:	f007 fec1 	bl	800cf5c <HAL_TIM_Base_Start_IT>
 80051da:	4603      	mov	r3, r0
 80051dc:	e000      	b.n	80051e0 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3730      	adds	r7, #48	; 0x30
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40023800 	.word	0x40023800
 80051ec:	431bde83 	.word	0x431bde83
 80051f0:	20011a1c 	.word	0x20011a1c
 80051f4:	40002000 	.word	0x40002000

080051f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051f8:	b480      	push	{r7}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051fc:	e7fe      	b.n	80051fc <NMI_Handler+0x4>

080051fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051fe:	b480      	push	{r7}
 8005200:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005202:	e7fe      	b.n	8005202 <HardFault_Handler+0x4>

08005204 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005208:	e7fe      	b.n	8005208 <MemManage_Handler+0x4>

0800520a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800520a:	b480      	push	{r7}
 800520c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800520e:	e7fe      	b.n	800520e <BusFault_Handler+0x4>

08005210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005214:	e7fe      	b.n	8005214 <UsageFault_Handler+0x4>

08005216 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8005228:	4802      	ldr	r0, [pc, #8]	; (8005234 <DMA1_Stream4_IRQHandler+0x10>)
 800522a:	f002 fa6d 	bl	8007708 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20011010 	.word	0x20011010

08005238 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800523c:	4803      	ldr	r0, [pc, #12]	; (800524c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800523e:	f007 ff2c 	bl	800d09a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005242:	4803      	ldr	r0, [pc, #12]	; (8005250 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005244:	f007 ff29 	bl	800d09a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005248:	bf00      	nop
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20010200 	.word	0x20010200
 8005250:	2000abf0 	.word	0x2000abf0

08005254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005258:	4802      	ldr	r0, [pc, #8]	; (8005264 <TIM2_IRQHandler+0x10>)
 800525a:	f007 ff1e 	bl	800d09a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800525e:	bf00      	nop
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200105d8 	.word	0x200105d8

08005268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800526c:	4802      	ldr	r0, [pc, #8]	; (8005278 <TIM3_IRQHandler+0x10>)
 800526e:	f007 ff14 	bl	800d09a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	2000e754 	.word	0x2000e754

0800527c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005280:	4802      	ldr	r0, [pc, #8]	; (800528c <SPI2_IRQHandler+0x10>)
 8005282:	f007 fb99 	bl	800c9b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005286:	bf00      	nop
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	2000aad8 	.word	0x2000aad8

08005290 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005296:	f007 ff00 	bl	800d09a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20011a1c 	.word	0x20011a1c

080052a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <OTG_FS_IRQHandler+0x10>)
 80052aa:	f004 fce4 	bl	8009c76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20014ff0 	.word	0x20014ff0

080052b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
	return 1;
 80052bc:	2301      	movs	r3, #1
}
 80052be:	4618      	mov	r0, r3
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <_kill>:

int _kill(int pid, int sig)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80052d2:	f013 fb2f 	bl	8018934 <__errno>
 80052d6:	4603      	mov	r3, r0
 80052d8:	2216      	movs	r2, #22
 80052da:	601a      	str	r2, [r3, #0]
	return -1;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <_exit>:

void _exit (int status)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80052f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7ff ffe7 	bl	80052c8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80052fa:	e7fe      	b.n	80052fa <_exit+0x12>

080052fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005308:	2300      	movs	r3, #0
 800530a:	617b      	str	r3, [r7, #20]
 800530c:	e00a      	b.n	8005324 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800530e:	f3af 8000 	nop.w
 8005312:	4601      	mov	r1, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	60ba      	str	r2, [r7, #8]
 800531a:	b2ca      	uxtb	r2, r1
 800531c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	3301      	adds	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	429a      	cmp	r2, r3
 800532a:	dbf0      	blt.n	800530e <_read+0x12>
	}

return len;
 800532c:	687b      	ldr	r3, [r7, #4]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3718      	adds	r7, #24
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b086      	sub	sp, #24
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
 8005346:	e009      	b.n	800535c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	60ba      	str	r2, [r7, #8]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3301      	adds	r3, #1
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	429a      	cmp	r2, r3
 8005362:	dbf1      	blt.n	8005348 <_write+0x12>
	}
	return len;
 8005364:	687b      	ldr	r3, [r7, #4]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_close>:

int _close(int file)
{
 800536e:	b480      	push	{r7}
 8005370:	b083      	sub	sp, #12
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
	return -1;
 8005376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005386:	b480      	push	{r7}
 8005388:	b083      	sub	sp, #12
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005396:	605a      	str	r2, [r3, #4]
	return 0;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <_isatty>:

int _isatty(int file)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
	return 1;
 80053ae:	2301      	movs	r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
	return 0;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
	...

080053d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053e0:	4a14      	ldr	r2, [pc, #80]	; (8005434 <_sbrk+0x5c>)
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <_sbrk+0x60>)
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053ec:	4b13      	ldr	r3, [pc, #76]	; (800543c <_sbrk+0x64>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053f4:	4b11      	ldr	r3, [pc, #68]	; (800543c <_sbrk+0x64>)
 80053f6:	4a12      	ldr	r2, [pc, #72]	; (8005440 <_sbrk+0x68>)
 80053f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053fa:	4b10      	ldr	r3, [pc, #64]	; (800543c <_sbrk+0x64>)
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4413      	add	r3, r2
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	429a      	cmp	r2, r3
 8005406:	d207      	bcs.n	8005418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005408:	f013 fa94 	bl	8018934 <__errno>
 800540c:	4603      	mov	r3, r0
 800540e:	220c      	movs	r2, #12
 8005410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005412:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005416:	e009      	b.n	800542c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005418:	4b08      	ldr	r3, [pc, #32]	; (800543c <_sbrk+0x64>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800541e:	4b07      	ldr	r3, [pc, #28]	; (800543c <_sbrk+0x64>)
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4413      	add	r3, r2
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <_sbrk+0x64>)
 8005428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800542a:	68fb      	ldr	r3, [r7, #12]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	20020000 	.word	0x20020000
 8005438:	00000800 	.word	0x00000800
 800543c:	20002848 	.word	0x20002848
 8005440:	20015408 	.word	0x20015408

08005444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005448:	4b06      	ldr	r3, [pc, #24]	; (8005464 <SystemInit+0x20>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	4a05      	ldr	r2, [pc, #20]	; (8005464 <SystemInit+0x20>)
 8005450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005458:	bf00      	nop
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
 8005462:	bf00      	nop
 8005464:	e000ed00 	.word	0xe000ed00

08005468 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8005470:	2305      	movs	r3, #5
 8005472:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f001 f9ef 	bl	800685c <null_ptr_check>
 800547e:	4603      	mov	r3, r0
 8005480:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8005482:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d133      	bne.n	80054f2 <bme280_init+0x8a>
		while (try_count) {
 800548a:	e028      	b.n	80054de <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 800548c:	f107 010d 	add.w	r1, r7, #13
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	20d0      	movs	r0, #208	; 0xd0
 8005496:	f000 f832 	bl	80054fe <bme280_get_regs>
 800549a:	4603      	mov	r3, r0
 800549c:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 800549e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d114      	bne.n	80054d0 <bme280_init+0x68>
 80054a6:	7b7b      	ldrb	r3, [r7, #13]
 80054a8:	2b60      	cmp	r3, #96	; 0x60
 80054aa:	d111      	bne.n	80054d0 <bme280_init+0x68>
				dev->chip_id = chip_id;
 80054ac:	7b7a      	ldrb	r2, [r7, #13]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f976 	bl	80057a4 <bme280_soft_reset>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 80054bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d110      	bne.n	80054e6 <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f001 f83f 	bl	8006548 <get_calib_data>
 80054ca:	4603      	mov	r3, r0
 80054cc:	73fb      	strb	r3, [r7, #15]
				}
				break;
 80054ce:	e00a      	b.n	80054e6 <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2001      	movs	r0, #1
 80054d6:	4798      	blx	r3
			--try_count;
 80054d8:	7bbb      	ldrb	r3, [r7, #14]
 80054da:	3b01      	subs	r3, #1
 80054dc:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 80054de:	7bbb      	ldrb	r3, [r7, #14]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1d3      	bne.n	800548c <bme280_init+0x24>
 80054e4:	e000      	b.n	80054e8 <bme280_init+0x80>
				break;
 80054e6:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 80054e8:	7bbb      	ldrb	r3, [r7, #14]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d101      	bne.n	80054f2 <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 80054ee:	23fe      	movs	r3, #254	; 0xfe
 80054f0:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80054f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 80054fe:	b590      	push	{r4, r7, lr}
 8005500:	b087      	sub	sp, #28
 8005502:	af00      	add	r7, sp, #0
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607b      	str	r3, [r7, #4]
 8005508:	4603      	mov	r3, r0
 800550a:	73fb      	strb	r3, [r7, #15]
 800550c:	4613      	mov	r3, r2
 800550e:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f001 f9a3 	bl	800685c <null_ptr_check>
 8005516:	4603      	mov	r3, r0
 8005518:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800551a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d117      	bne.n	8005552 <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	789b      	ldrb	r3, [r3, #2]
 8005526:	2b01      	cmp	r3, #1
 8005528:	d003      	beq.n	8005532 <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005530:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685c      	ldr	r4, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	7858      	ldrb	r0, [r3, #1]
 800553a:	89bb      	ldrh	r3, [r7, #12]
 800553c:	7bf9      	ldrb	r1, [r7, #15]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	47a0      	blx	r4
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 8005546:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 800554e:	23fc      	movs	r3, #252	; 0xfc
 8005550:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	371c      	adds	r7, #28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd90      	pop	{r4, r7, pc}

0800555e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 800555e:	b590      	push	{r4, r7, lr}
 8005560:	b08d      	sub	sp, #52	; 0x34
 8005562:	af00      	add	r7, sp, #0
 8005564:	60f8      	str	r0, [r7, #12]
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	603b      	str	r3, [r7, #0]
 800556a:	4613      	mov	r3, r2
 800556c:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	2b0a      	cmp	r3, #10
 8005572:	d901      	bls.n	8005578 <bme280_set_regs+0x1a>
		len = 10;
 8005574:	230a      	movs	r3, #10
 8005576:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005578:	6838      	ldr	r0, [r7, #0]
 800557a:	f001 f96f 	bl	800685c <null_ptr_check>
 800557e:	4603      	mov	r3, r0
 8005580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 8005584:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005588:	2b00      	cmp	r3, #0
 800558a:	d154      	bne.n	8005636 <bme280_set_regs+0xd8>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d051      	beq.n	8005636 <bme280_set_regs+0xd8>
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d04e      	beq.n	8005636 <bme280_set_regs+0xd8>
		if (len != 0) {
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d047      	beq.n	800562e <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	789b      	ldrb	r3, [r3, #2]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d01a      	beq.n	80055e2 <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055ac:	2300      	movs	r3, #0
 80055ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b2:	e011      	b.n	80055d8 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80055b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4413      	add	r3, r2
 80055bc:	781a      	ldrb	r2, [r3, #0]
 80055be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	440b      	add	r3, r1
 80055c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80055ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055d2:	3301      	adds	r3, #1
 80055d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d3e8      	bcc.n	80055b4 <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d90b      	bls.n	8005600 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80055e8:	79fb      	ldrb	r3, [r7, #7]
 80055ea:	f107 0114 	add.w	r1, r7, #20
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	f000 ffee 	bl	80065d2 <interleave_reg_addr>
				temp_len = len * 2;
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	005b      	lsls	r3, r3, #1
 80055fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80055fe:	e001      	b.n	8005604 <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8005600:	79fb      	ldrb	r3, [r7, #7]
 8005602:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	689c      	ldr	r4, [r3, #8]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	7858      	ldrb	r0, [r3, #1]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	7819      	ldrb	r1, [r3, #0]
 8005610:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005612:	f107 0214 	add.w	r2, r7, #20
 8005616:	47a0      	blx	r4
 8005618:	4603      	mov	r3, r0
 800561a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 800561e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 8005626:	23fc      	movs	r3, #252	; 0xfc
 8005628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800562c:	e007      	b.n	800563e <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 800562e:	23fd      	movs	r3, #253	; 0xfd
 8005630:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8005634:	e003      	b.n	800563e <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8005636:	23ff      	movs	r3, #255	; 0xff
 8005638:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800563c:	e000      	b.n	8005640 <bme280_set_regs+0xe2>
		if (len != 0) {
 800563e:	bf00      	nop
	}


	return rslt;
 8005640:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005644:	4618      	mov	r0, r3
 8005646:	3734      	adds	r7, #52	; 0x34
 8005648:	46bd      	mov	sp, r7
 800564a:	bd90      	pop	{r4, r7, pc}

0800564c <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	6039      	str	r1, [r7, #0]
 8005656:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005658:	6838      	ldr	r0, [r7, #0]
 800565a:	f001 f8ff 	bl	800685c <null_ptr_check>
 800565e:	4603      	mov	r3, r0
 8005660:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8005662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d13f      	bne.n	80056ea <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 800566a:	f107 030e 	add.w	r3, r7, #14
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 f874 	bl	800575e <bme280_get_sensor_mode>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 800567a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d107      	bne.n	8005692 <bme280_set_sensor_settings+0x46>
 8005682:	7bbb      	ldrb	r3, [r7, #14]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8005688:	6838      	ldr	r0, [r7, #0]
 800568a:	f000 fb4e 	bl	8005d2a <put_device_to_sleep>
 800568e:	4603      	mov	r3, r0
 8005690:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 8005692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d127      	bne.n	80056ea <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	4619      	mov	r1, r3
 800569e:	2007      	movs	r0, #7
 80056a0:	f001 f8c0 	bl	8006824 <are_settings_changed>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056b0:	79fb      	ldrb	r3, [r7, #7]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f98a 	bl	80059ce <set_osr_settings>
 80056ba:	4603      	mov	r3, r0
 80056bc:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80056be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d111      	bne.n	80056ea <bme280_set_sensor_settings+0x9e>
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	4619      	mov	r1, r3
 80056ca:	2018      	movs	r0, #24
 80056cc:	f001 f8aa 	bl	8006824 <are_settings_changed>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056dc:	79fb      	ldrb	r3, [r7, #7]
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa11 	bl	8005b08 <set_filter_standby_settings>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80056ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80056f6:	b580      	push	{r7, lr}
 80056f8:	b084      	sub	sp, #16
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	4603      	mov	r3, r0
 80056fe:	6039      	str	r1, [r7, #0]
 8005700:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005702:	6838      	ldr	r0, [r7, #0]
 8005704:	f001 f8aa 	bl	800685c <null_ptr_check>
 8005708:	4603      	mov	r3, r0
 800570a:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800570c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11e      	bne.n	8005752 <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8005714:	f107 030e 	add.w	r3, r7, #14
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 f81f 	bl	800575e <bme280_get_sensor_mode>
 8005720:	4603      	mov	r3, r0
 8005722:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8005724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <bme280_set_sensor_mode+0x46>
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d004      	beq.n	800573c <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 8005732:	6838      	ldr	r0, [r7, #0]
 8005734:	f000 faf9 	bl	8005d2a <put_device_to_sleep>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 800573c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	6839      	ldr	r1, [r7, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fabb 	bl	8005cc4 <write_power_mode>
 800574e:	4603      	mov	r3, r0
 8005750:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005752:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b084      	sub	sp, #16
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005768:	6838      	ldr	r0, [r7, #0]
 800576a:	f001 f877 	bl	800685c <null_ptr_check>
 800576e:	4603      	mov	r3, r0
 8005770:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8005772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10e      	bne.n	8005798 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2201      	movs	r2, #1
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	20f4      	movs	r0, #244	; 0xf4
 8005782:	f7ff febc 	bl	80054fe <bme280_get_regs>
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	f003 0303 	and.w	r3, r3, #3
 8005792:	b2da      	uxtb	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8005798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80057ac:	23e0      	movs	r3, #224	; 0xe0
 80057ae:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80057b0:	23b6      	movs	r3, #182	; 0xb6
 80057b2:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 f851 	bl	800685c <null_ptr_check>
 80057ba:	4603      	mov	r3, r0
 80057bc:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80057be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d10d      	bne.n	80057e2 <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80057c6:	f107 010d 	add.w	r1, r7, #13
 80057ca:	f107 000e 	add.w	r0, r7, #14
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f7ff fec4 	bl	800555e <bme280_set_regs>
 80057d6:	4603      	mov	r3, r0
 80057d8:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	2002      	movs	r0, #2
 80057e0:	4798      	blx	r3
	}

	return rslt;
 80057e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b08a      	sub	sp, #40	; 0x28
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	4603      	mov	r3, r0
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	2300      	movs	r3, #0
 8005802:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 8005804:	f107 0310 	add.w	r3, r7, #16
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	605a      	str	r2, [r3, #4]
 800580e:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 f823 	bl	800685c <null_ptr_check>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 800581c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005820:	2b00      	cmp	r3, #0
 8005822:	d124      	bne.n	800586e <bme280_get_sensor_data+0x80>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d021      	beq.n	800586e <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 800582a:	f107 011c 	add.w	r1, r7, #28
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2208      	movs	r2, #8
 8005832:	20f7      	movs	r0, #247	; 0xf7
 8005834:	f7ff fe63 	bl	80054fe <bme280_get_regs>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 800583e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 8005846:	f107 0210 	add.w	r2, r7, #16
 800584a:	f107 031c 	add.w	r3, r7, #28
 800584e:	4611      	mov	r1, r2
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f815 	bl	8005880 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3310      	adds	r3, #16
 800585a:	f107 0110 	add.w	r1, r7, #16
 800585e:	7bf8      	ldrb	r0, [r7, #15]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	f000 f853 	bl	800590c <bme280_compensate_data>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800586c:	e002      	b.n	8005874 <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800586e:	23ff      	movs	r3, #255	; 0xff
 8005870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 8005874:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005878:	4618      	mov	r0, r3
 800587a:	3728      	adds	r7, #40	; 0x28
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	031b      	lsls	r3, r3, #12
 8005890:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3301      	adds	r3, #1
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3302      	adds	r3, #2
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	091b      	lsrs	r3, r3, #4
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	431a      	orrs	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	431a      	orrs	r2, r3
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3303      	adds	r3, #3
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	031b      	lsls	r3, r3, #12
 80058be:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3304      	adds	r3, #4
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3305      	adds	r3, #5
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	091b      	lsrs	r3, r3, #4
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	431a      	orrs	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	431a      	orrs	r2, r3
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3306      	adds	r3, #6
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3307      	adds	r3, #7
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	431a      	orrs	r2, r3
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60b9      	str	r1, [r7, #8]
 8005914:	607a      	str	r2, [r7, #4]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4603      	mov	r3, r0
 800591a:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d04b      	beq.n	80059be <bme280_compensate_data+0xb2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d048      	beq.n	80059be <bme280_compensate_data+0xb2>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d045      	beq.n	80059be <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8005940:	6879      	ldr	r1, [r7, #4]
 8005942:	f04f 0200 	mov.w	r2, #0
 8005946:	f04f 0300 	mov.w	r3, #0
 800594a:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	f04f 0200 	mov.w	r2, #0
 8005954:	f04f 0300 	mov.w	r3, #0
 8005958:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 800595c:	7bfb      	ldrb	r3, [r7, #15]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	68b8      	ldr	r0, [r7, #8]
 800596a:	f000 fa2b 	bl	8005dc4 <compensate_temperature>
 800596e:	eeb0 7a40 	vmov.f32	s14, s0
 8005972:	eef0 7a60 	vmov.f32	s15, s1
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 800597c:	7bfb      	ldrb	r3, [r7, #15]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8005986:	6839      	ldr	r1, [r7, #0]
 8005988:	68b8      	ldr	r0, [r7, #8]
 800598a:	f000 faed 	bl	8005f68 <compensate_pressure>
 800598e:	eeb0 7a40 	vmov.f32	s14, s0
 8005992:	eef0 7a60 	vmov.f32	s15, s1
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 800599c:	7bfb      	ldrb	r3, [r7, #15]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00d      	beq.n	80059c2 <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	68b8      	ldr	r0, [r7, #8]
 80059aa:	f000 fcad 	bl	8006308 <compensate_humidity>
 80059ae:	eeb0 7a40 	vmov.f32	s14, s0
 80059b2:	eef0 7a60 	vmov.f32	s15, s1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 80059bc:	e001      	b.n	80059c2 <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80059be:	23ff      	movs	r3, #255	; 0xff
 80059c0:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80059c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	4603      	mov	r3, r0
 80059d6:	60b9      	str	r1, [r7, #8]
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80059dc:	2301      	movs	r3, #1
 80059de:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d005      	beq.n	80059f6 <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68b8      	ldr	r0, [r7, #8]
 80059ee:	f000 f815 	bl	8005a1c <set_osr_humidity_settings>
 80059f2:	4603      	mov	r3, r0
 80059f4:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80059f6:	7bfb      	ldrb	r3, [r7, #15]
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d007      	beq.n	8005a10 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	68b9      	ldr	r1, [r7, #8]
 8005a06:	4618      	mov	r0, r3
 8005a08:	f000 f842 	bl	8005a90 <set_osr_press_temp_settings>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8005a10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 8005a26:	23f2      	movs	r3, #242	; 0xf2
 8005a28:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	789b      	ldrb	r3, [r3, #2]
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 8005a36:	f107 010e 	add.w	r1, r7, #14
 8005a3a:	f107 000c 	add.w	r0, r7, #12
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f7ff fd8c 	bl	800555e <bme280_set_regs>
 8005a46:	4603      	mov	r3, r0
 8005a48:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8005a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d118      	bne.n	8005a84 <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 8005a52:	23f4      	movs	r3, #244	; 0xf4
 8005a54:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 8005a56:	7b38      	ldrb	r0, [r7, #12]
 8005a58:	f107 010d 	add.w	r1, r7, #13
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f7ff fd4d 	bl	80054fe <bme280_get_regs>
 8005a64:	4603      	mov	r3, r0
 8005a66:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8005a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8005a70:	f107 010d 	add.w	r1, r7, #13
 8005a74:	f107 000c 	add.w	r0, r7, #12
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f7ff fd6f 	bl	800555e <bme280_set_regs>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8005a9e:	23f4      	movs	r3, #244	; 0xf4
 8005aa0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8005aa2:	7db8      	ldrb	r0, [r7, #22]
 8005aa4:	f107 0115 	add.w	r1, r7, #21
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f7ff fd27 	bl	80054fe <bme280_get_regs>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8005ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11f      	bne.n	8005afc <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d005      	beq.n	8005ad2 <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 8005ac6:	f107 0315 	add.w	r3, r7, #21
 8005aca:	68b9      	ldr	r1, [r7, #8]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f88e 	bl	8005bee <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	f003 0302 	and.w	r3, r3, #2
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d005      	beq.n	8005ae8 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 8005adc:	f107 0315 	add.w	r3, r7, #21
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 f8a0 	bl	8005c28 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005ae8:	f107 0115 	add.w	r1, r7, #21
 8005aec:	f107 0016 	add.w	r0, r7, #22
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f7ff fd33 	bl	800555e <bme280_set_regs>
 8005af8:	4603      	mov	r3, r0
 8005afa:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 8005b16:	23f5      	movs	r3, #245	; 0xf5
 8005b18:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8005b1a:	7db8      	ldrb	r0, [r7, #22]
 8005b1c:	f107 0115 	add.w	r1, r7, #21
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f7ff fceb 	bl	80054fe <bme280_get_regs>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8005b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d11f      	bne.n	8005b74 <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8005b3e:	f107 0315 	add.w	r3, r7, #21
 8005b42:	68b9      	ldr	r1, [r7, #8]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f81b 	bl	8005b80 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 8005b54:	f107 0315 	add.w	r3, r7, #21
 8005b58:	68b9      	ldr	r1, [r7, #8]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 f82d 	bl	8005bba <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8005b60:	f107 0115 	add.w	r1, r7, #21
 8005b64:	f107 0016 	add.w	r0, r7, #22
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f7ff fcf7 	bl	800555e <bme280_set_regs>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005b74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b25b      	sxtb	r3, r3
 8005b90:	f023 031c 	bic.w	r3, r3, #28
 8005b94:	b25a      	sxtb	r2, r3
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	78db      	ldrb	r3, [r3, #3]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	b25b      	sxtb	r3, r3
 8005b9e:	f003 031c 	and.w	r3, r3, #28
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	701a      	strb	r2, [r3, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	b25b      	sxtb	r3, r3
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	b25a      	sxtb	r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	791b      	ldrb	r3, [r3, #4]
 8005bd4:	015b      	lsls	r3, r3, #5
 8005bd6:	b25b      	sxtb	r3, r3
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	b25b      	sxtb	r3, r3
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	701a      	strb	r2, [r3, #0]
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b25b      	sxtb	r3, r3
 8005bfe:	f023 031c 	bic.w	r3, r3, #28
 8005c02:	b25a      	sxtb	r2, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f003 031c 	and.w	r3, r3, #28
 8005c10:	b25b      	sxtb	r3, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b25b      	sxtb	r3, r3
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	701a      	strb	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	b25b      	sxtb	r3, r3
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	b25a      	sxtb	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	015b      	lsls	r3, r3, #5
 8005c44:	b25b      	sxtb	r3, r3
 8005c46:	4313      	orrs	r3, r2
 8005c48:	b25b      	sxtb	r3, r3
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	701a      	strb	r2, [r3, #0]
}
 8005c50:	bf00      	nop
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3302      	adds	r3, #2
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	109b      	asrs	r3, r3, #2
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	f003 0307 	and.w	r3, r3, #7
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3302      	adds	r3, #2
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	095b      	lsrs	r3, r3, #5
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	3303      	adds	r3, #3
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	109b      	asrs	r3, r3, #2
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	b2da      	uxtb	r2, r3
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3303      	adds	r3, #3
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	095b      	lsrs	r3, r3, #5
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	711a      	strb	r2, [r3, #4]
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b084      	sub	sp, #16
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	6039      	str	r1, [r7, #0]
 8005cce:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8005cd0:	23f4      	movs	r3, #244	; 0xf4
 8005cd2:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8005cd4:	7bb8      	ldrb	r0, [r7, #14]
 8005cd6:	f107 010d 	add.w	r1, r7, #13
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f7ff fc0e 	bl	80054fe <bme280_get_regs>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 8005ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d117      	bne.n	8005d1e <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8005cee:	7b7b      	ldrb	r3, [r7, #13]
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	f023 0303 	bic.w	r3, r3, #3
 8005cf6:	b25a      	sxtb	r2, r3
 8005cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	b25b      	sxtb	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b25b      	sxtb	r3, r3
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8005d0a:	f107 010d 	add.w	r1, r7, #13
 8005d0e:	f107 000e 	add.w	r0, r7, #14
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f7ff fc22 	bl	800555e <bme280_set_regs>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8005d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b086      	sub	sp, #24
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 8005d32:	f107 0110 	add.w	r1, r7, #16
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2204      	movs	r2, #4
 8005d3a:	20f2      	movs	r0, #242	; 0xf2
 8005d3c:	f7ff fbdf 	bl	80054fe <bme280_get_regs>
 8005d40:	4603      	mov	r3, r0
 8005d42:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 8005d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d118      	bne.n	8005d7e <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8005d4c:	f107 0208 	add.w	r2, r7, #8
 8005d50:	f107 0310 	add.w	r3, r7, #16
 8005d54:	4611      	mov	r1, r2
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff ff80 	bl	8005c5c <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fd21 	bl	80057a4 <bme280_soft_reset>
 8005d62:	4603      	mov	r3, r0
 8005d64:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 8005d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d107      	bne.n	8005d7e <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8005d6e:	f107 0308 	add.w	r3, r7, #8
 8005d72:	6879      	ldr	r1, [r7, #4]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f808 	bl	8005d8a <reload_device_settings>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8005d7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005d94:	683a      	ldr	r2, [r7, #0]
 8005d96:	6879      	ldr	r1, [r7, #4]
 8005d98:	201f      	movs	r0, #31
 8005d9a:	f7ff fe18 	bl	80059ce <set_osr_settings>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 8005da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	201f      	movs	r0, #31
 8005db0:	f7ff feaa 	bl	8005b08 <set_filter_standby_settings>
 8005db4:	4603      	mov	r3, r0
 8005db6:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8005db8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b08c      	sub	sp, #48	; 0x30
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 8005dce:	f04f 0200 	mov.w	r2, #0
 8005dd2:	4b5f      	ldr	r3, [pc, #380]	; (8005f50 <compensate_temperature+0x18c>)
 8005dd4:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	4b5d      	ldr	r3, [pc, #372]	; (8005f54 <compensate_temperature+0x190>)
 8005dde:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fb8c 	bl	8000504 <__aeabi_ui2d>
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <compensate_temperature+0x194>)
 8005df2:	f7fa fd2b 	bl	800084c <__aeabi_ddiv>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4614      	mov	r4, r2
 8005dfc:	461d      	mov	r5, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fa fb7e 	bl	8000504 <__aeabi_ui2d>
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	4b53      	ldr	r3, [pc, #332]	; (8005f5c <compensate_temperature+0x198>)
 8005e0e:	f7fa fd1d 	bl	800084c <__aeabi_ddiv>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	4620      	mov	r0, r4
 8005e18:	4629      	mov	r1, r5
 8005e1a:	f7fa fa35 	bl	8000288 <__aeabi_dsub>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fb79 	bl	8000524 <__aeabi_i2d>
 8005e32:	4602      	mov	r2, r0
 8005e34:	460b      	mov	r3, r1
 8005e36:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005e3a:	f7fa fbdd 	bl	80005f8 <__aeabi_dmul>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fa fb5a 	bl	8000504 <__aeabi_ui2d>
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005e58:	f7fa fcf8 	bl	800084c <__aeabi_ddiv>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4614      	mov	r4, r2
 8005e62:	461d      	mov	r5, r3
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	881b      	ldrh	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7fa fb4b 	bl	8000504 <__aeabi_ui2d>
 8005e6e:	f04f 0200 	mov.w	r2, #0
 8005e72:	4b3b      	ldr	r3, [pc, #236]	; (8005f60 <compensate_temperature+0x19c>)
 8005e74:	f7fa fcea 	bl	800084c <__aeabi_ddiv>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fa02 	bl	8000288 <__aeabi_dsub>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8005e8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e94:	f7fa fbb0 	bl	80005f8 <__aeabi_dmul>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4614      	mov	r4, r2
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f7fa fb3c 	bl	8000524 <__aeabi_i2d>
 8005eac:	4602      	mov	r2, r0
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f7fa fba0 	bl	80005f8 <__aeabi_dmul>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8005ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ec8:	f7fa f9e0 	bl	800028c <__adddf3>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	f7fa fe40 	bl	8000b58 <__aeabi_d2iz>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 8005ede:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ee2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005ee6:	f7fa f9d1 	bl	800028c <__adddf3>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f04f 0200 	mov.w	r2, #0
 8005ef6:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <compensate_temperature+0x1a0>)
 8005ef8:	f7fa fca8 	bl	800084c <__aeabi_ddiv>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8005f04:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f08:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f0c:	f7fa fde6 	bl	8000adc <__aeabi_dcmplt>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <compensate_temperature+0x15c>
		temperature = temperature_min;
 8005f16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f1a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005f1e:	e00c      	b.n	8005f3a <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8005f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005f28:	f7fa fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <compensate_temperature+0x176>
		temperature = temperature_max;
 8005f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f36:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8005f3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f3e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005f42:	eeb0 0a47 	vmov.f32	s0, s14
 8005f46:	eef0 0a67 	vmov.f32	s1, s15
 8005f4a:	3730      	adds	r7, #48	; 0x30
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f50:	c0440000 	.word	0xc0440000
 8005f54:	40554000 	.word	0x40554000
 8005f58:	40d00000 	.word	0x40d00000
 8005f5c:	40900000 	.word	0x40900000
 8005f60:	40c00000 	.word	0x40c00000
 8005f64:	40b40000 	.word	0x40b40000

08005f68 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8005f68:	b5b0      	push	{r4, r5, r7, lr}
 8005f6a:	b08e      	sub	sp, #56	; 0x38
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8005f72:	a3d9      	add	r3, pc, #868	; (adr r3, 80062d8 <compensate_pressure+0x370>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8005f7c:	a3d8      	add	r3, pc, #864	; (adr r3, 80062e0 <compensate_pressure+0x378>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7fa faca 	bl	8000524 <__aeabi_i2d>
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005f98:	f7fa fc58 	bl	800084c <__aeabi_ddiv>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	4bc1      	ldr	r3, [pc, #772]	; (80062b0 <compensate_pressure+0x348>)
 8005faa:	f7fa f96d 	bl	8000288 <__aeabi_dsub>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8005fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8005fbe:	f7fa fb1b 	bl	80005f8 <__aeabi_dmul>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	460b      	mov	r3, r1
 8005fc6:	4614      	mov	r4, r2
 8005fc8:	461d      	mov	r5, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fa faa7 	bl	8000524 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4bb1      	ldr	r3, [pc, #708]	; (80062b4 <compensate_pressure+0x34c>)
 8005ff0:	f7fa fc2c 	bl	800084c <__aeabi_ddiv>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa fa8e 	bl	8000524 <__aeabi_i2d>
 8006008:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800600c:	f7fa faf4 	bl	80005f8 <__aeabi_dmul>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4610      	mov	r0, r2
 8006016:	4619      	mov	r1, r3
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	f7fa f936 	bl	800028c <__adddf3>
 8006020:	4602      	mov	r2, r0
 8006022:	460b      	mov	r3, r1
 8006024:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006028:	f7fa f930 	bl	800028c <__adddf3>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8006034:	f04f 0200 	mov.w	r2, #0
 8006038:	4b9f      	ldr	r3, [pc, #636]	; (80062b8 <compensate_pressure+0x350>)
 800603a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800603e:	f7fa fc05 	bl	800084c <__aeabi_ddiv>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4614      	mov	r4, r2
 8006048:	461d      	mov	r5, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006050:	4618      	mov	r0, r3
 8006052:	f7fa fa67 	bl	8000524 <__aeabi_i2d>
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	4b98      	ldr	r3, [pc, #608]	; (80062bc <compensate_pressure+0x354>)
 800605c:	f7fa facc 	bl	80005f8 <__aeabi_dmul>
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	4620      	mov	r0, r4
 8006066:	4629      	mov	r1, r5
 8006068:	f7fa f910 	bl	800028c <__adddf3>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800607a:	4618      	mov	r0, r3
 800607c:	f7fa fa52 	bl	8000524 <__aeabi_i2d>
 8006080:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006084:	f7fa fab8 	bl	80005f8 <__aeabi_dmul>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006094:	f7fa fab0 	bl	80005f8 <__aeabi_dmul>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	4b86      	ldr	r3, [pc, #536]	; (80062c0 <compensate_pressure+0x358>)
 80060a6:	f7fa fbd1 	bl	800084c <__aeabi_ddiv>
 80060aa:	4602      	mov	r2, r0
 80060ac:	460b      	mov	r3, r1
 80060ae:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7fa fa33 	bl	8000524 <__aeabi_i2d>
 80060be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c2:	f7fa fa99 	bl	80005f8 <__aeabi_dmul>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4610      	mov	r0, r2
 80060cc:	4619      	mov	r1, r3
 80060ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060d2:	f7fa f8db 	bl	800028c <__adddf3>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4610      	mov	r0, r2
 80060dc:	4619      	mov	r1, r3
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	4b77      	ldr	r3, [pc, #476]	; (80062c0 <compensate_pressure+0x358>)
 80060e4:	f7fa fbb2 	bl	800084c <__aeabi_ddiv>
 80060e8:	4602      	mov	r2, r0
 80060ea:	460b      	mov	r3, r1
 80060ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	4b6f      	ldr	r3, [pc, #444]	; (80062b4 <compensate_pressure+0x34c>)
 80060f6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80060fa:	f7fa fba7 	bl	800084c <__aeabi_ddiv>
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	4610      	mov	r0, r2
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0200 	mov.w	r2, #0
 800610a:	4b6e      	ldr	r3, [pc, #440]	; (80062c4 <compensate_pressure+0x35c>)
 800610c:	f7fa f8be 	bl	800028c <__adddf3>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4614      	mov	r4, r2
 8006116:	461d      	mov	r5, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	88db      	ldrh	r3, [r3, #6]
 800611c:	4618      	mov	r0, r3
 800611e:	f7fa f9f1 	bl	8000504 <__aeabi_ui2d>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4620      	mov	r0, r4
 8006128:	4629      	mov	r1, r5
 800612a:	f7fa fa65 	bl	80005f8 <__aeabi_dmul>
 800612e:	4602      	mov	r2, r0
 8006130:	460b      	mov	r3, r1
 8006132:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006142:	f7fa fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 80cd 	bne.w	80062e8 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fa f9d6 	bl	8000504 <__aeabi_ui2d>
 8006158:	4602      	mov	r2, r0
 800615a:	460b      	mov	r3, r1
 800615c:	f04f 0000 	mov.w	r0, #0
 8006160:	4959      	ldr	r1, [pc, #356]	; (80062c8 <compensate_pressure+0x360>)
 8006162:	f7fa f891 	bl	8000288 <__aeabi_dsub>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 800616e:	f04f 0200 	mov.w	r2, #0
 8006172:	4b56      	ldr	r3, [pc, #344]	; (80062cc <compensate_pressure+0x364>)
 8006174:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006178:	f7fa fb68 	bl	800084c <__aeabi_ddiv>
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006184:	f7fa f880 	bl	8000288 <__aeabi_dsub>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4610      	mov	r0, r2
 800618e:	4619      	mov	r1, r3
 8006190:	a345      	add	r3, pc, #276	; (adr r3, 80062a8 <compensate_pressure+0x340>)
 8006192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006196:	f7fa fa2f 	bl	80005f8 <__aeabi_dmul>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4610      	mov	r0, r2
 80061a0:	4619      	mov	r1, r3
 80061a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061a6:	f7fa fb51 	bl	800084c <__aeabi_ddiv>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fa f9b3 	bl	8000524 <__aeabi_i2d>
 80061be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061c2:	f7fa fa19 	bl	80005f8 <__aeabi_dmul>
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	4610      	mov	r0, r2
 80061cc:	4619      	mov	r1, r3
 80061ce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80061d2:	f7fa fa11 	bl	80005f8 <__aeabi_dmul>
 80061d6:	4602      	mov	r2, r0
 80061d8:	460b      	mov	r3, r1
 80061da:	4610      	mov	r0, r2
 80061dc:	4619      	mov	r1, r3
 80061de:	f04f 0200 	mov.w	r2, #0
 80061e2:	4b3b      	ldr	r3, [pc, #236]	; (80062d0 <compensate_pressure+0x368>)
 80061e4:	f7fa fb32 	bl	800084c <__aeabi_ddiv>
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa f994 	bl	8000524 <__aeabi_i2d>
 80061fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006200:	f7fa f9fa 	bl	80005f8 <__aeabi_dmul>
 8006204:	4602      	mov	r2, r0
 8006206:	460b      	mov	r3, r1
 8006208:	4610      	mov	r0, r2
 800620a:	4619      	mov	r1, r3
 800620c:	f04f 0200 	mov.w	r2, #0
 8006210:	4b28      	ldr	r3, [pc, #160]	; (80062b4 <compensate_pressure+0x34c>)
 8006212:	f7fa fb1b 	bl	800084c <__aeabi_ddiv>
 8006216:	4602      	mov	r2, r0
 8006218:	460b      	mov	r3, r1
 800621a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 800621e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006222:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006226:	f7fa f831 	bl	800028c <__adddf3>
 800622a:	4602      	mov	r2, r0
 800622c:	460b      	mov	r3, r1
 800622e:	4614      	mov	r4, r2
 8006230:	461d      	mov	r5, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8006238:	4618      	mov	r0, r3
 800623a:	f7fa f973 	bl	8000524 <__aeabi_i2d>
 800623e:	4602      	mov	r2, r0
 8006240:	460b      	mov	r3, r1
 8006242:	4620      	mov	r0, r4
 8006244:	4629      	mov	r1, r5
 8006246:	f7fa f821 	bl	800028c <__adddf3>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	f04f 0200 	mov.w	r2, #0
 8006256:	4b1f      	ldr	r3, [pc, #124]	; (80062d4 <compensate_pressure+0x36c>)
 8006258:	f7fa faf8 	bl	800084c <__aeabi_ddiv>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8006270:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006274:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006278:	f7fa fc30 	bl	8000adc <__aeabi_dcmplt>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d004      	beq.n	800628c <compensate_pressure+0x324>
			pressure = pressure_min;
 8006282:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006286:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 800628a:	e031      	b.n	80062f0 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 800628c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006290:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8006294:	f7fa fc40 	bl	8000b18 <__aeabi_dcmpgt>
 8006298:	4603      	mov	r3, r0
 800629a:	2b00      	cmp	r3, #0
 800629c:	d028      	beq.n	80062f0 <compensate_pressure+0x388>
			pressure = pressure_max;
 800629e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062a2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80062a6:	e023      	b.n	80062f0 <compensate_pressure+0x388>
 80062a8:	00000000 	.word	0x00000000
 80062ac:	40b86a00 	.word	0x40b86a00
 80062b0:	40ef4000 	.word	0x40ef4000
 80062b4:	40e00000 	.word	0x40e00000
 80062b8:	40100000 	.word	0x40100000
 80062bc:	40f00000 	.word	0x40f00000
 80062c0:	41200000 	.word	0x41200000
 80062c4:	3ff00000 	.word	0x3ff00000
 80062c8:	41300000 	.word	0x41300000
 80062cc:	40b00000 	.word	0x40b00000
 80062d0:	41e00000 	.word	0x41e00000
 80062d4:	40300000 	.word	0x40300000
 80062d8:	00000000 	.word	0x00000000
 80062dc:	40dd4c00 	.word	0x40dd4c00
 80062e0:	00000000 	.word	0x00000000
 80062e4:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 80062e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062ec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 80062f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80062f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80062f8:	eeb0 0a47 	vmov.f32	s0, s14
 80062fc:	eef0 0a67 	vmov.f32	s1, s15
 8006300:	3738      	adds	r7, #56	; 0x38
 8006302:	46bd      	mov	sp, r7
 8006304:	bdb0      	pop	{r4, r5, r7, pc}
 8006306:	bf00      	nop

08006308 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8006308:	b5b0      	push	{r4, r5, r7, lr}
 800630a:	b094      	sub	sp, #80	; 0x50
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8006312:	f04f 0200 	mov.w	r2, #0
 8006316:	f04f 0300 	mov.w	r3, #0
 800631a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	4b81      	ldr	r3, [pc, #516]	; (8006528 <compensate_humidity+0x220>)
 8006324:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632c:	4618      	mov	r0, r3
 800632e:	f7fa f8f9 	bl	8000524 <__aeabi_i2d>
 8006332:	f04f 0200 	mov.w	r2, #0
 8006336:	4b7d      	ldr	r3, [pc, #500]	; (800652c <compensate_humidity+0x224>)
 8006338:	f7f9 ffa6 	bl	8000288 <__aeabi_dsub>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa f8ea 	bl	8000524 <__aeabi_i2d>
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	4b76      	ldr	r3, [pc, #472]	; (8006530 <compensate_humidity+0x228>)
 8006356:	f7fa f94f 	bl	80005f8 <__aeabi_dmul>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4614      	mov	r4, r2
 8006360:	461d      	mov	r5, r3
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006368:	4618      	mov	r0, r3
 800636a:	f7fa f8db 	bl	8000524 <__aeabi_i2d>
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	4b70      	ldr	r3, [pc, #448]	; (8006534 <compensate_humidity+0x22c>)
 8006374:	f7fa fa6a 	bl	800084c <__aeabi_ddiv>
 8006378:	4602      	mov	r2, r0
 800637a:	460b      	mov	r3, r1
 800637c:	4610      	mov	r0, r2
 800637e:	4619      	mov	r1, r3
 8006380:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006384:	f7fa f938 	bl	80005f8 <__aeabi_dmul>
 8006388:	4602      	mov	r2, r0
 800638a:	460b      	mov	r3, r1
 800638c:	4620      	mov	r0, r4
 800638e:	4629      	mov	r1, r5
 8006390:	f7f9 ff7c 	bl	800028c <__adddf3>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f7fa f8af 	bl	8000504 <__aeabi_ui2d>
 80063a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80063aa:	f7f9 ff6d 	bl	8000288 <__aeabi_dsub>
 80063ae:	4602      	mov	r2, r0
 80063b0:	460b      	mov	r3, r1
 80063b2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fa f8b1 	bl	8000524 <__aeabi_i2d>
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	4b5c      	ldr	r3, [pc, #368]	; (8006538 <compensate_humidity+0x230>)
 80063c8:	f7fa fa40 	bl	800084c <__aeabi_ddiv>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	7f1b      	ldrb	r3, [r3, #28]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fa f893 	bl	8000504 <__aeabi_ui2d>
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	4b56      	ldr	r3, [pc, #344]	; (800653c <compensate_humidity+0x234>)
 80063e4:	f7fa fa32 	bl	800084c <__aeabi_ddiv>
 80063e8:	4602      	mov	r2, r0
 80063ea:	460b      	mov	r3, r1
 80063ec:	4610      	mov	r0, r2
 80063ee:	4619      	mov	r1, r3
 80063f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063f4:	f7fa f900 	bl	80005f8 <__aeabi_dmul>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	4610      	mov	r0, r2
 80063fe:	4619      	mov	r1, r3
 8006400:	f04f 0200 	mov.w	r2, #0
 8006404:	4b4e      	ldr	r3, [pc, #312]	; (8006540 <compensate_humidity+0x238>)
 8006406:	f7f9 ff41 	bl	800028c <__adddf3>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8006418:	4618      	mov	r0, r3
 800641a:	f7fa f883 	bl	8000524 <__aeabi_i2d>
 800641e:	f04f 0200 	mov.w	r2, #0
 8006422:	4b46      	ldr	r3, [pc, #280]	; (800653c <compensate_humidity+0x234>)
 8006424:	f7fa fa12 	bl	800084c <__aeabi_ddiv>
 8006428:	4602      	mov	r2, r0
 800642a:	460b      	mov	r3, r1
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006434:	f7fa f8e0 	bl	80005f8 <__aeabi_dmul>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4610      	mov	r0, r2
 800643e:	4619      	mov	r1, r3
 8006440:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006444:	f7fa f8d8 	bl	80005f8 <__aeabi_dmul>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	f04f 0200 	mov.w	r2, #0
 8006454:	4b3a      	ldr	r3, [pc, #232]	; (8006540 <compensate_humidity+0x238>)
 8006456:	f7f9 ff19 	bl	800028c <__adddf3>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8006462:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006466:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800646a:	f7fa f8c5 	bl	80005f8 <__aeabi_dmul>
 800646e:	4602      	mov	r2, r0
 8006470:	460b      	mov	r3, r1
 8006472:	4614      	mov	r4, r2
 8006474:	461d      	mov	r5, r3
 8006476:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800647a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800647e:	f7fa f8bb 	bl	80005f8 <__aeabi_dmul>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4620      	mov	r0, r4
 8006488:	4629      	mov	r1, r5
 800648a:	f7fa f8b5 	bl	80005f8 <__aeabi_dmul>
 800648e:	4602      	mov	r2, r0
 8006490:	460b      	mov	r3, r1
 8006492:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	7e1b      	ldrb	r3, [r3, #24]
 800649a:	4618      	mov	r0, r3
 800649c:	f7fa f832 	bl	8000504 <__aeabi_ui2d>
 80064a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	4610      	mov	r0, r2
 80064ae:	4619      	mov	r1, r3
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	4b23      	ldr	r3, [pc, #140]	; (8006544 <compensate_humidity+0x23c>)
 80064b6:	f7fa f9c9 	bl	800084c <__aeabi_ddiv>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	491f      	ldr	r1, [pc, #124]	; (8006540 <compensate_humidity+0x238>)
 80064c4:	f7f9 fee0 	bl	8000288 <__aeabi_dsub>
 80064c8:	4602      	mov	r2, r0
 80064ca:	460b      	mov	r3, r1
 80064cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064d0:	f7fa f892 	bl	80005f8 <__aeabi_dmul>
 80064d4:	4602      	mov	r2, r0
 80064d6:	460b      	mov	r3, r1
 80064d8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 80064dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064e0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80064e4:	f7fa fb18 	bl	8000b18 <__aeabi_dcmpgt>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 80064ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064f2:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80064f6:	e00c      	b.n	8006512 <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 80064f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006500:	f7fa faec 	bl	8000adc <__aeabi_dcmplt>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <compensate_humidity+0x20a>
		humidity = humidity_min;
 800650a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800650e:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8006512:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006516:	ec43 2b17 	vmov	d7, r2, r3
}
 800651a:	eeb0 0a47 	vmov.f32	s0, s14
 800651e:	eef0 0a67 	vmov.f32	s1, s15
 8006522:	3750      	adds	r7, #80	; 0x50
 8006524:	46bd      	mov	sp, r7
 8006526:	bdb0      	pop	{r4, r5, r7, pc}
 8006528:	40590000 	.word	0x40590000
 800652c:	40f2c000 	.word	0x40f2c000
 8006530:	40500000 	.word	0x40500000
 8006534:	40d00000 	.word	0x40d00000
 8006538:	40f00000 	.word	0x40f00000
 800653c:	41900000 	.word	0x41900000
 8006540:	3ff00000 	.word	0x3ff00000
 8006544:	41200000 	.word	0x41200000

08006548 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b08a      	sub	sp, #40	; 0x28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8006550:	2388      	movs	r3, #136	; 0x88
 8006552:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	f107 0310 	add.w	r3, r7, #16
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	605a      	str	r2, [r3, #4]
 8006564:	609a      	str	r2, [r3, #8]
 8006566:	60da      	str	r2, [r3, #12]
 8006568:	611a      	str	r2, [r3, #16]
 800656a:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 800656c:	f107 010c 	add.w	r1, r7, #12
 8006570:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	221a      	movs	r2, #26
 8006578:	f7fe ffc1 	bl	80054fe <bme280_get_regs>
 800657c:	4603      	mov	r3, r0
 800657e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 8006582:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006586:	2b00      	cmp	r3, #0
 8006588:	d11d      	bne.n	80065c6 <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 800658a:	f107 030c 	add.w	r3, r7, #12
 800658e:	6879      	ldr	r1, [r7, #4]
 8006590:	4618      	mov	r0, r3
 8006592:	f000 f84a 	bl	800662a <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8006596:	23e1      	movs	r3, #225	; 0xe1
 8006598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 800659c:	f107 010c 	add.w	r1, r7, #12
 80065a0:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2207      	movs	r2, #7
 80065a8:	f7fe ffa9 	bl	80054fe <bme280_get_regs>
 80065ac:	4603      	mov	r3, r0
 80065ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80065b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d105      	bne.n	80065c6 <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80065ba:	f107 030c 	add.w	r3, r7, #12
 80065be:	6879      	ldr	r1, [r7, #4]
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 f8e1 	bl	8006788 <parse_humidity_calib_data>
		}
	}

	return rslt;
 80065c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3728      	adds	r7, #40	; 0x28
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b087      	sub	sp, #28
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80065e0:	2301      	movs	r3, #1
 80065e2:	75fb      	strb	r3, [r7, #23]
 80065e4:	e016      	b.n	8006614 <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80065e6:	7dfb      	ldrb	r3, [r7, #23]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	441a      	add	r2, r3
 80065ec:	7dfb      	ldrb	r3, [r7, #23]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	3b01      	subs	r3, #1
 80065f2:	68b9      	ldr	r1, [r7, #8]
 80065f4:	440b      	add	r3, r1
 80065f6:	7812      	ldrb	r2, [r2, #0]
 80065f8:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	441a      	add	r2, r3
 8006600:	7dfb      	ldrb	r3, [r7, #23]
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4619      	mov	r1, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	440b      	add	r3, r1
 800660a:	7812      	ldrb	r2, [r2, #0]
 800660c:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 800660e:	7dfb      	ldrb	r3, [r7, #23]
 8006610:	3301      	adds	r3, #1
 8006612:	75fb      	strb	r3, [r7, #23]
 8006614:	7dfa      	ldrb	r2, [r7, #23]
 8006616:	78fb      	ldrb	r3, [r7, #3]
 8006618:	429a      	cmp	r2, r3
 800661a:	d3e4      	bcc.n	80065e6 <interleave_reg_addr+0x14>
	}
}
 800661c:	bf00      	nop
 800661e:	bf00      	nop
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 800662a:	b480      	push	{r7}
 800662c:	b085      	sub	sp, #20
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
 8006632:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	3310      	adds	r3, #16
 8006638:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3301      	adds	r3, #1
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	021b      	lsls	r3, r3, #8
 8006642:	b21a      	sxth	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b21b      	sxth	r3, r3
 800664a:	4313      	orrs	r3, r2
 800664c:	b21b      	sxth	r3, r3
 800664e:	b29a      	uxth	r2, r3
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3303      	adds	r3, #3
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	021b      	lsls	r3, r3, #8
 800665c:	b21a      	sxth	r2, r3
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	3302      	adds	r3, #2
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b21b      	sxth	r3, r3
 8006666:	4313      	orrs	r3, r2
 8006668:	b21a      	sxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	3305      	adds	r3, #5
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	021b      	lsls	r3, r3, #8
 8006676:	b21a      	sxth	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	3304      	adds	r3, #4
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	b21b      	sxth	r3, r3
 8006680:	4313      	orrs	r3, r2
 8006682:	b21a      	sxth	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3307      	adds	r3, #7
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	b21a      	sxth	r2, r3
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3306      	adds	r3, #6
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	b21b      	sxth	r3, r3
 800669a:	4313      	orrs	r3, r2
 800669c:	b21b      	sxth	r3, r3
 800669e:	b29a      	uxth	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	3309      	adds	r3, #9
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	b21a      	sxth	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3308      	adds	r3, #8
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	b21b      	sxth	r3, r3
 80066b6:	4313      	orrs	r3, r2
 80066b8:	b21a      	sxth	r2, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	330b      	adds	r3, #11
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	021b      	lsls	r3, r3, #8
 80066c6:	b21a      	sxth	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	330a      	adds	r3, #10
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	b21b      	sxth	r3, r3
 80066d0:	4313      	orrs	r3, r2
 80066d2:	b21a      	sxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	330d      	adds	r3, #13
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	b21a      	sxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	330c      	adds	r3, #12
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	b21b      	sxth	r3, r3
 80066ea:	4313      	orrs	r3, r2
 80066ec:	b21a      	sxth	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	330f      	adds	r3, #15
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	b21a      	sxth	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	330e      	adds	r3, #14
 8006700:	781b      	ldrb	r3, [r3, #0]
 8006702:	b21b      	sxth	r3, r3
 8006704:	4313      	orrs	r3, r2
 8006706:	b21a      	sxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3311      	adds	r3, #17
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	021b      	lsls	r3, r3, #8
 8006714:	b21a      	sxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	3310      	adds	r3, #16
 800671a:	781b      	ldrb	r3, [r3, #0]
 800671c:	b21b      	sxth	r3, r3
 800671e:	4313      	orrs	r3, r2
 8006720:	b21a      	sxth	r2, r3
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	3313      	adds	r3, #19
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	b21a      	sxth	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3312      	adds	r3, #18
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b21b      	sxth	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b21a      	sxth	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	3315      	adds	r3, #21
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	b21a      	sxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	3314      	adds	r3, #20
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	b21b      	sxth	r3, r3
 8006752:	4313      	orrs	r3, r2
 8006754:	b21a      	sxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	3317      	adds	r3, #23
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	021b      	lsls	r3, r3, #8
 8006762:	b21a      	sxth	r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3316      	adds	r3, #22
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	b21b      	sxth	r3, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	b21a      	sxth	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7e5a      	ldrb	r2, [r3, #25]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	761a      	strb	r2, [r3, #24]

}
 800677c:	bf00      	nop
 800677e:	3714      	adds	r7, #20
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8006788:	b480      	push	{r7}
 800678a:	b087      	sub	sp, #28
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	3310      	adds	r3, #16
 8006796:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	3301      	adds	r3, #1
 800679c:	781b      	ldrb	r3, [r3, #0]
 800679e:	021b      	lsls	r3, r3, #8
 80067a0:	b21a      	sxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	b21b      	sxth	r3, r3
 80067a8:	4313      	orrs	r3, r2
 80067aa:	b21a      	sxth	r2, r3
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	789a      	ldrb	r2, [r3, #2]
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	3303      	adds	r3, #3
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	b25b      	sxtb	r3, r3
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	3304      	adds	r3, #4
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	b21b      	sxth	r3, r3
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80067d6:	8a7a      	ldrh	r2, [r7, #18]
 80067d8:	8a3b      	ldrh	r3, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	b21a      	sxth	r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3305      	adds	r3, #5
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	b25b      	sxtb	r3, r3
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	011b      	lsls	r3, r3, #4
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3304      	adds	r3, #4
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	091b      	lsrs	r3, r3, #4
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80067fe:	89fa      	ldrh	r2, [r7, #14]
 8006800:	89bb      	ldrh	r3, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	b21a      	sxth	r2, r3
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3306      	adds	r3, #6
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	b25a      	sxtb	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8006818:	bf00      	nop
 800681a:	371c      	adds	r7, #28
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	460a      	mov	r2, r1
 800682e:	71fb      	strb	r3, [r7, #7]
 8006830:	4613      	mov	r3, r2
 8006832:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 8006834:	2300      	movs	r3, #0
 8006836:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8006838:	79fa      	ldrb	r2, [r7, #7]
 800683a:	79bb      	ldrb	r3, [r7, #6]
 800683c:	4013      	ands	r3, r2
 800683e:	b2db      	uxtb	r3, r3
 8006840:	2b00      	cmp	r3, #0
 8006842:	d002      	beq.n	800684a <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 8006844:	2301      	movs	r3, #1
 8006846:	73fb      	strb	r3, [r7, #15]
 8006848:	e001      	b.n	800684e <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 800684a:	2300      	movs	r3, #0
 800684c:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 800684e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <null_ptr_check+0x26>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d007      	beq.n	8006882 <null_ptr_check+0x26>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <null_ptr_check+0x26>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	68db      	ldr	r3, [r3, #12]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d102      	bne.n	8006888 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 8006882:	23ff      	movs	r3, #255	; 0xff
 8006884:	73fb      	strb	r3, [r7, #15]
 8006886:	e001      	b.n	800688c <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8006888:	2300      	movs	r3, #0
 800688a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800688c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <MPU6050_Init>:
        .Q_angle = 0.001f,
        .Q_bias = 0.003f,
        .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af04      	add	r7, sp, #16
 80068a2:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80068a4:	2364      	movs	r3, #100	; 0x64
 80068a6:	9302      	str	r3, [sp, #8]
 80068a8:	2301      	movs	r3, #1
 80068aa:	9301      	str	r3, [sp, #4]
 80068ac:	f107 030f 	add.w	r3, r7, #15
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	2301      	movs	r3, #1
 80068b4:	2275      	movs	r2, #117	; 0x75
 80068b6:	21d0      	movs	r1, #208	; 0xd0
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f002 f9bb 	bl	8008c34 <HAL_I2C_Mem_Read>

    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	2b68      	cmp	r3, #104	; 0x68
 80068c2:	d13d      	bne.n	8006940 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80068c8:	2364      	movs	r3, #100	; 0x64
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	2301      	movs	r3, #1
 80068ce:	9301      	str	r3, [sp, #4]
 80068d0:	f107 030e 	add.w	r3, r7, #14
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	2301      	movs	r3, #1
 80068d8:	226b      	movs	r2, #107	; 0x6b
 80068da:	21d0      	movs	r1, #208	; 0xd0
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f002 f8af 	bl	8008a40 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 80068e2:	2307      	movs	r3, #7
 80068e4:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 80068e6:	2364      	movs	r3, #100	; 0x64
 80068e8:	9302      	str	r3, [sp, #8]
 80068ea:	2301      	movs	r3, #1
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	f107 030e 	add.w	r3, r7, #14
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	2301      	movs	r3, #1
 80068f6:	2219      	movs	r2, #25
 80068f8:	21d0      	movs	r1, #208	; 0xd0
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f002 f8a0 	bl	8008a40 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8006900:	2300      	movs	r3, #0
 8006902:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006904:	2364      	movs	r3, #100	; 0x64
 8006906:	9302      	str	r3, [sp, #8]
 8006908:	2301      	movs	r3, #1
 800690a:	9301      	str	r3, [sp, #4]
 800690c:	f107 030e 	add.w	r3, r7, #14
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2301      	movs	r3, #1
 8006914:	221c      	movs	r2, #28
 8006916:	21d0      	movs	r1, #208	; 0xd0
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f002 f891 	bl	8008a40 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 800691e:	2300      	movs	r3, #0
 8006920:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8006922:	2364      	movs	r3, #100	; 0x64
 8006924:	9302      	str	r3, [sp, #8]
 8006926:	2301      	movs	r3, #1
 8006928:	9301      	str	r3, [sp, #4]
 800692a:	f107 030e 	add.w	r3, r7, #14
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2301      	movs	r3, #1
 8006932:	221b      	movs	r2, #27
 8006934:	21d0      	movs	r1, #208	; 0xd0
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f002 f882 	bl	8008a40 <HAL_I2C_Mem_Write>
        return 0;
 800693c:	2300      	movs	r3, #0
 800693e:	e000      	b.n	8006942 <MPU6050_Init+0xa6>
    }
    return 1;
 8006940:	2301      	movs	r3, #1
}
 8006942:	4618      	mov	r0, r3
 8006944:	3710      	adds	r7, #16
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	0000      	movs	r0, r0
 800694c:	0000      	movs	r0, r0
	...

08006950 <MPU6050_Read_All>:

    temp = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8006950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006954:	b094      	sub	sp, #80	; 0x50
 8006956:	af04      	add	r7, sp, #16
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 800695c:	2364      	movs	r3, #100	; 0x64
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	230e      	movs	r3, #14
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	f107 0308 	add.w	r3, r7, #8
 8006968:	9300      	str	r3, [sp, #0]
 800696a:	2301      	movs	r3, #1
 800696c:	223b      	movs	r2, #59	; 0x3b
 800696e:	21d0      	movs	r1, #208	; 0xd0
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f002 f95f 	bl	8008c34 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8006976:	7a3b      	ldrb	r3, [r7, #8]
 8006978:	021b      	lsls	r3, r3, #8
 800697a:	b21a      	sxth	r2, r3
 800697c:	7a7b      	ldrb	r3, [r7, #9]
 800697e:	b21b      	sxth	r3, r3
 8006980:	4313      	orrs	r3, r2
 8006982:	b21a      	sxth	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8006988:	7abb      	ldrb	r3, [r7, #10]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	b21a      	sxth	r2, r3
 800698e:	7afb      	ldrb	r3, [r7, #11]
 8006990:	b21b      	sxth	r3, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	b21a      	sxth	r2, r3
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 800699a:	7b3b      	ldrb	r3, [r7, #12]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	b21a      	sxth	r2, r3
 80069a0:	7b7b      	ldrb	r3, [r7, #13]
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	4313      	orrs	r3, r2
 80069a6:	b21a      	sxth	r2, r3
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	809a      	strh	r2, [r3, #4]
    temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	b21a      	sxth	r2, r3
 80069b2:	7bfb      	ldrb	r3, [r7, #15]
 80069b4:	b21b      	sxth	r3, r3
 80069b6:	4313      	orrs	r3, r2
 80069b8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80069ba:	7c3b      	ldrb	r3, [r7, #16]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	b21a      	sxth	r2, r3
 80069c0:	7c7b      	ldrb	r3, [r7, #17]
 80069c2:	b21b      	sxth	r3, r3
 80069c4:	4313      	orrs	r3, r2
 80069c6:	b21a      	sxth	r2, r3
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80069cc:	7cbb      	ldrb	r3, [r7, #18]
 80069ce:	021b      	lsls	r3, r3, #8
 80069d0:	b21a      	sxth	r2, r3
 80069d2:	7cfb      	ldrb	r3, [r7, #19]
 80069d4:	b21b      	sxth	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b21a      	sxth	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80069de:	7d3b      	ldrb	r3, [r7, #20]
 80069e0:	021b      	lsls	r3, r3, #8
 80069e2:	b21a      	sxth	r2, r3
 80069e4:	7d7b      	ldrb	r3, [r7, #21]
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	4313      	orrs	r3, r2
 80069ea:	b21a      	sxth	r2, r3
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7f9 fd94 	bl	8000524 <__aeabi_i2d>
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	4bbd      	ldr	r3, [pc, #756]	; (8006cf8 <MPU6050_Read_All+0x3a8>)
 8006a02:	f7f9 ff23 	bl	800084c <__aeabi_ddiv>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	6839      	ldr	r1, [r7, #0]
 8006a0c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f7f9 fd84 	bl	8000524 <__aeabi_i2d>
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	4bb5      	ldr	r3, [pc, #724]	; (8006cf8 <MPU6050_Read_All+0x3a8>)
 8006a22:	f7f9 ff13 	bl	800084c <__aeabi_ddiv>
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7f9 fd74 	bl	8000524 <__aeabi_i2d>
 8006a3c:	a3a8      	add	r3, pc, #672	; (adr r3, 8006ce0 <MPU6050_Read_All+0x390>)
 8006a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a42:	f7f9 ff03 	bl	800084c <__aeabi_ddiv>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	6839      	ldr	r1, [r7, #0]
 8006a4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8006a50:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a5c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 8006cfc <MPU6050_Read_All+0x3ac>
 8006a60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a64:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8006d00 <MPU6050_Read_All+0x3b0>
 8006a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7f9 fd53 	bl	8000524 <__aeabi_i2d>
 8006a7e:	a39a      	add	r3, pc, #616	; (adr r3, 8006ce8 <MPU6050_Read_All+0x398>)
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f7f9 fee2 	bl	800084c <__aeabi_ddiv>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	460b      	mov	r3, r1
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7f9 fd43 	bl	8000524 <__aeabi_i2d>
 8006a9e:	a392      	add	r3, pc, #584	; (adr r3, 8006ce8 <MPU6050_Read_All+0x398>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7f9 fed2 	bl	800084c <__aeabi_ddiv>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7f9 fd33 	bl	8000524 <__aeabi_i2d>
 8006abe:	a38a      	add	r3, pc, #552	; (adr r3, 8006ce8 <MPU6050_Read_All+0x398>)
 8006ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ac4:	f7f9 fec2 	bl	800084c <__aeabi_ddiv>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double) (HAL_GetTick() - timer) / 1000;
 8006ad2:	f000 fadf 	bl	8007094 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b8a      	ldr	r3, [pc, #552]	; (8006d04 <MPU6050_Read_All+0x3b4>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7f9 fd10 	bl	8000504 <__aeabi_ui2d>
 8006ae4:	f04f 0200 	mov.w	r2, #0
 8006ae8:	4b87      	ldr	r3, [pc, #540]	; (8006d08 <MPU6050_Read_All+0x3b8>)
 8006aea:	f7f9 feaf 	bl	800084c <__aeabi_ddiv>
 8006aee:	4602      	mov	r2, r0
 8006af0:	460b      	mov	r3, r1
 8006af2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8006af6:	f000 facd 	bl	8007094 <HAL_GetTick>
 8006afa:	4603      	mov	r3, r0
 8006afc:	4a81      	ldr	r2, [pc, #516]	; (8006d04 <MPU6050_Read_All+0x3b4>)
 8006afe:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
            DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b06:	461a      	mov	r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b0e:	fb03 f202 	mul.w	r2, r3, r2
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b20:	fb03 f301 	mul.w	r3, r3, r1
 8006b24:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7f9 fcfc 	bl	8000524 <__aeabi_i2d>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	ec43 2b10 	vmov	d0, r2, r3
 8006b34:	f015 f858 	bl	801bbe8 <sqrt>
 8006b38:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0) {
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006b48:	f7f9 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d11f      	bne.n	8006b92 <MPU6050_Read_All+0x242>
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f7f9 fce3 	bl	8000524 <__aeabi_i2d>
 8006b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b62:	f7f9 fe73 	bl	800084c <__aeabi_ddiv>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	ec43 2b17 	vmov	d7, r2, r3
 8006b6e:	eeb0 0a47 	vmov.f32	s0, s14
 8006b72:	eef0 0a67 	vmov.f32	s1, s15
 8006b76:	f014 fe8b 	bl	801b890 <atan>
 8006b7a:	ec51 0b10 	vmov	r0, r1, d0
 8006b7e:	a35c      	add	r3, pc, #368	; (adr r3, 8006cf0 <MPU6050_Read_All+0x3a0>)
 8006b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b84:	f7f9 fd38 	bl	80005f8 <__aeabi_dmul>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 8006b90:	e005      	b.n	8006b9e <MPU6050_Read_All+0x24e>
    } else {
        roll = 0.0;
 8006b92:	f04f 0200 	mov.w	r2, #0
 8006b96:	f04f 0300 	mov.w	r3, #0
 8006b9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ba4:	425b      	negs	r3, r3
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7f9 fcbc 	bl	8000524 <__aeabi_i2d>
 8006bac:	4682      	mov	sl, r0
 8006bae:	468b      	mov	fp, r1
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7f9 fcb4 	bl	8000524 <__aeabi_i2d>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	ec43 2b11 	vmov	d1, r2, r3
 8006bc4:	ec4b ab10 	vmov	d0, sl, fp
 8006bc8:	f015 f80b 	bl	801bbe2 <atan2>
 8006bcc:	ec51 0b10 	vmov	r0, r1, d0
 8006bd0:	a347      	add	r3, pc, #284	; (adr r3, 8006cf0 <MPU6050_Read_All+0x3a0>)
 8006bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd6:	f7f9 fd0f 	bl	80005f8 <__aeabi_dmul>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	460b      	mov	r3, r1
 8006bde:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90)) {
 8006be2:	f04f 0200 	mov.w	r2, #0
 8006be6:	4b49      	ldr	r3, [pc, #292]	; (8006d0c <MPU6050_Read_All+0x3bc>)
 8006be8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006bec:	f7f9 ff76 	bl	8000adc <__aeabi_dcmplt>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <MPU6050_Read_All+0x2bc>
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006bfc:	f04f 0200 	mov.w	r2, #0
 8006c00:	4b43      	ldr	r3, [pc, #268]	; (8006d10 <MPU6050_Read_All+0x3c0>)
 8006c02:	f7f9 ff89 	bl	8000b18 <__aeabi_dcmpgt>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d114      	bne.n	8006c36 <MPU6050_Read_All+0x2e6>
 8006c0c:	f04f 0200 	mov.w	r2, #0
 8006c10:	4b3f      	ldr	r3, [pc, #252]	; (8006d10 <MPU6050_Read_All+0x3c0>)
 8006c12:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006c16:	f7f9 ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d015      	beq.n	8006c4c <MPU6050_Read_All+0x2fc>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8006c26:	f04f 0200 	mov.w	r2, #0
 8006c2a:	4b38      	ldr	r3, [pc, #224]	; (8006d0c <MPU6050_Read_All+0x3bc>)
 8006c2c:	f7f9 ff56 	bl	8000adc <__aeabi_dcmplt>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00a      	beq.n	8006c4c <MPU6050_Read_All+0x2fc>
        KalmanY.angle = pitch;
 8006c36:	4937      	ldr	r1, [pc, #220]	; (8006d14 <MPU6050_Read_All+0x3c4>)
 8006c38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c46:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8006c4a:	e014      	b.n	8006c76 <MPU6050_Read_All+0x326>
    } else {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006c52:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8006c56:	eeb0 1a47 	vmov.f32	s2, s14
 8006c5a:	eef0 1a67 	vmov.f32	s3, s15
 8006c5e:	ed97 0b06 	vldr	d0, [r7, #24]
 8006c62:	482c      	ldr	r0, [pc, #176]	; (8006d14 <MPU6050_Read_All+0x3c4>)
 8006c64:	f000 f85a 	bl	8006d1c <Kalman_getAngle>
 8006c68:	eeb0 7a40 	vmov.f32	s14, s0
 8006c6c:	eef0 7a60 	vmov.f32	s15, s1
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8006c7c:	4690      	mov	r8, r2
 8006c7e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	4b22      	ldr	r3, [pc, #136]	; (8006d10 <MPU6050_Read_All+0x3c0>)
 8006c88:	4640      	mov	r0, r8
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	f7f9 ff44 	bl	8000b18 <__aeabi_dcmpgt>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d008      	beq.n	8006ca8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006c9c:	4614      	mov	r4, r2
 8006c9e:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gy, dt);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8006cae:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8006cb2:	eeb0 1a47 	vmov.f32	s2, s14
 8006cb6:	eef0 1a67 	vmov.f32	s3, s15
 8006cba:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 8006cbe:	4816      	ldr	r0, [pc, #88]	; (8006d18 <MPU6050_Read_All+0x3c8>)
 8006cc0:	f000 f82c 	bl	8006d1c <Kalman_getAngle>
 8006cc4:	eeb0 7a40 	vmov.f32	s14, s0
 8006cc8:	eef0 7a60 	vmov.f32	s15, s1
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48

}
 8006cd2:	bf00      	nop
 8006cd4:	3740      	adds	r7, #64	; 0x40
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cdc:	f3af 8000 	nop.w
 8006ce0:	00000000 	.word	0x00000000
 8006ce4:	40cc2900 	.word	0x40cc2900
 8006ce8:	00000000 	.word	0x00000000
 8006cec:	40606000 	.word	0x40606000
 8006cf0:	1a63c1f8 	.word	0x1a63c1f8
 8006cf4:	404ca5dc 	.word	0x404ca5dc
 8006cf8:	40d00000 	.word	0x40d00000
 8006cfc:	43aa0000 	.word	0x43aa0000
 8006d00:	42121eb8 	.word	0x42121eb8
 8006d04:	20011a64 	.word	0x20011a64
 8006d08:	408f4000 	.word	0x408f4000
 8006d0c:	c0568000 	.word	0xc0568000
 8006d10:	40568000 	.word	0x40568000
 8006d14:	20000080 	.word	0x20000080
 8006d18:	20000038 	.word	0x20000038

08006d1c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt) {
 8006d1c:	b5b0      	push	{r4, r5, r7, lr}
 8006d1e:	b096      	sub	sp, #88	; 0x58
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	61f8      	str	r0, [r7, #28]
 8006d24:	ed87 0b04 	vstr	d0, [r7, #16]
 8006d28:	ed87 1b02 	vstr	d1, [r7, #8]
 8006d2c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d3a:	f7f9 faa5 	bl	8000288 <__aeabi_dsub>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d54:	f7f9 fc50 	bl	80005f8 <__aeabi_dmul>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	4629      	mov	r1, r5
 8006d60:	f7f9 fa94 	bl	800028c <__adddf3>
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	69f9      	ldr	r1, [r7, #28]
 8006d6a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006d7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d7e:	f7f9 fc3b 	bl	80005f8 <__aeabi_dmul>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4610      	mov	r0, r2
 8006d88:	4619      	mov	r1, r3
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006d90:	f7f9 fa7a 	bl	8000288 <__aeabi_dsub>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4610      	mov	r0, r2
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8006da2:	f7f9 fa71 	bl	8000288 <__aeabi_dsub>
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	4610      	mov	r0, r2
 8006dac:	4619      	mov	r1, r3
 8006dae:	69fb      	ldr	r3, [r7, #28]
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fa6a 	bl	800028c <__adddf3>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4610      	mov	r0, r2
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc4:	f7f9 fc18 	bl	80005f8 <__aeabi_dmul>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	4629      	mov	r1, r5
 8006dd0:	f7f9 fa5c 	bl	800028c <__adddf3>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	69f9      	ldr	r1, [r7, #28]
 8006dda:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006de4:	69fb      	ldr	r3, [r7, #28]
 8006de6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dee:	f7f9 fc03 	bl	80005f8 <__aeabi_dmul>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	4620      	mov	r0, r4
 8006df8:	4629      	mov	r1, r5
 8006dfa:	f7f9 fa45 	bl	8000288 <__aeabi_dsub>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	460b      	mov	r3, r1
 8006e02:	69f9      	ldr	r1, [r7, #28]
 8006e04:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8006e14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e18:	f7f9 fbee 	bl	80005f8 <__aeabi_dmul>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4620      	mov	r0, r4
 8006e22:	4629      	mov	r1, r5
 8006e24:	f7f9 fa30 	bl	8000288 <__aeabi_dsub>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	69f9      	ldr	r1, [r7, #28]
 8006e2e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e42:	f7f9 fbd9 	bl	80005f8 <__aeabi_dmul>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	4629      	mov	r1, r5
 8006e4e:	f7f9 fa1d 	bl	800028c <__adddf3>
 8006e52:	4602      	mov	r2, r0
 8006e54:	460b      	mov	r3, r1
 8006e56:	69f9      	ldr	r1, [r7, #28]
 8006e58:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006e68:	f7f9 fa10 	bl	800028c <__adddf3>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8006e7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e7e:	f7f9 fce5 	bl	800084c <__aeabi_ddiv>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8006e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e94:	f7f9 fcda 	bl	800084c <__aeabi_ddiv>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006ea6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006eaa:	f7f9 f9ed 	bl	8000288 <__aeabi_dsub>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006ebc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006ec0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006ec4:	f7f9 fb98 	bl	80005f8 <__aeabi_dmul>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4620      	mov	r0, r4
 8006ece:	4629      	mov	r1, r5
 8006ed0:	f7f9 f9dc 	bl	800028c <__adddf3>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	69f9      	ldr	r1, [r7, #28]
 8006eda:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8006ee4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006ee8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006eec:	f7f9 fb84 	bl	80005f8 <__aeabi_dmul>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 f9c8 	bl	800028c <__adddf3>
 8006efc:	4602      	mov	r2, r0
 8006efe:	460b      	mov	r3, r1
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006f0c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8006f10:	69fb      	ldr	r3, [r7, #28]
 8006f12:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8006f16:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8006f20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006f24:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f28:	f7f9 fb66 	bl	80005f8 <__aeabi_dmul>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4620      	mov	r0, r4
 8006f32:	4629      	mov	r1, r5
 8006f34:	f7f9 f9a8 	bl	8000288 <__aeabi_dsub>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	69f9      	ldr	r1, [r7, #28]
 8006f3e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8006f48:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8006f4c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	4602      	mov	r2, r0
 8006f56:	460b      	mov	r3, r1
 8006f58:	4620      	mov	r0, r4
 8006f5a:	4629      	mov	r1, r5
 8006f5c:	f7f9 f994 	bl	8000288 <__aeabi_dsub>
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	69f9      	ldr	r1, [r7, #28]
 8006f66:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006f70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f78:	f7f9 fb3e 	bl	80005f8 <__aeabi_dmul>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4620      	mov	r0, r4
 8006f82:	4629      	mov	r1, r5
 8006f84:	f7f9 f980 	bl	8000288 <__aeabi_dsub>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	460b      	mov	r3, r1
 8006f8c:	69f9      	ldr	r1, [r7, #28]
 8006f8e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006f98:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006f9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006fa0:	f7f9 fb2a 	bl	80005f8 <__aeabi_dmul>
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	4620      	mov	r0, r4
 8006faa:	4629      	mov	r1, r5
 8006fac:	f7f9 f96c 	bl	8000288 <__aeabi_dsub>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	69f9      	ldr	r1, [r7, #28]
 8006fb6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006fc0:	ec43 2b17 	vmov	d7, r2, r3
};
 8006fc4:	eeb0 0a47 	vmov.f32	s0, s14
 8006fc8:	eef0 0a67 	vmov.f32	s1, s15
 8006fcc:	3758      	adds	r7, #88	; 0x58
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800700c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006fd8:	480d      	ldr	r0, [pc, #52]	; (8007010 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006fda:	490e      	ldr	r1, [pc, #56]	; (8007014 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006fdc:	4a0e      	ldr	r2, [pc, #56]	; (8007018 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006fde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006fe0:	e002      	b.n	8006fe8 <LoopCopyDataInit>

08006fe2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006fe2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fe4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fe6:	3304      	adds	r3, #4

08006fe8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fe8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fec:	d3f9      	bcc.n	8006fe2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006fee:	4a0b      	ldr	r2, [pc, #44]	; (800701c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ff0:	4c0b      	ldr	r4, [pc, #44]	; (8007020 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006ff2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ff4:	e001      	b.n	8006ffa <LoopFillZerobss>

08006ff6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ff6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ff8:	3204      	adds	r2, #4

08006ffa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ffa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ffc:	d3fb      	bcc.n	8006ff6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006ffe:	f7fe fa21 	bl	8005444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007002:	f011 fd93 	bl	8018b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007006:	f7fb fddf 	bl	8002bc8 <main>
  bx  lr    
 800700a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800700c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007014:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8007018:	08020f18 	.word	0x08020f18
  ldr r2, =_sbss
 800701c:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8007020:	20015408 	.word	0x20015408

08007024 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007024:	e7fe      	b.n	8007024 <ADC_IRQHandler>
	...

08007028 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800702c:	4b0e      	ldr	r3, [pc, #56]	; (8007068 <HAL_Init+0x40>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a0d      	ldr	r2, [pc, #52]	; (8007068 <HAL_Init+0x40>)
 8007032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007036:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007038:	4b0b      	ldr	r3, [pc, #44]	; (8007068 <HAL_Init+0x40>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a0a      	ldr	r2, [pc, #40]	; (8007068 <HAL_Init+0x40>)
 800703e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007042:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007044:	4b08      	ldr	r3, [pc, #32]	; (8007068 <HAL_Init+0x40>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a07      	ldr	r2, [pc, #28]	; (8007068 <HAL_Init+0x40>)
 800704a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800704e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007050:	2003      	movs	r0, #3
 8007052:	f000 f920 	bl	8007296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007056:	200f      	movs	r0, #15
 8007058:	f7fe f874 	bl	8005144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800705c:	f7fd fdc0 	bl	8004be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	40023c00 	.word	0x40023c00

0800706c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007070:	4b06      	ldr	r3, [pc, #24]	; (800708c <HAL_IncTick+0x20>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	461a      	mov	r2, r3
 8007076:	4b06      	ldr	r3, [pc, #24]	; (8007090 <HAL_IncTick+0x24>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4413      	add	r3, r2
 800707c:	4a04      	ldr	r2, [pc, #16]	; (8007090 <HAL_IncTick+0x24>)
 800707e:	6013      	str	r3, [r2, #0]
}
 8007080:	bf00      	nop
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	200000cc 	.word	0x200000cc
 8007090:	20011a68 	.word	0x20011a68

08007094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0
  return uwTick;
 8007098:	4b03      	ldr	r3, [pc, #12]	; (80070a8 <HAL_GetTick+0x14>)
 800709a:	681b      	ldr	r3, [r3, #0]
}
 800709c:	4618      	mov	r0, r3
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20011a68 	.word	0x20011a68

080070ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070b4:	f7ff ffee 	bl	8007094 <HAL_GetTick>
 80070b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070c4:	d005      	beq.n	80070d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <HAL_Delay+0x44>)
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80070d2:	bf00      	nop
 80070d4:	f7ff ffde 	bl	8007094 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d8f7      	bhi.n	80070d4 <HAL_Delay+0x28>
  {
  }
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	200000cc 	.word	0x200000cc

080070f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007104:	4b0c      	ldr	r3, [pc, #48]	; (8007138 <__NVIC_SetPriorityGrouping+0x44>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800710a:	68ba      	ldr	r2, [r7, #8]
 800710c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007110:	4013      	ands	r3, r2
 8007112:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800711c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007126:	4a04      	ldr	r2, [pc, #16]	; (8007138 <__NVIC_SetPriorityGrouping+0x44>)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	60d3      	str	r3, [r2, #12]
}
 800712c:	bf00      	nop
 800712e:	3714      	adds	r7, #20
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr
 8007138:	e000ed00 	.word	0xe000ed00

0800713c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007140:	4b04      	ldr	r3, [pc, #16]	; (8007154 <__NVIC_GetPriorityGrouping+0x18>)
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	0a1b      	lsrs	r3, r3, #8
 8007146:	f003 0307 	and.w	r3, r3, #7
}
 800714a:	4618      	mov	r0, r3
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	e000ed00 	.word	0xe000ed00

08007158 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	4603      	mov	r3, r0
 8007160:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007166:	2b00      	cmp	r3, #0
 8007168:	db0b      	blt.n	8007182 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	f003 021f 	and.w	r2, r3, #31
 8007170:	4907      	ldr	r1, [pc, #28]	; (8007190 <__NVIC_EnableIRQ+0x38>)
 8007172:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007176:	095b      	lsrs	r3, r3, #5
 8007178:	2001      	movs	r0, #1
 800717a:	fa00 f202 	lsl.w	r2, r0, r2
 800717e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	e000e100 	.word	0xe000e100

08007194 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	4603      	mov	r3, r0
 800719c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800719e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	db12      	blt.n	80071cc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071a6:	79fb      	ldrb	r3, [r7, #7]
 80071a8:	f003 021f 	and.w	r2, r3, #31
 80071ac:	490a      	ldr	r1, [pc, #40]	; (80071d8 <__NVIC_DisableIRQ+0x44>)
 80071ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	2001      	movs	r0, #1
 80071b6:	fa00 f202 	lsl.w	r2, r0, r2
 80071ba:	3320      	adds	r3, #32
 80071bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80071c0:	f3bf 8f4f 	dsb	sy
}
 80071c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071c6:	f3bf 8f6f 	isb	sy
}
 80071ca:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	e000e100 	.word	0xe000e100

080071dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	4603      	mov	r3, r0
 80071e4:	6039      	str	r1, [r7, #0]
 80071e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	db0a      	blt.n	8007206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	b2da      	uxtb	r2, r3
 80071f4:	490c      	ldr	r1, [pc, #48]	; (8007228 <__NVIC_SetPriority+0x4c>)
 80071f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071fa:	0112      	lsls	r2, r2, #4
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	440b      	add	r3, r1
 8007200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007204:	e00a      	b.n	800721c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	b2da      	uxtb	r2, r3
 800720a:	4908      	ldr	r1, [pc, #32]	; (800722c <__NVIC_SetPriority+0x50>)
 800720c:	79fb      	ldrb	r3, [r7, #7]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	3b04      	subs	r3, #4
 8007214:	0112      	lsls	r2, r2, #4
 8007216:	b2d2      	uxtb	r2, r2
 8007218:	440b      	add	r3, r1
 800721a:	761a      	strb	r2, [r3, #24]
}
 800721c:	bf00      	nop
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr
 8007228:	e000e100 	.word	0xe000e100
 800722c:	e000ed00 	.word	0xe000ed00

08007230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007230:	b480      	push	{r7}
 8007232:	b089      	sub	sp, #36	; 0x24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f003 0307 	and.w	r3, r3, #7
 8007242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f1c3 0307 	rsb	r3, r3, #7
 800724a:	2b04      	cmp	r3, #4
 800724c:	bf28      	it	cs
 800724e:	2304      	movcs	r3, #4
 8007250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007252:	69fb      	ldr	r3, [r7, #28]
 8007254:	3304      	adds	r3, #4
 8007256:	2b06      	cmp	r3, #6
 8007258:	d902      	bls.n	8007260 <NVIC_EncodePriority+0x30>
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	3b03      	subs	r3, #3
 800725e:	e000      	b.n	8007262 <NVIC_EncodePriority+0x32>
 8007260:	2300      	movs	r3, #0
 8007262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	fa02 f303 	lsl.w	r3, r2, r3
 800726e:	43da      	mvns	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	401a      	ands	r2, r3
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	fa01 f303 	lsl.w	r3, r1, r3
 8007282:	43d9      	mvns	r1, r3
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007288:	4313      	orrs	r3, r2
         );
}
 800728a:	4618      	mov	r0, r3
 800728c:	3724      	adds	r7, #36	; 0x24
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b082      	sub	sp, #8
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff ff28 	bl	80070f4 <__NVIC_SetPriorityGrouping>
}
 80072a4:	bf00      	nop
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b086      	sub	sp, #24
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	4603      	mov	r3, r0
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80072be:	f7ff ff3d 	bl	800713c <__NVIC_GetPriorityGrouping>
 80072c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	6978      	ldr	r0, [r7, #20]
 80072ca:	f7ff ffb1 	bl	8007230 <NVIC_EncodePriority>
 80072ce:	4602      	mov	r2, r0
 80072d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7ff ff80 	bl	80071dc <__NVIC_SetPriority>
}
 80072dc:	bf00      	nop
 80072de:	3718      	adds	r7, #24
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80072ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff ff30 	bl	8007158 <__NVIC_EnableIRQ>
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800730a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff ff40 	bl	8007194 <__NVIC_DisableIRQ>
}
 8007314:	bf00      	nop
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007324:	2300      	movs	r3, #0
 8007326:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007328:	f7ff feb4 	bl	8007094 <HAL_GetTick>
 800732c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e099      	b.n	800746c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0201 	bic.w	r2, r2, #1
 8007356:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007358:	e00f      	b.n	800737a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800735a:	f7ff fe9b 	bl	8007094 <HAL_GetTick>
 800735e:	4602      	mov	r2, r0
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	2b05      	cmp	r3, #5
 8007366:	d908      	bls.n	800737a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2220      	movs	r2, #32
 800736c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2203      	movs	r2, #3
 8007372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e078      	b.n	800746c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f003 0301 	and.w	r3, r3, #1
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e8      	bne.n	800735a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007390:	697a      	ldr	r2, [r7, #20]
 8007392:	4b38      	ldr	r3, [pc, #224]	; (8007474 <HAL_DMA_Init+0x158>)
 8007394:	4013      	ands	r3, r2
 8007396:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685a      	ldr	r2, [r3, #4]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80073b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80073be:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	2b04      	cmp	r3, #4
 80073d2:	d107      	bne.n	80073e4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	4313      	orrs	r3, r2
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	4313      	orrs	r3, r2
 80073e2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	697a      	ldr	r2, [r7, #20]
 8007402:	4313      	orrs	r3, r2
 8007404:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b04      	cmp	r3, #4
 800740c:	d117      	bne.n	800743e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007412:	697a      	ldr	r2, [r7, #20]
 8007414:	4313      	orrs	r3, r2
 8007416:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 fb5f 	bl	8007ae4 <DMA_CheckFifoParam>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d008      	beq.n	800743e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2240      	movs	r2, #64	; 0x40
 8007430:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2201      	movs	r2, #1
 8007436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800743a:	2301      	movs	r3, #1
 800743c:	e016      	b.n	800746c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fb16 	bl	8007a78 <DMA_CalcBaseAndBitshift>
 800744c:	4603      	mov	r3, r0
 800744e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007454:	223f      	movs	r2, #63	; 0x3f
 8007456:	409a      	lsls	r2, r3
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	f010803f 	.word	0xf010803f

08007478 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e050      	b.n	800752c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d101      	bne.n	800749a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007496:	2302      	movs	r3, #2
 8007498:	e048      	b.n	800752c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f022 0201 	bic.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2200      	movs	r2, #0
 80074b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2200      	movs	r2, #0
 80074c0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2200      	movs	r2, #0
 80074c8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2200      	movs	r2, #0
 80074d0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2221      	movs	r2, #33	; 0x21
 80074d8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 facc 	bl	8007a78 <DMA_CalcBaseAndBitshift>
 80074e0:	4603      	mov	r3, r0
 80074e2:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	223f      	movs	r2, #63	; 0x3f
 800750e:	409a      	lsls	r2, r3
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800754a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_DMA_Start_IT+0x26>
 8007556:	2302      	movs	r3, #2
 8007558:	e040      	b.n	80075dc <HAL_DMA_Start_IT+0xa8>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007568:	b2db      	uxtb	r3, r3
 800756a:	2b01      	cmp	r3, #1
 800756c:	d12f      	bne.n	80075ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2202      	movs	r2, #2
 8007572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	68b9      	ldr	r1, [r7, #8]
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fa4a 	bl	8007a1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800758c:	223f      	movs	r2, #63	; 0x3f
 800758e:	409a      	lsls	r2, r3
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0216 	orr.w	r2, r2, #22
 80075a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d007      	beq.n	80075bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f042 0208 	orr.w	r2, r2, #8
 80075ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]
 80075cc:	e005      	b.n	80075da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80075d6:	2302      	movs	r3, #2
 80075d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b084      	sub	sp, #16
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80075f2:	f7ff fd4f 	bl	8007094 <HAL_GetTick>
 80075f6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075fe:	b2db      	uxtb	r3, r3
 8007600:	2b02      	cmp	r3, #2
 8007602:	d008      	beq.n	8007616 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2280      	movs	r2, #128	; 0x80
 8007608:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e052      	b.n	80076bc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0216 	bic.w	r2, r2, #22
 8007624:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007634:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d103      	bne.n	8007646 <HAL_DMA_Abort+0x62>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	2b00      	cmp	r3, #0
 8007644:	d007      	beq.n	8007656 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0208 	bic.w	r2, r2, #8
 8007654:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007666:	e013      	b.n	8007690 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007668:	f7ff fd14 	bl	8007094 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b05      	cmp	r3, #5
 8007674:	d90c      	bls.n	8007690 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2220      	movs	r2, #32
 800767a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2203      	movs	r2, #3
 8007680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e015      	b.n	80076bc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1e4      	bne.n	8007668 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a2:	223f      	movs	r2, #63	; 0x3f
 80076a4:	409a      	lsls	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d004      	beq.n	80076e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2280      	movs	r2, #128	; 0x80
 80076dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e00c      	b.n	80076fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2205      	movs	r2, #5
 80076e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f022 0201 	bic.w	r2, r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80076fa:	2300      	movs	r3, #0
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	370c      	adds	r7, #12
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007710:	2300      	movs	r3, #0
 8007712:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007714:	4b92      	ldr	r3, [pc, #584]	; (8007960 <HAL_DMA_IRQHandler+0x258>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a92      	ldr	r2, [pc, #584]	; (8007964 <HAL_DMA_IRQHandler+0x25c>)
 800771a:	fba2 2303 	umull	r2, r3, r2, r3
 800771e:	0a9b      	lsrs	r3, r3, #10
 8007720:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007726:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007732:	2208      	movs	r2, #8
 8007734:	409a      	lsls	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	4013      	ands	r3, r2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d01a      	beq.n	8007774 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0304 	and.w	r3, r3, #4
 8007748:	2b00      	cmp	r3, #0
 800774a:	d013      	beq.n	8007774 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0204 	bic.w	r2, r2, #4
 800775a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007760:	2208      	movs	r2, #8
 8007762:	409a      	lsls	r2, r3
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776c:	f043 0201 	orr.w	r2, r3, #1
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	2201      	movs	r2, #1
 800777a:	409a      	lsls	r2, r3
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	4013      	ands	r3, r2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00b      	beq.n	80077aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007796:	2201      	movs	r2, #1
 8007798:	409a      	lsls	r2, r3
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077a2:	f043 0202 	orr.w	r2, r3, #2
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ae:	2204      	movs	r2, #4
 80077b0:	409a      	lsls	r2, r3
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4013      	ands	r3, r2
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d012      	beq.n	80077e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0302 	and.w	r3, r3, #2
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077cc:	2204      	movs	r2, #4
 80077ce:	409a      	lsls	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077d8:	f043 0204 	orr.w	r2, r3, #4
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077e4:	2210      	movs	r2, #16
 80077e6:	409a      	lsls	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4013      	ands	r3, r2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d043      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 0308 	and.w	r3, r3, #8
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d03c      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007802:	2210      	movs	r2, #16
 8007804:	409a      	lsls	r2, r3
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d018      	beq.n	800784a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d108      	bne.n	8007838 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800782a:	2b00      	cmp	r3, #0
 800782c:	d024      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
 8007836:	e01f      	b.n	8007878 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01b      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	4798      	blx	r3
 8007848:	e016      	b.n	8007878 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d107      	bne.n	8007868 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0208 	bic.w	r2, r2, #8
 8007866:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	2b00      	cmp	r3, #0
 800786e:	d003      	beq.n	8007878 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800787c:	2220      	movs	r2, #32
 800787e:	409a      	lsls	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	4013      	ands	r3, r2
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 808e 	beq.w	80079a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	f000 8086 	beq.w	80079a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800789e:	2220      	movs	r2, #32
 80078a0:	409a      	lsls	r2, r3
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	2b05      	cmp	r3, #5
 80078b0:	d136      	bne.n	8007920 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f022 0216 	bic.w	r2, r2, #22
 80078c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	695a      	ldr	r2, [r3, #20]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d103      	bne.n	80078e2 <HAL_DMA_IRQHandler+0x1da>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d007      	beq.n	80078f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f022 0208 	bic.w	r2, r2, #8
 80078f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078f6:	223f      	movs	r2, #63	; 0x3f
 80078f8:	409a      	lsls	r2, r3
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007912:	2b00      	cmp	r3, #0
 8007914:	d07d      	beq.n	8007a12 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
        }
        return;
 800791e:	e078      	b.n	8007a12 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01c      	beq.n	8007968 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d108      	bne.n	800794e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007940:	2b00      	cmp	r3, #0
 8007942:	d030      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	4798      	blx	r3
 800794c:	e02b      	b.n	80079a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d027      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
 800795e:	e022      	b.n	80079a6 <HAL_DMA_IRQHandler+0x29e>
 8007960:	20000030 	.word	0x20000030
 8007964:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10f      	bne.n	8007996 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 0210 	bic.w	r2, r2, #16
 8007984:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d032      	beq.n	8007a14 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079b2:	f003 0301 	and.w	r3, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d022      	beq.n	8007a00 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2205      	movs	r2, #5
 80079be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f022 0201 	bic.w	r2, r2, #1
 80079d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3301      	adds	r3, #1
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d307      	bcc.n	80079ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f003 0301 	and.w	r3, r3, #1
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d1f2      	bne.n	80079d2 <HAL_DMA_IRQHandler+0x2ca>
 80079ec:	e000      	b.n	80079f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80079ee:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d005      	beq.n	8007a14 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	4798      	blx	r3
 8007a10:	e000      	b.n	8007a14 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007a12:	bf00      	nop
    }
  }
}
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop

08007a1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	607a      	str	r2, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	2b40      	cmp	r3, #64	; 0x40
 8007a48:	d108      	bne.n	8007a5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007a5a:	e007      	b.n	8007a6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	60da      	str	r2, [r3, #12]
}
 8007a6c:	bf00      	nop
 8007a6e:	3714      	adds	r7, #20
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	3b10      	subs	r3, #16
 8007a88:	4a14      	ldr	r2, [pc, #80]	; (8007adc <DMA_CalcBaseAndBitshift+0x64>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007a92:	4a13      	ldr	r2, [pc, #76]	; (8007ae0 <DMA_CalcBaseAndBitshift+0x68>)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d909      	bls.n	8007aba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007aae:	f023 0303 	bic.w	r3, r3, #3
 8007ab2:	1d1a      	adds	r2, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	659a      	str	r2, [r3, #88]	; 0x58
 8007ab8:	e007      	b.n	8007aca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007ac2:	f023 0303 	bic.w	r3, r3, #3
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3714      	adds	r7, #20
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	aaaaaaab 	.word	0xaaaaaaab
 8007ae0:	08020644 	.word	0x08020644

08007ae4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b085      	sub	sp, #20
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d11f      	bne.n	8007b3e <DMA_CheckFifoParam+0x5a>
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	2b03      	cmp	r3, #3
 8007b02:	d856      	bhi.n	8007bb2 <DMA_CheckFifoParam+0xce>
 8007b04:	a201      	add	r2, pc, #4	; (adr r2, 8007b0c <DMA_CheckFifoParam+0x28>)
 8007b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0a:	bf00      	nop
 8007b0c:	08007b1d 	.word	0x08007b1d
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b1d 	.word	0x08007b1d
 8007b18:	08007bb3 	.word	0x08007bb3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d046      	beq.n	8007bb6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007b28:	2301      	movs	r3, #1
 8007b2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b2c:	e043      	b.n	8007bb6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b36:	d140      	bne.n	8007bba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b3c:	e03d      	b.n	8007bba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b46:	d121      	bne.n	8007b8c <DMA_CheckFifoParam+0xa8>
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d837      	bhi.n	8007bbe <DMA_CheckFifoParam+0xda>
 8007b4e:	a201      	add	r2, pc, #4	; (adr r2, 8007b54 <DMA_CheckFifoParam+0x70>)
 8007b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b54:	08007b65 	.word	0x08007b65
 8007b58:	08007b6b 	.word	0x08007b6b
 8007b5c:	08007b65 	.word	0x08007b65
 8007b60:	08007b7d 	.word	0x08007b7d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	73fb      	strb	r3, [r7, #15]
      break;
 8007b68:	e030      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d025      	beq.n	8007bc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007b7a:	e022      	b.n	8007bc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007b84:	d11f      	bne.n	8007bc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
 8007b88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007b8a:	e01c      	b.n	8007bc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d903      	bls.n	8007b9a <DMA_CheckFifoParam+0xb6>
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2b03      	cmp	r3, #3
 8007b96:	d003      	beq.n	8007ba0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007b98:	e018      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9e:	e015      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00e      	beq.n	8007bca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007bac:	2301      	movs	r3, #1
 8007bae:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb0:	e00b      	b.n	8007bca <DMA_CheckFifoParam+0xe6>
      break;
 8007bb2:	bf00      	nop
 8007bb4:	e00a      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bb6:	bf00      	nop
 8007bb8:	e008      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e006      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e004      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e002      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;   
 8007bc6:	bf00      	nop
 8007bc8:	e000      	b.n	8007bcc <DMA_CheckFifoParam+0xe8>
      break;
 8007bca:	bf00      	nop
    }
  } 
  
  return status; 
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop

08007bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b089      	sub	sp, #36	; 0x24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	e16b      	b.n	8007ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	4013      	ands	r3, r2
 8007c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c0c:	693a      	ldr	r2, [r7, #16]
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	f040 815a 	bne.w	8007eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d005      	beq.n	8007c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d130      	bne.n	8007c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	005b      	lsls	r3, r3, #1
 8007c38:	2203      	movs	r2, #3
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	005b      	lsls	r3, r3, #1
 8007c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69ba      	ldr	r2, [r7, #24]
 8007c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c64:	2201      	movs	r2, #1
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6c:	43db      	mvns	r3, r3
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4013      	ands	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	091b      	lsrs	r3, r3, #4
 8007c7a:	f003 0201 	and.w	r2, r3, #1
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	fa02 f303 	lsl.w	r3, r2, r3
 8007c84:	69ba      	ldr	r2, [r7, #24]
 8007c86:	4313      	orrs	r3, r2
 8007c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69ba      	ldr	r2, [r7, #24]
 8007c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d017      	beq.n	8007ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	2203      	movs	r2, #3
 8007ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cac:	43db      	mvns	r3, r3
 8007cae:	69ba      	ldr	r2, [r7, #24]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f003 0303 	and.w	r3, r3, #3
 8007cd4:	2b02      	cmp	r3, #2
 8007cd6:	d123      	bne.n	8007d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	08da      	lsrs	r2, r3, #3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	3208      	adds	r2, #8
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f003 0307 	and.w	r3, r3, #7
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	220f      	movs	r2, #15
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	43db      	mvns	r3, r3
 8007cf6:	69ba      	ldr	r2, [r7, #24]
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	08da      	lsrs	r2, r3, #3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3208      	adds	r2, #8
 8007d1a:	69b9      	ldr	r1, [r7, #24]
 8007d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	2203      	movs	r2, #3
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	43db      	mvns	r3, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4013      	ands	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f003 0203 	and.w	r2, r3, #3
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	fa02 f303 	lsl.w	r3, r2, r3
 8007d48:	69ba      	ldr	r2, [r7, #24]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 80b4 	beq.w	8007eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d62:	2300      	movs	r3, #0
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	4b60      	ldr	r3, [pc, #384]	; (8007ee8 <HAL_GPIO_Init+0x30c>)
 8007d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6a:	4a5f      	ldr	r2, [pc, #380]	; (8007ee8 <HAL_GPIO_Init+0x30c>)
 8007d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d70:	6453      	str	r3, [r2, #68]	; 0x44
 8007d72:	4b5d      	ldr	r3, [pc, #372]	; (8007ee8 <HAL_GPIO_Init+0x30c>)
 8007d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d7a:	60fb      	str	r3, [r7, #12]
 8007d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d7e:	4a5b      	ldr	r2, [pc, #364]	; (8007eec <HAL_GPIO_Init+0x310>)
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	089b      	lsrs	r3, r3, #2
 8007d84:	3302      	adds	r3, #2
 8007d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0303 	and.w	r3, r3, #3
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	220f      	movs	r2, #15
 8007d96:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9a:	43db      	mvns	r3, r3
 8007d9c:	69ba      	ldr	r2, [r7, #24]
 8007d9e:	4013      	ands	r3, r2
 8007da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a52      	ldr	r2, [pc, #328]	; (8007ef0 <HAL_GPIO_Init+0x314>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d02b      	beq.n	8007e02 <HAL_GPIO_Init+0x226>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a51      	ldr	r2, [pc, #324]	; (8007ef4 <HAL_GPIO_Init+0x318>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d025      	beq.n	8007dfe <HAL_GPIO_Init+0x222>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a50      	ldr	r2, [pc, #320]	; (8007ef8 <HAL_GPIO_Init+0x31c>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d01f      	beq.n	8007dfa <HAL_GPIO_Init+0x21e>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a4f      	ldr	r2, [pc, #316]	; (8007efc <HAL_GPIO_Init+0x320>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d019      	beq.n	8007df6 <HAL_GPIO_Init+0x21a>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a4e      	ldr	r2, [pc, #312]	; (8007f00 <HAL_GPIO_Init+0x324>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <HAL_GPIO_Init+0x216>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4a4d      	ldr	r2, [pc, #308]	; (8007f04 <HAL_GPIO_Init+0x328>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	d00d      	beq.n	8007dee <HAL_GPIO_Init+0x212>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a4c      	ldr	r2, [pc, #304]	; (8007f08 <HAL_GPIO_Init+0x32c>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d007      	beq.n	8007dea <HAL_GPIO_Init+0x20e>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a4b      	ldr	r2, [pc, #300]	; (8007f0c <HAL_GPIO_Init+0x330>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d101      	bne.n	8007de6 <HAL_GPIO_Init+0x20a>
 8007de2:	2307      	movs	r3, #7
 8007de4:	e00e      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007de6:	2308      	movs	r3, #8
 8007de8:	e00c      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007dea:	2306      	movs	r3, #6
 8007dec:	e00a      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007dee:	2305      	movs	r3, #5
 8007df0:	e008      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007df2:	2304      	movs	r3, #4
 8007df4:	e006      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007df6:	2303      	movs	r3, #3
 8007df8:	e004      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007dfa:	2302      	movs	r3, #2
 8007dfc:	e002      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e000      	b.n	8007e04 <HAL_GPIO_Init+0x228>
 8007e02:	2300      	movs	r3, #0
 8007e04:	69fa      	ldr	r2, [r7, #28]
 8007e06:	f002 0203 	and.w	r2, r2, #3
 8007e0a:	0092      	lsls	r2, r2, #2
 8007e0c:	4093      	lsls	r3, r2
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e14:	4935      	ldr	r1, [pc, #212]	; (8007eec <HAL_GPIO_Init+0x310>)
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	089b      	lsrs	r3, r3, #2
 8007e1a:	3302      	adds	r3, #2
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e22:	4b3b      	ldr	r3, [pc, #236]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e28:	693b      	ldr	r3, [r7, #16]
 8007e2a:	43db      	mvns	r3, r3
 8007e2c:	69ba      	ldr	r2, [r7, #24]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d003      	beq.n	8007e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	4313      	orrs	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e46:	4a32      	ldr	r2, [pc, #200]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e4c:	4b30      	ldr	r3, [pc, #192]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	43db      	mvns	r3, r3
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	4013      	ands	r3, r2
 8007e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d003      	beq.n	8007e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e68:	69ba      	ldr	r2, [r7, #24]
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007e70:	4a27      	ldr	r2, [pc, #156]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007e76:	4b26      	ldr	r3, [pc, #152]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	4013      	ands	r3, r2
 8007e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d003      	beq.n	8007e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007e9a:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ea0:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	43db      	mvns	r3, r3
 8007eaa:	69ba      	ldr	r2, [r7, #24]
 8007eac:	4013      	ands	r3, r2
 8007eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d003      	beq.n	8007ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ec4:	4a12      	ldr	r2, [pc, #72]	; (8007f10 <HAL_GPIO_Init+0x334>)
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	2b0f      	cmp	r3, #15
 8007ed4:	f67f ae90 	bls.w	8007bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007ed8:	bf00      	nop
 8007eda:	bf00      	nop
 8007edc:	3724      	adds	r7, #36	; 0x24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	40013800 	.word	0x40013800
 8007ef0:	40020000 	.word	0x40020000
 8007ef4:	40020400 	.word	0x40020400
 8007ef8:	40020800 	.word	0x40020800
 8007efc:	40020c00 	.word	0x40020c00
 8007f00:	40021000 	.word	0x40021000
 8007f04:	40021400 	.word	0x40021400
 8007f08:	40021800 	.word	0x40021800
 8007f0c:	40021c00 	.word	0x40021c00
 8007f10:	40013c00 	.word	0x40013c00

08007f14 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
 8007f2e:	e0cd      	b.n	80080cc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007f30:	2201      	movs	r2, #1
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	fa02 f303 	lsl.w	r3, r2, r3
 8007f38:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	4013      	ands	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	f040 80bd 	bne.w	80080c6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007f4c:	4a65      	ldr	r2, [pc, #404]	; (80080e4 <HAL_GPIO_DeInit+0x1d0>)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	089b      	lsrs	r3, r3, #2
 8007f52:	3302      	adds	r3, #2
 8007f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f58:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f003 0303 	and.w	r3, r3, #3
 8007f60:	009b      	lsls	r3, r3, #2
 8007f62:	220f      	movs	r2, #15
 8007f64:	fa02 f303 	lsl.w	r3, r2, r3
 8007f68:	68ba      	ldr	r2, [r7, #8]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a5d      	ldr	r2, [pc, #372]	; (80080e8 <HAL_GPIO_DeInit+0x1d4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d02b      	beq.n	8007fce <HAL_GPIO_DeInit+0xba>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a5c      	ldr	r2, [pc, #368]	; (80080ec <HAL_GPIO_DeInit+0x1d8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d025      	beq.n	8007fca <HAL_GPIO_DeInit+0xb6>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a5b      	ldr	r2, [pc, #364]	; (80080f0 <HAL_GPIO_DeInit+0x1dc>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d01f      	beq.n	8007fc6 <HAL_GPIO_DeInit+0xb2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a5a      	ldr	r2, [pc, #360]	; (80080f4 <HAL_GPIO_DeInit+0x1e0>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d019      	beq.n	8007fc2 <HAL_GPIO_DeInit+0xae>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	4a59      	ldr	r2, [pc, #356]	; (80080f8 <HAL_GPIO_DeInit+0x1e4>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d013      	beq.n	8007fbe <HAL_GPIO_DeInit+0xaa>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	4a58      	ldr	r2, [pc, #352]	; (80080fc <HAL_GPIO_DeInit+0x1e8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00d      	beq.n	8007fba <HAL_GPIO_DeInit+0xa6>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4a57      	ldr	r2, [pc, #348]	; (8008100 <HAL_GPIO_DeInit+0x1ec>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d007      	beq.n	8007fb6 <HAL_GPIO_DeInit+0xa2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	4a56      	ldr	r2, [pc, #344]	; (8008104 <HAL_GPIO_DeInit+0x1f0>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <HAL_GPIO_DeInit+0x9e>
 8007fae:	2307      	movs	r3, #7
 8007fb0:	e00e      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	e00c      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fb6:	2306      	movs	r3, #6
 8007fb8:	e00a      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fba:	2305      	movs	r3, #5
 8007fbc:	e008      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fbe:	2304      	movs	r3, #4
 8007fc0:	e006      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e004      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fc6:	2302      	movs	r3, #2
 8007fc8:	e002      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e000      	b.n	8007fd0 <HAL_GPIO_DeInit+0xbc>
 8007fce:	2300      	movs	r3, #0
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	f002 0203 	and.w	r2, r2, #3
 8007fd6:	0092      	lsls	r2, r2, #2
 8007fd8:	4093      	lsls	r3, r2
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d132      	bne.n	8008046 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007fe0:	4b49      	ldr	r3, [pc, #292]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	43db      	mvns	r3, r3
 8007fe8:	4947      	ldr	r1, [pc, #284]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8007fea:	4013      	ands	r3, r2
 8007fec:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007fee:	4b46      	ldr	r3, [pc, #280]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	4944      	ldr	r1, [pc, #272]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007ffc:	4b42      	ldr	r3, [pc, #264]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	43db      	mvns	r3, r3
 8008004:	4940      	ldr	r1, [pc, #256]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8008006:	4013      	ands	r3, r2
 8008008:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800800a:	4b3f      	ldr	r3, [pc, #252]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 800800c:	68da      	ldr	r2, [r3, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	43db      	mvns	r3, r3
 8008012:	493d      	ldr	r1, [pc, #244]	; (8008108 <HAL_GPIO_DeInit+0x1f4>)
 8008014:	4013      	ands	r3, r2
 8008016:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	220f      	movs	r2, #15
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008028:	4a2e      	ldr	r2, [pc, #184]	; (80080e4 <HAL_GPIO_DeInit+0x1d0>)
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	089b      	lsrs	r3, r3, #2
 800802e:	3302      	adds	r3, #2
 8008030:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	43da      	mvns	r2, r3
 8008038:	482a      	ldr	r0, [pc, #168]	; (80080e4 <HAL_GPIO_DeInit+0x1d0>)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	089b      	lsrs	r3, r3, #2
 800803e:	400a      	ands	r2, r1
 8008040:	3302      	adds	r3, #2
 8008042:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681a      	ldr	r2, [r3, #0]
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	2103      	movs	r1, #3
 8008050:	fa01 f303 	lsl.w	r3, r1, r3
 8008054:	43db      	mvns	r3, r3
 8008056:	401a      	ands	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	08da      	lsrs	r2, r3, #3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3208      	adds	r2, #8
 8008064:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f003 0307 	and.w	r3, r3, #7
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	220f      	movs	r2, #15
 8008072:	fa02 f303 	lsl.w	r3, r2, r3
 8008076:	43db      	mvns	r3, r3
 8008078:	697a      	ldr	r2, [r7, #20]
 800807a:	08d2      	lsrs	r2, r2, #3
 800807c:	4019      	ands	r1, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3208      	adds	r2, #8
 8008082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68da      	ldr	r2, [r3, #12]
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	005b      	lsls	r3, r3, #1
 800808e:	2103      	movs	r1, #3
 8008090:	fa01 f303 	lsl.w	r3, r1, r3
 8008094:	43db      	mvns	r3, r3
 8008096:	401a      	ands	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	2101      	movs	r1, #1
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	fa01 f303 	lsl.w	r3, r1, r3
 80080a8:	43db      	mvns	r3, r3
 80080aa:	401a      	ands	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	005b      	lsls	r3, r3, #1
 80080b8:	2103      	movs	r1, #3
 80080ba:	fa01 f303 	lsl.w	r3, r1, r3
 80080be:	43db      	mvns	r3, r3
 80080c0:	401a      	ands	r2, r3
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	3301      	adds	r3, #1
 80080ca:	617b      	str	r3, [r7, #20]
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	f67f af2e 	bls.w	8007f30 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	40013800 	.word	0x40013800
 80080e8:	40020000 	.word	0x40020000
 80080ec:	40020400 	.word	0x40020400
 80080f0:	40020800 	.word	0x40020800
 80080f4:	40020c00 	.word	0x40020c00
 80080f8:	40021000 	.word	0x40021000
 80080fc:	40021400 	.word	0x40021400
 8008100:	40021800 	.word	0x40021800
 8008104:	40021c00 	.word	0x40021c00
 8008108:	40013c00 	.word	0x40013c00

0800810c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	691a      	ldr	r2, [r3, #16]
 800811c:	887b      	ldrh	r3, [r7, #2]
 800811e:	4013      	ands	r3, r2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008124:	2301      	movs	r3, #1
 8008126:	73fb      	strb	r3, [r7, #15]
 8008128:	e001      	b.n	800812e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800813c:	b480      	push	{r7}
 800813e:	b083      	sub	sp, #12
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
 8008144:	460b      	mov	r3, r1
 8008146:	807b      	strh	r3, [r7, #2]
 8008148:	4613      	mov	r3, r2
 800814a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800814c:	787b      	ldrb	r3, [r7, #1]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008152:	887a      	ldrh	r2, [r7, #2]
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008158:	e003      	b.n	8008162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800815a:	887b      	ldrh	r3, [r7, #2]
 800815c:	041a      	lsls	r2, r3, #16
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	619a      	str	r2, [r3, #24]
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
	...

08008170 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e12b      	b.n	80083da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fc fd4e 	bl	8004c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2224      	movs	r2, #36	; 0x24
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f022 0201 	bic.w	r2, r2, #1
 80081b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80081c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80081d4:	f003 f9ce 	bl	800b574 <HAL_RCC_GetPCLK1Freq>
 80081d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	4a81      	ldr	r2, [pc, #516]	; (80083e4 <HAL_I2C_Init+0x274>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d807      	bhi.n	80081f4 <HAL_I2C_Init+0x84>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4a80      	ldr	r2, [pc, #512]	; (80083e8 <HAL_I2C_Init+0x278>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	bf94      	ite	ls
 80081ec:	2301      	movls	r3, #1
 80081ee:	2300      	movhi	r3, #0
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	e006      	b.n	8008202 <HAL_I2C_Init+0x92>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4a7d      	ldr	r2, [pc, #500]	; (80083ec <HAL_I2C_Init+0x27c>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	bf94      	ite	ls
 80081fc:	2301      	movls	r3, #1
 80081fe:	2300      	movhi	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	2b00      	cmp	r3, #0
 8008204:	d001      	beq.n	800820a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e0e7      	b.n	80083da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	4a78      	ldr	r2, [pc, #480]	; (80083f0 <HAL_I2C_Init+0x280>)
 800820e:	fba2 2303 	umull	r2, r3, r2, r3
 8008212:	0c9b      	lsrs	r3, r3, #18
 8008214:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	430a      	orrs	r2, r1
 8008228:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	4a6a      	ldr	r2, [pc, #424]	; (80083e4 <HAL_I2C_Init+0x274>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d802      	bhi.n	8008244 <HAL_I2C_Init+0xd4>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3301      	adds	r3, #1
 8008242:	e009      	b.n	8008258 <HAL_I2C_Init+0xe8>
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800824a:	fb02 f303 	mul.w	r3, r2, r3
 800824e:	4a69      	ldr	r2, [pc, #420]	; (80083f4 <HAL_I2C_Init+0x284>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	099b      	lsrs	r3, r3, #6
 8008256:	3301      	adds	r3, #1
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	6812      	ldr	r2, [r2, #0]
 800825c:	430b      	orrs	r3, r1
 800825e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	69db      	ldr	r3, [r3, #28]
 8008266:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800826a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	495c      	ldr	r1, [pc, #368]	; (80083e4 <HAL_I2C_Init+0x274>)
 8008274:	428b      	cmp	r3, r1
 8008276:	d819      	bhi.n	80082ac <HAL_I2C_Init+0x13c>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	1e59      	subs	r1, r3, #1
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	fbb1 f3f3 	udiv	r3, r1, r3
 8008286:	1c59      	adds	r1, r3, #1
 8008288:	f640 73fc 	movw	r3, #4092	; 0xffc
 800828c:	400b      	ands	r3, r1
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00a      	beq.n	80082a8 <HAL_I2C_Init+0x138>
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	1e59      	subs	r1, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	fbb1 f3f3 	udiv	r3, r1, r3
 80082a0:	3301      	adds	r3, #1
 80082a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082a6:	e051      	b.n	800834c <HAL_I2C_Init+0x1dc>
 80082a8:	2304      	movs	r3, #4
 80082aa:	e04f      	b.n	800834c <HAL_I2C_Init+0x1dc>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d111      	bne.n	80082d8 <HAL_I2C_Init+0x168>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	1e58      	subs	r0, r3, #1
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6859      	ldr	r1, [r3, #4]
 80082bc:	460b      	mov	r3, r1
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	440b      	add	r3, r1
 80082c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80082c6:	3301      	adds	r3, #1
 80082c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e012      	b.n	80082fe <HAL_I2C_Init+0x18e>
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	1e58      	subs	r0, r3, #1
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6859      	ldr	r1, [r3, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	440b      	add	r3, r1
 80082e6:	0099      	lsls	r1, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80082ee:	3301      	adds	r3, #1
 80082f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf0c      	ite	eq
 80082f8:	2301      	moveq	r3, #1
 80082fa:	2300      	movne	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d001      	beq.n	8008306 <HAL_I2C_Init+0x196>
 8008302:	2301      	movs	r3, #1
 8008304:	e022      	b.n	800834c <HAL_I2C_Init+0x1dc>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d10e      	bne.n	800832c <HAL_I2C_Init+0x1bc>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	1e58      	subs	r0, r3, #1
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6859      	ldr	r1, [r3, #4]
 8008316:	460b      	mov	r3, r1
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	440b      	add	r3, r1
 800831c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008320:	3301      	adds	r3, #1
 8008322:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800832a:	e00f      	b.n	800834c <HAL_I2C_Init+0x1dc>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	1e58      	subs	r0, r3, #1
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6859      	ldr	r1, [r3, #4]
 8008334:	460b      	mov	r3, r1
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	0099      	lsls	r1, r3, #2
 800833c:	440b      	add	r3, r1
 800833e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008342:	3301      	adds	r3, #1
 8008344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008348:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	6809      	ldr	r1, [r1, #0]
 8008350:	4313      	orrs	r3, r2
 8008352:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	69da      	ldr	r2, [r3, #28]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	430a      	orrs	r2, r1
 800836e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800837a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6911      	ldr	r1, [r2, #16]
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	68d2      	ldr	r2, [r2, #12]
 8008386:	4311      	orrs	r1, r2
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	430b      	orrs	r3, r1
 800838e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68db      	ldr	r3, [r3, #12]
 8008396:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	695a      	ldr	r2, [r3, #20]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	699b      	ldr	r3, [r3, #24]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	430a      	orrs	r2, r1
 80083aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f042 0201 	orr.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2220      	movs	r2, #32
 80083c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	000186a0 	.word	0x000186a0
 80083e8:	001e847f 	.word	0x001e847f
 80083ec:	003d08ff 	.word	0x003d08ff
 80083f0:	431bde83 	.word	0x431bde83
 80083f4:	10624dd3 	.word	0x10624dd3

080083f8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af02      	add	r7, sp, #8
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	607a      	str	r2, [r7, #4]
 8008402:	461a      	mov	r2, r3
 8008404:	460b      	mov	r3, r1
 8008406:	817b      	strh	r3, [r7, #10]
 8008408:	4613      	mov	r3, r2
 800840a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800840c:	f7fe fe42 	bl	8007094 <HAL_GetTick>
 8008410:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b20      	cmp	r3, #32
 800841c:	f040 80e0 	bne.w	80085e0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	2319      	movs	r3, #25
 8008426:	2201      	movs	r2, #1
 8008428:	4970      	ldr	r1, [pc, #448]	; (80085ec <HAL_I2C_Master_Transmit+0x1f4>)
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f001 f8f6 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d001      	beq.n	800843a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008436:	2302      	movs	r3, #2
 8008438:	e0d3      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008440:	2b01      	cmp	r3, #1
 8008442:	d101      	bne.n	8008448 <HAL_I2C_Master_Transmit+0x50>
 8008444:	2302      	movs	r3, #2
 8008446:	e0cc      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x1ea>
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b01      	cmp	r3, #1
 800845c:	d007      	beq.n	800846e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0201 	orr.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800847c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	2221      	movs	r2, #33	; 0x21
 8008482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2210      	movs	r2, #16
 800848a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	893a      	ldrh	r2, [r7, #8]
 800849e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a4:	b29a      	uxth	r2, r3
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4a50      	ldr	r2, [pc, #320]	; (80085f0 <HAL_I2C_Master_Transmit+0x1f8>)
 80084ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80084b0:	8979      	ldrh	r1, [r7, #10]
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a3a      	ldr	r2, [r7, #32]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 fde2 	bl	8009080 <I2C_MasterRequestWrite>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e08d      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80084c6:	2300      	movs	r3, #0
 80084c8:	613b      	str	r3, [r7, #16]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	695b      	ldr	r3, [r3, #20]
 80084d0:	613b      	str	r3, [r7, #16]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	699b      	ldr	r3, [r3, #24]
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80084dc:	e066      	b.n	80085ac <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	6a39      	ldr	r1, [r7, #32]
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f001 f970 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d107      	bne.n	8008506 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008504:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008506:	2301      	movs	r3, #1
 8008508:	e06b      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850e:	781a      	ldrb	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008524:	b29b      	uxth	r3, r3
 8008526:	3b01      	subs	r3, #1
 8008528:	b29a      	uxth	r2, r3
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008532:	3b01      	subs	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695b      	ldr	r3, [r3, #20]
 8008540:	f003 0304 	and.w	r3, r3, #4
 8008544:	2b04      	cmp	r3, #4
 8008546:	d11b      	bne.n	8008580 <HAL_I2C_Master_Transmit+0x188>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800854c:	2b00      	cmp	r3, #0
 800854e:	d017      	beq.n	8008580 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	781a      	ldrb	r2, [r3, #0]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	1c5a      	adds	r2, r3, #1
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800856a:	b29b      	uxth	r3, r3
 800856c:	3b01      	subs	r3, #1
 800856e:	b29a      	uxth	r2, r3
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008578:	3b01      	subs	r3, #1
 800857a:	b29a      	uxth	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	6a39      	ldr	r1, [r7, #32]
 8008584:	68f8      	ldr	r0, [r7, #12]
 8008586:	f001 f960 	bl	800984a <I2C_WaitOnBTFFlagUntilTimeout>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00d      	beq.n	80085ac <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008594:	2b04      	cmp	r3, #4
 8008596:	d107      	bne.n	80085a8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681a      	ldr	r2, [r3, #0]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e01a      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d194      	bne.n	80084de <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80085dc:	2300      	movs	r3, #0
 80085de:	e000      	b.n	80085e2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80085e0:	2302      	movs	r3, #2
  }
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	00100002 	.word	0x00100002
 80085f0:	ffff0000 	.word	0xffff0000

080085f4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08c      	sub	sp, #48	; 0x30
 80085f8:	af02      	add	r7, sp, #8
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	607a      	str	r2, [r7, #4]
 80085fe:	461a      	mov	r2, r3
 8008600:	460b      	mov	r3, r1
 8008602:	817b      	strh	r3, [r7, #10]
 8008604:	4613      	mov	r3, r2
 8008606:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008608:	f7fe fd44 	bl	8007094 <HAL_GetTick>
 800860c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008614:	b2db      	uxtb	r3, r3
 8008616:	2b20      	cmp	r3, #32
 8008618:	f040 820b 	bne.w	8008a32 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2319      	movs	r3, #25
 8008622:	2201      	movs	r2, #1
 8008624:	497c      	ldr	r1, [pc, #496]	; (8008818 <HAL_I2C_Master_Receive+0x224>)
 8008626:	68f8      	ldr	r0, [r7, #12]
 8008628:	f000 fff8 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 800862c:	4603      	mov	r3, r0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008632:	2302      	movs	r3, #2
 8008634:	e1fe      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800863c:	2b01      	cmp	r3, #1
 800863e:	d101      	bne.n	8008644 <HAL_I2C_Master_Receive+0x50>
 8008640:	2302      	movs	r3, #2
 8008642:	e1f7      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	2201      	movs	r2, #1
 8008648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 0301 	and.w	r3, r3, #1
 8008656:	2b01      	cmp	r3, #1
 8008658:	d007      	beq.n	800866a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f042 0201 	orr.w	r2, r2, #1
 8008668:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008678:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2222      	movs	r2, #34	; 0x22
 800867e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2210      	movs	r2, #16
 8008686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2200      	movs	r2, #0
 800868e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	893a      	ldrh	r2, [r7, #8]
 800869a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a5c      	ldr	r2, [pc, #368]	; (800881c <HAL_I2C_Master_Receive+0x228>)
 80086aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80086ac:	8979      	ldrh	r1, [r7, #10]
 80086ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fd66 	bl	8009184 <I2C_MasterRequestRead>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80086be:	2301      	movs	r3, #1
 80086c0:	e1b8      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d113      	bne.n	80086f2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80086ca:	2300      	movs	r3, #0
 80086cc:	623b      	str	r3, [r7, #32]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695b      	ldr	r3, [r3, #20]
 80086d4:	623b      	str	r3, [r7, #32]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	623b      	str	r3, [r7, #32]
 80086de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e18c      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d11b      	bne.n	8008732 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008708:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800870a:	2300      	movs	r3, #0
 800870c:	61fb      	str	r3, [r7, #28]
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	695b      	ldr	r3, [r3, #20]
 8008714:	61fb      	str	r3, [r7, #28]
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	699b      	ldr	r3, [r3, #24]
 800871c:	61fb      	str	r3, [r7, #28]
 800871e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	e16c      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008736:	2b02      	cmp	r3, #2
 8008738:	d11b      	bne.n	8008772 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008748:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800875a:	2300      	movs	r3, #0
 800875c:	61bb      	str	r3, [r7, #24]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	61bb      	str	r3, [r7, #24]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	699b      	ldr	r3, [r3, #24]
 800876c:	61bb      	str	r3, [r7, #24]
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	e14c      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681a      	ldr	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008782:	2300      	movs	r3, #0
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	695b      	ldr	r3, [r3, #20]
 800878c:	617b      	str	r3, [r7, #20]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	617b      	str	r3, [r7, #20]
 8008796:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008798:	e138      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879e:	2b03      	cmp	r3, #3
 80087a0:	f200 80f1 	bhi.w	8008986 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d123      	bne.n	80087f4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087b0:	68f8      	ldr	r0, [r7, #12]
 80087b2:	f001 f88b 	bl	80098cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d001      	beq.n	80087c0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80087bc:	2301      	movs	r3, #1
 80087be:	e139      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691a      	ldr	r2, [r3, #16]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	b2d2      	uxtb	r2, r2
 80087cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d2:	1c5a      	adds	r2, r3, #1
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087dc:	3b01      	subs	r3, #1
 80087de:	b29a      	uxth	r2, r3
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80087f2:	e10b      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d14e      	bne.n	800889a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80087fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fe:	9300      	str	r3, [sp, #0]
 8008800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008802:	2200      	movs	r2, #0
 8008804:	4906      	ldr	r1, [pc, #24]	; (8008820 <HAL_I2C_Master_Receive+0x22c>)
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 ff08 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d008      	beq.n	8008824 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	e10e      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
 8008816:	bf00      	nop
 8008818:	00100002 	.word	0x00100002
 800881c:	ffff0000 	.word	0xffff0000
 8008820:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008832:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	691a      	ldr	r2, [r3, #16]
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883e:	b2d2      	uxtb	r2, r2
 8008840:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008846:	1c5a      	adds	r2, r3, #1
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	691a      	ldr	r2, [r3, #16]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008870:	b2d2      	uxtb	r2, r2
 8008872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008878:	1c5a      	adds	r2, r3, #1
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008882:	3b01      	subs	r3, #1
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800888e:	b29b      	uxth	r3, r3
 8008890:	3b01      	subs	r3, #1
 8008892:	b29a      	uxth	r2, r3
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008898:	e0b8      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800889a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	2200      	movs	r2, #0
 80088a2:	4966      	ldr	r1, [pc, #408]	; (8008a3c <HAL_I2C_Master_Receive+0x448>)
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f000 feb9 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	e0bf      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691a      	ldr	r2, [r3, #16]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80088e0:	3b01      	subs	r3, #1
 80088e2:	b29a      	uxth	r2, r3
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	3b01      	subs	r3, #1
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fc:	2200      	movs	r2, #0
 80088fe:	494f      	ldr	r1, [pc, #316]	; (8008a3c <HAL_I2C_Master_Receive+0x448>)
 8008900:	68f8      	ldr	r0, [r7, #12]
 8008902:	f000 fe8b 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800890c:	2301      	movs	r3, #1
 800890e:	e091      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800891e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892a:	b2d2      	uxtb	r2, r2
 800892c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800893c:	3b01      	subs	r3, #1
 800893e:	b29a      	uxth	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008948:	b29b      	uxth	r3, r3
 800894a:	3b01      	subs	r3, #1
 800894c:	b29a      	uxth	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691a      	ldr	r2, [r3, #16]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800895c:	b2d2      	uxtb	r2, r2
 800895e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008964:	1c5a      	adds	r2, r3, #1
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800896e:	3b01      	subs	r3, #1
 8008970:	b29a      	uxth	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800897a:	b29b      	uxth	r3, r3
 800897c:	3b01      	subs	r3, #1
 800897e:	b29a      	uxth	r2, r3
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008984:	e042      	b.n	8008a0c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008988:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 ff9e 	bl	80098cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e04c      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	691a      	ldr	r2, [r3, #16]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a4:	b2d2      	uxtb	r2, r2
 80089a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ac:	1c5a      	adds	r2, r3, #1
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b6:	3b01      	subs	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089c2:	b29b      	uxth	r3, r3
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b04      	cmp	r3, #4
 80089d8:	d118      	bne.n	8008a0c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e4:	b2d2      	uxtb	r2, r2
 80089e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ec:	1c5a      	adds	r2, r3, #1
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089f6:	3b01      	subs	r3, #1
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	3b01      	subs	r3, #1
 8008a06:	b29a      	uxth	r2, r3
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	f47f aec2 	bne.w	800879a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2220      	movs	r2, #32
 8008a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e000      	b.n	8008a34 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8008a32:	2302      	movs	r3, #2
  }
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3728      	adds	r7, #40	; 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	00010004 	.word	0x00010004

08008a40 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af02      	add	r7, sp, #8
 8008a46:	60f8      	str	r0, [r7, #12]
 8008a48:	4608      	mov	r0, r1
 8008a4a:	4611      	mov	r1, r2
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	817b      	strh	r3, [r7, #10]
 8008a52:	460b      	mov	r3, r1
 8008a54:	813b      	strh	r3, [r7, #8]
 8008a56:	4613      	mov	r3, r2
 8008a58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008a5a:	f7fe fb1b 	bl	8007094 <HAL_GetTick>
 8008a5e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b20      	cmp	r3, #32
 8008a6a:	f040 80d9 	bne.w	8008c20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	2319      	movs	r3, #25
 8008a74:	2201      	movs	r2, #1
 8008a76:	496d      	ldr	r1, [pc, #436]	; (8008c2c <HAL_I2C_Mem_Write+0x1ec>)
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f000 fdcf 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008a84:	2302      	movs	r3, #2
 8008a86:	e0cc      	b.n	8008c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d101      	bne.n	8008a96 <HAL_I2C_Mem_Write+0x56>
 8008a92:	2302      	movs	r3, #2
 8008a94:	e0c5      	b.n	8008c22 <HAL_I2C_Mem_Write+0x1e2>
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d007      	beq.n	8008abc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f042 0201 	orr.w	r2, r2, #1
 8008aba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2221      	movs	r2, #33	; 0x21
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	2240      	movs	r2, #64	; 0x40
 8008ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6a3a      	ldr	r2, [r7, #32]
 8008ae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008aec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008af2:	b29a      	uxth	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	4a4d      	ldr	r2, [pc, #308]	; (8008c30 <HAL_I2C_Mem_Write+0x1f0>)
 8008afc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008afe:	88f8      	ldrh	r0, [r7, #6]
 8008b00:	893a      	ldrh	r2, [r7, #8]
 8008b02:	8979      	ldrh	r1, [r7, #10]
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	9301      	str	r3, [sp, #4]
 8008b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0a:	9300      	str	r3, [sp, #0]
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	68f8      	ldr	r0, [r7, #12]
 8008b10:	f000 fc06 	bl	8009320 <I2C_RequestMemoryWrite>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d052      	beq.n	8008bc0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	e081      	b.n	8008c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f000 fe50 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00d      	beq.n	8008b4a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d107      	bne.n	8008b46 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681a      	ldr	r2, [r3, #0]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b44:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008b46:	2301      	movs	r3, #1
 8008b48:	e06b      	b.n	8008c22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4e:	781a      	ldrb	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b64:	3b01      	subs	r3, #1
 8008b66:	b29a      	uxth	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	3b01      	subs	r3, #1
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d11b      	bne.n	8008bc0 <HAL_I2C_Mem_Write+0x180>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b94:	781a      	ldrb	r2, [r3, #0]
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008baa:	3b01      	subs	r3, #1
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	3b01      	subs	r3, #1
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d1aa      	bne.n	8008b1e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f000 fe3c 	bl	800984a <I2C_WaitOnBTFFlagUntilTimeout>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00d      	beq.n	8008bf4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	2b04      	cmp	r3, #4
 8008bde:	d107      	bne.n	8008bf0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e016      	b.n	8008c22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	e000      	b.n	8008c22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008c20:	2302      	movs	r3, #2
  }
}
 8008c22:	4618      	mov	r0, r3
 8008c24:	3718      	adds	r7, #24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
 8008c2a:	bf00      	nop
 8008c2c:	00100002 	.word	0x00100002
 8008c30:	ffff0000 	.word	0xffff0000

08008c34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b08c      	sub	sp, #48	; 0x30
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	4608      	mov	r0, r1
 8008c3e:	4611      	mov	r1, r2
 8008c40:	461a      	mov	r2, r3
 8008c42:	4603      	mov	r3, r0
 8008c44:	817b      	strh	r3, [r7, #10]
 8008c46:	460b      	mov	r3, r1
 8008c48:	813b      	strh	r3, [r7, #8]
 8008c4a:	4613      	mov	r3, r2
 8008c4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c4e:	f7fe fa21 	bl	8007094 <HAL_GetTick>
 8008c52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	2b20      	cmp	r3, #32
 8008c5e:	f040 8208 	bne.w	8009072 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	9300      	str	r3, [sp, #0]
 8008c66:	2319      	movs	r3, #25
 8008c68:	2201      	movs	r2, #1
 8008c6a:	497b      	ldr	r1, [pc, #492]	; (8008e58 <HAL_I2C_Mem_Read+0x224>)
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f000 fcd5 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d001      	beq.n	8008c7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e1fb      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c82:	2b01      	cmp	r3, #1
 8008c84:	d101      	bne.n	8008c8a <HAL_I2C_Mem_Read+0x56>
 8008c86:	2302      	movs	r3, #2
 8008c88:	e1f4      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f003 0301 	and.w	r3, r3, #1
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d007      	beq.n	8008cb0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f042 0201 	orr.w	r2, r2, #1
 8008cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2222      	movs	r2, #34	; 0x22
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2240      	movs	r2, #64	; 0x40
 8008ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	4a5b      	ldr	r2, [pc, #364]	; (8008e5c <HAL_I2C_Mem_Read+0x228>)
 8008cf0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cf2:	88f8      	ldrh	r0, [r7, #6]
 8008cf4:	893a      	ldrh	r2, [r7, #8]
 8008cf6:	8979      	ldrh	r1, [r7, #10]
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	4603      	mov	r3, r0
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f000 fba2 	bl	800944c <I2C_RequestMemoryRead>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e1b0      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d113      	bne.n	8008d42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	623b      	str	r3, [r7, #32]
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	623b      	str	r3, [r7, #32]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	623b      	str	r3, [r7, #32]
 8008d2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d3e:	601a      	str	r2, [r3, #0]
 8008d40:	e184      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d11b      	bne.n	8008d82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	681a      	ldr	r2, [r3, #0]
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	61fb      	str	r3, [r7, #28]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	61fb      	str	r3, [r7, #28]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	699b      	ldr	r3, [r3, #24]
 8008d6c:	61fb      	str	r3, [r7, #28]
 8008d6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e164      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d86:	2b02      	cmp	r3, #2
 8008d88:	d11b      	bne.n	8008dc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008da8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008daa:	2300      	movs	r3, #0
 8008dac:	61bb      	str	r3, [r7, #24]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	61bb      	str	r3, [r7, #24]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	61bb      	str	r3, [r7, #24]
 8008dbe:	69bb      	ldr	r3, [r7, #24]
 8008dc0:	e144      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	695b      	ldr	r3, [r3, #20]
 8008dcc:	617b      	str	r3, [r7, #20]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	699b      	ldr	r3, [r3, #24]
 8008dd4:	617b      	str	r3, [r7, #20]
 8008dd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008dd8:	e138      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	f200 80f1 	bhi.w	8008fc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d123      	bne.n	8008e34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 fd6b 	bl	80098cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d001      	beq.n	8008e00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	e139      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0a:	b2d2      	uxtb	r2, r2
 8008e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e12:	1c5a      	adds	r2, r3, #1
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e1c:	3b01      	subs	r3, #1
 8008e1e:	b29a      	uxth	r2, r3
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008e32:	e10b      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e38:	2b02      	cmp	r3, #2
 8008e3a:	d14e      	bne.n	8008eda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e42:	2200      	movs	r2, #0
 8008e44:	4906      	ldr	r1, [pc, #24]	; (8008e60 <HAL_I2C_Mem_Read+0x22c>)
 8008e46:	68f8      	ldr	r0, [r7, #12]
 8008e48:	f000 fbe8 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d008      	beq.n	8008e64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e10e      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
 8008e56:	bf00      	nop
 8008e58:	00100002 	.word	0x00100002
 8008e5c:	ffff0000 	.word	0xffff0000
 8008e60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	691a      	ldr	r2, [r3, #16]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	1c5a      	adds	r2, r3, #1
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e90:	3b01      	subs	r3, #1
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29a      	uxth	r2, r3
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	691a      	ldr	r2, [r3, #16]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	b2d2      	uxtb	r2, r2
 8008eb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	1c5a      	adds	r2, r3, #1
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec2:	3b01      	subs	r3, #1
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ed8:	e0b8      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4966      	ldr	r1, [pc, #408]	; (800907c <HAL_I2C_Mem_Read+0x448>)
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fb99 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0bf      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681a      	ldr	r2, [r3, #0]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	691a      	ldr	r2, [r3, #16]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	1c5a      	adds	r2, r3, #1
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f20:	3b01      	subs	r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	3b01      	subs	r3, #1
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	494f      	ldr	r1, [pc, #316]	; (800907c <HAL_I2C_Mem_Read+0x448>)
 8008f40:	68f8      	ldr	r0, [r7, #12]
 8008f42:	f000 fb6b 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d001      	beq.n	8008f50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	e091      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	681a      	ldr	r2, [r3, #0]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	691a      	ldr	r2, [r3, #16]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	b2d2      	uxtb	r2, r2
 8008f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f72:	1c5a      	adds	r2, r3, #1
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b29a      	uxth	r2, r3
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	691a      	ldr	r2, [r3, #16]
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9c:	b2d2      	uxtb	r2, r2
 8008f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa4:	1c5a      	adds	r2, r3, #1
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fae:	3b01      	subs	r3, #1
 8008fb0:	b29a      	uxth	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fc4:	e042      	b.n	800904c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 fc7e 	bl	80098cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e04c      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe4:	b2d2      	uxtb	r2, r2
 8008fe6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	3b01      	subs	r3, #1
 8009006:	b29a      	uxth	r2, r3
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b04      	cmp	r3, #4
 8009018:	d118      	bne.n	800904c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	691a      	ldr	r2, [r3, #16]
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009024:	b2d2      	uxtb	r2, r2
 8009026:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009036:	3b01      	subs	r3, #1
 8009038:	b29a      	uxth	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009042:	b29b      	uxth	r3, r3
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009050:	2b00      	cmp	r3, #0
 8009052:	f47f aec2 	bne.w	8008dda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	2220      	movs	r2, #32
 800905a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2200      	movs	r2, #0
 800906a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	e000      	b.n	8009074 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009072:	2302      	movs	r3, #2
  }
}
 8009074:	4618      	mov	r0, r3
 8009076:	3728      	adds	r7, #40	; 0x28
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	00010004 	.word	0x00010004

08009080 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b088      	sub	sp, #32
 8009084:	af02      	add	r7, sp, #8
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	460b      	mov	r3, r1
 800908e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009094:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	2b08      	cmp	r3, #8
 800909a:	d006      	beq.n	80090aa <I2C_MasterRequestWrite+0x2a>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d003      	beq.n	80090aa <I2C_MasterRequestWrite+0x2a>
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80090a8:	d108      	bne.n	80090bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	681a      	ldr	r2, [r3, #0]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090b8:	601a      	str	r2, [r3, #0]
 80090ba:	e00b      	b.n	80090d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	2b12      	cmp	r3, #18
 80090c2:	d107      	bne.n	80090d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80090e0:	68f8      	ldr	r0, [r7, #12]
 80090e2:	f000 fa9b 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 80090e6:	4603      	mov	r3, r0
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00d      	beq.n	8009108 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090fa:	d103      	bne.n	8009104 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009102:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009104:	2303      	movs	r3, #3
 8009106:	e035      	b.n	8009174 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	691b      	ldr	r3, [r3, #16]
 800910c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009110:	d108      	bne.n	8009124 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009112:	897b      	ldrh	r3, [r7, #10]
 8009114:	b2db      	uxtb	r3, r3
 8009116:	461a      	mov	r2, r3
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009120:	611a      	str	r2, [r3, #16]
 8009122:	e01b      	b.n	800915c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009124:	897b      	ldrh	r3, [r7, #10]
 8009126:	11db      	asrs	r3, r3, #7
 8009128:	b2db      	uxtb	r3, r3
 800912a:	f003 0306 	and.w	r3, r3, #6
 800912e:	b2db      	uxtb	r3, r3
 8009130:	f063 030f 	orn	r3, r3, #15
 8009134:	b2da      	uxtb	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	490e      	ldr	r1, [pc, #56]	; (800917c <I2C_MasterRequestWrite+0xfc>)
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f000 fac1 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009148:	4603      	mov	r3, r0
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e010      	b.n	8009174 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009152:	897b      	ldrh	r3, [r7, #10]
 8009154:	b2da      	uxtb	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4907      	ldr	r1, [pc, #28]	; (8009180 <I2C_MasterRequestWrite+0x100>)
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f000 fab1 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e000      	b.n	8009174 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3718      	adds	r7, #24
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	00010008 	.word	0x00010008
 8009180:	00010002 	.word	0x00010002

08009184 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	607a      	str	r2, [r7, #4]
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	460b      	mov	r3, r1
 8009192:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80091a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2b08      	cmp	r3, #8
 80091ae:	d006      	beq.n	80091be <I2C_MasterRequestRead+0x3a>
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d003      	beq.n	80091be <I2C_MasterRequestRead+0x3a>
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80091bc:	d108      	bne.n	80091d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e00b      	b.n	80091e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091d4:	2b11      	cmp	r3, #17
 80091d6:	d107      	bne.n	80091e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091f4:	68f8      	ldr	r0, [r7, #12]
 80091f6:	f000 fa11 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00d      	beq.n	800921c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800920a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800920e:	d103      	bne.n	8009218 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009216:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009218:	2303      	movs	r3, #3
 800921a:	e079      	b.n	8009310 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009224:	d108      	bne.n	8009238 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009226:	897b      	ldrh	r3, [r7, #10]
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f043 0301 	orr.w	r3, r3, #1
 800922e:	b2da      	uxtb	r2, r3
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	611a      	str	r2, [r3, #16]
 8009236:	e05f      	b.n	80092f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009238:	897b      	ldrh	r3, [r7, #10]
 800923a:	11db      	asrs	r3, r3, #7
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 0306 	and.w	r3, r3, #6
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f063 030f 	orn	r3, r3, #15
 8009248:	b2da      	uxtb	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	4930      	ldr	r1, [pc, #192]	; (8009318 <I2C_MasterRequestRead+0x194>)
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 fa37 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800925c:	4603      	mov	r3, r0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e054      	b.n	8009310 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009266:	897b      	ldrh	r3, [r7, #10]
 8009268:	b2da      	uxtb	r2, r3
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	4929      	ldr	r1, [pc, #164]	; (800931c <I2C_MasterRequestRead+0x198>)
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f000 fa27 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	e044      	b.n	8009310 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009286:	2300      	movs	r3, #0
 8009288:	613b      	str	r3, [r7, #16]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	9300      	str	r3, [sp, #0]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f9af 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00d      	beq.n	80092e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092d2:	d103      	bne.n	80092dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e017      	b.n	8009310 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80092e0:	897b      	ldrh	r3, [r7, #10]
 80092e2:	11db      	asrs	r3, r3, #7
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	f003 0306 	and.w	r3, r3, #6
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	f063 030e 	orn	r3, r3, #14
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	687a      	ldr	r2, [r7, #4]
 80092fc:	4907      	ldr	r1, [pc, #28]	; (800931c <I2C_MasterRequestRead+0x198>)
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f000 f9e3 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e000      	b.n	8009310 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800930e:	2300      	movs	r3, #0
}
 8009310:	4618      	mov	r0, r3
 8009312:	3718      	adds	r7, #24
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}
 8009318:	00010008 	.word	0x00010008
 800931c:	00010002 	.word	0x00010002

08009320 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b088      	sub	sp, #32
 8009324:	af02      	add	r7, sp, #8
 8009326:	60f8      	str	r0, [r7, #12]
 8009328:	4608      	mov	r0, r1
 800932a:	4611      	mov	r1, r2
 800932c:	461a      	mov	r2, r3
 800932e:	4603      	mov	r3, r0
 8009330:	817b      	strh	r3, [r7, #10]
 8009332:	460b      	mov	r3, r1
 8009334:	813b      	strh	r3, [r7, #8]
 8009336:	4613      	mov	r3, r2
 8009338:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681a      	ldr	r2, [r3, #0]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009348:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	6a3b      	ldr	r3, [r7, #32]
 8009350:	2200      	movs	r2, #0
 8009352:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 f960 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00d      	beq.n	800937e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009370:	d103      	bne.n	800937a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009378:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e05f      	b.n	800943e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800937e:	897b      	ldrh	r3, [r7, #10]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	461a      	mov	r2, r3
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800938c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800938e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009390:	6a3a      	ldr	r2, [r7, #32]
 8009392:	492d      	ldr	r1, [pc, #180]	; (8009448 <I2C_RequestMemoryWrite+0x128>)
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	f000 f998 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e04c      	b.n	800943e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093a4:	2300      	movs	r3, #0
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	617b      	str	r3, [r7, #20]
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80093ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093bc:	6a39      	ldr	r1, [r7, #32]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	f000 fa02 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00d      	beq.n	80093e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	2b04      	cmp	r3, #4
 80093d0:	d107      	bne.n	80093e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80093e2:	2301      	movs	r3, #1
 80093e4:	e02b      	b.n	800943e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80093e6:	88fb      	ldrh	r3, [r7, #6]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d105      	bne.n	80093f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80093ec:	893b      	ldrh	r3, [r7, #8]
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	611a      	str	r2, [r3, #16]
 80093f6:	e021      	b.n	800943c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80093f8:	893b      	ldrh	r3, [r7, #8]
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	b29b      	uxth	r3, r3
 80093fe:	b2da      	uxtb	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009408:	6a39      	ldr	r1, [r7, #32]
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	f000 f9dc 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00d      	beq.n	8009432 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	2b04      	cmp	r3, #4
 800941c:	d107      	bne.n	800942e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800942c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e005      	b.n	800943e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009432:	893b      	ldrh	r3, [r7, #8]
 8009434:	b2da      	uxtb	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3718      	adds	r7, #24
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	00010002 	.word	0x00010002

0800944c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b088      	sub	sp, #32
 8009450:	af02      	add	r7, sp, #8
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	4608      	mov	r0, r1
 8009456:	4611      	mov	r1, r2
 8009458:	461a      	mov	r2, r3
 800945a:	4603      	mov	r3, r0
 800945c:	817b      	strh	r3, [r7, #10]
 800945e:	460b      	mov	r3, r1
 8009460:	813b      	strh	r3, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009474:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009484:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	9300      	str	r3, [sp, #0]
 800948a:	6a3b      	ldr	r3, [r7, #32]
 800948c:	2200      	movs	r2, #0
 800948e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 f8c2 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d00d      	beq.n	80094ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094ac:	d103      	bne.n	80094b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e0aa      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80094ba:	897b      	ldrh	r3, [r7, #10]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80094c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094cc:	6a3a      	ldr	r2, [r7, #32]
 80094ce:	4952      	ldr	r1, [pc, #328]	; (8009618 <I2C_RequestMemoryRead+0x1cc>)
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f8fa 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094d6:	4603      	mov	r3, r0
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d001      	beq.n	80094e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e097      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094e0:	2300      	movs	r3, #0
 80094e2:	617b      	str	r3, [r7, #20]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	617b      	str	r3, [r7, #20]
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f8:	6a39      	ldr	r1, [r7, #32]
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f964 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00d      	beq.n	8009522 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	2b04      	cmp	r3, #4
 800950c:	d107      	bne.n	800951e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800951c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800951e:	2301      	movs	r3, #1
 8009520:	e076      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009522:	88fb      	ldrh	r3, [r7, #6]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d105      	bne.n	8009534 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009528:	893b      	ldrh	r3, [r7, #8]
 800952a:	b2da      	uxtb	r2, r3
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	611a      	str	r2, [r3, #16]
 8009532:	e021      	b.n	8009578 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009534:	893b      	ldrh	r3, [r7, #8]
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b29b      	uxth	r3, r3
 800953a:	b2da      	uxtb	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009544:	6a39      	ldr	r1, [r7, #32]
 8009546:	68f8      	ldr	r0, [r7, #12]
 8009548:	f000 f93e 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00d      	beq.n	800956e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	2b04      	cmp	r3, #4
 8009558:	d107      	bne.n	800956a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009568:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	e050      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800956e:	893b      	ldrh	r3, [r7, #8]
 8009570:	b2da      	uxtb	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800957a:	6a39      	ldr	r1, [r7, #32]
 800957c:	68f8      	ldr	r0, [r7, #12]
 800957e:	f000 f923 	bl	80097c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00d      	beq.n	80095a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800958c:	2b04      	cmp	r3, #4
 800958e:	d107      	bne.n	80095a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800959e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e035      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	6a3b      	ldr	r3, [r7, #32]
 80095ba:	2200      	movs	r2, #0
 80095bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 f82b 	bl	800961c <I2C_WaitOnFlagUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00d      	beq.n	80095e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80095da:	d103      	bne.n	80095e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e013      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80095e8:	897b      	ldrh	r3, [r7, #10]
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	f043 0301 	orr.w	r3, r3, #1
 80095f0:	b2da      	uxtb	r2, r3
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fa:	6a3a      	ldr	r2, [r7, #32]
 80095fc:	4906      	ldr	r1, [pc, #24]	; (8009618 <I2C_RequestMemoryRead+0x1cc>)
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f863 	bl	80096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3718      	adds	r7, #24
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	00010002 	.word	0x00010002

0800961c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	603b      	str	r3, [r7, #0]
 8009628:	4613      	mov	r3, r2
 800962a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800962c:	e025      	b.n	800967a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009634:	d021      	beq.n	800967a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009636:	f7fd fd2d 	bl	8007094 <HAL_GetTick>
 800963a:	4602      	mov	r2, r0
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d302      	bcc.n	800964c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d116      	bne.n	800967a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2220      	movs	r2, #32
 8009656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009666:	f043 0220 	orr.w	r2, r3, #32
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2200      	movs	r2, #0
 8009672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
 8009678:	e023      	b.n	80096c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	0c1b      	lsrs	r3, r3, #16
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10d      	bne.n	80096a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	43da      	mvns	r2, r3
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	4013      	ands	r3, r2
 8009690:	b29b      	uxth	r3, r3
 8009692:	2b00      	cmp	r3, #0
 8009694:	bf0c      	ite	eq
 8009696:	2301      	moveq	r3, #1
 8009698:	2300      	movne	r3, #0
 800969a:	b2db      	uxtb	r3, r3
 800969c:	461a      	mov	r2, r3
 800969e:	e00c      	b.n	80096ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	699b      	ldr	r3, [r3, #24]
 80096a6:	43da      	mvns	r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	4013      	ands	r3, r2
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf0c      	ite	eq
 80096b2:	2301      	moveq	r3, #1
 80096b4:	2300      	movne	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d0b6      	beq.n	800962e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	60f8      	str	r0, [r7, #12]
 80096d2:	60b9      	str	r1, [r7, #8]
 80096d4:	607a      	str	r2, [r7, #4]
 80096d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80096d8:	e051      	b.n	800977e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096e8:	d123      	bne.n	8009732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009702:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2200      	movs	r2, #0
 8009708:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2220      	movs	r2, #32
 800970e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971e:	f043 0204 	orr.w	r2, r3, #4
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e046      	b.n	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009738:	d021      	beq.n	800977e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800973a:	f7fd fcab 	bl	8007094 <HAL_GetTick>
 800973e:	4602      	mov	r2, r0
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	429a      	cmp	r2, r3
 8009748:	d302      	bcc.n	8009750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d116      	bne.n	800977e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2220      	movs	r2, #32
 800975a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2200      	movs	r2, #0
 8009762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	f043 0220 	orr.w	r2, r3, #32
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2200      	movs	r2, #0
 8009776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	e020      	b.n	80097c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	0c1b      	lsrs	r3, r3, #16
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b01      	cmp	r3, #1
 8009786:	d10c      	bne.n	80097a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	43da      	mvns	r2, r3
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	4013      	ands	r3, r2
 8009794:	b29b      	uxth	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	bf14      	ite	ne
 800979a:	2301      	movne	r3, #1
 800979c:	2300      	moveq	r3, #0
 800979e:	b2db      	uxtb	r3, r3
 80097a0:	e00b      	b.n	80097ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	43da      	mvns	r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4013      	ands	r3, r2
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d18d      	bne.n	80096da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097d4:	e02d      	b.n	8009832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f8ce 	bl	8009978 <I2C_IsAcknowledgeFailed>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d001      	beq.n	80097e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e02d      	b.n	8009842 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ec:	d021      	beq.n	8009832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ee:	f7fd fc51 	bl	8007094 <HAL_GetTick>
 80097f2:	4602      	mov	r2, r0
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	68ba      	ldr	r2, [r7, #8]
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d302      	bcc.n	8009804 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d116      	bne.n	8009832 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2220      	movs	r2, #32
 800980e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	f043 0220 	orr.w	r2, r3, #32
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2200      	movs	r2, #0
 800982a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e007      	b.n	8009842 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	695b      	ldr	r3, [r3, #20]
 8009838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800983c:	2b80      	cmp	r3, #128	; 0x80
 800983e:	d1ca      	bne.n	80097d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	60f8      	str	r0, [r7, #12]
 8009852:	60b9      	str	r1, [r7, #8]
 8009854:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009856:	e02d      	b.n	80098b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 f88d 	bl	8009978 <I2C_IsAcknowledgeFailed>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e02d      	b.n	80098c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800986e:	d021      	beq.n	80098b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009870:	f7fd fc10 	bl	8007094 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	429a      	cmp	r2, r3
 800987e:	d302      	bcc.n	8009886 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d116      	bne.n	80098b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2200      	movs	r2, #0
 800988a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	2220      	movs	r2, #32
 8009890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098a0:	f043 0220 	orr.w	r2, r3, #32
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e007      	b.n	80098c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	f003 0304 	and.w	r3, r3, #4
 80098be:	2b04      	cmp	r3, #4
 80098c0:	d1ca      	bne.n	8009858 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3710      	adds	r7, #16
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80098d8:	e042      	b.n	8009960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	695b      	ldr	r3, [r3, #20]
 80098e0:	f003 0310 	and.w	r3, r3, #16
 80098e4:	2b10      	cmp	r3, #16
 80098e6:	d119      	bne.n	800991c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f06f 0210 	mvn.w	r2, #16
 80098f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2200      	movs	r2, #0
 80098f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e029      	b.n	8009970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800991c:	f7fd fbba 	bl	8007094 <HAL_GetTick>
 8009920:	4602      	mov	r2, r0
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	1ad3      	subs	r3, r2, r3
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	429a      	cmp	r2, r3
 800992a:	d302      	bcc.n	8009932 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d116      	bne.n	8009960 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800994c:	f043 0220 	orr.w	r2, r3, #32
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	e007      	b.n	8009970 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
 8009966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800996a:	2b40      	cmp	r3, #64	; 0x40
 800996c:	d1b5      	bne.n	80098da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009978:	b480      	push	{r7}
 800997a:	b083      	sub	sp, #12
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800998a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800998e:	d11b      	bne.n	80099c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009998:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b4:	f043 0204 	orr.w	r2, r3, #4
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80099d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099d8:	b08f      	sub	sp, #60	; 0x3c
 80099da:	af0a      	add	r7, sp, #40	; 0x28
 80099dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d101      	bne.n	80099e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	e10f      	b.n	8009c08 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d106      	bne.n	8009a08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2200      	movs	r2, #0
 80099fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f00e fc74 	bl	80182f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d102      	bne.n	8009a22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4618      	mov	r0, r3
 8009a28:	f004 f80d 	bl	800da46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	603b      	str	r3, [r7, #0]
 8009a32:	687e      	ldr	r6, [r7, #4]
 8009a34:	466d      	mov	r5, sp
 8009a36:	f106 0410 	add.w	r4, r6, #16
 8009a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a4a:	1d33      	adds	r3, r6, #4
 8009a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a4e:	6838      	ldr	r0, [r7, #0]
 8009a50:	f003 fee4 	bl	800d81c <USB_CoreInit>
 8009a54:	4603      	mov	r3, r0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d005      	beq.n	8009a66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2202      	movs	r2, #2
 8009a5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009a62:	2301      	movs	r3, #1
 8009a64:	e0d0      	b.n	8009c08 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f003 fffb 	bl	800da68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a72:	2300      	movs	r3, #0
 8009a74:	73fb      	strb	r3, [r7, #15]
 8009a76:	e04a      	b.n	8009b0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009a78:	7bfa      	ldrb	r2, [r7, #15]
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	333d      	adds	r3, #61	; 0x3d
 8009a88:	2201      	movs	r2, #1
 8009a8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009a8c:	7bfa      	ldrb	r2, [r7, #15]
 8009a8e:	6879      	ldr	r1, [r7, #4]
 8009a90:	4613      	mov	r3, r2
 8009a92:	00db      	lsls	r3, r3, #3
 8009a94:	1a9b      	subs	r3, r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	333c      	adds	r3, #60	; 0x3c
 8009a9c:	7bfa      	ldrb	r2, [r7, #15]
 8009a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009aa0:	7bfa      	ldrb	r2, [r7, #15]
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	b298      	uxth	r0, r3
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	3342      	adds	r3, #66	; 0x42
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ab8:	7bfa      	ldrb	r2, [r7, #15]
 8009aba:	6879      	ldr	r1, [r7, #4]
 8009abc:	4613      	mov	r3, r2
 8009abe:	00db      	lsls	r3, r3, #3
 8009ac0:	1a9b      	subs	r3, r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	440b      	add	r3, r1
 8009ac6:	333f      	adds	r3, #63	; 0x3f
 8009ac8:	2200      	movs	r2, #0
 8009aca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009acc:	7bfa      	ldrb	r2, [r7, #15]
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	00db      	lsls	r3, r3, #3
 8009ad4:	1a9b      	subs	r3, r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	3344      	adds	r3, #68	; 0x44
 8009adc:	2200      	movs	r2, #0
 8009ade:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ae0:	7bfa      	ldrb	r2, [r7, #15]
 8009ae2:	6879      	ldr	r1, [r7, #4]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	00db      	lsls	r3, r3, #3
 8009ae8:	1a9b      	subs	r3, r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	440b      	add	r3, r1
 8009aee:	3348      	adds	r3, #72	; 0x48
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009af4:	7bfa      	ldrb	r2, [r7, #15]
 8009af6:	6879      	ldr	r1, [r7, #4]
 8009af8:	4613      	mov	r3, r2
 8009afa:	00db      	lsls	r3, r3, #3
 8009afc:	1a9b      	subs	r3, r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	440b      	add	r3, r1
 8009b02:	3350      	adds	r3, #80	; 0x50
 8009b04:	2200      	movs	r2, #0
 8009b06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b08:	7bfb      	ldrb	r3, [r7, #15]
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	73fb      	strb	r3, [r7, #15]
 8009b0e:	7bfa      	ldrb	r2, [r7, #15]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d3af      	bcc.n	8009a78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b18:	2300      	movs	r3, #0
 8009b1a:	73fb      	strb	r3, [r7, #15]
 8009b1c:	e044      	b.n	8009ba8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009b1e:	7bfa      	ldrb	r2, [r7, #15]
 8009b20:	6879      	ldr	r1, [r7, #4]
 8009b22:	4613      	mov	r3, r2
 8009b24:	00db      	lsls	r3, r3, #3
 8009b26:	1a9b      	subs	r3, r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	440b      	add	r3, r1
 8009b2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009b30:	2200      	movs	r2, #0
 8009b32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009b34:	7bfa      	ldrb	r2, [r7, #15]
 8009b36:	6879      	ldr	r1, [r7, #4]
 8009b38:	4613      	mov	r3, r2
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	1a9b      	subs	r3, r3, r2
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	440b      	add	r3, r1
 8009b42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009b46:	7bfa      	ldrb	r2, [r7, #15]
 8009b48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009b4a:	7bfa      	ldrb	r2, [r7, #15]
 8009b4c:	6879      	ldr	r1, [r7, #4]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	00db      	lsls	r3, r3, #3
 8009b52:	1a9b      	subs	r3, r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	440b      	add	r3, r1
 8009b58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009b60:	7bfa      	ldrb	r2, [r7, #15]
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4613      	mov	r3, r2
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	1a9b      	subs	r3, r3, r2
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	440b      	add	r3, r1
 8009b6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009b76:	7bfa      	ldrb	r2, [r7, #15]
 8009b78:	6879      	ldr	r1, [r7, #4]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	00db      	lsls	r3, r3, #3
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009b8c:	7bfa      	ldrb	r2, [r7, #15]
 8009b8e:	6879      	ldr	r1, [r7, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	00db      	lsls	r3, r3, #3
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	440b      	add	r3, r1
 8009b9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	73fb      	strb	r3, [r7, #15]
 8009ba8:	7bfa      	ldrb	r2, [r7, #15]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d3b5      	bcc.n	8009b1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	603b      	str	r3, [r7, #0]
 8009bb8:	687e      	ldr	r6, [r7, #4]
 8009bba:	466d      	mov	r5, sp
 8009bbc:	f106 0410 	add.w	r4, r6, #16
 8009bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009bcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8009bd0:	1d33      	adds	r3, r6, #4
 8009bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009bd4:	6838      	ldr	r0, [r7, #0]
 8009bd6:	f003 ff93 	bl	800db00 <USB_DevInit>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d005      	beq.n	8009bec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2202      	movs	r2, #2
 8009be4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009be8:	2301      	movs	r3, #1
 8009bea:	e00d      	b.n	8009c08 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4618      	mov	r0, r3
 8009c02:	f005 f80f 	bl	800ec24 <USB_DevDisconnect>

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_PCD_Start+0x1c>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e020      	b.n	8009c6e <HAL_PCD_Start+0x5e>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d109      	bne.n	8009c50 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d005      	beq.n	8009c50 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4618      	mov	r0, r3
 8009c56:	f003 fee5 	bl	800da24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f004 ffbf 	bl	800ebe2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009c76:	b590      	push	{r4, r7, lr}
 8009c78:	b08d      	sub	sp, #52	; 0x34
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c84:	6a3b      	ldr	r3, [r7, #32]
 8009c86:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f005 f87d 	bl	800ed8c <USB_GetMode>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	f040 839d 	bne.w	800a3d4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	f004 ffe1 	bl	800ec66 <USB_ReadInterrupts>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f000 8393 	beq.w	800a3d2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f004 ffd8 	bl	800ec66 <USB_ReadInterrupts>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	f003 0302 	and.w	r3, r3, #2
 8009cbc:	2b02      	cmp	r3, #2
 8009cbe:	d107      	bne.n	8009cd0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	695a      	ldr	r2, [r3, #20]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f002 0202 	and.w	r2, r2, #2
 8009cce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f004 ffc6 	bl	800ec66 <USB_ReadInterrupts>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d161      	bne.n	8009da8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	699a      	ldr	r2, [r3, #24]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f022 0210 	bic.w	r2, r2, #16
 8009cf2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	6a1b      	ldr	r3, [r3, #32]
 8009cf8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	f003 020f 	and.w	r2, r3, #15
 8009d00:	4613      	mov	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009d0c:	687a      	ldr	r2, [r7, #4]
 8009d0e:	4413      	add	r3, r2
 8009d10:	3304      	adds	r3, #4
 8009d12:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009d14:	69bb      	ldr	r3, [r7, #24]
 8009d16:	0c5b      	lsrs	r3, r3, #17
 8009d18:	f003 030f 	and.w	r3, r3, #15
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d124      	bne.n	8009d6a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009d20:	69ba      	ldr	r2, [r7, #24]
 8009d22:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009d26:	4013      	ands	r3, r2
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d035      	beq.n	8009d98 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009d30:	69bb      	ldr	r3, [r7, #24]
 8009d32:	091b      	lsrs	r3, r3, #4
 8009d34:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	6a38      	ldr	r0, [r7, #32]
 8009d40:	f004 fdfd 	bl	800e93e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	091b      	lsrs	r3, r3, #4
 8009d4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d50:	441a      	add	r2, r3
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	091b      	lsrs	r3, r3, #4
 8009d5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d62:	441a      	add	r2, r3
 8009d64:	697b      	ldr	r3, [r7, #20]
 8009d66:	619a      	str	r2, [r3, #24]
 8009d68:	e016      	b.n	8009d98 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	0c5b      	lsrs	r3, r3, #17
 8009d6e:	f003 030f 	and.w	r3, r3, #15
 8009d72:	2b06      	cmp	r3, #6
 8009d74:	d110      	bne.n	8009d98 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d7c:	2208      	movs	r2, #8
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6a38      	ldr	r0, [r7, #32]
 8009d82:	f004 fddc 	bl	800e93e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	091b      	lsrs	r3, r3, #4
 8009d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d92:	441a      	add	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	699a      	ldr	r2, [r3, #24]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f042 0210 	orr.w	r2, r2, #16
 8009da6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4618      	mov	r0, r3
 8009dae:	f004 ff5a 	bl	800ec66 <USB_ReadInterrupts>
 8009db2:	4603      	mov	r3, r0
 8009db4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009db8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009dbc:	d16e      	bne.n	8009e9c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f004 ff60 	bl	800ec8c <USB_ReadDevAllOutEpInterrupt>
 8009dcc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009dce:	e062      	b.n	8009e96 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d057      	beq.n	8009e8a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de0:	b2d2      	uxtb	r2, r2
 8009de2:	4611      	mov	r1, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f004 ff85 	bl	800ecf4 <USB_ReadDevOutEPInterrupt>
 8009dea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d00c      	beq.n	8009e10 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e02:	461a      	mov	r2, r3
 8009e04:	2301      	movs	r3, #1
 8009e06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009e08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fdb0 	bl	800a970 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	f003 0308 	and.w	r3, r3, #8
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00c      	beq.n	8009e34 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	015a      	lsls	r2, r3, #5
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	4413      	add	r3, r2
 8009e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e26:	461a      	mov	r2, r3
 8009e28:	2308      	movs	r3, #8
 8009e2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 feaa 	bl	800ab88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f003 0310 	and.w	r3, r3, #16
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2310      	movs	r3, #16
 8009e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f003 0320 	and.w	r3, r3, #32
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d008      	beq.n	8009e6c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e66:	461a      	mov	r2, r3
 8009e68:	2320      	movs	r3, #32
 8009e6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d009      	beq.n	8009e8a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e82:	461a      	mov	r2, r3
 8009e84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	3301      	adds	r3, #1
 8009e8e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e92:	085b      	lsrs	r3, r3, #1
 8009e94:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d199      	bne.n	8009dd0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f004 fee0 	bl	800ec66 <USB_ReadInterrupts>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009eb0:	f040 80c0 	bne.w	800a034 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f004 ff01 	bl	800ecc0 <USB_ReadDevAllInEpInterrupt>
 8009ebe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009ec4:	e0b2      	b.n	800a02c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec8:	f003 0301 	and.w	r3, r3, #1
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f000 80a7 	beq.w	800a020 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ed8:	b2d2      	uxtb	r2, r2
 8009eda:	4611      	mov	r1, r2
 8009edc:	4618      	mov	r0, r3
 8009ede:	f004 ff27 	bl	800ed30 <USB_ReadDevInEPInterrupt>
 8009ee2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	f003 0301 	and.w	r3, r3, #1
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d057      	beq.n	8009f9e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8009efa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	43db      	mvns	r3, r3
 8009f08:	69f9      	ldr	r1, [r7, #28]
 8009f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f0e:	4013      	ands	r3, r2
 8009f10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f14:	015a      	lsls	r2, r3, #5
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	4413      	add	r3, r2
 8009f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f1e:	461a      	mov	r2, r3
 8009f20:	2301      	movs	r3, #1
 8009f22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	691b      	ldr	r3, [r3, #16]
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d132      	bne.n	8009f92 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f30:	4613      	mov	r3, r2
 8009f32:	00db      	lsls	r3, r3, #3
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	3348      	adds	r3, #72	; 0x48
 8009f3c:	6819      	ldr	r1, [r3, #0]
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f42:	4613      	mov	r3, r2
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	1a9b      	subs	r3, r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	4403      	add	r3, r0
 8009f4c:	3344      	adds	r3, #68	; 0x44
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4419      	add	r1, r3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f56:	4613      	mov	r3, r2
 8009f58:	00db      	lsls	r3, r3, #3
 8009f5a:	1a9b      	subs	r3, r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4403      	add	r3, r0
 8009f60:	3348      	adds	r3, #72	; 0x48
 8009f62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d113      	bne.n	8009f92 <HAL_PCD_IRQHandler+0x31c>
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f6e:	4613      	mov	r3, r2
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	440b      	add	r3, r1
 8009f78:	3350      	adds	r3, #80	; 0x50
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d108      	bne.n	8009f92 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	f004 ff2f 	bl	800edf0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f00e fa38 	bl	801840e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	f003 0308 	and.w	r3, r3, #8
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d008      	beq.n	8009fba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	2308      	movs	r3, #8
 8009fb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d008      	beq.n	8009fd6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	69fb      	ldr	r3, [r7, #28]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	2310      	movs	r3, #16
 8009fd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d008      	beq.n	8009ff2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fec:	461a      	mov	r2, r3
 8009fee:	2340      	movs	r3, #64	; 0x40
 8009ff0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d008      	beq.n	800a00e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a008:	461a      	mov	r2, r3
 800a00a:	2302      	movs	r3, #2
 800a00c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a014:	2b00      	cmp	r3, #0
 800a016:	d003      	beq.n	800a020 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 fc1b 	bl	800a856 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a022:	3301      	adds	r3, #1
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a028:	085b      	lsrs	r3, r3, #1
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	2b00      	cmp	r3, #0
 800a030:	f47f af49 	bne.w	8009ec6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4618      	mov	r0, r3
 800a03a:	f004 fe14 	bl	800ec66 <USB_ReadInterrupts>
 800a03e:	4603      	mov	r3, r0
 800a040:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a044:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a048:	d122      	bne.n	800a090 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a058:	f023 0301 	bic.w	r3, r3, #1
 800a05c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a064:	2b01      	cmp	r3, #1
 800a066:	d108      	bne.n	800a07a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a070:	2100      	movs	r1, #0
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 fe26 	bl	800acc4 <HAL_PCDEx_LPM_Callback>
 800a078:	e002      	b.n	800a080 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f00e fa3e 	bl	80184fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	695a      	ldr	r2, [r3, #20]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a08e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4618      	mov	r0, r3
 800a096:	f004 fde6 	bl	800ec66 <USB_ReadInterrupts>
 800a09a:	4603      	mov	r3, r0
 800a09c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a0a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a0a4:	d112      	bne.n	800a0cc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 0301 	and.w	r3, r3, #1
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d102      	bne.n	800a0bc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f00e f9fa 	bl	80184b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	695a      	ldr	r2, [r3, #20]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a0ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f004 fdc8 	bl	800ec66 <USB_ReadInterrupts>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0e0:	f040 80c7 	bne.w	800a272 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a0e4:	69fb      	ldr	r3, [r7, #28]
 800a0e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ea:	685b      	ldr	r3, [r3, #4]
 800a0ec:	69fa      	ldr	r2, [r7, #28]
 800a0ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0f2:	f023 0301 	bic.w	r3, r3, #1
 800a0f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2110      	movs	r1, #16
 800a0fe:	4618      	mov	r0, r3
 800a100:	f003 fe62 	bl	800ddc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a104:	2300      	movs	r3, #0
 800a106:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a108:	e056      	b.n	800a1b8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a116:	461a      	mov	r2, r3
 800a118:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a11c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a11e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a120:	015a      	lsls	r2, r3, #5
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	4413      	add	r3, r2
 800a126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a12e:	0151      	lsls	r1, r2, #5
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	440a      	add	r2, r1
 800a134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a138:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a13c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	015a      	lsls	r2, r3, #5
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a14e:	0151      	lsls	r1, r2, #5
 800a150:	69fa      	ldr	r2, [r7, #28]
 800a152:	440a      	add	r2, r1
 800a154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a158:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a15c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16a:	461a      	mov	r2, r3
 800a16c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a170:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a182:	0151      	lsls	r1, r2, #5
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	440a      	add	r2, r1
 800a188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a18c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a190:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	69fb      	ldr	r3, [r7, #28]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a2:	0151      	lsls	r1, r2, #5
 800a1a4:	69fa      	ldr	r2, [r7, #28]
 800a1a6:	440a      	add	r2, r1
 800a1a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b4:	3301      	adds	r3, #1
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d3a3      	bcc.n	800a10a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a1c2:	69fb      	ldr	r3, [r7, #28]
 800a1c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c8:	69db      	ldr	r3, [r3, #28]
 800a1ca:	69fa      	ldr	r2, [r7, #28]
 800a1cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a1d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d016      	beq.n	800a20c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a1de:	69fb      	ldr	r3, [r7, #28]
 800a1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1e8:	69fa      	ldr	r2, [r7, #28]
 800a1ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1ee:	f043 030b 	orr.w	r3, r3, #11
 800a1f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fe:	69fa      	ldr	r2, [r7, #28]
 800a200:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a204:	f043 030b 	orr.w	r3, r3, #11
 800a208:	6453      	str	r3, [r2, #68]	; 0x44
 800a20a:	e015      	b.n	800a238 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	69fa      	ldr	r2, [r7, #28]
 800a216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a21a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a21e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a222:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a232:	f043 030b 	orr.w	r3, r3, #11
 800a236:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	69fa      	ldr	r2, [r7, #28]
 800a242:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a246:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a24a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6818      	ldr	r0, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a25c:	461a      	mov	r2, r3
 800a25e:	f004 fdc7 	bl	800edf0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	695a      	ldr	r2, [r3, #20]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a270:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4618      	mov	r0, r3
 800a278:	f004 fcf5 	bl	800ec66 <USB_ReadInterrupts>
 800a27c:	4603      	mov	r3, r0
 800a27e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a286:	d124      	bne.n	800a2d2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f004 fd8b 	bl	800eda8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4618      	mov	r0, r3
 800a298:	f003 fdf3 	bl	800de82 <USB_GetDevSpeed>
 800a29c:	4603      	mov	r3, r0
 800a29e:	461a      	mov	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681c      	ldr	r4, [r3, #0]
 800a2a8:	f001 f958 	bl	800b55c <HAL_RCC_GetHCLKFreq>
 800a2ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2b2:	b2db      	uxtb	r3, r3
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f003 fb12 	bl	800d8e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f00e f8ce 	bl	801845e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	695a      	ldr	r2, [r3, #20]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a2d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f004 fcc5 	bl	800ec66 <USB_ReadInterrupts>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	f003 0308 	and.w	r3, r3, #8
 800a2e2:	2b08      	cmp	r3, #8
 800a2e4:	d10a      	bne.n	800a2fc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f00e f8ab 	bl	8018442 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	695a      	ldr	r2, [r3, #20]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f002 0208 	and.w	r2, r2, #8
 800a2fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4618      	mov	r0, r3
 800a302:	f004 fcb0 	bl	800ec66 <USB_ReadInterrupts>
 800a306:	4603      	mov	r3, r0
 800a308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a30c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a310:	d10f      	bne.n	800a332 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a312:	2300      	movs	r3, #0
 800a314:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	4619      	mov	r1, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f00e f90d 	bl	801853c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	695a      	ldr	r2, [r3, #20]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a330:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f004 fc95 	bl	800ec66 <USB_ReadInterrupts>
 800a33c:	4603      	mov	r3, r0
 800a33e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a342:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a346:	d10f      	bne.n	800a368 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	b2db      	uxtb	r3, r3
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f00e f8e0 	bl	8018518 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	695a      	ldr	r2, [r3, #20]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f004 fc7a 	bl	800ec66 <USB_ReadInterrupts>
 800a372:	4603      	mov	r3, r0
 800a374:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a37c:	d10a      	bne.n	800a394 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f00e f8ee 	bl	8018560 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	695a      	ldr	r2, [r3, #20]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a392:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4618      	mov	r0, r3
 800a39a:	f004 fc64 	bl	800ec66 <USB_ReadInterrupts>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d115      	bne.n	800a3d4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	f003 0304 	and.w	r3, r3, #4
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d002      	beq.n	800a3c0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f00e f8de 	bl	801857c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6859      	ldr	r1, [r3, #4]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	69ba      	ldr	r2, [r7, #24]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	605a      	str	r2, [r3, #4]
 800a3d0:	e000      	b.n	800a3d4 <HAL_PCD_IRQHandler+0x75e>
      return;
 800a3d2:	bf00      	nop
    }
  }
}
 800a3d4:	3734      	adds	r7, #52	; 0x34
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd90      	pop	{r4, r7, pc}

0800a3da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b082      	sub	sp, #8
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d101      	bne.n	800a3f4 <HAL_PCD_SetAddress+0x1a>
 800a3f0:	2302      	movs	r3, #2
 800a3f2:	e013      	b.n	800a41c <HAL_PCD_SetAddress+0x42>
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	78fa      	ldrb	r2, [r7, #3]
 800a40a:	4611      	mov	r1, r2
 800a40c:	4618      	mov	r0, r3
 800a40e:	f004 fbc2 	bl	800eb96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3708      	adds	r7, #8
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}

0800a424 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b084      	sub	sp, #16
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	4608      	mov	r0, r1
 800a42e:	4611      	mov	r1, r2
 800a430:	461a      	mov	r2, r3
 800a432:	4603      	mov	r3, r0
 800a434:	70fb      	strb	r3, [r7, #3]
 800a436:	460b      	mov	r3, r1
 800a438:	803b      	strh	r3, [r7, #0]
 800a43a:	4613      	mov	r3, r2
 800a43c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a446:	2b00      	cmp	r3, #0
 800a448:	da0f      	bge.n	800a46a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a44a:	78fb      	ldrb	r3, [r7, #3]
 800a44c:	f003 020f 	and.w	r2, r3, #15
 800a450:	4613      	mov	r3, r2
 800a452:	00db      	lsls	r3, r3, #3
 800a454:	1a9b      	subs	r3, r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	3338      	adds	r3, #56	; 0x38
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	3304      	adds	r3, #4
 800a460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2201      	movs	r2, #1
 800a466:	705a      	strb	r2, [r3, #1]
 800a468:	e00f      	b.n	800a48a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a46a:	78fb      	ldrb	r3, [r7, #3]
 800a46c:	f003 020f 	and.w	r2, r3, #15
 800a470:	4613      	mov	r3, r2
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	4413      	add	r3, r2
 800a480:	3304      	adds	r3, #4
 800a482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a48a:	78fb      	ldrb	r3, [r7, #3]
 800a48c:	f003 030f 	and.w	r3, r3, #15
 800a490:	b2da      	uxtb	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a496:	883a      	ldrh	r2, [r7, #0]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	78ba      	ldrb	r2, [r7, #2]
 800a4a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	785b      	ldrb	r3, [r3, #1]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	781b      	ldrb	r3, [r3, #0]
 800a4ae:	b29a      	uxth	r2, r3
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a4b4:	78bb      	ldrb	r3, [r7, #2]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d102      	bne.n	800a4c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d101      	bne.n	800a4ce <HAL_PCD_EP_Open+0xaa>
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	e00e      	b.n	800a4ec <HAL_PCD_EP_Open+0xc8>
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	68f9      	ldr	r1, [r7, #12]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f003 fcf5 	bl	800decc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a4ea:	7afb      	ldrb	r3, [r7, #11]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3710      	adds	r7, #16
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a500:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a504:	2b00      	cmp	r3, #0
 800a506:	da0f      	bge.n	800a528 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a508:	78fb      	ldrb	r3, [r7, #3]
 800a50a:	f003 020f 	and.w	r2, r3, #15
 800a50e:	4613      	mov	r3, r2
 800a510:	00db      	lsls	r3, r3, #3
 800a512:	1a9b      	subs	r3, r3, r2
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	3338      	adds	r3, #56	; 0x38
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	4413      	add	r3, r2
 800a51c:	3304      	adds	r3, #4
 800a51e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2201      	movs	r2, #1
 800a524:	705a      	strb	r2, [r3, #1]
 800a526:	e00f      	b.n	800a548 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a528:	78fb      	ldrb	r3, [r7, #3]
 800a52a:	f003 020f 	and.w	r2, r3, #15
 800a52e:	4613      	mov	r3, r2
 800a530:	00db      	lsls	r3, r3, #3
 800a532:	1a9b      	subs	r3, r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	4413      	add	r3, r2
 800a53e:	3304      	adds	r3, #4
 800a540:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2200      	movs	r2, #0
 800a546:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a548:	78fb      	ldrb	r3, [r7, #3]
 800a54a:	f003 030f 	and.w	r3, r3, #15
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d101      	bne.n	800a562 <HAL_PCD_EP_Close+0x6e>
 800a55e:	2302      	movs	r3, #2
 800a560:	e00e      	b.n	800a580 <HAL_PCD_EP_Close+0x8c>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68f9      	ldr	r1, [r7, #12]
 800a570:	4618      	mov	r0, r3
 800a572:	f003 fd33 	bl	800dfdc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	2200      	movs	r2, #0
 800a57a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a57e:	2300      	movs	r3, #0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}

0800a588 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b086      	sub	sp, #24
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	60f8      	str	r0, [r7, #12]
 800a590:	607a      	str	r2, [r7, #4]
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	460b      	mov	r3, r1
 800a596:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	f003 020f 	and.w	r2, r3, #15
 800a59e:	4613      	mov	r3, r2
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	1a9b      	subs	r3, r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a5aa:	68fa      	ldr	r2, [r7, #12]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5ca:	7afb      	ldrb	r3, [r7, #11]
 800a5cc:	f003 030f 	and.w	r3, r3, #15
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d102      	bne.n	800a5e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a5de:	687a      	ldr	r2, [r7, #4]
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5e4:	7afb      	ldrb	r3, [r7, #11]
 800a5e6:	f003 030f 	and.w	r3, r3, #15
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6979      	ldr	r1, [r7, #20]
 800a5fc:	f004 f80e 	bl	800e61c <USB_EP0StartXfer>
 800a600:	e008      	b.n	800a614 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	691b      	ldr	r3, [r3, #16]
 800a60a:	b2db      	uxtb	r3, r3
 800a60c:	461a      	mov	r2, r3
 800a60e:	6979      	ldr	r1, [r7, #20]
 800a610:	f003 fdc0 	bl	800e194 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a614:	2300      	movs	r3, #0
}
 800a616:	4618      	mov	r0, r3
 800a618:	3718      	adds	r7, #24
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a61e:	b480      	push	{r7}
 800a620:	b083      	sub	sp, #12
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	460b      	mov	r3, r1
 800a628:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a62a:	78fb      	ldrb	r3, [r7, #3]
 800a62c:	f003 020f 	and.w	r2, r3, #15
 800a630:	6879      	ldr	r1, [r7, #4]
 800a632:	4613      	mov	r3, r2
 800a634:	00db      	lsls	r3, r3, #3
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	009b      	lsls	r3, r3, #2
 800a63a:	440b      	add	r3, r1
 800a63c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a640:	681b      	ldr	r3, [r3, #0]
}
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr

0800a64e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a64e:	b580      	push	{r7, lr}
 800a650:	b086      	sub	sp, #24
 800a652:	af00      	add	r7, sp, #0
 800a654:	60f8      	str	r0, [r7, #12]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
 800a65a:	460b      	mov	r3, r1
 800a65c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a65e:	7afb      	ldrb	r3, [r7, #11]
 800a660:	f003 020f 	and.w	r2, r3, #15
 800a664:	4613      	mov	r3, r2
 800a666:	00db      	lsls	r3, r3, #3
 800a668:	1a9b      	subs	r3, r3, r2
 800a66a:	009b      	lsls	r3, r3, #2
 800a66c:	3338      	adds	r3, #56	; 0x38
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	3304      	adds	r3, #4
 800a674:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	687a      	ldr	r2, [r7, #4]
 800a67a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	2200      	movs	r2, #0
 800a686:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	2201      	movs	r2, #1
 800a68c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a68e:	7afb      	ldrb	r3, [r7, #11]
 800a690:	f003 030f 	and.w	r3, r3, #15
 800a694:	b2da      	uxtb	r2, r3
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d102      	bne.n	800a6a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6a8:	7afb      	ldrb	r3, [r7, #11]
 800a6aa:	f003 030f 	and.w	r3, r3, #15
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6979      	ldr	r1, [r7, #20]
 800a6c0:	f003 ffac 	bl	800e61c <USB_EP0StartXfer>
 800a6c4:	e008      	b.n	800a6d8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	691b      	ldr	r3, [r3, #16]
 800a6ce:	b2db      	uxtb	r3, r3
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	6979      	ldr	r1, [r7, #20]
 800a6d4:	f003 fd5e 	bl	800e194 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}

0800a6e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a6ee:	78fb      	ldrb	r3, [r7, #3]
 800a6f0:	f003 020f 	and.w	r2, r3, #15
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d901      	bls.n	800a700 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e050      	b.n	800a7a2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a704:	2b00      	cmp	r3, #0
 800a706:	da0f      	bge.n	800a728 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a708:	78fb      	ldrb	r3, [r7, #3]
 800a70a:	f003 020f 	and.w	r2, r3, #15
 800a70e:	4613      	mov	r3, r2
 800a710:	00db      	lsls	r3, r3, #3
 800a712:	1a9b      	subs	r3, r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	3338      	adds	r3, #56	; 0x38
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	4413      	add	r3, r2
 800a71c:	3304      	adds	r3, #4
 800a71e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2201      	movs	r2, #1
 800a724:	705a      	strb	r2, [r3, #1]
 800a726:	e00d      	b.n	800a744 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a728:	78fa      	ldrb	r2, [r7, #3]
 800a72a:	4613      	mov	r3, r2
 800a72c:	00db      	lsls	r3, r3, #3
 800a72e:	1a9b      	subs	r3, r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	4413      	add	r3, r2
 800a73a:	3304      	adds	r3, #4
 800a73c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	2200      	movs	r2, #0
 800a742:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2201      	movs	r2, #1
 800a748:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a74a:	78fb      	ldrb	r3, [r7, #3]
 800a74c:	f003 030f 	and.w	r3, r3, #15
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d101      	bne.n	800a764 <HAL_PCD_EP_SetStall+0x82>
 800a760:	2302      	movs	r3, #2
 800a762:	e01e      	b.n	800a7a2 <HAL_PCD_EP_SetStall+0xc0>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68f9      	ldr	r1, [r7, #12]
 800a772:	4618      	mov	r0, r3
 800a774:	f004 f93b 	bl	800e9ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a778:	78fb      	ldrb	r3, [r7, #3]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d10a      	bne.n	800a798 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	b2d9      	uxtb	r1, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a792:	461a      	mov	r2, r3
 800a794:	f004 fb2c 	bl	800edf0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3710      	adds	r7, #16
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a7b6:	78fb      	ldrb	r3, [r7, #3]
 800a7b8:	f003 020f 	and.w	r2, r3, #15
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d901      	bls.n	800a7c8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	e042      	b.n	800a84e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a7c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da0f      	bge.n	800a7f0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	f003 020f 	and.w	r2, r3, #15
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	1a9b      	subs	r3, r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	3338      	adds	r3, #56	; 0x38
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2201      	movs	r2, #1
 800a7ec:	705a      	strb	r2, [r3, #1]
 800a7ee:	e00f      	b.n	800a810 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7f0:	78fb      	ldrb	r3, [r7, #3]
 800a7f2:	f003 020f 	and.w	r2, r3, #15
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	00db      	lsls	r3, r3, #3
 800a7fa:	1a9b      	subs	r3, r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	4413      	add	r3, r2
 800a806:	3304      	adds	r3, #4
 800a808:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2200      	movs	r2, #0
 800a80e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a816:	78fb      	ldrb	r3, [r7, #3]
 800a818:	f003 030f 	and.w	r3, r3, #15
 800a81c:	b2da      	uxtb	r2, r3
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d101      	bne.n	800a830 <HAL_PCD_EP_ClrStall+0x86>
 800a82c:	2302      	movs	r3, #2
 800a82e:	e00e      	b.n	800a84e <HAL_PCD_EP_ClrStall+0xa4>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68f9      	ldr	r1, [r7, #12]
 800a83e:	4618      	mov	r0, r3
 800a840:	f004 f943 	bl	800eaca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}

0800a856 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b08a      	sub	sp, #40	; 0x28
 800a85a:	af02      	add	r7, sp, #8
 800a85c:	6078      	str	r0, [r7, #4]
 800a85e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a86a:	683a      	ldr	r2, [r7, #0]
 800a86c:	4613      	mov	r3, r2
 800a86e:	00db      	lsls	r3, r3, #3
 800a870:	1a9b      	subs	r3, r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	3338      	adds	r3, #56	; 0x38
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	4413      	add	r3, r2
 800a87a:	3304      	adds	r3, #4
 800a87c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	699a      	ldr	r2, [r3, #24]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	429a      	cmp	r2, r3
 800a888:	d901      	bls.n	800a88e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e06c      	b.n	800a968 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	695a      	ldr	r2, [r3, #20]
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	1ad3      	subs	r3, r2, r3
 800a898:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	689b      	ldr	r3, [r3, #8]
 800a89e:	69fa      	ldr	r2, [r7, #28]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d902      	bls.n	800a8aa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	3303      	adds	r3, #3
 800a8ae:	089b      	lsrs	r3, r3, #2
 800a8b0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8b2:	e02b      	b.n	800a90c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	695a      	ldr	r2, [r3, #20]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	699b      	ldr	r3, [r3, #24]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d902      	bls.n	800a8d0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a8d0:	69fb      	ldr	r3, [r7, #28]
 800a8d2:	3303      	adds	r3, #3
 800a8d4:	089b      	lsrs	r3, r3, #2
 800a8d6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68d9      	ldr	r1, [r3, #12]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	6978      	ldr	r0, [r7, #20]
 800a8f0:	f003 ffe7 	bl	800e8c2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	68da      	ldr	r2, [r3, #12]
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	441a      	add	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	699a      	ldr	r2, [r3, #24]
 800a904:	69fb      	ldr	r3, [r7, #28]
 800a906:	441a      	add	r2, r3
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	69ba      	ldr	r2, [r7, #24]
 800a91e:	429a      	cmp	r2, r3
 800a920:	d809      	bhi.n	800a936 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	699a      	ldr	r2, [r3, #24]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d203      	bcs.n	800a936 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d1be      	bne.n	800a8b4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	695a      	ldr	r2, [r3, #20]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	699b      	ldr	r3, [r3, #24]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d811      	bhi.n	800a966 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	f003 030f 	and.w	r3, r3, #15
 800a948:	2201      	movs	r2, #1
 800a94a:	fa02 f303 	lsl.w	r3, r2, r3
 800a94e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	43db      	mvns	r3, r3
 800a95c:	6939      	ldr	r1, [r7, #16]
 800a95e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a962:	4013      	ands	r3, r2
 800a964:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3720      	adds	r7, #32
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	333c      	adds	r3, #60	; 0x3c
 800a988:	3304      	adds	r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	015a      	lsls	r2, r3, #5
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	4413      	add	r3, r2
 800a996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	f040 80a0 	bne.w	800aae8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	f003 0308 	and.w	r3, r3, #8
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d015      	beq.n	800a9de <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4a72      	ldr	r2, [pc, #456]	; (800ab80 <PCD_EP_OutXfrComplete_int+0x210>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	f240 80dd 	bls.w	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f000 80d7 	beq.w	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	015a      	lsls	r2, r3, #5
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d4:	461a      	mov	r2, r3
 800a9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9da:	6093      	str	r3, [r2, #8]
 800a9dc:	e0cb      	b.n	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f003 0320 	and.w	r3, r3, #32
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d009      	beq.n	800a9fc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	015a      	lsls	r2, r3, #5
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	2320      	movs	r3, #32
 800a9f8:	6093      	str	r3, [r2, #8]
 800a9fa:	e0bc      	b.n	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f040 80b7 	bne.w	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4a5d      	ldr	r2, [pc, #372]	; (800ab80 <PCD_EP_OutXfrComplete_int+0x210>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d90f      	bls.n	800aa30 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa26:	461a      	mov	r2, r3
 800aa28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa2c:	6093      	str	r3, [r2, #8]
 800aa2e:	e0a2      	b.n	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa42:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	0159      	lsls	r1, r3, #5
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	440b      	add	r3, r1
 800aa4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800aa56:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4403      	add	r3, r0
 800aa66:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800aa6a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	683a      	ldr	r2, [r7, #0]
 800aa70:	4613      	mov	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	440b      	add	r3, r1
 800aa7a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa7e:	6819      	ldr	r1, [r3, #0]
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	4403      	add	r3, r0
 800aa8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4419      	add	r1, r3
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	683a      	ldr	r2, [r7, #0]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	00db      	lsls	r3, r3, #3
 800aa9e:	1a9b      	subs	r3, r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	4403      	add	r3, r0
 800aaa4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aaa8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d114      	bne.n	800aada <PCD_EP_OutXfrComplete_int+0x16a>
 800aab0:	6879      	ldr	r1, [r7, #4]
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	4613      	mov	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	1a9b      	subs	r3, r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	440b      	add	r3, r1
 800aabe:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d108      	bne.n	800aada <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6818      	ldr	r0, [r3, #0]
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aad2:	461a      	mov	r2, r3
 800aad4:	2101      	movs	r1, #1
 800aad6:	f004 f98b 	bl	800edf0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	4619      	mov	r1, r3
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f00d fc79 	bl	80183d8 <HAL_PCD_DataOutStageCallback>
 800aae6:	e046      	b.n	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4a26      	ldr	r2, [pc, #152]	; (800ab84 <PCD_EP_OutXfrComplete_int+0x214>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d124      	bne.n	800ab3a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d00a      	beq.n	800ab10 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab06:	461a      	mov	r2, r3
 800ab08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab0c:	6093      	str	r3, [r2, #8]
 800ab0e:	e032      	b.n	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab26:	461a      	mov	r2, r3
 800ab28:	2320      	movs	r3, #32
 800ab2a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	b2db      	uxtb	r3, r3
 800ab30:	4619      	mov	r1, r3
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f00d fc50 	bl	80183d8 <HAL_PCD_DataOutStageCallback>
 800ab38:	e01d      	b.n	800ab76 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d114      	bne.n	800ab6a <PCD_EP_OutXfrComplete_int+0x1fa>
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4613      	mov	r3, r2
 800ab46:	00db      	lsls	r3, r3, #3
 800ab48:	1a9b      	subs	r3, r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	440b      	add	r3, r1
 800ab4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d108      	bne.n	800ab6a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6818      	ldr	r0, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab62:	461a      	mov	r2, r3
 800ab64:	2100      	movs	r1, #0
 800ab66:	f004 f943 	bl	800edf0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	4619      	mov	r1, r3
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f00d fc31 	bl	80183d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3718      	adds	r7, #24
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	4f54300a 	.word	0x4f54300a
 800ab84:	4f54310a 	.word	0x4f54310a

0800ab88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b086      	sub	sp, #24
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	333c      	adds	r3, #60	; 0x3c
 800aba0:	3304      	adds	r3, #4
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	015a      	lsls	r2, r3, #5
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	4413      	add	r3, r2
 800abae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb2:	689b      	ldr	r3, [r3, #8]
 800abb4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	4a15      	ldr	r2, [pc, #84]	; (800ac10 <PCD_EP_OutSetupPacket_int+0x88>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d90e      	bls.n	800abdc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d009      	beq.n	800abdc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	015a      	lsls	r2, r3, #5
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	4413      	add	r3, r2
 800abd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd4:	461a      	mov	r2, r3
 800abd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800abda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f00d fbe9 	bl	80183b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	4a0a      	ldr	r2, [pc, #40]	; (800ac10 <PCD_EP_OutSetupPacket_int+0x88>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d90c      	bls.n	800ac04 <PCD_EP_OutSetupPacket_int+0x7c>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	691b      	ldr	r3, [r3, #16]
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d108      	bne.n	800ac04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6818      	ldr	r0, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800abfc:	461a      	mov	r2, r3
 800abfe:	2101      	movs	r1, #1
 800ac00:	f004 f8f6 	bl	800edf0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ac04:	2300      	movs	r3, #0
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
 800ac0e:	bf00      	nop
 800ac10:	4f54300a 	.word	0x4f54300a

0800ac14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
 800ac20:	4613      	mov	r3, r2
 800ac22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ac2c:	78fb      	ldrb	r3, [r7, #3]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d107      	bne.n	800ac42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ac32:	883b      	ldrh	r3, [r7, #0]
 800ac34:	0419      	lsls	r1, r3, #16
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	430a      	orrs	r2, r1
 800ac3e:	629a      	str	r2, [r3, #40]	; 0x28
 800ac40:	e028      	b.n	800ac94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac48:	0c1b      	lsrs	r3, r3, #16
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ac50:	2300      	movs	r3, #0
 800ac52:	73fb      	strb	r3, [r7, #15]
 800ac54:	e00d      	b.n	800ac72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	3340      	adds	r3, #64	; 0x40
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	0c1b      	lsrs	r3, r3, #16
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	4413      	add	r3, r2
 800ac6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	73fb      	strb	r3, [r7, #15]
 800ac72:	7bfa      	ldrb	r2, [r7, #15]
 800ac74:	78fb      	ldrb	r3, [r7, #3]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d3ec      	bcc.n	800ac56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ac7c:	883b      	ldrh	r3, [r7, #0]
 800ac7e:	0418      	lsls	r0, r3, #16
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6819      	ldr	r1, [r3, #0]
 800ac84:	78fb      	ldrb	r3, [r7, #3]
 800ac86:	3b01      	subs	r3, #1
 800ac88:	68ba      	ldr	r2, [r7, #8]
 800ac8a:	4302      	orrs	r2, r0
 800ac8c:	3340      	adds	r3, #64	; 0x40
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	460b      	mov	r3, r1
 800acac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	887a      	ldrh	r2, [r7, #2]
 800acb4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800acb6:	2300      	movs	r3, #0
}
 800acb8:	4618      	mov	r0, r3
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b083      	sub	sp, #12
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
 800accc:	460b      	mov	r3, r1
 800acce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800acd0:	bf00      	nop
 800acd2:	370c      	adds	r7, #12
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b086      	sub	sp, #24
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d101      	bne.n	800acee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e264      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d075      	beq.n	800ade6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800acfa:	4ba3      	ldr	r3, [pc, #652]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f003 030c 	and.w	r3, r3, #12
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d00c      	beq.n	800ad20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad06:	4ba0      	ldr	r3, [pc, #640]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ad0e:	2b08      	cmp	r3, #8
 800ad10:	d112      	bne.n	800ad38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad12:	4b9d      	ldr	r3, [pc, #628]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad1e:	d10b      	bne.n	800ad38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad20:	4b99      	ldr	r3, [pc, #612]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d05b      	beq.n	800ade4 <HAL_RCC_OscConfig+0x108>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d157      	bne.n	800ade4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ad34:	2301      	movs	r3, #1
 800ad36:	e23f      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad40:	d106      	bne.n	800ad50 <HAL_RCC_OscConfig+0x74>
 800ad42:	4b91      	ldr	r3, [pc, #580]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a90      	ldr	r2, [pc, #576]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	e01d      	b.n	800ad8c <HAL_RCC_OscConfig+0xb0>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ad58:	d10c      	bne.n	800ad74 <HAL_RCC_OscConfig+0x98>
 800ad5a:	4b8b      	ldr	r3, [pc, #556]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a8a      	ldr	r2, [pc, #552]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad64:	6013      	str	r3, [r2, #0]
 800ad66:	4b88      	ldr	r3, [pc, #544]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a87      	ldr	r2, [pc, #540]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad70:	6013      	str	r3, [r2, #0]
 800ad72:	e00b      	b.n	800ad8c <HAL_RCC_OscConfig+0xb0>
 800ad74:	4b84      	ldr	r3, [pc, #528]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a83      	ldr	r2, [pc, #524]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad7e:	6013      	str	r3, [r2, #0]
 800ad80:	4b81      	ldr	r3, [pc, #516]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a80      	ldr	r2, [pc, #512]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ad86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d013      	beq.n	800adbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ad94:	f7fc f97e 	bl	8007094 <HAL_GetTick>
 800ad98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad9a:	e008      	b.n	800adae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ad9c:	f7fc f97a 	bl	8007094 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	2b64      	cmp	r3, #100	; 0x64
 800ada8:	d901      	bls.n	800adae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e204      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adae:	4b76      	ldr	r3, [pc, #472]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0f0      	beq.n	800ad9c <HAL_RCC_OscConfig+0xc0>
 800adba:	e014      	b.n	800ade6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adbc:	f7fc f96a 	bl	8007094 <HAL_GetTick>
 800adc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800adc2:	e008      	b.n	800add6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800adc4:	f7fc f966 	bl	8007094 <HAL_GetTick>
 800adc8:	4602      	mov	r2, r0
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	1ad3      	subs	r3, r2, r3
 800adce:	2b64      	cmp	r3, #100	; 0x64
 800add0:	d901      	bls.n	800add6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800add2:	2303      	movs	r3, #3
 800add4:	e1f0      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800add6:	4b6c      	ldr	r3, [pc, #432]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1f0      	bne.n	800adc4 <HAL_RCC_OscConfig+0xe8>
 800ade2:	e000      	b.n	800ade6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ade4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d063      	beq.n	800aeba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800adf2:	4b65      	ldr	r3, [pc, #404]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800adf4:	689b      	ldr	r3, [r3, #8]
 800adf6:	f003 030c 	and.w	r3, r3, #12
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800adfe:	4b62      	ldr	r3, [pc, #392]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ae06:	2b08      	cmp	r3, #8
 800ae08:	d11c      	bne.n	800ae44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae0a:	4b5f      	ldr	r3, [pc, #380]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d116      	bne.n	800ae44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae16:	4b5c      	ldr	r3, [pc, #368]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	f003 0302 	and.w	r3, r3, #2
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <HAL_RCC_OscConfig+0x152>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	68db      	ldr	r3, [r3, #12]
 800ae26:	2b01      	cmp	r3, #1
 800ae28:	d001      	beq.n	800ae2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	e1c4      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae2e:	4b56      	ldr	r3, [pc, #344]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	691b      	ldr	r3, [r3, #16]
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	4952      	ldr	r1, [pc, #328]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae42:	e03a      	b.n	800aeba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68db      	ldr	r3, [r3, #12]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d020      	beq.n	800ae8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ae4c:	4b4f      	ldr	r3, [pc, #316]	; (800af8c <HAL_RCC_OscConfig+0x2b0>)
 800ae4e:	2201      	movs	r2, #1
 800ae50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae52:	f7fc f91f 	bl	8007094 <HAL_GetTick>
 800ae56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae58:	e008      	b.n	800ae6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae5a:	f7fc f91b 	bl	8007094 <HAL_GetTick>
 800ae5e:	4602      	mov	r2, r0
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d901      	bls.n	800ae6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e1a5      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae6c:	4b46      	ldr	r3, [pc, #280]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0302 	and.w	r3, r3, #2
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d0f0      	beq.n	800ae5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae78:	4b43      	ldr	r3, [pc, #268]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	00db      	lsls	r3, r3, #3
 800ae86:	4940      	ldr	r1, [pc, #256]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	600b      	str	r3, [r1, #0]
 800ae8c:	e015      	b.n	800aeba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae8e:	4b3f      	ldr	r3, [pc, #252]	; (800af8c <HAL_RCC_OscConfig+0x2b0>)
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae94:	f7fc f8fe 	bl	8007094 <HAL_GetTick>
 800ae98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ae9a:	e008      	b.n	800aeae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ae9c:	f7fc f8fa 	bl	8007094 <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	2b02      	cmp	r3, #2
 800aea8:	d901      	bls.n	800aeae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800aeaa:	2303      	movs	r3, #3
 800aeac:	e184      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aeae:	4b36      	ldr	r3, [pc, #216]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f003 0302 	and.w	r3, r3, #2
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d1f0      	bne.n	800ae9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0308 	and.w	r3, r3, #8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d030      	beq.n	800af28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d016      	beq.n	800aefc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aece:	4b30      	ldr	r3, [pc, #192]	; (800af90 <HAL_RCC_OscConfig+0x2b4>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aed4:	f7fc f8de 	bl	8007094 <HAL_GetTick>
 800aed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeda:	e008      	b.n	800aeee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800aedc:	f7fc f8da 	bl	8007094 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	693b      	ldr	r3, [r7, #16]
 800aee4:	1ad3      	subs	r3, r2, r3
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d901      	bls.n	800aeee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e164      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aeee:	4b26      	ldr	r3, [pc, #152]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800aef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aef2:	f003 0302 	and.w	r3, r3, #2
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0f0      	beq.n	800aedc <HAL_RCC_OscConfig+0x200>
 800aefa:	e015      	b.n	800af28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aefc:	4b24      	ldr	r3, [pc, #144]	; (800af90 <HAL_RCC_OscConfig+0x2b4>)
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af02:	f7fc f8c7 	bl	8007094 <HAL_GetTick>
 800af06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af08:	e008      	b.n	800af1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800af0a:	f7fc f8c3 	bl	8007094 <HAL_GetTick>
 800af0e:	4602      	mov	r2, r0
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	1ad3      	subs	r3, r2, r3
 800af14:	2b02      	cmp	r3, #2
 800af16:	d901      	bls.n	800af1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800af18:	2303      	movs	r3, #3
 800af1a:	e14d      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af1c:	4b1a      	ldr	r3, [pc, #104]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800af1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af20:	f003 0302 	and.w	r3, r3, #2
 800af24:	2b00      	cmp	r3, #0
 800af26:	d1f0      	bne.n	800af0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	f003 0304 	and.w	r3, r3, #4
 800af30:	2b00      	cmp	r3, #0
 800af32:	f000 80a0 	beq.w	800b076 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af36:	2300      	movs	r3, #0
 800af38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af3a:	4b13      	ldr	r3, [pc, #76]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800af3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af42:	2b00      	cmp	r3, #0
 800af44:	d10f      	bne.n	800af66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800af46:	2300      	movs	r3, #0
 800af48:	60bb      	str	r3, [r7, #8]
 800af4a:	4b0f      	ldr	r3, [pc, #60]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800af4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af4e:	4a0e      	ldr	r2, [pc, #56]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800af50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af54:	6413      	str	r3, [r2, #64]	; 0x40
 800af56:	4b0c      	ldr	r3, [pc, #48]	; (800af88 <HAL_RCC_OscConfig+0x2ac>)
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af5e:	60bb      	str	r3, [r7, #8]
 800af60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800af62:	2301      	movs	r3, #1
 800af64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af66:	4b0b      	ldr	r3, [pc, #44]	; (800af94 <HAL_RCC_OscConfig+0x2b8>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d121      	bne.n	800afb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800af72:	4b08      	ldr	r3, [pc, #32]	; (800af94 <HAL_RCC_OscConfig+0x2b8>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	4a07      	ldr	r2, [pc, #28]	; (800af94 <HAL_RCC_OscConfig+0x2b8>)
 800af78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800af7e:	f7fc f889 	bl	8007094 <HAL_GetTick>
 800af82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800af84:	e011      	b.n	800afaa <HAL_RCC_OscConfig+0x2ce>
 800af86:	bf00      	nop
 800af88:	40023800 	.word	0x40023800
 800af8c:	42470000 	.word	0x42470000
 800af90:	42470e80 	.word	0x42470e80
 800af94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af98:	f7fc f87c 	bl	8007094 <HAL_GetTick>
 800af9c:	4602      	mov	r2, r0
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	1ad3      	subs	r3, r2, r3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d901      	bls.n	800afaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800afa6:	2303      	movs	r3, #3
 800afa8:	e106      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afaa:	4b85      	ldr	r3, [pc, #532]	; (800b1c0 <HAL_RCC_OscConfig+0x4e4>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0f0      	beq.n	800af98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	689b      	ldr	r3, [r3, #8]
 800afba:	2b01      	cmp	r3, #1
 800afbc:	d106      	bne.n	800afcc <HAL_RCC_OscConfig+0x2f0>
 800afbe:	4b81      	ldr	r3, [pc, #516]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800afc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afc2:	4a80      	ldr	r2, [pc, #512]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800afc4:	f043 0301 	orr.w	r3, r3, #1
 800afc8:	6713      	str	r3, [r2, #112]	; 0x70
 800afca:	e01c      	b.n	800b006 <HAL_RCC_OscConfig+0x32a>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	689b      	ldr	r3, [r3, #8]
 800afd0:	2b05      	cmp	r3, #5
 800afd2:	d10c      	bne.n	800afee <HAL_RCC_OscConfig+0x312>
 800afd4:	4b7b      	ldr	r3, [pc, #492]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800afd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd8:	4a7a      	ldr	r2, [pc, #488]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800afda:	f043 0304 	orr.w	r3, r3, #4
 800afde:	6713      	str	r3, [r2, #112]	; 0x70
 800afe0:	4b78      	ldr	r3, [pc, #480]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800afe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afe4:	4a77      	ldr	r2, [pc, #476]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800afe6:	f043 0301 	orr.w	r3, r3, #1
 800afea:	6713      	str	r3, [r2, #112]	; 0x70
 800afec:	e00b      	b.n	800b006 <HAL_RCC_OscConfig+0x32a>
 800afee:	4b75      	ldr	r3, [pc, #468]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800aff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aff2:	4a74      	ldr	r2, [pc, #464]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800aff4:	f023 0301 	bic.w	r3, r3, #1
 800aff8:	6713      	str	r3, [r2, #112]	; 0x70
 800affa:	4b72      	ldr	r3, [pc, #456]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800affc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800affe:	4a71      	ldr	r2, [pc, #452]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b000:	f023 0304 	bic.w	r3, r3, #4
 800b004:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d015      	beq.n	800b03a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b00e:	f7fc f841 	bl	8007094 <HAL_GetTick>
 800b012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b014:	e00a      	b.n	800b02c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b016:	f7fc f83d 	bl	8007094 <HAL_GetTick>
 800b01a:	4602      	mov	r2, r0
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	f241 3288 	movw	r2, #5000	; 0x1388
 800b024:	4293      	cmp	r3, r2
 800b026:	d901      	bls.n	800b02c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800b028:	2303      	movs	r3, #3
 800b02a:	e0c5      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b02c:	4b65      	ldr	r3, [pc, #404]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0ee      	beq.n	800b016 <HAL_RCC_OscConfig+0x33a>
 800b038:	e014      	b.n	800b064 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b03a:	f7fc f82b 	bl	8007094 <HAL_GetTick>
 800b03e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b040:	e00a      	b.n	800b058 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b042:	f7fc f827 	bl	8007094 <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	693b      	ldr	r3, [r7, #16]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b050:	4293      	cmp	r3, r2
 800b052:	d901      	bls.n	800b058 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800b054:	2303      	movs	r3, #3
 800b056:	e0af      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b058:	4b5a      	ldr	r3, [pc, #360]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b05a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1ee      	bne.n	800b042 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b064:	7dfb      	ldrb	r3, [r7, #23]
 800b066:	2b01      	cmp	r3, #1
 800b068:	d105      	bne.n	800b076 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b06a:	4b56      	ldr	r3, [pc, #344]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b06c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06e:	4a55      	ldr	r2, [pc, #340]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b074:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	f000 809b 	beq.w	800b1b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b080:	4b50      	ldr	r3, [pc, #320]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f003 030c 	and.w	r3, r3, #12
 800b088:	2b08      	cmp	r3, #8
 800b08a:	d05c      	beq.n	800b146 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	2b02      	cmp	r3, #2
 800b092:	d141      	bne.n	800b118 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b094:	4b4c      	ldr	r3, [pc, #304]	; (800b1c8 <HAL_RCC_OscConfig+0x4ec>)
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b09a:	f7fb fffb 	bl	8007094 <HAL_GetTick>
 800b09e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0a0:	e008      	b.n	800b0b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0a2:	f7fb fff7 	bl	8007094 <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	2b02      	cmp	r3, #2
 800b0ae:	d901      	bls.n	800b0b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800b0b0:	2303      	movs	r3, #3
 800b0b2:	e081      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0b4:	4b43      	ldr	r3, [pc, #268]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1f0      	bne.n	800b0a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	69da      	ldr	r2, [r3, #28]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	431a      	orrs	r2, r3
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ce:	019b      	lsls	r3, r3, #6
 800b0d0:	431a      	orrs	r2, r3
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d6:	085b      	lsrs	r3, r3, #1
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	041b      	lsls	r3, r3, #16
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e2:	061b      	lsls	r3, r3, #24
 800b0e4:	4937      	ldr	r1, [pc, #220]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b0ea:	4b37      	ldr	r3, [pc, #220]	; (800b1c8 <HAL_RCC_OscConfig+0x4ec>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0f0:	f7fb ffd0 	bl	8007094 <HAL_GetTick>
 800b0f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b0f6:	e008      	b.n	800b10a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b0f8:	f7fb ffcc 	bl	8007094 <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	2b02      	cmp	r3, #2
 800b104:	d901      	bls.n	800b10a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e056      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b10a:	4b2e      	ldr	r3, [pc, #184]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0f0      	beq.n	800b0f8 <HAL_RCC_OscConfig+0x41c>
 800b116:	e04e      	b.n	800b1b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b118:	4b2b      	ldr	r3, [pc, #172]	; (800b1c8 <HAL_RCC_OscConfig+0x4ec>)
 800b11a:	2200      	movs	r2, #0
 800b11c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b11e:	f7fb ffb9 	bl	8007094 <HAL_GetTick>
 800b122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b126:	f7fb ffb5 	bl	8007094 <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e03f      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b138:	4b22      	ldr	r3, [pc, #136]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b140:	2b00      	cmp	r3, #0
 800b142:	d1f0      	bne.n	800b126 <HAL_RCC_OscConfig+0x44a>
 800b144:	e037      	b.n	800b1b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d101      	bne.n	800b152 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e032      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b152:	4b1c      	ldr	r3, [pc, #112]	; (800b1c4 <HAL_RCC_OscConfig+0x4e8>)
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d028      	beq.n	800b1b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b16a:	429a      	cmp	r2, r3
 800b16c:	d121      	bne.n	800b1b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b178:	429a      	cmp	r2, r3
 800b17a:	d11a      	bne.n	800b1b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b182:	4013      	ands	r3, r2
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b188:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b18a:	4293      	cmp	r3, r2
 800b18c:	d111      	bne.n	800b1b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	085b      	lsrs	r3, r3, #1
 800b19a:	3b01      	subs	r3, #1
 800b19c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d107      	bne.n	800b1b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d001      	beq.n	800b1b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e000      	b.n	800b1b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800b1b6:	2300      	movs	r3, #0
}
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	3718      	adds	r7, #24
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	bd80      	pop	{r7, pc}
 800b1c0:	40007000 	.word	0x40007000
 800b1c4:	40023800 	.word	0x40023800
 800b1c8:	42470060 	.word	0x42470060

0800b1cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b084      	sub	sp, #16
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d101      	bne.n	800b1e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e0cc      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b1e0:	4b68      	ldr	r3, [pc, #416]	; (800b384 <HAL_RCC_ClockConfig+0x1b8>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 0307 	and.w	r3, r3, #7
 800b1e8:	683a      	ldr	r2, [r7, #0]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d90c      	bls.n	800b208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1ee:	4b65      	ldr	r3, [pc, #404]	; (800b384 <HAL_RCC_ClockConfig+0x1b8>)
 800b1f0:	683a      	ldr	r2, [r7, #0]
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1f6:	4b63      	ldr	r3, [pc, #396]	; (800b384 <HAL_RCC_ClockConfig+0x1b8>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 0307 	and.w	r3, r3, #7
 800b1fe:	683a      	ldr	r2, [r7, #0]
 800b200:	429a      	cmp	r2, r3
 800b202:	d001      	beq.n	800b208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e0b8      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0302 	and.w	r3, r3, #2
 800b210:	2b00      	cmp	r3, #0
 800b212:	d020      	beq.n	800b256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f003 0304 	and.w	r3, r3, #4
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d005      	beq.n	800b22c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b220:	4b59      	ldr	r3, [pc, #356]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b222:	689b      	ldr	r3, [r3, #8]
 800b224:	4a58      	ldr	r2, [pc, #352]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b22a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0308 	and.w	r3, r3, #8
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b238:	4b53      	ldr	r3, [pc, #332]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	4a52      	ldr	r2, [pc, #328]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b23e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b244:	4b50      	ldr	r3, [pc, #320]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	689b      	ldr	r3, [r3, #8]
 800b250:	494d      	ldr	r1, [pc, #308]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b252:	4313      	orrs	r3, r2
 800b254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0301 	and.w	r3, r3, #1
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d044      	beq.n	800b2ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	2b01      	cmp	r3, #1
 800b268:	d107      	bne.n	800b27a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b26a:	4b47      	ldr	r3, [pc, #284]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b272:	2b00      	cmp	r3, #0
 800b274:	d119      	bne.n	800b2aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e07f      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d003      	beq.n	800b28a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b286:	2b03      	cmp	r3, #3
 800b288:	d107      	bne.n	800b29a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b28a:	4b3f      	ldr	r3, [pc, #252]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d109      	bne.n	800b2aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b296:	2301      	movs	r3, #1
 800b298:	e06f      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b29a:	4b3b      	ldr	r3, [pc, #236]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d101      	bne.n	800b2aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e067      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b2aa:	4b37      	ldr	r3, [pc, #220]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	f023 0203 	bic.w	r2, r3, #3
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	4934      	ldr	r1, [pc, #208]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b2bc:	f7fb feea 	bl	8007094 <HAL_GetTick>
 800b2c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2c2:	e00a      	b.n	800b2da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2c4:	f7fb fee6 	bl	8007094 <HAL_GetTick>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	1ad3      	subs	r3, r2, r3
 800b2ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d901      	bls.n	800b2da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e04f      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2da:	4b2b      	ldr	r3, [pc, #172]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b2dc:	689b      	ldr	r3, [r3, #8]
 800b2de:	f003 020c 	and.w	r2, r3, #12
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	009b      	lsls	r3, r3, #2
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d1eb      	bne.n	800b2c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b2ec:	4b25      	ldr	r3, [pc, #148]	; (800b384 <HAL_RCC_ClockConfig+0x1b8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	429a      	cmp	r2, r3
 800b2f8:	d20c      	bcs.n	800b314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2fa:	4b22      	ldr	r3, [pc, #136]	; (800b384 <HAL_RCC_ClockConfig+0x1b8>)
 800b2fc:	683a      	ldr	r2, [r7, #0]
 800b2fe:	b2d2      	uxtb	r2, r2
 800b300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b302:	4b20      	ldr	r3, [pc, #128]	; (800b384 <HAL_RCC_ClockConfig+0x1b8>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d001      	beq.n	800b314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e032      	b.n	800b37a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f003 0304 	and.w	r3, r3, #4
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d008      	beq.n	800b332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b320:	4b19      	ldr	r3, [pc, #100]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	68db      	ldr	r3, [r3, #12]
 800b32c:	4916      	ldr	r1, [pc, #88]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0308 	and.w	r3, r3, #8
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d009      	beq.n	800b352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b33e:	4b12      	ldr	r3, [pc, #72]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b340:	689b      	ldr	r3, [r3, #8]
 800b342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	00db      	lsls	r3, r3, #3
 800b34c:	490e      	ldr	r1, [pc, #56]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b352:	f000 f821 	bl	800b398 <HAL_RCC_GetSysClockFreq>
 800b356:	4602      	mov	r2, r0
 800b358:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <HAL_RCC_ClockConfig+0x1bc>)
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	091b      	lsrs	r3, r3, #4
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	490a      	ldr	r1, [pc, #40]	; (800b38c <HAL_RCC_ClockConfig+0x1c0>)
 800b364:	5ccb      	ldrb	r3, [r1, r3]
 800b366:	fa22 f303 	lsr.w	r3, r2, r3
 800b36a:	4a09      	ldr	r2, [pc, #36]	; (800b390 <HAL_RCC_ClockConfig+0x1c4>)
 800b36c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b36e:	4b09      	ldr	r3, [pc, #36]	; (800b394 <HAL_RCC_ClockConfig+0x1c8>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	4618      	mov	r0, r3
 800b374:	f7f9 fee6 	bl	8005144 <HAL_InitTick>

  return HAL_OK;
 800b378:	2300      	movs	r3, #0
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
 800b382:	bf00      	nop
 800b384:	40023c00 	.word	0x40023c00
 800b388:	40023800 	.word	0x40023800
 800b38c:	0802062c 	.word	0x0802062c
 800b390:	20000030 	.word	0x20000030
 800b394:	200000c8 	.word	0x200000c8

0800b398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b398:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b39c:	b084      	sub	sp, #16
 800b39e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	607b      	str	r3, [r7, #4]
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	60fb      	str	r3, [r7, #12]
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3b0:	4b67      	ldr	r3, [pc, #412]	; (800b550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	f003 030c 	and.w	r3, r3, #12
 800b3b8:	2b08      	cmp	r3, #8
 800b3ba:	d00d      	beq.n	800b3d8 <HAL_RCC_GetSysClockFreq+0x40>
 800b3bc:	2b08      	cmp	r3, #8
 800b3be:	f200 80bd 	bhi.w	800b53c <HAL_RCC_GetSysClockFreq+0x1a4>
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d002      	beq.n	800b3cc <HAL_RCC_GetSysClockFreq+0x34>
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	d003      	beq.n	800b3d2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b3ca:	e0b7      	b.n	800b53c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b3cc:	4b61      	ldr	r3, [pc, #388]	; (800b554 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b3ce:	60bb      	str	r3, [r7, #8]
       break;
 800b3d0:	e0b7      	b.n	800b542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b3d2:	4b61      	ldr	r3, [pc, #388]	; (800b558 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800b3d4:	60bb      	str	r3, [r7, #8]
      break;
 800b3d6:	e0b4      	b.n	800b542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b3d8:	4b5d      	ldr	r3, [pc, #372]	; (800b550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b3e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b3e2:	4b5b      	ldr	r3, [pc, #364]	; (800b550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d04d      	beq.n	800b48a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b3ee:	4b58      	ldr	r3, [pc, #352]	; (800b550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b3f0:	685b      	ldr	r3, [r3, #4]
 800b3f2:	099b      	lsrs	r3, r3, #6
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	f04f 0300 	mov.w	r3, #0
 800b3fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b3fe:	f04f 0100 	mov.w	r1, #0
 800b402:	ea02 0800 	and.w	r8, r2, r0
 800b406:	ea03 0901 	and.w	r9, r3, r1
 800b40a:	4640      	mov	r0, r8
 800b40c:	4649      	mov	r1, r9
 800b40e:	f04f 0200 	mov.w	r2, #0
 800b412:	f04f 0300 	mov.w	r3, #0
 800b416:	014b      	lsls	r3, r1, #5
 800b418:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b41c:	0142      	lsls	r2, r0, #5
 800b41e:	4610      	mov	r0, r2
 800b420:	4619      	mov	r1, r3
 800b422:	ebb0 0008 	subs.w	r0, r0, r8
 800b426:	eb61 0109 	sbc.w	r1, r1, r9
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	f04f 0300 	mov.w	r3, #0
 800b432:	018b      	lsls	r3, r1, #6
 800b434:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b438:	0182      	lsls	r2, r0, #6
 800b43a:	1a12      	subs	r2, r2, r0
 800b43c:	eb63 0301 	sbc.w	r3, r3, r1
 800b440:	f04f 0000 	mov.w	r0, #0
 800b444:	f04f 0100 	mov.w	r1, #0
 800b448:	00d9      	lsls	r1, r3, #3
 800b44a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b44e:	00d0      	lsls	r0, r2, #3
 800b450:	4602      	mov	r2, r0
 800b452:	460b      	mov	r3, r1
 800b454:	eb12 0208 	adds.w	r2, r2, r8
 800b458:	eb43 0309 	adc.w	r3, r3, r9
 800b45c:	f04f 0000 	mov.w	r0, #0
 800b460:	f04f 0100 	mov.w	r1, #0
 800b464:	0259      	lsls	r1, r3, #9
 800b466:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b46a:	0250      	lsls	r0, r2, #9
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4610      	mov	r0, r2
 800b472:	4619      	mov	r1, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	461a      	mov	r2, r3
 800b478:	f04f 0300 	mov.w	r3, #0
 800b47c:	f7f5 fc04 	bl	8000c88 <__aeabi_uldivmod>
 800b480:	4602      	mov	r2, r0
 800b482:	460b      	mov	r3, r1
 800b484:	4613      	mov	r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	e04a      	b.n	800b520 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b48a:	4b31      	ldr	r3, [pc, #196]	; (800b550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	099b      	lsrs	r3, r3, #6
 800b490:	461a      	mov	r2, r3
 800b492:	f04f 0300 	mov.w	r3, #0
 800b496:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b49a:	f04f 0100 	mov.w	r1, #0
 800b49e:	ea02 0400 	and.w	r4, r2, r0
 800b4a2:	ea03 0501 	and.w	r5, r3, r1
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f04f 0200 	mov.w	r2, #0
 800b4ae:	f04f 0300 	mov.w	r3, #0
 800b4b2:	014b      	lsls	r3, r1, #5
 800b4b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b4b8:	0142      	lsls	r2, r0, #5
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	4619      	mov	r1, r3
 800b4be:	1b00      	subs	r0, r0, r4
 800b4c0:	eb61 0105 	sbc.w	r1, r1, r5
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	018b      	lsls	r3, r1, #6
 800b4ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b4d2:	0182      	lsls	r2, r0, #6
 800b4d4:	1a12      	subs	r2, r2, r0
 800b4d6:	eb63 0301 	sbc.w	r3, r3, r1
 800b4da:	f04f 0000 	mov.w	r0, #0
 800b4de:	f04f 0100 	mov.w	r1, #0
 800b4e2:	00d9      	lsls	r1, r3, #3
 800b4e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b4e8:	00d0      	lsls	r0, r2, #3
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	1912      	adds	r2, r2, r4
 800b4f0:	eb45 0303 	adc.w	r3, r5, r3
 800b4f4:	f04f 0000 	mov.w	r0, #0
 800b4f8:	f04f 0100 	mov.w	r1, #0
 800b4fc:	0299      	lsls	r1, r3, #10
 800b4fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b502:	0290      	lsls	r0, r2, #10
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4610      	mov	r0, r2
 800b50a:	4619      	mov	r1, r3
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	461a      	mov	r2, r3
 800b510:	f04f 0300 	mov.w	r3, #0
 800b514:	f7f5 fbb8 	bl	8000c88 <__aeabi_uldivmod>
 800b518:	4602      	mov	r2, r0
 800b51a:	460b      	mov	r3, r1
 800b51c:	4613      	mov	r3, r2
 800b51e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	f003 0303 	and.w	r3, r3, #3
 800b52a:	3301      	adds	r3, #1
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	fbb2 f3f3 	udiv	r3, r2, r3
 800b538:	60bb      	str	r3, [r7, #8]
      break;
 800b53a:	e002      	b.n	800b542 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b53c:	4b05      	ldr	r3, [pc, #20]	; (800b554 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800b53e:	60bb      	str	r3, [r7, #8]
      break;
 800b540:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b542:	68bb      	ldr	r3, [r7, #8]
}
 800b544:	4618      	mov	r0, r3
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b54e:	bf00      	nop
 800b550:	40023800 	.word	0x40023800
 800b554:	00f42400 	.word	0x00f42400
 800b558:	007a1200 	.word	0x007a1200

0800b55c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b560:	4b03      	ldr	r3, [pc, #12]	; (800b570 <HAL_RCC_GetHCLKFreq+0x14>)
 800b562:	681b      	ldr	r3, [r3, #0]
}
 800b564:	4618      	mov	r0, r3
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
 800b56e:	bf00      	nop
 800b570:	20000030 	.word	0x20000030

0800b574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b578:	f7ff fff0 	bl	800b55c <HAL_RCC_GetHCLKFreq>
 800b57c:	4602      	mov	r2, r0
 800b57e:	4b05      	ldr	r3, [pc, #20]	; (800b594 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b580:	689b      	ldr	r3, [r3, #8]
 800b582:	0a9b      	lsrs	r3, r3, #10
 800b584:	f003 0307 	and.w	r3, r3, #7
 800b588:	4903      	ldr	r1, [pc, #12]	; (800b598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b58a:	5ccb      	ldrb	r3, [r1, r3]
 800b58c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b590:	4618      	mov	r0, r3
 800b592:	bd80      	pop	{r7, pc}
 800b594:	40023800 	.word	0x40023800
 800b598:	0802063c 	.word	0x0802063c

0800b59c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b083      	sub	sp, #12
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	220f      	movs	r2, #15
 800b5aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b5ac:	4b12      	ldr	r3, [pc, #72]	; (800b5f8 <HAL_RCC_GetClockConfig+0x5c>)
 800b5ae:	689b      	ldr	r3, [r3, #8]
 800b5b0:	f003 0203 	and.w	r2, r3, #3
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b5b8:	4b0f      	ldr	r3, [pc, #60]	; (800b5f8 <HAL_RCC_GetClockConfig+0x5c>)
 800b5ba:	689b      	ldr	r3, [r3, #8]
 800b5bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b5c4:	4b0c      	ldr	r3, [pc, #48]	; (800b5f8 <HAL_RCC_GetClockConfig+0x5c>)
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b5d0:	4b09      	ldr	r3, [pc, #36]	; (800b5f8 <HAL_RCC_GetClockConfig+0x5c>)
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	08db      	lsrs	r3, r3, #3
 800b5d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b5de:	4b07      	ldr	r3, [pc, #28]	; (800b5fc <HAL_RCC_GetClockConfig+0x60>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0207 	and.w	r2, r3, #7
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	601a      	str	r2, [r3, #0]
}
 800b5ea:	bf00      	nop
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	40023800 	.word	0x40023800
 800b5fc:	40023c00 	.word	0x40023c00

0800b600 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b086      	sub	sp, #24
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b60c:	2300      	movs	r3, #0
 800b60e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f003 0301 	and.w	r3, r3, #1
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d105      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b624:	2b00      	cmp	r3, #0
 800b626:	d035      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b628:	4b62      	ldr	r3, [pc, #392]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b62a:	2200      	movs	r2, #0
 800b62c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b62e:	f7fb fd31 	bl	8007094 <HAL_GetTick>
 800b632:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b634:	e008      	b.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b636:	f7fb fd2d 	bl	8007094 <HAL_GetTick>
 800b63a:	4602      	mov	r2, r0
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	2b02      	cmp	r3, #2
 800b642:	d901      	bls.n	800b648 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b644:	2303      	movs	r3, #3
 800b646:	e0b0      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b648:	4b5b      	ldr	r3, [pc, #364]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1f0      	bne.n	800b636 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	019a      	lsls	r2, r3, #6
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	689b      	ldr	r3, [r3, #8]
 800b65e:	071b      	lsls	r3, r3, #28
 800b660:	4955      	ldr	r1, [pc, #340]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b662:	4313      	orrs	r3, r2
 800b664:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b668:	4b52      	ldr	r3, [pc, #328]	; (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b66e:	f7fb fd11 	bl	8007094 <HAL_GetTick>
 800b672:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b674:	e008      	b.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b676:	f7fb fd0d 	bl	8007094 <HAL_GetTick>
 800b67a:	4602      	mov	r2, r0
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	2b02      	cmp	r3, #2
 800b682:	d901      	bls.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b684:	2303      	movs	r3, #3
 800b686:	e090      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b688:	4b4b      	ldr	r3, [pc, #300]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b690:	2b00      	cmp	r3, #0
 800b692:	d0f0      	beq.n	800b676 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8083 	beq.w	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	60fb      	str	r3, [r7, #12]
 800b6a6:	4b44      	ldr	r3, [pc, #272]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6aa:	4a43      	ldr	r2, [pc, #268]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6b0:	6413      	str	r3, [r2, #64]	; 0x40
 800b6b2:	4b41      	ldr	r3, [pc, #260]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b6ba:	60fb      	str	r3, [r7, #12]
 800b6bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b6be:	4b3f      	ldr	r3, [pc, #252]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a3e      	ldr	r2, [pc, #248]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b6c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b6ca:	f7fb fce3 	bl	8007094 <HAL_GetTick>
 800b6ce:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b6d0:	e008      	b.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b6d2:	f7fb fcdf 	bl	8007094 <HAL_GetTick>
 800b6d6:	4602      	mov	r2, r0
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	1ad3      	subs	r3, r2, r3
 800b6dc:	2b02      	cmp	r3, #2
 800b6de:	d901      	bls.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b6e0:	2303      	movs	r3, #3
 800b6e2:	e062      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b6e4:	4b35      	ldr	r3, [pc, #212]	; (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d0f0      	beq.n	800b6d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6f0:	4b31      	ldr	r3, [pc, #196]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6f8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d02f      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	68db      	ldr	r3, [r3, #12]
 800b704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d028      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b70e:	4b2a      	ldr	r3, [pc, #168]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b716:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b718:	4b29      	ldr	r3, [pc, #164]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b71a:	2201      	movs	r2, #1
 800b71c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b71e:	4b28      	ldr	r3, [pc, #160]	; (800b7c0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b724:	4a24      	ldr	r2, [pc, #144]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b72a:	4b23      	ldr	r3, [pc, #140]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b72c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b72e:	f003 0301 	and.w	r3, r3, #1
 800b732:	2b01      	cmp	r3, #1
 800b734:	d114      	bne.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b736:	f7fb fcad 	bl	8007094 <HAL_GetTick>
 800b73a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b73c:	e00a      	b.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b73e:	f7fb fca9 	bl	8007094 <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	f241 3288 	movw	r2, #5000	; 0x1388
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d901      	bls.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b750:	2303      	movs	r3, #3
 800b752:	e02a      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b754:	4b18      	ldr	r3, [pc, #96]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b758:	f003 0302 	and.w	r3, r3, #2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d0ee      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	68db      	ldr	r3, [r3, #12]
 800b764:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b768:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b76c:	d10d      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b76e:	4b12      	ldr	r3, [pc, #72]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b77e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b782:	490d      	ldr	r1, [pc, #52]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b784:	4313      	orrs	r3, r2
 800b786:	608b      	str	r3, [r1, #8]
 800b788:	e005      	b.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b78a:	4b0b      	ldr	r3, [pc, #44]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	4a0a      	ldr	r2, [pc, #40]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b790:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b794:	6093      	str	r3, [r2, #8]
 800b796:	4b08      	ldr	r3, [pc, #32]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b798:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b7a2:	4905      	ldr	r1, [pc, #20]	; (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3718      	adds	r7, #24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	42470068 	.word	0x42470068
 800b7b8:	40023800 	.word	0x40023800
 800b7bc:	40007000 	.word	0x40007000
 800b7c0:	42470e40 	.word	0x42470e40

0800b7c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e01c      	b.n	800b810 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	795b      	ldrb	r3, [r3, #5]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7f9 fac6 	bl	8004d78 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0204 	orr.w	r2, r2, #4
 800b800:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e083      	b.n	800b932 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	7f5b      	ldrb	r3, [r3, #29]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	2b00      	cmp	r3, #0
 800b832:	d105      	bne.n	800b840 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2200      	movs	r2, #0
 800b838:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7f9 fabe 	bl	8004dbc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2202      	movs	r2, #2
 800b844:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	22ca      	movs	r2, #202	; 0xca
 800b84c:	625a      	str	r2, [r3, #36]	; 0x24
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2253      	movs	r2, #83	; 0x53
 800b854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fbc0 	bl	800bfdc <RTC_EnterInitMode>
 800b85c:	4603      	mov	r3, r0
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d008      	beq.n	800b874 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	22ff      	movs	r2, #255	; 0xff
 800b868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2204      	movs	r2, #4
 800b86e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e05e      	b.n	800b932 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	6812      	ldr	r2, [r2, #0]
 800b87e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b886:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	6899      	ldr	r1, [r3, #8]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685a      	ldr	r2, [r3, #4]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	431a      	orrs	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	431a      	orrs	r2, r3
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	430a      	orrs	r2, r1
 800b8a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	68d2      	ldr	r2, [r2, #12]
 800b8ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	6919      	ldr	r1, [r3, #16]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	689b      	ldr	r3, [r3, #8]
 800b8ba:	041a      	lsls	r2, r3, #16
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	430a      	orrs	r2, r1
 800b8c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	68da      	ldr	r2, [r3, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b8d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	689b      	ldr	r3, [r3, #8]
 800b8da:	f003 0320 	and.w	r3, r3, #32
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d10e      	bne.n	800b900 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fb52 	bl	800bf8c <HAL_RTC_WaitForSynchro>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d008      	beq.n	800b900 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	22ff      	movs	r2, #255	; 0xff
 800b8f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2204      	movs	r2, #4
 800b8fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e018      	b.n	800b932 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b90e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	699a      	ldr	r2, [r3, #24]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	430a      	orrs	r2, r1
 800b920:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	22ff      	movs	r2, #255	; 0xff
 800b928:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2201      	movs	r2, #1
 800b92e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800b930:	2300      	movs	r3, #0
  }
}
 800b932:	4618      	mov	r0, r3
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}

0800b93a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b93a:	b590      	push	{r4, r7, lr}
 800b93c:	b087      	sub	sp, #28
 800b93e:	af00      	add	r7, sp, #0
 800b940:	60f8      	str	r0, [r7, #12]
 800b942:	60b9      	str	r1, [r7, #8]
 800b944:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	7f1b      	ldrb	r3, [r3, #28]
 800b94e:	2b01      	cmp	r3, #1
 800b950:	d101      	bne.n	800b956 <HAL_RTC_SetTime+0x1c>
 800b952:	2302      	movs	r3, #2
 800b954:	e0aa      	b.n	800baac <HAL_RTC_SetTime+0x172>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	2201      	movs	r2, #1
 800b95a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2202      	movs	r2, #2
 800b960:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d126      	bne.n	800b9b6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b972:	2b00      	cmp	r3, #0
 800b974:	d102      	bne.n	800b97c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	2200      	movs	r2, #0
 800b97a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	4618      	mov	r0, r3
 800b982:	f000 fb57 	bl	800c034 <RTC_ByteToBcd2>
 800b986:	4603      	mov	r3, r0
 800b988:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	785b      	ldrb	r3, [r3, #1]
 800b98e:	4618      	mov	r0, r3
 800b990:	f000 fb50 	bl	800c034 <RTC_ByteToBcd2>
 800b994:	4603      	mov	r3, r0
 800b996:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b998:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	789b      	ldrb	r3, [r3, #2]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f000 fb48 	bl	800c034 <RTC_ByteToBcd2>
 800b9a4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800b9a6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	78db      	ldrb	r3, [r3, #3]
 800b9ae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800b9b0:	4313      	orrs	r3, r2
 800b9b2:	617b      	str	r3, [r7, #20]
 800b9b4:	e018      	b.n	800b9e8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	785b      	ldrb	r3, [r3, #1]
 800b9d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b9d6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800b9dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800b9de:	68bb      	ldr	r3, [r7, #8]
 800b9e0:	78db      	ldrb	r3, [r3, #3]
 800b9e2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	22ca      	movs	r2, #202	; 0xca
 800b9ee:	625a      	str	r2, [r3, #36]	; 0x24
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	2253      	movs	r2, #83	; 0x53
 800b9f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f000 faef 	bl	800bfdc <RTC_EnterInitMode>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d00b      	beq.n	800ba1c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	22ff      	movs	r2, #255	; 0xff
 800ba0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2204      	movs	r2, #4
 800ba10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2200      	movs	r2, #0
 800ba16:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e047      	b.n	800baac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ba26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ba2a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	689a      	ldr	r2, [r3, #8]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ba3a:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	6899      	ldr	r1, [r3, #8]
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	68da      	ldr	r2, [r3, #12]
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	431a      	orrs	r2, r3
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	430a      	orrs	r2, r1
 800ba52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	68da      	ldr	r2, [r3, #12]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ba62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	f003 0320 	and.w	r3, r3, #32
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d111      	bne.n	800ba96 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f000 fa8a 	bl	800bf8c <HAL_RTC_WaitForSynchro>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d00b      	beq.n	800ba96 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	22ff      	movs	r2, #255	; 0xff
 800ba84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2204      	movs	r2, #4
 800ba8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e00a      	b.n	800baac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	22ff      	movs	r2, #255	; 0xff
 800ba9c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2201      	movs	r2, #1
 800baa2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800baaa:	2300      	movs	r3, #0
  }
}
 800baac:	4618      	mov	r0, r3
 800baae:	371c      	adds	r7, #28
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd90      	pop	{r4, r7, pc}

0800bab4 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bae6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800baea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	0c1b      	lsrs	r3, r3, #16
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	0a1b      	lsrs	r3, r3, #8
 800bb00:	b2db      	uxtb	r3, r3
 800bb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb06:	b2da      	uxtb	r2, r3
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800bb1a:	697b      	ldr	r3, [r7, #20]
 800bb1c:	0c1b      	lsrs	r3, r3, #16
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	68bb      	ldr	r3, [r7, #8]
 800bb28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d11a      	bne.n	800bb66 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	4618      	mov	r0, r3
 800bb36:	f000 fa9b 	bl	800c070 <RTC_Bcd2ToByte>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	461a      	mov	r2, r3
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	785b      	ldrb	r3, [r3, #1]
 800bb46:	4618      	mov	r0, r3
 800bb48:	f000 fa92 	bl	800c070 <RTC_Bcd2ToByte>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	789b      	ldrb	r3, [r3, #2]
 800bb58:	4618      	mov	r0, r3
 800bb5a:	f000 fa89 	bl	800c070 <RTC_Bcd2ToByte>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	461a      	mov	r2, r3
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bb66:	2300      	movs	r3, #0
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bb70:	b590      	push	{r4, r7, lr}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	60b9      	str	r1, [r7, #8]
 800bb7a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	7f1b      	ldrb	r3, [r3, #28]
 800bb84:	2b01      	cmp	r3, #1
 800bb86:	d101      	bne.n	800bb8c <HAL_RTC_SetDate+0x1c>
 800bb88:	2302      	movs	r3, #2
 800bb8a:	e094      	b.n	800bcb6 <HAL_RTC_SetDate+0x146>
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2202      	movs	r2, #2
 800bb96:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10e      	bne.n	800bbbc <HAL_RTC_SetDate+0x4c>
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	785b      	ldrb	r3, [r3, #1]
 800bba2:	f003 0310 	and.w	r3, r3, #16
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d008      	beq.n	800bbbc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800bbaa:	68bb      	ldr	r3, [r7, #8]
 800bbac:	785b      	ldrb	r3, [r3, #1]
 800bbae:	f023 0310 	bic.w	r3, r3, #16
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	330a      	adds	r3, #10
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	68bb      	ldr	r3, [r7, #8]
 800bbba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d11c      	bne.n	800bbfc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	78db      	ldrb	r3, [r3, #3]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 fa34 	bl	800c034 <RTC_ByteToBcd2>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	785b      	ldrb	r3, [r3, #1]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	f000 fa2d 	bl	800c034 <RTC_ByteToBcd2>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bbde:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	789b      	ldrb	r3, [r3, #2]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f000 fa25 	bl	800c034 <RTC_ByteToBcd2>
 800bbea:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800bbec:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800bbf6:	4313      	orrs	r3, r2
 800bbf8:	617b      	str	r3, [r7, #20]
 800bbfa:	e00e      	b.n	800bc1a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	78db      	ldrb	r3, [r3, #3]
 800bc00:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	785b      	ldrb	r3, [r3, #1]
 800bc06:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bc08:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800bc0a:	68ba      	ldr	r2, [r7, #8]
 800bc0c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800bc0e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800bc16:	4313      	orrs	r3, r2
 800bc18:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	22ca      	movs	r2, #202	; 0xca
 800bc20:	625a      	str	r2, [r3, #36]	; 0x24
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	2253      	movs	r2, #83	; 0x53
 800bc28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bc2a:	68f8      	ldr	r0, [r7, #12]
 800bc2c:	f000 f9d6 	bl	800bfdc <RTC_EnterInitMode>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d00b      	beq.n	800bc4e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	22ff      	movs	r2, #255	; 0xff
 800bc3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	2204      	movs	r2, #4
 800bc42:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2200      	movs	r2, #0
 800bc48:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	e033      	b.n	800bcb6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681a      	ldr	r2, [r3, #0]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bc58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bc5c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	68da      	ldr	r2, [r3, #12]
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bc6c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	f003 0320 	and.w	r3, r3, #32
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d111      	bne.n	800bca0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bc7c:	68f8      	ldr	r0, [r7, #12]
 800bc7e:	f000 f985 	bl	800bf8c <HAL_RTC_WaitForSynchro>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d00b      	beq.n	800bca0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	22ff      	movs	r2, #255	; 0xff
 800bc8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2204      	movs	r2, #4
 800bc94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e00a      	b.n	800bcb6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	22ff      	movs	r2, #255	; 0xff
 800bca6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800bcb4:	2300      	movs	r3, #0
  }
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	371c      	adds	r7, #28
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd90      	pop	{r4, r7, pc}

0800bcbe <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b086      	sub	sp, #24
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	60f8      	str	r0, [r7, #12]
 800bcc6:	60b9      	str	r1, [r7, #8]
 800bcc8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bcca:	2300      	movs	r3, #0
 800bccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bcd8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bcdc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	0c1b      	lsrs	r3, r3, #16
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	0a1b      	lsrs	r3, r3, #8
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 031f 	and.w	r3, r3, #31
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	0b5b      	lsrs	r3, r3, #13
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	f003 0307 	and.w	r3, r3, #7
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d11a      	bne.n	800bd52 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	78db      	ldrb	r3, [r3, #3]
 800bd20:	4618      	mov	r0, r3
 800bd22:	f000 f9a5 	bl	800c070 <RTC_Bcd2ToByte>
 800bd26:	4603      	mov	r3, r0
 800bd28:	461a      	mov	r2, r3
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	785b      	ldrb	r3, [r3, #1]
 800bd32:	4618      	mov	r0, r3
 800bd34:	f000 f99c 	bl	800c070 <RTC_Bcd2ToByte>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	789b      	ldrb	r3, [r3, #2]
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 f993 	bl	800c070 <RTC_Bcd2ToByte>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3718      	adds	r7, #24
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bd80      	pop	{r7, pc}

0800bd5c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800bd5c:	b590      	push	{r4, r7, lr}
 800bd5e:	b089      	sub	sp, #36	; 0x24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	60f8      	str	r0, [r7, #12]
 800bd64:	60b9      	str	r1, [r7, #8]
 800bd66:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800bd68:	2300      	movs	r3, #0
 800bd6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	61fb      	str	r3, [r7, #28]
 800bd70:	2300      	movs	r3, #0
 800bd72:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	7f1b      	ldrb	r3, [r3, #28]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d101      	bne.n	800bd80 <HAL_RTC_SetAlarm+0x24>
 800bd7c:	2302      	movs	r3, #2
 800bd7e:	e101      	b.n	800bf84 <HAL_RTC_SetAlarm+0x228>
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2201      	movs	r2, #1
 800bd84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2202      	movs	r2, #2
 800bd8a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d137      	bne.n	800be02 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d102      	bne.n	800bda6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	2200      	movs	r2, #0
 800bda4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800bda6:	68bb      	ldr	r3, [r7, #8]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f000 f942 	bl	800c034 <RTC_ByteToBcd2>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800bdb4:	68bb      	ldr	r3, [r7, #8]
 800bdb6:	785b      	ldrb	r3, [r3, #1]
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f000 f93b 	bl	800c034 <RTC_ByteToBcd2>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800bdc2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800bdc4:	68bb      	ldr	r3, [r7, #8]
 800bdc6:	789b      	ldrb	r3, [r3, #2]
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f000 f933 	bl	800c034 <RTC_ByteToBcd2>
 800bdce:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800bdd0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	78db      	ldrb	r3, [r3, #3]
 800bdd8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800bdda:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f000 f925 	bl	800c034 <RTC_ByteToBcd2>
 800bdea:	4603      	mov	r3, r0
 800bdec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800bdee:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800bdf6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800bdfc:	4313      	orrs	r3, r2
 800bdfe:	61fb      	str	r3, [r7, #28]
 800be00:	e023      	b.n	800be4a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	2200      	movs	r2, #0
 800be14:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	785b      	ldrb	r3, [r3, #1]
 800be20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800be22:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800be28:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	78db      	ldrb	r3, [r3, #3]
 800be2e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800be30:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be38:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800be3a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800be3c:	68bb      	ldr	r3, [r7, #8]
 800be3e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800be40:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800be46:	4313      	orrs	r3, r2
 800be48:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	68bb      	ldr	r3, [r7, #8]
 800be50:	699b      	ldr	r3, [r3, #24]
 800be52:	4313      	orrs	r3, r2
 800be54:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	22ca      	movs	r2, #202	; 0xca
 800be5c:	625a      	str	r2, [r3, #36]	; 0x24
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2253      	movs	r2, #83	; 0x53
 800be64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be6e:	d13f      	bne.n	800bef0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	689a      	ldr	r2, [r3, #8]
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be7e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	689a      	ldr	r2, [r3, #8]
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800be8e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800be90:	f7fb f900 	bl	8007094 <HAL_GetTick>
 800be94:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800be96:	e013      	b.n	800bec0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800be98:	f7fb f8fc 	bl	8007094 <HAL_GetTick>
 800be9c:	4602      	mov	r2, r0
 800be9e:	69bb      	ldr	r3, [r7, #24]
 800bea0:	1ad3      	subs	r3, r2, r3
 800bea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bea6:	d90b      	bls.n	800bec0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	22ff      	movs	r2, #255	; 0xff
 800beae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2203      	movs	r2, #3
 800beb4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2200      	movs	r2, #0
 800beba:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bebc:	2303      	movs	r3, #3
 800bebe:	e061      	b.n	800bf84 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	68db      	ldr	r3, [r3, #12]
 800bec6:	f003 0301 	and.w	r3, r3, #1
 800beca:	2b00      	cmp	r3, #0
 800becc:	d0e4      	beq.n	800be98 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	69fa      	ldr	r2, [r7, #28]
 800bed4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	697a      	ldr	r2, [r7, #20]
 800bedc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	689a      	ldr	r2, [r3, #8]
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800beec:	609a      	str	r2, [r3, #8]
 800beee:	e03e      	b.n	800bf6e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689a      	ldr	r2, [r3, #8]
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800befe:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689a      	ldr	r2, [r3, #8]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf0e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bf10:	f7fb f8c0 	bl	8007094 <HAL_GetTick>
 800bf14:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800bf16:	e013      	b.n	800bf40 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bf18:	f7fb f8bc 	bl	8007094 <HAL_GetTick>
 800bf1c:	4602      	mov	r2, r0
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	1ad3      	subs	r3, r2, r3
 800bf22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bf26:	d90b      	bls.n	800bf40 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	22ff      	movs	r2, #255	; 0xff
 800bf2e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	2203      	movs	r2, #3
 800bf34:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e021      	b.n	800bf84 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f003 0302 	and.w	r3, r3, #2
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d0e4      	beq.n	800bf18 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	69fa      	ldr	r2, [r7, #28]
 800bf54:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	697a      	ldr	r2, [r7, #20]
 800bf5c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	689a      	ldr	r2, [r3, #8]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bf6c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	22ff      	movs	r2, #255	; 0xff
 800bf74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800bf82:	2300      	movs	r3, #0
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3724      	adds	r7, #36	; 0x24
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd90      	pop	{r4, r7, pc}

0800bf8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bf94:	2300      	movs	r3, #0
 800bf96:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68da      	ldr	r2, [r3, #12]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bfa6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bfa8:	f7fb f874 	bl	8007094 <HAL_GetTick>
 800bfac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bfae:	e009      	b.n	800bfc4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800bfb0:	f7fb f870 	bl	8007094 <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfbe:	d901      	bls.n	800bfc4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800bfc0:	2303      	movs	r3, #3
 800bfc2:	e007      	b.n	800bfd4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	f003 0320 	and.w	r3, r3, #32
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d0ee      	beq.n	800bfb0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d119      	bne.n	800c02a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bffe:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c000:	f7fb f848 	bl	8007094 <HAL_GetTick>
 800c004:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c006:	e009      	b.n	800c01c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c008:	f7fb f844 	bl	8007094 <HAL_GetTick>
 800c00c:	4602      	mov	r2, r0
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	1ad3      	subs	r3, r2, r3
 800c012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c016:	d901      	bls.n	800c01c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c018:	2303      	movs	r3, #3
 800c01a:	e007      	b.n	800c02c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0ee      	beq.n	800c008 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c02a:	2300      	movs	r3, #0
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3710      	adds	r7, #16
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}

0800c034 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c034:	b480      	push	{r7}
 800c036:	b085      	sub	sp, #20
 800c038:	af00      	add	r7, sp, #0
 800c03a:	4603      	mov	r3, r0
 800c03c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c03e:	2300      	movs	r3, #0
 800c040:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c042:	e005      	b.n	800c050 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	3301      	adds	r3, #1
 800c048:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c04a:	79fb      	ldrb	r3, [r7, #7]
 800c04c:	3b0a      	subs	r3, #10
 800c04e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c050:	79fb      	ldrb	r3, [r7, #7]
 800c052:	2b09      	cmp	r3, #9
 800c054:	d8f6      	bhi.n	800c044 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	b2db      	uxtb	r3, r3
 800c05a:	011b      	lsls	r3, r3, #4
 800c05c:	b2da      	uxtb	r2, r3
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	4313      	orrs	r3, r2
 800c062:	b2db      	uxtb	r3, r3
}
 800c064:	4618      	mov	r0, r3
 800c066:	3714      	adds	r7, #20
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	4603      	mov	r3, r0
 800c078:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c07a:	2300      	movs	r3, #0
 800c07c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c07e:	79fb      	ldrb	r3, [r7, #7]
 800c080:	091b      	lsrs	r3, r3, #4
 800c082:	b2db      	uxtb	r3, r3
 800c084:	461a      	mov	r2, r3
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c090:	79fb      	ldrb	r3, [r7, #7]
 800c092:	f003 030f 	and.w	r3, r3, #15
 800c096:	b2da      	uxtb	r2, r3
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	b2db      	uxtb	r3, r3
 800c09c:	4413      	add	r3, r2
 800c09e:	b2db      	uxtb	r3, r3
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b082      	sub	sp, #8
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d101      	bne.n	800c0be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e07b      	b.n	800c1b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d108      	bne.n	800c0d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
 800c0ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c0ce:	d009      	beq.n	800c0e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	61da      	str	r2, [r3, #28]
 800c0d6:	e005      	b.n	800c0e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c0f0:	b2db      	uxtb	r3, r3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d106      	bne.n	800c104 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f8 fe86 	bl	8004e10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2202      	movs	r2, #2
 800c108:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c11a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c12c:	431a      	orrs	r2, r3
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c136:	431a      	orrs	r2, r3
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	f003 0302 	and.w	r3, r3, #2
 800c140:	431a      	orrs	r2, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	f003 0301 	and.w	r3, r3, #1
 800c14a:	431a      	orrs	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	699b      	ldr	r3, [r3, #24]
 800c150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c154:	431a      	orrs	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	69db      	ldr	r3, [r3, #28]
 800c15a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c15e:	431a      	orrs	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6a1b      	ldr	r3, [r3, #32]
 800c164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c168:	ea42 0103 	orr.w	r1, r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c170:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	430a      	orrs	r2, r1
 800c17a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	0c1b      	lsrs	r3, r3, #16
 800c182:	f003 0104 	and.w	r1, r3, #4
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18a:	f003 0210 	and.w	r2, r3, #16
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	430a      	orrs	r2, r1
 800c194:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69da      	ldr	r2, [r3, #28]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c1a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3708      	adds	r7, #8
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	b082      	sub	sp, #8
 800c1c2:	af00      	add	r7, sp, #0
 800c1c4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d101      	bne.n	800c1d0 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	e01a      	b.n	800c206 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	681a      	ldr	r2, [r3, #0]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f7f8 feeb 	bl	8004fc4 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800c204:	2300      	movs	r3, #0
}
 800c206:	4618      	mov	r0, r3
 800c208:	3708      	adds	r7, #8
 800c20a:	46bd      	mov	sp, r7
 800c20c:	bd80      	pop	{r7, pc}

0800c20e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c20e:	b580      	push	{r7, lr}
 800c210:	b088      	sub	sp, #32
 800c212:	af00      	add	r7, sp, #0
 800c214:	60f8      	str	r0, [r7, #12]
 800c216:	60b9      	str	r1, [r7, #8]
 800c218:	603b      	str	r3, [r7, #0]
 800c21a:	4613      	mov	r3, r2
 800c21c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c21e:	2300      	movs	r3, #0
 800c220:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d101      	bne.n	800c230 <HAL_SPI_Transmit+0x22>
 800c22c:	2302      	movs	r3, #2
 800c22e:	e126      	b.n	800c47e <HAL_SPI_Transmit+0x270>
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2201      	movs	r2, #1
 800c234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c238:	f7fa ff2c 	bl	8007094 <HAL_GetTick>
 800c23c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c23e:	88fb      	ldrh	r3, [r7, #6]
 800c240:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d002      	beq.n	800c254 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c24e:	2302      	movs	r3, #2
 800c250:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c252:	e10b      	b.n	800c46c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <HAL_SPI_Transmit+0x52>
 800c25a:	88fb      	ldrh	r3, [r7, #6]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d102      	bne.n	800c266 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c260:	2301      	movs	r3, #1
 800c262:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c264:	e102      	b.n	800c46c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2203      	movs	r2, #3
 800c26a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2200      	movs	r2, #0
 800c272:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	88fa      	ldrh	r2, [r7, #6]
 800c27e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	88fa      	ldrh	r2, [r7, #6]
 800c284:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2200      	movs	r2, #0
 800c28a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	2200      	movs	r2, #0
 800c296:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c2ac:	d10f      	bne.n	800c2ce <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	681a      	ldr	r2, [r3, #0]
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c2bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c2cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2d8:	2b40      	cmp	r3, #64	; 0x40
 800c2da:	d007      	beq.n	800c2ec <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c2f4:	d14b      	bne.n	800c38e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	685b      	ldr	r3, [r3, #4]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d002      	beq.n	800c304 <HAL_SPI_Transmit+0xf6>
 800c2fe:	8afb      	ldrh	r3, [r7, #22]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d13e      	bne.n	800c382 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c308:	881a      	ldrh	r2, [r3, #0]
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c314:	1c9a      	adds	r2, r3, #2
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c31e:	b29b      	uxth	r3, r3
 800c320:	3b01      	subs	r3, #1
 800c322:	b29a      	uxth	r2, r3
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c328:	e02b      	b.n	800c382 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f003 0302 	and.w	r3, r3, #2
 800c334:	2b02      	cmp	r3, #2
 800c336:	d112      	bne.n	800c35e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33c:	881a      	ldrh	r2, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c348:	1c9a      	adds	r2, r3, #2
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c352:	b29b      	uxth	r3, r3
 800c354:	3b01      	subs	r3, #1
 800c356:	b29a      	uxth	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	86da      	strh	r2, [r3, #54]	; 0x36
 800c35c:	e011      	b.n	800c382 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c35e:	f7fa fe99 	bl	8007094 <HAL_GetTick>
 800c362:	4602      	mov	r2, r0
 800c364:	69bb      	ldr	r3, [r7, #24]
 800c366:	1ad3      	subs	r3, r2, r3
 800c368:	683a      	ldr	r2, [r7, #0]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d803      	bhi.n	800c376 <HAL_SPI_Transmit+0x168>
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c374:	d102      	bne.n	800c37c <HAL_SPI_Transmit+0x16e>
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d102      	bne.n	800c382 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800c37c:	2303      	movs	r3, #3
 800c37e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c380:	e074      	b.n	800c46c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c386:	b29b      	uxth	r3, r3
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d1ce      	bne.n	800c32a <HAL_SPI_Transmit+0x11c>
 800c38c:	e04c      	b.n	800c428 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d002      	beq.n	800c39c <HAL_SPI_Transmit+0x18e>
 800c396:	8afb      	ldrh	r3, [r7, #22]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d140      	bne.n	800c41e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	330c      	adds	r3, #12
 800c3a6:	7812      	ldrb	r2, [r2, #0]
 800c3a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c3c2:	e02c      	b.n	800c41e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	689b      	ldr	r3, [r3, #8]
 800c3ca:	f003 0302 	and.w	r3, r3, #2
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	d113      	bne.n	800c3fa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	330c      	adds	r3, #12
 800c3dc:	7812      	ldrb	r2, [r2, #0]
 800c3de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3e4:	1c5a      	adds	r2, r3, #1
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	86da      	strh	r2, [r3, #54]	; 0x36
 800c3f8:	e011      	b.n	800c41e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c3fa:	f7fa fe4b 	bl	8007094 <HAL_GetTick>
 800c3fe:	4602      	mov	r2, r0
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	1ad3      	subs	r3, r2, r3
 800c404:	683a      	ldr	r2, [r7, #0]
 800c406:	429a      	cmp	r2, r3
 800c408:	d803      	bhi.n	800c412 <HAL_SPI_Transmit+0x204>
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c410:	d102      	bne.n	800c418 <HAL_SPI_Transmit+0x20a>
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d102      	bne.n	800c41e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800c418:	2303      	movs	r3, #3
 800c41a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c41c:	e026      	b.n	800c46c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c422:	b29b      	uxth	r3, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1cd      	bne.n	800c3c4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	6839      	ldr	r1, [r7, #0]
 800c42c:	68f8      	ldr	r0, [r7, #12]
 800c42e:	f000 fd03 	bl	800ce38 <SPI_EndRxTxTransaction>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2220      	movs	r2, #32
 800c43c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	689b      	ldr	r3, [r3, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10a      	bne.n	800c45c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c446:	2300      	movs	r3, #0
 800c448:	613b      	str	r3, [r7, #16]
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	613b      	str	r3, [r7, #16]
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	613b      	str	r3, [r7, #16]
 800c45a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c460:	2b00      	cmp	r3, #0
 800c462:	d002      	beq.n	800c46a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	77fb      	strb	r3, [r7, #31]
 800c468:	e000      	b.n	800c46c <HAL_SPI_Transmit+0x25e>
  }

error:
 800c46a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	2200      	movs	r2, #0
 800c478:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c47c:	7ffb      	ldrb	r3, [r7, #31]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3720      	adds	r7, #32
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}

0800c486 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c486:	b580      	push	{r7, lr}
 800c488:	b08c      	sub	sp, #48	; 0x30
 800c48a:	af00      	add	r7, sp, #0
 800c48c:	60f8      	str	r0, [r7, #12]
 800c48e:	60b9      	str	r1, [r7, #8]
 800c490:	607a      	str	r2, [r7, #4]
 800c492:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c494:	2301      	movs	r3, #1
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c498:	2300      	movs	r3, #0
 800c49a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	d101      	bne.n	800c4ac <HAL_SPI_TransmitReceive+0x26>
 800c4a8:	2302      	movs	r3, #2
 800c4aa:	e18a      	b.n	800c7c2 <HAL_SPI_TransmitReceive+0x33c>
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c4b4:	f7fa fdee 	bl	8007094 <HAL_GetTick>
 800c4b8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c4c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c4ca:	887b      	ldrh	r3, [r7, #2]
 800c4cc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c4ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4d2:	2b01      	cmp	r3, #1
 800c4d4:	d00f      	beq.n	800c4f6 <HAL_SPI_TransmitReceive+0x70>
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4dc:	d107      	bne.n	800c4ee <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d103      	bne.n	800c4ee <HAL_SPI_TransmitReceive+0x68>
 800c4e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4ea:	2b04      	cmp	r3, #4
 800c4ec:	d003      	beq.n	800c4f6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c4ee:	2302      	movs	r3, #2
 800c4f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c4f4:	e15b      	b.n	800c7ae <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d005      	beq.n	800c508 <HAL_SPI_TransmitReceive+0x82>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <HAL_SPI_TransmitReceive+0x82>
 800c502:	887b      	ldrh	r3, [r7, #2]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d103      	bne.n	800c510 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c508:	2301      	movs	r3, #1
 800c50a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c50e:	e14e      	b.n	800c7ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c516:	b2db      	uxtb	r3, r3
 800c518:	2b04      	cmp	r3, #4
 800c51a:	d003      	beq.n	800c524 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2205      	movs	r2, #5
 800c520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2200      	movs	r2, #0
 800c528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	687a      	ldr	r2, [r7, #4]
 800c52e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	887a      	ldrh	r2, [r7, #2]
 800c534:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	887a      	ldrh	r2, [r7, #2]
 800c53a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	887a      	ldrh	r2, [r7, #2]
 800c546:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	887a      	ldrh	r2, [r7, #2]
 800c54c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	2200      	movs	r2, #0
 800c552:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	2200      	movs	r2, #0
 800c558:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c564:	2b40      	cmp	r3, #64	; 0x40
 800c566:	d007      	beq.n	800c578 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	681a      	ldr	r2, [r3, #0]
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c576:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c580:	d178      	bne.n	800c674 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	685b      	ldr	r3, [r3, #4]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <HAL_SPI_TransmitReceive+0x10a>
 800c58a:	8b7b      	ldrh	r3, [r7, #26]
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d166      	bne.n	800c65e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c594:	881a      	ldrh	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a0:	1c9a      	adds	r2, r3, #2
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	3b01      	subs	r3, #1
 800c5ae:	b29a      	uxth	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5b4:	e053      	b.n	800c65e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	689b      	ldr	r3, [r3, #8]
 800c5bc:	f003 0302 	and.w	r3, r3, #2
 800c5c0:	2b02      	cmp	r3, #2
 800c5c2:	d11b      	bne.n	800c5fc <HAL_SPI_TransmitReceive+0x176>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d016      	beq.n	800c5fc <HAL_SPI_TransmitReceive+0x176>
 800c5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d113      	bne.n	800c5fc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5d8:	881a      	ldrh	r2, [r3, #0]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5e4:	1c9a      	adds	r2, r3, #2
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b01      	cmp	r3, #1
 800c608:	d119      	bne.n	800c63e <HAL_SPI_TransmitReceive+0x1b8>
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c60e:	b29b      	uxth	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d014      	beq.n	800c63e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68da      	ldr	r2, [r3, #12]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c61e:	b292      	uxth	r2, r2
 800c620:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c626:	1c9a      	adds	r2, r3, #2
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c630:	b29b      	uxth	r3, r3
 800c632:	3b01      	subs	r3, #1
 800c634:	b29a      	uxth	r2, r3
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c63a:	2301      	movs	r3, #1
 800c63c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c63e:	f7fa fd29 	bl	8007094 <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d807      	bhi.n	800c65e <HAL_SPI_TransmitReceive+0x1d8>
 800c64e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c654:	d003      	beq.n	800c65e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c656:	2303      	movs	r3, #3
 800c658:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c65c:	e0a7      	b.n	800c7ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c662:	b29b      	uxth	r3, r3
 800c664:	2b00      	cmp	r3, #0
 800c666:	d1a6      	bne.n	800c5b6 <HAL_SPI_TransmitReceive+0x130>
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1a1      	bne.n	800c5b6 <HAL_SPI_TransmitReceive+0x130>
 800c672:	e07c      	b.n	800c76e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	685b      	ldr	r3, [r3, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d002      	beq.n	800c682 <HAL_SPI_TransmitReceive+0x1fc>
 800c67c:	8b7b      	ldrh	r3, [r7, #26]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d16b      	bne.n	800c75a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	330c      	adds	r3, #12
 800c68c:	7812      	ldrb	r2, [r2, #0]
 800c68e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	3b01      	subs	r3, #1
 800c6a2:	b29a      	uxth	r2, r3
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c6a8:	e057      	b.n	800c75a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	689b      	ldr	r3, [r3, #8]
 800c6b0:	f003 0302 	and.w	r3, r3, #2
 800c6b4:	2b02      	cmp	r3, #2
 800c6b6:	d11c      	bne.n	800c6f2 <HAL_SPI_TransmitReceive+0x26c>
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d017      	beq.n	800c6f2 <HAL_SPI_TransmitReceive+0x26c>
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d114      	bne.n	800c6f2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	330c      	adds	r3, #12
 800c6d2:	7812      	ldrb	r2, [r2, #0]
 800c6d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	3b01      	subs	r3, #1
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b01      	cmp	r3, #1
 800c6fe:	d119      	bne.n	800c734 <HAL_SPI_TransmitReceive+0x2ae>
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c704:	b29b      	uxth	r3, r3
 800c706:	2b00      	cmp	r3, #0
 800c708:	d014      	beq.n	800c734 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68da      	ldr	r2, [r3, #12]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c714:	b2d2      	uxtb	r2, r2
 800c716:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71c:	1c5a      	adds	r2, r3, #1
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c726:	b29b      	uxth	r3, r3
 800c728:	3b01      	subs	r3, #1
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c730:	2301      	movs	r3, #1
 800c732:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c734:	f7fa fcae 	bl	8007094 <HAL_GetTick>
 800c738:	4602      	mov	r2, r0
 800c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73c:	1ad3      	subs	r3, r2, r3
 800c73e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c740:	429a      	cmp	r2, r3
 800c742:	d803      	bhi.n	800c74c <HAL_SPI_TransmitReceive+0x2c6>
 800c744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c74a:	d102      	bne.n	800c752 <HAL_SPI_TransmitReceive+0x2cc>
 800c74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d103      	bne.n	800c75a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c752:	2303      	movs	r3, #3
 800c754:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c758:	e029      	b.n	800c7ae <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c75e:	b29b      	uxth	r3, r3
 800c760:	2b00      	cmp	r3, #0
 800c762:	d1a2      	bne.n	800c6aa <HAL_SPI_TransmitReceive+0x224>
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c768:	b29b      	uxth	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d19d      	bne.n	800c6aa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c76e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f000 fb60 	bl	800ce38 <SPI_EndRxTxTransaction>
 800c778:	4603      	mov	r3, r0
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d006      	beq.n	800c78c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c77e:	2301      	movs	r3, #1
 800c780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2220      	movs	r2, #32
 800c788:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c78a:	e010      	b.n	800c7ae <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	689b      	ldr	r3, [r3, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10b      	bne.n	800c7ac <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c794:	2300      	movs	r3, #0
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	68db      	ldr	r3, [r3, #12]
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	689b      	ldr	r3, [r3, #8]
 800c7a6:	617b      	str	r3, [r7, #20]
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	e000      	b.n	800c7ae <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c7ac:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2201      	movs	r2, #1
 800c7b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	2200      	movs	r2, #0
 800c7ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c7be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3730      	adds	r7, #48	; 0x30
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
	...

0800c7cc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b086      	sub	sp, #24
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d101      	bne.n	800c7ec <HAL_SPI_Transmit_DMA+0x20>
 800c7e8:	2302      	movs	r3, #2
 800c7ea:	e09b      	b.n	800c924 <HAL_SPI_Transmit_DMA+0x158>
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c7fa:	b2db      	uxtb	r3, r3
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d002      	beq.n	800c806 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800c800:	2302      	movs	r3, #2
 800c802:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c804:	e089      	b.n	800c91a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d002      	beq.n	800c812 <HAL_SPI_Transmit_DMA+0x46>
 800c80c:	88fb      	ldrh	r3, [r7, #6]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d102      	bne.n	800c818 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c816:	e080      	b.n	800c91a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2203      	movs	r2, #3
 800c81c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	88fa      	ldrh	r2, [r7, #6]
 800c830:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	88fa      	ldrh	r2, [r7, #6]
 800c836:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	2200      	movs	r2, #0
 800c83c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2200      	movs	r2, #0
 800c848:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2200      	movs	r2, #0
 800c854:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c85e:	d10f      	bne.n	800c880 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c86e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c87e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c884:	4a29      	ldr	r2, [pc, #164]	; (800c92c <HAL_SPI_Transmit_DMA+0x160>)
 800c886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c88c:	4a28      	ldr	r2, [pc, #160]	; (800c930 <HAL_SPI_Transmit_DMA+0x164>)
 800c88e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c894:	4a27      	ldr	r2, [pc, #156]	; (800c934 <HAL_SPI_Transmit_DMA+0x168>)
 800c896:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c89c:	2200      	movs	r2, #0
 800c89e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	330c      	adds	r3, #12
 800c8b0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c8b6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c8b8:	f7fa fe3c 	bl	8007534 <HAL_DMA_Start_IT>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d00c      	beq.n	800c8dc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8c6:	f043 0210 	orr.w	r2, r3, #16
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800c8da:	e01e      	b.n	800c91a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8e6:	2b40      	cmp	r3, #64	; 0x40
 800c8e8:	d007      	beq.n	800c8fa <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c8f8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	685a      	ldr	r2, [r3, #4]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f042 0220 	orr.w	r2, r2, #32
 800c908:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f042 0202 	orr.w	r2, r2, #2
 800c918:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	2200      	movs	r2, #0
 800c91e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c922:	7dfb      	ldrb	r3, [r7, #23]
}
 800c924:	4618      	mov	r0, r3
 800c926:	3718      	adds	r7, #24
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd80      	pop	{r7, pc}
 800c92c:	0800cca5 	.word	0x0800cca5
 800c930:	0800cbfd 	.word	0x0800cbfd
 800c934:	0800ccc1 	.word	0x0800ccc1

0800c938 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00f      	beq.n	800c96c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c950:	4618      	mov	r0, r3
 800c952:	f7fa fe47 	bl	80075e4 <HAL_DMA_Abort>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d007      	beq.n	800c96c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c960:	f043 0210 	orr.w	r2, r3, #16
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00f      	beq.n	800c994 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c978:	4618      	mov	r0, r3
 800c97a:	f7fa fe33 	bl	80075e4 <HAL_DMA_Abort>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d007      	beq.n	800c994 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c988:	f043 0210 	orr.w	r2, r3, #16
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	685a      	ldr	r2, [r3, #4]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	f022 0203 	bic.w	r2, r2, #3
 800c9a2:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
	...

0800c9b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b088      	sub	sp, #32
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	099b      	lsrs	r3, r3, #6
 800c9d4:	f003 0301 	and.w	r3, r3, #1
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10f      	bne.n	800c9fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c9dc:	69bb      	ldr	r3, [r7, #24]
 800c9de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00a      	beq.n	800c9fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c9e6:	69fb      	ldr	r3, [r7, #28]
 800c9e8:	099b      	lsrs	r3, r3, #6
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d004      	beq.n	800c9fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3
    return;
 800c9fa:	e0d7      	b.n	800cbac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	085b      	lsrs	r3, r3, #1
 800ca00:	f003 0301 	and.w	r3, r3, #1
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00a      	beq.n	800ca1e <HAL_SPI_IRQHandler+0x66>
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	09db      	lsrs	r3, r3, #7
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d004      	beq.n	800ca1e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	4798      	blx	r3
    return;
 800ca1c:	e0c6      	b.n	800cbac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ca1e:	69bb      	ldr	r3, [r7, #24]
 800ca20:	095b      	lsrs	r3, r3, #5
 800ca22:	f003 0301 	and.w	r3, r3, #1
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d10c      	bne.n	800ca44 <HAL_SPI_IRQHandler+0x8c>
 800ca2a:	69bb      	ldr	r3, [r7, #24]
 800ca2c:	099b      	lsrs	r3, r3, #6
 800ca2e:	f003 0301 	and.w	r3, r3, #1
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	0a1b      	lsrs	r3, r3, #8
 800ca3a:	f003 0301 	and.w	r3, r3, #1
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	f000 80b4 	beq.w	800cbac <HAL_SPI_IRQHandler+0x1f4>
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	095b      	lsrs	r3, r3, #5
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 80ad 	beq.w	800cbac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	099b      	lsrs	r3, r3, #6
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d023      	beq.n	800caa6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ca64:	b2db      	uxtb	r3, r3
 800ca66:	2b03      	cmp	r3, #3
 800ca68:	d011      	beq.n	800ca8e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca6e:	f043 0204 	orr.w	r2, r3, #4
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca76:	2300      	movs	r3, #0
 800ca78:	617b      	str	r3, [r7, #20]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	617b      	str	r3, [r7, #20]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	689b      	ldr	r3, [r3, #8]
 800ca88:	617b      	str	r3, [r7, #20]
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	e00b      	b.n	800caa6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca8e:	2300      	movs	r3, #0
 800ca90:	613b      	str	r3, [r7, #16]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	68db      	ldr	r3, [r3, #12]
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	613b      	str	r3, [r7, #16]
 800caa2:	693b      	ldr	r3, [r7, #16]
        return;
 800caa4:	e082      	b.n	800cbac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800caa6:	69bb      	ldr	r3, [r7, #24]
 800caa8:	095b      	lsrs	r3, r3, #5
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d014      	beq.n	800cadc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	f043 0201 	orr.w	r2, r3, #1
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cabe:	2300      	movs	r3, #0
 800cac0:	60fb      	str	r3, [r7, #12]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	60fb      	str	r3, [r7, #12]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	681a      	ldr	r2, [r3, #0]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cad8:	601a      	str	r2, [r3, #0]
 800cada:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	0a1b      	lsrs	r3, r3, #8
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d00c      	beq.n	800cb02 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caec:	f043 0208 	orr.w	r2, r3, #8
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800caf4:	2300      	movs	r3, #0
 800caf6:	60bb      	str	r3, [r7, #8]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	689b      	ldr	r3, [r3, #8]
 800cafe:	60bb      	str	r3, [r7, #8]
 800cb00:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d04f      	beq.n	800cbaa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cb18:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	f003 0302 	and.w	r3, r3, #2
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d104      	bne.n	800cb36 <HAL_SPI_IRQHandler+0x17e>
 800cb2c:	69fb      	ldr	r3, [r7, #28]
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d034      	beq.n	800cba0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f022 0203 	bic.w	r2, r2, #3
 800cb44:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d011      	beq.n	800cb72 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb52:	4a18      	ldr	r2, [pc, #96]	; (800cbb4 <HAL_SPI_IRQHandler+0x1fc>)
 800cb54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7fa fdb2 	bl	80076c4 <HAL_DMA_Abort_IT>
 800cb60:	4603      	mov	r3, r0
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d005      	beq.n	800cb72 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d016      	beq.n	800cba8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb7e:	4a0d      	ldr	r2, [pc, #52]	; (800cbb4 <HAL_SPI_IRQHandler+0x1fc>)
 800cb80:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb86:	4618      	mov	r0, r3
 800cb88:	f7fa fd9c 	bl	80076c4 <HAL_DMA_Abort_IT>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00a      	beq.n	800cba8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800cb9e:	e003      	b.n	800cba8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 f813 	bl	800cbcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cba6:	e000      	b.n	800cbaa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cba8:	bf00      	nop
    return;
 800cbaa:	bf00      	nop
  }
}
 800cbac:	3720      	adds	r7, #32
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	0800cd01 	.word	0x0800cd01

0800cbb8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b083      	sub	sp, #12
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cbee:	b2db      	uxtb	r3, r3
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	370c      	adds	r7, #12
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfa:	4770      	bx	lr

0800cbfc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b086      	sub	sp, #24
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc08:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc0a:	f7fa fa43 	bl	8007094 <HAL_GetTick>
 800cc0e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc1e:	d03b      	beq.n	800cc98 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cc20:	697b      	ldr	r3, [r7, #20]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f022 0220 	bic.w	r2, r2, #32
 800cc2e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	685a      	ldr	r2, [r3, #4]
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f022 0202 	bic.w	r2, r2, #2
 800cc3e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	2164      	movs	r1, #100	; 0x64
 800cc44:	6978      	ldr	r0, [r7, #20]
 800cc46:	f000 f8f7 	bl	800ce38 <SPI_EndRxTxTransaction>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d005      	beq.n	800cc5c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc54:	f043 0220 	orr.w	r2, r3, #32
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	689b      	ldr	r3, [r3, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d10a      	bne.n	800cc7a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc64:	2300      	movs	r3, #0
 800cc66:	60fb      	str	r3, [r7, #12]
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	60fb      	str	r3, [r7, #12]
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	689b      	ldr	r3, [r3, #8]
 800cc76:	60fb      	str	r3, [r7, #12]
 800cc78:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800cc80:	697b      	ldr	r3, [r7, #20]
 800cc82:	2201      	movs	r2, #1
 800cc84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d003      	beq.n	800cc98 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cc90:	6978      	ldr	r0, [r7, #20]
 800cc92:	f7ff ff9b 	bl	800cbcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cc96:	e002      	b.n	800cc9e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cc98:	6978      	ldr	r0, [r7, #20]
 800cc9a:	f7f5 ff71 	bl	8002b80 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cc9e:	3718      	adds	r7, #24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccb0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ccb2:	68f8      	ldr	r0, [r7, #12]
 800ccb4:	f7ff ff80 	bl	800cbb8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ccb8:	bf00      	nop
 800ccba:	3710      	adds	r7, #16
 800ccbc:	46bd      	mov	sp, r7
 800ccbe:	bd80      	pop	{r7, pc}

0800ccc0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b084      	sub	sp, #16
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cccc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	685a      	ldr	r2, [r3, #4]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	f022 0203 	bic.w	r2, r2, #3
 800ccdc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cce2:	f043 0210 	orr.w	r2, r3, #16
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2201      	movs	r2, #1
 800ccee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f7ff ff6a 	bl	800cbcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ccf8:	bf00      	nop
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd0c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	2200      	movs	r2, #0
 800cd12:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cd1a:	68f8      	ldr	r0, [r7, #12]
 800cd1c:	f7ff ff56 	bl	800cbcc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd20:	bf00      	nop
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b088      	sub	sp, #32
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	603b      	str	r3, [r7, #0]
 800cd34:	4613      	mov	r3, r2
 800cd36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cd38:	f7fa f9ac 	bl	8007094 <HAL_GetTick>
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	1a9b      	subs	r3, r3, r2
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	4413      	add	r3, r2
 800cd46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cd48:	f7fa f9a4 	bl	8007094 <HAL_GetTick>
 800cd4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cd4e:	4b39      	ldr	r3, [pc, #228]	; (800ce34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	015b      	lsls	r3, r3, #5
 800cd54:	0d1b      	lsrs	r3, r3, #20
 800cd56:	69fa      	ldr	r2, [r7, #28]
 800cd58:	fb02 f303 	mul.w	r3, r2, r3
 800cd5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cd5e:	e054      	b.n	800ce0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd66:	d050      	beq.n	800ce0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cd68:	f7fa f994 	bl	8007094 <HAL_GetTick>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	69bb      	ldr	r3, [r7, #24]
 800cd70:	1ad3      	subs	r3, r2, r3
 800cd72:	69fa      	ldr	r2, [r7, #28]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d902      	bls.n	800cd7e <SPI_WaitFlagStateUntilTimeout+0x56>
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d13d      	bne.n	800cdfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	685a      	ldr	r2, [r3, #4]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cd96:	d111      	bne.n	800cdbc <SPI_WaitFlagStateUntilTimeout+0x94>
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	689b      	ldr	r3, [r3, #8]
 800cd9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cda0:	d004      	beq.n	800cdac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	689b      	ldr	r3, [r3, #8]
 800cda6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cdaa:	d107      	bne.n	800cdbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	681a      	ldr	r2, [r3, #0]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdc4:	d10f      	bne.n	800cde6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	681a      	ldr	r2, [r3, #0]
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cdd4:	601a      	str	r2, [r3, #0]
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cde4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2201      	movs	r2, #1
 800cdea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cdf6:	2303      	movs	r3, #3
 800cdf8:	e017      	b.n	800ce2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d101      	bne.n	800ce04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ce00:	2300      	movs	r3, #0
 800ce02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	689a      	ldr	r2, [r3, #8]
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	4013      	ands	r3, r2
 800ce14:	68ba      	ldr	r2, [r7, #8]
 800ce16:	429a      	cmp	r2, r3
 800ce18:	bf0c      	ite	eq
 800ce1a:	2301      	moveq	r3, #1
 800ce1c:	2300      	movne	r3, #0
 800ce1e:	b2db      	uxtb	r3, r3
 800ce20:	461a      	mov	r2, r3
 800ce22:	79fb      	ldrb	r3, [r7, #7]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d19b      	bne.n	800cd60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3720      	adds	r7, #32
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	20000030 	.word	0x20000030

0800ce38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ce44:	4b1b      	ldr	r3, [pc, #108]	; (800ceb4 <SPI_EndRxTxTransaction+0x7c>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	4a1b      	ldr	r2, [pc, #108]	; (800ceb8 <SPI_EndRxTxTransaction+0x80>)
 800ce4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4e:	0d5b      	lsrs	r3, r3, #21
 800ce50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ce54:	fb02 f303 	mul.w	r3, r2, r3
 800ce58:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce62:	d112      	bne.n	800ce8a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	2180      	movs	r1, #128	; 0x80
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f7ff ff5a 	bl	800cd28 <SPI_WaitFlagStateUntilTimeout>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d016      	beq.n	800cea8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce7e:	f043 0220 	orr.w	r2, r3, #32
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800ce86:	2303      	movs	r3, #3
 800ce88:	e00f      	b.n	800ceaa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d00a      	beq.n	800cea6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	3b01      	subs	r3, #1
 800ce94:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	689b      	ldr	r3, [r3, #8]
 800ce9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cea0:	2b80      	cmp	r3, #128	; 0x80
 800cea2:	d0f2      	beq.n	800ce8a <SPI_EndRxTxTransaction+0x52>
 800cea4:	e000      	b.n	800cea8 <SPI_EndRxTxTransaction+0x70>
        break;
 800cea6:	bf00      	nop
  }

  return HAL_OK;
 800cea8:	2300      	movs	r3, #0
}
 800ceaa:	4618      	mov	r0, r3
 800ceac:	3718      	adds	r7, #24
 800ceae:	46bd      	mov	sp, r7
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20000030 	.word	0x20000030
 800ceb8:	165e9f81 	.word	0x165e9f81

0800cebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b082      	sub	sp, #8
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ceca:	2301      	movs	r3, #1
 800cecc:	e041      	b.n	800cf52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ced4:	b2db      	uxtb	r3, r3
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d106      	bne.n	800cee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2200      	movs	r2, #0
 800cede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7f8 f8ae 	bl	8005044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2202      	movs	r2, #2
 800ceec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681a      	ldr	r2, [r3, #0]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	3304      	adds	r3, #4
 800cef8:	4619      	mov	r1, r3
 800cefa:	4610      	mov	r0, r2
 800cefc:	f000 fac4 	bl	800d488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2201      	movs	r2, #1
 800cf2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2201      	movs	r2, #1
 800cf34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2201      	movs	r2, #1
 800cf44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf50:	2300      	movs	r3, #0
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3708      	adds	r7, #8
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
	...

0800cf5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cf5c:	b480      	push	{r7}
 800cf5e:	b085      	sub	sp, #20
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cf6a:	b2db      	uxtb	r3, r3
 800cf6c:	2b01      	cmp	r3, #1
 800cf6e:	d001      	beq.n	800cf74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e04e      	b.n	800d012 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2202      	movs	r2, #2
 800cf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68da      	ldr	r2, [r3, #12]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f042 0201 	orr.w	r2, r2, #1
 800cf8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a23      	ldr	r2, [pc, #140]	; (800d020 <HAL_TIM_Base_Start_IT+0xc4>)
 800cf92:	4293      	cmp	r3, r2
 800cf94:	d022      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf9e:	d01d      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	4a1f      	ldr	r2, [pc, #124]	; (800d024 <HAL_TIM_Base_Start_IT+0xc8>)
 800cfa6:	4293      	cmp	r3, r2
 800cfa8:	d018      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	4a1e      	ldr	r2, [pc, #120]	; (800d028 <HAL_TIM_Base_Start_IT+0xcc>)
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	d013      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	4a1c      	ldr	r2, [pc, #112]	; (800d02c <HAL_TIM_Base_Start_IT+0xd0>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d00e      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	4a1b      	ldr	r2, [pc, #108]	; (800d030 <HAL_TIM_Base_Start_IT+0xd4>)
 800cfc4:	4293      	cmp	r3, r2
 800cfc6:	d009      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a19      	ldr	r2, [pc, #100]	; (800d034 <HAL_TIM_Base_Start_IT+0xd8>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d004      	beq.n	800cfdc <HAL_TIM_Base_Start_IT+0x80>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a18      	ldr	r2, [pc, #96]	; (800d038 <HAL_TIM_Base_Start_IT+0xdc>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d111      	bne.n	800d000 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	689b      	ldr	r3, [r3, #8]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2b06      	cmp	r3, #6
 800cfec:	d010      	beq.n	800d010 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681a      	ldr	r2, [r3, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f042 0201 	orr.w	r2, r2, #1
 800cffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cffe:	e007      	b.n	800d010 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	681a      	ldr	r2, [r3, #0]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	f042 0201 	orr.w	r2, r2, #1
 800d00e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3714      	adds	r7, #20
 800d016:	46bd      	mov	sp, r7
 800d018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01c:	4770      	bx	lr
 800d01e:	bf00      	nop
 800d020:	40010000 	.word	0x40010000
 800d024:	40000400 	.word	0x40000400
 800d028:	40000800 	.word	0x40000800
 800d02c:	40000c00 	.word	0x40000c00
 800d030:	40010400 	.word	0x40010400
 800d034:	40014000 	.word	0x40014000
 800d038:	40001800 	.word	0x40001800

0800d03c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	68da      	ldr	r2, [r3, #12]
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f022 0201 	bic.w	r2, r2, #1
 800d052:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6a1a      	ldr	r2, [r3, #32]
 800d05a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d05e:	4013      	ands	r3, r2
 800d060:	2b00      	cmp	r3, #0
 800d062:	d10f      	bne.n	800d084 <HAL_TIM_Base_Stop_IT+0x48>
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6a1a      	ldr	r2, [r3, #32]
 800d06a:	f240 4344 	movw	r3, #1092	; 0x444
 800d06e:	4013      	ands	r3, r2
 800d070:	2b00      	cmp	r3, #0
 800d072:	d107      	bne.n	800d084 <HAL_TIM_Base_Stop_IT+0x48>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	681a      	ldr	r2, [r3, #0]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	f022 0201 	bic.w	r2, r2, #1
 800d082:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	370c      	adds	r7, #12
 800d092:	46bd      	mov	sp, r7
 800d094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d098:	4770      	bx	lr

0800d09a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b082      	sub	sp, #8
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	f003 0302 	and.w	r3, r3, #2
 800d0ac:	2b02      	cmp	r3, #2
 800d0ae:	d122      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	68db      	ldr	r3, [r3, #12]
 800d0b6:	f003 0302 	and.w	r3, r3, #2
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d11b      	bne.n	800d0f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f06f 0202 	mvn.w	r2, #2
 800d0c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	699b      	ldr	r3, [r3, #24]
 800d0d4:	f003 0303 	and.w	r3, r3, #3
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d003      	beq.n	800d0e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f9b5 	bl	800d44c <HAL_TIM_IC_CaptureCallback>
 800d0e2:	e005      	b.n	800d0f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 f9a7 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f000 f9b8 	bl	800d460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	f003 0304 	and.w	r3, r3, #4
 800d100:	2b04      	cmp	r3, #4
 800d102:	d122      	bne.n	800d14a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	68db      	ldr	r3, [r3, #12]
 800d10a:	f003 0304 	and.w	r3, r3, #4
 800d10e:	2b04      	cmp	r3, #4
 800d110:	d11b      	bne.n	800d14a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f06f 0204 	mvn.w	r2, #4
 800d11a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2202      	movs	r2, #2
 800d120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	699b      	ldr	r3, [r3, #24]
 800d128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d003      	beq.n	800d138 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 f98b 	bl	800d44c <HAL_TIM_IC_CaptureCallback>
 800d136:	e005      	b.n	800d144 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f000 f97d 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f98e 	bl	800d460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	691b      	ldr	r3, [r3, #16]
 800d150:	f003 0308 	and.w	r3, r3, #8
 800d154:	2b08      	cmp	r3, #8
 800d156:	d122      	bne.n	800d19e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	68db      	ldr	r3, [r3, #12]
 800d15e:	f003 0308 	and.w	r3, r3, #8
 800d162:	2b08      	cmp	r3, #8
 800d164:	d11b      	bne.n	800d19e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f06f 0208 	mvn.w	r2, #8
 800d16e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2204      	movs	r2, #4
 800d174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	69db      	ldr	r3, [r3, #28]
 800d17c:	f003 0303 	and.w	r3, r3, #3
 800d180:	2b00      	cmp	r3, #0
 800d182:	d003      	beq.n	800d18c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f961 	bl	800d44c <HAL_TIM_IC_CaptureCallback>
 800d18a:	e005      	b.n	800d198 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 f953 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 f964 	bl	800d460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	f003 0310 	and.w	r3, r3, #16
 800d1a8:	2b10      	cmp	r3, #16
 800d1aa:	d122      	bne.n	800d1f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	68db      	ldr	r3, [r3, #12]
 800d1b2:	f003 0310 	and.w	r3, r3, #16
 800d1b6:	2b10      	cmp	r3, #16
 800d1b8:	d11b      	bne.n	800d1f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f06f 0210 	mvn.w	r2, #16
 800d1c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	2208      	movs	r2, #8
 800d1c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	69db      	ldr	r3, [r3, #28]
 800d1d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d003      	beq.n	800d1e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f000 f937 	bl	800d44c <HAL_TIM_IC_CaptureCallback>
 800d1de:	e005      	b.n	800d1ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 f929 	bl	800d438 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 f93a 	bl	800d460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	f003 0301 	and.w	r3, r3, #1
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d10e      	bne.n	800d21e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	f003 0301 	and.w	r3, r3, #1
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d107      	bne.n	800d21e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	f06f 0201 	mvn.w	r2, #1
 800d216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f7f7 fc85 	bl	8004b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	691b      	ldr	r3, [r3, #16]
 800d224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d228:	2b80      	cmp	r3, #128	; 0x80
 800d22a:	d10e      	bne.n	800d24a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	68db      	ldr	r3, [r3, #12]
 800d232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d236:	2b80      	cmp	r3, #128	; 0x80
 800d238:	d107      	bne.n	800d24a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fadf 	bl	800d808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d254:	2b40      	cmp	r3, #64	; 0x40
 800d256:	d10e      	bne.n	800d276 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d262:	2b40      	cmp	r3, #64	; 0x40
 800d264:	d107      	bne.n	800d276 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d26e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f8ff 	bl	800d474 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	691b      	ldr	r3, [r3, #16]
 800d27c:	f003 0320 	and.w	r3, r3, #32
 800d280:	2b20      	cmp	r3, #32
 800d282:	d10e      	bne.n	800d2a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	f003 0320 	and.w	r3, r3, #32
 800d28e:	2b20      	cmp	r3, #32
 800d290:	d107      	bne.n	800d2a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f06f 0220 	mvn.w	r2, #32
 800d29a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 faa9 	bl	800d7f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
 800d2b2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2be:	2b01      	cmp	r3, #1
 800d2c0:	d101      	bne.n	800d2c6 <HAL_TIM_ConfigClockSource+0x1c>
 800d2c2:	2302      	movs	r3, #2
 800d2c4:	e0b4      	b.n	800d430 <HAL_TIM_ConfigClockSource+0x186>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2202      	movs	r2, #2
 800d2d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d2e4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d2ec:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2fe:	d03e      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0xd4>
 800d300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d304:	f200 8087 	bhi.w	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d30c:	f000 8086 	beq.w	800d41c <HAL_TIM_ConfigClockSource+0x172>
 800d310:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d314:	d87f      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d316:	2b70      	cmp	r3, #112	; 0x70
 800d318:	d01a      	beq.n	800d350 <HAL_TIM_ConfigClockSource+0xa6>
 800d31a:	2b70      	cmp	r3, #112	; 0x70
 800d31c:	d87b      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d31e:	2b60      	cmp	r3, #96	; 0x60
 800d320:	d050      	beq.n	800d3c4 <HAL_TIM_ConfigClockSource+0x11a>
 800d322:	2b60      	cmp	r3, #96	; 0x60
 800d324:	d877      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d326:	2b50      	cmp	r3, #80	; 0x50
 800d328:	d03c      	beq.n	800d3a4 <HAL_TIM_ConfigClockSource+0xfa>
 800d32a:	2b50      	cmp	r3, #80	; 0x50
 800d32c:	d873      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d32e:	2b40      	cmp	r3, #64	; 0x40
 800d330:	d058      	beq.n	800d3e4 <HAL_TIM_ConfigClockSource+0x13a>
 800d332:	2b40      	cmp	r3, #64	; 0x40
 800d334:	d86f      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d336:	2b30      	cmp	r3, #48	; 0x30
 800d338:	d064      	beq.n	800d404 <HAL_TIM_ConfigClockSource+0x15a>
 800d33a:	2b30      	cmp	r3, #48	; 0x30
 800d33c:	d86b      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d33e:	2b20      	cmp	r3, #32
 800d340:	d060      	beq.n	800d404 <HAL_TIM_ConfigClockSource+0x15a>
 800d342:	2b20      	cmp	r3, #32
 800d344:	d867      	bhi.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
 800d346:	2b00      	cmp	r3, #0
 800d348:	d05c      	beq.n	800d404 <HAL_TIM_ConfigClockSource+0x15a>
 800d34a:	2b10      	cmp	r3, #16
 800d34c:	d05a      	beq.n	800d404 <HAL_TIM_ConfigClockSource+0x15a>
 800d34e:	e062      	b.n	800d416 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	6818      	ldr	r0, [r3, #0]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	6899      	ldr	r1, [r3, #8]
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	685a      	ldr	r2, [r3, #4]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	f000 f9ac 	bl	800d6bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	689b      	ldr	r3, [r3, #8]
 800d36a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d372:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	68ba      	ldr	r2, [r7, #8]
 800d37a:	609a      	str	r2, [r3, #8]
      break;
 800d37c:	e04f      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	6818      	ldr	r0, [r3, #0]
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	6899      	ldr	r1, [r3, #8]
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	685a      	ldr	r2, [r3, #4]
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	f000 f995 	bl	800d6bc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	689a      	ldr	r2, [r3, #8]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3a0:	609a      	str	r2, [r3, #8]
      break;
 800d3a2:	e03c      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6818      	ldr	r0, [r3, #0]
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	6859      	ldr	r1, [r3, #4]
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	68db      	ldr	r3, [r3, #12]
 800d3b0:	461a      	mov	r2, r3
 800d3b2:	f000 f909 	bl	800d5c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	2150      	movs	r1, #80	; 0x50
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f000 f962 	bl	800d686 <TIM_ITRx_SetConfig>
      break;
 800d3c2:	e02c      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6818      	ldr	r0, [r3, #0]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	6859      	ldr	r1, [r3, #4]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	461a      	mov	r2, r3
 800d3d2:	f000 f928 	bl	800d626 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	2160      	movs	r1, #96	; 0x60
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f000 f952 	bl	800d686 <TIM_ITRx_SetConfig>
      break;
 800d3e2:	e01c      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	6818      	ldr	r0, [r3, #0]
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	6859      	ldr	r1, [r3, #4]
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	461a      	mov	r2, r3
 800d3f2:	f000 f8e9 	bl	800d5c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2140      	movs	r1, #64	; 0x40
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 f942 	bl	800d686 <TIM_ITRx_SetConfig>
      break;
 800d402:	e00c      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	4619      	mov	r1, r3
 800d40e:	4610      	mov	r0, r2
 800d410:	f000 f939 	bl	800d686 <TIM_ITRx_SetConfig>
      break;
 800d414:	e003      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	73fb      	strb	r3, [r7, #15]
      break;
 800d41a:	e000      	b.n	800d41e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d41c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	2201      	movs	r2, #1
 800d422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2200      	movs	r2, #0
 800d42a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d42e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d430:	4618      	mov	r0, r3
 800d432:	3710      	adds	r7, #16
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}

0800d438 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d438:	b480      	push	{r7}
 800d43a:	b083      	sub	sp, #12
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d440:	bf00      	nop
 800d442:	370c      	adds	r7, #12
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d468:	bf00      	nop
 800d46a:	370c      	adds	r7, #12
 800d46c:	46bd      	mov	sp, r7
 800d46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d472:	4770      	bx	lr

0800d474 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d47c:	bf00      	nop
 800d47e:	370c      	adds	r7, #12
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d488:	b480      	push	{r7}
 800d48a:	b085      	sub	sp, #20
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	4a40      	ldr	r2, [pc, #256]	; (800d59c <TIM_Base_SetConfig+0x114>)
 800d49c:	4293      	cmp	r3, r2
 800d49e:	d013      	beq.n	800d4c8 <TIM_Base_SetConfig+0x40>
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4a6:	d00f      	beq.n	800d4c8 <TIM_Base_SetConfig+0x40>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	4a3d      	ldr	r2, [pc, #244]	; (800d5a0 <TIM_Base_SetConfig+0x118>)
 800d4ac:	4293      	cmp	r3, r2
 800d4ae:	d00b      	beq.n	800d4c8 <TIM_Base_SetConfig+0x40>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	4a3c      	ldr	r2, [pc, #240]	; (800d5a4 <TIM_Base_SetConfig+0x11c>)
 800d4b4:	4293      	cmp	r3, r2
 800d4b6:	d007      	beq.n	800d4c8 <TIM_Base_SetConfig+0x40>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	4a3b      	ldr	r2, [pc, #236]	; (800d5a8 <TIM_Base_SetConfig+0x120>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d003      	beq.n	800d4c8 <TIM_Base_SetConfig+0x40>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4a3a      	ldr	r2, [pc, #232]	; (800d5ac <TIM_Base_SetConfig+0x124>)
 800d4c4:	4293      	cmp	r3, r2
 800d4c6:	d108      	bne.n	800d4da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	68fa      	ldr	r2, [r7, #12]
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	4a2f      	ldr	r2, [pc, #188]	; (800d59c <TIM_Base_SetConfig+0x114>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d02b      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4e8:	d027      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	4a2c      	ldr	r2, [pc, #176]	; (800d5a0 <TIM_Base_SetConfig+0x118>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d023      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	4a2b      	ldr	r2, [pc, #172]	; (800d5a4 <TIM_Base_SetConfig+0x11c>)
 800d4f6:	4293      	cmp	r3, r2
 800d4f8:	d01f      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	4a2a      	ldr	r2, [pc, #168]	; (800d5a8 <TIM_Base_SetConfig+0x120>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d01b      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	4a29      	ldr	r2, [pc, #164]	; (800d5ac <TIM_Base_SetConfig+0x124>)
 800d506:	4293      	cmp	r3, r2
 800d508:	d017      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	4a28      	ldr	r2, [pc, #160]	; (800d5b0 <TIM_Base_SetConfig+0x128>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d013      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	4a27      	ldr	r2, [pc, #156]	; (800d5b4 <TIM_Base_SetConfig+0x12c>)
 800d516:	4293      	cmp	r3, r2
 800d518:	d00f      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	4a26      	ldr	r2, [pc, #152]	; (800d5b8 <TIM_Base_SetConfig+0x130>)
 800d51e:	4293      	cmp	r3, r2
 800d520:	d00b      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4a25      	ldr	r2, [pc, #148]	; (800d5bc <TIM_Base_SetConfig+0x134>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d007      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4a24      	ldr	r2, [pc, #144]	; (800d5c0 <TIM_Base_SetConfig+0x138>)
 800d52e:	4293      	cmp	r3, r2
 800d530:	d003      	beq.n	800d53a <TIM_Base_SetConfig+0xb2>
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a23      	ldr	r2, [pc, #140]	; (800d5c4 <TIM_Base_SetConfig+0x13c>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d108      	bne.n	800d54c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d542:	683b      	ldr	r3, [r7, #0]
 800d544:	68db      	ldr	r3, [r3, #12]
 800d546:	68fa      	ldr	r2, [r7, #12]
 800d548:	4313      	orrs	r3, r2
 800d54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	695b      	ldr	r3, [r3, #20]
 800d556:	4313      	orrs	r3, r2
 800d558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	68fa      	ldr	r2, [r7, #12]
 800d55e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	689a      	ldr	r2, [r3, #8]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	681a      	ldr	r2, [r3, #0]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4a0a      	ldr	r2, [pc, #40]	; (800d59c <TIM_Base_SetConfig+0x114>)
 800d574:	4293      	cmp	r3, r2
 800d576:	d003      	beq.n	800d580 <TIM_Base_SetConfig+0xf8>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4a0c      	ldr	r2, [pc, #48]	; (800d5ac <TIM_Base_SetConfig+0x124>)
 800d57c:	4293      	cmp	r3, r2
 800d57e:	d103      	bne.n	800d588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	691a      	ldr	r2, [r3, #16]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	615a      	str	r2, [r3, #20]
}
 800d58e:	bf00      	nop
 800d590:	3714      	adds	r7, #20
 800d592:	46bd      	mov	sp, r7
 800d594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d598:	4770      	bx	lr
 800d59a:	bf00      	nop
 800d59c:	40010000 	.word	0x40010000
 800d5a0:	40000400 	.word	0x40000400
 800d5a4:	40000800 	.word	0x40000800
 800d5a8:	40000c00 	.word	0x40000c00
 800d5ac:	40010400 	.word	0x40010400
 800d5b0:	40014000 	.word	0x40014000
 800d5b4:	40014400 	.word	0x40014400
 800d5b8:	40014800 	.word	0x40014800
 800d5bc:	40001800 	.word	0x40001800
 800d5c0:	40001c00 	.word	0x40001c00
 800d5c4:	40002000 	.word	0x40002000

0800d5c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b087      	sub	sp, #28
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	60f8      	str	r0, [r7, #12]
 800d5d0:	60b9      	str	r1, [r7, #8]
 800d5d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	f023 0201 	bic.w	r2, r3, #1
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	699b      	ldr	r3, [r3, #24]
 800d5ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d5f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	011b      	lsls	r3, r3, #4
 800d5f8:	693a      	ldr	r2, [r7, #16]
 800d5fa:	4313      	orrs	r3, r2
 800d5fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	f023 030a 	bic.w	r3, r3, #10
 800d604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	4313      	orrs	r3, r2
 800d60c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	693a      	ldr	r2, [r7, #16]
 800d612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	697a      	ldr	r2, [r7, #20]
 800d618:	621a      	str	r2, [r3, #32]
}
 800d61a:	bf00      	nop
 800d61c:	371c      	adds	r7, #28
 800d61e:	46bd      	mov	sp, r7
 800d620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d626:	b480      	push	{r7}
 800d628:	b087      	sub	sp, #28
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	60f8      	str	r0, [r7, #12]
 800d62e:	60b9      	str	r1, [r7, #8]
 800d630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	6a1b      	ldr	r3, [r3, #32]
 800d636:	f023 0210 	bic.w	r2, r3, #16
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	699b      	ldr	r3, [r3, #24]
 800d642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6a1b      	ldr	r3, [r3, #32]
 800d648:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d64a:	697b      	ldr	r3, [r7, #20]
 800d64c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	031b      	lsls	r3, r3, #12
 800d656:	697a      	ldr	r2, [r7, #20]
 800d658:	4313      	orrs	r3, r2
 800d65a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d662:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	011b      	lsls	r3, r3, #4
 800d668:	693a      	ldr	r2, [r7, #16]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	697a      	ldr	r2, [r7, #20]
 800d672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	693a      	ldr	r2, [r7, #16]
 800d678:	621a      	str	r2, [r3, #32]
}
 800d67a:	bf00      	nop
 800d67c:	371c      	adds	r7, #28
 800d67e:	46bd      	mov	sp, r7
 800d680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d684:	4770      	bx	lr

0800d686 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d686:	b480      	push	{r7}
 800d688:	b085      	sub	sp, #20
 800d68a:	af00      	add	r7, sp, #0
 800d68c:	6078      	str	r0, [r7, #4]
 800d68e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d69c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	f043 0307 	orr.w	r3, r3, #7
 800d6a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	609a      	str	r2, [r3, #8]
}
 800d6b0:	bf00      	nop
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr

0800d6bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d6bc:	b480      	push	{r7}
 800d6be:	b087      	sub	sp, #28
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	607a      	str	r2, [r7, #4]
 800d6c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d6d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	021a      	lsls	r2, r3, #8
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	431a      	orrs	r2, r3
 800d6e0:	68bb      	ldr	r3, [r7, #8]
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	697a      	ldr	r2, [r7, #20]
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	697a      	ldr	r2, [r7, #20]
 800d6ee:	609a      	str	r2, [r3, #8]
}
 800d6f0:	bf00      	nop
 800d6f2:	371c      	adds	r7, #28
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr

0800d6fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b085      	sub	sp, #20
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
 800d704:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d70c:	2b01      	cmp	r3, #1
 800d70e:	d101      	bne.n	800d714 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d710:	2302      	movs	r3, #2
 800d712:	e05a      	b.n	800d7ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2201      	movs	r2, #1
 800d718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2202      	movs	r2, #2
 800d720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	689b      	ldr	r3, [r3, #8]
 800d732:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d73a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68fa      	ldr	r2, [r7, #12]
 800d742:	4313      	orrs	r3, r2
 800d744:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4a21      	ldr	r2, [pc, #132]	; (800d7d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d754:	4293      	cmp	r3, r2
 800d756:	d022      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d760:	d01d      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a1d      	ldr	r2, [pc, #116]	; (800d7dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d018      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a1b      	ldr	r2, [pc, #108]	; (800d7e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d013      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a1a      	ldr	r2, [pc, #104]	; (800d7e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d00e      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a18      	ldr	r2, [pc, #96]	; (800d7e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d009      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a17      	ldr	r2, [pc, #92]	; (800d7ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d004      	beq.n	800d79e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a15      	ldr	r2, [pc, #84]	; (800d7f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d10c      	bne.n	800d7b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	68ba      	ldr	r2, [r7, #8]
 800d7ac:	4313      	orrs	r3, r2
 800d7ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	68ba      	ldr	r2, [r7, #8]
 800d7b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2201      	movs	r2, #1
 800d7bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d7c8:	2300      	movs	r3, #0
}
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	3714      	adds	r7, #20
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr
 800d7d6:	bf00      	nop
 800d7d8:	40010000 	.word	0x40010000
 800d7dc:	40000400 	.word	0x40000400
 800d7e0:	40000800 	.word	0x40000800
 800d7e4:	40000c00 	.word	0x40000c00
 800d7e8:	40010400 	.word	0x40010400
 800d7ec:	40014000 	.word	0x40014000
 800d7f0:	40001800 	.word	0x40001800

0800d7f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d81c:	b084      	sub	sp, #16
 800d81e:	b580      	push	{r7, lr}
 800d820:	b084      	sub	sp, #16
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	f107 001c 	add.w	r0, r7, #28
 800d82a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d830:	2b01      	cmp	r3, #1
 800d832:	d122      	bne.n	800d87a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800d848:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	68db      	ldr	r3, [r3, #12]
 800d854:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d85c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d85e:	2b01      	cmp	r3, #1
 800d860:	d105      	bne.n	800d86e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f001 fb1c 	bl	800eeac <USB_CoreReset>
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]
 800d878:	e01a      	b.n	800d8b0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f001 fb10 	bl	800eeac <USB_CoreReset>
 800d88c:	4603      	mov	r3, r0
 800d88e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	d106      	bne.n	800d8a4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	639a      	str	r2, [r3, #56]	; 0x38
 800d8a2:	e005      	b.n	800d8b0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d8b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d10b      	bne.n	800d8ce <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	689b      	ldr	r3, [r3, #8]
 800d8ba:	f043 0206 	orr.w	r2, r3, #6
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	689b      	ldr	r3, [r3, #8]
 800d8c6:	f043 0220 	orr.w	r2, r3, #32
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d8ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	3710      	adds	r7, #16
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d8da:	b004      	add	sp, #16
 800d8dc:	4770      	bx	lr
	...

0800d8e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	4613      	mov	r3, r2
 800d8ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d165      	bne.n	800d9c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	4a41      	ldr	r2, [pc, #260]	; (800d9fc <USB_SetTurnaroundTime+0x11c>)
 800d8f8:	4293      	cmp	r3, r2
 800d8fa:	d906      	bls.n	800d90a <USB_SetTurnaroundTime+0x2a>
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	4a40      	ldr	r2, [pc, #256]	; (800da00 <USB_SetTurnaroundTime+0x120>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d202      	bcs.n	800d90a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800d904:	230f      	movs	r3, #15
 800d906:	617b      	str	r3, [r7, #20]
 800d908:	e062      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	4a3c      	ldr	r2, [pc, #240]	; (800da00 <USB_SetTurnaroundTime+0x120>)
 800d90e:	4293      	cmp	r3, r2
 800d910:	d306      	bcc.n	800d920 <USB_SetTurnaroundTime+0x40>
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	4a3b      	ldr	r2, [pc, #236]	; (800da04 <USB_SetTurnaroundTime+0x124>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d202      	bcs.n	800d920 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800d91a:	230e      	movs	r3, #14
 800d91c:	617b      	str	r3, [r7, #20]
 800d91e:	e057      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800d920:	68bb      	ldr	r3, [r7, #8]
 800d922:	4a38      	ldr	r2, [pc, #224]	; (800da04 <USB_SetTurnaroundTime+0x124>)
 800d924:	4293      	cmp	r3, r2
 800d926:	d306      	bcc.n	800d936 <USB_SetTurnaroundTime+0x56>
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	4a37      	ldr	r2, [pc, #220]	; (800da08 <USB_SetTurnaroundTime+0x128>)
 800d92c:	4293      	cmp	r3, r2
 800d92e:	d202      	bcs.n	800d936 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800d930:	230d      	movs	r3, #13
 800d932:	617b      	str	r3, [r7, #20]
 800d934:	e04c      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	4a33      	ldr	r2, [pc, #204]	; (800da08 <USB_SetTurnaroundTime+0x128>)
 800d93a:	4293      	cmp	r3, r2
 800d93c:	d306      	bcc.n	800d94c <USB_SetTurnaroundTime+0x6c>
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	4a32      	ldr	r2, [pc, #200]	; (800da0c <USB_SetTurnaroundTime+0x12c>)
 800d942:	4293      	cmp	r3, r2
 800d944:	d802      	bhi.n	800d94c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800d946:	230c      	movs	r3, #12
 800d948:	617b      	str	r3, [r7, #20]
 800d94a:	e041      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	4a2f      	ldr	r2, [pc, #188]	; (800da0c <USB_SetTurnaroundTime+0x12c>)
 800d950:	4293      	cmp	r3, r2
 800d952:	d906      	bls.n	800d962 <USB_SetTurnaroundTime+0x82>
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	4a2e      	ldr	r2, [pc, #184]	; (800da10 <USB_SetTurnaroundTime+0x130>)
 800d958:	4293      	cmp	r3, r2
 800d95a:	d802      	bhi.n	800d962 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800d95c:	230b      	movs	r3, #11
 800d95e:	617b      	str	r3, [r7, #20]
 800d960:	e036      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	4a2a      	ldr	r2, [pc, #168]	; (800da10 <USB_SetTurnaroundTime+0x130>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d906      	bls.n	800d978 <USB_SetTurnaroundTime+0x98>
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	4a29      	ldr	r2, [pc, #164]	; (800da14 <USB_SetTurnaroundTime+0x134>)
 800d96e:	4293      	cmp	r3, r2
 800d970:	d802      	bhi.n	800d978 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800d972:	230a      	movs	r3, #10
 800d974:	617b      	str	r3, [r7, #20]
 800d976:	e02b      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	4a26      	ldr	r2, [pc, #152]	; (800da14 <USB_SetTurnaroundTime+0x134>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d906      	bls.n	800d98e <USB_SetTurnaroundTime+0xae>
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	4a25      	ldr	r2, [pc, #148]	; (800da18 <USB_SetTurnaroundTime+0x138>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d202      	bcs.n	800d98e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800d988:	2309      	movs	r3, #9
 800d98a:	617b      	str	r3, [r7, #20]
 800d98c:	e020      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	4a21      	ldr	r2, [pc, #132]	; (800da18 <USB_SetTurnaroundTime+0x138>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d306      	bcc.n	800d9a4 <USB_SetTurnaroundTime+0xc4>
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	4a20      	ldr	r2, [pc, #128]	; (800da1c <USB_SetTurnaroundTime+0x13c>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d802      	bhi.n	800d9a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800d99e:	2308      	movs	r3, #8
 800d9a0:	617b      	str	r3, [r7, #20]
 800d9a2:	e015      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	4a1d      	ldr	r2, [pc, #116]	; (800da1c <USB_SetTurnaroundTime+0x13c>)
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	d906      	bls.n	800d9ba <USB_SetTurnaroundTime+0xda>
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	4a1c      	ldr	r2, [pc, #112]	; (800da20 <USB_SetTurnaroundTime+0x140>)
 800d9b0:	4293      	cmp	r3, r2
 800d9b2:	d202      	bcs.n	800d9ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800d9b4:	2307      	movs	r3, #7
 800d9b6:	617b      	str	r3, [r7, #20]
 800d9b8:	e00a      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800d9ba:	2306      	movs	r3, #6
 800d9bc:	617b      	str	r3, [r7, #20]
 800d9be:	e007      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800d9c0:	79fb      	ldrb	r3, [r7, #7]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d102      	bne.n	800d9cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800d9c6:	2309      	movs	r3, #9
 800d9c8:	617b      	str	r3, [r7, #20]
 800d9ca:	e001      	b.n	800d9d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800d9cc:	2309      	movs	r3, #9
 800d9ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	68da      	ldr	r2, [r3, #12]
 800d9e0:	697b      	ldr	r3, [r7, #20]
 800d9e2:	029b      	lsls	r3, r3, #10
 800d9e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800d9e8:	431a      	orrs	r2, r3
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	371c      	adds	r7, #28
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr
 800d9fc:	00d8acbf 	.word	0x00d8acbf
 800da00:	00e4e1c0 	.word	0x00e4e1c0
 800da04:	00f42400 	.word	0x00f42400
 800da08:	01067380 	.word	0x01067380
 800da0c:	011a499f 	.word	0x011a499f
 800da10:	01312cff 	.word	0x01312cff
 800da14:	014ca43f 	.word	0x014ca43f
 800da18:	016e3600 	.word	0x016e3600
 800da1c:	01a6ab1f 	.word	0x01a6ab1f
 800da20:	01e84800 	.word	0x01e84800

0800da24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	f043 0201 	orr.w	r2, r3, #1
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	370c      	adds	r7, #12
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr

0800da46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800da46:	b480      	push	{r7}
 800da48:	b083      	sub	sp, #12
 800da4a:	af00      	add	r7, sp, #0
 800da4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	689b      	ldr	r3, [r3, #8]
 800da52:	f023 0201 	bic.w	r2, r3, #1
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800da5a:	2300      	movs	r3, #0
}
 800da5c:	4618      	mov	r0, r3
 800da5e:	370c      	adds	r7, #12
 800da60:	46bd      	mov	sp, r7
 800da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da66:	4770      	bx	lr

0800da68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	460b      	mov	r3, r1
 800da72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800da74:	2300      	movs	r3, #0
 800da76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	68db      	ldr	r3, [r3, #12]
 800da7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800da84:	78fb      	ldrb	r3, [r7, #3]
 800da86:	2b01      	cmp	r3, #1
 800da88:	d115      	bne.n	800dab6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	68db      	ldr	r3, [r3, #12]
 800da8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800da96:	2001      	movs	r0, #1
 800da98:	f7f9 fb08 	bl	80070ac <HAL_Delay>
      ms++;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	3301      	adds	r3, #1
 800daa0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f001 f972 	bl	800ed8c <USB_GetMode>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d01e      	beq.n	800daec <USB_SetCurrentMode+0x84>
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b31      	cmp	r3, #49	; 0x31
 800dab2:	d9f0      	bls.n	800da96 <USB_SetCurrentMode+0x2e>
 800dab4:	e01a      	b.n	800daec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800dab6:	78fb      	ldrb	r3, [r7, #3]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d115      	bne.n	800dae8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68db      	ldr	r3, [r3, #12]
 800dac0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dac8:	2001      	movs	r0, #1
 800daca:	f7f9 faef 	bl	80070ac <HAL_Delay>
      ms++;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3301      	adds	r3, #1
 800dad2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f001 f959 	bl	800ed8c <USB_GetMode>
 800dada:	4603      	mov	r3, r0
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d005      	beq.n	800daec <USB_SetCurrentMode+0x84>
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b31      	cmp	r3, #49	; 0x31
 800dae4:	d9f0      	bls.n	800dac8 <USB_SetCurrentMode+0x60>
 800dae6:	e001      	b.n	800daec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dae8:	2301      	movs	r3, #1
 800daea:	e005      	b.n	800daf8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2b32      	cmp	r3, #50	; 0x32
 800daf0:	d101      	bne.n	800daf6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db00:	b084      	sub	sp, #16
 800db02:	b580      	push	{r7, lr}
 800db04:	b086      	sub	sp, #24
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800db0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800db12:	2300      	movs	r3, #0
 800db14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800db1a:	2300      	movs	r3, #0
 800db1c:	613b      	str	r3, [r7, #16]
 800db1e:	e009      	b.n	800db34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	3340      	adds	r3, #64	; 0x40
 800db26:	009b      	lsls	r3, r3, #2
 800db28:	4413      	add	r3, r2
 800db2a:	2200      	movs	r2, #0
 800db2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	3301      	adds	r3, #1
 800db32:	613b      	str	r3, [r7, #16]
 800db34:	693b      	ldr	r3, [r7, #16]
 800db36:	2b0e      	cmp	r3, #14
 800db38:	d9f2      	bls.n	800db20 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800db3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d11c      	bne.n	800db7a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db4e:	f043 0302 	orr.w	r3, r3, #2
 800db52:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db64:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db70:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	639a      	str	r2, [r3, #56]	; 0x38
 800db78:	e00b      	b.n	800db92 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db7e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800db98:	461a      	mov	r2, r3
 800db9a:	2300      	movs	r3, #0
 800db9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dba4:	4619      	mov	r1, r3
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dbac:	461a      	mov	r2, r3
 800dbae:	680b      	ldr	r3, [r1, #0]
 800dbb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d10c      	bne.n	800dbd2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dbb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d104      	bne.n	800dbc8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f000 f945 	bl	800de50 <USB_SetDevSpeed>
 800dbc6:	e008      	b.n	800dbda <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dbc8:	2101      	movs	r1, #1
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 f940 	bl	800de50 <USB_SetDevSpeed>
 800dbd0:	e003      	b.n	800dbda <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dbd2:	2103      	movs	r1, #3
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 f93b 	bl	800de50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dbda:	2110      	movs	r1, #16
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 f8f3 	bl	800ddc8 <USB_FlushTxFifo>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d001      	beq.n	800dbec <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800dbe8:	2301      	movs	r3, #1
 800dbea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 f90f 	bl	800de10 <USB_FlushRxFifo>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc02:	461a      	mov	r2, r3
 800dc04:	2300      	movs	r3, #0
 800dc06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc0e:	461a      	mov	r2, r3
 800dc10:	2300      	movs	r3, #0
 800dc12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc1a:	461a      	mov	r2, r3
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dc20:	2300      	movs	r3, #0
 800dc22:	613b      	str	r3, [r7, #16]
 800dc24:	e043      	b.n	800dcae <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	015a      	lsls	r2, r3, #5
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dc38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dc3c:	d118      	bne.n	800dc70 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800dc3e:	693b      	ldr	r3, [r7, #16]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d10a      	bne.n	800dc5a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	015a      	lsls	r2, r3, #5
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	4413      	add	r3, r2
 800dc4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc50:	461a      	mov	r2, r3
 800dc52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dc56:	6013      	str	r3, [r2, #0]
 800dc58:	e013      	b.n	800dc82 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	015a      	lsls	r2, r3, #5
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	4413      	add	r3, r2
 800dc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc66:	461a      	mov	r2, r3
 800dc68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dc6c:	6013      	str	r3, [r2, #0]
 800dc6e:	e008      	b.n	800dc82 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	015a      	lsls	r2, r3, #5
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	4413      	add	r3, r2
 800dc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	2300      	movs	r3, #0
 800dc80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dc82:	693b      	ldr	r3, [r7, #16]
 800dc84:	015a      	lsls	r2, r3, #5
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	4413      	add	r3, r2
 800dc8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc8e:	461a      	mov	r2, r3
 800dc90:	2300      	movs	r3, #0
 800dc92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dc94:	693b      	ldr	r3, [r7, #16]
 800dc96:	015a      	lsls	r2, r3, #5
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	4413      	add	r3, r2
 800dc9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dca0:	461a      	mov	r2, r3
 800dca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	3301      	adds	r3, #1
 800dcac:	613b      	str	r3, [r7, #16]
 800dcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcb0:	693a      	ldr	r2, [r7, #16]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d3b7      	bcc.n	800dc26 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	613b      	str	r3, [r7, #16]
 800dcba:	e043      	b.n	800dd44 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dcbc:	693b      	ldr	r3, [r7, #16]
 800dcbe:	015a      	lsls	r2, r3, #5
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dcce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dcd2:	d118      	bne.n	800dd06 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800dcd4:	693b      	ldr	r3, [r7, #16]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d10a      	bne.n	800dcf0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800dcda:	693b      	ldr	r3, [r7, #16]
 800dcdc:	015a      	lsls	r2, r3, #5
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	4413      	add	r3, r2
 800dce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dce6:	461a      	mov	r2, r3
 800dce8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dcec:	6013      	str	r3, [r2, #0]
 800dcee:	e013      	b.n	800dd18 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	015a      	lsls	r2, r3, #5
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd02:	6013      	str	r3, [r2, #0]
 800dd04:	e008      	b.n	800dd18 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	015a      	lsls	r2, r3, #5
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd12:	461a      	mov	r2, r3
 800dd14:	2300      	movs	r3, #0
 800dd16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dd18:	693b      	ldr	r3, [r7, #16]
 800dd1a:	015a      	lsls	r2, r3, #5
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	4413      	add	r3, r2
 800dd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd24:	461a      	mov	r2, r3
 800dd26:	2300      	movs	r3, #0
 800dd28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	015a      	lsls	r2, r3, #5
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	4413      	add	r3, r2
 800dd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd36:	461a      	mov	r2, r3
 800dd38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	3301      	adds	r3, #1
 800dd42:	613b      	str	r3, [r7, #16]
 800dd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd46:	693a      	ldr	r2, [r7, #16]
 800dd48:	429a      	cmp	r2, r3
 800dd4a:	d3b7      	bcc.n	800dcbc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd52:	691b      	ldr	r3, [r3, #16]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dd5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dd5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	2200      	movs	r2, #0
 800dd64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800dd6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800dd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d105      	bne.n	800dd80 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	f043 0210 	orr.w	r2, r3, #16
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	699a      	ldr	r2, [r3, #24]
 800dd84:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <USB_DevInit+0x2c4>)
 800dd86:	4313      	orrs	r3, r2
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800dd8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d005      	beq.n	800dd9e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	699b      	ldr	r3, [r3, #24]
 800dd96:	f043 0208 	orr.w	r2, r3, #8
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800dd9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d107      	bne.n	800ddb4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	699b      	ldr	r3, [r3, #24]
 800dda8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ddac:	f043 0304 	orr.w	r3, r3, #4
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ddb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3718      	adds	r7, #24
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddc0:	b004      	add	sp, #16
 800ddc2:	4770      	bx	lr
 800ddc4:	803c3800 	.word	0x803c3800

0800ddc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	019b      	lsls	r3, r3, #6
 800ddda:	f043 0220 	orr.w	r2, r3, #32
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	3301      	adds	r3, #1
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	4a08      	ldr	r2, [pc, #32]	; (800de0c <USB_FlushTxFifo+0x44>)
 800ddea:	4293      	cmp	r3, r2
 800ddec:	d901      	bls.n	800ddf2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800ddee:	2303      	movs	r3, #3
 800ddf0:	e006      	b.n	800de00 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	691b      	ldr	r3, [r3, #16]
 800ddf6:	f003 0320 	and.w	r3, r3, #32
 800ddfa:	2b20      	cmp	r3, #32
 800ddfc:	d0f1      	beq.n	800dde2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr
 800de0c:	00030d40 	.word	0x00030d40

0800de10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800de18:	2300      	movs	r3, #0
 800de1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2210      	movs	r2, #16
 800de20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	3301      	adds	r3, #1
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	4a08      	ldr	r2, [pc, #32]	; (800de4c <USB_FlushRxFifo+0x3c>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d901      	bls.n	800de32 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800de2e:	2303      	movs	r3, #3
 800de30:	e006      	b.n	800de40 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	691b      	ldr	r3, [r3, #16]
 800de36:	f003 0310 	and.w	r3, r3, #16
 800de3a:	2b10      	cmp	r3, #16
 800de3c:	d0f1      	beq.n	800de22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	00030d40 	.word	0x00030d40

0800de50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800de50:	b480      	push	{r7}
 800de52:	b085      	sub	sp, #20
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de66:	681a      	ldr	r2, [r3, #0]
 800de68:	78fb      	ldrb	r3, [r7, #3]
 800de6a:	68f9      	ldr	r1, [r7, #12]
 800de6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800de70:	4313      	orrs	r3, r2
 800de72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800de74:	2300      	movs	r3, #0
}
 800de76:	4618      	mov	r0, r3
 800de78:	3714      	adds	r7, #20
 800de7a:	46bd      	mov	sp, r7
 800de7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de80:	4770      	bx	lr

0800de82 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800de82:	b480      	push	{r7}
 800de84:	b087      	sub	sp, #28
 800de86:	af00      	add	r7, sp, #0
 800de88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800de8e:	693b      	ldr	r3, [r7, #16]
 800de90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de94:	689b      	ldr	r3, [r3, #8]
 800de96:	f003 0306 	and.w	r3, r3, #6
 800de9a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d102      	bne.n	800dea8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800dea2:	2300      	movs	r3, #0
 800dea4:	75fb      	strb	r3, [r7, #23]
 800dea6:	e00a      	b.n	800debe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	2b02      	cmp	r3, #2
 800deac:	d002      	beq.n	800deb4 <USB_GetDevSpeed+0x32>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b06      	cmp	r3, #6
 800deb2:	d102      	bne.n	800deba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800deb4:	2302      	movs	r3, #2
 800deb6:	75fb      	strb	r3, [r7, #23]
 800deb8:	e001      	b.n	800debe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800deba:	230f      	movs	r3, #15
 800debc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800debe:	7dfb      	ldrb	r3, [r7, #23]
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	785b      	ldrb	r3, [r3, #1]
 800dee4:	2b01      	cmp	r3, #1
 800dee6:	d13a      	bne.n	800df5e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deee:	69da      	ldr	r2, [r3, #28]
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	f003 030f 	and.w	r3, r3, #15
 800def8:	2101      	movs	r1, #1
 800defa:	fa01 f303 	lsl.w	r3, r1, r3
 800defe:	b29b      	uxth	r3, r3
 800df00:	68f9      	ldr	r1, [r7, #12]
 800df02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df06:	4313      	orrs	r3, r2
 800df08:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800df0a:	68bb      	ldr	r3, [r7, #8]
 800df0c:	015a      	lsls	r2, r3, #5
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	4413      	add	r3, r2
 800df12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d155      	bne.n	800dfcc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	015a      	lsls	r2, r3, #5
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4413      	add	r3, r2
 800df28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	689b      	ldr	r3, [r3, #8]
 800df32:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	78db      	ldrb	r3, [r3, #3]
 800df3a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df3c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	059b      	lsls	r3, r3, #22
 800df42:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800df44:	4313      	orrs	r3, r2
 800df46:	68ba      	ldr	r2, [r7, #8]
 800df48:	0151      	lsls	r1, r2, #5
 800df4a:	68fa      	ldr	r2, [r7, #12]
 800df4c:	440a      	add	r2, r1
 800df4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800df52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800df56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	e036      	b.n	800dfcc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df64:	69da      	ldr	r2, [r3, #28]
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	f003 030f 	and.w	r3, r3, #15
 800df6e:	2101      	movs	r1, #1
 800df70:	fa01 f303 	lsl.w	r3, r1, r3
 800df74:	041b      	lsls	r3, r3, #16
 800df76:	68f9      	ldr	r1, [r7, #12]
 800df78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df7c:	4313      	orrs	r3, r2
 800df7e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	015a      	lsls	r2, r3, #5
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	4413      	add	r3, r2
 800df88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800df92:	2b00      	cmp	r3, #0
 800df94:	d11a      	bne.n	800dfcc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800df96:	68bb      	ldr	r3, [r7, #8]
 800df98:	015a      	lsls	r2, r3, #5
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	4413      	add	r3, r2
 800df9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa2:	681a      	ldr	r2, [r3, #0]
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	78db      	ldrb	r3, [r3, #3]
 800dfb0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800dfb2:	430b      	orrs	r3, r1
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	68ba      	ldr	r2, [r7, #8]
 800dfb8:	0151      	lsls	r1, r2, #5
 800dfba:	68fa      	ldr	r2, [r7, #12]
 800dfbc:	440a      	add	r2, r1
 800dfbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dfc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dfca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3714      	adds	r7, #20
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd8:	4770      	bx	lr
	...

0800dfdc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b085      	sub	sp, #20
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	785b      	ldrb	r3, [r3, #1]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d161      	bne.n	800e0bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	015a      	lsls	r2, r3, #5
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	4413      	add	r3, r2
 800e000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e00a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e00e:	d11f      	bne.n	800e050 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	015a      	lsls	r2, r3, #5
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	4413      	add	r3, r2
 800e018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	0151      	lsls	r1, r2, #5
 800e022:	68fa      	ldr	r2, [r7, #12]
 800e024:	440a      	add	r2, r1
 800e026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e02a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e02e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	015a      	lsls	r2, r3, #5
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4413      	add	r3, r2
 800e038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	0151      	lsls	r1, r2, #5
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	440a      	add	r2, r1
 800e046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e04a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e04e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	f003 030f 	and.w	r3, r3, #15
 800e060:	2101      	movs	r1, #1
 800e062:	fa01 f303 	lsl.w	r3, r1, r3
 800e066:	b29b      	uxth	r3, r3
 800e068:	43db      	mvns	r3, r3
 800e06a:	68f9      	ldr	r1, [r7, #12]
 800e06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e070:	4013      	ands	r3, r2
 800e072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e07a:	69da      	ldr	r2, [r3, #28]
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	781b      	ldrb	r3, [r3, #0]
 800e080:	f003 030f 	and.w	r3, r3, #15
 800e084:	2101      	movs	r1, #1
 800e086:	fa01 f303 	lsl.w	r3, r1, r3
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	43db      	mvns	r3, r3
 800e08e:	68f9      	ldr	r1, [r7, #12]
 800e090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e094:	4013      	ands	r3, r2
 800e096:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	015a      	lsls	r2, r3, #5
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	4413      	add	r3, r2
 800e0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	0159      	lsls	r1, r3, #5
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	440b      	add	r3, r1
 800e0ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	4b35      	ldr	r3, [pc, #212]	; (800e18c <USB_DeactivateEndpoint+0x1b0>)
 800e0b6:	4013      	ands	r3, r2
 800e0b8:	600b      	str	r3, [r1, #0]
 800e0ba:	e060      	b.n	800e17e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	015a      	lsls	r2, r3, #5
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e0ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0d2:	d11f      	bne.n	800e114 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	0151      	lsls	r1, r2, #5
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	440a      	add	r2, r1
 800e0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e0f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e0f4:	68bb      	ldr	r3, [r7, #8]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	68ba      	ldr	r2, [r7, #8]
 800e104:	0151      	lsls	r1, r2, #5
 800e106:	68fa      	ldr	r2, [r7, #12]
 800e108:	440a      	add	r2, r1
 800e10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e10e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e112:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e11a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	f003 030f 	and.w	r3, r3, #15
 800e124:	2101      	movs	r1, #1
 800e126:	fa01 f303 	lsl.w	r3, r1, r3
 800e12a:	041b      	lsls	r3, r3, #16
 800e12c:	43db      	mvns	r3, r3
 800e12e:	68f9      	ldr	r1, [r7, #12]
 800e130:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e134:	4013      	ands	r3, r2
 800e136:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e13e:	69da      	ldr	r2, [r3, #28]
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	f003 030f 	and.w	r3, r3, #15
 800e148:	2101      	movs	r1, #1
 800e14a:	fa01 f303 	lsl.w	r3, r1, r3
 800e14e:	041b      	lsls	r3, r3, #16
 800e150:	43db      	mvns	r3, r3
 800e152:	68f9      	ldr	r1, [r7, #12]
 800e154:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e158:	4013      	ands	r3, r2
 800e15a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e15c:	68bb      	ldr	r3, [r7, #8]
 800e15e:	015a      	lsls	r2, r3, #5
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	4413      	add	r3, r2
 800e164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	0159      	lsls	r1, r3, #5
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	440b      	add	r3, r1
 800e172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e176:	4619      	mov	r1, r3
 800e178:	4b05      	ldr	r3, [pc, #20]	; (800e190 <USB_DeactivateEndpoint+0x1b4>)
 800e17a:	4013      	ands	r3, r2
 800e17c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e17e:	2300      	movs	r3, #0
}
 800e180:	4618      	mov	r0, r3
 800e182:	3714      	adds	r7, #20
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	ec337800 	.word	0xec337800
 800e190:	eff37800 	.word	0xeff37800

0800e194 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b08a      	sub	sp, #40	; 0x28
 800e198:	af02      	add	r7, sp, #8
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	4613      	mov	r3, r2
 800e1a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	785b      	ldrb	r3, [r3, #1]
 800e1b0:	2b01      	cmp	r3, #1
 800e1b2:	f040 815c 	bne.w	800e46e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	695b      	ldr	r3, [r3, #20]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d132      	bne.n	800e224 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e1be:	69bb      	ldr	r3, [r7, #24]
 800e1c0:	015a      	lsls	r2, r3, #5
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	69ba      	ldr	r2, [r7, #24]
 800e1ce:	0151      	lsls	r1, r2, #5
 800e1d0:	69fa      	ldr	r2, [r7, #28]
 800e1d2:	440a      	add	r2, r1
 800e1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e1dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e1e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	015a      	lsls	r2, r3, #5
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	4413      	add	r3, r2
 800e1ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1ee:	691b      	ldr	r3, [r3, #16]
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	0151      	lsls	r1, r2, #5
 800e1f4:	69fa      	ldr	r2, [r7, #28]
 800e1f6:	440a      	add	r2, r1
 800e1f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e1fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e200:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e202:	69bb      	ldr	r3, [r7, #24]
 800e204:	015a      	lsls	r2, r3, #5
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	4413      	add	r3, r2
 800e20a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	0151      	lsls	r1, r2, #5
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	440a      	add	r2, r1
 800e218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e21c:	0cdb      	lsrs	r3, r3, #19
 800e21e:	04db      	lsls	r3, r3, #19
 800e220:	6113      	str	r3, [r2, #16]
 800e222:	e074      	b.n	800e30e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	69fb      	ldr	r3, [r7, #28]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	69ba      	ldr	r2, [r7, #24]
 800e234:	0151      	lsls	r1, r2, #5
 800e236:	69fa      	ldr	r2, [r7, #28]
 800e238:	440a      	add	r2, r1
 800e23a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e23e:	0cdb      	lsrs	r3, r3, #19
 800e240:	04db      	lsls	r3, r3, #19
 800e242:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e244:	69bb      	ldr	r3, [r7, #24]
 800e246:	015a      	lsls	r2, r3, #5
 800e248:	69fb      	ldr	r3, [r7, #28]
 800e24a:	4413      	add	r3, r2
 800e24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e250:	691b      	ldr	r3, [r3, #16]
 800e252:	69ba      	ldr	r2, [r7, #24]
 800e254:	0151      	lsls	r1, r2, #5
 800e256:	69fa      	ldr	r2, [r7, #28]
 800e258:	440a      	add	r2, r1
 800e25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e25e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e262:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e266:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e268:	69bb      	ldr	r3, [r7, #24]
 800e26a:	015a      	lsls	r2, r3, #5
 800e26c:	69fb      	ldr	r3, [r7, #28]
 800e26e:	4413      	add	r3, r2
 800e270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e274:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	6959      	ldr	r1, [r3, #20]
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	440b      	add	r3, r1
 800e280:	1e59      	subs	r1, r3, #1
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	fbb1 f3f3 	udiv	r3, r1, r3
 800e28a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e28c:	4b9d      	ldr	r3, [pc, #628]	; (800e504 <USB_EPStartXfer+0x370>)
 800e28e:	400b      	ands	r3, r1
 800e290:	69b9      	ldr	r1, [r7, #24]
 800e292:	0148      	lsls	r0, r1, #5
 800e294:	69f9      	ldr	r1, [r7, #28]
 800e296:	4401      	add	r1, r0
 800e298:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e29c:	4313      	orrs	r3, r2
 800e29e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e2a0:	69bb      	ldr	r3, [r7, #24]
 800e2a2:	015a      	lsls	r2, r3, #5
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2ac:	691a      	ldr	r2, [r3, #16]
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	695b      	ldr	r3, [r3, #20]
 800e2b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e2b6:	69b9      	ldr	r1, [r7, #24]
 800e2b8:	0148      	lsls	r0, r1, #5
 800e2ba:	69f9      	ldr	r1, [r7, #28]
 800e2bc:	4401      	add	r1, r0
 800e2be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e2c2:	4313      	orrs	r3, r2
 800e2c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	78db      	ldrb	r3, [r3, #3]
 800e2ca:	2b01      	cmp	r3, #1
 800e2cc:	d11f      	bne.n	800e30e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	015a      	lsls	r2, r3, #5
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2da:	691b      	ldr	r3, [r3, #16]
 800e2dc:	69ba      	ldr	r2, [r7, #24]
 800e2de:	0151      	lsls	r1, r2, #5
 800e2e0:	69fa      	ldr	r2, [r7, #28]
 800e2e2:	440a      	add	r2, r1
 800e2e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e2ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	015a      	lsls	r2, r3, #5
 800e2f2:	69fb      	ldr	r3, [r7, #28]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2fa:	691b      	ldr	r3, [r3, #16]
 800e2fc:	69ba      	ldr	r2, [r7, #24]
 800e2fe:	0151      	lsls	r1, r2, #5
 800e300:	69fa      	ldr	r2, [r7, #28]
 800e302:	440a      	add	r2, r1
 800e304:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e30c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e30e:	79fb      	ldrb	r3, [r7, #7]
 800e310:	2b01      	cmp	r3, #1
 800e312:	d14b      	bne.n	800e3ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d009      	beq.n	800e330 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	015a      	lsls	r2, r3, #5
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	4413      	add	r3, r2
 800e324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e328:	461a      	mov	r2, r3
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	78db      	ldrb	r3, [r3, #3]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d128      	bne.n	800e38a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e338:	69fb      	ldr	r3, [r7, #28]
 800e33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e33e:	689b      	ldr	r3, [r3, #8]
 800e340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e344:	2b00      	cmp	r3, #0
 800e346:	d110      	bne.n	800e36a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	015a      	lsls	r2, r3, #5
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	4413      	add	r3, r2
 800e350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	69ba      	ldr	r2, [r7, #24]
 800e358:	0151      	lsls	r1, r2, #5
 800e35a:	69fa      	ldr	r2, [r7, #28]
 800e35c:	440a      	add	r2, r1
 800e35e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e362:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e366:	6013      	str	r3, [r2, #0]
 800e368:	e00f      	b.n	800e38a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e36a:	69bb      	ldr	r3, [r7, #24]
 800e36c:	015a      	lsls	r2, r3, #5
 800e36e:	69fb      	ldr	r3, [r7, #28]
 800e370:	4413      	add	r3, r2
 800e372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	69ba      	ldr	r2, [r7, #24]
 800e37a:	0151      	lsls	r1, r2, #5
 800e37c:	69fa      	ldr	r2, [r7, #28]
 800e37e:	440a      	add	r2, r1
 800e380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e388:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e38a:	69bb      	ldr	r3, [r7, #24]
 800e38c:	015a      	lsls	r2, r3, #5
 800e38e:	69fb      	ldr	r3, [r7, #28]
 800e390:	4413      	add	r3, r2
 800e392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	69ba      	ldr	r2, [r7, #24]
 800e39a:	0151      	lsls	r1, r2, #5
 800e39c:	69fa      	ldr	r2, [r7, #28]
 800e39e:	440a      	add	r2, r1
 800e3a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3a8:	6013      	str	r3, [r2, #0]
 800e3aa:	e12f      	b.n	800e60c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e3ac:	69bb      	ldr	r3, [r7, #24]
 800e3ae:	015a      	lsls	r2, r3, #5
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	4413      	add	r3, r2
 800e3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	69ba      	ldr	r2, [r7, #24]
 800e3bc:	0151      	lsls	r1, r2, #5
 800e3be:	69fa      	ldr	r2, [r7, #28]
 800e3c0:	440a      	add	r2, r1
 800e3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e3c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e3ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	78db      	ldrb	r3, [r3, #3]
 800e3d0:	2b01      	cmp	r3, #1
 800e3d2:	d015      	beq.n	800e400 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	695b      	ldr	r3, [r3, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	f000 8117 	beq.w	800e60c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	f003 030f 	and.w	r3, r3, #15
 800e3ee:	2101      	movs	r1, #1
 800e3f0:	fa01 f303 	lsl.w	r3, r1, r3
 800e3f4:	69f9      	ldr	r1, [r7, #28]
 800e3f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	634b      	str	r3, [r1, #52]	; 0x34
 800e3fe:	e105      	b.n	800e60c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e406:	689b      	ldr	r3, [r3, #8]
 800e408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d110      	bne.n	800e432 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e410:	69bb      	ldr	r3, [r7, #24]
 800e412:	015a      	lsls	r2, r3, #5
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	4413      	add	r3, r2
 800e418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	69ba      	ldr	r2, [r7, #24]
 800e420:	0151      	lsls	r1, r2, #5
 800e422:	69fa      	ldr	r2, [r7, #28]
 800e424:	440a      	add	r2, r1
 800e426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e42a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	e00f      	b.n	800e452 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e432:	69bb      	ldr	r3, [r7, #24]
 800e434:	015a      	lsls	r2, r3, #5
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	4413      	add	r3, r2
 800e43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	69ba      	ldr	r2, [r7, #24]
 800e442:	0151      	lsls	r1, r2, #5
 800e444:	69fa      	ldr	r2, [r7, #28]
 800e446:	440a      	add	r2, r1
 800e448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e44c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e450:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	68d9      	ldr	r1, [r3, #12]
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	781a      	ldrb	r2, [r3, #0]
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	695b      	ldr	r3, [r3, #20]
 800e45e:	b298      	uxth	r0, r3
 800e460:	79fb      	ldrb	r3, [r7, #7]
 800e462:	9300      	str	r3, [sp, #0]
 800e464:	4603      	mov	r3, r0
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f000 fa2b 	bl	800e8c2 <USB_WritePacket>
 800e46c:	e0ce      	b.n	800e60c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	015a      	lsls	r2, r3, #5
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	4413      	add	r3, r2
 800e476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	69ba      	ldr	r2, [r7, #24]
 800e47e:	0151      	lsls	r1, r2, #5
 800e480:	69fa      	ldr	r2, [r7, #28]
 800e482:	440a      	add	r2, r1
 800e484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e488:	0cdb      	lsrs	r3, r3, #19
 800e48a:	04db      	lsls	r3, r3, #19
 800e48c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	015a      	lsls	r2, r3, #5
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	4413      	add	r3, r2
 800e496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e49a:	691b      	ldr	r3, [r3, #16]
 800e49c:	69ba      	ldr	r2, [r7, #24]
 800e49e:	0151      	lsls	r1, r2, #5
 800e4a0:	69fa      	ldr	r2, [r7, #28]
 800e4a2:	440a      	add	r2, r1
 800e4a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e4ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e4b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e4b2:	68bb      	ldr	r3, [r7, #8]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d126      	bne.n	800e508 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	015a      	lsls	r2, r3, #5
 800e4be:	69fb      	ldr	r3, [r7, #28]
 800e4c0:	4413      	add	r3, r2
 800e4c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4c6:	691a      	ldr	r2, [r3, #16]
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	689b      	ldr	r3, [r3, #8]
 800e4cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e4d0:	69b9      	ldr	r1, [r7, #24]
 800e4d2:	0148      	lsls	r0, r1, #5
 800e4d4:	69f9      	ldr	r1, [r7, #28]
 800e4d6:	4401      	add	r1, r0
 800e4d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e4dc:	4313      	orrs	r3, r2
 800e4de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e4e0:	69bb      	ldr	r3, [r7, #24]
 800e4e2:	015a      	lsls	r2, r3, #5
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	69ba      	ldr	r2, [r7, #24]
 800e4f0:	0151      	lsls	r1, r2, #5
 800e4f2:	69fa      	ldr	r2, [r7, #28]
 800e4f4:	440a      	add	r2, r1
 800e4f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e4fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4fe:	6113      	str	r3, [r2, #16]
 800e500:	e036      	b.n	800e570 <USB_EPStartXfer+0x3dc>
 800e502:	bf00      	nop
 800e504:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e508:	68bb      	ldr	r3, [r7, #8]
 800e50a:	695a      	ldr	r2, [r3, #20]
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	4413      	add	r3, r2
 800e512:	1e5a      	subs	r2, r3, #1
 800e514:	68bb      	ldr	r3, [r7, #8]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	fbb2 f3f3 	udiv	r3, r2, r3
 800e51c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e51e:	69bb      	ldr	r3, [r7, #24]
 800e520:	015a      	lsls	r2, r3, #5
 800e522:	69fb      	ldr	r3, [r7, #28]
 800e524:	4413      	add	r3, r2
 800e526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e52a:	691a      	ldr	r2, [r3, #16]
 800e52c:	8afb      	ldrh	r3, [r7, #22]
 800e52e:	04d9      	lsls	r1, r3, #19
 800e530:	4b39      	ldr	r3, [pc, #228]	; (800e618 <USB_EPStartXfer+0x484>)
 800e532:	400b      	ands	r3, r1
 800e534:	69b9      	ldr	r1, [r7, #24]
 800e536:	0148      	lsls	r0, r1, #5
 800e538:	69f9      	ldr	r1, [r7, #28]
 800e53a:	4401      	add	r1, r0
 800e53c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e540:	4313      	orrs	r3, r2
 800e542:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	69fb      	ldr	r3, [r7, #28]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e550:	691a      	ldr	r2, [r3, #16]
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	8af9      	ldrh	r1, [r7, #22]
 800e558:	fb01 f303 	mul.w	r3, r1, r3
 800e55c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e560:	69b9      	ldr	r1, [r7, #24]
 800e562:	0148      	lsls	r0, r1, #5
 800e564:	69f9      	ldr	r1, [r7, #28]
 800e566:	4401      	add	r1, r0
 800e568:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e56c:	4313      	orrs	r3, r2
 800e56e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e570:	79fb      	ldrb	r3, [r7, #7]
 800e572:	2b01      	cmp	r3, #1
 800e574:	d10d      	bne.n	800e592 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	68db      	ldr	r3, [r3, #12]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d009      	beq.n	800e592 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	68d9      	ldr	r1, [r3, #12]
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	015a      	lsls	r2, r3, #5
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	4413      	add	r3, r2
 800e58a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e58e:	460a      	mov	r2, r1
 800e590:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	78db      	ldrb	r3, [r3, #3]
 800e596:	2b01      	cmp	r3, #1
 800e598:	d128      	bne.n	800e5ec <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d110      	bne.n	800e5cc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	015a      	lsls	r2, r3, #5
 800e5ae:	69fb      	ldr	r3, [r7, #28]
 800e5b0:	4413      	add	r3, r2
 800e5b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	69ba      	ldr	r2, [r7, #24]
 800e5ba:	0151      	lsls	r1, r2, #5
 800e5bc:	69fa      	ldr	r2, [r7, #28]
 800e5be:	440a      	add	r2, r1
 800e5c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5c8:	6013      	str	r3, [r2, #0]
 800e5ca:	e00f      	b.n	800e5ec <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e5cc:	69bb      	ldr	r3, [r7, #24]
 800e5ce:	015a      	lsls	r2, r3, #5
 800e5d0:	69fb      	ldr	r3, [r7, #28]
 800e5d2:	4413      	add	r3, r2
 800e5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	69ba      	ldr	r2, [r7, #24]
 800e5dc:	0151      	lsls	r1, r2, #5
 800e5de:	69fa      	ldr	r2, [r7, #28]
 800e5e0:	440a      	add	r2, r1
 800e5e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e5e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e5ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e5ec:	69bb      	ldr	r3, [r7, #24]
 800e5ee:	015a      	lsls	r2, r3, #5
 800e5f0:	69fb      	ldr	r3, [r7, #28]
 800e5f2:	4413      	add	r3, r2
 800e5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	69ba      	ldr	r2, [r7, #24]
 800e5fc:	0151      	lsls	r1, r2, #5
 800e5fe:	69fa      	ldr	r2, [r7, #28]
 800e600:	440a      	add	r2, r1
 800e602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e606:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e60a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e60c:	2300      	movs	r3, #0
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3720      	adds	r7, #32
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	1ff80000 	.word	0x1ff80000

0800e61c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b087      	sub	sp, #28
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	4613      	mov	r3, r2
 800e628:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	785b      	ldrb	r3, [r3, #1]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	f040 80cd 	bne.w	800e7d8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e63e:	68bb      	ldr	r3, [r7, #8]
 800e640:	695b      	ldr	r3, [r3, #20]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d132      	bne.n	800e6ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	015a      	lsls	r2, r3, #5
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	4413      	add	r3, r2
 800e64e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e652:	691b      	ldr	r3, [r3, #16]
 800e654:	693a      	ldr	r2, [r7, #16]
 800e656:	0151      	lsls	r1, r2, #5
 800e658:	697a      	ldr	r2, [r7, #20]
 800e65a:	440a      	add	r2, r1
 800e65c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e660:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e664:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e668:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	015a      	lsls	r2, r3, #5
 800e66e:	697b      	ldr	r3, [r7, #20]
 800e670:	4413      	add	r3, r2
 800e672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e676:	691b      	ldr	r3, [r3, #16]
 800e678:	693a      	ldr	r2, [r7, #16]
 800e67a:	0151      	lsls	r1, r2, #5
 800e67c:	697a      	ldr	r2, [r7, #20]
 800e67e:	440a      	add	r2, r1
 800e680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	015a      	lsls	r2, r3, #5
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	4413      	add	r3, r2
 800e692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	693a      	ldr	r2, [r7, #16]
 800e69a:	0151      	lsls	r1, r2, #5
 800e69c:	697a      	ldr	r2, [r7, #20]
 800e69e:	440a      	add	r2, r1
 800e6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6a4:	0cdb      	lsrs	r3, r3, #19
 800e6a6:	04db      	lsls	r3, r3, #19
 800e6a8:	6113      	str	r3, [r2, #16]
 800e6aa:	e04e      	b.n	800e74a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	015a      	lsls	r2, r3, #5
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	4413      	add	r3, r2
 800e6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6b8:	691b      	ldr	r3, [r3, #16]
 800e6ba:	693a      	ldr	r2, [r7, #16]
 800e6bc:	0151      	lsls	r1, r2, #5
 800e6be:	697a      	ldr	r2, [r7, #20]
 800e6c0:	440a      	add	r2, r1
 800e6c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6c6:	0cdb      	lsrs	r3, r3, #19
 800e6c8:	04db      	lsls	r3, r3, #19
 800e6ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	015a      	lsls	r2, r3, #5
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	4413      	add	r3, r2
 800e6d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6d8:	691b      	ldr	r3, [r3, #16]
 800e6da:	693a      	ldr	r2, [r7, #16]
 800e6dc:	0151      	lsls	r1, r2, #5
 800e6de:	697a      	ldr	r2, [r7, #20]
 800e6e0:	440a      	add	r2, r1
 800e6e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e6ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e6ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	695a      	ldr	r2, [r3, #20]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	689b      	ldr	r3, [r3, #8]
 800e6f8:	429a      	cmp	r2, r3
 800e6fa:	d903      	bls.n	800e704 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	689a      	ldr	r2, [r3, #8]
 800e700:	68bb      	ldr	r3, [r7, #8]
 800e702:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	015a      	lsls	r2, r3, #5
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	4413      	add	r3, r2
 800e70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e710:	691b      	ldr	r3, [r3, #16]
 800e712:	693a      	ldr	r2, [r7, #16]
 800e714:	0151      	lsls	r1, r2, #5
 800e716:	697a      	ldr	r2, [r7, #20]
 800e718:	440a      	add	r2, r1
 800e71a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e71e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e722:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	015a      	lsls	r2, r3, #5
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	4413      	add	r3, r2
 800e72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e730:	691a      	ldr	r2, [r3, #16]
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	695b      	ldr	r3, [r3, #20]
 800e736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e73a:	6939      	ldr	r1, [r7, #16]
 800e73c:	0148      	lsls	r0, r1, #5
 800e73e:	6979      	ldr	r1, [r7, #20]
 800e740:	4401      	add	r1, r0
 800e742:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e746:	4313      	orrs	r3, r2
 800e748:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d11e      	bne.n	800e78e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	691b      	ldr	r3, [r3, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d009      	beq.n	800e76c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	015a      	lsls	r2, r3, #5
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	4413      	add	r3, r2
 800e760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e764:	461a      	mov	r2, r3
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	015a      	lsls	r2, r3, #5
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	4413      	add	r3, r2
 800e774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	693a      	ldr	r2, [r7, #16]
 800e77c:	0151      	lsls	r1, r2, #5
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	440a      	add	r2, r1
 800e782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e786:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	e092      	b.n	800e8b4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	015a      	lsls	r2, r3, #5
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	4413      	add	r3, r2
 800e796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	693a      	ldr	r2, [r7, #16]
 800e79e:	0151      	lsls	r1, r2, #5
 800e7a0:	697a      	ldr	r2, [r7, #20]
 800e7a2:	440a      	add	r2, r1
 800e7a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e7a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e7ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	695b      	ldr	r3, [r3, #20]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d07e      	beq.n	800e8b4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e7bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	f003 030f 	and.w	r3, r3, #15
 800e7c6:	2101      	movs	r1, #1
 800e7c8:	fa01 f303 	lsl.w	r3, r1, r3
 800e7cc:	6979      	ldr	r1, [r7, #20]
 800e7ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e7d2:	4313      	orrs	r3, r2
 800e7d4:	634b      	str	r3, [r1, #52]	; 0x34
 800e7d6:	e06d      	b.n	800e8b4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e7d8:	693b      	ldr	r3, [r7, #16]
 800e7da:	015a      	lsls	r2, r3, #5
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	4413      	add	r3, r2
 800e7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7e4:	691b      	ldr	r3, [r3, #16]
 800e7e6:	693a      	ldr	r2, [r7, #16]
 800e7e8:	0151      	lsls	r1, r2, #5
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	440a      	add	r2, r1
 800e7ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7f2:	0cdb      	lsrs	r3, r3, #19
 800e7f4:	04db      	lsls	r3, r3, #19
 800e7f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e7f8:	693b      	ldr	r3, [r7, #16]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e804:	691b      	ldr	r3, [r3, #16]
 800e806:	693a      	ldr	r2, [r7, #16]
 800e808:	0151      	lsls	r1, r2, #5
 800e80a:	697a      	ldr	r2, [r7, #20]
 800e80c:	440a      	add	r2, r1
 800e80e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e812:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e816:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e81a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	695b      	ldr	r3, [r3, #20]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d003      	beq.n	800e82c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	689a      	ldr	r2, [r3, #8]
 800e828:	68bb      	ldr	r3, [r7, #8]
 800e82a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e82c:	693b      	ldr	r3, [r7, #16]
 800e82e:	015a      	lsls	r2, r3, #5
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	4413      	add	r3, r2
 800e834:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e838:	691b      	ldr	r3, [r3, #16]
 800e83a:	693a      	ldr	r2, [r7, #16]
 800e83c:	0151      	lsls	r1, r2, #5
 800e83e:	697a      	ldr	r2, [r7, #20]
 800e840:	440a      	add	r2, r1
 800e842:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e84a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	015a      	lsls	r2, r3, #5
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	4413      	add	r3, r2
 800e854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e858:	691a      	ldr	r2, [r3, #16]
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	689b      	ldr	r3, [r3, #8]
 800e85e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e862:	6939      	ldr	r1, [r7, #16]
 800e864:	0148      	lsls	r0, r1, #5
 800e866:	6979      	ldr	r1, [r7, #20]
 800e868:	4401      	add	r1, r0
 800e86a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e86e:	4313      	orrs	r3, r2
 800e870:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800e872:	79fb      	ldrb	r3, [r7, #7]
 800e874:	2b01      	cmp	r3, #1
 800e876:	d10d      	bne.n	800e894 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d009      	beq.n	800e894 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	68d9      	ldr	r1, [r3, #12]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	015a      	lsls	r2, r3, #5
 800e888:	697b      	ldr	r3, [r7, #20]
 800e88a:	4413      	add	r3, r2
 800e88c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e890:	460a      	mov	r2, r1
 800e892:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	697b      	ldr	r3, [r7, #20]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	693a      	ldr	r2, [r7, #16]
 800e8a4:	0151      	lsls	r1, r2, #5
 800e8a6:	697a      	ldr	r2, [r7, #20]
 800e8a8:	440a      	add	r2, r1
 800e8aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e8b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	371c      	adds	r7, #28
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c0:	4770      	bx	lr

0800e8c2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800e8c2:	b480      	push	{r7}
 800e8c4:	b089      	sub	sp, #36	; 0x24
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	60f8      	str	r0, [r7, #12]
 800e8ca:	60b9      	str	r1, [r7, #8]
 800e8cc:	4611      	mov	r1, r2
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	460b      	mov	r3, r1
 800e8d2:	71fb      	strb	r3, [r7, #7]
 800e8d4:	4613      	mov	r3, r2
 800e8d6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800e8dc:	68bb      	ldr	r3, [r7, #8]
 800e8de:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800e8e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d123      	bne.n	800e930 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800e8e8:	88bb      	ldrh	r3, [r7, #4]
 800e8ea:	3303      	adds	r3, #3
 800e8ec:	089b      	lsrs	r3, r3, #2
 800e8ee:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	61bb      	str	r3, [r7, #24]
 800e8f4:	e018      	b.n	800e928 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800e8f6:	79fb      	ldrb	r3, [r7, #7]
 800e8f8:	031a      	lsls	r2, r3, #12
 800e8fa:	697b      	ldr	r3, [r7, #20]
 800e8fc:	4413      	add	r3, r2
 800e8fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e902:	461a      	mov	r2, r3
 800e904:	69fb      	ldr	r3, [r7, #28]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	6013      	str	r3, [r2, #0]
      pSrc++;
 800e90a:	69fb      	ldr	r3, [r7, #28]
 800e90c:	3301      	adds	r3, #1
 800e90e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	3301      	adds	r3, #1
 800e914:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	3301      	adds	r3, #1
 800e91a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800e91c:	69fb      	ldr	r3, [r7, #28]
 800e91e:	3301      	adds	r3, #1
 800e920:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	3301      	adds	r3, #1
 800e926:	61bb      	str	r3, [r7, #24]
 800e928:	69ba      	ldr	r2, [r7, #24]
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	429a      	cmp	r2, r3
 800e92e:	d3e2      	bcc.n	800e8f6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3724      	adds	r7, #36	; 0x24
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800e93e:	b480      	push	{r7}
 800e940:	b08b      	sub	sp, #44	; 0x2c
 800e942:	af00      	add	r7, sp, #0
 800e944:	60f8      	str	r0, [r7, #12]
 800e946:	60b9      	str	r1, [r7, #8]
 800e948:	4613      	mov	r3, r2
 800e94a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800e954:	88fb      	ldrh	r3, [r7, #6]
 800e956:	089b      	lsrs	r3, r3, #2
 800e958:	b29b      	uxth	r3, r3
 800e95a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800e95c:	88fb      	ldrh	r3, [r7, #6]
 800e95e:	f003 0303 	and.w	r3, r3, #3
 800e962:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800e964:	2300      	movs	r3, #0
 800e966:	623b      	str	r3, [r7, #32]
 800e968:	e014      	b.n	800e994 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800e96a:	69bb      	ldr	r3, [r7, #24]
 800e96c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e970:	681a      	ldr	r2, [r3, #0]
 800e972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e974:	601a      	str	r2, [r3, #0]
    pDest++;
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	3301      	adds	r3, #1
 800e97a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97e:	3301      	adds	r3, #1
 800e980:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e984:	3301      	adds	r3, #1
 800e986:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800e988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98a:	3301      	adds	r3, #1
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800e98e:	6a3b      	ldr	r3, [r7, #32]
 800e990:	3301      	adds	r3, #1
 800e992:	623b      	str	r3, [r7, #32]
 800e994:	6a3a      	ldr	r2, [r7, #32]
 800e996:	697b      	ldr	r3, [r7, #20]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d3e6      	bcc.n	800e96a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800e99c:	8bfb      	ldrh	r3, [r7, #30]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d01e      	beq.n	800e9e0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800e9a6:	69bb      	ldr	r3, [r7, #24]
 800e9a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800e9ac:	461a      	mov	r2, r3
 800e9ae:	f107 0310 	add.w	r3, r7, #16
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800e9b6:	693a      	ldr	r2, [r7, #16]
 800e9b8:	6a3b      	ldr	r3, [r7, #32]
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	fa22 f303 	lsr.w	r3, r2, r3
 800e9c2:	b2da      	uxtb	r2, r3
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c6:	701a      	strb	r2, [r3, #0]
      i++;
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	623b      	str	r3, [r7, #32]
      pDest++;
 800e9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800e9d4:	8bfb      	ldrh	r3, [r7, #30]
 800e9d6:	3b01      	subs	r3, #1
 800e9d8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800e9da:	8bfb      	ldrh	r3, [r7, #30]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1ea      	bne.n	800e9b6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800e9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	372c      	adds	r7, #44	; 0x2c
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e9ee:	b480      	push	{r7}
 800e9f0:	b085      	sub	sp, #20
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	785b      	ldrb	r3, [r3, #1]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d12c      	bne.n	800ea64 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	015a      	lsls	r2, r3, #5
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	4413      	add	r3, r2
 800ea12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	db12      	blt.n	800ea42 <USB_EPSetStall+0x54>
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00f      	beq.n	800ea42 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	015a      	lsls	r2, r3, #5
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	4413      	add	r3, r2
 800ea2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	0151      	lsls	r1, r2, #5
 800ea34:	68fa      	ldr	r2, [r7, #12]
 800ea36:	440a      	add	r2, r1
 800ea38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ea40:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	015a      	lsls	r2, r3, #5
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	4413      	add	r3, r2
 800ea4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	68ba      	ldr	r2, [r7, #8]
 800ea52:	0151      	lsls	r1, r2, #5
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	440a      	add	r2, r1
 800ea58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ea60:	6013      	str	r3, [r2, #0]
 800ea62:	e02b      	b.n	800eabc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	015a      	lsls	r2, r3, #5
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	4413      	add	r3, r2
 800ea6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	db12      	blt.n	800ea9c <USB_EPSetStall+0xae>
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00f      	beq.n	800ea9c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	015a      	lsls	r2, r3, #5
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	4413      	add	r3, r2
 800ea84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68ba      	ldr	r2, [r7, #8]
 800ea8c:	0151      	lsls	r1, r2, #5
 800ea8e:	68fa      	ldr	r2, [r7, #12]
 800ea90:	440a      	add	r2, r1
 800ea92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ea96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ea9a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	015a      	lsls	r2, r3, #5
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	0151      	lsls	r1, r2, #5
 800eaae:	68fa      	ldr	r2, [r7, #12]
 800eab0:	440a      	add	r2, r1
 800eab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800eaba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3714      	adds	r7, #20
 800eac2:	46bd      	mov	sp, r7
 800eac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac8:	4770      	bx	lr

0800eaca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eaca:	b480      	push	{r7}
 800eacc:	b085      	sub	sp, #20
 800eace:	af00      	add	r7, sp, #0
 800ead0:	6078      	str	r0, [r7, #4]
 800ead2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	785b      	ldrb	r3, [r3, #1]
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d128      	bne.n	800eb38 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	015a      	lsls	r2, r3, #5
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	4413      	add	r3, r2
 800eaee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	0151      	lsls	r1, r2, #5
 800eaf8:	68fa      	ldr	r2, [r7, #12]
 800eafa:	440a      	add	r2, r1
 800eafc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb06:	683b      	ldr	r3, [r7, #0]
 800eb08:	78db      	ldrb	r3, [r3, #3]
 800eb0a:	2b03      	cmp	r3, #3
 800eb0c:	d003      	beq.n	800eb16 <USB_EPClearStall+0x4c>
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	78db      	ldrb	r3, [r3, #3]
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d138      	bne.n	800eb88 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb16:	68bb      	ldr	r3, [r7, #8]
 800eb18:	015a      	lsls	r2, r3, #5
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	4413      	add	r3, r2
 800eb1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	68ba      	ldr	r2, [r7, #8]
 800eb26:	0151      	lsls	r1, r2, #5
 800eb28:	68fa      	ldr	r2, [r7, #12]
 800eb2a:	440a      	add	r2, r1
 800eb2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800eb30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb34:	6013      	str	r3, [r2, #0]
 800eb36:	e027      	b.n	800eb88 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	015a      	lsls	r2, r3, #5
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	4413      	add	r3, r2
 800eb40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	0151      	lsls	r1, r2, #5
 800eb4a:	68fa      	ldr	r2, [r7, #12]
 800eb4c:	440a      	add	r2, r1
 800eb4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800eb56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800eb58:	683b      	ldr	r3, [r7, #0]
 800eb5a:	78db      	ldrb	r3, [r3, #3]
 800eb5c:	2b03      	cmp	r3, #3
 800eb5e:	d003      	beq.n	800eb68 <USB_EPClearStall+0x9e>
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	78db      	ldrb	r3, [r3, #3]
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d10f      	bne.n	800eb88 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800eb68:	68bb      	ldr	r3, [r7, #8]
 800eb6a:	015a      	lsls	r2, r3, #5
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	4413      	add	r3, r2
 800eb70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	0151      	lsls	r1, r2, #5
 800eb7a:	68fa      	ldr	r2, [r7, #12]
 800eb7c:	440a      	add	r2, r1
 800eb7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800eb86:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	3714      	adds	r7, #20
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr

0800eb96 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800eb96:	b480      	push	{r7}
 800eb98:	b085      	sub	sp, #20
 800eb9a:	af00      	add	r7, sp, #0
 800eb9c:	6078      	str	r0, [r7, #4]
 800eb9e:	460b      	mov	r3, r1
 800eba0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	68fa      	ldr	r2, [r7, #12]
 800ebb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ebb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ebb8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebc0:	681a      	ldr	r2, [r3, #0]
 800ebc2:	78fb      	ldrb	r3, [r7, #3]
 800ebc4:	011b      	lsls	r3, r3, #4
 800ebc6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ebca:	68f9      	ldr	r1, [r7, #12]
 800ebcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebd0:	4313      	orrs	r3, r2
 800ebd2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ebd4:	2300      	movs	r3, #0
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ebe2:	b480      	push	{r7}
 800ebe4:	b085      	sub	sp, #20
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68fa      	ldr	r2, [r7, #12]
 800ebf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ebfc:	f023 0303 	bic.w	r3, r3, #3
 800ec00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec08:	685b      	ldr	r3, [r3, #4]
 800ec0a:	68fa      	ldr	r2, [r7, #12]
 800ec0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec10:	f023 0302 	bic.w	r3, r3, #2
 800ec14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec16:	2300      	movs	r3, #0
}
 800ec18:	4618      	mov	r0, r3
 800ec1a:	3714      	adds	r7, #20
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	68fa      	ldr	r2, [r7, #12]
 800ec3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec3e:	f023 0303 	bic.w	r3, r3, #3
 800ec42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	68fa      	ldr	r2, [r7, #12]
 800ec4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec52:	f043 0302 	orr.w	r3, r3, #2
 800ec56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b085      	sub	sp, #20
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	695b      	ldr	r3, [r3, #20]
 800ec72:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	699b      	ldr	r3, [r3, #24]
 800ec78:	68fa      	ldr	r2, [r7, #12]
 800ec7a:	4013      	ands	r3, r2
 800ec7c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ec7e:	68fb      	ldr	r3, [r7, #12]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3714      	adds	r7, #20
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec9e:	699b      	ldr	r3, [r3, #24]
 800eca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eca8:	69db      	ldr	r3, [r3, #28]
 800ecaa:	68ba      	ldr	r2, [r7, #8]
 800ecac:	4013      	ands	r3, r2
 800ecae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	0c1b      	lsrs	r3, r3, #16
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3714      	adds	r7, #20
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecd2:	699b      	ldr	r3, [r3, #24]
 800ecd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	68ba      	ldr	r2, [r7, #8]
 800ece0:	4013      	ands	r3, r2
 800ece2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	b29b      	uxth	r3, r3
}
 800ece8:	4618      	mov	r0, r3
 800ecea:	3714      	adds	r7, #20
 800ecec:	46bd      	mov	sp, r7
 800ecee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf2:	4770      	bx	lr

0800ecf4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b085      	sub	sp, #20
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ed04:	78fb      	ldrb	r3, [r7, #3]
 800ed06:	015a      	lsls	r2, r3, #5
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed10:	689b      	ldr	r3, [r3, #8]
 800ed12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed1a:	695b      	ldr	r3, [r3, #20]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	4013      	ands	r3, r2
 800ed20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed22:	68bb      	ldr	r3, [r7, #8]
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3714      	adds	r7, #20
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b087      	sub	sp, #28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	460b      	mov	r3, r1
 800ed3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ed50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed52:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ed54:	78fb      	ldrb	r3, [r7, #3]
 800ed56:	f003 030f 	and.w	r3, r3, #15
 800ed5a:	68fa      	ldr	r2, [r7, #12]
 800ed5c:	fa22 f303 	lsr.w	r3, r2, r3
 800ed60:	01db      	lsls	r3, r3, #7
 800ed62:	b2db      	uxtb	r3, r3
 800ed64:	693a      	ldr	r2, [r7, #16]
 800ed66:	4313      	orrs	r3, r2
 800ed68:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ed6a:	78fb      	ldrb	r3, [r7, #3]
 800ed6c:	015a      	lsls	r2, r3, #5
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	4413      	add	r3, r2
 800ed72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed76:	689b      	ldr	r3, [r3, #8]
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	4013      	ands	r3, r2
 800ed7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ed7e:	68bb      	ldr	r3, [r7, #8]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	371c      	adds	r7, #28
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	695b      	ldr	r3, [r3, #20]
 800ed98:	f003 0301 	and.w	r3, r3, #1
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	370c      	adds	r7, #12
 800eda0:	46bd      	mov	sp, r7
 800eda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda6:	4770      	bx	lr

0800eda8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800eda8:	b480      	push	{r7}
 800edaa:	b085      	sub	sp, #20
 800edac:	af00      	add	r7, sp, #0
 800edae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	68fa      	ldr	r2, [r7, #12]
 800edbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800edc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800edc6:	f023 0307 	bic.w	r3, r3, #7
 800edca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	68fa      	ldr	r2, [r7, #12]
 800edd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800edda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	460b      	mov	r3, r1
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	333c      	adds	r3, #60	; 0x3c
 800ee06:	3304      	adds	r3, #4
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	4a26      	ldr	r2, [pc, #152]	; (800eea8 <USB_EP0_OutStart+0xb8>)
 800ee10:	4293      	cmp	r3, r2
 800ee12:	d90a      	bls.n	800ee2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ee14:	697b      	ldr	r3, [r7, #20]
 800ee16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ee20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ee24:	d101      	bne.n	800ee2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ee26:	2300      	movs	r3, #0
 800ee28:	e037      	b.n	800ee9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee30:	461a      	mov	r2, r3
 800ee32:	2300      	movs	r3, #0
 800ee34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee3c:	691b      	ldr	r3, [r3, #16]
 800ee3e:	697a      	ldr	r2, [r7, #20]
 800ee40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ee48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee50:	691b      	ldr	r3, [r3, #16]
 800ee52:	697a      	ldr	r2, [r7, #20]
 800ee54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee58:	f043 0318 	orr.w	r3, r3, #24
 800ee5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee64:	691b      	ldr	r3, [r3, #16]
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ee70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ee72:	7afb      	ldrb	r3, [r7, #11]
 800ee74:	2b01      	cmp	r3, #1
 800ee76:	d10f      	bne.n	800ee98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ee78:	697b      	ldr	r3, [r7, #20]
 800ee7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee7e:	461a      	mov	r2, r3
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	697a      	ldr	r2, [r7, #20]
 800ee8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ee92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ee96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	371c      	adds	r7, #28
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea4:	4770      	bx	lr
 800eea6:	bf00      	nop
 800eea8:	4f54300a 	.word	0x4f54300a

0800eeac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b085      	sub	sp, #20
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	3301      	adds	r3, #1
 800eebc:	60fb      	str	r3, [r7, #12]
 800eebe:	4a13      	ldr	r2, [pc, #76]	; (800ef0c <USB_CoreReset+0x60>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d901      	bls.n	800eec8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800eec4:	2303      	movs	r3, #3
 800eec6:	e01a      	b.n	800eefe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	691b      	ldr	r3, [r3, #16]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	daf3      	bge.n	800eeb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800eed0:	2300      	movs	r3, #0
 800eed2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	691b      	ldr	r3, [r3, #16]
 800eed8:	f043 0201 	orr.w	r2, r3, #1
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	3301      	adds	r3, #1
 800eee4:	60fb      	str	r3, [r7, #12]
 800eee6:	4a09      	ldr	r2, [pc, #36]	; (800ef0c <USB_CoreReset+0x60>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d901      	bls.n	800eef0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800eeec:	2303      	movs	r3, #3
 800eeee:	e006      	b.n	800eefe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	691b      	ldr	r3, [r3, #16]
 800eef4:	f003 0301 	and.w	r3, r3, #1
 800eef8:	2b01      	cmp	r3, #1
 800eefa:	d0f1      	beq.n	800eee0 <USB_CoreReset+0x34>

  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3714      	adds	r7, #20
 800ef02:	46bd      	mov	sp, r7
 800ef04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef08:	4770      	bx	lr
 800ef0a:	bf00      	nop
 800ef0c:	00030d40 	.word	0x00030d40

0800ef10 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ef14:	4904      	ldr	r1, [pc, #16]	; (800ef28 <MX_FATFS_Init+0x18>)
 800ef16:	4805      	ldr	r0, [pc, #20]	; (800ef2c <MX_FATFS_Init+0x1c>)
 800ef18:	f004 ff38 	bl	8013d8c <FATFS_LinkDriver>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	461a      	mov	r2, r3
 800ef20:	4b03      	ldr	r3, [pc, #12]	; (800ef30 <MX_FATFS_Init+0x20>)
 800ef22:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ef24:	bf00      	nop
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20011a6c 	.word	0x20011a6c
 800ef2c:	200000d0 	.word	0x200000d0
 800ef30:	20011a70 	.word	0x20011a70

0800ef34 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ef34:	b480      	push	{r7}
 800ef36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ef38:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800ef4e:	79fb      	ldrb	r3, [r7, #7]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7f3 fa47 	bl	80023e4 <SD_disk_initialize>
 800ef56:	4603      	mov	r3, r0
 800ef58:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	4603      	mov	r3, r0
 800ef6a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800ef6c:	79fb      	ldrb	r3, [r7, #7]
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f3 fb22 	bl	80025b8 <SD_disk_status>
 800ef74:	4603      	mov	r3, r0
 800ef76:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3708      	adds	r7, #8
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b084      	sub	sp, #16
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	60b9      	str	r1, [r7, #8]
 800ef88:	607a      	str	r2, [r7, #4]
 800ef8a:	603b      	str	r3, [r7, #0]
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800ef90:	7bf8      	ldrb	r0, [r7, #15]
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	f7f3 fb24 	bl	80025e4 <SD_disk_read>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3710      	adds	r7, #16
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	60b9      	str	r1, [r7, #8]
 800efb0:	607a      	str	r2, [r7, #4]
 800efb2:	603b      	str	r3, [r7, #0]
 800efb4:	4603      	mov	r3, r0
 800efb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800efb8:	7bf8      	ldrb	r0, [r7, #15]
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	687a      	ldr	r2, [r7, #4]
 800efbe:	68b9      	ldr	r1, [r7, #8]
 800efc0:	f7f3 fb7a 	bl	80026b8 <SD_disk_write>
 800efc4:	4603      	mov	r3, r0
 800efc6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	4603      	mov	r3, r0
 800efd8:	603a      	str	r2, [r7, #0]
 800efda:	71fb      	strb	r3, [r7, #7]
 800efdc:	460b      	mov	r3, r1
 800efde:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800efe0:	79fb      	ldrb	r3, [r7, #7]
 800efe2:	79b9      	ldrb	r1, [r7, #6]
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f3 fbea 	bl	80027c0 <SD_disk_ioctl>
 800efec:	4603      	mov	r3, r0
 800efee:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}

0800eff8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b084      	sub	sp, #16
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	460b      	mov	r3, r1
 800f002:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f004:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800f008:	f009 fc50 	bl	80188ac <USBD_static_malloc>
 800f00c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d105      	bne.n	800f020 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2200      	movs	r2, #0
 800f018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800f01c:	2302      	movs	r3, #2
 800f01e:	e066      	b.n	800f0ee <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	7c1b      	ldrb	r3, [r3, #16]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d119      	bne.n	800f064 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f030:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f034:	2202      	movs	r2, #2
 800f036:	2181      	movs	r1, #129	; 0x81
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f009 fb14 	bl	8018666 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2201      	movs	r2, #1
 800f042:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f044:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f048:	2202      	movs	r2, #2
 800f04a:	2101      	movs	r1, #1
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f009 fb0a 	bl	8018666 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	2201      	movs	r2, #1
 800f056:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2210      	movs	r2, #16
 800f05e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800f062:	e016      	b.n	800f092 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800f064:	2340      	movs	r3, #64	; 0x40
 800f066:	2202      	movs	r2, #2
 800f068:	2181      	movs	r1, #129	; 0x81
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f009 fafb 	bl	8018666 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2201      	movs	r2, #1
 800f074:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800f076:	2340      	movs	r3, #64	; 0x40
 800f078:	2202      	movs	r2, #2
 800f07a:	2101      	movs	r1, #1
 800f07c:	6878      	ldr	r0, [r7, #4]
 800f07e:	f009 faf2 	bl	8018666 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2201      	movs	r2, #1
 800f086:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2210      	movs	r2, #16
 800f08e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f092:	2308      	movs	r3, #8
 800f094:	2203      	movs	r2, #3
 800f096:	2182      	movs	r1, #130	; 0x82
 800f098:	6878      	ldr	r0, [r7, #4]
 800f09a:	f009 fae4 	bl	8018666 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	2201      	movs	r2, #1
 800f0a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	7c1b      	ldrb	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d109      	bne.n	800f0dc <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f0d2:	2101      	movs	r1, #1
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f009 fbb5 	bl	8018844 <USBD_LL_PrepareReceive>
 800f0da:	e007      	b.n	800f0ec <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f0e2:	2340      	movs	r3, #64	; 0x40
 800f0e4:	2101      	movs	r1, #1
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f009 fbac 	bl	8018844 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f0ec:	2300      	movs	r3, #0
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3710      	adds	r7, #16
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b082      	sub	sp, #8
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	460b      	mov	r3, r1
 800f100:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800f102:	2181      	movs	r1, #129	; 0x81
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f009 fad4 	bl	80186b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800f110:	2101      	movs	r1, #1
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f009 facd 	bl	80186b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2200      	movs	r2, #0
 800f11c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800f120:	2182      	movs	r1, #130	; 0x82
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f009 fac5 	bl	80186b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	2200      	movs	r2, #0
 800f12c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2200      	movs	r2, #0
 800f134:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d00e      	beq.n	800f160 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f148:	685b      	ldr	r3, [r3, #4]
 800f14a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f152:	4618      	mov	r0, r3
 800f154:	f009 fbb8 	bl	80188c8 <USBD_static_free>
    pdev->pClassData = NULL;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	2200      	movs	r2, #0
 800f15c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f160:	2300      	movs	r3, #0
}
 800f162:	4618      	mov	r0, r3
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
	...

0800f16c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f17c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f17e:	2300      	movs	r3, #0
 800f180:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f182:	2300      	movs	r3, #0
 800f184:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f186:	2300      	movs	r3, #0
 800f188:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f18a:	693b      	ldr	r3, [r7, #16]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d101      	bne.n	800f194 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800f190:	2303      	movs	r3, #3
 800f192:	e0af      	b.n	800f2f4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d03f      	beq.n	800f220 <USBD_CDC_Setup+0xb4>
 800f1a0:	2b20      	cmp	r3, #32
 800f1a2:	f040 809f 	bne.w	800f2e4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	88db      	ldrh	r3, [r3, #6]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d02e      	beq.n	800f20c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	b25b      	sxtb	r3, r3
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	da16      	bge.n	800f1e6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f1be:	689b      	ldr	r3, [r3, #8]
 800f1c0:	683a      	ldr	r2, [r7, #0]
 800f1c2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800f1c4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f1c6:	683a      	ldr	r2, [r7, #0]
 800f1c8:	88d2      	ldrh	r2, [r2, #6]
 800f1ca:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	88db      	ldrh	r3, [r3, #6]
 800f1d0:	2b07      	cmp	r3, #7
 800f1d2:	bf28      	it	cs
 800f1d4:	2307      	movcs	r3, #7
 800f1d6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	89fa      	ldrh	r2, [r7, #14]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f001 fb19 	bl	8010816 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800f1e4:	e085      	b.n	800f2f2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	785a      	ldrb	r2, [r3, #1]
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	88db      	ldrh	r3, [r3, #6]
 800f1f4:	b2da      	uxtb	r2, r3
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800f1fc:	6939      	ldr	r1, [r7, #16]
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	88db      	ldrh	r3, [r3, #6]
 800f202:	461a      	mov	r2, r3
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f001 fb32 	bl	801086e <USBD_CtlPrepareRx>
      break;
 800f20a:	e072      	b.n	800f2f2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f212:	689b      	ldr	r3, [r3, #8]
 800f214:	683a      	ldr	r2, [r7, #0]
 800f216:	7850      	ldrb	r0, [r2, #1]
 800f218:	2200      	movs	r2, #0
 800f21a:	6839      	ldr	r1, [r7, #0]
 800f21c:	4798      	blx	r3
      break;
 800f21e:	e068      	b.n	800f2f2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	785b      	ldrb	r3, [r3, #1]
 800f224:	2b0b      	cmp	r3, #11
 800f226:	d852      	bhi.n	800f2ce <USBD_CDC_Setup+0x162>
 800f228:	a201      	add	r2, pc, #4	; (adr r2, 800f230 <USBD_CDC_Setup+0xc4>)
 800f22a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f22e:	bf00      	nop
 800f230:	0800f261 	.word	0x0800f261
 800f234:	0800f2dd 	.word	0x0800f2dd
 800f238:	0800f2cf 	.word	0x0800f2cf
 800f23c:	0800f2cf 	.word	0x0800f2cf
 800f240:	0800f2cf 	.word	0x0800f2cf
 800f244:	0800f2cf 	.word	0x0800f2cf
 800f248:	0800f2cf 	.word	0x0800f2cf
 800f24c:	0800f2cf 	.word	0x0800f2cf
 800f250:	0800f2cf 	.word	0x0800f2cf
 800f254:	0800f2cf 	.word	0x0800f2cf
 800f258:	0800f28b 	.word	0x0800f28b
 800f25c:	0800f2b5 	.word	0x0800f2b5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f266:	b2db      	uxtb	r3, r3
 800f268:	2b03      	cmp	r3, #3
 800f26a:	d107      	bne.n	800f27c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f26c:	f107 030a 	add.w	r3, r7, #10
 800f270:	2202      	movs	r2, #2
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f001 face 	bl	8010816 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f27a:	e032      	b.n	800f2e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f27c:	6839      	ldr	r1, [r7, #0]
 800f27e:	6878      	ldr	r0, [r7, #4]
 800f280:	f001 fa58 	bl	8010734 <USBD_CtlError>
            ret = USBD_FAIL;
 800f284:	2303      	movs	r3, #3
 800f286:	75fb      	strb	r3, [r7, #23]
          break;
 800f288:	e02b      	b.n	800f2e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f290:	b2db      	uxtb	r3, r3
 800f292:	2b03      	cmp	r3, #3
 800f294:	d107      	bne.n	800f2a6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f296:	f107 030d 	add.w	r3, r7, #13
 800f29a:	2201      	movs	r2, #1
 800f29c:	4619      	mov	r1, r3
 800f29e:	6878      	ldr	r0, [r7, #4]
 800f2a0:	f001 fab9 	bl	8010816 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f2a4:	e01d      	b.n	800f2e2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f001 fa43 	bl	8010734 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2ae:	2303      	movs	r3, #3
 800f2b0:	75fb      	strb	r3, [r7, #23]
          break;
 800f2b2:	e016      	b.n	800f2e2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2ba:	b2db      	uxtb	r3, r3
 800f2bc:	2b03      	cmp	r3, #3
 800f2be:	d00f      	beq.n	800f2e0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800f2c0:	6839      	ldr	r1, [r7, #0]
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f001 fa36 	bl	8010734 <USBD_CtlError>
            ret = USBD_FAIL;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f2cc:	e008      	b.n	800f2e0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f2ce:	6839      	ldr	r1, [r7, #0]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f001 fa2f 	bl	8010734 <USBD_CtlError>
          ret = USBD_FAIL;
 800f2d6:	2303      	movs	r3, #3
 800f2d8:	75fb      	strb	r3, [r7, #23]
          break;
 800f2da:	e002      	b.n	800f2e2 <USBD_CDC_Setup+0x176>
          break;
 800f2dc:	bf00      	nop
 800f2de:	e008      	b.n	800f2f2 <USBD_CDC_Setup+0x186>
          break;
 800f2e0:	bf00      	nop
      }
      break;
 800f2e2:	e006      	b.n	800f2f2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800f2e4:	6839      	ldr	r1, [r7, #0]
 800f2e6:	6878      	ldr	r0, [r7, #4]
 800f2e8:	f001 fa24 	bl	8010734 <USBD_CtlError>
      ret = USBD_FAIL;
 800f2ec:	2303      	movs	r3, #3
 800f2ee:	75fb      	strb	r3, [r7, #23]
      break;
 800f2f0:	bf00      	nop
  }

  return (uint8_t)ret;
 800f2f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	3718      	adds	r7, #24
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	bd80      	pop	{r7, pc}

0800f2fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b084      	sub	sp, #16
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
 800f304:	460b      	mov	r3, r1
 800f306:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f30e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f316:	2b00      	cmp	r3, #0
 800f318:	d101      	bne.n	800f31e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f31a:	2303      	movs	r3, #3
 800f31c:	e04f      	b.n	800f3be <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f324:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f326:	78fa      	ldrb	r2, [r7, #3]
 800f328:	6879      	ldr	r1, [r7, #4]
 800f32a:	4613      	mov	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4413      	add	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	440b      	add	r3, r1
 800f334:	3318      	adds	r3, #24
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d029      	beq.n	800f390 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800f33c:	78fa      	ldrb	r2, [r7, #3]
 800f33e:	6879      	ldr	r1, [r7, #4]
 800f340:	4613      	mov	r3, r2
 800f342:	009b      	lsls	r3, r3, #2
 800f344:	4413      	add	r3, r2
 800f346:	009b      	lsls	r3, r3, #2
 800f348:	440b      	add	r3, r1
 800f34a:	3318      	adds	r3, #24
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	78f9      	ldrb	r1, [r7, #3]
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	460b      	mov	r3, r1
 800f354:	00db      	lsls	r3, r3, #3
 800f356:	1a5b      	subs	r3, r3, r1
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4403      	add	r3, r0
 800f35c:	3344      	adds	r3, #68	; 0x44
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	fbb2 f1f3 	udiv	r1, r2, r3
 800f364:	fb03 f301 	mul.w	r3, r3, r1
 800f368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d110      	bne.n	800f390 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800f36e:	78fa      	ldrb	r2, [r7, #3]
 800f370:	6879      	ldr	r1, [r7, #4]
 800f372:	4613      	mov	r3, r2
 800f374:	009b      	lsls	r3, r3, #2
 800f376:	4413      	add	r3, r2
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	440b      	add	r3, r1
 800f37c:	3318      	adds	r3, #24
 800f37e:	2200      	movs	r2, #0
 800f380:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f382:	78f9      	ldrb	r1, [r7, #3]
 800f384:	2300      	movs	r3, #0
 800f386:	2200      	movs	r2, #0
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f009 fa3a 	bl	8018802 <USBD_LL_Transmit>
 800f38e:	e015      	b.n	800f3bc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2200      	movs	r2, #0
 800f394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d00b      	beq.n	800f3bc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f3aa:	691b      	ldr	r3, [r3, #16]
 800f3ac:	68ba      	ldr	r2, [r7, #8]
 800f3ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800f3b2:	68ba      	ldr	r2, [r7, #8]
 800f3b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800f3b8:	78fa      	ldrb	r2, [r7, #3]
 800f3ba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b084      	sub	sp, #16
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	460b      	mov	r3, r1
 800f3d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d101      	bne.n	800f3e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f3e4:	2303      	movs	r3, #3
 800f3e6:	e015      	b.n	800f414 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f3e8:	78fb      	ldrb	r3, [r7, #3]
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f009 fa4a 	bl	8018886 <USBD_LL_GetRxDataSize>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800f408:	68fa      	ldr	r2, [r7, #12]
 800f40a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800f40e:	4611      	mov	r1, r2
 800f410:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f412:	2300      	movs	r3, #0
}
 800f414:	4618      	mov	r0, r3
 800f416:	3710      	adds	r7, #16
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b084      	sub	sp, #16
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f42a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d101      	bne.n	800f436 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800f432:	2303      	movs	r3, #3
 800f434:	e01b      	b.n	800f46e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d015      	beq.n	800f46c <USBD_CDC_EP0_RxReady+0x50>
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800f446:	2bff      	cmp	r3, #255	; 0xff
 800f448:	d010      	beq.n	800f46c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f450:	689b      	ldr	r3, [r3, #8]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800f458:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800f45a:	68fa      	ldr	r2, [r7, #12]
 800f45c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800f460:	b292      	uxth	r2, r2
 800f462:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	22ff      	movs	r2, #255	; 0xff
 800f468:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800f46c:	2300      	movs	r3, #0
}
 800f46e:	4618      	mov	r0, r3
 800f470:	3710      	adds	r7, #16
 800f472:	46bd      	mov	sp, r7
 800f474:	bd80      	pop	{r7, pc}
	...

0800f478 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f478:	b480      	push	{r7}
 800f47a:	b083      	sub	sp, #12
 800f47c:	af00      	add	r7, sp, #0
 800f47e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2243      	movs	r2, #67	; 0x43
 800f484:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800f486:	4b03      	ldr	r3, [pc, #12]	; (800f494 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800f488:	4618      	mov	r0, r3
 800f48a:	370c      	adds	r7, #12
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr
 800f494:	2000016c 	.word	0x2000016c

0800f498 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2243      	movs	r2, #67	; 0x43
 800f4a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800f4a6:	4b03      	ldr	r3, [pc, #12]	; (800f4b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr
 800f4b4:	20000128 	.word	0x20000128

0800f4b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2243      	movs	r2, #67	; 0x43
 800f4c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800f4c6:	4b03      	ldr	r3, [pc, #12]	; (800f4d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	200001b0 	.word	0x200001b0

0800f4d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800f4d8:	b480      	push	{r7}
 800f4da:	b083      	sub	sp, #12
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	220a      	movs	r2, #10
 800f4e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800f4e6:	4b03      	ldr	r3, [pc, #12]	; (800f4f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	370c      	adds	r7, #12
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr
 800f4f4:	200000e4 	.word	0x200000e4

0800f4f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800f508:	2303      	movs	r3, #3
 800f50a:	e004      	b.n	800f516 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800f514:	2300      	movs	r3, #0
}
 800f516:	4618      	mov	r0, r3
 800f518:	370c      	adds	r7, #12
 800f51a:	46bd      	mov	sp, r7
 800f51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f520:	4770      	bx	lr

0800f522 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800f522:	b480      	push	{r7}
 800f524:	b087      	sub	sp, #28
 800f526:	af00      	add	r7, sp, #0
 800f528:	60f8      	str	r0, [r7, #12]
 800f52a:	60b9      	str	r1, [r7, #8]
 800f52c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f534:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d101      	bne.n	800f540 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f53c:	2303      	movs	r3, #3
 800f53e:	e008      	b.n	800f552 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800f540:	697b      	ldr	r3, [r7, #20]
 800f542:	68ba      	ldr	r2, [r7, #8]
 800f544:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800f550:	2300      	movs	r3, #0
}
 800f552:	4618      	mov	r0, r3
 800f554:	371c      	adds	r7, #28
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800f55e:	b480      	push	{r7}
 800f560:	b085      	sub	sp, #20
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f56e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d101      	bne.n	800f57a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800f576:	2303      	movs	r3, #3
 800f578:	e004      	b.n	800f584 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	683a      	ldr	r2, [r7, #0]
 800f57e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800f582:	2300      	movs	r3, #0
}
 800f584:	4618      	mov	r0, r3
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f59e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d101      	bne.n	800f5b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f5ae:	2303      	movs	r3, #3
 800f5b0:	e01a      	b.n	800f5e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d114      	bne.n	800f5e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	2201      	movs	r2, #1
 800f5c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800f5ce:	68bb      	ldr	r3, [r7, #8]
 800f5d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800f5da:	2181      	movs	r1, #129	; 0x81
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f009 f910 	bl	8018802 <USBD_LL_Transmit>

    ret = USBD_OK;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800f5e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	3710      	adds	r7, #16
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b084      	sub	sp, #16
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f5fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f606:	2b00      	cmp	r3, #0
 800f608:	d101      	bne.n	800f60e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800f60a:	2303      	movs	r3, #3
 800f60c:	e016      	b.n	800f63c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	7c1b      	ldrb	r3, [r3, #16]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d109      	bne.n	800f62a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f61c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f620:	2101      	movs	r1, #1
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f009 f90e 	bl	8018844 <USBD_LL_PrepareReceive>
 800f628:	e007      	b.n	800f63a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800f630:	2340      	movs	r3, #64	; 0x40
 800f632:	2101      	movs	r1, #1
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f009 f905 	bl	8018844 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f63a:	2300      	movs	r3, #0
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	3710      	adds	r7, #16
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}

0800f644 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f644:	b580      	push	{r7, lr}
 800f646:	b086      	sub	sp, #24
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	60b9      	str	r1, [r7, #8]
 800f64e:	4613      	mov	r3, r2
 800f650:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d101      	bne.n	800f65c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f658:	2303      	movs	r3, #3
 800f65a:	e01f      	b.n	800f69c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2200      	movs	r2, #0
 800f668:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2200      	movs	r2, #0
 800f670:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f674:	68bb      	ldr	r3, [r7, #8]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d003      	beq.n	800f682 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	68ba      	ldr	r2, [r7, #8]
 800f67e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2201      	movs	r2, #1
 800f686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	79fa      	ldrb	r2, [r7, #7]
 800f68e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f008 ff81 	bl	8018598 <USBD_LL_Init>
 800f696:	4603      	mov	r3, r0
 800f698:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f69a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f69c:	4618      	mov	r0, r3
 800f69e:	3718      	adds	r7, #24
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}

0800f6a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b084      	sub	sp, #16
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
 800f6ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f6ae:	2300      	movs	r3, #0
 800f6b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d101      	bne.n	800f6bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f6b8:	2303      	movs	r3, #3
 800f6ba:	e016      	b.n	800f6ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	683a      	ldr	r2, [r7, #0]
 800f6c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d00b      	beq.n	800f6e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6d8:	f107 020e 	add.w	r2, r7, #14
 800f6dc:	4610      	mov	r0, r2
 800f6de:	4798      	blx	r3
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800f6e8:	2300      	movs	r3, #0
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	3710      	adds	r7, #16
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	bd80      	pop	{r7, pc}

0800f6f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f6f2:	b580      	push	{r7, lr}
 800f6f4:	b082      	sub	sp, #8
 800f6f6:	af00      	add	r7, sp, #0
 800f6f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f6fa:	6878      	ldr	r0, [r7, #4]
 800f6fc:	f008 ff98 	bl	8018630 <USBD_LL_Start>
 800f700:	4603      	mov	r3, r0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f70a:	b480      	push	{r7}
 800f70c:	b083      	sub	sp, #12
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f712:	2300      	movs	r3, #0
}
 800f714:	4618      	mov	r0, r3
 800f716:	370c      	adds	r7, #12
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f72c:	2303      	movs	r3, #3
 800f72e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f736:	2b00      	cmp	r3, #0
 800f738:	d009      	beq.n	800f74e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	78fa      	ldrb	r2, [r7, #3]
 800f744:	4611      	mov	r1, r2
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	4798      	blx	r3
 800f74a:	4603      	mov	r3, r0
 800f74c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f750:	4618      	mov	r0, r3
 800f752:	3710      	adds	r7, #16
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}

0800f758 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
 800f760:	460b      	mov	r3, r1
 800f762:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d007      	beq.n	800f77e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	78fa      	ldrb	r2, [r7, #3]
 800f778:	4611      	mov	r1, r2
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	4798      	blx	r3
  }

  return USBD_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3708      	adds	r7, #8
 800f784:	46bd      	mov	sp, r7
 800f786:	bd80      	pop	{r7, pc}

0800f788 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f788:	b580      	push	{r7, lr}
 800f78a:	b084      	sub	sp, #16
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
 800f790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f798:	6839      	ldr	r1, [r7, #0]
 800f79a:	4618      	mov	r0, r3
 800f79c:	f000 ff90 	bl	80106c0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	2201      	movs	r2, #1
 800f7a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f7bc:	f003 031f 	and.w	r3, r3, #31
 800f7c0:	2b02      	cmp	r3, #2
 800f7c2:	d01a      	beq.n	800f7fa <USBD_LL_SetupStage+0x72>
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d822      	bhi.n	800f80e <USBD_LL_SetupStage+0x86>
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d002      	beq.n	800f7d2 <USBD_LL_SetupStage+0x4a>
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d00a      	beq.n	800f7e6 <USBD_LL_SetupStage+0x5e>
 800f7d0:	e01d      	b.n	800f80e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7d8:	4619      	mov	r1, r3
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 fa62 	bl	800fca4 <USBD_StdDevReq>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800f7e4:	e020      	b.n	800f828 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 fac6 	bl	800fd80 <USBD_StdItfReq>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	73fb      	strb	r3, [r7, #15]
      break;
 800f7f8:	e016      	b.n	800f828 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f800:	4619      	mov	r1, r3
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fb05 	bl	800fe12 <USBD_StdEPReq>
 800f808:	4603      	mov	r3, r0
 800f80a:	73fb      	strb	r3, [r7, #15]
      break;
 800f80c:	e00c      	b.n	800f828 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f814:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	4619      	mov	r1, r3
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f008 ff67 	bl	80186f0 <USBD_LL_StallEP>
 800f822:	4603      	mov	r3, r0
 800f824:	73fb      	strb	r3, [r7, #15]
      break;
 800f826:	bf00      	nop
  }

  return ret;
 800f828:	7bfb      	ldrb	r3, [r7, #15]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3710      	adds	r7, #16
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f832:	b580      	push	{r7, lr}
 800f834:	b086      	sub	sp, #24
 800f836:	af00      	add	r7, sp, #0
 800f838:	60f8      	str	r0, [r7, #12]
 800f83a:	460b      	mov	r3, r1
 800f83c:	607a      	str	r2, [r7, #4]
 800f83e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f840:	7afb      	ldrb	r3, [r7, #11]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d138      	bne.n	800f8b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f84c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f854:	2b03      	cmp	r3, #3
 800f856:	d14a      	bne.n	800f8ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f858:	693b      	ldr	r3, [r7, #16]
 800f85a:	689a      	ldr	r2, [r3, #8]
 800f85c:	693b      	ldr	r3, [r7, #16]
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	429a      	cmp	r2, r3
 800f862:	d913      	bls.n	800f88c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	689a      	ldr	r2, [r3, #8]
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	68db      	ldr	r3, [r3, #12]
 800f86c:	1ad2      	subs	r2, r2, r3
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f872:	693b      	ldr	r3, [r7, #16]
 800f874:	68da      	ldr	r2, [r3, #12]
 800f876:	693b      	ldr	r3, [r7, #16]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	4293      	cmp	r3, r2
 800f87c:	bf28      	it	cs
 800f87e:	4613      	movcs	r3, r2
 800f880:	461a      	mov	r2, r3
 800f882:	6879      	ldr	r1, [r7, #4]
 800f884:	68f8      	ldr	r0, [r7, #12]
 800f886:	f001 f80f 	bl	80108a8 <USBD_CtlContinueRx>
 800f88a:	e030      	b.n	800f8ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f892:	b2db      	uxtb	r3, r3
 800f894:	2b03      	cmp	r3, #3
 800f896:	d10b      	bne.n	800f8b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f89e:	691b      	ldr	r3, [r3, #16]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d005      	beq.n	800f8b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8aa:	691b      	ldr	r3, [r3, #16]
 800f8ac:	68f8      	ldr	r0, [r7, #12]
 800f8ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f8b0:	68f8      	ldr	r0, [r7, #12]
 800f8b2:	f001 f80a 	bl	80108ca <USBD_CtlSendStatus>
 800f8b6:	e01a      	b.n	800f8ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8be:	b2db      	uxtb	r3, r3
 800f8c0:	2b03      	cmp	r3, #3
 800f8c2:	d114      	bne.n	800f8ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8ca:	699b      	ldr	r3, [r3, #24]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00e      	beq.n	800f8ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8d6:	699b      	ldr	r3, [r3, #24]
 800f8d8:	7afa      	ldrb	r2, [r7, #11]
 800f8da:	4611      	mov	r1, r2
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	4798      	blx	r3
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800f8ea:	7dfb      	ldrb	r3, [r7, #23]
 800f8ec:	e000      	b.n	800f8f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3718      	adds	r7, #24
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	460b      	mov	r3, r1
 800f902:	607a      	str	r2, [r7, #4]
 800f904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f906:	7afb      	ldrb	r3, [r7, #11]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d16b      	bne.n	800f9e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	3314      	adds	r3, #20
 800f910:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f918:	2b02      	cmp	r3, #2
 800f91a:	d156      	bne.n	800f9ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800f91c:	693b      	ldr	r3, [r7, #16]
 800f91e:	689a      	ldr	r2, [r3, #8]
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	429a      	cmp	r2, r3
 800f926:	d914      	bls.n	800f952 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f928:	693b      	ldr	r3, [r7, #16]
 800f92a:	689a      	ldr	r2, [r3, #8]
 800f92c:	693b      	ldr	r3, [r7, #16]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	1ad2      	subs	r2, r2, r3
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	689b      	ldr	r3, [r3, #8]
 800f93a:	461a      	mov	r2, r3
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	68f8      	ldr	r0, [r7, #12]
 800f940:	f000 ff84 	bl	801084c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f944:	2300      	movs	r3, #0
 800f946:	2200      	movs	r2, #0
 800f948:	2100      	movs	r1, #0
 800f94a:	68f8      	ldr	r0, [r7, #12]
 800f94c:	f008 ff7a 	bl	8018844 <USBD_LL_PrepareReceive>
 800f950:	e03b      	b.n	800f9ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f952:	693b      	ldr	r3, [r7, #16]
 800f954:	68da      	ldr	r2, [r3, #12]
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	689b      	ldr	r3, [r3, #8]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d11c      	bne.n	800f998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	685a      	ldr	r2, [r3, #4]
 800f962:	693b      	ldr	r3, [r7, #16]
 800f964:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f966:	429a      	cmp	r2, r3
 800f968:	d316      	bcc.n	800f998 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f96a:	693b      	ldr	r3, [r7, #16]
 800f96c:	685a      	ldr	r2, [r3, #4]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f974:	429a      	cmp	r2, r3
 800f976:	d20f      	bcs.n	800f998 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f978:	2200      	movs	r2, #0
 800f97a:	2100      	movs	r1, #0
 800f97c:	68f8      	ldr	r0, [r7, #12]
 800f97e:	f000 ff65 	bl	801084c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	2200      	movs	r2, #0
 800f986:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f98a:	2300      	movs	r3, #0
 800f98c:	2200      	movs	r2, #0
 800f98e:	2100      	movs	r1, #0
 800f990:	68f8      	ldr	r0, [r7, #12]
 800f992:	f008 ff57 	bl	8018844 <USBD_LL_PrepareReceive>
 800f996:	e018      	b.n	800f9ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f99e:	b2db      	uxtb	r3, r3
 800f9a0:	2b03      	cmp	r3, #3
 800f9a2:	d10b      	bne.n	800f9bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d005      	beq.n	800f9bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	68f8      	ldr	r0, [r7, #12]
 800f9ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f9bc:	2180      	movs	r1, #128	; 0x80
 800f9be:	68f8      	ldr	r0, [r7, #12]
 800f9c0:	f008 fe96 	bl	80186f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f000 ff93 	bl	80108f0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d122      	bne.n	800fa1a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f9d4:	68f8      	ldr	r0, [r7, #12]
 800f9d6:	f7ff fe98 	bl	800f70a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f9e2:	e01a      	b.n	800fa1a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	2b03      	cmp	r3, #3
 800f9ee:	d114      	bne.n	800fa1a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9f6:	695b      	ldr	r3, [r3, #20]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d00e      	beq.n	800fa1a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa02:	695b      	ldr	r3, [r3, #20]
 800fa04:	7afa      	ldrb	r2, [r7, #11]
 800fa06:	4611      	mov	r1, r2
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	4798      	blx	r3
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800fa10:	7dfb      	ldrb	r3, [r7, #23]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d001      	beq.n	800fa1a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800fa16:	7dfb      	ldrb	r3, [r7, #23]
 800fa18:	e000      	b.n	800fa1c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800fa1a:	2300      	movs	r3, #0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	3718      	adds	r7, #24
 800fa20:	46bd      	mov	sp, r7
 800fa22:	bd80      	pop	{r7, pc}

0800fa24 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800fa24:	b580      	push	{r7, lr}
 800fa26:	b082      	sub	sp, #8
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2200      	movs	r2, #0
 800fa38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2200      	movs	r2, #0
 800fa40:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d101      	bne.n	800fa58 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800fa54:	2303      	movs	r3, #3
 800fa56:	e02f      	b.n	800fab8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d00f      	beq.n	800fa82 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d009      	beq.n	800fa82 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa74:	685b      	ldr	r3, [r3, #4]
 800fa76:	687a      	ldr	r2, [r7, #4]
 800fa78:	6852      	ldr	r2, [r2, #4]
 800fa7a:	b2d2      	uxtb	r2, r2
 800fa7c:	4611      	mov	r1, r2
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa82:	2340      	movs	r3, #64	; 0x40
 800fa84:	2200      	movs	r2, #0
 800fa86:	2100      	movs	r1, #0
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f008 fdec 	bl	8018666 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2201      	movs	r2, #1
 800fa92:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2240      	movs	r2, #64	; 0x40
 800fa9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800fa9e:	2340      	movs	r3, #64	; 0x40
 800faa0:	2200      	movs	r2, #0
 800faa2:	2180      	movs	r1, #128	; 0x80
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f008 fdde 	bl	8018666 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	2201      	movs	r2, #1
 800faae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2240      	movs	r2, #64	; 0x40
 800fab4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800fab6:	2300      	movs	r3, #0
}
 800fab8:	4618      	mov	r0, r3
 800faba:	3708      	adds	r7, #8
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800fac0:	b480      	push	{r7}
 800fac2:	b083      	sub	sp, #12
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	460b      	mov	r3, r1
 800faca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	78fa      	ldrb	r2, [r7, #3]
 800fad0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800fad2:	2300      	movs	r3, #0
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	370c      	adds	r7, #12
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b083      	sub	sp, #12
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800faee:	b2da      	uxtb	r2, r3
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2204      	movs	r2, #4
 800fafa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800fafe:	2300      	movs	r3, #0
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	370c      	adds	r7, #12
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b083      	sub	sp, #12
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb1a:	b2db      	uxtb	r3, r3
 800fb1c:	2b04      	cmp	r3, #4
 800fb1e:	d106      	bne.n	800fb2e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800fb26:	b2da      	uxtb	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800fb2e:	2300      	movs	r3, #0
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	370c      	adds	r7, #12
 800fb34:	46bd      	mov	sp, r7
 800fb36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb3a:	4770      	bx	lr

0800fb3c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800fb4e:	2303      	movs	r3, #3
 800fb50:	e012      	b.n	800fb78 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fb58:	b2db      	uxtb	r3, r3
 800fb5a:	2b03      	cmp	r3, #3
 800fb5c:	d10b      	bne.n	800fb76 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb64:	69db      	ldr	r3, [r3, #28]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d005      	beq.n	800fb76 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb70:	69db      	ldr	r3, [r3, #28]
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3708      	adds	r7, #8
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b082      	sub	sp, #8
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	460b      	mov	r3, r1
 800fb8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d101      	bne.n	800fb9a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fb96:	2303      	movs	r3, #3
 800fb98:	e014      	b.n	800fbc4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fba0:	b2db      	uxtb	r3, r3
 800fba2:	2b03      	cmp	r3, #3
 800fba4:	d10d      	bne.n	800fbc2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbac:	6a1b      	ldr	r3, [r3, #32]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d007      	beq.n	800fbc2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbb8:	6a1b      	ldr	r3, [r3, #32]
 800fbba:	78fa      	ldrb	r2, [r7, #3]
 800fbbc:	4611      	mov	r1, r2
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fbc2:	2300      	movs	r3, #0
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b082      	sub	sp, #8
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d101      	bne.n	800fbe6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	e014      	b.n	800fc10 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fbec:	b2db      	uxtb	r3, r3
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	d10d      	bne.n	800fc0e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d007      	beq.n	800fc0e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc06:	78fa      	ldrb	r2, [r7, #3]
 800fc08:	4611      	mov	r1, r2
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}

0800fc18 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b083      	sub	sp, #12
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	370c      	adds	r7, #12
 800fc26:	46bd      	mov	sp, r7
 800fc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2c:	4770      	bx	lr

0800fc2e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fc2e:	b580      	push	{r7, lr}
 800fc30:	b082      	sub	sp, #8
 800fc32:	af00      	add	r7, sp, #0
 800fc34:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	2201      	movs	r2, #1
 800fc3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d009      	beq.n	800fc5c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc4e:	685b      	ldr	r3, [r3, #4]
 800fc50:	687a      	ldr	r2, [r7, #4]
 800fc52:	6852      	ldr	r2, [r2, #4]
 800fc54:	b2d2      	uxtb	r2, r2
 800fc56:	4611      	mov	r1, r2
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	4798      	blx	r3
  }

  return USBD_OK;
 800fc5c:	2300      	movs	r3, #0
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3708      	adds	r7, #8
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}

0800fc66 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fc66:	b480      	push	{r7}
 800fc68:	b087      	sub	sp, #28
 800fc6a:	af00      	add	r7, sp, #0
 800fc6c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fc7e:	697b      	ldr	r3, [r7, #20]
 800fc80:	781b      	ldrb	r3, [r3, #0]
 800fc82:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fc84:	8a3b      	ldrh	r3, [r7, #16]
 800fc86:	021b      	lsls	r3, r3, #8
 800fc88:	b21a      	sxth	r2, r3
 800fc8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fc8e:	4313      	orrs	r3, r2
 800fc90:	b21b      	sxth	r3, r3
 800fc92:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fc94:	89fb      	ldrh	r3, [r7, #14]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	371c      	adds	r7, #28
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr
	...

0800fca4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b084      	sub	sp, #16
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
 800fcac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fcba:	2b40      	cmp	r3, #64	; 0x40
 800fcbc:	d005      	beq.n	800fcca <USBD_StdDevReq+0x26>
 800fcbe:	2b40      	cmp	r3, #64	; 0x40
 800fcc0:	d853      	bhi.n	800fd6a <USBD_StdDevReq+0xc6>
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d00b      	beq.n	800fcde <USBD_StdDevReq+0x3a>
 800fcc6:	2b20      	cmp	r3, #32
 800fcc8:	d14f      	bne.n	800fd6a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fcd0:	689b      	ldr	r3, [r3, #8]
 800fcd2:	6839      	ldr	r1, [r7, #0]
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	4798      	blx	r3
 800fcd8:	4603      	mov	r3, r0
 800fcda:	73fb      	strb	r3, [r7, #15]
      break;
 800fcdc:	e04a      	b.n	800fd74 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	785b      	ldrb	r3, [r3, #1]
 800fce2:	2b09      	cmp	r3, #9
 800fce4:	d83b      	bhi.n	800fd5e <USBD_StdDevReq+0xba>
 800fce6:	a201      	add	r2, pc, #4	; (adr r2, 800fcec <USBD_StdDevReq+0x48>)
 800fce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcec:	0800fd41 	.word	0x0800fd41
 800fcf0:	0800fd55 	.word	0x0800fd55
 800fcf4:	0800fd5f 	.word	0x0800fd5f
 800fcf8:	0800fd4b 	.word	0x0800fd4b
 800fcfc:	0800fd5f 	.word	0x0800fd5f
 800fd00:	0800fd1f 	.word	0x0800fd1f
 800fd04:	0800fd15 	.word	0x0800fd15
 800fd08:	0800fd5f 	.word	0x0800fd5f
 800fd0c:	0800fd37 	.word	0x0800fd37
 800fd10:	0800fd29 	.word	0x0800fd29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800fd14:	6839      	ldr	r1, [r7, #0]
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 f9de 	bl	80100d8 <USBD_GetDescriptor>
          break;
 800fd1c:	e024      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800fd1e:	6839      	ldr	r1, [r7, #0]
 800fd20:	6878      	ldr	r0, [r7, #4]
 800fd22:	f000 fb43 	bl	80103ac <USBD_SetAddress>
          break;
 800fd26:	e01f      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800fd28:	6839      	ldr	r1, [r7, #0]
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	f000 fb82 	bl	8010434 <USBD_SetConfig>
 800fd30:	4603      	mov	r3, r0
 800fd32:	73fb      	strb	r3, [r7, #15]
          break;
 800fd34:	e018      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800fd36:	6839      	ldr	r1, [r7, #0]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f000 fc21 	bl	8010580 <USBD_GetConfig>
          break;
 800fd3e:	e013      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800fd40:	6839      	ldr	r1, [r7, #0]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	f000 fc52 	bl	80105ec <USBD_GetStatus>
          break;
 800fd48:	e00e      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800fd4a:	6839      	ldr	r1, [r7, #0]
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 fc81 	bl	8010654 <USBD_SetFeature>
          break;
 800fd52:	e009      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800fd54:	6839      	ldr	r1, [r7, #0]
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 fc90 	bl	801067c <USBD_ClrFeature>
          break;
 800fd5c:	e004      	b.n	800fd68 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fce7 	bl	8010734 <USBD_CtlError>
          break;
 800fd66:	bf00      	nop
      }
      break;
 800fd68:	e004      	b.n	800fd74 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800fd6a:	6839      	ldr	r1, [r7, #0]
 800fd6c:	6878      	ldr	r0, [r7, #4]
 800fd6e:	f000 fce1 	bl	8010734 <USBD_CtlError>
      break;
 800fd72:	bf00      	nop
  }

  return ret;
 800fd74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3710      	adds	r7, #16
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	bd80      	pop	{r7, pc}
 800fd7e:	bf00      	nop

0800fd80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b084      	sub	sp, #16
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
 800fd88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd96:	2b40      	cmp	r3, #64	; 0x40
 800fd98:	d005      	beq.n	800fda6 <USBD_StdItfReq+0x26>
 800fd9a:	2b40      	cmp	r3, #64	; 0x40
 800fd9c:	d82f      	bhi.n	800fdfe <USBD_StdItfReq+0x7e>
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d001      	beq.n	800fda6 <USBD_StdItfReq+0x26>
 800fda2:	2b20      	cmp	r3, #32
 800fda4:	d12b      	bne.n	800fdfe <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fdac:	b2db      	uxtb	r3, r3
 800fdae:	3b01      	subs	r3, #1
 800fdb0:	2b02      	cmp	r3, #2
 800fdb2:	d81d      	bhi.n	800fdf0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	889b      	ldrh	r3, [r3, #4]
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	2b01      	cmp	r3, #1
 800fdbc:	d813      	bhi.n	800fde6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fdc4:	689b      	ldr	r3, [r3, #8]
 800fdc6:	6839      	ldr	r1, [r7, #0]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	4798      	blx	r3
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	88db      	ldrh	r3, [r3, #6]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d110      	bne.n	800fdfa <USBD_StdItfReq+0x7a>
 800fdd8:	7bfb      	ldrb	r3, [r7, #15]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10d      	bne.n	800fdfa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 fd73 	bl	80108ca <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800fde4:	e009      	b.n	800fdfa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800fde6:	6839      	ldr	r1, [r7, #0]
 800fde8:	6878      	ldr	r0, [r7, #4]
 800fdea:	f000 fca3 	bl	8010734 <USBD_CtlError>
          break;
 800fdee:	e004      	b.n	800fdfa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800fdf0:	6839      	ldr	r1, [r7, #0]
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fc9e 	bl	8010734 <USBD_CtlError>
          break;
 800fdf8:	e000      	b.n	800fdfc <USBD_StdItfReq+0x7c>
          break;
 800fdfa:	bf00      	nop
      }
      break;
 800fdfc:	e004      	b.n	800fe08 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fc97 	bl	8010734 <USBD_CtlError>
      break;
 800fe06:	bf00      	nop
  }

  return ret;
 800fe08:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3710      	adds	r7, #16
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b084      	sub	sp, #16
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
 800fe1a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	889b      	ldrh	r3, [r3, #4]
 800fe24:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fe2e:	2b40      	cmp	r3, #64	; 0x40
 800fe30:	d007      	beq.n	800fe42 <USBD_StdEPReq+0x30>
 800fe32:	2b40      	cmp	r3, #64	; 0x40
 800fe34:	f200 8145 	bhi.w	80100c2 <USBD_StdEPReq+0x2b0>
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d00c      	beq.n	800fe56 <USBD_StdEPReq+0x44>
 800fe3c:	2b20      	cmp	r3, #32
 800fe3e:	f040 8140 	bne.w	80100c2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fe48:	689b      	ldr	r3, [r3, #8]
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	4798      	blx	r3
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]
      break;
 800fe54:	e13a      	b.n	80100cc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	785b      	ldrb	r3, [r3, #1]
 800fe5a:	2b03      	cmp	r3, #3
 800fe5c:	d007      	beq.n	800fe6e <USBD_StdEPReq+0x5c>
 800fe5e:	2b03      	cmp	r3, #3
 800fe60:	f300 8129 	bgt.w	80100b6 <USBD_StdEPReq+0x2a4>
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d07f      	beq.n	800ff68 <USBD_StdEPReq+0x156>
 800fe68:	2b01      	cmp	r3, #1
 800fe6a:	d03c      	beq.n	800fee6 <USBD_StdEPReq+0xd4>
 800fe6c:	e123      	b.n	80100b6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	2b02      	cmp	r3, #2
 800fe78:	d002      	beq.n	800fe80 <USBD_StdEPReq+0x6e>
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d016      	beq.n	800feac <USBD_StdEPReq+0x9a>
 800fe7e:	e02c      	b.n	800feda <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fe80:	7bbb      	ldrb	r3, [r7, #14]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d00d      	beq.n	800fea2 <USBD_StdEPReq+0x90>
 800fe86:	7bbb      	ldrb	r3, [r7, #14]
 800fe88:	2b80      	cmp	r3, #128	; 0x80
 800fe8a:	d00a      	beq.n	800fea2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800fe8c:	7bbb      	ldrb	r3, [r7, #14]
 800fe8e:	4619      	mov	r1, r3
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f008 fc2d 	bl	80186f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800fe96:	2180      	movs	r1, #128	; 0x80
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f008 fc29 	bl	80186f0 <USBD_LL_StallEP>
 800fe9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800fea0:	e020      	b.n	800fee4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	6878      	ldr	r0, [r7, #4]
 800fea6:	f000 fc45 	bl	8010734 <USBD_CtlError>
              break;
 800feaa:	e01b      	b.n	800fee4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	885b      	ldrh	r3, [r3, #2]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d10e      	bne.n	800fed2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800feb4:	7bbb      	ldrb	r3, [r7, #14]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d00b      	beq.n	800fed2 <USBD_StdEPReq+0xc0>
 800feba:	7bbb      	ldrb	r3, [r7, #14]
 800febc:	2b80      	cmp	r3, #128	; 0x80
 800febe:	d008      	beq.n	800fed2 <USBD_StdEPReq+0xc0>
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	88db      	ldrh	r3, [r3, #6]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d104      	bne.n	800fed2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800fec8:	7bbb      	ldrb	r3, [r7, #14]
 800feca:	4619      	mov	r1, r3
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f008 fc0f 	bl	80186f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f000 fcf9 	bl	80108ca <USBD_CtlSendStatus>

              break;
 800fed8:	e004      	b.n	800fee4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800feda:	6839      	ldr	r1, [r7, #0]
 800fedc:	6878      	ldr	r0, [r7, #4]
 800fede:	f000 fc29 	bl	8010734 <USBD_CtlError>
              break;
 800fee2:	bf00      	nop
          }
          break;
 800fee4:	e0ec      	b.n	80100c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800feec:	b2db      	uxtb	r3, r3
 800feee:	2b02      	cmp	r3, #2
 800fef0:	d002      	beq.n	800fef8 <USBD_StdEPReq+0xe6>
 800fef2:	2b03      	cmp	r3, #3
 800fef4:	d016      	beq.n	800ff24 <USBD_StdEPReq+0x112>
 800fef6:	e030      	b.n	800ff5a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fef8:	7bbb      	ldrb	r3, [r7, #14]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d00d      	beq.n	800ff1a <USBD_StdEPReq+0x108>
 800fefe:	7bbb      	ldrb	r3, [r7, #14]
 800ff00:	2b80      	cmp	r3, #128	; 0x80
 800ff02:	d00a      	beq.n	800ff1a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ff04:	7bbb      	ldrb	r3, [r7, #14]
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f008 fbf1 	bl	80186f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ff0e:	2180      	movs	r1, #128	; 0x80
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f008 fbed 	bl	80186f0 <USBD_LL_StallEP>
 800ff16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ff18:	e025      	b.n	800ff66 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ff1a:	6839      	ldr	r1, [r7, #0]
 800ff1c:	6878      	ldr	r0, [r7, #4]
 800ff1e:	f000 fc09 	bl	8010734 <USBD_CtlError>
              break;
 800ff22:	e020      	b.n	800ff66 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	885b      	ldrh	r3, [r3, #2]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d11b      	bne.n	800ff64 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ff2c:	7bbb      	ldrb	r3, [r7, #14]
 800ff2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d004      	beq.n	800ff40 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ff36:	7bbb      	ldrb	r3, [r7, #14]
 800ff38:	4619      	mov	r1, r3
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f008 fbf7 	bl	801872e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 fcc2 	bl	80108ca <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff4c:	689b      	ldr	r3, [r3, #8]
 800ff4e:	6839      	ldr	r1, [r7, #0]
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	4798      	blx	r3
 800ff54:	4603      	mov	r3, r0
 800ff56:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ff58:	e004      	b.n	800ff64 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ff5a:	6839      	ldr	r1, [r7, #0]
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f000 fbe9 	bl	8010734 <USBD_CtlError>
              break;
 800ff62:	e000      	b.n	800ff66 <USBD_StdEPReq+0x154>
              break;
 800ff64:	bf00      	nop
          }
          break;
 800ff66:	e0ab      	b.n	80100c0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ff6e:	b2db      	uxtb	r3, r3
 800ff70:	2b02      	cmp	r3, #2
 800ff72:	d002      	beq.n	800ff7a <USBD_StdEPReq+0x168>
 800ff74:	2b03      	cmp	r3, #3
 800ff76:	d032      	beq.n	800ffde <USBD_StdEPReq+0x1cc>
 800ff78:	e097      	b.n	80100aa <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ff7a:	7bbb      	ldrb	r3, [r7, #14]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d007      	beq.n	800ff90 <USBD_StdEPReq+0x17e>
 800ff80:	7bbb      	ldrb	r3, [r7, #14]
 800ff82:	2b80      	cmp	r3, #128	; 0x80
 800ff84:	d004      	beq.n	800ff90 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ff86:	6839      	ldr	r1, [r7, #0]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 fbd3 	bl	8010734 <USBD_CtlError>
                break;
 800ff8e:	e091      	b.n	80100b4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ff90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	da0b      	bge.n	800ffb0 <USBD_StdEPReq+0x19e>
 800ff98:	7bbb      	ldrb	r3, [r7, #14]
 800ff9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	3310      	adds	r3, #16
 800ffa8:	687a      	ldr	r2, [r7, #4]
 800ffaa:	4413      	add	r3, r2
 800ffac:	3304      	adds	r3, #4
 800ffae:	e00b      	b.n	800ffc8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ffb0:	7bbb      	ldrb	r3, [r7, #14]
 800ffb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ffb6:	4613      	mov	r3, r2
 800ffb8:	009b      	lsls	r3, r3, #2
 800ffba:	4413      	add	r3, r2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	4413      	add	r3, r2
 800ffc6:	3304      	adds	r3, #4
 800ffc8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	2202      	movs	r2, #2
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fc1d 	bl	8010816 <USBD_CtlSendData>
              break;
 800ffdc:	e06a      	b.n	80100b4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ffde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	da11      	bge.n	801000a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ffe6:	7bbb      	ldrb	r3, [r7, #14]
 800ffe8:	f003 020f 	and.w	r2, r3, #15
 800ffec:	6879      	ldr	r1, [r7, #4]
 800ffee:	4613      	mov	r3, r2
 800fff0:	009b      	lsls	r3, r3, #2
 800fff2:	4413      	add	r3, r2
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	440b      	add	r3, r1
 800fff8:	3324      	adds	r3, #36	; 0x24
 800fffa:	881b      	ldrh	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d117      	bne.n	8010030 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010000:	6839      	ldr	r1, [r7, #0]
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 fb96 	bl	8010734 <USBD_CtlError>
                  break;
 8010008:	e054      	b.n	80100b4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801000a:	7bbb      	ldrb	r3, [r7, #14]
 801000c:	f003 020f 	and.w	r2, r3, #15
 8010010:	6879      	ldr	r1, [r7, #4]
 8010012:	4613      	mov	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	4413      	add	r3, r2
 8010018:	009b      	lsls	r3, r3, #2
 801001a:	440b      	add	r3, r1
 801001c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d104      	bne.n	8010030 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f000 fb83 	bl	8010734 <USBD_CtlError>
                  break;
 801002e:	e041      	b.n	80100b4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010034:	2b00      	cmp	r3, #0
 8010036:	da0b      	bge.n	8010050 <USBD_StdEPReq+0x23e>
 8010038:	7bbb      	ldrb	r3, [r7, #14]
 801003a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801003e:	4613      	mov	r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	4413      	add	r3, r2
 8010044:	009b      	lsls	r3, r3, #2
 8010046:	3310      	adds	r3, #16
 8010048:	687a      	ldr	r2, [r7, #4]
 801004a:	4413      	add	r3, r2
 801004c:	3304      	adds	r3, #4
 801004e:	e00b      	b.n	8010068 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010050:	7bbb      	ldrb	r3, [r7, #14]
 8010052:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010056:	4613      	mov	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	4413      	add	r3, r2
 801005c:	009b      	lsls	r3, r3, #2
 801005e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010062:	687a      	ldr	r2, [r7, #4]
 8010064:	4413      	add	r3, r2
 8010066:	3304      	adds	r3, #4
 8010068:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801006a:	7bbb      	ldrb	r3, [r7, #14]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <USBD_StdEPReq+0x264>
 8010070:	7bbb      	ldrb	r3, [r7, #14]
 8010072:	2b80      	cmp	r3, #128	; 0x80
 8010074:	d103      	bne.n	801007e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	2200      	movs	r2, #0
 801007a:	601a      	str	r2, [r3, #0]
 801007c:	e00e      	b.n	801009c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801007e:	7bbb      	ldrb	r3, [r7, #14]
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f008 fb72 	bl	801876c <USBD_LL_IsStallEP>
 8010088:	4603      	mov	r3, r0
 801008a:	2b00      	cmp	r3, #0
 801008c:	d003      	beq.n	8010096 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801008e:	68bb      	ldr	r3, [r7, #8]
 8010090:	2201      	movs	r2, #1
 8010092:	601a      	str	r2, [r3, #0]
 8010094:	e002      	b.n	801009c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	2200      	movs	r2, #0
 801009a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	2202      	movs	r2, #2
 80100a0:	4619      	mov	r1, r3
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f000 fbb7 	bl	8010816 <USBD_CtlSendData>
              break;
 80100a8:	e004      	b.n	80100b4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80100aa:	6839      	ldr	r1, [r7, #0]
 80100ac:	6878      	ldr	r0, [r7, #4]
 80100ae:	f000 fb41 	bl	8010734 <USBD_CtlError>
              break;
 80100b2:	bf00      	nop
          }
          break;
 80100b4:	e004      	b.n	80100c0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 fb3b 	bl	8010734 <USBD_CtlError>
          break;
 80100be:	bf00      	nop
      }
      break;
 80100c0:	e004      	b.n	80100cc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80100c2:	6839      	ldr	r1, [r7, #0]
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fb35 	bl	8010734 <USBD_CtlError>
      break;
 80100ca:	bf00      	nop
  }

  return ret;
 80100cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3710      	adds	r7, #16
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}
	...

080100d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b084      	sub	sp, #16
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80100e2:	2300      	movs	r3, #0
 80100e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80100e6:	2300      	movs	r3, #0
 80100e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80100ea:	2300      	movs	r3, #0
 80100ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	885b      	ldrh	r3, [r3, #2]
 80100f2:	0a1b      	lsrs	r3, r3, #8
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	3b01      	subs	r3, #1
 80100f8:	2b06      	cmp	r3, #6
 80100fa:	f200 8128 	bhi.w	801034e <USBD_GetDescriptor+0x276>
 80100fe:	a201      	add	r2, pc, #4	; (adr r2, 8010104 <USBD_GetDescriptor+0x2c>)
 8010100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010104:	08010121 	.word	0x08010121
 8010108:	08010139 	.word	0x08010139
 801010c:	08010179 	.word	0x08010179
 8010110:	0801034f 	.word	0x0801034f
 8010114:	0801034f 	.word	0x0801034f
 8010118:	080102ef 	.word	0x080102ef
 801011c:	0801031b 	.word	0x0801031b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	7c12      	ldrb	r2, [r2, #16]
 801012c:	f107 0108 	add.w	r1, r7, #8
 8010130:	4610      	mov	r0, r2
 8010132:	4798      	blx	r3
 8010134:	60f8      	str	r0, [r7, #12]
      break;
 8010136:	e112      	b.n	801035e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	7c1b      	ldrb	r3, [r3, #16]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d10d      	bne.n	801015c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010148:	f107 0208 	add.w	r2, r7, #8
 801014c:	4610      	mov	r0, r2
 801014e:	4798      	blx	r3
 8010150:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3301      	adds	r3, #1
 8010156:	2202      	movs	r2, #2
 8010158:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801015a:	e100      	b.n	801035e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010164:	f107 0208 	add.w	r2, r7, #8
 8010168:	4610      	mov	r0, r2
 801016a:	4798      	blx	r3
 801016c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	3301      	adds	r3, #1
 8010172:	2202      	movs	r2, #2
 8010174:	701a      	strb	r2, [r3, #0]
      break;
 8010176:	e0f2      	b.n	801035e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	885b      	ldrh	r3, [r3, #2]
 801017c:	b2db      	uxtb	r3, r3
 801017e:	2b05      	cmp	r3, #5
 8010180:	f200 80ac 	bhi.w	80102dc <USBD_GetDescriptor+0x204>
 8010184:	a201      	add	r2, pc, #4	; (adr r2, 801018c <USBD_GetDescriptor+0xb4>)
 8010186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801018a:	bf00      	nop
 801018c:	080101a5 	.word	0x080101a5
 8010190:	080101d9 	.word	0x080101d9
 8010194:	0801020d 	.word	0x0801020d
 8010198:	08010241 	.word	0x08010241
 801019c:	08010275 	.word	0x08010275
 80101a0:	080102a9 	.word	0x080102a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101aa:	685b      	ldr	r3, [r3, #4]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00b      	beq.n	80101c8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	7c12      	ldrb	r2, [r2, #16]
 80101bc:	f107 0108 	add.w	r1, r7, #8
 80101c0:	4610      	mov	r0, r2
 80101c2:	4798      	blx	r3
 80101c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101c6:	e091      	b.n	80102ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 fab2 	bl	8010734 <USBD_CtlError>
            err++;
 80101d0:	7afb      	ldrb	r3, [r7, #11]
 80101d2:	3301      	adds	r3, #1
 80101d4:	72fb      	strb	r3, [r7, #11]
          break;
 80101d6:	e089      	b.n	80102ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101de:	689b      	ldr	r3, [r3, #8]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d00b      	beq.n	80101fc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80101ea:	689b      	ldr	r3, [r3, #8]
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	7c12      	ldrb	r2, [r2, #16]
 80101f0:	f107 0108 	add.w	r1, r7, #8
 80101f4:	4610      	mov	r0, r2
 80101f6:	4798      	blx	r3
 80101f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80101fa:	e077      	b.n	80102ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80101fc:	6839      	ldr	r1, [r7, #0]
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 fa98 	bl	8010734 <USBD_CtlError>
            err++;
 8010204:	7afb      	ldrb	r3, [r7, #11]
 8010206:	3301      	adds	r3, #1
 8010208:	72fb      	strb	r3, [r7, #11]
          break;
 801020a:	e06f      	b.n	80102ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010212:	68db      	ldr	r3, [r3, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d00b      	beq.n	8010230 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	7c12      	ldrb	r2, [r2, #16]
 8010224:	f107 0108 	add.w	r1, r7, #8
 8010228:	4610      	mov	r0, r2
 801022a:	4798      	blx	r3
 801022c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801022e:	e05d      	b.n	80102ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010230:	6839      	ldr	r1, [r7, #0]
 8010232:	6878      	ldr	r0, [r7, #4]
 8010234:	f000 fa7e 	bl	8010734 <USBD_CtlError>
            err++;
 8010238:	7afb      	ldrb	r3, [r7, #11]
 801023a:	3301      	adds	r3, #1
 801023c:	72fb      	strb	r3, [r7, #11]
          break;
 801023e:	e055      	b.n	80102ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00b      	beq.n	8010264 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010252:	691b      	ldr	r3, [r3, #16]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	7c12      	ldrb	r2, [r2, #16]
 8010258:	f107 0108 	add.w	r1, r7, #8
 801025c:	4610      	mov	r0, r2
 801025e:	4798      	blx	r3
 8010260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010262:	e043      	b.n	80102ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010264:	6839      	ldr	r1, [r7, #0]
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f000 fa64 	bl	8010734 <USBD_CtlError>
            err++;
 801026c:	7afb      	ldrb	r3, [r7, #11]
 801026e:	3301      	adds	r3, #1
 8010270:	72fb      	strb	r3, [r7, #11]
          break;
 8010272:	e03b      	b.n	80102ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801027a:	695b      	ldr	r3, [r3, #20]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d00b      	beq.n	8010298 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010286:	695b      	ldr	r3, [r3, #20]
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	7c12      	ldrb	r2, [r2, #16]
 801028c:	f107 0108 	add.w	r1, r7, #8
 8010290:	4610      	mov	r0, r2
 8010292:	4798      	blx	r3
 8010294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010296:	e029      	b.n	80102ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8010298:	6839      	ldr	r1, [r7, #0]
 801029a:	6878      	ldr	r0, [r7, #4]
 801029c:	f000 fa4a 	bl	8010734 <USBD_CtlError>
            err++;
 80102a0:	7afb      	ldrb	r3, [r7, #11]
 80102a2:	3301      	adds	r3, #1
 80102a4:	72fb      	strb	r3, [r7, #11]
          break;
 80102a6:	e021      	b.n	80102ec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d00b      	beq.n	80102cc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80102ba:	699b      	ldr	r3, [r3, #24]
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	7c12      	ldrb	r2, [r2, #16]
 80102c0:	f107 0108 	add.w	r1, r7, #8
 80102c4:	4610      	mov	r0, r2
 80102c6:	4798      	blx	r3
 80102c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80102ca:	e00f      	b.n	80102ec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80102cc:	6839      	ldr	r1, [r7, #0]
 80102ce:	6878      	ldr	r0, [r7, #4]
 80102d0:	f000 fa30 	bl	8010734 <USBD_CtlError>
            err++;
 80102d4:	7afb      	ldrb	r3, [r7, #11]
 80102d6:	3301      	adds	r3, #1
 80102d8:	72fb      	strb	r3, [r7, #11]
          break;
 80102da:	e007      	b.n	80102ec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f000 fa28 	bl	8010734 <USBD_CtlError>
          err++;
 80102e4:	7afb      	ldrb	r3, [r7, #11]
 80102e6:	3301      	adds	r3, #1
 80102e8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80102ea:	bf00      	nop
      }
      break;
 80102ec:	e037      	b.n	801035e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	7c1b      	ldrb	r3, [r3, #16]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d109      	bne.n	801030a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fe:	f107 0208 	add.w	r2, r7, #8
 8010302:	4610      	mov	r0, r2
 8010304:	4798      	blx	r3
 8010306:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010308:	e029      	b.n	801035e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801030a:	6839      	ldr	r1, [r7, #0]
 801030c:	6878      	ldr	r0, [r7, #4]
 801030e:	f000 fa11 	bl	8010734 <USBD_CtlError>
        err++;
 8010312:	7afb      	ldrb	r3, [r7, #11]
 8010314:	3301      	adds	r3, #1
 8010316:	72fb      	strb	r3, [r7, #11]
      break;
 8010318:	e021      	b.n	801035e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	7c1b      	ldrb	r3, [r3, #16]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10d      	bne.n	801033e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801032a:	f107 0208 	add.w	r2, r7, #8
 801032e:	4610      	mov	r0, r2
 8010330:	4798      	blx	r3
 8010332:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	3301      	adds	r3, #1
 8010338:	2207      	movs	r2, #7
 801033a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801033c:	e00f      	b.n	801035e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801033e:	6839      	ldr	r1, [r7, #0]
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f000 f9f7 	bl	8010734 <USBD_CtlError>
        err++;
 8010346:	7afb      	ldrb	r3, [r7, #11]
 8010348:	3301      	adds	r3, #1
 801034a:	72fb      	strb	r3, [r7, #11]
      break;
 801034c:	e007      	b.n	801035e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 f9ef 	bl	8010734 <USBD_CtlError>
      err++;
 8010356:	7afb      	ldrb	r3, [r7, #11]
 8010358:	3301      	adds	r3, #1
 801035a:	72fb      	strb	r3, [r7, #11]
      break;
 801035c:	bf00      	nop
  }

  if (err != 0U)
 801035e:	7afb      	ldrb	r3, [r7, #11]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d11e      	bne.n	80103a2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8010364:	683b      	ldr	r3, [r7, #0]
 8010366:	88db      	ldrh	r3, [r3, #6]
 8010368:	2b00      	cmp	r3, #0
 801036a:	d016      	beq.n	801039a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801036c:	893b      	ldrh	r3, [r7, #8]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d00e      	beq.n	8010390 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	88da      	ldrh	r2, [r3, #6]
 8010376:	893b      	ldrh	r3, [r7, #8]
 8010378:	4293      	cmp	r3, r2
 801037a:	bf28      	it	cs
 801037c:	4613      	movcs	r3, r2
 801037e:	b29b      	uxth	r3, r3
 8010380:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010382:	893b      	ldrh	r3, [r7, #8]
 8010384:	461a      	mov	r2, r3
 8010386:	68f9      	ldr	r1, [r7, #12]
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fa44 	bl	8010816 <USBD_CtlSendData>
 801038e:	e009      	b.n	80103a4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010390:	6839      	ldr	r1, [r7, #0]
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 f9ce 	bl	8010734 <USBD_CtlError>
 8010398:	e004      	b.n	80103a4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f000 fa95 	bl	80108ca <USBD_CtlSendStatus>
 80103a0:	e000      	b.n	80103a4 <USBD_GetDescriptor+0x2cc>
    return;
 80103a2:	bf00      	nop
  }
}
 80103a4:	3710      	adds	r7, #16
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}
 80103aa:	bf00      	nop

080103ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
 80103b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	889b      	ldrh	r3, [r3, #4]
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d131      	bne.n	8010422 <USBD_SetAddress+0x76>
 80103be:	683b      	ldr	r3, [r7, #0]
 80103c0:	88db      	ldrh	r3, [r3, #6]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d12d      	bne.n	8010422 <USBD_SetAddress+0x76>
 80103c6:	683b      	ldr	r3, [r7, #0]
 80103c8:	885b      	ldrh	r3, [r3, #2]
 80103ca:	2b7f      	cmp	r3, #127	; 0x7f
 80103cc:	d829      	bhi.n	8010422 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	885b      	ldrh	r3, [r3, #2]
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80103d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	2b03      	cmp	r3, #3
 80103e4:	d104      	bne.n	80103f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80103e6:	6839      	ldr	r1, [r7, #0]
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f000 f9a3 	bl	8010734 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ee:	e01d      	b.n	801042c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	7bfa      	ldrb	r2, [r7, #15]
 80103f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80103f8:	7bfb      	ldrb	r3, [r7, #15]
 80103fa:	4619      	mov	r1, r3
 80103fc:	6878      	ldr	r0, [r7, #4]
 80103fe:	f008 f9e1 	bl	80187c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010402:	6878      	ldr	r0, [r7, #4]
 8010404:	f000 fa61 	bl	80108ca <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d004      	beq.n	8010418 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2202      	movs	r2, #2
 8010412:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010416:	e009      	b.n	801042c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	2201      	movs	r2, #1
 801041c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010420:	e004      	b.n	801042c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010422:	6839      	ldr	r1, [r7, #0]
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f000 f985 	bl	8010734 <USBD_CtlError>
  }
}
 801042a:	bf00      	nop
 801042c:	bf00      	nop
 801042e:	3710      	adds	r7, #16
 8010430:	46bd      	mov	sp, r7
 8010432:	bd80      	pop	{r7, pc}

08010434 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801043e:	2300      	movs	r3, #0
 8010440:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010442:	683b      	ldr	r3, [r7, #0]
 8010444:	885b      	ldrh	r3, [r3, #2]
 8010446:	b2da      	uxtb	r2, r3
 8010448:	4b4c      	ldr	r3, [pc, #304]	; (801057c <USBD_SetConfig+0x148>)
 801044a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801044c:	4b4b      	ldr	r3, [pc, #300]	; (801057c <USBD_SetConfig+0x148>)
 801044e:	781b      	ldrb	r3, [r3, #0]
 8010450:	2b01      	cmp	r3, #1
 8010452:	d905      	bls.n	8010460 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010454:	6839      	ldr	r1, [r7, #0]
 8010456:	6878      	ldr	r0, [r7, #4]
 8010458:	f000 f96c 	bl	8010734 <USBD_CtlError>
    return USBD_FAIL;
 801045c:	2303      	movs	r3, #3
 801045e:	e088      	b.n	8010572 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010466:	b2db      	uxtb	r3, r3
 8010468:	2b02      	cmp	r3, #2
 801046a:	d002      	beq.n	8010472 <USBD_SetConfig+0x3e>
 801046c:	2b03      	cmp	r3, #3
 801046e:	d025      	beq.n	80104bc <USBD_SetConfig+0x88>
 8010470:	e071      	b.n	8010556 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010472:	4b42      	ldr	r3, [pc, #264]	; (801057c <USBD_SetConfig+0x148>)
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d01c      	beq.n	80104b4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801047a:	4b40      	ldr	r3, [pc, #256]	; (801057c <USBD_SetConfig+0x148>)
 801047c:	781b      	ldrb	r3, [r3, #0]
 801047e:	461a      	mov	r2, r3
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010484:	4b3d      	ldr	r3, [pc, #244]	; (801057c <USBD_SetConfig+0x148>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	4619      	mov	r1, r3
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f7ff f948 	bl	800f720 <USBD_SetClassConfig>
 8010490:	4603      	mov	r3, r0
 8010492:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010494:	7bfb      	ldrb	r3, [r7, #15]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d004      	beq.n	80104a4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801049a:	6839      	ldr	r1, [r7, #0]
 801049c:	6878      	ldr	r0, [r7, #4]
 801049e:	f000 f949 	bl	8010734 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104a2:	e065      	b.n	8010570 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80104a4:	6878      	ldr	r0, [r7, #4]
 80104a6:	f000 fa10 	bl	80108ca <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2203      	movs	r2, #3
 80104ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80104b2:	e05d      	b.n	8010570 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 fa08 	bl	80108ca <USBD_CtlSendStatus>
      break;
 80104ba:	e059      	b.n	8010570 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80104bc:	4b2f      	ldr	r3, [pc, #188]	; (801057c <USBD_SetConfig+0x148>)
 80104be:	781b      	ldrb	r3, [r3, #0]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d112      	bne.n	80104ea <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2202      	movs	r2, #2
 80104c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80104cc:	4b2b      	ldr	r3, [pc, #172]	; (801057c <USBD_SetConfig+0x148>)
 80104ce:	781b      	ldrb	r3, [r3, #0]
 80104d0:	461a      	mov	r2, r3
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80104d6:	4b29      	ldr	r3, [pc, #164]	; (801057c <USBD_SetConfig+0x148>)
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	4619      	mov	r1, r3
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f7ff f93b 	bl	800f758 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f9f1 	bl	80108ca <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80104e8:	e042      	b.n	8010570 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80104ea:	4b24      	ldr	r3, [pc, #144]	; (801057c <USBD_SetConfig+0x148>)
 80104ec:	781b      	ldrb	r3, [r3, #0]
 80104ee:	461a      	mov	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	685b      	ldr	r3, [r3, #4]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d02a      	beq.n	801054e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	685b      	ldr	r3, [r3, #4]
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	4619      	mov	r1, r3
 8010500:	6878      	ldr	r0, [r7, #4]
 8010502:	f7ff f929 	bl	800f758 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010506:	4b1d      	ldr	r3, [pc, #116]	; (801057c <USBD_SetConfig+0x148>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	461a      	mov	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010510:	4b1a      	ldr	r3, [pc, #104]	; (801057c <USBD_SetConfig+0x148>)
 8010512:	781b      	ldrb	r3, [r3, #0]
 8010514:	4619      	mov	r1, r3
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f7ff f902 	bl	800f720 <USBD_SetClassConfig>
 801051c:	4603      	mov	r3, r0
 801051e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010520:	7bfb      	ldrb	r3, [r7, #15]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d00f      	beq.n	8010546 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8010526:	6839      	ldr	r1, [r7, #0]
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 f903 	bl	8010734 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	685b      	ldr	r3, [r3, #4]
 8010532:	b2db      	uxtb	r3, r3
 8010534:	4619      	mov	r1, r3
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7ff f90e 	bl	800f758 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2202      	movs	r2, #2
 8010540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8010544:	e014      	b.n	8010570 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 f9bf 	bl	80108ca <USBD_CtlSendStatus>
      break;
 801054c:	e010      	b.n	8010570 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801054e:	6878      	ldr	r0, [r7, #4]
 8010550:	f000 f9bb 	bl	80108ca <USBD_CtlSendStatus>
      break;
 8010554:	e00c      	b.n	8010570 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8010556:	6839      	ldr	r1, [r7, #0]
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 f8eb 	bl	8010734 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801055e:	4b07      	ldr	r3, [pc, #28]	; (801057c <USBD_SetConfig+0x148>)
 8010560:	781b      	ldrb	r3, [r3, #0]
 8010562:	4619      	mov	r1, r3
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7ff f8f7 	bl	800f758 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801056a:	2303      	movs	r3, #3
 801056c:	73fb      	strb	r3, [r7, #15]
      break;
 801056e:	bf00      	nop
  }

  return ret;
 8010570:	7bfb      	ldrb	r3, [r7, #15]
}
 8010572:	4618      	mov	r0, r3
 8010574:	3710      	adds	r7, #16
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	2000284c 	.word	0x2000284c

08010580 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b082      	sub	sp, #8
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	88db      	ldrh	r3, [r3, #6]
 801058e:	2b01      	cmp	r3, #1
 8010590:	d004      	beq.n	801059c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010592:	6839      	ldr	r1, [r7, #0]
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 f8cd 	bl	8010734 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801059a:	e023      	b.n	80105e4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105a2:	b2db      	uxtb	r3, r3
 80105a4:	2b02      	cmp	r3, #2
 80105a6:	dc02      	bgt.n	80105ae <USBD_GetConfig+0x2e>
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	dc03      	bgt.n	80105b4 <USBD_GetConfig+0x34>
 80105ac:	e015      	b.n	80105da <USBD_GetConfig+0x5a>
 80105ae:	2b03      	cmp	r3, #3
 80105b0:	d00b      	beq.n	80105ca <USBD_GetConfig+0x4a>
 80105b2:	e012      	b.n	80105da <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2200      	movs	r2, #0
 80105b8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3308      	adds	r3, #8
 80105be:	2201      	movs	r2, #1
 80105c0:	4619      	mov	r1, r3
 80105c2:	6878      	ldr	r0, [r7, #4]
 80105c4:	f000 f927 	bl	8010816 <USBD_CtlSendData>
        break;
 80105c8:	e00c      	b.n	80105e4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	3304      	adds	r3, #4
 80105ce:	2201      	movs	r2, #1
 80105d0:	4619      	mov	r1, r3
 80105d2:	6878      	ldr	r0, [r7, #4]
 80105d4:	f000 f91f 	bl	8010816 <USBD_CtlSendData>
        break;
 80105d8:	e004      	b.n	80105e4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80105da:	6839      	ldr	r1, [r7, #0]
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f000 f8a9 	bl	8010734 <USBD_CtlError>
        break;
 80105e2:	bf00      	nop
}
 80105e4:	bf00      	nop
 80105e6:	3708      	adds	r7, #8
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}

080105ec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105ec:	b580      	push	{r7, lr}
 80105ee:	b082      	sub	sp, #8
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80105fc:	b2db      	uxtb	r3, r3
 80105fe:	3b01      	subs	r3, #1
 8010600:	2b02      	cmp	r3, #2
 8010602:	d81e      	bhi.n	8010642 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	88db      	ldrh	r3, [r3, #6]
 8010608:	2b02      	cmp	r3, #2
 801060a:	d004      	beq.n	8010616 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801060c:	6839      	ldr	r1, [r7, #0]
 801060e:	6878      	ldr	r0, [r7, #4]
 8010610:	f000 f890 	bl	8010734 <USBD_CtlError>
        break;
 8010614:	e01a      	b.n	801064c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	2201      	movs	r2, #1
 801061a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8010622:	2b00      	cmp	r3, #0
 8010624:	d005      	beq.n	8010632 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	68db      	ldr	r3, [r3, #12]
 801062a:	f043 0202 	orr.w	r2, r3, #2
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	330c      	adds	r3, #12
 8010636:	2202      	movs	r2, #2
 8010638:	4619      	mov	r1, r3
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f000 f8eb 	bl	8010816 <USBD_CtlSendData>
      break;
 8010640:	e004      	b.n	801064c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010642:	6839      	ldr	r1, [r7, #0]
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f875 	bl	8010734 <USBD_CtlError>
      break;
 801064a:	bf00      	nop
  }
}
 801064c:	bf00      	nop
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b082      	sub	sp, #8
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
 801065c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	885b      	ldrh	r3, [r3, #2]
 8010662:	2b01      	cmp	r3, #1
 8010664:	d106      	bne.n	8010674 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	2201      	movs	r2, #1
 801066a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f000 f92b 	bl	80108ca <USBD_CtlSendStatus>
  }
}
 8010674:	bf00      	nop
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	b082      	sub	sp, #8
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
 8010684:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801068c:	b2db      	uxtb	r3, r3
 801068e:	3b01      	subs	r3, #1
 8010690:	2b02      	cmp	r3, #2
 8010692:	d80b      	bhi.n	80106ac <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	885b      	ldrh	r3, [r3, #2]
 8010698:	2b01      	cmp	r3, #1
 801069a:	d10c      	bne.n	80106b6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80106a4:	6878      	ldr	r0, [r7, #4]
 80106a6:	f000 f910 	bl	80108ca <USBD_CtlSendStatus>
      }
      break;
 80106aa:	e004      	b.n	80106b6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80106ac:	6839      	ldr	r1, [r7, #0]
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f000 f840 	bl	8010734 <USBD_CtlError>
      break;
 80106b4:	e000      	b.n	80106b8 <USBD_ClrFeature+0x3c>
      break;
 80106b6:	bf00      	nop
  }
}
 80106b8:	bf00      	nop
 80106ba:	3708      	adds	r7, #8
 80106bc:	46bd      	mov	sp, r7
 80106be:	bd80      	pop	{r7, pc}

080106c0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	b084      	sub	sp, #16
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	781a      	ldrb	r2, [r3, #0]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	3301      	adds	r3, #1
 80106da:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	781a      	ldrb	r2, [r3, #0]
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	3301      	adds	r3, #1
 80106e8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80106ea:	68f8      	ldr	r0, [r7, #12]
 80106ec:	f7ff fabb 	bl	800fc66 <SWAPBYTE>
 80106f0:	4603      	mov	r3, r0
 80106f2:	461a      	mov	r2, r3
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	3301      	adds	r3, #1
 80106fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3301      	adds	r3, #1
 8010702:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8010704:	68f8      	ldr	r0, [r7, #12]
 8010706:	f7ff faae 	bl	800fc66 <SWAPBYTE>
 801070a:	4603      	mov	r3, r0
 801070c:	461a      	mov	r2, r3
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	3301      	adds	r3, #1
 8010716:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3301      	adds	r3, #1
 801071c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f7ff faa1 	bl	800fc66 <SWAPBYTE>
 8010724:	4603      	mov	r3, r0
 8010726:	461a      	mov	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	80da      	strh	r2, [r3, #6]
}
 801072c:	bf00      	nop
 801072e:	3710      	adds	r7, #16
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801073e:	2180      	movs	r1, #128	; 0x80
 8010740:	6878      	ldr	r0, [r7, #4]
 8010742:	f007 ffd5 	bl	80186f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8010746:	2100      	movs	r1, #0
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f007 ffd1 	bl	80186f0 <USBD_LL_StallEP>
}
 801074e:	bf00      	nop
 8010750:	3708      	adds	r7, #8
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b086      	sub	sp, #24
 801075a:	af00      	add	r7, sp, #0
 801075c:	60f8      	str	r0, [r7, #12]
 801075e:	60b9      	str	r1, [r7, #8]
 8010760:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010762:	2300      	movs	r3, #0
 8010764:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d036      	beq.n	80107da <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010770:	6938      	ldr	r0, [r7, #16]
 8010772:	f000 f836 	bl	80107e2 <USBD_GetLen>
 8010776:	4603      	mov	r3, r0
 8010778:	3301      	adds	r3, #1
 801077a:	b29b      	uxth	r3, r3
 801077c:	005b      	lsls	r3, r3, #1
 801077e:	b29a      	uxth	r2, r3
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8010784:	7dfb      	ldrb	r3, [r7, #23]
 8010786:	68ba      	ldr	r2, [r7, #8]
 8010788:	4413      	add	r3, r2
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	7812      	ldrb	r2, [r2, #0]
 801078e:	701a      	strb	r2, [r3, #0]
  idx++;
 8010790:	7dfb      	ldrb	r3, [r7, #23]
 8010792:	3301      	adds	r3, #1
 8010794:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010796:	7dfb      	ldrb	r3, [r7, #23]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	4413      	add	r3, r2
 801079c:	2203      	movs	r2, #3
 801079e:	701a      	strb	r2, [r3, #0]
  idx++;
 80107a0:	7dfb      	ldrb	r3, [r7, #23]
 80107a2:	3301      	adds	r3, #1
 80107a4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80107a6:	e013      	b.n	80107d0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80107a8:	7dfb      	ldrb	r3, [r7, #23]
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	4413      	add	r3, r2
 80107ae:	693a      	ldr	r2, [r7, #16]
 80107b0:	7812      	ldrb	r2, [r2, #0]
 80107b2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80107b4:	693b      	ldr	r3, [r7, #16]
 80107b6:	3301      	adds	r3, #1
 80107b8:	613b      	str	r3, [r7, #16]
    idx++;
 80107ba:	7dfb      	ldrb	r3, [r7, #23]
 80107bc:	3301      	adds	r3, #1
 80107be:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80107c0:	7dfb      	ldrb	r3, [r7, #23]
 80107c2:	68ba      	ldr	r2, [r7, #8]
 80107c4:	4413      	add	r3, r2
 80107c6:	2200      	movs	r2, #0
 80107c8:	701a      	strb	r2, [r3, #0]
    idx++;
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
 80107cc:	3301      	adds	r3, #1
 80107ce:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80107d0:	693b      	ldr	r3, [r7, #16]
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d1e7      	bne.n	80107a8 <USBD_GetString+0x52>
 80107d8:	e000      	b.n	80107dc <USBD_GetString+0x86>
    return;
 80107da:	bf00      	nop
  }
}
 80107dc:	3718      	adds	r7, #24
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}

080107e2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80107e2:	b480      	push	{r7}
 80107e4:	b085      	sub	sp, #20
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80107ea:	2300      	movs	r3, #0
 80107ec:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80107f2:	e005      	b.n	8010800 <USBD_GetLen+0x1e>
  {
    len++;
 80107f4:	7bfb      	ldrb	r3, [r7, #15]
 80107f6:	3301      	adds	r3, #1
 80107f8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80107fa:	68bb      	ldr	r3, [r7, #8]
 80107fc:	3301      	adds	r3, #1
 80107fe:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	781b      	ldrb	r3, [r3, #0]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d1f5      	bne.n	80107f4 <USBD_GetLen+0x12>
  }

  return len;
 8010808:	7bfb      	ldrb	r3, [r7, #15]
}
 801080a:	4618      	mov	r0, r3
 801080c:	3714      	adds	r7, #20
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr

08010816 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010816:	b580      	push	{r7, lr}
 8010818:	b084      	sub	sp, #16
 801081a:	af00      	add	r7, sp, #0
 801081c:	60f8      	str	r0, [r7, #12]
 801081e:	60b9      	str	r1, [r7, #8]
 8010820:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	2202      	movs	r2, #2
 8010826:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	68ba      	ldr	r2, [r7, #8]
 801083a:	2100      	movs	r1, #0
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f007 ffe0 	bl	8018802 <USBD_LL_Transmit>

  return USBD_OK;
 8010842:	2300      	movs	r3, #0
}
 8010844:	4618      	mov	r0, r3
 8010846:	3710      	adds	r7, #16
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}

0801084c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801084c:	b580      	push	{r7, lr}
 801084e:	b084      	sub	sp, #16
 8010850:	af00      	add	r7, sp, #0
 8010852:	60f8      	str	r0, [r7, #12]
 8010854:	60b9      	str	r1, [r7, #8]
 8010856:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	68ba      	ldr	r2, [r7, #8]
 801085c:	2100      	movs	r1, #0
 801085e:	68f8      	ldr	r0, [r7, #12]
 8010860:	f007 ffcf 	bl	8018802 <USBD_LL_Transmit>

  return USBD_OK;
 8010864:	2300      	movs	r3, #0
}
 8010866:	4618      	mov	r0, r3
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}

0801086e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801086e:	b580      	push	{r7, lr}
 8010870:	b084      	sub	sp, #16
 8010872:	af00      	add	r7, sp, #0
 8010874:	60f8      	str	r0, [r7, #12]
 8010876:	60b9      	str	r1, [r7, #8]
 8010878:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2203      	movs	r2, #3
 801087e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	687a      	ldr	r2, [r7, #4]
 8010886:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	68ba      	ldr	r2, [r7, #8]
 8010896:	2100      	movs	r1, #0
 8010898:	68f8      	ldr	r0, [r7, #12]
 801089a:	f007 ffd3 	bl	8018844 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801089e:	2300      	movs	r3, #0
}
 80108a0:	4618      	mov	r0, r3
 80108a2:	3710      	adds	r7, #16
 80108a4:	46bd      	mov	sp, r7
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	60f8      	str	r0, [r7, #12]
 80108b0:	60b9      	str	r1, [r7, #8]
 80108b2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68ba      	ldr	r2, [r7, #8]
 80108b8:	2100      	movs	r1, #0
 80108ba:	68f8      	ldr	r0, [r7, #12]
 80108bc:	f007 ffc2 	bl	8018844 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80108c0:	2300      	movs	r3, #0
}
 80108c2:	4618      	mov	r0, r3
 80108c4:	3710      	adds	r7, #16
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}

080108ca <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80108ca:	b580      	push	{r7, lr}
 80108cc:	b082      	sub	sp, #8
 80108ce:	af00      	add	r7, sp, #0
 80108d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2204      	movs	r2, #4
 80108d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80108da:	2300      	movs	r3, #0
 80108dc:	2200      	movs	r2, #0
 80108de:	2100      	movs	r1, #0
 80108e0:	6878      	ldr	r0, [r7, #4]
 80108e2:	f007 ff8e 	bl	8018802 <USBD_LL_Transmit>

  return USBD_OK;
 80108e6:	2300      	movs	r3, #0
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3708      	adds	r7, #8
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd80      	pop	{r7, pc}

080108f0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b082      	sub	sp, #8
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2205      	movs	r2, #5
 80108fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010900:	2300      	movs	r3, #0
 8010902:	2200      	movs	r2, #0
 8010904:	2100      	movs	r1, #0
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f007 ff9c 	bl	8018844 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801090c:	2300      	movs	r3, #0
}
 801090e:	4618      	mov	r0, r3
 8010910:	3708      	adds	r7, #8
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}
	...

08010918 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b084      	sub	sp, #16
 801091c:	af00      	add	r7, sp, #0
 801091e:	4603      	mov	r3, r0
 8010920:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010922:	79fb      	ldrb	r3, [r7, #7]
 8010924:	4a08      	ldr	r2, [pc, #32]	; (8010948 <disk_status+0x30>)
 8010926:	009b      	lsls	r3, r3, #2
 8010928:	4413      	add	r3, r2
 801092a:	685b      	ldr	r3, [r3, #4]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	79fa      	ldrb	r2, [r7, #7]
 8010930:	4905      	ldr	r1, [pc, #20]	; (8010948 <disk_status+0x30>)
 8010932:	440a      	add	r2, r1
 8010934:	7a12      	ldrb	r2, [r2, #8]
 8010936:	4610      	mov	r0, r2
 8010938:	4798      	blx	r3
 801093a:	4603      	mov	r3, r0
 801093c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010940:	4618      	mov	r0, r3
 8010942:	3710      	adds	r7, #16
 8010944:	46bd      	mov	sp, r7
 8010946:	bd80      	pop	{r7, pc}
 8010948:	20002878 	.word	0x20002878

0801094c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b084      	sub	sp, #16
 8010950:	af00      	add	r7, sp, #0
 8010952:	4603      	mov	r3, r0
 8010954:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010956:	2300      	movs	r3, #0
 8010958:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801095a:	79fb      	ldrb	r3, [r7, #7]
 801095c:	4a0d      	ldr	r2, [pc, #52]	; (8010994 <disk_initialize+0x48>)
 801095e:	5cd3      	ldrb	r3, [r2, r3]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d111      	bne.n	8010988 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010964:	79fb      	ldrb	r3, [r7, #7]
 8010966:	4a0b      	ldr	r2, [pc, #44]	; (8010994 <disk_initialize+0x48>)
 8010968:	2101      	movs	r1, #1
 801096a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	4a09      	ldr	r2, [pc, #36]	; (8010994 <disk_initialize+0x48>)
 8010970:	009b      	lsls	r3, r3, #2
 8010972:	4413      	add	r3, r2
 8010974:	685b      	ldr	r3, [r3, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	79fa      	ldrb	r2, [r7, #7]
 801097a:	4906      	ldr	r1, [pc, #24]	; (8010994 <disk_initialize+0x48>)
 801097c:	440a      	add	r2, r1
 801097e:	7a12      	ldrb	r2, [r2, #8]
 8010980:	4610      	mov	r0, r2
 8010982:	4798      	blx	r3
 8010984:	4603      	mov	r3, r0
 8010986:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010988:	7bfb      	ldrb	r3, [r7, #15]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	20002878 	.word	0x20002878

08010998 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010998:	b590      	push	{r4, r7, lr}
 801099a:	b087      	sub	sp, #28
 801099c:	af00      	add	r7, sp, #0
 801099e:	60b9      	str	r1, [r7, #8]
 80109a0:	607a      	str	r2, [r7, #4]
 80109a2:	603b      	str	r3, [r7, #0]
 80109a4:	4603      	mov	r3, r0
 80109a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80109a8:	7bfb      	ldrb	r3, [r7, #15]
 80109aa:	4a0a      	ldr	r2, [pc, #40]	; (80109d4 <disk_read+0x3c>)
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4413      	add	r3, r2
 80109b0:	685b      	ldr	r3, [r3, #4]
 80109b2:	689c      	ldr	r4, [r3, #8]
 80109b4:	7bfb      	ldrb	r3, [r7, #15]
 80109b6:	4a07      	ldr	r2, [pc, #28]	; (80109d4 <disk_read+0x3c>)
 80109b8:	4413      	add	r3, r2
 80109ba:	7a18      	ldrb	r0, [r3, #8]
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	68b9      	ldr	r1, [r7, #8]
 80109c2:	47a0      	blx	r4
 80109c4:	4603      	mov	r3, r0
 80109c6:	75fb      	strb	r3, [r7, #23]
  return res;
 80109c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80109ca:	4618      	mov	r0, r3
 80109cc:	371c      	adds	r7, #28
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd90      	pop	{r4, r7, pc}
 80109d2:	bf00      	nop
 80109d4:	20002878 	.word	0x20002878

080109d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80109d8:	b590      	push	{r4, r7, lr}
 80109da:	b087      	sub	sp, #28
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60b9      	str	r1, [r7, #8]
 80109e0:	607a      	str	r2, [r7, #4]
 80109e2:	603b      	str	r3, [r7, #0]
 80109e4:	4603      	mov	r3, r0
 80109e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80109e8:	7bfb      	ldrb	r3, [r7, #15]
 80109ea:	4a0a      	ldr	r2, [pc, #40]	; (8010a14 <disk_write+0x3c>)
 80109ec:	009b      	lsls	r3, r3, #2
 80109ee:	4413      	add	r3, r2
 80109f0:	685b      	ldr	r3, [r3, #4]
 80109f2:	68dc      	ldr	r4, [r3, #12]
 80109f4:	7bfb      	ldrb	r3, [r7, #15]
 80109f6:	4a07      	ldr	r2, [pc, #28]	; (8010a14 <disk_write+0x3c>)
 80109f8:	4413      	add	r3, r2
 80109fa:	7a18      	ldrb	r0, [r3, #8]
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	68b9      	ldr	r1, [r7, #8]
 8010a02:	47a0      	blx	r4
 8010a04:	4603      	mov	r3, r0
 8010a06:	75fb      	strb	r3, [r7, #23]
  return res;
 8010a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	371c      	adds	r7, #28
 8010a0e:	46bd      	mov	sp, r7
 8010a10:	bd90      	pop	{r4, r7, pc}
 8010a12:	bf00      	nop
 8010a14:	20002878 	.word	0x20002878

08010a18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b084      	sub	sp, #16
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	4603      	mov	r3, r0
 8010a20:	603a      	str	r2, [r7, #0]
 8010a22:	71fb      	strb	r3, [r7, #7]
 8010a24:	460b      	mov	r3, r1
 8010a26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010a28:	79fb      	ldrb	r3, [r7, #7]
 8010a2a:	4a09      	ldr	r2, [pc, #36]	; (8010a50 <disk_ioctl+0x38>)
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	685b      	ldr	r3, [r3, #4]
 8010a32:	691b      	ldr	r3, [r3, #16]
 8010a34:	79fa      	ldrb	r2, [r7, #7]
 8010a36:	4906      	ldr	r1, [pc, #24]	; (8010a50 <disk_ioctl+0x38>)
 8010a38:	440a      	add	r2, r1
 8010a3a:	7a10      	ldrb	r0, [r2, #8]
 8010a3c:	79b9      	ldrb	r1, [r7, #6]
 8010a3e:	683a      	ldr	r2, [r7, #0]
 8010a40:	4798      	blx	r3
 8010a42:	4603      	mov	r3, r0
 8010a44:	73fb      	strb	r3, [r7, #15]
  return res;
 8010a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3710      	adds	r7, #16
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20002878 	.word	0x20002878

08010a54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	781b      	ldrb	r3, [r3, #0]
 8010a62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010a64:	89fb      	ldrh	r3, [r7, #14]
 8010a66:	021b      	lsls	r3, r3, #8
 8010a68:	b21a      	sxth	r2, r3
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	781b      	ldrb	r3, [r3, #0]
 8010a6e:	b21b      	sxth	r3, r3
 8010a70:	4313      	orrs	r3, r2
 8010a72:	b21b      	sxth	r3, r3
 8010a74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010a76:	89fb      	ldrh	r3, [r7, #14]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3714      	adds	r7, #20
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a82:	4770      	bx	lr

08010a84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	3303      	adds	r3, #3
 8010a90:	781b      	ldrb	r3, [r3, #0]
 8010a92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	021b      	lsls	r3, r3, #8
 8010a98:	687a      	ldr	r2, [r7, #4]
 8010a9a:	3202      	adds	r2, #2
 8010a9c:	7812      	ldrb	r2, [r2, #0]
 8010a9e:	4313      	orrs	r3, r2
 8010aa0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	021b      	lsls	r3, r3, #8
 8010aa6:	687a      	ldr	r2, [r7, #4]
 8010aa8:	3201      	adds	r2, #1
 8010aaa:	7812      	ldrb	r2, [r2, #0]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	021b      	lsls	r3, r3, #8
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	7812      	ldrb	r2, [r2, #0]
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	60fb      	str	r3, [r7, #12]
	return rv;
 8010abc:	68fb      	ldr	r3, [r7, #12]
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr

08010aca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010aca:	b480      	push	{r7}
 8010acc:	b083      	sub	sp, #12
 8010ace:	af00      	add	r7, sp, #0
 8010ad0:	6078      	str	r0, [r7, #4]
 8010ad2:	460b      	mov	r3, r1
 8010ad4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	1c5a      	adds	r2, r3, #1
 8010ada:	607a      	str	r2, [r7, #4]
 8010adc:	887a      	ldrh	r2, [r7, #2]
 8010ade:	b2d2      	uxtb	r2, r2
 8010ae0:	701a      	strb	r2, [r3, #0]
 8010ae2:	887b      	ldrh	r3, [r7, #2]
 8010ae4:	0a1b      	lsrs	r3, r3, #8
 8010ae6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	1c5a      	adds	r2, r3, #1
 8010aec:	607a      	str	r2, [r7, #4]
 8010aee:	887a      	ldrh	r2, [r7, #2]
 8010af0:	b2d2      	uxtb	r2, r2
 8010af2:	701a      	strb	r2, [r3, #0]
}
 8010af4:	bf00      	nop
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010b00:	b480      	push	{r7}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	1c5a      	adds	r2, r3, #1
 8010b0e:	607a      	str	r2, [r7, #4]
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	b2d2      	uxtb	r2, r2
 8010b14:	701a      	strb	r2, [r3, #0]
 8010b16:	683b      	ldr	r3, [r7, #0]
 8010b18:	0a1b      	lsrs	r3, r3, #8
 8010b1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	1c5a      	adds	r2, r3, #1
 8010b20:	607a      	str	r2, [r7, #4]
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	b2d2      	uxtb	r2, r2
 8010b26:	701a      	strb	r2, [r3, #0]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	0a1b      	lsrs	r3, r3, #8
 8010b2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	1c5a      	adds	r2, r3, #1
 8010b32:	607a      	str	r2, [r7, #4]
 8010b34:	683a      	ldr	r2, [r7, #0]
 8010b36:	b2d2      	uxtb	r2, r2
 8010b38:	701a      	strb	r2, [r3, #0]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	0a1b      	lsrs	r3, r3, #8
 8010b3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	1c5a      	adds	r2, r3, #1
 8010b44:	607a      	str	r2, [r7, #4]
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	b2d2      	uxtb	r2, r2
 8010b4a:	701a      	strb	r2, [r3, #0]
}
 8010b4c:	bf00      	nop
 8010b4e:	370c      	adds	r7, #12
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010b58:	b480      	push	{r7}
 8010b5a:	b087      	sub	sp, #28
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	60f8      	str	r0, [r7, #12]
 8010b60:	60b9      	str	r1, [r7, #8]
 8010b62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010b68:	68bb      	ldr	r3, [r7, #8]
 8010b6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d00d      	beq.n	8010b8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010b72:	693a      	ldr	r2, [r7, #16]
 8010b74:	1c53      	adds	r3, r2, #1
 8010b76:	613b      	str	r3, [r7, #16]
 8010b78:	697b      	ldr	r3, [r7, #20]
 8010b7a:	1c59      	adds	r1, r3, #1
 8010b7c:	6179      	str	r1, [r7, #20]
 8010b7e:	7812      	ldrb	r2, [r2, #0]
 8010b80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	3b01      	subs	r3, #1
 8010b86:	607b      	str	r3, [r7, #4]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d1f1      	bne.n	8010b72 <mem_cpy+0x1a>
	}
}
 8010b8e:	bf00      	nop
 8010b90:	371c      	adds	r7, #28
 8010b92:	46bd      	mov	sp, r7
 8010b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b98:	4770      	bx	lr

08010b9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010b9a:	b480      	push	{r7}
 8010b9c:	b087      	sub	sp, #28
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	60f8      	str	r0, [r7, #12]
 8010ba2:	60b9      	str	r1, [r7, #8]
 8010ba4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	1c5a      	adds	r2, r3, #1
 8010bae:	617a      	str	r2, [r7, #20]
 8010bb0:	68ba      	ldr	r2, [r7, #8]
 8010bb2:	b2d2      	uxtb	r2, r2
 8010bb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3b01      	subs	r3, #1
 8010bba:	607b      	str	r3, [r7, #4]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d1f3      	bne.n	8010baa <mem_set+0x10>
}
 8010bc2:	bf00      	nop
 8010bc4:	bf00      	nop
 8010bc6:	371c      	adds	r7, #28
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr

08010bd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010bd0:	b480      	push	{r7}
 8010bd2:	b089      	sub	sp, #36	; 0x24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	60f8      	str	r0, [r7, #12]
 8010bd8:	60b9      	str	r1, [r7, #8]
 8010bda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	61fb      	str	r3, [r7, #28]
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010be4:	2300      	movs	r3, #0
 8010be6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010be8:	69fb      	ldr	r3, [r7, #28]
 8010bea:	1c5a      	adds	r2, r3, #1
 8010bec:	61fa      	str	r2, [r7, #28]
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	4619      	mov	r1, r3
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	1c5a      	adds	r2, r3, #1
 8010bf6:	61ba      	str	r2, [r7, #24]
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	1acb      	subs	r3, r1, r3
 8010bfc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	607b      	str	r3, [r7, #4]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d002      	beq.n	8010c10 <mem_cmp+0x40>
 8010c0a:	697b      	ldr	r3, [r7, #20]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d0eb      	beq.n	8010be8 <mem_cmp+0x18>

	return r;
 8010c10:	697b      	ldr	r3, [r7, #20]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	3724      	adds	r7, #36	; 0x24
 8010c16:	46bd      	mov	sp, r7
 8010c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1c:	4770      	bx	lr

08010c1e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010c1e:	b480      	push	{r7}
 8010c20:	b083      	sub	sp, #12
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
 8010c26:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010c28:	e002      	b.n	8010c30 <chk_chr+0x12>
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	607b      	str	r3, [r7, #4]
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d005      	beq.n	8010c44 <chk_chr+0x26>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	683b      	ldr	r3, [r7, #0]
 8010c40:	4293      	cmp	r3, r2
 8010c42:	d1f2      	bne.n	8010c2a <chk_chr+0xc>
	return *str;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	781b      	ldrb	r3, [r3, #0]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	370c      	adds	r7, #12
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c52:	4770      	bx	lr

08010c54 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d009      	beq.n	8010c76 <lock_fs+0x22>
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	695b      	ldr	r3, [r3, #20]
 8010c66:	4618      	mov	r0, r3
 8010c68:	f003 f98d 	bl	8013f86 <ff_req_grant>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d001      	beq.n	8010c76 <lock_fs+0x22>
 8010c72:	2301      	movs	r3, #1
 8010c74:	e000      	b.n	8010c78 <lock_fs+0x24>
 8010c76:	2300      	movs	r3, #0
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b082      	sub	sp, #8
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
 8010c88:	460b      	mov	r3, r1
 8010c8a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d00d      	beq.n	8010cae <unlock_fs+0x2e>
 8010c92:	78fb      	ldrb	r3, [r7, #3]
 8010c94:	2b0c      	cmp	r3, #12
 8010c96:	d00a      	beq.n	8010cae <unlock_fs+0x2e>
 8010c98:	78fb      	ldrb	r3, [r7, #3]
 8010c9a:	2b0b      	cmp	r3, #11
 8010c9c:	d007      	beq.n	8010cae <unlock_fs+0x2e>
 8010c9e:	78fb      	ldrb	r3, [r7, #3]
 8010ca0:	2b0f      	cmp	r3, #15
 8010ca2:	d004      	beq.n	8010cae <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f003 f981 	bl	8013fb0 <ff_rel_grant>
	}
}
 8010cae:	bf00      	nop
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	60bb      	str	r3, [r7, #8]
 8010cc6:	68bb      	ldr	r3, [r7, #8]
 8010cc8:	60fb      	str	r3, [r7, #12]
 8010cca:	e029      	b.n	8010d20 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010ccc:	4a27      	ldr	r2, [pc, #156]	; (8010d6c <chk_lock+0xb4>)
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	011b      	lsls	r3, r3, #4
 8010cd2:	4413      	add	r3, r2
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d01d      	beq.n	8010d16 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010cda:	4a24      	ldr	r2, [pc, #144]	; (8010d6c <chk_lock+0xb4>)
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	011b      	lsls	r3, r3, #4
 8010ce0:	4413      	add	r3, r2
 8010ce2:	681a      	ldr	r2, [r3, #0]
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	429a      	cmp	r2, r3
 8010cea:	d116      	bne.n	8010d1a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010cec:	4a1f      	ldr	r2, [pc, #124]	; (8010d6c <chk_lock+0xb4>)
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	4413      	add	r3, r2
 8010cf4:	3304      	adds	r3, #4
 8010cf6:	681a      	ldr	r2, [r3, #0]
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010cfc:	429a      	cmp	r2, r3
 8010cfe:	d10c      	bne.n	8010d1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010d00:	4a1a      	ldr	r2, [pc, #104]	; (8010d6c <chk_lock+0xb4>)
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	011b      	lsls	r3, r3, #4
 8010d06:	4413      	add	r3, r2
 8010d08:	3308      	adds	r3, #8
 8010d0a:	681a      	ldr	r2, [r3, #0]
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010d10:	429a      	cmp	r2, r3
 8010d12:	d102      	bne.n	8010d1a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010d14:	e007      	b.n	8010d26 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010d16:	2301      	movs	r3, #1
 8010d18:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	3301      	adds	r3, #1
 8010d1e:	60fb      	str	r3, [r7, #12]
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b01      	cmp	r3, #1
 8010d24:	d9d2      	bls.n	8010ccc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	2b02      	cmp	r3, #2
 8010d2a:	d109      	bne.n	8010d40 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d102      	bne.n	8010d38 <chk_lock+0x80>
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	2b02      	cmp	r3, #2
 8010d36:	d101      	bne.n	8010d3c <chk_lock+0x84>
 8010d38:	2300      	movs	r3, #0
 8010d3a:	e010      	b.n	8010d5e <chk_lock+0xa6>
 8010d3c:	2312      	movs	r3, #18
 8010d3e:	e00e      	b.n	8010d5e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010d40:	683b      	ldr	r3, [r7, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d108      	bne.n	8010d58 <chk_lock+0xa0>
 8010d46:	4a09      	ldr	r2, [pc, #36]	; (8010d6c <chk_lock+0xb4>)
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	011b      	lsls	r3, r3, #4
 8010d4c:	4413      	add	r3, r2
 8010d4e:	330c      	adds	r3, #12
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d56:	d101      	bne.n	8010d5c <chk_lock+0xa4>
 8010d58:	2310      	movs	r3, #16
 8010d5a:	e000      	b.n	8010d5e <chk_lock+0xa6>
 8010d5c:	2300      	movs	r3, #0
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	3714      	adds	r7, #20
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	20002858 	.word	0x20002858

08010d70 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010d76:	2300      	movs	r3, #0
 8010d78:	607b      	str	r3, [r7, #4]
 8010d7a:	e002      	b.n	8010d82 <enq_lock+0x12>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	3301      	adds	r3, #1
 8010d80:	607b      	str	r3, [r7, #4]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2b01      	cmp	r3, #1
 8010d86:	d806      	bhi.n	8010d96 <enq_lock+0x26>
 8010d88:	4a09      	ldr	r2, [pc, #36]	; (8010db0 <enq_lock+0x40>)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	011b      	lsls	r3, r3, #4
 8010d8e:	4413      	add	r3, r2
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d1f2      	bne.n	8010d7c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2b02      	cmp	r3, #2
 8010d9a:	bf14      	ite	ne
 8010d9c:	2301      	movne	r3, #1
 8010d9e:	2300      	moveq	r3, #0
 8010da0:	b2db      	uxtb	r3, r3
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	370c      	adds	r7, #12
 8010da6:	46bd      	mov	sp, r7
 8010da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dac:	4770      	bx	lr
 8010dae:	bf00      	nop
 8010db0:	20002858 	.word	0x20002858

08010db4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b085      	sub	sp, #20
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	60fb      	str	r3, [r7, #12]
 8010dc2:	e01f      	b.n	8010e04 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010dc4:	4a41      	ldr	r2, [pc, #260]	; (8010ecc <inc_lock+0x118>)
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	011b      	lsls	r3, r3, #4
 8010dca:	4413      	add	r3, r2
 8010dcc:	681a      	ldr	r2, [r3, #0]
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	429a      	cmp	r2, r3
 8010dd4:	d113      	bne.n	8010dfe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010dd6:	4a3d      	ldr	r2, [pc, #244]	; (8010ecc <inc_lock+0x118>)
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	011b      	lsls	r3, r3, #4
 8010ddc:	4413      	add	r3, r2
 8010dde:	3304      	adds	r3, #4
 8010de0:	681a      	ldr	r2, [r3, #0]
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d109      	bne.n	8010dfe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010dea:	4a38      	ldr	r2, [pc, #224]	; (8010ecc <inc_lock+0x118>)
 8010dec:	68fb      	ldr	r3, [r7, #12]
 8010dee:	011b      	lsls	r3, r3, #4
 8010df0:	4413      	add	r3, r2
 8010df2:	3308      	adds	r3, #8
 8010df4:	681a      	ldr	r2, [r3, #0]
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d006      	beq.n	8010e0c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	3301      	adds	r3, #1
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	2b01      	cmp	r3, #1
 8010e08:	d9dc      	bls.n	8010dc4 <inc_lock+0x10>
 8010e0a:	e000      	b.n	8010e0e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010e0c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d132      	bne.n	8010e7a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010e14:	2300      	movs	r3, #0
 8010e16:	60fb      	str	r3, [r7, #12]
 8010e18:	e002      	b.n	8010e20 <inc_lock+0x6c>
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	60fb      	str	r3, [r7, #12]
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d806      	bhi.n	8010e34 <inc_lock+0x80>
 8010e26:	4a29      	ldr	r2, [pc, #164]	; (8010ecc <inc_lock+0x118>)
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	011b      	lsls	r3, r3, #4
 8010e2c:	4413      	add	r3, r2
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d1f2      	bne.n	8010e1a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	2b02      	cmp	r3, #2
 8010e38:	d101      	bne.n	8010e3e <inc_lock+0x8a>
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	e040      	b.n	8010ec0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	4922      	ldr	r1, [pc, #136]	; (8010ecc <inc_lock+0x118>)
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	011b      	lsls	r3, r3, #4
 8010e48:	440b      	add	r3, r1
 8010e4a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	689a      	ldr	r2, [r3, #8]
 8010e50:	491e      	ldr	r1, [pc, #120]	; (8010ecc <inc_lock+0x118>)
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	011b      	lsls	r3, r3, #4
 8010e56:	440b      	add	r3, r1
 8010e58:	3304      	adds	r3, #4
 8010e5a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	695a      	ldr	r2, [r3, #20]
 8010e60:	491a      	ldr	r1, [pc, #104]	; (8010ecc <inc_lock+0x118>)
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	011b      	lsls	r3, r3, #4
 8010e66:	440b      	add	r3, r1
 8010e68:	3308      	adds	r3, #8
 8010e6a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010e6c:	4a17      	ldr	r2, [pc, #92]	; (8010ecc <inc_lock+0x118>)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	011b      	lsls	r3, r3, #4
 8010e72:	4413      	add	r3, r2
 8010e74:	330c      	adds	r3, #12
 8010e76:	2200      	movs	r2, #0
 8010e78:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d009      	beq.n	8010e94 <inc_lock+0xe0>
 8010e80:	4a12      	ldr	r2, [pc, #72]	; (8010ecc <inc_lock+0x118>)
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	011b      	lsls	r3, r3, #4
 8010e86:	4413      	add	r3, r2
 8010e88:	330c      	adds	r3, #12
 8010e8a:	881b      	ldrh	r3, [r3, #0]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d001      	beq.n	8010e94 <inc_lock+0xe0>
 8010e90:	2300      	movs	r3, #0
 8010e92:	e015      	b.n	8010ec0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d108      	bne.n	8010eac <inc_lock+0xf8>
 8010e9a:	4a0c      	ldr	r2, [pc, #48]	; (8010ecc <inc_lock+0x118>)
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	011b      	lsls	r3, r3, #4
 8010ea0:	4413      	add	r3, r2
 8010ea2:	330c      	adds	r3, #12
 8010ea4:	881b      	ldrh	r3, [r3, #0]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	b29a      	uxth	r2, r3
 8010eaa:	e001      	b.n	8010eb0 <inc_lock+0xfc>
 8010eac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010eb0:	4906      	ldr	r1, [pc, #24]	; (8010ecc <inc_lock+0x118>)
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	011b      	lsls	r3, r3, #4
 8010eb6:	440b      	add	r3, r1
 8010eb8:	330c      	adds	r3, #12
 8010eba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	3301      	adds	r3, #1
}
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	3714      	adds	r7, #20
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eca:	4770      	bx	lr
 8010ecc:	20002858 	.word	0x20002858

08010ed0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010ed0:	b480      	push	{r7}
 8010ed2:	b085      	sub	sp, #20
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	3b01      	subs	r3, #1
 8010edc:	607b      	str	r3, [r7, #4]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d825      	bhi.n	8010f30 <dec_lock+0x60>
		n = Files[i].ctr;
 8010ee4:	4a17      	ldr	r2, [pc, #92]	; (8010f44 <dec_lock+0x74>)
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	011b      	lsls	r3, r3, #4
 8010eea:	4413      	add	r3, r2
 8010eec:	330c      	adds	r3, #12
 8010eee:	881b      	ldrh	r3, [r3, #0]
 8010ef0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010ef2:	89fb      	ldrh	r3, [r7, #14]
 8010ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ef8:	d101      	bne.n	8010efe <dec_lock+0x2e>
 8010efa:	2300      	movs	r3, #0
 8010efc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010efe:	89fb      	ldrh	r3, [r7, #14]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d002      	beq.n	8010f0a <dec_lock+0x3a>
 8010f04:	89fb      	ldrh	r3, [r7, #14]
 8010f06:	3b01      	subs	r3, #1
 8010f08:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010f0a:	4a0e      	ldr	r2, [pc, #56]	; (8010f44 <dec_lock+0x74>)
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	011b      	lsls	r3, r3, #4
 8010f10:	4413      	add	r3, r2
 8010f12:	330c      	adds	r3, #12
 8010f14:	89fa      	ldrh	r2, [r7, #14]
 8010f16:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010f18:	89fb      	ldrh	r3, [r7, #14]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d105      	bne.n	8010f2a <dec_lock+0x5a>
 8010f1e:	4a09      	ldr	r2, [pc, #36]	; (8010f44 <dec_lock+0x74>)
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	011b      	lsls	r3, r3, #4
 8010f24:	4413      	add	r3, r2
 8010f26:	2200      	movs	r2, #0
 8010f28:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	737b      	strb	r3, [r7, #13]
 8010f2e:	e001      	b.n	8010f34 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010f30:	2302      	movs	r3, #2
 8010f32:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010f34:	7b7b      	ldrb	r3, [r7, #13]
}
 8010f36:	4618      	mov	r0, r3
 8010f38:	3714      	adds	r7, #20
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr
 8010f42:	bf00      	nop
 8010f44:	20002858 	.word	0x20002858

08010f48 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	b085      	sub	sp, #20
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010f50:	2300      	movs	r3, #0
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	e010      	b.n	8010f78 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010f56:	4a0d      	ldr	r2, [pc, #52]	; (8010f8c <clear_lock+0x44>)
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	011b      	lsls	r3, r3, #4
 8010f5c:	4413      	add	r3, r2
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	429a      	cmp	r2, r3
 8010f64:	d105      	bne.n	8010f72 <clear_lock+0x2a>
 8010f66:	4a09      	ldr	r2, [pc, #36]	; (8010f8c <clear_lock+0x44>)
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	011b      	lsls	r3, r3, #4
 8010f6c:	4413      	add	r3, r2
 8010f6e:	2200      	movs	r2, #0
 8010f70:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3301      	adds	r3, #1
 8010f76:	60fb      	str	r3, [r7, #12]
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2b01      	cmp	r3, #1
 8010f7c:	d9eb      	bls.n	8010f56 <clear_lock+0xe>
	}
}
 8010f7e:	bf00      	nop
 8010f80:	bf00      	nop
 8010f82:	3714      	adds	r7, #20
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr
 8010f8c:	20002858 	.word	0x20002858

08010f90 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b086      	sub	sp, #24
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010f98:	2300      	movs	r3, #0
 8010f9a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	78db      	ldrb	r3, [r3, #3]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d034      	beq.n	801100e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010fa8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	7858      	ldrb	r0, [r3, #1]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010fb4:	2301      	movs	r3, #1
 8010fb6:	697a      	ldr	r2, [r7, #20]
 8010fb8:	f7ff fd0e 	bl	80109d8 <disk_write>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d002      	beq.n	8010fc8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	73fb      	strb	r3, [r7, #15]
 8010fc6:	e022      	b.n	801100e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd2:	697a      	ldr	r2, [r7, #20]
 8010fd4:	1ad2      	subs	r2, r2, r3
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	d217      	bcs.n	801100e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	789b      	ldrb	r3, [r3, #2]
 8010fe2:	613b      	str	r3, [r7, #16]
 8010fe4:	e010      	b.n	8011008 <sync_window+0x78>
					wsect += fs->fsize;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	4413      	add	r3, r2
 8010fee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	7858      	ldrb	r0, [r3, #1]
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	697a      	ldr	r2, [r7, #20]
 8010ffe:	f7ff fceb 	bl	80109d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011002:	693b      	ldr	r3, [r7, #16]
 8011004:	3b01      	subs	r3, #1
 8011006:	613b      	str	r3, [r7, #16]
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	2b01      	cmp	r3, #1
 801100c:	d8eb      	bhi.n	8010fe6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011010:	4618      	mov	r0, r3
 8011012:	3718      	adds	r7, #24
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b084      	sub	sp, #16
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011022:	2300      	movs	r3, #0
 8011024:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801102a:	683a      	ldr	r2, [r7, #0]
 801102c:	429a      	cmp	r2, r3
 801102e:	d01b      	beq.n	8011068 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7ff ffad 	bl	8010f90 <sync_window>
 8011036:	4603      	mov	r3, r0
 8011038:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801103a:	7bfb      	ldrb	r3, [r7, #15]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d113      	bne.n	8011068 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	7858      	ldrb	r0, [r3, #1]
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801104a:	2301      	movs	r3, #1
 801104c:	683a      	ldr	r2, [r7, #0]
 801104e:	f7ff fca3 	bl	8010998 <disk_read>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d004      	beq.n	8011062 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801105c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801105e:	2301      	movs	r3, #1
 8011060:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	683a      	ldr	r2, [r7, #0]
 8011066:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8011068:	7bfb      	ldrb	r3, [r7, #15]
}
 801106a:	4618      	mov	r0, r3
 801106c:	3710      	adds	r7, #16
 801106e:	46bd      	mov	sp, r7
 8011070:	bd80      	pop	{r7, pc}
	...

08011074 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f7ff ff87 	bl	8010f90 <sync_window>
 8011082:	4603      	mov	r3, r0
 8011084:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011086:	7bfb      	ldrb	r3, [r7, #15]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d159      	bne.n	8011140 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b03      	cmp	r3, #3
 8011092:	d149      	bne.n	8011128 <sync_fs+0xb4>
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	791b      	ldrb	r3, [r3, #4]
 8011098:	2b01      	cmp	r3, #1
 801109a:	d145      	bne.n	8011128 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	899b      	ldrh	r3, [r3, #12]
 80110a6:	461a      	mov	r2, r3
 80110a8:	2100      	movs	r1, #0
 80110aa:	f7ff fd76 	bl	8010b9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	333c      	adds	r3, #60	; 0x3c
 80110b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80110b6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80110ba:	4618      	mov	r0, r3
 80110bc:	f7ff fd05 	bl	8010aca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	333c      	adds	r3, #60	; 0x3c
 80110c4:	4921      	ldr	r1, [pc, #132]	; (801114c <sync_fs+0xd8>)
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7ff fd1a 	bl	8010b00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	333c      	adds	r3, #60	; 0x3c
 80110d0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80110d4:	491e      	ldr	r1, [pc, #120]	; (8011150 <sync_fs+0xdc>)
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7ff fd12 	bl	8010b00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	333c      	adds	r3, #60	; 0x3c
 80110e0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	69db      	ldr	r3, [r3, #28]
 80110e8:	4619      	mov	r1, r3
 80110ea:	4610      	mov	r0, r2
 80110ec:	f7ff fd08 	bl	8010b00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	333c      	adds	r3, #60	; 0x3c
 80110f4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	699b      	ldr	r3, [r3, #24]
 80110fc:	4619      	mov	r1, r3
 80110fe:	4610      	mov	r0, r2
 8011100:	f7ff fcfe 	bl	8010b00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	7858      	ldrb	r0, [r3, #1]
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801111c:	2301      	movs	r3, #1
 801111e:	f7ff fc5b 	bl	80109d8 <disk_write>
			fs->fsi_flag = 0;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2200      	movs	r2, #0
 8011126:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	785b      	ldrb	r3, [r3, #1]
 801112c:	2200      	movs	r2, #0
 801112e:	2100      	movs	r1, #0
 8011130:	4618      	mov	r0, r3
 8011132:	f7ff fc71 	bl	8010a18 <disk_ioctl>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <sync_fs+0xcc>
 801113c:	2301      	movs	r3, #1
 801113e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011140:	7bfb      	ldrb	r3, [r7, #15]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	41615252 	.word	0x41615252
 8011150:	61417272 	.word	0x61417272

08011154 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8011154:	b480      	push	{r7}
 8011156:	b083      	sub	sp, #12
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	3b02      	subs	r3, #2
 8011162:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	6a1b      	ldr	r3, [r3, #32]
 8011168:	3b02      	subs	r3, #2
 801116a:	683a      	ldr	r2, [r7, #0]
 801116c:	429a      	cmp	r2, r3
 801116e:	d301      	bcc.n	8011174 <clust2sect+0x20>
 8011170:	2300      	movs	r3, #0
 8011172:	e008      	b.n	8011186 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	895b      	ldrh	r3, [r3, #10]
 8011178:	461a      	mov	r2, r3
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	fb03 f202 	mul.w	r2, r3, r2
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011184:	4413      	add	r3, r2
}
 8011186:	4618      	mov	r0, r3
 8011188:	370c      	adds	r7, #12
 801118a:	46bd      	mov	sp, r7
 801118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011190:	4770      	bx	lr

08011192 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b086      	sub	sp, #24
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
 801119a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d904      	bls.n	80111b2 <get_fat+0x20>
 80111a8:	693b      	ldr	r3, [r7, #16]
 80111aa:	6a1b      	ldr	r3, [r3, #32]
 80111ac:	683a      	ldr	r2, [r7, #0]
 80111ae:	429a      	cmp	r2, r3
 80111b0:	d302      	bcc.n	80111b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80111b2:	2301      	movs	r3, #1
 80111b4:	617b      	str	r3, [r7, #20]
 80111b6:	e0bb      	b.n	8011330 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80111b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80111bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	f000 8083 	beq.w	80112ce <get_fat+0x13c>
 80111c8:	2b03      	cmp	r3, #3
 80111ca:	f300 80a7 	bgt.w	801131c <get_fat+0x18a>
 80111ce:	2b01      	cmp	r3, #1
 80111d0:	d002      	beq.n	80111d8 <get_fat+0x46>
 80111d2:	2b02      	cmp	r3, #2
 80111d4:	d056      	beq.n	8011284 <get_fat+0xf2>
 80111d6:	e0a1      	b.n	801131c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	60fb      	str	r3, [r7, #12]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	085b      	lsrs	r3, r3, #1
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	4413      	add	r3, r2
 80111e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80111e6:	693b      	ldr	r3, [r7, #16]
 80111e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111ea:	693b      	ldr	r3, [r7, #16]
 80111ec:	899b      	ldrh	r3, [r3, #12]
 80111ee:	4619      	mov	r1, r3
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80111f6:	4413      	add	r3, r2
 80111f8:	4619      	mov	r1, r3
 80111fa:	6938      	ldr	r0, [r7, #16]
 80111fc:	f7ff ff0c 	bl	8011018 <move_window>
 8011200:	4603      	mov	r3, r0
 8011202:	2b00      	cmp	r3, #0
 8011204:	f040 808d 	bne.w	8011322 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	1c5a      	adds	r2, r3, #1
 801120c:	60fa      	str	r2, [r7, #12]
 801120e:	693a      	ldr	r2, [r7, #16]
 8011210:	8992      	ldrh	r2, [r2, #12]
 8011212:	fbb3 f1f2 	udiv	r1, r3, r2
 8011216:	fb02 f201 	mul.w	r2, r2, r1
 801121a:	1a9b      	subs	r3, r3, r2
 801121c:	693a      	ldr	r2, [r7, #16]
 801121e:	4413      	add	r3, r2
 8011220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011224:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801122a:	693b      	ldr	r3, [r7, #16]
 801122c:	899b      	ldrh	r3, [r3, #12]
 801122e:	4619      	mov	r1, r3
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	fbb3 f3f1 	udiv	r3, r3, r1
 8011236:	4413      	add	r3, r2
 8011238:	4619      	mov	r1, r3
 801123a:	6938      	ldr	r0, [r7, #16]
 801123c:	f7ff feec 	bl	8011018 <move_window>
 8011240:	4603      	mov	r3, r0
 8011242:	2b00      	cmp	r3, #0
 8011244:	d16f      	bne.n	8011326 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011246:	693b      	ldr	r3, [r7, #16]
 8011248:	899b      	ldrh	r3, [r3, #12]
 801124a:	461a      	mov	r2, r3
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011252:	fb02 f201 	mul.w	r2, r2, r1
 8011256:	1a9b      	subs	r3, r3, r2
 8011258:	693a      	ldr	r2, [r7, #16]
 801125a:	4413      	add	r3, r2
 801125c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011260:	021b      	lsls	r3, r3, #8
 8011262:	461a      	mov	r2, r3
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	4313      	orrs	r3, r2
 8011268:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	f003 0301 	and.w	r3, r3, #1
 8011270:	2b00      	cmp	r3, #0
 8011272:	d002      	beq.n	801127a <get_fat+0xe8>
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	091b      	lsrs	r3, r3, #4
 8011278:	e002      	b.n	8011280 <get_fat+0xee>
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011280:	617b      	str	r3, [r7, #20]
			break;
 8011282:	e055      	b.n	8011330 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011288:	693b      	ldr	r3, [r7, #16]
 801128a:	899b      	ldrh	r3, [r3, #12]
 801128c:	085b      	lsrs	r3, r3, #1
 801128e:	b29b      	uxth	r3, r3
 8011290:	4619      	mov	r1, r3
 8011292:	683b      	ldr	r3, [r7, #0]
 8011294:	fbb3 f3f1 	udiv	r3, r3, r1
 8011298:	4413      	add	r3, r2
 801129a:	4619      	mov	r1, r3
 801129c:	6938      	ldr	r0, [r7, #16]
 801129e:	f7ff febb 	bl	8011018 <move_window>
 80112a2:	4603      	mov	r3, r0
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d140      	bne.n	801132a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	005b      	lsls	r3, r3, #1
 80112b2:	693a      	ldr	r2, [r7, #16]
 80112b4:	8992      	ldrh	r2, [r2, #12]
 80112b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80112ba:	fb02 f200 	mul.w	r2, r2, r0
 80112be:	1a9b      	subs	r3, r3, r2
 80112c0:	440b      	add	r3, r1
 80112c2:	4618      	mov	r0, r3
 80112c4:	f7ff fbc6 	bl	8010a54 <ld_word>
 80112c8:	4603      	mov	r3, r0
 80112ca:	617b      	str	r3, [r7, #20]
			break;
 80112cc:	e030      	b.n	8011330 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80112ce:	693b      	ldr	r3, [r7, #16]
 80112d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	899b      	ldrh	r3, [r3, #12]
 80112d6:	089b      	lsrs	r3, r3, #2
 80112d8:	b29b      	uxth	r3, r3
 80112da:	4619      	mov	r1, r3
 80112dc:	683b      	ldr	r3, [r7, #0]
 80112de:	fbb3 f3f1 	udiv	r3, r3, r1
 80112e2:	4413      	add	r3, r2
 80112e4:	4619      	mov	r1, r3
 80112e6:	6938      	ldr	r0, [r7, #16]
 80112e8:	f7ff fe96 	bl	8011018 <move_window>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d11d      	bne.n	801132e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80112f2:	693b      	ldr	r3, [r7, #16]
 80112f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	009b      	lsls	r3, r3, #2
 80112fc:	693a      	ldr	r2, [r7, #16]
 80112fe:	8992      	ldrh	r2, [r2, #12]
 8011300:	fbb3 f0f2 	udiv	r0, r3, r2
 8011304:	fb02 f200 	mul.w	r2, r2, r0
 8011308:	1a9b      	subs	r3, r3, r2
 801130a:	440b      	add	r3, r1
 801130c:	4618      	mov	r0, r3
 801130e:	f7ff fbb9 	bl	8010a84 <ld_dword>
 8011312:	4603      	mov	r3, r0
 8011314:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011318:	617b      	str	r3, [r7, #20]
			break;
 801131a:	e009      	b.n	8011330 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801131c:	2301      	movs	r3, #1
 801131e:	617b      	str	r3, [r7, #20]
 8011320:	e006      	b.n	8011330 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011322:	bf00      	nop
 8011324:	e004      	b.n	8011330 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011326:	bf00      	nop
 8011328:	e002      	b.n	8011330 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801132a:	bf00      	nop
 801132c:	e000      	b.n	8011330 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801132e:	bf00      	nop
		}
	}

	return val;
 8011330:	697b      	ldr	r3, [r7, #20]
}
 8011332:	4618      	mov	r0, r3
 8011334:	3718      	adds	r7, #24
 8011336:	46bd      	mov	sp, r7
 8011338:	bd80      	pop	{r7, pc}

0801133a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801133a:	b590      	push	{r4, r7, lr}
 801133c:	b089      	sub	sp, #36	; 0x24
 801133e:	af00      	add	r7, sp, #0
 8011340:	60f8      	str	r0, [r7, #12]
 8011342:	60b9      	str	r1, [r7, #8]
 8011344:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011346:	2302      	movs	r3, #2
 8011348:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801134a:	68bb      	ldr	r3, [r7, #8]
 801134c:	2b01      	cmp	r3, #1
 801134e:	f240 8102 	bls.w	8011556 <put_fat+0x21c>
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	6a1b      	ldr	r3, [r3, #32]
 8011356:	68ba      	ldr	r2, [r7, #8]
 8011358:	429a      	cmp	r2, r3
 801135a:	f080 80fc 	bcs.w	8011556 <put_fat+0x21c>
		switch (fs->fs_type) {
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	781b      	ldrb	r3, [r3, #0]
 8011362:	2b03      	cmp	r3, #3
 8011364:	f000 80b6 	beq.w	80114d4 <put_fat+0x19a>
 8011368:	2b03      	cmp	r3, #3
 801136a:	f300 80fd 	bgt.w	8011568 <put_fat+0x22e>
 801136e:	2b01      	cmp	r3, #1
 8011370:	d003      	beq.n	801137a <put_fat+0x40>
 8011372:	2b02      	cmp	r3, #2
 8011374:	f000 8083 	beq.w	801147e <put_fat+0x144>
 8011378:	e0f6      	b.n	8011568 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	61bb      	str	r3, [r7, #24]
 801137e:	69bb      	ldr	r3, [r7, #24]
 8011380:	085b      	lsrs	r3, r3, #1
 8011382:	69ba      	ldr	r2, [r7, #24]
 8011384:	4413      	add	r3, r2
 8011386:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	899b      	ldrh	r3, [r3, #12]
 8011390:	4619      	mov	r1, r3
 8011392:	69bb      	ldr	r3, [r7, #24]
 8011394:	fbb3 f3f1 	udiv	r3, r3, r1
 8011398:	4413      	add	r3, r2
 801139a:	4619      	mov	r1, r3
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	f7ff fe3b 	bl	8011018 <move_window>
 80113a2:	4603      	mov	r3, r0
 80113a4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80113a6:	7ffb      	ldrb	r3, [r7, #31]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	f040 80d6 	bne.w	801155a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80113b4:	69bb      	ldr	r3, [r7, #24]
 80113b6:	1c5a      	adds	r2, r3, #1
 80113b8:	61ba      	str	r2, [r7, #24]
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	8992      	ldrh	r2, [r2, #12]
 80113be:	fbb3 f0f2 	udiv	r0, r3, r2
 80113c2:	fb02 f200 	mul.w	r2, r2, r0
 80113c6:	1a9b      	subs	r3, r3, r2
 80113c8:	440b      	add	r3, r1
 80113ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	f003 0301 	and.w	r3, r3, #1
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d00d      	beq.n	80113f2 <put_fat+0xb8>
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	b25b      	sxtb	r3, r3
 80113dc:	f003 030f 	and.w	r3, r3, #15
 80113e0:	b25a      	sxtb	r2, r3
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	011b      	lsls	r3, r3, #4
 80113e8:	b25b      	sxtb	r3, r3
 80113ea:	4313      	orrs	r3, r2
 80113ec:	b25b      	sxtb	r3, r3
 80113ee:	b2db      	uxtb	r3, r3
 80113f0:	e001      	b.n	80113f6 <put_fat+0xbc>
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	697a      	ldr	r2, [r7, #20]
 80113f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	2201      	movs	r2, #1
 80113fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	899b      	ldrh	r3, [r3, #12]
 8011408:	4619      	mov	r1, r3
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011410:	4413      	add	r3, r2
 8011412:	4619      	mov	r1, r3
 8011414:	68f8      	ldr	r0, [r7, #12]
 8011416:	f7ff fdff 	bl	8011018 <move_window>
 801141a:	4603      	mov	r3, r0
 801141c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801141e:	7ffb      	ldrb	r3, [r7, #31]
 8011420:	2b00      	cmp	r3, #0
 8011422:	f040 809c 	bne.w	801155e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	899b      	ldrh	r3, [r3, #12]
 8011430:	461a      	mov	r2, r3
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	fbb3 f0f2 	udiv	r0, r3, r2
 8011438:	fb02 f200 	mul.w	r2, r2, r0
 801143c:	1a9b      	subs	r3, r3, r2
 801143e:	440b      	add	r3, r1
 8011440:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	f003 0301 	and.w	r3, r3, #1
 8011448:	2b00      	cmp	r3, #0
 801144a:	d003      	beq.n	8011454 <put_fat+0x11a>
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	091b      	lsrs	r3, r3, #4
 8011450:	b2db      	uxtb	r3, r3
 8011452:	e00e      	b.n	8011472 <put_fat+0x138>
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	b25b      	sxtb	r3, r3
 801145a:	f023 030f 	bic.w	r3, r3, #15
 801145e:	b25a      	sxtb	r2, r3
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	0a1b      	lsrs	r3, r3, #8
 8011464:	b25b      	sxtb	r3, r3
 8011466:	f003 030f 	and.w	r3, r3, #15
 801146a:	b25b      	sxtb	r3, r3
 801146c:	4313      	orrs	r3, r2
 801146e:	b25b      	sxtb	r3, r3
 8011470:	b2db      	uxtb	r3, r3
 8011472:	697a      	ldr	r2, [r7, #20]
 8011474:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	2201      	movs	r2, #1
 801147a:	70da      	strb	r2, [r3, #3]
			break;
 801147c:	e074      	b.n	8011568 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	899b      	ldrh	r3, [r3, #12]
 8011486:	085b      	lsrs	r3, r3, #1
 8011488:	b29b      	uxth	r3, r3
 801148a:	4619      	mov	r1, r3
 801148c:	68bb      	ldr	r3, [r7, #8]
 801148e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011492:	4413      	add	r3, r2
 8011494:	4619      	mov	r1, r3
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f7ff fdbe 	bl	8011018 <move_window>
 801149c:	4603      	mov	r3, r0
 801149e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114a0:	7ffb      	ldrb	r3, [r7, #31]
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d15d      	bne.n	8011562 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	005b      	lsls	r3, r3, #1
 80114b0:	68fa      	ldr	r2, [r7, #12]
 80114b2:	8992      	ldrh	r2, [r2, #12]
 80114b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80114b8:	fb02 f200 	mul.w	r2, r2, r0
 80114bc:	1a9b      	subs	r3, r3, r2
 80114be:	440b      	add	r3, r1
 80114c0:	687a      	ldr	r2, [r7, #4]
 80114c2:	b292      	uxth	r2, r2
 80114c4:	4611      	mov	r1, r2
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7ff faff 	bl	8010aca <st_word>
			fs->wflag = 1;
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2201      	movs	r2, #1
 80114d0:	70da      	strb	r2, [r3, #3]
			break;
 80114d2:	e049      	b.n	8011568 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	899b      	ldrh	r3, [r3, #12]
 80114dc:	089b      	lsrs	r3, r3, #2
 80114de:	b29b      	uxth	r3, r3
 80114e0:	4619      	mov	r1, r3
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	fbb3 f3f1 	udiv	r3, r3, r1
 80114e8:	4413      	add	r3, r2
 80114ea:	4619      	mov	r1, r3
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f7ff fd93 	bl	8011018 <move_window>
 80114f2:	4603      	mov	r3, r0
 80114f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80114f6:	7ffb      	ldrb	r3, [r7, #31]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d134      	bne.n	8011566 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011508:	68bb      	ldr	r3, [r7, #8]
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	68fa      	ldr	r2, [r7, #12]
 801150e:	8992      	ldrh	r2, [r2, #12]
 8011510:	fbb3 f0f2 	udiv	r0, r3, r2
 8011514:	fb02 f200 	mul.w	r2, r2, r0
 8011518:	1a9b      	subs	r3, r3, r2
 801151a:	440b      	add	r3, r1
 801151c:	4618      	mov	r0, r3
 801151e:	f7ff fab1 	bl	8010a84 <ld_dword>
 8011522:	4603      	mov	r3, r0
 8011524:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011528:	4323      	orrs	r3, r4
 801152a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	009b      	lsls	r3, r3, #2
 8011536:	68fa      	ldr	r2, [r7, #12]
 8011538:	8992      	ldrh	r2, [r2, #12]
 801153a:	fbb3 f0f2 	udiv	r0, r3, r2
 801153e:	fb02 f200 	mul.w	r2, r2, r0
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	440b      	add	r3, r1
 8011546:	6879      	ldr	r1, [r7, #4]
 8011548:	4618      	mov	r0, r3
 801154a:	f7ff fad9 	bl	8010b00 <st_dword>
			fs->wflag = 1;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2201      	movs	r2, #1
 8011552:	70da      	strb	r2, [r3, #3]
			break;
 8011554:	e008      	b.n	8011568 <put_fat+0x22e>
		}
	}
 8011556:	bf00      	nop
 8011558:	e006      	b.n	8011568 <put_fat+0x22e>
			if (res != FR_OK) break;
 801155a:	bf00      	nop
 801155c:	e004      	b.n	8011568 <put_fat+0x22e>
			if (res != FR_OK) break;
 801155e:	bf00      	nop
 8011560:	e002      	b.n	8011568 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011562:	bf00      	nop
 8011564:	e000      	b.n	8011568 <put_fat+0x22e>
			if (res != FR_OK) break;
 8011566:	bf00      	nop
	return res;
 8011568:	7ffb      	ldrb	r3, [r7, #31]
}
 801156a:	4618      	mov	r0, r3
 801156c:	3724      	adds	r7, #36	; 0x24
 801156e:	46bd      	mov	sp, r7
 8011570:	bd90      	pop	{r4, r7, pc}

08011572 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b088      	sub	sp, #32
 8011576:	af00      	add	r7, sp, #0
 8011578:	60f8      	str	r0, [r7, #12]
 801157a:	60b9      	str	r1, [r7, #8]
 801157c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801157e:	2300      	movs	r3, #0
 8011580:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	2b01      	cmp	r3, #1
 801158c:	d904      	bls.n	8011598 <remove_chain+0x26>
 801158e:	69bb      	ldr	r3, [r7, #24]
 8011590:	6a1b      	ldr	r3, [r3, #32]
 8011592:	68ba      	ldr	r2, [r7, #8]
 8011594:	429a      	cmp	r2, r3
 8011596:	d301      	bcc.n	801159c <remove_chain+0x2a>
 8011598:	2302      	movs	r3, #2
 801159a:	e04b      	b.n	8011634 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d00c      	beq.n	80115bc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80115a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80115a6:	6879      	ldr	r1, [r7, #4]
 80115a8:	69b8      	ldr	r0, [r7, #24]
 80115aa:	f7ff fec6 	bl	801133a <put_fat>
 80115ae:	4603      	mov	r3, r0
 80115b0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80115b2:	7ffb      	ldrb	r3, [r7, #31]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d001      	beq.n	80115bc <remove_chain+0x4a>
 80115b8:	7ffb      	ldrb	r3, [r7, #31]
 80115ba:	e03b      	b.n	8011634 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80115bc:	68b9      	ldr	r1, [r7, #8]
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	f7ff fde7 	bl	8011192 <get_fat>
 80115c4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80115c6:	697b      	ldr	r3, [r7, #20]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d031      	beq.n	8011630 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80115cc:	697b      	ldr	r3, [r7, #20]
 80115ce:	2b01      	cmp	r3, #1
 80115d0:	d101      	bne.n	80115d6 <remove_chain+0x64>
 80115d2:	2302      	movs	r3, #2
 80115d4:	e02e      	b.n	8011634 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80115dc:	d101      	bne.n	80115e2 <remove_chain+0x70>
 80115de:	2301      	movs	r3, #1
 80115e0:	e028      	b.n	8011634 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80115e2:	2200      	movs	r2, #0
 80115e4:	68b9      	ldr	r1, [r7, #8]
 80115e6:	69b8      	ldr	r0, [r7, #24]
 80115e8:	f7ff fea7 	bl	801133a <put_fat>
 80115ec:	4603      	mov	r3, r0
 80115ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80115f0:	7ffb      	ldrb	r3, [r7, #31]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d001      	beq.n	80115fa <remove_chain+0x88>
 80115f6:	7ffb      	ldrb	r3, [r7, #31]
 80115f8:	e01c      	b.n	8011634 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80115fa:	69bb      	ldr	r3, [r7, #24]
 80115fc:	69da      	ldr	r2, [r3, #28]
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	6a1b      	ldr	r3, [r3, #32]
 8011602:	3b02      	subs	r3, #2
 8011604:	429a      	cmp	r2, r3
 8011606:	d20b      	bcs.n	8011620 <remove_chain+0xae>
			fs->free_clst++;
 8011608:	69bb      	ldr	r3, [r7, #24]
 801160a:	69db      	ldr	r3, [r3, #28]
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	69bb      	ldr	r3, [r7, #24]
 8011610:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	791b      	ldrb	r3, [r3, #4]
 8011616:	f043 0301 	orr.w	r3, r3, #1
 801161a:	b2da      	uxtb	r2, r3
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	6a1b      	ldr	r3, [r3, #32]
 8011628:	68ba      	ldr	r2, [r7, #8]
 801162a:	429a      	cmp	r2, r3
 801162c:	d3c6      	bcc.n	80115bc <remove_chain+0x4a>
 801162e:	e000      	b.n	8011632 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011630:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011632:	2300      	movs	r3, #0
}
 8011634:	4618      	mov	r0, r3
 8011636:	3720      	adds	r7, #32
 8011638:	46bd      	mov	sp, r7
 801163a:	bd80      	pop	{r7, pc}

0801163c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b088      	sub	sp, #32
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d10d      	bne.n	801166e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	699b      	ldr	r3, [r3, #24]
 8011656:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011658:	69bb      	ldr	r3, [r7, #24]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d004      	beq.n	8011668 <create_chain+0x2c>
 801165e:	693b      	ldr	r3, [r7, #16]
 8011660:	6a1b      	ldr	r3, [r3, #32]
 8011662:	69ba      	ldr	r2, [r7, #24]
 8011664:	429a      	cmp	r2, r3
 8011666:	d31b      	bcc.n	80116a0 <create_chain+0x64>
 8011668:	2301      	movs	r3, #1
 801166a:	61bb      	str	r3, [r7, #24]
 801166c:	e018      	b.n	80116a0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f7ff fd8e 	bl	8011192 <get_fat>
 8011676:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2b01      	cmp	r3, #1
 801167c:	d801      	bhi.n	8011682 <create_chain+0x46>
 801167e:	2301      	movs	r3, #1
 8011680:	e070      	b.n	8011764 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011688:	d101      	bne.n	801168e <create_chain+0x52>
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	e06a      	b.n	8011764 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	6a1b      	ldr	r3, [r3, #32]
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	429a      	cmp	r2, r3
 8011696:	d201      	bcs.n	801169c <create_chain+0x60>
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	e063      	b.n	8011764 <create_chain+0x128>
		scl = clst;
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80116a0:	69bb      	ldr	r3, [r7, #24]
 80116a2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80116a4:	69fb      	ldr	r3, [r7, #28]
 80116a6:	3301      	adds	r3, #1
 80116a8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	6a1b      	ldr	r3, [r3, #32]
 80116ae:	69fa      	ldr	r2, [r7, #28]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	d307      	bcc.n	80116c4 <create_chain+0x88>
				ncl = 2;
 80116b4:	2302      	movs	r3, #2
 80116b6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80116b8:	69fa      	ldr	r2, [r7, #28]
 80116ba:	69bb      	ldr	r3, [r7, #24]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d901      	bls.n	80116c4 <create_chain+0x88>
 80116c0:	2300      	movs	r3, #0
 80116c2:	e04f      	b.n	8011764 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80116c4:	69f9      	ldr	r1, [r7, #28]
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f7ff fd63 	bl	8011192 <get_fat>
 80116cc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d00e      	beq.n	80116f2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2b01      	cmp	r3, #1
 80116d8:	d003      	beq.n	80116e2 <create_chain+0xa6>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116e0:	d101      	bne.n	80116e6 <create_chain+0xaa>
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	e03e      	b.n	8011764 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80116e6:	69fa      	ldr	r2, [r7, #28]
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	429a      	cmp	r2, r3
 80116ec:	d1da      	bne.n	80116a4 <create_chain+0x68>
 80116ee:	2300      	movs	r3, #0
 80116f0:	e038      	b.n	8011764 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80116f2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80116f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116f8:	69f9      	ldr	r1, [r7, #28]
 80116fa:	6938      	ldr	r0, [r7, #16]
 80116fc:	f7ff fe1d 	bl	801133a <put_fat>
 8011700:	4603      	mov	r3, r0
 8011702:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011704:	7dfb      	ldrb	r3, [r7, #23]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d109      	bne.n	801171e <create_chain+0xe2>
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d006      	beq.n	801171e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011710:	69fa      	ldr	r2, [r7, #28]
 8011712:	6839      	ldr	r1, [r7, #0]
 8011714:	6938      	ldr	r0, [r7, #16]
 8011716:	f7ff fe10 	bl	801133a <put_fat>
 801171a:	4603      	mov	r3, r0
 801171c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801171e:	7dfb      	ldrb	r3, [r7, #23]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d116      	bne.n	8011752 <create_chain+0x116>
		fs->last_clst = ncl;
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	69fa      	ldr	r2, [r7, #28]
 8011728:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	69da      	ldr	r2, [r3, #28]
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	6a1b      	ldr	r3, [r3, #32]
 8011732:	3b02      	subs	r3, #2
 8011734:	429a      	cmp	r2, r3
 8011736:	d804      	bhi.n	8011742 <create_chain+0x106>
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	69db      	ldr	r3, [r3, #28]
 801173c:	1e5a      	subs	r2, r3, #1
 801173e:	693b      	ldr	r3, [r7, #16]
 8011740:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8011742:	693b      	ldr	r3, [r7, #16]
 8011744:	791b      	ldrb	r3, [r3, #4]
 8011746:	f043 0301 	orr.w	r3, r3, #1
 801174a:	b2da      	uxtb	r2, r3
 801174c:	693b      	ldr	r3, [r7, #16]
 801174e:	711a      	strb	r2, [r3, #4]
 8011750:	e007      	b.n	8011762 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011752:	7dfb      	ldrb	r3, [r7, #23]
 8011754:	2b01      	cmp	r3, #1
 8011756:	d102      	bne.n	801175e <create_chain+0x122>
 8011758:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801175c:	e000      	b.n	8011760 <create_chain+0x124>
 801175e:	2301      	movs	r3, #1
 8011760:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011762:	69fb      	ldr	r3, [r7, #28]
}
 8011764:	4618      	mov	r0, r3
 8011766:	3720      	adds	r7, #32
 8011768:	46bd      	mov	sp, r7
 801176a:	bd80      	pop	{r7, pc}

0801176c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801176c:	b480      	push	{r7}
 801176e:	b087      	sub	sp, #28
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
 8011774:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011780:	3304      	adds	r3, #4
 8011782:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	899b      	ldrh	r3, [r3, #12]
 8011788:	461a      	mov	r2, r3
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	8952      	ldrh	r2, [r2, #10]
 8011794:	fbb3 f3f2 	udiv	r3, r3, r2
 8011798:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801179a:	693b      	ldr	r3, [r7, #16]
 801179c:	1d1a      	adds	r2, r3, #4
 801179e:	613a      	str	r2, [r7, #16]
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d101      	bne.n	80117ae <clmt_clust+0x42>
 80117aa:	2300      	movs	r3, #0
 80117ac:	e010      	b.n	80117d0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80117ae:	697a      	ldr	r2, [r7, #20]
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	429a      	cmp	r2, r3
 80117b4:	d307      	bcc.n	80117c6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80117b6:	697a      	ldr	r2, [r7, #20]
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	617b      	str	r3, [r7, #20]
 80117be:	693b      	ldr	r3, [r7, #16]
 80117c0:	3304      	adds	r3, #4
 80117c2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80117c4:	e7e9      	b.n	801179a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80117c6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	681a      	ldr	r2, [r3, #0]
 80117cc:	697b      	ldr	r3, [r7, #20]
 80117ce:	4413      	add	r3, r2
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	371c      	adds	r7, #28
 80117d4:	46bd      	mov	sp, r7
 80117d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117da:	4770      	bx	lr

080117dc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b086      	sub	sp, #24
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
 80117e4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80117f2:	d204      	bcs.n	80117fe <dir_sdi+0x22>
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	f003 031f 	and.w	r3, r3, #31
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d001      	beq.n	8011802 <dir_sdi+0x26>
		return FR_INT_ERR;
 80117fe:	2302      	movs	r3, #2
 8011800:	e071      	b.n	80118e6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	683a      	ldr	r2, [r7, #0]
 8011806:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d106      	bne.n	8011822 <dir_sdi+0x46>
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b02      	cmp	r3, #2
 801181a:	d902      	bls.n	8011822 <dir_sdi+0x46>
		clst = fs->dirbase;
 801181c:	693b      	ldr	r3, [r7, #16]
 801181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011820:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d10c      	bne.n	8011842 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011828:	683b      	ldr	r3, [r7, #0]
 801182a:	095b      	lsrs	r3, r3, #5
 801182c:	693a      	ldr	r2, [r7, #16]
 801182e:	8912      	ldrh	r2, [r2, #8]
 8011830:	4293      	cmp	r3, r2
 8011832:	d301      	bcc.n	8011838 <dir_sdi+0x5c>
 8011834:	2302      	movs	r3, #2
 8011836:	e056      	b.n	80118e6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	61da      	str	r2, [r3, #28]
 8011840:	e02d      	b.n	801189e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	895b      	ldrh	r3, [r3, #10]
 8011846:	461a      	mov	r2, r3
 8011848:	693b      	ldr	r3, [r7, #16]
 801184a:	899b      	ldrh	r3, [r3, #12]
 801184c:	fb03 f302 	mul.w	r3, r3, r2
 8011850:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011852:	e019      	b.n	8011888 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6979      	ldr	r1, [r7, #20]
 8011858:	4618      	mov	r0, r3
 801185a:	f7ff fc9a 	bl	8011192 <get_fat>
 801185e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011860:	697b      	ldr	r3, [r7, #20]
 8011862:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011866:	d101      	bne.n	801186c <dir_sdi+0x90>
 8011868:	2301      	movs	r3, #1
 801186a:	e03c      	b.n	80118e6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	2b01      	cmp	r3, #1
 8011870:	d904      	bls.n	801187c <dir_sdi+0xa0>
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	6a1b      	ldr	r3, [r3, #32]
 8011876:	697a      	ldr	r2, [r7, #20]
 8011878:	429a      	cmp	r2, r3
 801187a:	d301      	bcc.n	8011880 <dir_sdi+0xa4>
 801187c:	2302      	movs	r3, #2
 801187e:	e032      	b.n	80118e6 <dir_sdi+0x10a>
			ofs -= csz;
 8011880:	683a      	ldr	r2, [r7, #0]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	1ad3      	subs	r3, r2, r3
 8011886:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011888:	683a      	ldr	r2, [r7, #0]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	429a      	cmp	r2, r3
 801188e:	d2e1      	bcs.n	8011854 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011890:	6979      	ldr	r1, [r7, #20]
 8011892:	6938      	ldr	r0, [r7, #16]
 8011894:	f7ff fc5e 	bl	8011154 <clust2sect>
 8011898:	4602      	mov	r2, r0
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	697a      	ldr	r2, [r7, #20]
 80118a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	69db      	ldr	r3, [r3, #28]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d101      	bne.n	80118b0 <dir_sdi+0xd4>
 80118ac:	2302      	movs	r3, #2
 80118ae:	e01a      	b.n	80118e6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	69da      	ldr	r2, [r3, #28]
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	899b      	ldrh	r3, [r3, #12]
 80118b8:	4619      	mov	r1, r3
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80118c0:	441a      	add	r2, r3
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80118c6:	693b      	ldr	r3, [r7, #16]
 80118c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80118cc:	693b      	ldr	r3, [r7, #16]
 80118ce:	899b      	ldrh	r3, [r3, #12]
 80118d0:	461a      	mov	r2, r3
 80118d2:	683b      	ldr	r3, [r7, #0]
 80118d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80118d8:	fb02 f200 	mul.w	r2, r2, r0
 80118dc:	1a9b      	subs	r3, r3, r2
 80118de:	18ca      	adds	r2, r1, r3
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80118e4:	2300      	movs	r3, #0
}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3718      	adds	r7, #24
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80118ee:	b580      	push	{r7, lr}
 80118f0:	b086      	sub	sp, #24
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
 80118f6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	695b      	ldr	r3, [r3, #20]
 8011902:	3320      	adds	r3, #32
 8011904:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d003      	beq.n	8011916 <dir_next+0x28>
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011914:	d301      	bcc.n	801191a <dir_next+0x2c>
 8011916:	2304      	movs	r3, #4
 8011918:	e0bb      	b.n	8011a92 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	899b      	ldrh	r3, [r3, #12]
 801191e:	461a      	mov	r2, r3
 8011920:	68bb      	ldr	r3, [r7, #8]
 8011922:	fbb3 f1f2 	udiv	r1, r3, r2
 8011926:	fb02 f201 	mul.w	r2, r2, r1
 801192a:	1a9b      	subs	r3, r3, r2
 801192c:	2b00      	cmp	r3, #0
 801192e:	f040 809d 	bne.w	8011a6c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	69db      	ldr	r3, [r3, #28]
 8011936:	1c5a      	adds	r2, r3, #1
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	699b      	ldr	r3, [r3, #24]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d10b      	bne.n	801195c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	095b      	lsrs	r3, r3, #5
 8011948:	68fa      	ldr	r2, [r7, #12]
 801194a:	8912      	ldrh	r2, [r2, #8]
 801194c:	4293      	cmp	r3, r2
 801194e:	f0c0 808d 	bcc.w	8011a6c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	2200      	movs	r2, #0
 8011956:	61da      	str	r2, [r3, #28]
 8011958:	2304      	movs	r3, #4
 801195a:	e09a      	b.n	8011a92 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	899b      	ldrh	r3, [r3, #12]
 8011960:	461a      	mov	r2, r3
 8011962:	68bb      	ldr	r3, [r7, #8]
 8011964:	fbb3 f3f2 	udiv	r3, r3, r2
 8011968:	68fa      	ldr	r2, [r7, #12]
 801196a:	8952      	ldrh	r2, [r2, #10]
 801196c:	3a01      	subs	r2, #1
 801196e:	4013      	ands	r3, r2
 8011970:	2b00      	cmp	r3, #0
 8011972:	d17b      	bne.n	8011a6c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011974:	687a      	ldr	r2, [r7, #4]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	699b      	ldr	r3, [r3, #24]
 801197a:	4619      	mov	r1, r3
 801197c:	4610      	mov	r0, r2
 801197e:	f7ff fc08 	bl	8011192 <get_fat>
 8011982:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	2b01      	cmp	r3, #1
 8011988:	d801      	bhi.n	801198e <dir_next+0xa0>
 801198a:	2302      	movs	r3, #2
 801198c:	e081      	b.n	8011a92 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011994:	d101      	bne.n	801199a <dir_next+0xac>
 8011996:	2301      	movs	r3, #1
 8011998:	e07b      	b.n	8011a92 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	6a1b      	ldr	r3, [r3, #32]
 801199e:	697a      	ldr	r2, [r7, #20]
 80119a0:	429a      	cmp	r2, r3
 80119a2:	d359      	bcc.n	8011a58 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d104      	bne.n	80119b4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2200      	movs	r2, #0
 80119ae:	61da      	str	r2, [r3, #28]
 80119b0:	2304      	movs	r3, #4
 80119b2:	e06e      	b.n	8011a92 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80119b4:	687a      	ldr	r2, [r7, #4]
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	699b      	ldr	r3, [r3, #24]
 80119ba:	4619      	mov	r1, r3
 80119bc:	4610      	mov	r0, r2
 80119be:	f7ff fe3d 	bl	801163c <create_chain>
 80119c2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d101      	bne.n	80119ce <dir_next+0xe0>
 80119ca:	2307      	movs	r3, #7
 80119cc:	e061      	b.n	8011a92 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	2b01      	cmp	r3, #1
 80119d2:	d101      	bne.n	80119d8 <dir_next+0xea>
 80119d4:	2302      	movs	r3, #2
 80119d6:	e05c      	b.n	8011a92 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119de:	d101      	bne.n	80119e4 <dir_next+0xf6>
 80119e0:	2301      	movs	r3, #1
 80119e2:	e056      	b.n	8011a92 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80119e4:	68f8      	ldr	r0, [r7, #12]
 80119e6:	f7ff fad3 	bl	8010f90 <sync_window>
 80119ea:	4603      	mov	r3, r0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d001      	beq.n	80119f4 <dir_next+0x106>
 80119f0:	2301      	movs	r3, #1
 80119f2:	e04e      	b.n	8011a92 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	899b      	ldrh	r3, [r3, #12]
 80119fe:	461a      	mov	r2, r3
 8011a00:	2100      	movs	r1, #0
 8011a02:	f7ff f8ca 	bl	8010b9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a06:	2300      	movs	r3, #0
 8011a08:	613b      	str	r3, [r7, #16]
 8011a0a:	6979      	ldr	r1, [r7, #20]
 8011a0c:	68f8      	ldr	r0, [r7, #12]
 8011a0e:	f7ff fba1 	bl	8011154 <clust2sect>
 8011a12:	4602      	mov	r2, r0
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	639a      	str	r2, [r3, #56]	; 0x38
 8011a18:	e012      	b.n	8011a40 <dir_next+0x152>
						fs->wflag = 1;
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2201      	movs	r2, #1
 8011a1e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f7ff fab5 	bl	8010f90 <sync_window>
 8011a26:	4603      	mov	r3, r0
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d001      	beq.n	8011a30 <dir_next+0x142>
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	e030      	b.n	8011a92 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	3301      	adds	r3, #1
 8011a34:	613b      	str	r3, [r7, #16]
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a3a:	1c5a      	adds	r2, r3, #1
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	639a      	str	r2, [r3, #56]	; 0x38
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	895b      	ldrh	r3, [r3, #10]
 8011a44:	461a      	mov	r2, r3
 8011a46:	693b      	ldr	r3, [r7, #16]
 8011a48:	4293      	cmp	r3, r2
 8011a4a:	d3e6      	bcc.n	8011a1a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	1ad2      	subs	r2, r2, r3
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	697a      	ldr	r2, [r7, #20]
 8011a5c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011a5e:	6979      	ldr	r1, [r7, #20]
 8011a60:	68f8      	ldr	r0, [r7, #12]
 8011a62:	f7ff fb77 	bl	8011154 <clust2sect>
 8011a66:	4602      	mov	r2, r0
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	68ba      	ldr	r2, [r7, #8]
 8011a70:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	899b      	ldrh	r3, [r3, #12]
 8011a7c:	461a      	mov	r2, r3
 8011a7e:	68bb      	ldr	r3, [r7, #8]
 8011a80:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a84:	fb02 f200 	mul.w	r2, r2, r0
 8011a88:	1a9b      	subs	r3, r3, r2
 8011a8a:	18ca      	adds	r2, r1, r3
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b086      	sub	sp, #24
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011aaa:	2100      	movs	r1, #0
 8011aac:	6878      	ldr	r0, [r7, #4]
 8011aae:	f7ff fe95 	bl	80117dc <dir_sdi>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011ab6:	7dfb      	ldrb	r3, [r7, #23]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d12b      	bne.n	8011b14 <dir_alloc+0x7a>
		n = 0;
 8011abc:	2300      	movs	r3, #0
 8011abe:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	69db      	ldr	r3, [r3, #28]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	68f8      	ldr	r0, [r7, #12]
 8011ac8:	f7ff faa6 	bl	8011018 <move_window>
 8011acc:	4603      	mov	r3, r0
 8011ace:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011ad0:	7dfb      	ldrb	r3, [r7, #23]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d11d      	bne.n	8011b12 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	6a1b      	ldr	r3, [r3, #32]
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	2be5      	cmp	r3, #229	; 0xe5
 8011ade:	d004      	beq.n	8011aea <dir_alloc+0x50>
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a1b      	ldr	r3, [r3, #32]
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d107      	bne.n	8011afa <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	3301      	adds	r3, #1
 8011aee:	613b      	str	r3, [r7, #16]
 8011af0:	693a      	ldr	r2, [r7, #16]
 8011af2:	683b      	ldr	r3, [r7, #0]
 8011af4:	429a      	cmp	r2, r3
 8011af6:	d102      	bne.n	8011afe <dir_alloc+0x64>
 8011af8:	e00c      	b.n	8011b14 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011afa:	2300      	movs	r3, #0
 8011afc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011afe:	2101      	movs	r1, #1
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f7ff fef4 	bl	80118ee <dir_next>
 8011b06:	4603      	mov	r3, r0
 8011b08:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d0d7      	beq.n	8011ac0 <dir_alloc+0x26>
 8011b10:	e000      	b.n	8011b14 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011b12:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011b14:	7dfb      	ldrb	r3, [r7, #23]
 8011b16:	2b04      	cmp	r3, #4
 8011b18:	d101      	bne.n	8011b1e <dir_alloc+0x84>
 8011b1a:	2307      	movs	r3, #7
 8011b1c:	75fb      	strb	r3, [r7, #23]
	return res;
 8011b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3718      	adds	r7, #24
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}

08011b28 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	331a      	adds	r3, #26
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7fe ff8c 	bl	8010a54 <ld_word>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	2b03      	cmp	r3, #3
 8011b46:	d109      	bne.n	8011b5c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	3314      	adds	r3, #20
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7fe ff81 	bl	8010a54 <ld_word>
 8011b52:	4603      	mov	r3, r0
 8011b54:	041b      	lsls	r3, r3, #16
 8011b56:	68fa      	ldr	r2, [r7, #12]
 8011b58:	4313      	orrs	r3, r2
 8011b5a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011b5c:	68fb      	ldr	r3, [r7, #12]
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	3710      	adds	r7, #16
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}

08011b66 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	60f8      	str	r0, [r7, #12]
 8011b6e:	60b9      	str	r1, [r7, #8]
 8011b70:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	331a      	adds	r3, #26
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	b292      	uxth	r2, r2
 8011b7a:	4611      	mov	r1, r2
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	f7fe ffa4 	bl	8010aca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	781b      	ldrb	r3, [r3, #0]
 8011b86:	2b03      	cmp	r3, #3
 8011b88:	d109      	bne.n	8011b9e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	f103 0214 	add.w	r2, r3, #20
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	0c1b      	lsrs	r3, r3, #16
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	4619      	mov	r1, r3
 8011b98:	4610      	mov	r0, r2
 8011b9a:	f7fe ff96 	bl	8010aca <st_word>
	}
}
 8011b9e:	bf00      	nop
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
	...

08011ba8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8011ba8:	b590      	push	{r4, r7, lr}
 8011baa:	b087      	sub	sp, #28
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	331a      	adds	r3, #26
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f7fe ff4c 	bl	8010a54 <ld_word>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <cmp_lfn+0x1e>
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	e059      	b.n	8011c7a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8011bc6:	683b      	ldr	r3, [r7, #0]
 8011bc8:	781b      	ldrb	r3, [r3, #0]
 8011bca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011bce:	1e5a      	subs	r2, r3, #1
 8011bd0:	4613      	mov	r3, r2
 8011bd2:	005b      	lsls	r3, r3, #1
 8011bd4:	4413      	add	r3, r2
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	4413      	add	r3, r2
 8011bda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011bdc:	2301      	movs	r3, #1
 8011bde:	81fb      	strh	r3, [r7, #14]
 8011be0:	2300      	movs	r3, #0
 8011be2:	613b      	str	r3, [r7, #16]
 8011be4:	e033      	b.n	8011c4e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8011be6:	4a27      	ldr	r2, [pc, #156]	; (8011c84 <cmp_lfn+0xdc>)
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	4413      	add	r3, r2
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	683b      	ldr	r3, [r7, #0]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	4618      	mov	r0, r3
 8011bf6:	f7fe ff2d 	bl	8010a54 <ld_word>
 8011bfa:	4603      	mov	r3, r0
 8011bfc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8011bfe:	89fb      	ldrh	r3, [r7, #14]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d01a      	beq.n	8011c3a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8011c04:	697b      	ldr	r3, [r7, #20]
 8011c06:	2bfe      	cmp	r3, #254	; 0xfe
 8011c08:	d812      	bhi.n	8011c30 <cmp_lfn+0x88>
 8011c0a:	89bb      	ldrh	r3, [r7, #12]
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f002 f909 	bl	8013e24 <ff_wtoupper>
 8011c12:	4603      	mov	r3, r0
 8011c14:	461c      	mov	r4, r3
 8011c16:	697b      	ldr	r3, [r7, #20]
 8011c18:	1c5a      	adds	r2, r3, #1
 8011c1a:	617a      	str	r2, [r7, #20]
 8011c1c:	005b      	lsls	r3, r3, #1
 8011c1e:	687a      	ldr	r2, [r7, #4]
 8011c20:	4413      	add	r3, r2
 8011c22:	881b      	ldrh	r3, [r3, #0]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f002 f8fd 	bl	8013e24 <ff_wtoupper>
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	429c      	cmp	r4, r3
 8011c2e:	d001      	beq.n	8011c34 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8011c30:	2300      	movs	r3, #0
 8011c32:	e022      	b.n	8011c7a <cmp_lfn+0xd2>
			}
			wc = uc;
 8011c34:	89bb      	ldrh	r3, [r7, #12]
 8011c36:	81fb      	strh	r3, [r7, #14]
 8011c38:	e006      	b.n	8011c48 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011c3a:	89bb      	ldrh	r3, [r7, #12]
 8011c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d001      	beq.n	8011c48 <cmp_lfn+0xa0>
 8011c44:	2300      	movs	r3, #0
 8011c46:	e018      	b.n	8011c7a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	3301      	adds	r3, #1
 8011c4c:	613b      	str	r3, [r7, #16]
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	2b0c      	cmp	r3, #12
 8011c52:	d9c8      	bls.n	8011be6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d00b      	beq.n	8011c78 <cmp_lfn+0xd0>
 8011c60:	89fb      	ldrh	r3, [r7, #14]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d008      	beq.n	8011c78 <cmp_lfn+0xd0>
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	005b      	lsls	r3, r3, #1
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	4413      	add	r3, r2
 8011c6e:	881b      	ldrh	r3, [r3, #0]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <cmp_lfn+0xd0>
 8011c74:	2300      	movs	r3, #0
 8011c76:	e000      	b.n	8011c7a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8011c78:	2301      	movs	r3, #1
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	371c      	adds	r7, #28
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd90      	pop	{r4, r7, pc}
 8011c82:	bf00      	nop
 8011c84:	080206cc 	.word	0x080206cc

08011c88 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b088      	sub	sp, #32
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	4611      	mov	r1, r2
 8011c94:	461a      	mov	r2, r3
 8011c96:	460b      	mov	r3, r1
 8011c98:	71fb      	strb	r3, [r7, #7]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	330d      	adds	r3, #13
 8011ca2:	79ba      	ldrb	r2, [r7, #6]
 8011ca4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	330b      	adds	r3, #11
 8011caa:	220f      	movs	r2, #15
 8011cac:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8011cae:	68bb      	ldr	r3, [r7, #8]
 8011cb0:	330c      	adds	r3, #12
 8011cb2:	2200      	movs	r2, #0
 8011cb4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	331a      	adds	r3, #26
 8011cba:	2100      	movs	r1, #0
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fe ff04 	bl	8010aca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8011cc2:	79fb      	ldrb	r3, [r7, #7]
 8011cc4:	1e5a      	subs	r2, r3, #1
 8011cc6:	4613      	mov	r3, r2
 8011cc8:	005b      	lsls	r3, r3, #1
 8011cca:	4413      	add	r3, r2
 8011ccc:	009b      	lsls	r3, r3, #2
 8011cce:	4413      	add	r3, r2
 8011cd0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	82fb      	strh	r3, [r7, #22]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8011cda:	8afb      	ldrh	r3, [r7, #22]
 8011cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d007      	beq.n	8011cf4 <put_lfn+0x6c>
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	1c5a      	adds	r2, r3, #1
 8011ce8:	61fa      	str	r2, [r7, #28]
 8011cea:	005b      	lsls	r3, r3, #1
 8011cec:	68fa      	ldr	r2, [r7, #12]
 8011cee:	4413      	add	r3, r2
 8011cf0:	881b      	ldrh	r3, [r3, #0]
 8011cf2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8011cf4:	4a17      	ldr	r2, [pc, #92]	; (8011d54 <put_lfn+0xcc>)
 8011cf6:	69bb      	ldr	r3, [r7, #24]
 8011cf8:	4413      	add	r3, r2
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	461a      	mov	r2, r3
 8011cfe:	68bb      	ldr	r3, [r7, #8]
 8011d00:	4413      	add	r3, r2
 8011d02:	8afa      	ldrh	r2, [r7, #22]
 8011d04:	4611      	mov	r1, r2
 8011d06:	4618      	mov	r0, r3
 8011d08:	f7fe fedf 	bl	8010aca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8011d0c:	8afb      	ldrh	r3, [r7, #22]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d102      	bne.n	8011d18 <put_lfn+0x90>
 8011d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011d16:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8011d18:	69bb      	ldr	r3, [r7, #24]
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	61bb      	str	r3, [r7, #24]
 8011d1e:	69bb      	ldr	r3, [r7, #24]
 8011d20:	2b0c      	cmp	r3, #12
 8011d22:	d9da      	bls.n	8011cda <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8011d24:	8afb      	ldrh	r3, [r7, #22]
 8011d26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011d2a:	4293      	cmp	r3, r2
 8011d2c:	d006      	beq.n	8011d3c <put_lfn+0xb4>
 8011d2e:	69fb      	ldr	r3, [r7, #28]
 8011d30:	005b      	lsls	r3, r3, #1
 8011d32:	68fa      	ldr	r2, [r7, #12]
 8011d34:	4413      	add	r3, r2
 8011d36:	881b      	ldrh	r3, [r3, #0]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d103      	bne.n	8011d44 <put_lfn+0xbc>
 8011d3c:	79fb      	ldrb	r3, [r7, #7]
 8011d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d42:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8011d44:	68bb      	ldr	r3, [r7, #8]
 8011d46:	79fa      	ldrb	r2, [r7, #7]
 8011d48:	701a      	strb	r2, [r3, #0]
}
 8011d4a:	bf00      	nop
 8011d4c:	3720      	adds	r7, #32
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	080206cc 	.word	0x080206cc

08011d58 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b08c      	sub	sp, #48	; 0x30
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	60f8      	str	r0, [r7, #12]
 8011d60:	60b9      	str	r1, [r7, #8]
 8011d62:	607a      	str	r2, [r7, #4]
 8011d64:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8011d66:	220b      	movs	r2, #11
 8011d68:	68b9      	ldr	r1, [r7, #8]
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	f7fe fef4 	bl	8010b58 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8011d70:	683b      	ldr	r3, [r7, #0]
 8011d72:	2b05      	cmp	r3, #5
 8011d74:	d92b      	bls.n	8011dce <gen_numname+0x76>
		sr = seq;
 8011d76:	683b      	ldr	r3, [r7, #0]
 8011d78:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8011d7a:	e022      	b.n	8011dc2 <gen_numname+0x6a>
			wc = *lfn++;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	1c9a      	adds	r2, r3, #2
 8011d80:	607a      	str	r2, [r7, #4]
 8011d82:	881b      	ldrh	r3, [r3, #0]
 8011d84:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8011d86:	2300      	movs	r3, #0
 8011d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8011d8a:	e017      	b.n	8011dbc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8011d8c:	69fb      	ldr	r3, [r7, #28]
 8011d8e:	005a      	lsls	r2, r3, #1
 8011d90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d92:	f003 0301 	and.w	r3, r3, #1
 8011d96:	4413      	add	r3, r2
 8011d98:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8011d9a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011d9c:	085b      	lsrs	r3, r3, #1
 8011d9e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8011da0:	69fb      	ldr	r3, [r7, #28]
 8011da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d005      	beq.n	8011db6 <gen_numname+0x5e>
 8011daa:	69fb      	ldr	r3, [r7, #28]
 8011dac:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8011db0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8011db4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8011db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011db8:	3301      	adds	r3, #1
 8011dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	2b0f      	cmp	r3, #15
 8011dc0:	d9e4      	bls.n	8011d8c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	881b      	ldrh	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d1d8      	bne.n	8011d7c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8011dca:	69fb      	ldr	r3, [r7, #28]
 8011dcc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8011dce:	2307      	movs	r3, #7
 8011dd0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	b2db      	uxtb	r3, r3
 8011dd6:	f003 030f 	and.w	r3, r3, #15
 8011dda:	b2db      	uxtb	r3, r3
 8011ddc:	3330      	adds	r3, #48	; 0x30
 8011dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8011de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011de6:	2b39      	cmp	r3, #57	; 0x39
 8011de8:	d904      	bls.n	8011df4 <gen_numname+0x9c>
 8011dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dee:	3307      	adds	r3, #7
 8011df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8011df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df6:	1e5a      	subs	r2, r3, #1
 8011df8:	62ba      	str	r2, [r7, #40]	; 0x28
 8011dfa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011dfe:	4413      	add	r3, r2
 8011e00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011e04:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	091b      	lsrs	r3, r3, #4
 8011e0c:	603b      	str	r3, [r7, #0]
	} while (seq);
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1de      	bne.n	8011dd2 <gen_numname+0x7a>
	ns[i] = '~';
 8011e14:	f107 0214 	add.w	r2, r7, #20
 8011e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1a:	4413      	add	r3, r2
 8011e1c:	227e      	movs	r2, #126	; 0x7e
 8011e1e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8011e20:	2300      	movs	r3, #0
 8011e22:	627b      	str	r3, [r7, #36]	; 0x24
 8011e24:	e002      	b.n	8011e2c <gen_numname+0xd4>
 8011e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e28:	3301      	adds	r3, #1
 8011e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8011e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d205      	bcs.n	8011e40 <gen_numname+0xe8>
 8011e34:	68fa      	ldr	r2, [r7, #12]
 8011e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e38:	4413      	add	r3, r2
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	2b20      	cmp	r3, #32
 8011e3e:	d1f2      	bne.n	8011e26 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8011e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e42:	2b07      	cmp	r3, #7
 8011e44:	d808      	bhi.n	8011e58 <gen_numname+0x100>
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	1c5a      	adds	r2, r3, #1
 8011e4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8011e4c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8011e50:	4413      	add	r3, r2
 8011e52:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8011e56:	e000      	b.n	8011e5a <gen_numname+0x102>
 8011e58:	2120      	movs	r1, #32
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5c:	1c5a      	adds	r2, r3, #1
 8011e5e:	627a      	str	r2, [r7, #36]	; 0x24
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	4413      	add	r3, r2
 8011e64:	460a      	mov	r2, r1
 8011e66:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8011e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6a:	2b07      	cmp	r3, #7
 8011e6c:	d9e8      	bls.n	8011e40 <gen_numname+0xe8>
}
 8011e6e:	bf00      	nop
 8011e70:	bf00      	nop
 8011e72:	3730      	adds	r7, #48	; 0x30
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}

08011e78 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8011e80:	2300      	movs	r3, #0
 8011e82:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8011e84:	230b      	movs	r3, #11
 8011e86:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8011e88:	7bfb      	ldrb	r3, [r7, #15]
 8011e8a:	b2da      	uxtb	r2, r3
 8011e8c:	0852      	lsrs	r2, r2, #1
 8011e8e:	01db      	lsls	r3, r3, #7
 8011e90:	4313      	orrs	r3, r2
 8011e92:	b2da      	uxtb	r2, r3
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	1c59      	adds	r1, r3, #1
 8011e98:	6079      	str	r1, [r7, #4]
 8011e9a:	781b      	ldrb	r3, [r3, #0]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8011ea0:	68bb      	ldr	r3, [r7, #8]
 8011ea2:	3b01      	subs	r3, #1
 8011ea4:	60bb      	str	r3, [r7, #8]
 8011ea6:	68bb      	ldr	r3, [r7, #8]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d1ed      	bne.n	8011e88 <sum_sfn+0x10>
	return sum;
 8011eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3714      	adds	r7, #20
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b086      	sub	sp, #24
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011ec8:	2100      	movs	r1, #0
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7ff fc86 	bl	80117dc <dir_sdi>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ed4:	7dfb      	ldrb	r3, [r7, #23]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d001      	beq.n	8011ede <dir_find+0x24>
 8011eda:	7dfb      	ldrb	r3, [r7, #23]
 8011edc:	e0a9      	b.n	8012032 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011ede:	23ff      	movs	r3, #255	; 0xff
 8011ee0:	753b      	strb	r3, [r7, #20]
 8011ee2:	7d3b      	ldrb	r3, [r7, #20]
 8011ee4:	757b      	strb	r3, [r7, #21]
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011eec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	69db      	ldr	r3, [r3, #28]
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	6938      	ldr	r0, [r7, #16]
 8011ef6:	f7ff f88f 	bl	8011018 <move_window>
 8011efa:	4603      	mov	r3, r0
 8011efc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011efe:	7dfb      	ldrb	r3, [r7, #23]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f040 8090 	bne.w	8012026 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6a1b      	ldr	r3, [r3, #32]
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011f0e:	7dbb      	ldrb	r3, [r7, #22]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d102      	bne.n	8011f1a <dir_find+0x60>
 8011f14:	2304      	movs	r3, #4
 8011f16:	75fb      	strb	r3, [r7, #23]
 8011f18:	e08a      	b.n	8012030 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a1b      	ldr	r3, [r3, #32]
 8011f1e:	330b      	adds	r3, #11
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f26:	73fb      	strb	r3, [r7, #15]
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	7bfa      	ldrb	r2, [r7, #15]
 8011f2c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8011f2e:	7dbb      	ldrb	r3, [r7, #22]
 8011f30:	2be5      	cmp	r3, #229	; 0xe5
 8011f32:	d007      	beq.n	8011f44 <dir_find+0x8a>
 8011f34:	7bfb      	ldrb	r3, [r7, #15]
 8011f36:	f003 0308 	and.w	r3, r3, #8
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d009      	beq.n	8011f52 <dir_find+0x98>
 8011f3e:	7bfb      	ldrb	r3, [r7, #15]
 8011f40:	2b0f      	cmp	r3, #15
 8011f42:	d006      	beq.n	8011f52 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8011f44:	23ff      	movs	r3, #255	; 0xff
 8011f46:	757b      	strb	r3, [r7, #21]
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011f4e:	631a      	str	r2, [r3, #48]	; 0x30
 8011f50:	e05e      	b.n	8012010 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8011f52:	7bfb      	ldrb	r3, [r7, #15]
 8011f54:	2b0f      	cmp	r3, #15
 8011f56:	d136      	bne.n	8011fc6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d154      	bne.n	8012010 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8011f66:	7dbb      	ldrb	r3, [r7, #22]
 8011f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d00d      	beq.n	8011f8c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	6a1b      	ldr	r3, [r3, #32]
 8011f74:	7b5b      	ldrb	r3, [r3, #13]
 8011f76:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8011f78:	7dbb      	ldrb	r3, [r7, #22]
 8011f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f7e:	75bb      	strb	r3, [r7, #22]
 8011f80:	7dbb      	ldrb	r3, [r7, #22]
 8011f82:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	695a      	ldr	r2, [r3, #20]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011f8c:	7dba      	ldrb	r2, [r7, #22]
 8011f8e:	7d7b      	ldrb	r3, [r7, #21]
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d115      	bne.n	8011fc0 <dir_find+0x106>
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6a1b      	ldr	r3, [r3, #32]
 8011f98:	330d      	adds	r3, #13
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	7d3a      	ldrb	r2, [r7, #20]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d10e      	bne.n	8011fc0 <dir_find+0x106>
 8011fa2:	693b      	ldr	r3, [r7, #16]
 8011fa4:	691a      	ldr	r2, [r3, #16]
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6a1b      	ldr	r3, [r3, #32]
 8011faa:	4619      	mov	r1, r3
 8011fac:	4610      	mov	r0, r2
 8011fae:	f7ff fdfb 	bl	8011ba8 <cmp_lfn>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d003      	beq.n	8011fc0 <dir_find+0x106>
 8011fb8:	7d7b      	ldrb	r3, [r7, #21]
 8011fba:	3b01      	subs	r3, #1
 8011fbc:	b2db      	uxtb	r3, r3
 8011fbe:	e000      	b.n	8011fc2 <dir_find+0x108>
 8011fc0:	23ff      	movs	r3, #255	; 0xff
 8011fc2:	757b      	strb	r3, [r7, #21]
 8011fc4:	e024      	b.n	8012010 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8011fc6:	7d7b      	ldrb	r3, [r7, #21]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d109      	bne.n	8011fe0 <dir_find+0x126>
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6a1b      	ldr	r3, [r3, #32]
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7ff ff51 	bl	8011e78 <sum_sfn>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	461a      	mov	r2, r3
 8011fda:	7d3b      	ldrb	r3, [r7, #20]
 8011fdc:	4293      	cmp	r3, r2
 8011fde:	d024      	beq.n	801202a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011fe6:	f003 0301 	and.w	r3, r3, #1
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d10a      	bne.n	8012004 <dir_find+0x14a>
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a18      	ldr	r0, [r3, #32]
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	3324      	adds	r3, #36	; 0x24
 8011ff6:	220b      	movs	r2, #11
 8011ff8:	4619      	mov	r1, r3
 8011ffa:	f7fe fde9 	bl	8010bd0 <mem_cmp>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d014      	beq.n	801202e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012004:	23ff      	movs	r3, #255	; 0xff
 8012006:	757b      	strb	r3, [r7, #21]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801200e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012010:	2100      	movs	r1, #0
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f7ff fc6b 	bl	80118ee <dir_next>
 8012018:	4603      	mov	r3, r0
 801201a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801201c:	7dfb      	ldrb	r3, [r7, #23]
 801201e:	2b00      	cmp	r3, #0
 8012020:	f43f af65 	beq.w	8011eee <dir_find+0x34>
 8012024:	e004      	b.n	8012030 <dir_find+0x176>
		if (res != FR_OK) break;
 8012026:	bf00      	nop
 8012028:	e002      	b.n	8012030 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801202a:	bf00      	nop
 801202c:	e000      	b.n	8012030 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801202e:	bf00      	nop

	return res;
 8012030:	7dfb      	ldrb	r3, [r7, #23]
}
 8012032:	4618      	mov	r0, r3
 8012034:	3718      	adds	r7, #24
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
	...

0801203c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b08c      	sub	sp, #48	; 0x30
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012050:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <dir_register+0x20>
 8012058:	2306      	movs	r3, #6
 801205a:	e0e0      	b.n	801221e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801205c:	2300      	movs	r3, #0
 801205e:	627b      	str	r3, [r7, #36]	; 0x24
 8012060:	e002      	b.n	8012068 <dir_register+0x2c>
 8012062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012064:	3301      	adds	r3, #1
 8012066:	627b      	str	r3, [r7, #36]	; 0x24
 8012068:	69fb      	ldr	r3, [r7, #28]
 801206a:	691a      	ldr	r2, [r3, #16]
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	005b      	lsls	r3, r3, #1
 8012070:	4413      	add	r3, r2
 8012072:	881b      	ldrh	r3, [r3, #0]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d1f4      	bne.n	8012062 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801207e:	f107 030c 	add.w	r3, r7, #12
 8012082:	220c      	movs	r2, #12
 8012084:	4618      	mov	r0, r3
 8012086:	f7fe fd67 	bl	8010b58 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801208a:	7dfb      	ldrb	r3, [r7, #23]
 801208c:	f003 0301 	and.w	r3, r3, #1
 8012090:	2b00      	cmp	r3, #0
 8012092:	d032      	beq.n	80120fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2240      	movs	r2, #64	; 0x40
 8012098:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 801209c:	2301      	movs	r3, #1
 801209e:	62bb      	str	r3, [r7, #40]	; 0x28
 80120a0:	e016      	b.n	80120d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	691a      	ldr	r2, [r3, #16]
 80120ac:	f107 010c 	add.w	r1, r7, #12
 80120b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120b2:	f7ff fe51 	bl	8011d58 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f7ff feff 	bl	8011eba <dir_find>
 80120bc:	4603      	mov	r3, r0
 80120be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80120c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80120ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120cc:	3301      	adds	r3, #1
 80120ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80120d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120d2:	2b63      	cmp	r3, #99	; 0x63
 80120d4:	d9e5      	bls.n	80120a2 <dir_register+0x66>
 80120d6:	e000      	b.n	80120da <dir_register+0x9e>
			if (res != FR_OK) break;
 80120d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80120da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120dc:	2b64      	cmp	r3, #100	; 0x64
 80120de:	d101      	bne.n	80120e4 <dir_register+0xa8>
 80120e0:	2307      	movs	r3, #7
 80120e2:	e09c      	b.n	801221e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80120e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120e8:	2b04      	cmp	r3, #4
 80120ea:	d002      	beq.n	80120f2 <dir_register+0xb6>
 80120ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f0:	e095      	b.n	801221e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80120f2:	7dfa      	ldrb	r2, [r7, #23]
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80120fa:	7dfb      	ldrb	r3, [r7, #23]
 80120fc:	f003 0302 	and.w	r3, r3, #2
 8012100:	2b00      	cmp	r3, #0
 8012102:	d007      	beq.n	8012114 <dir_register+0xd8>
 8012104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012106:	330c      	adds	r3, #12
 8012108:	4a47      	ldr	r2, [pc, #284]	; (8012228 <dir_register+0x1ec>)
 801210a:	fba2 2303 	umull	r2, r3, r2, r3
 801210e:	089b      	lsrs	r3, r3, #2
 8012110:	3301      	adds	r3, #1
 8012112:	e000      	b.n	8012116 <dir_register+0xda>
 8012114:	2301      	movs	r3, #1
 8012116:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8012118:	6a39      	ldr	r1, [r7, #32]
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f7ff fcbd 	bl	8011a9a <dir_alloc>
 8012120:	4603      	mov	r3, r0
 8012122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8012126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801212a:	2b00      	cmp	r3, #0
 801212c:	d148      	bne.n	80121c0 <dir_register+0x184>
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	3b01      	subs	r3, #1
 8012132:	623b      	str	r3, [r7, #32]
 8012134:	6a3b      	ldr	r3, [r7, #32]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d042      	beq.n	80121c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	695a      	ldr	r2, [r3, #20]
 801213e:	6a3b      	ldr	r3, [r7, #32]
 8012140:	015b      	lsls	r3, r3, #5
 8012142:	1ad3      	subs	r3, r2, r3
 8012144:	4619      	mov	r1, r3
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f7ff fb48 	bl	80117dc <dir_sdi>
 801214c:	4603      	mov	r3, r0
 801214e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8012152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012156:	2b00      	cmp	r3, #0
 8012158:	d132      	bne.n	80121c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	3324      	adds	r3, #36	; 0x24
 801215e:	4618      	mov	r0, r3
 8012160:	f7ff fe8a 	bl	8011e78 <sum_sfn>
 8012164:	4603      	mov	r3, r0
 8012166:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	69db      	ldr	r3, [r3, #28]
 801216c:	4619      	mov	r1, r3
 801216e:	69f8      	ldr	r0, [r7, #28]
 8012170:	f7fe ff52 	bl	8011018 <move_window>
 8012174:	4603      	mov	r3, r0
 8012176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801217a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801217e:	2b00      	cmp	r3, #0
 8012180:	d11d      	bne.n	80121be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8012182:	69fb      	ldr	r3, [r7, #28]
 8012184:	6918      	ldr	r0, [r3, #16]
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a19      	ldr	r1, [r3, #32]
 801218a:	6a3b      	ldr	r3, [r7, #32]
 801218c:	b2da      	uxtb	r2, r3
 801218e:	7efb      	ldrb	r3, [r7, #27]
 8012190:	f7ff fd7a 	bl	8011c88 <put_lfn>
				fs->wflag = 1;
 8012194:	69fb      	ldr	r3, [r7, #28]
 8012196:	2201      	movs	r2, #1
 8012198:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801219a:	2100      	movs	r1, #0
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f7ff fba6 	bl	80118ee <dir_next>
 80121a2:	4603      	mov	r3, r0
 80121a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80121a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d107      	bne.n	80121c0 <dir_register+0x184>
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	3b01      	subs	r3, #1
 80121b4:	623b      	str	r3, [r7, #32]
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d1d5      	bne.n	8012168 <dir_register+0x12c>
 80121bc:	e000      	b.n	80121c0 <dir_register+0x184>
				if (res != FR_OK) break;
 80121be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80121c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d128      	bne.n	801221a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	69db      	ldr	r3, [r3, #28]
 80121cc:	4619      	mov	r1, r3
 80121ce:	69f8      	ldr	r0, [r7, #28]
 80121d0:	f7fe ff22 	bl	8011018 <move_window>
 80121d4:	4603      	mov	r3, r0
 80121d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80121da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d11b      	bne.n	801221a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6a1b      	ldr	r3, [r3, #32]
 80121e6:	2220      	movs	r2, #32
 80121e8:	2100      	movs	r1, #0
 80121ea:	4618      	mov	r0, r3
 80121ec:	f7fe fcd5 	bl	8010b9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	6a18      	ldr	r0, [r3, #32]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	3324      	adds	r3, #36	; 0x24
 80121f8:	220b      	movs	r2, #11
 80121fa:	4619      	mov	r1, r3
 80121fc:	f7fe fcac 	bl	8010b58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6a1b      	ldr	r3, [r3, #32]
 801220a:	330c      	adds	r3, #12
 801220c:	f002 0218 	and.w	r2, r2, #24
 8012210:	b2d2      	uxtb	r2, r2
 8012212:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	2201      	movs	r2, #1
 8012218:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801221a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801221e:	4618      	mov	r0, r3
 8012220:	3730      	adds	r7, #48	; 0x30
 8012222:	46bd      	mov	sp, r7
 8012224:	bd80      	pop	{r7, pc}
 8012226:	bf00      	nop
 8012228:	4ec4ec4f 	.word	0x4ec4ec4f

0801222c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b088      	sub	sp, #32
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
 8012234:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	2200      	movs	r2, #0
 8012240:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	69db      	ldr	r3, [r3, #28]
 8012246:	2b00      	cmp	r3, #0
 8012248:	f000 80c9 	beq.w	80123de <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012250:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012254:	d032      	beq.n	80122bc <get_fileinfo+0x90>
			i = j = 0;
 8012256:	2300      	movs	r3, #0
 8012258:	61bb      	str	r3, [r7, #24]
 801225a:	69bb      	ldr	r3, [r7, #24]
 801225c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801225e:	e01b      	b.n	8012298 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8012260:	89fb      	ldrh	r3, [r7, #14]
 8012262:	2100      	movs	r1, #0
 8012264:	4618      	mov	r0, r3
 8012266:	f001 fda1 	bl	8013dac <ff_convert>
 801226a:	4603      	mov	r3, r0
 801226c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 801226e:	89fb      	ldrh	r3, [r7, #14]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d102      	bne.n	801227a <get_fileinfo+0x4e>
 8012274:	2300      	movs	r3, #0
 8012276:	61fb      	str	r3, [r7, #28]
 8012278:	e01a      	b.n	80122b0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	2bfe      	cmp	r3, #254	; 0xfe
 801227e:	d902      	bls.n	8012286 <get_fileinfo+0x5a>
 8012280:	2300      	movs	r3, #0
 8012282:	61fb      	str	r3, [r7, #28]
 8012284:	e014      	b.n	80122b0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	1c5a      	adds	r2, r3, #1
 801228a:	61fa      	str	r2, [r7, #28]
 801228c:	89fa      	ldrh	r2, [r7, #14]
 801228e:	b2d1      	uxtb	r1, r2
 8012290:	683a      	ldr	r2, [r7, #0]
 8012292:	4413      	add	r3, r2
 8012294:	460a      	mov	r2, r1
 8012296:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8012298:	693b      	ldr	r3, [r7, #16]
 801229a:	691a      	ldr	r2, [r3, #16]
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	1c59      	adds	r1, r3, #1
 80122a0:	61b9      	str	r1, [r7, #24]
 80122a2:	005b      	lsls	r3, r3, #1
 80122a4:	4413      	add	r3, r2
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	81fb      	strh	r3, [r7, #14]
 80122aa:	89fb      	ldrh	r3, [r7, #14]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1d7      	bne.n	8012260 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80122b0:	683a      	ldr	r2, [r7, #0]
 80122b2:	69fb      	ldr	r3, [r7, #28]
 80122b4:	4413      	add	r3, r2
 80122b6:	3316      	adds	r3, #22
 80122b8:	2200      	movs	r2, #0
 80122ba:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80122bc:	2300      	movs	r3, #0
 80122be:	61bb      	str	r3, [r7, #24]
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80122c4:	683a      	ldr	r2, [r7, #0]
 80122c6:	69fb      	ldr	r3, [r7, #28]
 80122c8:	4413      	add	r3, r2
 80122ca:	3316      	adds	r3, #22
 80122cc:	781b      	ldrb	r3, [r3, #0]
 80122ce:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80122d0:	e04c      	b.n	801236c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	6a1a      	ldr	r2, [r3, #32]
 80122d6:	69fb      	ldr	r3, [r7, #28]
 80122d8:	1c59      	adds	r1, r3, #1
 80122da:	61f9      	str	r1, [r7, #28]
 80122dc:	4413      	add	r3, r2
 80122de:	781b      	ldrb	r3, [r3, #0]
 80122e0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80122e2:	7dfb      	ldrb	r3, [r7, #23]
 80122e4:	2b20      	cmp	r3, #32
 80122e6:	d100      	bne.n	80122ea <get_fileinfo+0xbe>
 80122e8:	e040      	b.n	801236c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80122ea:	7dfb      	ldrb	r3, [r7, #23]
 80122ec:	2b05      	cmp	r3, #5
 80122ee:	d101      	bne.n	80122f4 <get_fileinfo+0xc8>
 80122f0:	23e5      	movs	r3, #229	; 0xe5
 80122f2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80122f4:	69fb      	ldr	r3, [r7, #28]
 80122f6:	2b09      	cmp	r3, #9
 80122f8:	d10f      	bne.n	801231a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80122fa:	89bb      	ldrh	r3, [r7, #12]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d105      	bne.n	801230c <get_fileinfo+0xe0>
 8012300:	683a      	ldr	r2, [r7, #0]
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	4413      	add	r3, r2
 8012306:	3316      	adds	r3, #22
 8012308:	222e      	movs	r2, #46	; 0x2e
 801230a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	1c5a      	adds	r2, r3, #1
 8012310:	61ba      	str	r2, [r7, #24]
 8012312:	683a      	ldr	r2, [r7, #0]
 8012314:	4413      	add	r3, r2
 8012316:	222e      	movs	r2, #46	; 0x2e
 8012318:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 801231a:	683a      	ldr	r2, [r7, #0]
 801231c:	69bb      	ldr	r3, [r7, #24]
 801231e:	4413      	add	r3, r2
 8012320:	3309      	adds	r3, #9
 8012322:	7dfa      	ldrb	r2, [r7, #23]
 8012324:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8012326:	89bb      	ldrh	r3, [r7, #12]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d11c      	bne.n	8012366 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801232c:	7dfb      	ldrb	r3, [r7, #23]
 801232e:	2b40      	cmp	r3, #64	; 0x40
 8012330:	d913      	bls.n	801235a <get_fileinfo+0x12e>
 8012332:	7dfb      	ldrb	r3, [r7, #23]
 8012334:	2b5a      	cmp	r3, #90	; 0x5a
 8012336:	d810      	bhi.n	801235a <get_fileinfo+0x12e>
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	6a1b      	ldr	r3, [r3, #32]
 801233c:	330c      	adds	r3, #12
 801233e:	781b      	ldrb	r3, [r3, #0]
 8012340:	461a      	mov	r2, r3
 8012342:	69fb      	ldr	r3, [r7, #28]
 8012344:	2b08      	cmp	r3, #8
 8012346:	d901      	bls.n	801234c <get_fileinfo+0x120>
 8012348:	2310      	movs	r3, #16
 801234a:	e000      	b.n	801234e <get_fileinfo+0x122>
 801234c:	2308      	movs	r3, #8
 801234e:	4013      	ands	r3, r2
 8012350:	2b00      	cmp	r3, #0
 8012352:	d002      	beq.n	801235a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8012354:	7dfb      	ldrb	r3, [r7, #23]
 8012356:	3320      	adds	r3, #32
 8012358:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801235a:	683a      	ldr	r2, [r7, #0]
 801235c:	69bb      	ldr	r3, [r7, #24]
 801235e:	4413      	add	r3, r2
 8012360:	3316      	adds	r3, #22
 8012362:	7dfa      	ldrb	r2, [r7, #23]
 8012364:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8012366:	69bb      	ldr	r3, [r7, #24]
 8012368:	3301      	adds	r3, #1
 801236a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 801236c:	69fb      	ldr	r3, [r7, #28]
 801236e:	2b0a      	cmp	r3, #10
 8012370:	d9af      	bls.n	80122d2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8012372:	89bb      	ldrh	r3, [r7, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d10d      	bne.n	8012394 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8012378:	683a      	ldr	r2, [r7, #0]
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	4413      	add	r3, r2
 801237e:	3316      	adds	r3, #22
 8012380:	2200      	movs	r2, #0
 8012382:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6a1b      	ldr	r3, [r3, #32]
 8012388:	330c      	adds	r3, #12
 801238a:	781b      	ldrb	r3, [r3, #0]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d101      	bne.n	8012394 <get_fileinfo+0x168>
 8012390:	2300      	movs	r3, #0
 8012392:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8012394:	683a      	ldr	r2, [r7, #0]
 8012396:	69bb      	ldr	r3, [r7, #24]
 8012398:	4413      	add	r3, r2
 801239a:	3309      	adds	r3, #9
 801239c:	2200      	movs	r2, #0
 801239e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	6a1b      	ldr	r3, [r3, #32]
 80123a4:	7ada      	ldrb	r2, [r3, #11]
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6a1b      	ldr	r3, [r3, #32]
 80123ae:	331c      	adds	r3, #28
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fe fb67 	bl	8010a84 <ld_dword>
 80123b6:	4602      	mov	r2, r0
 80123b8:	683b      	ldr	r3, [r7, #0]
 80123ba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6a1b      	ldr	r3, [r3, #32]
 80123c0:	3316      	adds	r3, #22
 80123c2:	4618      	mov	r0, r3
 80123c4:	f7fe fb5e 	bl	8010a84 <ld_dword>
 80123c8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	b29a      	uxth	r2, r3
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	80da      	strh	r2, [r3, #6]
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	0c1b      	lsrs	r3, r3, #16
 80123d6:	b29a      	uxth	r2, r3
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	809a      	strh	r2, [r3, #4]
 80123dc:	e000      	b.n	80123e0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80123de:	bf00      	nop
}
 80123e0:	3720      	adds	r7, #32
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
	...

080123e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b08a      	sub	sp, #40	; 0x28
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
 80123f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80123f2:	683b      	ldr	r3, [r7, #0]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	613b      	str	r3, [r7, #16]
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	691b      	ldr	r3, [r3, #16]
 80123fe:	60fb      	str	r3, [r7, #12]
 8012400:	2300      	movs	r3, #0
 8012402:	617b      	str	r3, [r7, #20]
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8012408:	69bb      	ldr	r3, [r7, #24]
 801240a:	1c5a      	adds	r2, r3, #1
 801240c:	61ba      	str	r2, [r7, #24]
 801240e:	693a      	ldr	r2, [r7, #16]
 8012410:	4413      	add	r3, r2
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8012416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012418:	2b1f      	cmp	r3, #31
 801241a:	d940      	bls.n	801249e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801241c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801241e:	2b2f      	cmp	r3, #47	; 0x2f
 8012420:	d006      	beq.n	8012430 <create_name+0x48>
 8012422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012424:	2b5c      	cmp	r3, #92	; 0x5c
 8012426:	d110      	bne.n	801244a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012428:	e002      	b.n	8012430 <create_name+0x48>
 801242a:	69bb      	ldr	r3, [r7, #24]
 801242c:	3301      	adds	r3, #1
 801242e:	61bb      	str	r3, [r7, #24]
 8012430:	693a      	ldr	r2, [r7, #16]
 8012432:	69bb      	ldr	r3, [r7, #24]
 8012434:	4413      	add	r3, r2
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	2b2f      	cmp	r3, #47	; 0x2f
 801243a:	d0f6      	beq.n	801242a <create_name+0x42>
 801243c:	693a      	ldr	r2, [r7, #16]
 801243e:	69bb      	ldr	r3, [r7, #24]
 8012440:	4413      	add	r3, r2
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b5c      	cmp	r3, #92	; 0x5c
 8012446:	d0f0      	beq.n	801242a <create_name+0x42>
			break;
 8012448:	e02a      	b.n	80124a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	2bfe      	cmp	r3, #254	; 0xfe
 801244e:	d901      	bls.n	8012454 <create_name+0x6c>
 8012450:	2306      	movs	r3, #6
 8012452:	e177      	b.n	8012744 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8012454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012456:	b2db      	uxtb	r3, r3
 8012458:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801245a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801245c:	2101      	movs	r1, #1
 801245e:	4618      	mov	r0, r3
 8012460:	f001 fca4 	bl	8013dac <ff_convert>
 8012464:	4603      	mov	r3, r0
 8012466:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012468:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801246a:	2b00      	cmp	r3, #0
 801246c:	d101      	bne.n	8012472 <create_name+0x8a>
 801246e:	2306      	movs	r3, #6
 8012470:	e168      	b.n	8012744 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012474:	2b7f      	cmp	r3, #127	; 0x7f
 8012476:	d809      	bhi.n	801248c <create_name+0xa4>
 8012478:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801247a:	4619      	mov	r1, r3
 801247c:	48b3      	ldr	r0, [pc, #716]	; (801274c <create_name+0x364>)
 801247e:	f7fe fbce 	bl	8010c1e <chk_chr>
 8012482:	4603      	mov	r3, r0
 8012484:	2b00      	cmp	r3, #0
 8012486:	d001      	beq.n	801248c <create_name+0xa4>
 8012488:	2306      	movs	r3, #6
 801248a:	e15b      	b.n	8012744 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 801248c:	697b      	ldr	r3, [r7, #20]
 801248e:	1c5a      	adds	r2, r3, #1
 8012490:	617a      	str	r2, [r7, #20]
 8012492:	005b      	lsls	r3, r3, #1
 8012494:	68fa      	ldr	r2, [r7, #12]
 8012496:	4413      	add	r3, r2
 8012498:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801249a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801249c:	e7b4      	b.n	8012408 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801249e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80124a0:	693a      	ldr	r2, [r7, #16]
 80124a2:	69bb      	ldr	r3, [r7, #24]
 80124a4:	441a      	add	r2, r3
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80124aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124ac:	2b1f      	cmp	r3, #31
 80124ae:	d801      	bhi.n	80124b4 <create_name+0xcc>
 80124b0:	2304      	movs	r3, #4
 80124b2:	e000      	b.n	80124b6 <create_name+0xce>
 80124b4:	2300      	movs	r3, #0
 80124b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80124ba:	e011      	b.n	80124e0 <create_name+0xf8>
		w = lfn[di - 1];
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80124c2:	3b01      	subs	r3, #1
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	68fa      	ldr	r2, [r7, #12]
 80124c8:	4413      	add	r3, r2
 80124ca:	881b      	ldrh	r3, [r3, #0]
 80124cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80124ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124d0:	2b20      	cmp	r3, #32
 80124d2:	d002      	beq.n	80124da <create_name+0xf2>
 80124d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80124d6:	2b2e      	cmp	r3, #46	; 0x2e
 80124d8:	d106      	bne.n	80124e8 <create_name+0x100>
		di--;
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	3b01      	subs	r3, #1
 80124de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d1ea      	bne.n	80124bc <create_name+0xd4>
 80124e6:	e000      	b.n	80124ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80124e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80124ea:	697b      	ldr	r3, [r7, #20]
 80124ec:	005b      	lsls	r3, r3, #1
 80124ee:	68fa      	ldr	r2, [r7, #12]
 80124f0:	4413      	add	r3, r2
 80124f2:	2200      	movs	r2, #0
 80124f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d101      	bne.n	8012500 <create_name+0x118>
 80124fc:	2306      	movs	r3, #6
 80124fe:	e121      	b.n	8012744 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	3324      	adds	r3, #36	; 0x24
 8012504:	220b      	movs	r2, #11
 8012506:	2120      	movs	r1, #32
 8012508:	4618      	mov	r0, r3
 801250a:	f7fe fb46 	bl	8010b9a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801250e:	2300      	movs	r3, #0
 8012510:	61bb      	str	r3, [r7, #24]
 8012512:	e002      	b.n	801251a <create_name+0x132>
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	3301      	adds	r3, #1
 8012518:	61bb      	str	r3, [r7, #24]
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	005b      	lsls	r3, r3, #1
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	4413      	add	r3, r2
 8012522:	881b      	ldrh	r3, [r3, #0]
 8012524:	2b20      	cmp	r3, #32
 8012526:	d0f5      	beq.n	8012514 <create_name+0x12c>
 8012528:	69bb      	ldr	r3, [r7, #24]
 801252a:	005b      	lsls	r3, r3, #1
 801252c:	68fa      	ldr	r2, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	881b      	ldrh	r3, [r3, #0]
 8012532:	2b2e      	cmp	r3, #46	; 0x2e
 8012534:	d0ee      	beq.n	8012514 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8012536:	69bb      	ldr	r3, [r7, #24]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d009      	beq.n	8012550 <create_name+0x168>
 801253c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012540:	f043 0303 	orr.w	r3, r3, #3
 8012544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012548:	e002      	b.n	8012550 <create_name+0x168>
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	3b01      	subs	r3, #1
 801254e:	617b      	str	r3, [r7, #20]
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d009      	beq.n	801256a <create_name+0x182>
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801255c:	3b01      	subs	r3, #1
 801255e:	005b      	lsls	r3, r3, #1
 8012560:	68fa      	ldr	r2, [r7, #12]
 8012562:	4413      	add	r3, r2
 8012564:	881b      	ldrh	r3, [r3, #0]
 8012566:	2b2e      	cmp	r3, #46	; 0x2e
 8012568:	d1ef      	bne.n	801254a <create_name+0x162>

	i = b = 0; ni = 8;
 801256a:	2300      	movs	r3, #0
 801256c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012570:	2300      	movs	r3, #0
 8012572:	623b      	str	r3, [r7, #32]
 8012574:	2308      	movs	r3, #8
 8012576:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8012578:	69bb      	ldr	r3, [r7, #24]
 801257a:	1c5a      	adds	r2, r3, #1
 801257c:	61ba      	str	r2, [r7, #24]
 801257e:	005b      	lsls	r3, r3, #1
 8012580:	68fa      	ldr	r2, [r7, #12]
 8012582:	4413      	add	r3, r2
 8012584:	881b      	ldrh	r3, [r3, #0]
 8012586:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8012588:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801258a:	2b00      	cmp	r3, #0
 801258c:	f000 8090 	beq.w	80126b0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012592:	2b20      	cmp	r3, #32
 8012594:	d006      	beq.n	80125a4 <create_name+0x1bc>
 8012596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012598:	2b2e      	cmp	r3, #46	; 0x2e
 801259a:	d10a      	bne.n	80125b2 <create_name+0x1ca>
 801259c:	69ba      	ldr	r2, [r7, #24]
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d006      	beq.n	80125b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80125a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125a8:	f043 0303 	orr.w	r3, r3, #3
 80125ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125b0:	e07d      	b.n	80126ae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80125b2:	6a3a      	ldr	r2, [r7, #32]
 80125b4:	69fb      	ldr	r3, [r7, #28]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d203      	bcs.n	80125c2 <create_name+0x1da>
 80125ba:	69ba      	ldr	r2, [r7, #24]
 80125bc:	697b      	ldr	r3, [r7, #20]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d123      	bne.n	801260a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	2b0b      	cmp	r3, #11
 80125c6:	d106      	bne.n	80125d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80125c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125cc:	f043 0303 	orr.w	r3, r3, #3
 80125d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125d4:	e06f      	b.n	80126b6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80125d6:	69ba      	ldr	r2, [r7, #24]
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	429a      	cmp	r2, r3
 80125dc:	d005      	beq.n	80125ea <create_name+0x202>
 80125de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125e2:	f043 0303 	orr.w	r3, r3, #3
 80125e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80125ea:	69ba      	ldr	r2, [r7, #24]
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	429a      	cmp	r2, r3
 80125f0:	d860      	bhi.n	80126b4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	61bb      	str	r3, [r7, #24]
 80125f6:	2308      	movs	r3, #8
 80125f8:	623b      	str	r3, [r7, #32]
 80125fa:	230b      	movs	r3, #11
 80125fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80125fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012602:	009b      	lsls	r3, r3, #2
 8012604:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012608:	e051      	b.n	80126ae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801260a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801260c:	2b7f      	cmp	r3, #127	; 0x7f
 801260e:	d914      	bls.n	801263a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012610:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012612:	2100      	movs	r1, #0
 8012614:	4618      	mov	r0, r3
 8012616:	f001 fbc9 	bl	8013dac <ff_convert>
 801261a:	4603      	mov	r3, r0
 801261c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801261e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012620:	2b00      	cmp	r3, #0
 8012622:	d004      	beq.n	801262e <create_name+0x246>
 8012624:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012626:	3b80      	subs	r3, #128	; 0x80
 8012628:	4a49      	ldr	r2, [pc, #292]	; (8012750 <create_name+0x368>)
 801262a:	5cd3      	ldrb	r3, [r2, r3]
 801262c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801262e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012632:	f043 0302 	orr.w	r3, r3, #2
 8012636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801263a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801263c:	2b00      	cmp	r3, #0
 801263e:	d007      	beq.n	8012650 <create_name+0x268>
 8012640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012642:	4619      	mov	r1, r3
 8012644:	4843      	ldr	r0, [pc, #268]	; (8012754 <create_name+0x36c>)
 8012646:	f7fe faea 	bl	8010c1e <chk_chr>
 801264a:	4603      	mov	r3, r0
 801264c:	2b00      	cmp	r3, #0
 801264e:	d008      	beq.n	8012662 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012650:	235f      	movs	r3, #95	; 0x5f
 8012652:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012658:	f043 0303 	orr.w	r3, r3, #3
 801265c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012660:	e01b      	b.n	801269a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8012662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012664:	2b40      	cmp	r3, #64	; 0x40
 8012666:	d909      	bls.n	801267c <create_name+0x294>
 8012668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801266a:	2b5a      	cmp	r3, #90	; 0x5a
 801266c:	d806      	bhi.n	801267c <create_name+0x294>
					b |= 2;
 801266e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012672:	f043 0302 	orr.w	r3, r3, #2
 8012676:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801267a:	e00e      	b.n	801269a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801267c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801267e:	2b60      	cmp	r3, #96	; 0x60
 8012680:	d90b      	bls.n	801269a <create_name+0x2b2>
 8012682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012684:	2b7a      	cmp	r3, #122	; 0x7a
 8012686:	d808      	bhi.n	801269a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8012688:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801268c:	f043 0301 	orr.w	r3, r3, #1
 8012690:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012694:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012696:	3b20      	subs	r3, #32
 8012698:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801269a:	6a3b      	ldr	r3, [r7, #32]
 801269c:	1c5a      	adds	r2, r3, #1
 801269e:	623a      	str	r2, [r7, #32]
 80126a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80126a2:	b2d1      	uxtb	r1, r2
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	4413      	add	r3, r2
 80126a8:	460a      	mov	r2, r1
 80126aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80126ae:	e763      	b.n	8012578 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80126b0:	bf00      	nop
 80126b2:	e000      	b.n	80126b6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80126b4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80126bc:	2be5      	cmp	r3, #229	; 0xe5
 80126be:	d103      	bne.n	80126c8 <create_name+0x2e0>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2205      	movs	r2, #5
 80126c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	2b08      	cmp	r3, #8
 80126cc:	d104      	bne.n	80126d8 <create_name+0x2f0>
 80126ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80126d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126dc:	f003 030c 	and.w	r3, r3, #12
 80126e0:	2b0c      	cmp	r3, #12
 80126e2:	d005      	beq.n	80126f0 <create_name+0x308>
 80126e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80126e8:	f003 0303 	and.w	r3, r3, #3
 80126ec:	2b03      	cmp	r3, #3
 80126ee:	d105      	bne.n	80126fc <create_name+0x314>
 80126f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126f4:	f043 0302 	orr.w	r3, r3, #2
 80126f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80126fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012700:	f003 0302 	and.w	r3, r3, #2
 8012704:	2b00      	cmp	r3, #0
 8012706:	d117      	bne.n	8012738 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801270c:	f003 0303 	and.w	r3, r3, #3
 8012710:	2b01      	cmp	r3, #1
 8012712:	d105      	bne.n	8012720 <create_name+0x338>
 8012714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012718:	f043 0310 	orr.w	r3, r3, #16
 801271c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012720:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012724:	f003 030c 	and.w	r3, r3, #12
 8012728:	2b04      	cmp	r3, #4
 801272a:	d105      	bne.n	8012738 <create_name+0x350>
 801272c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012730:	f043 0308 	orr.w	r3, r3, #8
 8012734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801273e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8012742:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8012744:	4618      	mov	r0, r3
 8012746:	3728      	adds	r7, #40	; 0x28
 8012748:	46bd      	mov	sp, r7
 801274a:	bd80      	pop	{r7, pc}
 801274c:	0801c688 	.word	0x0801c688
 8012750:	0802064c 	.word	0x0802064c
 8012754:	0801c694 	.word	0x0801c694

08012758 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b086      	sub	sp, #24
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
 8012760:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801276c:	e002      	b.n	8012774 <follow_path+0x1c>
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	3301      	adds	r3, #1
 8012772:	603b      	str	r3, [r7, #0]
 8012774:	683b      	ldr	r3, [r7, #0]
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	2b2f      	cmp	r3, #47	; 0x2f
 801277a:	d0f8      	beq.n	801276e <follow_path+0x16>
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	2b5c      	cmp	r3, #92	; 0x5c
 8012782:	d0f4      	beq.n	801276e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8012784:	693b      	ldr	r3, [r7, #16]
 8012786:	2200      	movs	r2, #0
 8012788:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	2b1f      	cmp	r3, #31
 8012790:	d80a      	bhi.n	80127a8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2280      	movs	r2, #128	; 0x80
 8012796:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801279a:	2100      	movs	r1, #0
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff f81d 	bl	80117dc <dir_sdi>
 80127a2:	4603      	mov	r3, r0
 80127a4:	75fb      	strb	r3, [r7, #23]
 80127a6:	e048      	b.n	801283a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80127a8:	463b      	mov	r3, r7
 80127aa:	4619      	mov	r1, r3
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f7ff fe1b 	bl	80123e8 <create_name>
 80127b2:	4603      	mov	r3, r0
 80127b4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80127b6:	7dfb      	ldrb	r3, [r7, #23]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d139      	bne.n	8012830 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff fb7c 	bl	8011eba <dir_find>
 80127c2:	4603      	mov	r3, r0
 80127c4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80127cc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80127ce:	7dfb      	ldrb	r3, [r7, #23]
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d00a      	beq.n	80127ea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80127d4:	7dfb      	ldrb	r3, [r7, #23]
 80127d6:	2b04      	cmp	r3, #4
 80127d8:	d12c      	bne.n	8012834 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80127da:	7afb      	ldrb	r3, [r7, #11]
 80127dc:	f003 0304 	and.w	r3, r3, #4
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d127      	bne.n	8012834 <follow_path+0xdc>
 80127e4:	2305      	movs	r3, #5
 80127e6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80127e8:	e024      	b.n	8012834 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80127ea:	7afb      	ldrb	r3, [r7, #11]
 80127ec:	f003 0304 	and.w	r3, r3, #4
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d121      	bne.n	8012838 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80127f4:	693b      	ldr	r3, [r7, #16]
 80127f6:	799b      	ldrb	r3, [r3, #6]
 80127f8:	f003 0310 	and.w	r3, r3, #16
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d102      	bne.n	8012806 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8012800:	2305      	movs	r3, #5
 8012802:	75fb      	strb	r3, [r7, #23]
 8012804:	e019      	b.n	801283a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	695b      	ldr	r3, [r3, #20]
 8012810:	68fa      	ldr	r2, [r7, #12]
 8012812:	8992      	ldrh	r2, [r2, #12]
 8012814:	fbb3 f0f2 	udiv	r0, r3, r2
 8012818:	fb02 f200 	mul.w	r2, r2, r0
 801281c:	1a9b      	subs	r3, r3, r2
 801281e:	440b      	add	r3, r1
 8012820:	4619      	mov	r1, r3
 8012822:	68f8      	ldr	r0, [r7, #12]
 8012824:	f7ff f980 	bl	8011b28 <ld_clust>
 8012828:	4602      	mov	r2, r0
 801282a:	693b      	ldr	r3, [r7, #16]
 801282c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801282e:	e7bb      	b.n	80127a8 <follow_path+0x50>
			if (res != FR_OK) break;
 8012830:	bf00      	nop
 8012832:	e002      	b.n	801283a <follow_path+0xe2>
				break;
 8012834:	bf00      	nop
 8012836:	e000      	b.n	801283a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012838:	bf00      	nop
			}
		}
	}

	return res;
 801283a:	7dfb      	ldrb	r3, [r7, #23]
}
 801283c:	4618      	mov	r0, r3
 801283e:	3718      	adds	r7, #24
 8012840:	46bd      	mov	sp, r7
 8012842:	bd80      	pop	{r7, pc}

08012844 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8012844:	b480      	push	{r7}
 8012846:	b087      	sub	sp, #28
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801284c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012850:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d031      	beq.n	80128be <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	617b      	str	r3, [r7, #20]
 8012860:	e002      	b.n	8012868 <get_ldnumber+0x24>
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	3301      	adds	r3, #1
 8012866:	617b      	str	r3, [r7, #20]
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b1f      	cmp	r3, #31
 801286e:	d903      	bls.n	8012878 <get_ldnumber+0x34>
 8012870:	697b      	ldr	r3, [r7, #20]
 8012872:	781b      	ldrb	r3, [r3, #0]
 8012874:	2b3a      	cmp	r3, #58	; 0x3a
 8012876:	d1f4      	bne.n	8012862 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b3a      	cmp	r3, #58	; 0x3a
 801287e:	d11c      	bne.n	80128ba <get_ldnumber+0x76>
			tp = *path;
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	1c5a      	adds	r2, r3, #1
 801288a:	60fa      	str	r2, [r7, #12]
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	3b30      	subs	r3, #48	; 0x30
 8012890:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	2b09      	cmp	r3, #9
 8012896:	d80e      	bhi.n	80128b6 <get_ldnumber+0x72>
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	429a      	cmp	r2, r3
 801289e:	d10a      	bne.n	80128b6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80128a0:	68bb      	ldr	r3, [r7, #8]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d107      	bne.n	80128b6 <get_ldnumber+0x72>
					vol = (int)i;
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80128aa:	697b      	ldr	r3, [r7, #20]
 80128ac:	3301      	adds	r3, #1
 80128ae:	617b      	str	r3, [r7, #20]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	697a      	ldr	r2, [r7, #20]
 80128b4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	e002      	b.n	80128c0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80128ba:	2300      	movs	r3, #0
 80128bc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80128be:	693b      	ldr	r3, [r7, #16]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	371c      	adds	r7, #28
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b082      	sub	sp, #8
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	2200      	movs	r2, #0
 80128da:	70da      	strb	r2, [r3, #3]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128e2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80128e4:	6839      	ldr	r1, [r7, #0]
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f7fe fb96 	bl	8011018 <move_window>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d001      	beq.n	80128f6 <check_fs+0x2a>
 80128f2:	2304      	movs	r3, #4
 80128f4:	e038      	b.n	8012968 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	333c      	adds	r3, #60	; 0x3c
 80128fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80128fe:	4618      	mov	r0, r3
 8012900:	f7fe f8a8 	bl	8010a54 <ld_word>
 8012904:	4603      	mov	r3, r0
 8012906:	461a      	mov	r2, r3
 8012908:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801290c:	429a      	cmp	r2, r3
 801290e:	d001      	beq.n	8012914 <check_fs+0x48>
 8012910:	2303      	movs	r3, #3
 8012912:	e029      	b.n	8012968 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801291a:	2be9      	cmp	r3, #233	; 0xe9
 801291c:	d009      	beq.n	8012932 <check_fs+0x66>
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012924:	2beb      	cmp	r3, #235	; 0xeb
 8012926:	d11e      	bne.n	8012966 <check_fs+0x9a>
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801292e:	2b90      	cmp	r3, #144	; 0x90
 8012930:	d119      	bne.n	8012966 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	333c      	adds	r3, #60	; 0x3c
 8012936:	3336      	adds	r3, #54	; 0x36
 8012938:	4618      	mov	r0, r3
 801293a:	f7fe f8a3 	bl	8010a84 <ld_dword>
 801293e:	4603      	mov	r3, r0
 8012940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012944:	4a0a      	ldr	r2, [pc, #40]	; (8012970 <check_fs+0xa4>)
 8012946:	4293      	cmp	r3, r2
 8012948:	d101      	bne.n	801294e <check_fs+0x82>
 801294a:	2300      	movs	r3, #0
 801294c:	e00c      	b.n	8012968 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	333c      	adds	r3, #60	; 0x3c
 8012952:	3352      	adds	r3, #82	; 0x52
 8012954:	4618      	mov	r0, r3
 8012956:	f7fe f895 	bl	8010a84 <ld_dword>
 801295a:	4603      	mov	r3, r0
 801295c:	4a05      	ldr	r2, [pc, #20]	; (8012974 <check_fs+0xa8>)
 801295e:	4293      	cmp	r3, r2
 8012960:	d101      	bne.n	8012966 <check_fs+0x9a>
 8012962:	2300      	movs	r3, #0
 8012964:	e000      	b.n	8012968 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012966:	2302      	movs	r3, #2
}
 8012968:	4618      	mov	r0, r3
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}
 8012970:	00544146 	.word	0x00544146
 8012974:	33544146 	.word	0x33544146

08012978 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b096      	sub	sp, #88	; 0x58
 801297c:	af00      	add	r7, sp, #0
 801297e:	60f8      	str	r0, [r7, #12]
 8012980:	60b9      	str	r1, [r7, #8]
 8012982:	4613      	mov	r3, r2
 8012984:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2200      	movs	r2, #0
 801298a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801298c:	68f8      	ldr	r0, [r7, #12]
 801298e:	f7ff ff59 	bl	8012844 <get_ldnumber>
 8012992:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012996:	2b00      	cmp	r3, #0
 8012998:	da01      	bge.n	801299e <find_volume+0x26>
 801299a:	230b      	movs	r3, #11
 801299c:	e26c      	b.n	8012e78 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801299e:	4aa4      	ldr	r2, [pc, #656]	; (8012c30 <find_volume+0x2b8>)
 80129a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80129a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80129a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d101      	bne.n	80129b2 <find_volume+0x3a>
 80129ae:	230c      	movs	r3, #12
 80129b0:	e262      	b.n	8012e78 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80129b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80129b4:	f7fe f94e 	bl	8010c54 <lock_fs>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d101      	bne.n	80129c2 <find_volume+0x4a>
 80129be:	230f      	movs	r3, #15
 80129c0:	e25a      	b.n	8012e78 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80129c8:	79fb      	ldrb	r3, [r7, #7]
 80129ca:	f023 0301 	bic.w	r3, r3, #1
 80129ce:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80129d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d2:	781b      	ldrb	r3, [r3, #0]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d01a      	beq.n	8012a0e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80129d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129da:	785b      	ldrb	r3, [r3, #1]
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fd ff9b 	bl	8010918 <disk_status>
 80129e2:	4603      	mov	r3, r0
 80129e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80129e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129ec:	f003 0301 	and.w	r3, r3, #1
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d10c      	bne.n	8012a0e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80129f4:	79fb      	ldrb	r3, [r7, #7]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d007      	beq.n	8012a0a <find_volume+0x92>
 80129fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129fe:	f003 0304 	and.w	r3, r3, #4
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d001      	beq.n	8012a0a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8012a06:	230a      	movs	r3, #10
 8012a08:	e236      	b.n	8012e78 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	e234      	b.n	8012e78 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8012a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a10:	2200      	movs	r2, #0
 8012a12:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012a16:	b2da      	uxtb	r2, r3
 8012a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1e:	785b      	ldrb	r3, [r3, #1]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7fd ff93 	bl	801094c <disk_initialize>
 8012a26:	4603      	mov	r3, r0
 8012a28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012a2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a30:	f003 0301 	and.w	r3, r3, #1
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012a38:	2303      	movs	r3, #3
 8012a3a:	e21d      	b.n	8012e78 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012a3c:	79fb      	ldrb	r3, [r7, #7]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d007      	beq.n	8012a52 <find_volume+0xda>
 8012a42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a46:	f003 0304 	and.w	r3, r3, #4
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d001      	beq.n	8012a52 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8012a4e:	230a      	movs	r3, #10
 8012a50:	e212      	b.n	8012e78 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8012a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a54:	7858      	ldrb	r0, [r3, #1]
 8012a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a58:	330c      	adds	r3, #12
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	2102      	movs	r1, #2
 8012a5e:	f7fd ffdb 	bl	8010a18 <disk_ioctl>
 8012a62:	4603      	mov	r3, r0
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d001      	beq.n	8012a6c <find_volume+0xf4>
 8012a68:	2301      	movs	r3, #1
 8012a6a:	e205      	b.n	8012e78 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6e:	899b      	ldrh	r3, [r3, #12]
 8012a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012a74:	d80d      	bhi.n	8012a92 <find_volume+0x11a>
 8012a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a78:	899b      	ldrh	r3, [r3, #12]
 8012a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a7e:	d308      	bcc.n	8012a92 <find_volume+0x11a>
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	899b      	ldrh	r3, [r3, #12]
 8012a84:	461a      	mov	r2, r3
 8012a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a88:	899b      	ldrh	r3, [r3, #12]
 8012a8a:	3b01      	subs	r3, #1
 8012a8c:	4013      	ands	r3, r2
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d001      	beq.n	8012a96 <find_volume+0x11e>
 8012a92:	2301      	movs	r3, #1
 8012a94:	e1f0      	b.n	8012e78 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8012a9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a9e:	f7ff ff15 	bl	80128cc <check_fs>
 8012aa2:	4603      	mov	r3, r0
 8012aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012aa8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012aac:	2b02      	cmp	r3, #2
 8012aae:	d14b      	bne.n	8012b48 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	643b      	str	r3, [r7, #64]	; 0x40
 8012ab4:	e01f      	b.n	8012af6 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ab8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8012abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012abe:	011b      	lsls	r3, r3, #4
 8012ac0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012ac4:	4413      	add	r3, r2
 8012ac6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aca:	3304      	adds	r3, #4
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d006      	beq.n	8012ae0 <find_volume+0x168>
 8012ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad4:	3308      	adds	r3, #8
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f7fd ffd4 	bl	8010a84 <ld_dword>
 8012adc:	4602      	mov	r2, r0
 8012ade:	e000      	b.n	8012ae2 <find_volume+0x16a>
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ae4:	009b      	lsls	r3, r3, #2
 8012ae6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012aea:	440b      	add	r3, r1
 8012aec:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af2:	3301      	adds	r3, #1
 8012af4:	643b      	str	r3, [r7, #64]	; 0x40
 8012af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012af8:	2b03      	cmp	r3, #3
 8012afa:	d9dc      	bls.n	8012ab6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012afc:	2300      	movs	r3, #0
 8012afe:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d002      	beq.n	8012b0c <find_volume+0x194>
 8012b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b08:	3b01      	subs	r3, #1
 8012b0a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b0e:	009b      	lsls	r3, r3, #2
 8012b10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012b14:	4413      	add	r3, r2
 8012b16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012b1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d005      	beq.n	8012b2e <find_volume+0x1b6>
 8012b22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b26:	f7ff fed1 	bl	80128cc <check_fs>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	e000      	b.n	8012b30 <find_volume+0x1b8>
 8012b2e:	2303      	movs	r3, #3
 8012b30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012b34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b38:	2b01      	cmp	r3, #1
 8012b3a:	d905      	bls.n	8012b48 <find_volume+0x1d0>
 8012b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b3e:	3301      	adds	r3, #1
 8012b40:	643b      	str	r3, [r7, #64]	; 0x40
 8012b42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012b44:	2b03      	cmp	r3, #3
 8012b46:	d9e1      	bls.n	8012b0c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012b48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b4c:	2b04      	cmp	r3, #4
 8012b4e:	d101      	bne.n	8012b54 <find_volume+0x1dc>
 8012b50:	2301      	movs	r3, #1
 8012b52:	e191      	b.n	8012e78 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b58:	2b01      	cmp	r3, #1
 8012b5a:	d901      	bls.n	8012b60 <find_volume+0x1e8>
 8012b5c:	230d      	movs	r3, #13
 8012b5e:	e18b      	b.n	8012e78 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8012b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b62:	333c      	adds	r3, #60	; 0x3c
 8012b64:	330b      	adds	r3, #11
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fd ff74 	bl	8010a54 <ld_word>
 8012b6c:	4603      	mov	r3, r0
 8012b6e:	461a      	mov	r2, r3
 8012b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b72:	899b      	ldrh	r3, [r3, #12]
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d001      	beq.n	8012b7c <find_volume+0x204>
 8012b78:	230d      	movs	r3, #13
 8012b7a:	e17d      	b.n	8012e78 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b7e:	333c      	adds	r3, #60	; 0x3c
 8012b80:	3316      	adds	r3, #22
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7fd ff66 	bl	8010a54 <ld_word>
 8012b88:	4603      	mov	r3, r0
 8012b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8012b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d106      	bne.n	8012ba0 <find_volume+0x228>
 8012b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b94:	333c      	adds	r3, #60	; 0x3c
 8012b96:	3324      	adds	r3, #36	; 0x24
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f7fd ff73 	bl	8010a84 <ld_dword>
 8012b9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ba4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ba8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8012bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bb2:	789b      	ldrb	r3, [r3, #2]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d005      	beq.n	8012bc4 <find_volume+0x24c>
 8012bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bba:	789b      	ldrb	r3, [r3, #2]
 8012bbc:	2b02      	cmp	r3, #2
 8012bbe:	d001      	beq.n	8012bc4 <find_volume+0x24c>
 8012bc0:	230d      	movs	r3, #13
 8012bc2:	e159      	b.n	8012e78 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bc6:	789b      	ldrb	r3, [r3, #2]
 8012bc8:	461a      	mov	r2, r3
 8012bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bcc:	fb02 f303 	mul.w	r3, r2, r3
 8012bd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bd4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8012bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be0:	895b      	ldrh	r3, [r3, #10]
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d008      	beq.n	8012bf8 <find_volume+0x280>
 8012be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012be8:	895b      	ldrh	r3, [r3, #10]
 8012bea:	461a      	mov	r2, r3
 8012bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bee:	895b      	ldrh	r3, [r3, #10]
 8012bf0:	3b01      	subs	r3, #1
 8012bf2:	4013      	ands	r3, r2
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d001      	beq.n	8012bfc <find_volume+0x284>
 8012bf8:	230d      	movs	r3, #13
 8012bfa:	e13d      	b.n	8012e78 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012bfe:	333c      	adds	r3, #60	; 0x3c
 8012c00:	3311      	adds	r3, #17
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7fd ff26 	bl	8010a54 <ld_word>
 8012c08:	4603      	mov	r3, r0
 8012c0a:	461a      	mov	r2, r3
 8012c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c0e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c12:	891b      	ldrh	r3, [r3, #8]
 8012c14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c16:	8992      	ldrh	r2, [r2, #12]
 8012c18:	0952      	lsrs	r2, r2, #5
 8012c1a:	b292      	uxth	r2, r2
 8012c1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c20:	fb02 f201 	mul.w	r2, r2, r1
 8012c24:	1a9b      	subs	r3, r3, r2
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d003      	beq.n	8012c34 <find_volume+0x2bc>
 8012c2c:	230d      	movs	r3, #13
 8012c2e:	e123      	b.n	8012e78 <find_volume+0x500>
 8012c30:	20002850 	.word	0x20002850

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8012c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c36:	333c      	adds	r3, #60	; 0x3c
 8012c38:	3313      	adds	r3, #19
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	f7fd ff0a 	bl	8010a54 <ld_word>
 8012c40:	4603      	mov	r3, r0
 8012c42:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8012c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d106      	bne.n	8012c58 <find_volume+0x2e0>
 8012c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c4c:	333c      	adds	r3, #60	; 0x3c
 8012c4e:	3320      	adds	r3, #32
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fd ff17 	bl	8010a84 <ld_dword>
 8012c56:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012c5a:	333c      	adds	r3, #60	; 0x3c
 8012c5c:	330e      	adds	r3, #14
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f7fd fef8 	bl	8010a54 <ld_word>
 8012c64:	4603      	mov	r3, r0
 8012c66:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012c68:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d101      	bne.n	8012c72 <find_volume+0x2fa>
 8012c6e:	230d      	movs	r3, #13
 8012c70:	e102      	b.n	8012e78 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012c72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c76:	4413      	add	r3, r2
 8012c78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c7a:	8911      	ldrh	r1, [r2, #8]
 8012c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c7e:	8992      	ldrh	r2, [r2, #12]
 8012c80:	0952      	lsrs	r2, r2, #5
 8012c82:	b292      	uxth	r2, r2
 8012c84:	fbb1 f2f2 	udiv	r2, r1, r2
 8012c88:	b292      	uxth	r2, r2
 8012c8a:	4413      	add	r3, r2
 8012c8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012c8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c92:	429a      	cmp	r2, r3
 8012c94:	d201      	bcs.n	8012c9a <find_volume+0x322>
 8012c96:	230d      	movs	r3, #13
 8012c98:	e0ee      	b.n	8012e78 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8012c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c9e:	1ad3      	subs	r3, r2, r3
 8012ca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012ca2:	8952      	ldrh	r2, [r2, #10]
 8012ca4:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ca8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8012caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d101      	bne.n	8012cb4 <find_volume+0x33c>
 8012cb0:	230d      	movs	r3, #13
 8012cb2:	e0e1      	b.n	8012e78 <find_volume+0x500>
		fmt = FS_FAT32;
 8012cb4:	2303      	movs	r3, #3
 8012cb6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8012cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cbc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d802      	bhi.n	8012cca <find_volume+0x352>
 8012cc4:	2302      	movs	r3, #2
 8012cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8012cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ccc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012cd0:	4293      	cmp	r3, r2
 8012cd2:	d802      	bhi.n	8012cda <find_volume+0x362>
 8012cd4:	2301      	movs	r3, #1
 8012cd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8012cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cdc:	1c9a      	adds	r2, r3, #2
 8012cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8012ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ce4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012ce6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012ce8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012cec:	441a      	add	r2, r3
 8012cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cf0:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8012cf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cf6:	441a      	add	r2, r3
 8012cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cfa:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8012cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d00:	2b03      	cmp	r3, #3
 8012d02:	d11e      	bne.n	8012d42 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d06:	333c      	adds	r3, #60	; 0x3c
 8012d08:	332a      	adds	r3, #42	; 0x2a
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	f7fd fea2 	bl	8010a54 <ld_word>
 8012d10:	4603      	mov	r3, r0
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d001      	beq.n	8012d1a <find_volume+0x3a2>
 8012d16:	230d      	movs	r3, #13
 8012d18:	e0ae      	b.n	8012e78 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d1c:	891b      	ldrh	r3, [r3, #8]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d001      	beq.n	8012d26 <find_volume+0x3ae>
 8012d22:	230d      	movs	r3, #13
 8012d24:	e0a8      	b.n	8012e78 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d28:	333c      	adds	r3, #60	; 0x3c
 8012d2a:	332c      	adds	r3, #44	; 0x2c
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f7fd fea9 	bl	8010a84 <ld_dword>
 8012d32:	4602      	mov	r2, r0
 8012d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d36:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d3a:	6a1b      	ldr	r3, [r3, #32]
 8012d3c:	009b      	lsls	r3, r3, #2
 8012d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8012d40:	e01f      	b.n	8012d82 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d44:	891b      	ldrh	r3, [r3, #8]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d101      	bne.n	8012d4e <find_volume+0x3d6>
 8012d4a:	230d      	movs	r3, #13
 8012d4c:	e094      	b.n	8012e78 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d54:	441a      	add	r2, r3
 8012d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d58:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012d5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012d5e:	2b02      	cmp	r3, #2
 8012d60:	d103      	bne.n	8012d6a <find_volume+0x3f2>
 8012d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d64:	6a1b      	ldr	r3, [r3, #32]
 8012d66:	005b      	lsls	r3, r3, #1
 8012d68:	e00a      	b.n	8012d80 <find_volume+0x408>
 8012d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d6c:	6a1a      	ldr	r2, [r3, #32]
 8012d6e:	4613      	mov	r3, r2
 8012d70:	005b      	lsls	r3, r3, #1
 8012d72:	4413      	add	r3, r2
 8012d74:	085a      	lsrs	r2, r3, #1
 8012d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d78:	6a1b      	ldr	r3, [r3, #32]
 8012d7a:	f003 0301 	and.w	r3, r3, #1
 8012d7e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012d80:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d88:	899b      	ldrh	r3, [r3, #12]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d8e:	440b      	add	r3, r1
 8012d90:	3b01      	subs	r3, #1
 8012d92:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012d94:	8989      	ldrh	r1, [r1, #12]
 8012d96:	fbb3 f3f1 	udiv	r3, r3, r1
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d201      	bcs.n	8012da2 <find_volume+0x42a>
 8012d9e:	230d      	movs	r3, #13
 8012da0:	e06a      	b.n	8012e78 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012da8:	61da      	str	r2, [r3, #28]
 8012daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dac:	69da      	ldr	r2, [r3, #28]
 8012dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	2280      	movs	r2, #128	; 0x80
 8012db6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012db8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012dbc:	2b03      	cmp	r3, #3
 8012dbe:	d149      	bne.n	8012e54 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dc2:	333c      	adds	r3, #60	; 0x3c
 8012dc4:	3330      	adds	r3, #48	; 0x30
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7fd fe44 	bl	8010a54 <ld_word>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	2b01      	cmp	r3, #1
 8012dd0:	d140      	bne.n	8012e54 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	4619      	mov	r1, r3
 8012dd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012dda:	f7fe f91d 	bl	8011018 <move_window>
 8012dde:	4603      	mov	r3, r0
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d137      	bne.n	8012e54 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8012de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012de6:	2200      	movs	r2, #0
 8012de8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dec:	333c      	adds	r3, #60	; 0x3c
 8012dee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fd fe2e 	bl	8010a54 <ld_word>
 8012df8:	4603      	mov	r3, r0
 8012dfa:	461a      	mov	r2, r3
 8012dfc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012e00:	429a      	cmp	r2, r3
 8012e02:	d127      	bne.n	8012e54 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e06:	333c      	adds	r3, #60	; 0x3c
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7fd fe3b 	bl	8010a84 <ld_dword>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	4a1b      	ldr	r2, [pc, #108]	; (8012e80 <find_volume+0x508>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d11e      	bne.n	8012e54 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e18:	333c      	adds	r3, #60	; 0x3c
 8012e1a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f7fd fe30 	bl	8010a84 <ld_dword>
 8012e24:	4603      	mov	r3, r0
 8012e26:	4a17      	ldr	r2, [pc, #92]	; (8012e84 <find_volume+0x50c>)
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	d113      	bne.n	8012e54 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2e:	333c      	adds	r3, #60	; 0x3c
 8012e30:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7fd fe25 	bl	8010a84 <ld_dword>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e42:	333c      	adds	r3, #60	; 0x3c
 8012e44:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012e48:	4618      	mov	r0, r3
 8012e4a:	f7fd fe1b 	bl	8010a84 <ld_dword>
 8012e4e:	4602      	mov	r2, r0
 8012e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e52:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e56:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012e5a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012e5c:	4b0a      	ldr	r3, [pc, #40]	; (8012e88 <find_volume+0x510>)
 8012e5e:	881b      	ldrh	r3, [r3, #0]
 8012e60:	3301      	adds	r3, #1
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	4b08      	ldr	r3, [pc, #32]	; (8012e88 <find_volume+0x510>)
 8012e66:	801a      	strh	r2, [r3, #0]
 8012e68:	4b07      	ldr	r3, [pc, #28]	; (8012e88 <find_volume+0x510>)
 8012e6a:	881a      	ldrh	r2, [r3, #0]
 8012e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e6e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012e70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e72:	f7fe f869 	bl	8010f48 <clear_lock>
#endif
	return FR_OK;
 8012e76:	2300      	movs	r3, #0
}
 8012e78:	4618      	mov	r0, r3
 8012e7a:	3758      	adds	r7, #88	; 0x58
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	41615252 	.word	0x41615252
 8012e84:	61417272 	.word	0x61417272
 8012e88:	20002854 	.word	0x20002854

08012e8c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
 8012e94:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012e96:	2309      	movs	r3, #9
 8012e98:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d02e      	beq.n	8012efe <validate+0x72>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d02a      	beq.n	8012efe <validate+0x72>
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	781b      	ldrb	r3, [r3, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d025      	beq.n	8012efe <validate+0x72>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	889a      	ldrh	r2, [r3, #4]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	88db      	ldrh	r3, [r3, #6]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d11e      	bne.n	8012efe <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	f7fd fec5 	bl	8010c54 <lock_fs>
 8012eca:	4603      	mov	r3, r0
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d014      	beq.n	8012efa <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	785b      	ldrb	r3, [r3, #1]
 8012ed6:	4618      	mov	r0, r3
 8012ed8:	f7fd fd1e 	bl	8010918 <disk_status>
 8012edc:	4603      	mov	r3, r0
 8012ede:	f003 0301 	and.w	r3, r3, #1
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <validate+0x60>
				res = FR_OK;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	73fb      	strb	r3, [r7, #15]
 8012eea:	e008      	b.n	8012efe <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2100      	movs	r1, #0
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7fd fec4 	bl	8010c80 <unlock_fs>
 8012ef8:	e001      	b.n	8012efe <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8012efa:	230f      	movs	r3, #15
 8012efc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012efe:	7bfb      	ldrb	r3, [r7, #15]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d102      	bne.n	8012f0a <validate+0x7e>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	e000      	b.n	8012f0c <validate+0x80>
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	683a      	ldr	r2, [r7, #0]
 8012f0e:	6013      	str	r3, [r2, #0]
	return res;
 8012f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
	...

08012f1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b088      	sub	sp, #32
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	60f8      	str	r0, [r7, #12]
 8012f24:	60b9      	str	r1, [r7, #8]
 8012f26:	4613      	mov	r3, r2
 8012f28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012f2a:	68bb      	ldr	r3, [r7, #8]
 8012f2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012f2e:	f107 0310 	add.w	r3, r7, #16
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7ff fc86 	bl	8012844 <get_ldnumber>
 8012f38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	2b00      	cmp	r3, #0
 8012f3e:	da01      	bge.n	8012f44 <f_mount+0x28>
 8012f40:	230b      	movs	r3, #11
 8012f42:	e048      	b.n	8012fd6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012f44:	4a26      	ldr	r2, [pc, #152]	; (8012fe0 <f_mount+0xc4>)
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012f4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012f4e:	69bb      	ldr	r3, [r7, #24]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d00f      	beq.n	8012f74 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012f54:	69b8      	ldr	r0, [r7, #24]
 8012f56:	f7fd fff7 	bl	8010f48 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8012f5a:	69bb      	ldr	r3, [r7, #24]
 8012f5c:	695b      	ldr	r3, [r3, #20]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f001 f805 	bl	8013f6e <ff_del_syncobj>
 8012f64:	4603      	mov	r3, r0
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d101      	bne.n	8012f6e <f_mount+0x52>
 8012f6a:	2302      	movs	r3, #2
 8012f6c:	e033      	b.n	8012fd6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012f6e:	69bb      	ldr	r3, [r7, #24]
 8012f70:	2200      	movs	r2, #0
 8012f72:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d00f      	beq.n	8012f9a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	3314      	adds	r3, #20
 8012f88:	4619      	mov	r1, r3
 8012f8a:	4610      	mov	r0, r2
 8012f8c:	f000 ffd4 	bl	8013f38 <ff_cre_syncobj>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d101      	bne.n	8012f9a <f_mount+0x7e>
 8012f96:	2302      	movs	r3, #2
 8012f98:	e01d      	b.n	8012fd6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012f9a:	68fa      	ldr	r2, [r7, #12]
 8012f9c:	4910      	ldr	r1, [pc, #64]	; (8012fe0 <f_mount+0xc4>)
 8012f9e:	69fb      	ldr	r3, [r7, #28]
 8012fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d002      	beq.n	8012fb0 <f_mount+0x94>
 8012faa:	79fb      	ldrb	r3, [r7, #7]
 8012fac:	2b01      	cmp	r3, #1
 8012fae:	d001      	beq.n	8012fb4 <f_mount+0x98>
 8012fb0:	2300      	movs	r3, #0
 8012fb2:	e010      	b.n	8012fd6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012fb4:	f107 010c 	add.w	r1, r7, #12
 8012fb8:	f107 0308 	add.w	r3, r7, #8
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7ff fcda 	bl	8012978 <find_volume>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	7dfa      	ldrb	r2, [r7, #23]
 8012fcc:	4611      	mov	r1, r2
 8012fce:	4618      	mov	r0, r3
 8012fd0:	f7fd fe56 	bl	8010c80 <unlock_fs>
 8012fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3720      	adds	r7, #32
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	20002850 	.word	0x20002850

08012fe4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8012fea:	af00      	add	r7, sp, #0
 8012fec:	f107 030c 	add.w	r3, r7, #12
 8012ff0:	6018      	str	r0, [r3, #0]
 8012ff2:	f107 0308 	add.w	r3, r7, #8
 8012ff6:	6019      	str	r1, [r3, #0]
 8012ff8:	1dfb      	adds	r3, r7, #7
 8012ffa:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012ffc:	f107 030c 	add.w	r3, r7, #12
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	2b00      	cmp	r3, #0
 8013004:	d101      	bne.n	801300a <f_open+0x26>
 8013006:	2309      	movs	r3, #9
 8013008:	e24a      	b.n	80134a0 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801300a:	1dfb      	adds	r3, r7, #7
 801300c:	1dfa      	adds	r2, r7, #7
 801300e:	7812      	ldrb	r2, [r2, #0]
 8013010:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013014:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8013016:	1dfb      	adds	r3, r7, #7
 8013018:	781a      	ldrb	r2, [r3, #0]
 801301a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 801301e:	f107 0308 	add.w	r3, r7, #8
 8013022:	4618      	mov	r0, r3
 8013024:	f7ff fca8 	bl	8012978 <find_volume>
 8013028:	4603      	mov	r3, r0
 801302a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 801302e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013032:	2b00      	cmp	r3, #0
 8013034:	f040 8221 	bne.w	801347a <f_open+0x496>
		dj.obj.fs = fs;
 8013038:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801303c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8013040:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013044:	f107 0214 	add.w	r2, r7, #20
 8013048:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801304a:	f107 0308 	add.w	r3, r7, #8
 801304e:	681a      	ldr	r2, [r3, #0]
 8013050:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013054:	4611      	mov	r1, r2
 8013056:	4618      	mov	r0, r3
 8013058:	f7ff fb7e 	bl	8012758 <follow_path>
 801305c:	4603      	mov	r3, r0
 801305e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013062:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013066:	2b00      	cmp	r3, #0
 8013068:	d11b      	bne.n	80130a2 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801306a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 801306e:	b25b      	sxtb	r3, r3
 8013070:	2b00      	cmp	r3, #0
 8013072:	da03      	bge.n	801307c <f_open+0x98>
				res = FR_INVALID_NAME;
 8013074:	2306      	movs	r3, #6
 8013076:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801307a:	e012      	b.n	80130a2 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801307c:	1dfb      	adds	r3, r7, #7
 801307e:	781b      	ldrb	r3, [r3, #0]
 8013080:	f023 0301 	bic.w	r3, r3, #1
 8013084:	2b00      	cmp	r3, #0
 8013086:	bf14      	ite	ne
 8013088:	2301      	movne	r3, #1
 801308a:	2300      	moveq	r3, #0
 801308c:	b2db      	uxtb	r3, r3
 801308e:	461a      	mov	r2, r3
 8013090:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013094:	4611      	mov	r1, r2
 8013096:	4618      	mov	r0, r3
 8013098:	f7fd fe0e 	bl	8010cb8 <chk_lock>
 801309c:	4603      	mov	r3, r0
 801309e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80130a2:	1dfb      	adds	r3, r7, #7
 80130a4:	781b      	ldrb	r3, [r3, #0]
 80130a6:	f003 031c 	and.w	r3, r3, #28
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	f000 809b 	beq.w	80131e6 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 80130b0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d019      	beq.n	80130ec <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80130b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80130bc:	2b04      	cmp	r3, #4
 80130be:	d10e      	bne.n	80130de <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80130c0:	f7fd fe56 	bl	8010d70 <enq_lock>
 80130c4:	4603      	mov	r3, r0
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d006      	beq.n	80130d8 <f_open+0xf4>
 80130ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80130ce:	4618      	mov	r0, r3
 80130d0:	f7fe ffb4 	bl	801203c <dir_register>
 80130d4:	4603      	mov	r3, r0
 80130d6:	e000      	b.n	80130da <f_open+0xf6>
 80130d8:	2312      	movs	r3, #18
 80130da:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80130de:	1dfb      	adds	r3, r7, #7
 80130e0:	1dfa      	adds	r2, r7, #7
 80130e2:	7812      	ldrb	r2, [r2, #0]
 80130e4:	f042 0208 	orr.w	r2, r2, #8
 80130e8:	701a      	strb	r2, [r3, #0]
 80130ea:	e012      	b.n	8013112 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80130ec:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80130f0:	f003 0311 	and.w	r3, r3, #17
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d003      	beq.n	8013100 <f_open+0x11c>
					res = FR_DENIED;
 80130f8:	2307      	movs	r3, #7
 80130fa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80130fe:	e008      	b.n	8013112 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013100:	1dfb      	adds	r3, r7, #7
 8013102:	781b      	ldrb	r3, [r3, #0]
 8013104:	f003 0304 	and.w	r3, r3, #4
 8013108:	2b00      	cmp	r3, #0
 801310a:	d002      	beq.n	8013112 <f_open+0x12e>
 801310c:	2308      	movs	r3, #8
 801310e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013112:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013116:	2b00      	cmp	r3, #0
 8013118:	f040 8082 	bne.w	8013220 <f_open+0x23c>
 801311c:	1dfb      	adds	r3, r7, #7
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	f003 0308 	and.w	r3, r3, #8
 8013124:	2b00      	cmp	r3, #0
 8013126:	d07b      	beq.n	8013220 <f_open+0x23c>
				dw = GET_FATTIME();
 8013128:	f7fb ff04 	bl	800ef34 <get_fattime>
 801312c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013130:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013134:	330e      	adds	r3, #14
 8013136:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801313a:	4618      	mov	r0, r3
 801313c:	f7fd fce0 	bl	8010b00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013140:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013144:	3316      	adds	r3, #22
 8013146:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801314a:	4618      	mov	r0, r3
 801314c:	f7fd fcd8 	bl	8010b00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013150:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013154:	330b      	adds	r3, #11
 8013156:	2220      	movs	r2, #32
 8013158:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801315a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801315e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013162:	4611      	mov	r1, r2
 8013164:	4618      	mov	r0, r3
 8013166:	f7fe fcdf 	bl	8011b28 <ld_clust>
 801316a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801316e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013172:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8013176:	2200      	movs	r2, #0
 8013178:	4618      	mov	r0, r3
 801317a:	f7fe fcf4 	bl	8011b66 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801317e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013182:	331c      	adds	r3, #28
 8013184:	2100      	movs	r1, #0
 8013186:	4618      	mov	r0, r3
 8013188:	f7fd fcba 	bl	8010b00 <st_dword>
					fs->wflag = 1;
 801318c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013190:	2201      	movs	r2, #1
 8013192:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013194:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013198:	2b00      	cmp	r3, #0
 801319a:	d041      	beq.n	8013220 <f_open+0x23c>
						dw = fs->winsect;
 801319c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80131a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131a2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80131a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80131aa:	2200      	movs	r2, #0
 80131ac:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7fe f9de 	bl	8011572 <remove_chain>
 80131b6:	4603      	mov	r3, r0
 80131b8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80131bc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d12d      	bne.n	8013220 <f_open+0x23c>
							res = move_window(fs, dw);
 80131c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80131c8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fd ff23 	bl	8011018 <move_window>
 80131d2:	4603      	mov	r3, r0
 80131d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80131d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80131dc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80131e0:	3a01      	subs	r2, #1
 80131e2:	619a      	str	r2, [r3, #24]
 80131e4:	e01c      	b.n	8013220 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80131e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d118      	bne.n	8013220 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80131ee:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80131f2:	f003 0310 	and.w	r3, r3, #16
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d003      	beq.n	8013202 <f_open+0x21e>
					res = FR_NO_FILE;
 80131fa:	2304      	movs	r3, #4
 80131fc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013200:	e00e      	b.n	8013220 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013202:	1dfb      	adds	r3, r7, #7
 8013204:	781b      	ldrb	r3, [r3, #0]
 8013206:	f003 0302 	and.w	r3, r3, #2
 801320a:	2b00      	cmp	r3, #0
 801320c:	d008      	beq.n	8013220 <f_open+0x23c>
 801320e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013212:	f003 0301 	and.w	r3, r3, #1
 8013216:	2b00      	cmp	r3, #0
 8013218:	d002      	beq.n	8013220 <f_open+0x23c>
						res = FR_DENIED;
 801321a:	2307      	movs	r3, #7
 801321c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8013220:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013224:	2b00      	cmp	r3, #0
 8013226:	d136      	bne.n	8013296 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013228:	1dfb      	adds	r3, r7, #7
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	f003 0308 	and.w	r3, r3, #8
 8013230:	2b00      	cmp	r3, #0
 8013232:	d005      	beq.n	8013240 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8013234:	1dfb      	adds	r3, r7, #7
 8013236:	1dfa      	adds	r2, r7, #7
 8013238:	7812      	ldrb	r2, [r2, #0]
 801323a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801323e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013240:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013246:	f107 030c 	add.w	r3, r7, #12
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801324e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013252:	f107 030c 	add.w	r3, r7, #12
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801325a:	1dfb      	adds	r3, r7, #7
 801325c:	781b      	ldrb	r3, [r3, #0]
 801325e:	f023 0301 	bic.w	r3, r3, #1
 8013262:	2b00      	cmp	r3, #0
 8013264:	bf14      	ite	ne
 8013266:	2301      	movne	r3, #1
 8013268:	2300      	moveq	r3, #0
 801326a:	b2db      	uxtb	r3, r3
 801326c:	461a      	mov	r2, r3
 801326e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013272:	4611      	mov	r1, r2
 8013274:	4618      	mov	r0, r3
 8013276:	f7fd fd9d 	bl	8010db4 <inc_lock>
 801327a:	4602      	mov	r2, r0
 801327c:	f107 030c 	add.w	r3, r7, #12
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013284:	f107 030c 	add.w	r3, r7, #12
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	691b      	ldr	r3, [r3, #16]
 801328c:	2b00      	cmp	r3, #0
 801328e:	d102      	bne.n	8013296 <f_open+0x2b2>
 8013290:	2302      	movs	r3, #2
 8013292:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8013296:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801329a:	2b00      	cmp	r3, #0
 801329c:	f040 80ed 	bne.w	801347a <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80132a0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132a4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80132a8:	4611      	mov	r1, r2
 80132aa:	4618      	mov	r0, r3
 80132ac:	f7fe fc3c 	bl	8011b28 <ld_clust>
 80132b0:	4602      	mov	r2, r0
 80132b2:	f107 030c 	add.w	r3, r7, #12
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80132ba:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80132be:	331c      	adds	r3, #28
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fd fbdf 	bl	8010a84 <ld_dword>
 80132c6:	4602      	mov	r2, r0
 80132c8:	f107 030c 	add.w	r3, r7, #12
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80132d0:	f107 030c 	add.w	r3, r7, #12
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2200      	movs	r2, #0
 80132d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80132da:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80132de:	f107 030c 	add.w	r3, r7, #12
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80132e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80132ea:	88da      	ldrh	r2, [r3, #6]
 80132ec:	f107 030c 	add.w	r3, r7, #12
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80132f4:	f107 030c 	add.w	r3, r7, #12
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	1dfa      	adds	r2, r7, #7
 80132fc:	7812      	ldrb	r2, [r2, #0]
 80132fe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8013300:	f107 030c 	add.w	r3, r7, #12
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2200      	movs	r2, #0
 8013308:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801330a:	f107 030c 	add.w	r3, r7, #12
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	2200      	movs	r2, #0
 8013312:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013314:	f107 030c 	add.w	r3, r7, #12
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	2200      	movs	r2, #0
 801331c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801331e:	f107 030c 	add.w	r3, r7, #12
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	3330      	adds	r3, #48	; 0x30
 8013326:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801332a:	2100      	movs	r1, #0
 801332c:	4618      	mov	r0, r3
 801332e:	f7fd fc34 	bl	8010b9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013332:	1dfb      	adds	r3, r7, #7
 8013334:	781b      	ldrb	r3, [r3, #0]
 8013336:	f003 0320 	and.w	r3, r3, #32
 801333a:	2b00      	cmp	r3, #0
 801333c:	f000 809d 	beq.w	801347a <f_open+0x496>
 8013340:	f107 030c 	add.w	r3, r7, #12
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	68db      	ldr	r3, [r3, #12]
 8013348:	2b00      	cmp	r3, #0
 801334a:	f000 8096 	beq.w	801347a <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801334e:	f107 030c 	add.w	r3, r7, #12
 8013352:	681b      	ldr	r3, [r3, #0]
 8013354:	68da      	ldr	r2, [r3, #12]
 8013356:	f107 030c 	add.w	r3, r7, #12
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801335e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013362:	895b      	ldrh	r3, [r3, #10]
 8013364:	461a      	mov	r2, r3
 8013366:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801336a:	899b      	ldrh	r3, [r3, #12]
 801336c:	fb03 f302 	mul.w	r3, r3, r2
 8013370:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8013374:	f107 030c 	add.w	r3, r7, #12
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	689b      	ldr	r3, [r3, #8]
 801337c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013380:	f107 030c 	add.w	r3, r7, #12
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	68db      	ldr	r3, [r3, #12]
 8013388:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 801338c:	e01f      	b.n	80133ce <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 801338e:	f107 030c 	add.w	r3, r7, #12
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8013398:	4618      	mov	r0, r3
 801339a:	f7fd fefa 	bl	8011192 <get_fat>
 801339e:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80133a2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80133a6:	2b01      	cmp	r3, #1
 80133a8:	d802      	bhi.n	80133b0 <f_open+0x3cc>
 80133aa:	2302      	movs	r3, #2
 80133ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80133b0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80133b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133b8:	d102      	bne.n	80133c0 <f_open+0x3dc>
 80133ba:	2301      	movs	r3, #1
 80133bc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80133c0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80133c4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80133c8:	1ad3      	subs	r3, r2, r3
 80133ca:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80133ce:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d105      	bne.n	80133e2 <f_open+0x3fe>
 80133d6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80133da:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80133de:	429a      	cmp	r2, r3
 80133e0:	d8d5      	bhi.n	801338e <f_open+0x3aa>
				}
				fp->clust = clst;
 80133e2:	f107 030c 	add.w	r3, r7, #12
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80133ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80133ee:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d141      	bne.n	801347a <f_open+0x496>
 80133f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80133fa:	899b      	ldrh	r3, [r3, #12]
 80133fc:	461a      	mov	r2, r3
 80133fe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8013402:	fbb3 f1f2 	udiv	r1, r3, r2
 8013406:	fb02 f201 	mul.w	r2, r2, r1
 801340a:	1a9b      	subs	r3, r3, r2
 801340c:	2b00      	cmp	r3, #0
 801340e:	d034      	beq.n	801347a <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013410:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013414:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8013418:	4618      	mov	r0, r3
 801341a:	f7fd fe9b 	bl	8011154 <clust2sect>
 801341e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8013422:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013426:	2b00      	cmp	r3, #0
 8013428:	d103      	bne.n	8013432 <f_open+0x44e>
						res = FR_INT_ERR;
 801342a:	2302      	movs	r3, #2
 801342c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013430:	e023      	b.n	801347a <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013432:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013436:	899b      	ldrh	r3, [r3, #12]
 8013438:	461a      	mov	r2, r3
 801343a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801343e:	fbb3 f2f2 	udiv	r2, r3, r2
 8013442:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013446:	441a      	add	r2, r3
 8013448:	f107 030c 	add.w	r3, r7, #12
 801344c:	681b      	ldr	r3, [r3, #0]
 801344e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013450:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013454:	7858      	ldrb	r0, [r3, #1]
 8013456:	f107 030c 	add.w	r3, r7, #12
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013460:	f107 030c 	add.w	r3, r7, #12
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	6a1a      	ldr	r2, [r3, #32]
 8013468:	2301      	movs	r3, #1
 801346a:	f7fd fa95 	bl	8010998 <disk_read>
 801346e:	4603      	mov	r3, r0
 8013470:	2b00      	cmp	r3, #0
 8013472:	d002      	beq.n	801347a <f_open+0x496>
 8013474:	2301      	movs	r3, #1
 8013476:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801347a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801347e:	2b00      	cmp	r3, #0
 8013480:	d004      	beq.n	801348c <f_open+0x4a8>
 8013482:	f107 030c 	add.w	r3, r7, #12
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	2200      	movs	r2, #0
 801348a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801348c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013490:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8013494:	4611      	mov	r1, r2
 8013496:	4618      	mov	r0, r3
 8013498:	f7fd fbf2 	bl	8010c80 <unlock_fs>
 801349c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80134a0:	4618      	mov	r0, r3
 80134a2:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b08c      	sub	sp, #48	; 0x30
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	60f8      	str	r0, [r7, #12]
 80134b2:	60b9      	str	r1, [r7, #8]
 80134b4:	607a      	str	r2, [r7, #4]
 80134b6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	2200      	movs	r2, #0
 80134c0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f107 0210 	add.w	r2, r7, #16
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7ff fcde 	bl	8012e8c <validate>
 80134d0:	4603      	mov	r3, r0
 80134d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80134d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d107      	bne.n	80134ee <f_write+0x44>
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	7d5b      	ldrb	r3, [r3, #21]
 80134e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80134e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d009      	beq.n	8013502 <f_write+0x58>
 80134ee:	693b      	ldr	r3, [r7, #16]
 80134f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80134f4:	4611      	mov	r1, r2
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fd fbc2 	bl	8010c80 <unlock_fs>
 80134fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013500:	e192      	b.n	8013828 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	7d1b      	ldrb	r3, [r3, #20]
 8013506:	f003 0302 	and.w	r3, r3, #2
 801350a:	2b00      	cmp	r3, #0
 801350c:	d106      	bne.n	801351c <f_write+0x72>
 801350e:	693b      	ldr	r3, [r7, #16]
 8013510:	2107      	movs	r1, #7
 8013512:	4618      	mov	r0, r3
 8013514:	f7fd fbb4 	bl	8010c80 <unlock_fs>
 8013518:	2307      	movs	r3, #7
 801351a:	e185      	b.n	8013828 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	699a      	ldr	r2, [r3, #24]
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	441a      	add	r2, r3
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	699b      	ldr	r3, [r3, #24]
 8013528:	429a      	cmp	r2, r3
 801352a:	f080 816a 	bcs.w	8013802 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	699b      	ldr	r3, [r3, #24]
 8013532:	43db      	mvns	r3, r3
 8013534:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013536:	e164      	b.n	8013802 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	699b      	ldr	r3, [r3, #24]
 801353c:	693a      	ldr	r2, [r7, #16]
 801353e:	8992      	ldrh	r2, [r2, #12]
 8013540:	fbb3 f1f2 	udiv	r1, r3, r2
 8013544:	fb02 f201 	mul.w	r2, r2, r1
 8013548:	1a9b      	subs	r3, r3, r2
 801354a:	2b00      	cmp	r3, #0
 801354c:	f040 810f 	bne.w	801376e <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	699b      	ldr	r3, [r3, #24]
 8013554:	693a      	ldr	r2, [r7, #16]
 8013556:	8992      	ldrh	r2, [r2, #12]
 8013558:	fbb3 f3f2 	udiv	r3, r3, r2
 801355c:	693a      	ldr	r2, [r7, #16]
 801355e:	8952      	ldrh	r2, [r2, #10]
 8013560:	3a01      	subs	r2, #1
 8013562:	4013      	ands	r3, r2
 8013564:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8013566:	69bb      	ldr	r3, [r7, #24]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d14d      	bne.n	8013608 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	699b      	ldr	r3, [r3, #24]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d10c      	bne.n	801358e <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	689b      	ldr	r3, [r3, #8]
 8013578:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357c:	2b00      	cmp	r3, #0
 801357e:	d11a      	bne.n	80135b6 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	2100      	movs	r1, #0
 8013584:	4618      	mov	r0, r3
 8013586:	f7fe f859 	bl	801163c <create_chain>
 801358a:	62b8      	str	r0, [r7, #40]	; 0x28
 801358c:	e013      	b.n	80135b6 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013592:	2b00      	cmp	r3, #0
 8013594:	d007      	beq.n	80135a6 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	699b      	ldr	r3, [r3, #24]
 801359a:	4619      	mov	r1, r3
 801359c:	68f8      	ldr	r0, [r7, #12]
 801359e:	f7fe f8e5 	bl	801176c <clmt_clust>
 80135a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80135a4:	e007      	b.n	80135b6 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80135a6:	68fa      	ldr	r2, [r7, #12]
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	69db      	ldr	r3, [r3, #28]
 80135ac:	4619      	mov	r1, r3
 80135ae:	4610      	mov	r0, r2
 80135b0:	f7fe f844 	bl	801163c <create_chain>
 80135b4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80135b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	f000 8127 	beq.w	801380c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80135be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c0:	2b01      	cmp	r3, #1
 80135c2:	d109      	bne.n	80135d8 <f_write+0x12e>
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	2202      	movs	r2, #2
 80135c8:	755a      	strb	r2, [r3, #21]
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	2102      	movs	r1, #2
 80135ce:	4618      	mov	r0, r3
 80135d0:	f7fd fb56 	bl	8010c80 <unlock_fs>
 80135d4:	2302      	movs	r3, #2
 80135d6:	e127      	b.n	8013828 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80135d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135de:	d109      	bne.n	80135f4 <f_write+0x14a>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	2201      	movs	r2, #1
 80135e4:	755a      	strb	r2, [r3, #21]
 80135e6:	693b      	ldr	r3, [r7, #16]
 80135e8:	2101      	movs	r1, #1
 80135ea:	4618      	mov	r0, r3
 80135ec:	f7fd fb48 	bl	8010c80 <unlock_fs>
 80135f0:	2301      	movs	r3, #1
 80135f2:	e119      	b.n	8013828 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135f8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80135fa:	68fb      	ldr	r3, [r7, #12]
 80135fc:	689b      	ldr	r3, [r3, #8]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d102      	bne.n	8013608 <f_write+0x15e>
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013606:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	7d1b      	ldrb	r3, [r3, #20]
 801360c:	b25b      	sxtb	r3, r3
 801360e:	2b00      	cmp	r3, #0
 8013610:	da1d      	bge.n	801364e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013612:	693b      	ldr	r3, [r7, #16]
 8013614:	7858      	ldrb	r0, [r3, #1]
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	6a1a      	ldr	r2, [r3, #32]
 8013620:	2301      	movs	r3, #1
 8013622:	f7fd f9d9 	bl	80109d8 <disk_write>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d009      	beq.n	8013640 <f_write+0x196>
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	2201      	movs	r2, #1
 8013630:	755a      	strb	r2, [r3, #21]
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2101      	movs	r1, #1
 8013636:	4618      	mov	r0, r3
 8013638:	f7fd fb22 	bl	8010c80 <unlock_fs>
 801363c:	2301      	movs	r3, #1
 801363e:	e0f3      	b.n	8013828 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013640:	68fb      	ldr	r3, [r7, #12]
 8013642:	7d1b      	ldrb	r3, [r3, #20]
 8013644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013648:	b2da      	uxtb	r2, r3
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801364e:	693a      	ldr	r2, [r7, #16]
 8013650:	68fb      	ldr	r3, [r7, #12]
 8013652:	69db      	ldr	r3, [r3, #28]
 8013654:	4619      	mov	r1, r3
 8013656:	4610      	mov	r0, r2
 8013658:	f7fd fd7c 	bl	8011154 <clust2sect>
 801365c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d109      	bne.n	8013678 <f_write+0x1ce>
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2202      	movs	r2, #2
 8013668:	755a      	strb	r2, [r3, #21]
 801366a:	693b      	ldr	r3, [r7, #16]
 801366c:	2102      	movs	r1, #2
 801366e:	4618      	mov	r0, r3
 8013670:	f7fd fb06 	bl	8010c80 <unlock_fs>
 8013674:	2302      	movs	r3, #2
 8013676:	e0d7      	b.n	8013828 <f_write+0x37e>
			sect += csect;
 8013678:	697a      	ldr	r2, [r7, #20]
 801367a:	69bb      	ldr	r3, [r7, #24]
 801367c:	4413      	add	r3, r2
 801367e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013680:	693b      	ldr	r3, [r7, #16]
 8013682:	899b      	ldrh	r3, [r3, #12]
 8013684:	461a      	mov	r2, r3
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	fbb3 f3f2 	udiv	r3, r3, r2
 801368c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801368e:	6a3b      	ldr	r3, [r7, #32]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d048      	beq.n	8013726 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013694:	69ba      	ldr	r2, [r7, #24]
 8013696:	6a3b      	ldr	r3, [r7, #32]
 8013698:	4413      	add	r3, r2
 801369a:	693a      	ldr	r2, [r7, #16]
 801369c:	8952      	ldrh	r2, [r2, #10]
 801369e:	4293      	cmp	r3, r2
 80136a0:	d905      	bls.n	80136ae <f_write+0x204>
					cc = fs->csize - csect;
 80136a2:	693b      	ldr	r3, [r7, #16]
 80136a4:	895b      	ldrh	r3, [r3, #10]
 80136a6:	461a      	mov	r2, r3
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80136ae:	693b      	ldr	r3, [r7, #16]
 80136b0:	7858      	ldrb	r0, [r3, #1]
 80136b2:	6a3b      	ldr	r3, [r7, #32]
 80136b4:	697a      	ldr	r2, [r7, #20]
 80136b6:	69f9      	ldr	r1, [r7, #28]
 80136b8:	f7fd f98e 	bl	80109d8 <disk_write>
 80136bc:	4603      	mov	r3, r0
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d009      	beq.n	80136d6 <f_write+0x22c>
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	2201      	movs	r2, #1
 80136c6:	755a      	strb	r2, [r3, #21]
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	2101      	movs	r1, #1
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7fd fad7 	bl	8010c80 <unlock_fs>
 80136d2:	2301      	movs	r3, #1
 80136d4:	e0a8      	b.n	8013828 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	6a1a      	ldr	r2, [r3, #32]
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	1ad3      	subs	r3, r2, r3
 80136de:	6a3a      	ldr	r2, [r7, #32]
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d918      	bls.n	8013716 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	6a1a      	ldr	r2, [r3, #32]
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	1ad3      	subs	r3, r2, r3
 80136f2:	693a      	ldr	r2, [r7, #16]
 80136f4:	8992      	ldrh	r2, [r2, #12]
 80136f6:	fb02 f303 	mul.w	r3, r2, r3
 80136fa:	69fa      	ldr	r2, [r7, #28]
 80136fc:	18d1      	adds	r1, r2, r3
 80136fe:	693b      	ldr	r3, [r7, #16]
 8013700:	899b      	ldrh	r3, [r3, #12]
 8013702:	461a      	mov	r2, r3
 8013704:	f7fd fa28 	bl	8010b58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	7d1b      	ldrb	r3, [r3, #20]
 801370c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013710:	b2da      	uxtb	r2, r3
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	899b      	ldrh	r3, [r3, #12]
 801371a:	461a      	mov	r2, r3
 801371c:	6a3b      	ldr	r3, [r7, #32]
 801371e:	fb02 f303 	mul.w	r3, r2, r3
 8013722:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013724:	e050      	b.n	80137c8 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	6a1b      	ldr	r3, [r3, #32]
 801372a:	697a      	ldr	r2, [r7, #20]
 801372c:	429a      	cmp	r2, r3
 801372e:	d01b      	beq.n	8013768 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	699a      	ldr	r2, [r3, #24]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013738:	429a      	cmp	r2, r3
 801373a:	d215      	bcs.n	8013768 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	7858      	ldrb	r0, [r3, #1]
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013746:	2301      	movs	r3, #1
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	f7fd f925 	bl	8010998 <disk_read>
 801374e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8013750:	2b00      	cmp	r3, #0
 8013752:	d009      	beq.n	8013768 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	2201      	movs	r2, #1
 8013758:	755a      	strb	r2, [r3, #21]
 801375a:	693b      	ldr	r3, [r7, #16]
 801375c:	2101      	movs	r1, #1
 801375e:	4618      	mov	r0, r3
 8013760:	f7fd fa8e 	bl	8010c80 <unlock_fs>
 8013764:	2301      	movs	r3, #1
 8013766:	e05f      	b.n	8013828 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	697a      	ldr	r2, [r7, #20]
 801376c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	899b      	ldrh	r3, [r3, #12]
 8013772:	4618      	mov	r0, r3
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	699b      	ldr	r3, [r3, #24]
 8013778:	693a      	ldr	r2, [r7, #16]
 801377a:	8992      	ldrh	r2, [r2, #12]
 801377c:	fbb3 f1f2 	udiv	r1, r3, r2
 8013780:	fb02 f201 	mul.w	r2, r2, r1
 8013784:	1a9b      	subs	r3, r3, r2
 8013786:	1ac3      	subs	r3, r0, r3
 8013788:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801378a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	429a      	cmp	r2, r3
 8013790:	d901      	bls.n	8013796 <f_write+0x2ec>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	699b      	ldr	r3, [r3, #24]
 80137a0:	693a      	ldr	r2, [r7, #16]
 80137a2:	8992      	ldrh	r2, [r2, #12]
 80137a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80137a8:	fb02 f200 	mul.w	r2, r2, r0
 80137ac:	1a9b      	subs	r3, r3, r2
 80137ae:	440b      	add	r3, r1
 80137b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80137b2:	69f9      	ldr	r1, [r7, #28]
 80137b4:	4618      	mov	r0, r3
 80137b6:	f7fd f9cf 	bl	8010b58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	7d1b      	ldrb	r3, [r3, #20]
 80137be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80137c2:	b2da      	uxtb	r2, r3
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80137c8:	69fa      	ldr	r2, [r7, #28]
 80137ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137cc:	4413      	add	r3, r2
 80137ce:	61fb      	str	r3, [r7, #28]
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	699a      	ldr	r2, [r3, #24]
 80137d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d6:	441a      	add	r2, r3
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	619a      	str	r2, [r3, #24]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	68da      	ldr	r2, [r3, #12]
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	699b      	ldr	r3, [r3, #24]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	bf38      	it	cc
 80137e8:	461a      	movcc	r2, r3
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	60da      	str	r2, [r3, #12]
 80137ee:	683b      	ldr	r3, [r7, #0]
 80137f0:	681a      	ldr	r2, [r3, #0]
 80137f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137f4:	441a      	add	r2, r3
 80137f6:	683b      	ldr	r3, [r7, #0]
 80137f8:	601a      	str	r2, [r3, #0]
 80137fa:	687a      	ldr	r2, [r7, #4]
 80137fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	2b00      	cmp	r3, #0
 8013806:	f47f ae97 	bne.w	8013538 <f_write+0x8e>
 801380a:	e000      	b.n	801380e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801380c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	7d1b      	ldrb	r3, [r3, #20]
 8013812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013816:	b2da      	uxtb	r2, r3
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	2100      	movs	r1, #0
 8013820:	4618      	mov	r0, r3
 8013822:	f7fd fa2d 	bl	8010c80 <unlock_fs>
 8013826:	2300      	movs	r3, #0
}
 8013828:	4618      	mov	r0, r3
 801382a:	3730      	adds	r7, #48	; 0x30
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b086      	sub	sp, #24
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	f107 0208 	add.w	r2, r7, #8
 801383e:	4611      	mov	r1, r2
 8013840:	4618      	mov	r0, r3
 8013842:	f7ff fb23 	bl	8012e8c <validate>
 8013846:	4603      	mov	r3, r0
 8013848:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801384a:	7dfb      	ldrb	r3, [r7, #23]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d16d      	bne.n	801392c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	7d1b      	ldrb	r3, [r3, #20]
 8013854:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013858:	2b00      	cmp	r3, #0
 801385a:	d067      	beq.n	801392c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	7d1b      	ldrb	r3, [r3, #20]
 8013860:	b25b      	sxtb	r3, r3
 8013862:	2b00      	cmp	r3, #0
 8013864:	da1a      	bge.n	801389c <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	7858      	ldrb	r0, [r3, #1]
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6a1a      	ldr	r2, [r3, #32]
 8013874:	2301      	movs	r3, #1
 8013876:	f7fd f8af 	bl	80109d8 <disk_write>
 801387a:	4603      	mov	r3, r0
 801387c:	2b00      	cmp	r3, #0
 801387e:	d006      	beq.n	801388e <f_sync+0x5e>
 8013880:	68bb      	ldr	r3, [r7, #8]
 8013882:	2101      	movs	r1, #1
 8013884:	4618      	mov	r0, r3
 8013886:	f7fd f9fb 	bl	8010c80 <unlock_fs>
 801388a:	2301      	movs	r3, #1
 801388c:	e055      	b.n	801393a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	7d1b      	ldrb	r3, [r3, #20]
 8013892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013896:	b2da      	uxtb	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801389c:	f7fb fb4a 	bl	800ef34 <get_fattime>
 80138a0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80138a2:	68ba      	ldr	r2, [r7, #8]
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138a8:	4619      	mov	r1, r3
 80138aa:	4610      	mov	r0, r2
 80138ac:	f7fd fbb4 	bl	8011018 <move_window>
 80138b0:	4603      	mov	r3, r0
 80138b2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80138b4:	7dfb      	ldrb	r3, [r7, #23]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d138      	bne.n	801392c <f_sync+0xfc>
					dir = fp->dir_ptr;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138be:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	330b      	adds	r3, #11
 80138c4:	781a      	ldrb	r2, [r3, #0]
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	330b      	adds	r3, #11
 80138ca:	f042 0220 	orr.w	r2, r2, #32
 80138ce:	b2d2      	uxtb	r2, r2
 80138d0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	6818      	ldr	r0, [r3, #0]
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	689b      	ldr	r3, [r3, #8]
 80138da:	461a      	mov	r2, r3
 80138dc:	68f9      	ldr	r1, [r7, #12]
 80138de:	f7fe f942 	bl	8011b66 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f103 021c 	add.w	r2, r3, #28
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	68db      	ldr	r3, [r3, #12]
 80138ec:	4619      	mov	r1, r3
 80138ee:	4610      	mov	r0, r2
 80138f0:	f7fd f906 	bl	8010b00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	3316      	adds	r3, #22
 80138f8:	6939      	ldr	r1, [r7, #16]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7fd f900 	bl	8010b00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	3312      	adds	r3, #18
 8013904:	2100      	movs	r1, #0
 8013906:	4618      	mov	r0, r3
 8013908:	f7fd f8df 	bl	8010aca <st_word>
					fs->wflag = 1;
 801390c:	68bb      	ldr	r3, [r7, #8]
 801390e:	2201      	movs	r2, #1
 8013910:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	4618      	mov	r0, r3
 8013916:	f7fd fbad 	bl	8011074 <sync_fs>
 801391a:	4603      	mov	r3, r0
 801391c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	7d1b      	ldrb	r3, [r3, #20]
 8013922:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013926:	b2da      	uxtb	r2, r3
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801392c:	68bb      	ldr	r3, [r7, #8]
 801392e:	7dfa      	ldrb	r2, [r7, #23]
 8013930:	4611      	mov	r1, r2
 8013932:	4618      	mov	r0, r3
 8013934:	f7fd f9a4 	bl	8010c80 <unlock_fs>
 8013938:	7dfb      	ldrb	r3, [r7, #23]
}
 801393a:	4618      	mov	r0, r3
 801393c:	3718      	adds	r7, #24
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}

08013942 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013942:	b580      	push	{r7, lr}
 8013944:	b084      	sub	sp, #16
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff ff70 	bl	8013830 <f_sync>
 8013950:	4603      	mov	r3, r0
 8013952:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013954:	7bfb      	ldrb	r3, [r7, #15]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d11d      	bne.n	8013996 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	f107 0208 	add.w	r2, r7, #8
 8013960:	4611      	mov	r1, r2
 8013962:	4618      	mov	r0, r3
 8013964:	f7ff fa92 	bl	8012e8c <validate>
 8013968:	4603      	mov	r3, r0
 801396a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801396c:	7bfb      	ldrb	r3, [r7, #15]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d111      	bne.n	8013996 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	691b      	ldr	r3, [r3, #16]
 8013976:	4618      	mov	r0, r3
 8013978:	f7fd faaa 	bl	8010ed0 <dec_lock>
 801397c:	4603      	mov	r3, r0
 801397e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8013980:	7bfb      	ldrb	r3, [r7, #15]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d102      	bne.n	801398c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2200      	movs	r2, #0
 801398a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	2100      	movs	r1, #0
 8013990:	4618      	mov	r0, r3
 8013992:	f7fd f975 	bl	8010c80 <unlock_fs>
#endif
		}
	}
	return res;
 8013996:	7bfb      	ldrb	r3, [r7, #15]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3710      	adds	r7, #16
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}

080139a0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80139a6:	af00      	add	r7, sp, #0
 80139a8:	1d3b      	adds	r3, r7, #4
 80139aa:	6018      	str	r0, [r3, #0]
 80139ac:	463b      	mov	r3, r7
 80139ae:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80139b0:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80139b4:	1d3b      	adds	r3, r7, #4
 80139b6:	2200      	movs	r2, #0
 80139b8:	4618      	mov	r0, r3
 80139ba:	f7fe ffdd 	bl	8012978 <find_volume>
 80139be:	4603      	mov	r3, r0
 80139c0:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 80139c4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d127      	bne.n	8013a1c <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 80139cc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80139d0:	f107 0208 	add.w	r2, r7, #8
 80139d4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80139d6:	1d3b      	adds	r3, r7, #4
 80139d8:	681a      	ldr	r2, [r3, #0]
 80139da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80139de:	4611      	mov	r1, r2
 80139e0:	4618      	mov	r0, r3
 80139e2:	f7fe feb9 	bl	8012758 <follow_path>
 80139e6:	4603      	mov	r3, r0
 80139e8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 80139ec:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d113      	bne.n	8013a1c <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80139f4:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80139f8:	b25b      	sxtb	r3, r3
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	da03      	bge.n	8013a06 <f_stat+0x66>
				res = FR_INVALID_NAME;
 80139fe:	2306      	movs	r3, #6
 8013a00:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8013a04:	e00a      	b.n	8013a1c <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8013a06:	463b      	mov	r3, r7
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d006      	beq.n	8013a1c <f_stat+0x7c>
 8013a0e:	463b      	mov	r3, r7
 8013a10:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8013a14:	6819      	ldr	r1, [r3, #0]
 8013a16:	4610      	mov	r0, r2
 8013a18:	f7fe fc08 	bl	801222c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8013a1c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013a20:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8013a24:	4611      	mov	r1, r2
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7fd f92a 	bl	8010c80 <unlock_fs>
 8013a2c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8013a30:	4618      	mov	r0, r3
 8013a32:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	1d3b      	adds	r3, r7, #4
 8013a44:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013a46:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8013a4a:	1d3b      	adds	r3, r7, #4
 8013a4c:	2202      	movs	r2, #2
 8013a4e:	4618      	mov	r0, r3
 8013a50:	f7fe ff92 	bl	8012978 <find_volume>
 8013a54:	4603      	mov	r3, r0
 8013a56:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 8013a5a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013a5e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 8013a62:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	f040 8134 	bne.w	8013cd4 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8013a6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013a70:	f107 020c 	add.w	r2, r7, #12
 8013a74:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8013a76:	1d3b      	adds	r3, r7, #4
 8013a78:	681a      	ldr	r2, [r3, #0]
 8013a7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013a7e:	4611      	mov	r1, r2
 8013a80:	4618      	mov	r0, r3
 8013a82:	f7fe fe69 	bl	8012758 <follow_path>
 8013a86:	4603      	mov	r3, r0
 8013a88:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013a8c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d102      	bne.n	8013a9a <f_mkdir+0x60>
 8013a94:	2308      	movs	r3, #8
 8013a96:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013a9a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013a9e:	2b04      	cmp	r3, #4
 8013aa0:	f040 8118 	bne.w	8013cd4 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013aa4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013aa8:	2100      	movs	r1, #0
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7fd fdc6 	bl	801163c <create_chain>
 8013ab0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013ab4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013ab8:	895b      	ldrh	r3, [r3, #10]
 8013aba:	461a      	mov	r2, r3
 8013abc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013ac0:	899b      	ldrh	r3, [r3, #12]
 8013ac2:	fb03 f302 	mul.w	r3, r3, r2
 8013ac6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 8013aca:	2300      	movs	r3, #0
 8013acc:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013ad0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d102      	bne.n	8013ade <f_mkdir+0xa4>
 8013ad8:	2307      	movs	r3, #7
 8013ada:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 8013ade:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d102      	bne.n	8013aec <f_mkdir+0xb2>
 8013ae6:	2302      	movs	r3, #2
 8013ae8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013aec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8013af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013af4:	d102      	bne.n	8013afc <f_mkdir+0xc2>
 8013af6:	2301      	movs	r3, #1
 8013af8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013afc:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d107      	bne.n	8013b14 <f_mkdir+0xda>
 8013b04:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013b08:	4618      	mov	r0, r3
 8013b0a:	f7fd fa41 	bl	8010f90 <sync_window>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 8013b14:	f7fb fa0e 	bl	800ef34 <get_fattime>
 8013b18:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013b1c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	f040 8094 	bne.w	8013c4e <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 8013b26:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013b2a:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8013b2e:	4618      	mov	r0, r3
 8013b30:	f7fd fb10 	bl	8011154 <clust2sect>
 8013b34:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 8013b38:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013b3c:	333c      	adds	r3, #60	; 0x3c
 8013b3e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 8013b42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013b46:	899b      	ldrh	r3, [r3, #12]
 8013b48:	461a      	mov	r2, r3
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8013b50:	f7fd f823 	bl	8010b9a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013b54:	220b      	movs	r2, #11
 8013b56:	2120      	movs	r1, #32
 8013b58:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8013b5c:	f7fd f81d 	bl	8010b9a <mem_set>
					dir[DIR_Name] = '.';
 8013b60:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013b64:	222e      	movs	r2, #46	; 0x2e
 8013b66:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013b68:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013b6c:	330b      	adds	r3, #11
 8013b6e:	2210      	movs	r2, #16
 8013b70:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013b72:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013b76:	3316      	adds	r3, #22
 8013b78:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8013b7c:	4618      	mov	r0, r3
 8013b7e:	f7fc ffbf 	bl	8010b00 <st_dword>
					st_clust(fs, dir, dcl);
 8013b82:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013b86:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8013b8a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f7fd ffe9 	bl	8011b66 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013b94:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013b98:	3320      	adds	r3, #32
 8013b9a:	2220      	movs	r2, #32
 8013b9c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7fc ffd9 	bl	8010b58 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013ba6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013baa:	3321      	adds	r3, #33	; 0x21
 8013bac:	222e      	movs	r2, #46	; 0x2e
 8013bae:	701a      	strb	r2, [r3, #0]
 8013bb0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8013bb4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013bb8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	2b03      	cmp	r3, #3
 8013bc0:	d109      	bne.n	8013bd6 <f_mkdir+0x19c>
 8013bc2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bc8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	d102      	bne.n	8013bd6 <f_mkdir+0x19c>
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 8013bd6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8013bda:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013bde:	3320      	adds	r3, #32
 8013be0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8013be4:	4619      	mov	r1, r3
 8013be6:	f7fd ffbe 	bl	8011b66 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013bea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013bee:	895b      	ldrh	r3, [r3, #10]
 8013bf0:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8013bf4:	e025      	b.n	8013c42 <f_mkdir+0x208>
					fs->winsect = dsc++;
 8013bf6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013bfa:	1c5a      	adds	r2, r3, #1
 8013bfc:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8013c00:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8013c04:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8013c06:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013c0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013c12:	4618      	mov	r0, r3
 8013c14:	f7fd f9bc 	bl	8010f90 <sync_window>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 8013c1e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d112      	bne.n	8013c4c <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 8013c26:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013c2a:	899b      	ldrh	r3, [r3, #12]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	2100      	movs	r1, #0
 8013c30:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8013c34:	f7fc ffb1 	bl	8010b9a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013c38:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8013c3c:	3b01      	subs	r3, #1
 8013c3e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8013c42:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d1d5      	bne.n	8013bf6 <f_mkdir+0x1bc>
 8013c4a:	e000      	b.n	8013c4e <f_mkdir+0x214>
					if (res != FR_OK) break;
 8013c4c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013c4e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d107      	bne.n	8013c66 <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013c56:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fe f9ee 	bl	801203c <dir_register>
 8013c60:	4603      	mov	r3, r0
 8013c62:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 8013c66:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d12a      	bne.n	8013cc4 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013c6e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8013c72:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013c76:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013c7a:	3316      	adds	r3, #22
 8013c7c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8013c80:	4618      	mov	r0, r3
 8013c82:	f7fc ff3d 	bl	8010b00 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013c86:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013c8a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8013c8e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fd ff67 	bl	8011b66 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013c98:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8013c9c:	330b      	adds	r3, #11
 8013c9e:	2210      	movs	r2, #16
 8013ca0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013ca2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013caa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d110      	bne.n	8013cd4 <f_mkdir+0x29a>
					res = sync_fs(fs);
 8013cb2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7fd f9dc 	bl	8011074 <sync_fs>
 8013cbc:	4603      	mov	r3, r0
 8013cbe:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8013cc2:	e007      	b.n	8013cd4 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013cc4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8013cc8:	2200      	movs	r2, #0
 8013cca:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7fd fc4f 	bl	8011572 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013cd4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013cd8:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 8013cdc:	4611      	mov	r1, r2
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7fc ffce 	bl	8010c80 <unlock_fs>
 8013ce4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8013cee:	46bd      	mov	sp, r7
 8013cf0:	bd80      	pop	{r7, pc}
	...

08013cf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b087      	sub	sp, #28
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	4613      	mov	r3, r2
 8013d00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013d02:	2301      	movs	r3, #1
 8013d04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013d06:	2300      	movs	r3, #0
 8013d08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013d0a:	4b1f      	ldr	r3, [pc, #124]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d0c:	7a5b      	ldrb	r3, [r3, #9]
 8013d0e:	b2db      	uxtb	r3, r3
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d131      	bne.n	8013d78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013d14:	4b1c      	ldr	r3, [pc, #112]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d16:	7a5b      	ldrb	r3, [r3, #9]
 8013d18:	b2db      	uxtb	r3, r3
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	4b1a      	ldr	r3, [pc, #104]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d1e:	2100      	movs	r1, #0
 8013d20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013d22:	4b19      	ldr	r3, [pc, #100]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d24:	7a5b      	ldrb	r3, [r3, #9]
 8013d26:	b2db      	uxtb	r3, r3
 8013d28:	4a17      	ldr	r2, [pc, #92]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d2a:	009b      	lsls	r3, r3, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	68fa      	ldr	r2, [r7, #12]
 8013d30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013d32:	4b15      	ldr	r3, [pc, #84]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d34:	7a5b      	ldrb	r3, [r3, #9]
 8013d36:	b2db      	uxtb	r3, r3
 8013d38:	461a      	mov	r2, r3
 8013d3a:	4b13      	ldr	r3, [pc, #76]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d3c:	4413      	add	r3, r2
 8013d3e:	79fa      	ldrb	r2, [r7, #7]
 8013d40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013d42:	4b11      	ldr	r3, [pc, #68]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d44:	7a5b      	ldrb	r3, [r3, #9]
 8013d46:	b2db      	uxtb	r3, r3
 8013d48:	1c5a      	adds	r2, r3, #1
 8013d4a:	b2d1      	uxtb	r1, r2
 8013d4c:	4a0e      	ldr	r2, [pc, #56]	; (8013d88 <FATFS_LinkDriverEx+0x94>)
 8013d4e:	7251      	strb	r1, [r2, #9]
 8013d50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013d52:	7dbb      	ldrb	r3, [r7, #22]
 8013d54:	3330      	adds	r3, #48	; 0x30
 8013d56:	b2da      	uxtb	r2, r3
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	3301      	adds	r3, #1
 8013d60:	223a      	movs	r2, #58	; 0x3a
 8013d62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	3302      	adds	r3, #2
 8013d68:	222f      	movs	r2, #47	; 0x2f
 8013d6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	3303      	adds	r3, #3
 8013d70:	2200      	movs	r2, #0
 8013d72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013d74:	2300      	movs	r3, #0
 8013d76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	371c      	adds	r7, #28
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d84:	4770      	bx	lr
 8013d86:	bf00      	nop
 8013d88:	20002878 	.word	0x20002878

08013d8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
 8013d94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013d96:	2200      	movs	r2, #0
 8013d98:	6839      	ldr	r1, [r7, #0]
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7ff ffaa 	bl	8013cf4 <FATFS_LinkDriverEx>
 8013da0:	4603      	mov	r3, r0
}
 8013da2:	4618      	mov	r0, r3
 8013da4:	3708      	adds	r7, #8
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
	...

08013dac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b085      	sub	sp, #20
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	4603      	mov	r3, r0
 8013db4:	6039      	str	r1, [r7, #0]
 8013db6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8013db8:	88fb      	ldrh	r3, [r7, #6]
 8013dba:	2b7f      	cmp	r3, #127	; 0x7f
 8013dbc:	d802      	bhi.n	8013dc4 <ff_convert+0x18>
		c = chr;
 8013dbe:	88fb      	ldrh	r3, [r7, #6]
 8013dc0:	81fb      	strh	r3, [r7, #14]
 8013dc2:	e025      	b.n	8013e10 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8013dc4:	683b      	ldr	r3, [r7, #0]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d00b      	beq.n	8013de2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8013dca:	88fb      	ldrh	r3, [r7, #6]
 8013dcc:	2bff      	cmp	r3, #255	; 0xff
 8013dce:	d805      	bhi.n	8013ddc <ff_convert+0x30>
 8013dd0:	88fb      	ldrh	r3, [r7, #6]
 8013dd2:	3b80      	subs	r3, #128	; 0x80
 8013dd4:	4a12      	ldr	r2, [pc, #72]	; (8013e20 <ff_convert+0x74>)
 8013dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013dda:	e000      	b.n	8013dde <ff_convert+0x32>
 8013ddc:	2300      	movs	r3, #0
 8013dde:	81fb      	strh	r3, [r7, #14]
 8013de0:	e016      	b.n	8013e10 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8013de2:	2300      	movs	r3, #0
 8013de4:	81fb      	strh	r3, [r7, #14]
 8013de6:	e009      	b.n	8013dfc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8013de8:	89fb      	ldrh	r3, [r7, #14]
 8013dea:	4a0d      	ldr	r2, [pc, #52]	; (8013e20 <ff_convert+0x74>)
 8013dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013df0:	88fa      	ldrh	r2, [r7, #6]
 8013df2:	429a      	cmp	r2, r3
 8013df4:	d006      	beq.n	8013e04 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8013df6:	89fb      	ldrh	r3, [r7, #14]
 8013df8:	3301      	adds	r3, #1
 8013dfa:	81fb      	strh	r3, [r7, #14]
 8013dfc:	89fb      	ldrh	r3, [r7, #14]
 8013dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8013e00:	d9f2      	bls.n	8013de8 <ff_convert+0x3c>
 8013e02:	e000      	b.n	8013e06 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8013e04:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8013e06:	89fb      	ldrh	r3, [r7, #14]
 8013e08:	3380      	adds	r3, #128	; 0x80
 8013e0a:	b29b      	uxth	r3, r3
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8013e10:	89fb      	ldrh	r3, [r7, #14]
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3714      	adds	r7, #20
 8013e16:	46bd      	mov	sp, r7
 8013e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e1c:	4770      	bx	lr
 8013e1e:	bf00      	nop
 8013e20:	080206dc 	.word	0x080206dc

08013e24 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8013e24:	b480      	push	{r7}
 8013e26:	b087      	sub	sp, #28
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8013e2e:	88fb      	ldrh	r3, [r7, #6]
 8013e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013e34:	d201      	bcs.n	8013e3a <ff_wtoupper+0x16>
 8013e36:	4b3e      	ldr	r3, [pc, #248]	; (8013f30 <ff_wtoupper+0x10c>)
 8013e38:	e000      	b.n	8013e3c <ff_wtoupper+0x18>
 8013e3a:	4b3e      	ldr	r3, [pc, #248]	; (8013f34 <ff_wtoupper+0x110>)
 8013e3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8013e3e:	697b      	ldr	r3, [r7, #20]
 8013e40:	1c9a      	adds	r2, r3, #2
 8013e42:	617a      	str	r2, [r7, #20]
 8013e44:	881b      	ldrh	r3, [r3, #0]
 8013e46:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8013e48:	8a7b      	ldrh	r3, [r7, #18]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d068      	beq.n	8013f20 <ff_wtoupper+0xfc>
 8013e4e:	88fa      	ldrh	r2, [r7, #6]
 8013e50:	8a7b      	ldrh	r3, [r7, #18]
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d364      	bcc.n	8013f20 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8013e56:	697b      	ldr	r3, [r7, #20]
 8013e58:	1c9a      	adds	r2, r3, #2
 8013e5a:	617a      	str	r2, [r7, #20]
 8013e5c:	881b      	ldrh	r3, [r3, #0]
 8013e5e:	823b      	strh	r3, [r7, #16]
 8013e60:	8a3b      	ldrh	r3, [r7, #16]
 8013e62:	0a1b      	lsrs	r3, r3, #8
 8013e64:	81fb      	strh	r3, [r7, #14]
 8013e66:	8a3b      	ldrh	r3, [r7, #16]
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8013e6c:	88fa      	ldrh	r2, [r7, #6]
 8013e6e:	8a79      	ldrh	r1, [r7, #18]
 8013e70:	8a3b      	ldrh	r3, [r7, #16]
 8013e72:	440b      	add	r3, r1
 8013e74:	429a      	cmp	r2, r3
 8013e76:	da49      	bge.n	8013f0c <ff_wtoupper+0xe8>
			switch (cmd) {
 8013e78:	89fb      	ldrh	r3, [r7, #14]
 8013e7a:	2b08      	cmp	r3, #8
 8013e7c:	d84f      	bhi.n	8013f1e <ff_wtoupper+0xfa>
 8013e7e:	a201      	add	r2, pc, #4	; (adr r2, 8013e84 <ff_wtoupper+0x60>)
 8013e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e84:	08013ea9 	.word	0x08013ea9
 8013e88:	08013ebb 	.word	0x08013ebb
 8013e8c:	08013ed1 	.word	0x08013ed1
 8013e90:	08013ed9 	.word	0x08013ed9
 8013e94:	08013ee1 	.word	0x08013ee1
 8013e98:	08013ee9 	.word	0x08013ee9
 8013e9c:	08013ef1 	.word	0x08013ef1
 8013ea0:	08013ef9 	.word	0x08013ef9
 8013ea4:	08013f01 	.word	0x08013f01
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8013ea8:	88fa      	ldrh	r2, [r7, #6]
 8013eaa:	8a7b      	ldrh	r3, [r7, #18]
 8013eac:	1ad3      	subs	r3, r2, r3
 8013eae:	005b      	lsls	r3, r3, #1
 8013eb0:	697a      	ldr	r2, [r7, #20]
 8013eb2:	4413      	add	r3, r2
 8013eb4:	881b      	ldrh	r3, [r3, #0]
 8013eb6:	80fb      	strh	r3, [r7, #6]
 8013eb8:	e027      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8013eba:	88fa      	ldrh	r2, [r7, #6]
 8013ebc:	8a7b      	ldrh	r3, [r7, #18]
 8013ebe:	1ad3      	subs	r3, r2, r3
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	f003 0301 	and.w	r3, r3, #1
 8013ec6:	b29b      	uxth	r3, r3
 8013ec8:	88fa      	ldrh	r2, [r7, #6]
 8013eca:	1ad3      	subs	r3, r2, r3
 8013ecc:	80fb      	strh	r3, [r7, #6]
 8013ece:	e01c      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8013ed0:	88fb      	ldrh	r3, [r7, #6]
 8013ed2:	3b10      	subs	r3, #16
 8013ed4:	80fb      	strh	r3, [r7, #6]
 8013ed6:	e018      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8013ed8:	88fb      	ldrh	r3, [r7, #6]
 8013eda:	3b20      	subs	r3, #32
 8013edc:	80fb      	strh	r3, [r7, #6]
 8013ede:	e014      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8013ee0:	88fb      	ldrh	r3, [r7, #6]
 8013ee2:	3b30      	subs	r3, #48	; 0x30
 8013ee4:	80fb      	strh	r3, [r7, #6]
 8013ee6:	e010      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8013ee8:	88fb      	ldrh	r3, [r7, #6]
 8013eea:	3b1a      	subs	r3, #26
 8013eec:	80fb      	strh	r3, [r7, #6]
 8013eee:	e00c      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8013ef0:	88fb      	ldrh	r3, [r7, #6]
 8013ef2:	3308      	adds	r3, #8
 8013ef4:	80fb      	strh	r3, [r7, #6]
 8013ef6:	e008      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8013ef8:	88fb      	ldrh	r3, [r7, #6]
 8013efa:	3b50      	subs	r3, #80	; 0x50
 8013efc:	80fb      	strh	r3, [r7, #6]
 8013efe:	e004      	b.n	8013f0a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8013f00:	88fb      	ldrh	r3, [r7, #6]
 8013f02:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8013f06:	80fb      	strh	r3, [r7, #6]
 8013f08:	bf00      	nop
			}
			break;
 8013f0a:	e008      	b.n	8013f1e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8013f0c:	89fb      	ldrh	r3, [r7, #14]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d195      	bne.n	8013e3e <ff_wtoupper+0x1a>
 8013f12:	8a3b      	ldrh	r3, [r7, #16]
 8013f14:	005b      	lsls	r3, r3, #1
 8013f16:	697a      	ldr	r2, [r7, #20]
 8013f18:	4413      	add	r3, r2
 8013f1a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8013f1c:	e78f      	b.n	8013e3e <ff_wtoupper+0x1a>
			break;
 8013f1e:	bf00      	nop
	}

	return chr;
 8013f20:	88fb      	ldrh	r3, [r7, #6]
}
 8013f22:	4618      	mov	r0, r3
 8013f24:	371c      	adds	r7, #28
 8013f26:	46bd      	mov	sp, r7
 8013f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2c:	4770      	bx	lr
 8013f2e:	bf00      	nop
 8013f30:	080207dc 	.word	0x080207dc
 8013f34:	080209d0 	.word	0x080209d0

08013f38 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b084      	sub	sp, #16
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	4603      	mov	r3, r0
 8013f40:	6039      	str	r1, [r7, #0]
 8013f42:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8013f44:	2200      	movs	r2, #0
 8013f46:	2101      	movs	r1, #1
 8013f48:	2001      	movs	r0, #1
 8013f4a:	f000 f978 	bl	801423e <osSemaphoreNew>
 8013f4e:	4602      	mov	r2, r0
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8013f54:	683b      	ldr	r3, [r7, #0]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	bf14      	ite	ne
 8013f5c:	2301      	movne	r3, #1
 8013f5e:	2300      	moveq	r3, #0
 8013f60:	b2db      	uxtb	r3, r3
 8013f62:	60fb      	str	r3, [r7, #12]

    return ret;
 8013f64:	68fb      	ldr	r3, [r7, #12]
}
 8013f66:	4618      	mov	r0, r3
 8013f68:	3710      	adds	r7, #16
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	bd80      	pop	{r7, pc}

08013f6e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8013f6e:	b580      	push	{r7, lr}
 8013f70:	b082      	sub	sp, #8
 8013f72:	af00      	add	r7, sp, #0
 8013f74:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f000 fa80 	bl	801447c <osSemaphoreDelete>
#endif
    return 1;
 8013f7c:	2301      	movs	r3, #1
}
 8013f7e:	4618      	mov	r0, r3
 8013f80:	3708      	adds	r7, #8
 8013f82:	46bd      	mov	sp, r7
 8013f84:	bd80      	pop	{r7, pc}

08013f86 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8013f86:	b580      	push	{r7, lr}
 8013f88:	b084      	sub	sp, #16
 8013f8a:	af00      	add	r7, sp, #0
 8013f8c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8013f92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f000 f9da 	bl	8014350 <osSemaphoreAcquire>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d101      	bne.n	8013fa6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3710      	adds	r7, #16
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b082      	sub	sp, #8
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8013fb8:	6878      	ldr	r0, [r7, #4]
 8013fba:	f000 fa1b 	bl	80143f4 <osSemaphoreRelease>
#endif
}
 8013fbe:	bf00      	nop
 8013fc0:	3708      	adds	r7, #8
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}
	...

08013fc8 <__NVIC_SetPriority>:
{
 8013fc8:	b480      	push	{r7}
 8013fca:	b083      	sub	sp, #12
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	4603      	mov	r3, r0
 8013fd0:	6039      	str	r1, [r7, #0]
 8013fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	db0a      	blt.n	8013ff2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	b2da      	uxtb	r2, r3
 8013fe0:	490c      	ldr	r1, [pc, #48]	; (8014014 <__NVIC_SetPriority+0x4c>)
 8013fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013fe6:	0112      	lsls	r2, r2, #4
 8013fe8:	b2d2      	uxtb	r2, r2
 8013fea:	440b      	add	r3, r1
 8013fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8013ff0:	e00a      	b.n	8014008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	b2da      	uxtb	r2, r3
 8013ff6:	4908      	ldr	r1, [pc, #32]	; (8014018 <__NVIC_SetPriority+0x50>)
 8013ff8:	79fb      	ldrb	r3, [r7, #7]
 8013ffa:	f003 030f 	and.w	r3, r3, #15
 8013ffe:	3b04      	subs	r3, #4
 8014000:	0112      	lsls	r2, r2, #4
 8014002:	b2d2      	uxtb	r2, r2
 8014004:	440b      	add	r3, r1
 8014006:	761a      	strb	r2, [r3, #24]
}
 8014008:	bf00      	nop
 801400a:	370c      	adds	r7, #12
 801400c:	46bd      	mov	sp, r7
 801400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014012:	4770      	bx	lr
 8014014:	e000e100 	.word	0xe000e100
 8014018:	e000ed00 	.word	0xe000ed00

0801401c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801401c:	b580      	push	{r7, lr}
 801401e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014020:	4b05      	ldr	r3, [pc, #20]	; (8014038 <SysTick_Handler+0x1c>)
 8014022:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014024:	f002 fcae 	bl	8016984 <xTaskGetSchedulerState>
 8014028:	4603      	mov	r3, r0
 801402a:	2b01      	cmp	r3, #1
 801402c:	d001      	beq.n	8014032 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801402e:	f003 fcd3 	bl	80179d8 <xPortSysTickHandler>
  }
}
 8014032:	bf00      	nop
 8014034:	bd80      	pop	{r7, pc}
 8014036:	bf00      	nop
 8014038:	e000e010 	.word	0xe000e010

0801403c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801403c:	b580      	push	{r7, lr}
 801403e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014040:	2100      	movs	r1, #0
 8014042:	f06f 0004 	mvn.w	r0, #4
 8014046:	f7ff ffbf 	bl	8013fc8 <__NVIC_SetPriority>
#endif
}
 801404a:	bf00      	nop
 801404c:	bd80      	pop	{r7, pc}
	...

08014050 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014050:	b480      	push	{r7}
 8014052:	b083      	sub	sp, #12
 8014054:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014056:	f3ef 8305 	mrs	r3, IPSR
 801405a:	603b      	str	r3, [r7, #0]
  return(result);
 801405c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801405e:	2b00      	cmp	r3, #0
 8014060:	d003      	beq.n	801406a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014062:	f06f 0305 	mvn.w	r3, #5
 8014066:	607b      	str	r3, [r7, #4]
 8014068:	e00c      	b.n	8014084 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801406a:	4b0a      	ldr	r3, [pc, #40]	; (8014094 <osKernelInitialize+0x44>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d105      	bne.n	801407e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014072:	4b08      	ldr	r3, [pc, #32]	; (8014094 <osKernelInitialize+0x44>)
 8014074:	2201      	movs	r2, #1
 8014076:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014078:	2300      	movs	r3, #0
 801407a:	607b      	str	r3, [r7, #4]
 801407c:	e002      	b.n	8014084 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 801407e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014082:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014084:	687b      	ldr	r3, [r7, #4]
}
 8014086:	4618      	mov	r0, r3
 8014088:	370c      	adds	r7, #12
 801408a:	46bd      	mov	sp, r7
 801408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014090:	4770      	bx	lr
 8014092:	bf00      	nop
 8014094:	20002884 	.word	0x20002884

08014098 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014098:	b580      	push	{r7, lr}
 801409a:	b082      	sub	sp, #8
 801409c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801409e:	f3ef 8305 	mrs	r3, IPSR
 80140a2:	603b      	str	r3, [r7, #0]
  return(result);
 80140a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d003      	beq.n	80140b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80140aa:	f06f 0305 	mvn.w	r3, #5
 80140ae:	607b      	str	r3, [r7, #4]
 80140b0:	e010      	b.n	80140d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80140b2:	4b0b      	ldr	r3, [pc, #44]	; (80140e0 <osKernelStart+0x48>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	2b01      	cmp	r3, #1
 80140b8:	d109      	bne.n	80140ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80140ba:	f7ff ffbf 	bl	801403c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80140be:	4b08      	ldr	r3, [pc, #32]	; (80140e0 <osKernelStart+0x48>)
 80140c0:	2202      	movs	r2, #2
 80140c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80140c4:	f001 fe7c 	bl	8015dc0 <vTaskStartScheduler>
      stat = osOK;
 80140c8:	2300      	movs	r3, #0
 80140ca:	607b      	str	r3, [r7, #4]
 80140cc:	e002      	b.n	80140d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80140ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80140d4:	687b      	ldr	r3, [r7, #4]
}
 80140d6:	4618      	mov	r0, r3
 80140d8:	3708      	adds	r7, #8
 80140da:	46bd      	mov	sp, r7
 80140dc:	bd80      	pop	{r7, pc}
 80140de:	bf00      	nop
 80140e0:	20002884 	.word	0x20002884

080140e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b08e      	sub	sp, #56	; 0x38
 80140e8:	af04      	add	r7, sp, #16
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80140f0:	2300      	movs	r3, #0
 80140f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80140f4:	f3ef 8305 	mrs	r3, IPSR
 80140f8:	617b      	str	r3, [r7, #20]
  return(result);
 80140fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d17e      	bne.n	80141fe <osThreadNew+0x11a>
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d07b      	beq.n	80141fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014106:	2380      	movs	r3, #128	; 0x80
 8014108:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801410a:	2318      	movs	r3, #24
 801410c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801410e:	2300      	movs	r3, #0
 8014110:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014112:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014116:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d045      	beq.n	80141aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	681b      	ldr	r3, [r3, #0]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d002      	beq.n	801412c <osThreadNew+0x48>
        name = attr->name;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	699b      	ldr	r3, [r3, #24]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d002      	beq.n	801413a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	699b      	ldr	r3, [r3, #24]
 8014138:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d008      	beq.n	8014152 <osThreadNew+0x6e>
 8014140:	69fb      	ldr	r3, [r7, #28]
 8014142:	2b38      	cmp	r3, #56	; 0x38
 8014144:	d805      	bhi.n	8014152 <osThreadNew+0x6e>
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	f003 0301 	and.w	r3, r3, #1
 801414e:	2b00      	cmp	r3, #0
 8014150:	d001      	beq.n	8014156 <osThreadNew+0x72>
        return (NULL);
 8014152:	2300      	movs	r3, #0
 8014154:	e054      	b.n	8014200 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	695b      	ldr	r3, [r3, #20]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d003      	beq.n	8014166 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	695b      	ldr	r3, [r3, #20]
 8014162:	089b      	lsrs	r3, r3, #2
 8014164:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	689b      	ldr	r3, [r3, #8]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d00e      	beq.n	801418c <osThreadNew+0xa8>
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	68db      	ldr	r3, [r3, #12]
 8014172:	2bbf      	cmp	r3, #191	; 0xbf
 8014174:	d90a      	bls.n	801418c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801417a:	2b00      	cmp	r3, #0
 801417c:	d006      	beq.n	801418c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	695b      	ldr	r3, [r3, #20]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d002      	beq.n	801418c <osThreadNew+0xa8>
        mem = 1;
 8014186:	2301      	movs	r3, #1
 8014188:	61bb      	str	r3, [r7, #24]
 801418a:	e010      	b.n	80141ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	689b      	ldr	r3, [r3, #8]
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10c      	bne.n	80141ae <osThreadNew+0xca>
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d108      	bne.n	80141ae <osThreadNew+0xca>
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	691b      	ldr	r3, [r3, #16]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d104      	bne.n	80141ae <osThreadNew+0xca>
          mem = 0;
 80141a4:	2300      	movs	r3, #0
 80141a6:	61bb      	str	r3, [r7, #24]
 80141a8:	e001      	b.n	80141ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80141aa:	2300      	movs	r3, #0
 80141ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80141ae:	69bb      	ldr	r3, [r7, #24]
 80141b0:	2b01      	cmp	r3, #1
 80141b2:	d110      	bne.n	80141d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80141b8:	687a      	ldr	r2, [r7, #4]
 80141ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80141bc:	9202      	str	r2, [sp, #8]
 80141be:	9301      	str	r3, [sp, #4]
 80141c0:	69fb      	ldr	r3, [r7, #28]
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	68bb      	ldr	r3, [r7, #8]
 80141c6:	6a3a      	ldr	r2, [r7, #32]
 80141c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80141ca:	68f8      	ldr	r0, [r7, #12]
 80141cc:	f001 fba2 	bl	8015914 <xTaskCreateStatic>
 80141d0:	4603      	mov	r3, r0
 80141d2:	613b      	str	r3, [r7, #16]
 80141d4:	e013      	b.n	80141fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80141d6:	69bb      	ldr	r3, [r7, #24]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d110      	bne.n	80141fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80141dc:	6a3b      	ldr	r3, [r7, #32]
 80141de:	b29a      	uxth	r2, r3
 80141e0:	f107 0310 	add.w	r3, r7, #16
 80141e4:	9301      	str	r3, [sp, #4]
 80141e6:	69fb      	ldr	r3, [r7, #28]
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	68bb      	ldr	r3, [r7, #8]
 80141ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	f001 fbed 	bl	80159ce <xTaskCreate>
 80141f4:	4603      	mov	r3, r0
 80141f6:	2b01      	cmp	r3, #1
 80141f8:	d001      	beq.n	80141fe <osThreadNew+0x11a>
            hTask = NULL;
 80141fa:	2300      	movs	r3, #0
 80141fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80141fe:	693b      	ldr	r3, [r7, #16]
}
 8014200:	4618      	mov	r0, r3
 8014202:	3728      	adds	r7, #40	; 0x28
 8014204:	46bd      	mov	sp, r7
 8014206:	bd80      	pop	{r7, pc}

08014208 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014208:	b580      	push	{r7, lr}
 801420a:	b084      	sub	sp, #16
 801420c:	af00      	add	r7, sp, #0
 801420e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014210:	f3ef 8305 	mrs	r3, IPSR
 8014214:	60bb      	str	r3, [r7, #8]
  return(result);
 8014216:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014218:	2b00      	cmp	r3, #0
 801421a:	d003      	beq.n	8014224 <osDelay+0x1c>
    stat = osErrorISR;
 801421c:	f06f 0305 	mvn.w	r3, #5
 8014220:	60fb      	str	r3, [r7, #12]
 8014222:	e007      	b.n	8014234 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014224:	2300      	movs	r3, #0
 8014226:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d002      	beq.n	8014234 <osDelay+0x2c>
      vTaskDelay(ticks);
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f001 fd2c 	bl	8015c8c <vTaskDelay>
    }
  }

  return (stat);
 8014234:	68fb      	ldr	r3, [r7, #12]
}
 8014236:	4618      	mov	r0, r3
 8014238:	3710      	adds	r7, #16
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}

0801423e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801423e:	b580      	push	{r7, lr}
 8014240:	b08a      	sub	sp, #40	; 0x28
 8014242:	af02      	add	r7, sp, #8
 8014244:	60f8      	str	r0, [r7, #12]
 8014246:	60b9      	str	r1, [r7, #8]
 8014248:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801424a:	2300      	movs	r3, #0
 801424c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801424e:	f3ef 8305 	mrs	r3, IPSR
 8014252:	613b      	str	r3, [r7, #16]
  return(result);
 8014254:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8014256:	2b00      	cmp	r3, #0
 8014258:	d175      	bne.n	8014346 <osSemaphoreNew+0x108>
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d072      	beq.n	8014346 <osSemaphoreNew+0x108>
 8014260:	68ba      	ldr	r2, [r7, #8]
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	429a      	cmp	r2, r3
 8014266:	d86e      	bhi.n	8014346 <osSemaphoreNew+0x108>
    mem = -1;
 8014268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801426c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	2b00      	cmp	r3, #0
 8014272:	d015      	beq.n	80142a0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	689b      	ldr	r3, [r3, #8]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d006      	beq.n	801428a <osSemaphoreNew+0x4c>
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	2b4f      	cmp	r3, #79	; 0x4f
 8014282:	d902      	bls.n	801428a <osSemaphoreNew+0x4c>
        mem = 1;
 8014284:	2301      	movs	r3, #1
 8014286:	61bb      	str	r3, [r7, #24]
 8014288:	e00c      	b.n	80142a4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	689b      	ldr	r3, [r3, #8]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d108      	bne.n	80142a4 <osSemaphoreNew+0x66>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	68db      	ldr	r3, [r3, #12]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d104      	bne.n	80142a4 <osSemaphoreNew+0x66>
          mem = 0;
 801429a:	2300      	movs	r3, #0
 801429c:	61bb      	str	r3, [r7, #24]
 801429e:	e001      	b.n	80142a4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80142a0:	2300      	movs	r3, #0
 80142a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80142a4:	69bb      	ldr	r3, [r7, #24]
 80142a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142aa:	d04c      	beq.n	8014346 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80142ac:	68fb      	ldr	r3, [r7, #12]
 80142ae:	2b01      	cmp	r3, #1
 80142b0:	d128      	bne.n	8014304 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80142b2:	69bb      	ldr	r3, [r7, #24]
 80142b4:	2b01      	cmp	r3, #1
 80142b6:	d10a      	bne.n	80142ce <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	689b      	ldr	r3, [r3, #8]
 80142bc:	2203      	movs	r2, #3
 80142be:	9200      	str	r2, [sp, #0]
 80142c0:	2200      	movs	r2, #0
 80142c2:	2100      	movs	r1, #0
 80142c4:	2001      	movs	r0, #1
 80142c6:	f000 fb7f 	bl	80149c8 <xQueueGenericCreateStatic>
 80142ca:	61f8      	str	r0, [r7, #28]
 80142cc:	e005      	b.n	80142da <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80142ce:	2203      	movs	r2, #3
 80142d0:	2100      	movs	r1, #0
 80142d2:	2001      	movs	r0, #1
 80142d4:	f000 fbf0 	bl	8014ab8 <xQueueGenericCreate>
 80142d8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80142da:	69fb      	ldr	r3, [r7, #28]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d022      	beq.n	8014326 <osSemaphoreNew+0xe8>
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d01f      	beq.n	8014326 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80142e6:	2300      	movs	r3, #0
 80142e8:	2200      	movs	r2, #0
 80142ea:	2100      	movs	r1, #0
 80142ec:	69f8      	ldr	r0, [r7, #28]
 80142ee:	f000 fcab 	bl	8014c48 <xQueueGenericSend>
 80142f2:	4603      	mov	r3, r0
 80142f4:	2b01      	cmp	r3, #1
 80142f6:	d016      	beq.n	8014326 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80142f8:	69f8      	ldr	r0, [r7, #28]
 80142fa:	f001 f937 	bl	801556c <vQueueDelete>
            hSemaphore = NULL;
 80142fe:	2300      	movs	r3, #0
 8014300:	61fb      	str	r3, [r7, #28]
 8014302:	e010      	b.n	8014326 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8014304:	69bb      	ldr	r3, [r7, #24]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d108      	bne.n	801431c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	689b      	ldr	r3, [r3, #8]
 801430e:	461a      	mov	r2, r3
 8014310:	68b9      	ldr	r1, [r7, #8]
 8014312:	68f8      	ldr	r0, [r7, #12]
 8014314:	f000 fc2d 	bl	8014b72 <xQueueCreateCountingSemaphoreStatic>
 8014318:	61f8      	str	r0, [r7, #28]
 801431a:	e004      	b.n	8014326 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801431c:	68b9      	ldr	r1, [r7, #8]
 801431e:	68f8      	ldr	r0, [r7, #12]
 8014320:	f000 fc5e 	bl	8014be0 <xQueueCreateCountingSemaphore>
 8014324:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8014326:	69fb      	ldr	r3, [r7, #28]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d00c      	beq.n	8014346 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2b00      	cmp	r3, #0
 8014330:	d003      	beq.n	801433a <osSemaphoreNew+0xfc>
          name = attr->name;
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	617b      	str	r3, [r7, #20]
 8014338:	e001      	b.n	801433e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801433a:	2300      	movs	r3, #0
 801433c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801433e:	6979      	ldr	r1, [r7, #20]
 8014340:	69f8      	ldr	r0, [r7, #28]
 8014342:	f001 fa5f 	bl	8015804 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8014346:	69fb      	ldr	r3, [r7, #28]
}
 8014348:	4618      	mov	r0, r3
 801434a:	3720      	adds	r7, #32
 801434c:	46bd      	mov	sp, r7
 801434e:	bd80      	pop	{r7, pc}

08014350 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8014350:	b580      	push	{r7, lr}
 8014352:	b086      	sub	sp, #24
 8014354:	af00      	add	r7, sp, #0
 8014356:	6078      	str	r0, [r7, #4]
 8014358:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801435e:	2300      	movs	r3, #0
 8014360:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014362:	693b      	ldr	r3, [r7, #16]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d103      	bne.n	8014370 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8014368:	f06f 0303 	mvn.w	r3, #3
 801436c:	617b      	str	r3, [r7, #20]
 801436e:	e039      	b.n	80143e4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014370:	f3ef 8305 	mrs	r3, IPSR
 8014374:	60fb      	str	r3, [r7, #12]
  return(result);
 8014376:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8014378:	2b00      	cmp	r3, #0
 801437a:	d022      	beq.n	80143c2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	2b00      	cmp	r3, #0
 8014380:	d003      	beq.n	801438a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8014382:	f06f 0303 	mvn.w	r3, #3
 8014386:	617b      	str	r3, [r7, #20]
 8014388:	e02c      	b.n	80143e4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801438a:	2300      	movs	r3, #0
 801438c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801438e:	f107 0308 	add.w	r3, r7, #8
 8014392:	461a      	mov	r2, r3
 8014394:	2100      	movs	r1, #0
 8014396:	6938      	ldr	r0, [r7, #16]
 8014398:	f001 f868 	bl	801546c <xQueueReceiveFromISR>
 801439c:	4603      	mov	r3, r0
 801439e:	2b01      	cmp	r3, #1
 80143a0:	d003      	beq.n	80143aa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80143a2:	f06f 0302 	mvn.w	r3, #2
 80143a6:	617b      	str	r3, [r7, #20]
 80143a8:	e01c      	b.n	80143e4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80143aa:	68bb      	ldr	r3, [r7, #8]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d019      	beq.n	80143e4 <osSemaphoreAcquire+0x94>
 80143b0:	4b0f      	ldr	r3, [pc, #60]	; (80143f0 <osSemaphoreAcquire+0xa0>)
 80143b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143b6:	601a      	str	r2, [r3, #0]
 80143b8:	f3bf 8f4f 	dsb	sy
 80143bc:	f3bf 8f6f 	isb	sy
 80143c0:	e010      	b.n	80143e4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80143c2:	6839      	ldr	r1, [r7, #0]
 80143c4:	6938      	ldr	r0, [r7, #16]
 80143c6:	f000 ff45 	bl	8015254 <xQueueSemaphoreTake>
 80143ca:	4603      	mov	r3, r0
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d009      	beq.n	80143e4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80143d0:	683b      	ldr	r3, [r7, #0]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d003      	beq.n	80143de <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80143d6:	f06f 0301 	mvn.w	r3, #1
 80143da:	617b      	str	r3, [r7, #20]
 80143dc:	e002      	b.n	80143e4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80143de:	f06f 0302 	mvn.w	r3, #2
 80143e2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80143e4:	697b      	ldr	r3, [r7, #20]
}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3718      	adds	r7, #24
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	e000ed04 	.word	0xe000ed04

080143f4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b086      	sub	sp, #24
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8014400:	2300      	movs	r3, #0
 8014402:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8014404:	693b      	ldr	r3, [r7, #16]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d103      	bne.n	8014412 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801440a:	f06f 0303 	mvn.w	r3, #3
 801440e:	617b      	str	r3, [r7, #20]
 8014410:	e02c      	b.n	801446c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014412:	f3ef 8305 	mrs	r3, IPSR
 8014416:	60fb      	str	r3, [r7, #12]
  return(result);
 8014418:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801441a:	2b00      	cmp	r3, #0
 801441c:	d01a      	beq.n	8014454 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801441e:	2300      	movs	r3, #0
 8014420:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8014422:	f107 0308 	add.w	r3, r7, #8
 8014426:	4619      	mov	r1, r3
 8014428:	6938      	ldr	r0, [r7, #16]
 801442a:	f000 fda6 	bl	8014f7a <xQueueGiveFromISR>
 801442e:	4603      	mov	r3, r0
 8014430:	2b01      	cmp	r3, #1
 8014432:	d003      	beq.n	801443c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8014434:	f06f 0302 	mvn.w	r3, #2
 8014438:	617b      	str	r3, [r7, #20]
 801443a:	e017      	b.n	801446c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d014      	beq.n	801446c <osSemaphoreRelease+0x78>
 8014442:	4b0d      	ldr	r3, [pc, #52]	; (8014478 <osSemaphoreRelease+0x84>)
 8014444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014448:	601a      	str	r2, [r3, #0]
 801444a:	f3bf 8f4f 	dsb	sy
 801444e:	f3bf 8f6f 	isb	sy
 8014452:	e00b      	b.n	801446c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8014454:	2300      	movs	r3, #0
 8014456:	2200      	movs	r2, #0
 8014458:	2100      	movs	r1, #0
 801445a:	6938      	ldr	r0, [r7, #16]
 801445c:	f000 fbf4 	bl	8014c48 <xQueueGenericSend>
 8014460:	4603      	mov	r3, r0
 8014462:	2b01      	cmp	r3, #1
 8014464:	d002      	beq.n	801446c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8014466:	f06f 0302 	mvn.w	r3, #2
 801446a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801446c:	697b      	ldr	r3, [r7, #20]
}
 801446e:	4618      	mov	r0, r3
 8014470:	3718      	adds	r7, #24
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}
 8014476:	bf00      	nop
 8014478:	e000ed04 	.word	0xe000ed04

0801447c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801447c:	b580      	push	{r7, lr}
 801447e:	b086      	sub	sp, #24
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8014484:	687b      	ldr	r3, [r7, #4]
 8014486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014488:	f3ef 8305 	mrs	r3, IPSR
 801448c:	60fb      	str	r3, [r7, #12]
  return(result);
 801448e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8014490:	2b00      	cmp	r3, #0
 8014492:	d003      	beq.n	801449c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8014494:	f06f 0305 	mvn.w	r3, #5
 8014498:	617b      	str	r3, [r7, #20]
 801449a:	e00e      	b.n	80144ba <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801449c:	693b      	ldr	r3, [r7, #16]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d103      	bne.n	80144aa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80144a2:	f06f 0303 	mvn.w	r3, #3
 80144a6:	617b      	str	r3, [r7, #20]
 80144a8:	e007      	b.n	80144ba <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80144aa:	6938      	ldr	r0, [r7, #16]
 80144ac:	f001 f9d4 	bl	8015858 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80144b0:	2300      	movs	r3, #0
 80144b2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80144b4:	6938      	ldr	r0, [r7, #16]
 80144b6:	f001 f859 	bl	801556c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80144ba:	697b      	ldr	r3, [r7, #20]
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3718      	adds	r7, #24
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}

080144c4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b08a      	sub	sp, #40	; 0x28
 80144c8:	af02      	add	r7, sp, #8
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	60b9      	str	r1, [r7, #8]
 80144ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80144d0:	2300      	movs	r3, #0
 80144d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80144d4:	f3ef 8305 	mrs	r3, IPSR
 80144d8:	613b      	str	r3, [r7, #16]
  return(result);
 80144da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d15f      	bne.n	80145a0 <osMessageQueueNew+0xdc>
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d05c      	beq.n	80145a0 <osMessageQueueNew+0xdc>
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d059      	beq.n	80145a0 <osMessageQueueNew+0xdc>
    mem = -1;
 80144ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144f0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d029      	beq.n	801454c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	689b      	ldr	r3, [r3, #8]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d012      	beq.n	8014526 <osMessageQueueNew+0x62>
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	2b4f      	cmp	r3, #79	; 0x4f
 8014506:	d90e      	bls.n	8014526 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801450c:	2b00      	cmp	r3, #0
 801450e:	d00a      	beq.n	8014526 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	695a      	ldr	r2, [r3, #20]
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	68b9      	ldr	r1, [r7, #8]
 8014518:	fb01 f303 	mul.w	r3, r1, r3
 801451c:	429a      	cmp	r2, r3
 801451e:	d302      	bcc.n	8014526 <osMessageQueueNew+0x62>
        mem = 1;
 8014520:	2301      	movs	r3, #1
 8014522:	61bb      	str	r3, [r7, #24]
 8014524:	e014      	b.n	8014550 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	689b      	ldr	r3, [r3, #8]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d110      	bne.n	8014550 <osMessageQueueNew+0x8c>
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	68db      	ldr	r3, [r3, #12]
 8014532:	2b00      	cmp	r3, #0
 8014534:	d10c      	bne.n	8014550 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801453a:	2b00      	cmp	r3, #0
 801453c:	d108      	bne.n	8014550 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	695b      	ldr	r3, [r3, #20]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d104      	bne.n	8014550 <osMessageQueueNew+0x8c>
          mem = 0;
 8014546:	2300      	movs	r3, #0
 8014548:	61bb      	str	r3, [r7, #24]
 801454a:	e001      	b.n	8014550 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801454c:	2300      	movs	r3, #0
 801454e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014550:	69bb      	ldr	r3, [r7, #24]
 8014552:	2b01      	cmp	r3, #1
 8014554:	d10b      	bne.n	801456e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	691a      	ldr	r2, [r3, #16]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	2100      	movs	r1, #0
 8014560:	9100      	str	r1, [sp, #0]
 8014562:	68b9      	ldr	r1, [r7, #8]
 8014564:	68f8      	ldr	r0, [r7, #12]
 8014566:	f000 fa2f 	bl	80149c8 <xQueueGenericCreateStatic>
 801456a:	61f8      	str	r0, [r7, #28]
 801456c:	e008      	b.n	8014580 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801456e:	69bb      	ldr	r3, [r7, #24]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d105      	bne.n	8014580 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8014574:	2200      	movs	r2, #0
 8014576:	68b9      	ldr	r1, [r7, #8]
 8014578:	68f8      	ldr	r0, [r7, #12]
 801457a:	f000 fa9d 	bl	8014ab8 <xQueueGenericCreate>
 801457e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8014580:	69fb      	ldr	r3, [r7, #28]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00c      	beq.n	80145a0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	2b00      	cmp	r3, #0
 801458a:	d003      	beq.n	8014594 <osMessageQueueNew+0xd0>
        name = attr->name;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	681b      	ldr	r3, [r3, #0]
 8014590:	617b      	str	r3, [r7, #20]
 8014592:	e001      	b.n	8014598 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8014594:	2300      	movs	r3, #0
 8014596:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8014598:	6979      	ldr	r1, [r7, #20]
 801459a:	69f8      	ldr	r0, [r7, #28]
 801459c:	f001 f932 	bl	8015804 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80145a0:	69fb      	ldr	r3, [r7, #28]
}
 80145a2:	4618      	mov	r0, r3
 80145a4:	3720      	adds	r7, #32
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
	...

080145ac <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b088      	sub	sp, #32
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	603b      	str	r3, [r7, #0]
 80145b8:	4613      	mov	r3, r2
 80145ba:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80145c0:	2300      	movs	r3, #0
 80145c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80145c4:	f3ef 8305 	mrs	r3, IPSR
 80145c8:	617b      	str	r3, [r7, #20]
  return(result);
 80145ca:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d028      	beq.n	8014622 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80145d0:	69bb      	ldr	r3, [r7, #24]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d005      	beq.n	80145e2 <osMessageQueuePut+0x36>
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d002      	beq.n	80145e2 <osMessageQueuePut+0x36>
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d003      	beq.n	80145ea <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80145e2:	f06f 0303 	mvn.w	r3, #3
 80145e6:	61fb      	str	r3, [r7, #28]
 80145e8:	e038      	b.n	801465c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80145ea:	2300      	movs	r3, #0
 80145ec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80145ee:	f107 0210 	add.w	r2, r7, #16
 80145f2:	2300      	movs	r3, #0
 80145f4:	68b9      	ldr	r1, [r7, #8]
 80145f6:	69b8      	ldr	r0, [r7, #24]
 80145f8:	f000 fc24 	bl	8014e44 <xQueueGenericSendFromISR>
 80145fc:	4603      	mov	r3, r0
 80145fe:	2b01      	cmp	r3, #1
 8014600:	d003      	beq.n	801460a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8014602:	f06f 0302 	mvn.w	r3, #2
 8014606:	61fb      	str	r3, [r7, #28]
 8014608:	e028      	b.n	801465c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d025      	beq.n	801465c <osMessageQueuePut+0xb0>
 8014610:	4b15      	ldr	r3, [pc, #84]	; (8014668 <osMessageQueuePut+0xbc>)
 8014612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014616:	601a      	str	r2, [r3, #0]
 8014618:	f3bf 8f4f 	dsb	sy
 801461c:	f3bf 8f6f 	isb	sy
 8014620:	e01c      	b.n	801465c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d002      	beq.n	801462e <osMessageQueuePut+0x82>
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d103      	bne.n	8014636 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801462e:	f06f 0303 	mvn.w	r3, #3
 8014632:	61fb      	str	r3, [r7, #28]
 8014634:	e012      	b.n	801465c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8014636:	2300      	movs	r3, #0
 8014638:	683a      	ldr	r2, [r7, #0]
 801463a:	68b9      	ldr	r1, [r7, #8]
 801463c:	69b8      	ldr	r0, [r7, #24]
 801463e:	f000 fb03 	bl	8014c48 <xQueueGenericSend>
 8014642:	4603      	mov	r3, r0
 8014644:	2b01      	cmp	r3, #1
 8014646:	d009      	beq.n	801465c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d003      	beq.n	8014656 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801464e:	f06f 0301 	mvn.w	r3, #1
 8014652:	61fb      	str	r3, [r7, #28]
 8014654:	e002      	b.n	801465c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8014656:	f06f 0302 	mvn.w	r3, #2
 801465a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801465c:	69fb      	ldr	r3, [r7, #28]
}
 801465e:	4618      	mov	r0, r3
 8014660:	3720      	adds	r7, #32
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
 8014666:	bf00      	nop
 8014668:	e000ed04 	.word	0xe000ed04

0801466c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801466c:	b580      	push	{r7, lr}
 801466e:	b088      	sub	sp, #32
 8014670:	af00      	add	r7, sp, #0
 8014672:	60f8      	str	r0, [r7, #12]
 8014674:	60b9      	str	r1, [r7, #8]
 8014676:	607a      	str	r2, [r7, #4]
 8014678:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801467e:	2300      	movs	r3, #0
 8014680:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014682:	f3ef 8305 	mrs	r3, IPSR
 8014686:	617b      	str	r3, [r7, #20]
  return(result);
 8014688:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801468a:	2b00      	cmp	r3, #0
 801468c:	d028      	beq.n	80146e0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801468e:	69bb      	ldr	r3, [r7, #24]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d005      	beq.n	80146a0 <osMessageQueueGet+0x34>
 8014694:	68bb      	ldr	r3, [r7, #8]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d002      	beq.n	80146a0 <osMessageQueueGet+0x34>
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d003      	beq.n	80146a8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80146a0:	f06f 0303 	mvn.w	r3, #3
 80146a4:	61fb      	str	r3, [r7, #28]
 80146a6:	e037      	b.n	8014718 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80146a8:	2300      	movs	r3, #0
 80146aa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80146ac:	f107 0310 	add.w	r3, r7, #16
 80146b0:	461a      	mov	r2, r3
 80146b2:	68b9      	ldr	r1, [r7, #8]
 80146b4:	69b8      	ldr	r0, [r7, #24]
 80146b6:	f000 fed9 	bl	801546c <xQueueReceiveFromISR>
 80146ba:	4603      	mov	r3, r0
 80146bc:	2b01      	cmp	r3, #1
 80146be:	d003      	beq.n	80146c8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80146c0:	f06f 0302 	mvn.w	r3, #2
 80146c4:	61fb      	str	r3, [r7, #28]
 80146c6:	e027      	b.n	8014718 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80146c8:	693b      	ldr	r3, [r7, #16]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d024      	beq.n	8014718 <osMessageQueueGet+0xac>
 80146ce:	4b15      	ldr	r3, [pc, #84]	; (8014724 <osMessageQueueGet+0xb8>)
 80146d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80146d4:	601a      	str	r2, [r3, #0]
 80146d6:	f3bf 8f4f 	dsb	sy
 80146da:	f3bf 8f6f 	isb	sy
 80146de:	e01b      	b.n	8014718 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80146e0:	69bb      	ldr	r3, [r7, #24]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d002      	beq.n	80146ec <osMessageQueueGet+0x80>
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d103      	bne.n	80146f4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80146ec:	f06f 0303 	mvn.w	r3, #3
 80146f0:	61fb      	str	r3, [r7, #28]
 80146f2:	e011      	b.n	8014718 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80146f4:	683a      	ldr	r2, [r7, #0]
 80146f6:	68b9      	ldr	r1, [r7, #8]
 80146f8:	69b8      	ldr	r0, [r7, #24]
 80146fa:	f000 fccb 	bl	8015094 <xQueueReceive>
 80146fe:	4603      	mov	r3, r0
 8014700:	2b01      	cmp	r3, #1
 8014702:	d009      	beq.n	8014718 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8014704:	683b      	ldr	r3, [r7, #0]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d003      	beq.n	8014712 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801470a:	f06f 0301 	mvn.w	r3, #1
 801470e:	61fb      	str	r3, [r7, #28]
 8014710:	e002      	b.n	8014718 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8014712:	f06f 0302 	mvn.w	r3, #2
 8014716:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8014718:	69fb      	ldr	r3, [r7, #28]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3720      	adds	r7, #32
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
 8014722:	bf00      	nop
 8014724:	e000ed04 	.word	0xe000ed04

08014728 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014728:	b480      	push	{r7}
 801472a:	b085      	sub	sp, #20
 801472c:	af00      	add	r7, sp, #0
 801472e:	60f8      	str	r0, [r7, #12]
 8014730:	60b9      	str	r1, [r7, #8]
 8014732:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8014734:	68fb      	ldr	r3, [r7, #12]
 8014736:	4a07      	ldr	r2, [pc, #28]	; (8014754 <vApplicationGetIdleTaskMemory+0x2c>)
 8014738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	4a06      	ldr	r2, [pc, #24]	; (8014758 <vApplicationGetIdleTaskMemory+0x30>)
 801473e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	2280      	movs	r2, #128	; 0x80
 8014744:	601a      	str	r2, [r3, #0]
}
 8014746:	bf00      	nop
 8014748:	3714      	adds	r7, #20
 801474a:	46bd      	mov	sp, r7
 801474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014750:	4770      	bx	lr
 8014752:	bf00      	nop
 8014754:	20002888 	.word	0x20002888
 8014758:	20002948 	.word	0x20002948

0801475c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801475c:	b480      	push	{r7}
 801475e:	b085      	sub	sp, #20
 8014760:	af00      	add	r7, sp, #0
 8014762:	60f8      	str	r0, [r7, #12]
 8014764:	60b9      	str	r1, [r7, #8]
 8014766:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	4a07      	ldr	r2, [pc, #28]	; (8014788 <vApplicationGetTimerTaskMemory+0x2c>)
 801476c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	4a06      	ldr	r2, [pc, #24]	; (801478c <vApplicationGetTimerTaskMemory+0x30>)
 8014772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f44f 7280 	mov.w	r2, #256	; 0x100
 801477a:	601a      	str	r2, [r3, #0]
}
 801477c:	bf00      	nop
 801477e:	3714      	adds	r7, #20
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr
 8014788:	20002b48 	.word	0x20002b48
 801478c:	20002c08 	.word	0x20002c08

08014790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014790:	b480      	push	{r7}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	f103 0208 	add.w	r2, r3, #8
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f103 0208 	add.w	r2, r3, #8
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f103 0208 	add.w	r2, r3, #8
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2200      	movs	r2, #0
 80147c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80147c4:	bf00      	nop
 80147c6:	370c      	adds	r7, #12
 80147c8:	46bd      	mov	sp, r7
 80147ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ce:	4770      	bx	lr

080147d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80147d0:	b480      	push	{r7}
 80147d2:	b083      	sub	sp, #12
 80147d4:	af00      	add	r7, sp, #0
 80147d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	2200      	movs	r2, #0
 80147dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80147de:	bf00      	nop
 80147e0:	370c      	adds	r7, #12
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr

080147ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80147ea:	b480      	push	{r7}
 80147ec:	b085      	sub	sp, #20
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
 80147f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	68fa      	ldr	r2, [r7, #12]
 80147fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	689a      	ldr	r2, [r3, #8]
 8014804:	683b      	ldr	r3, [r7, #0]
 8014806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	683a      	ldr	r2, [r7, #0]
 801480e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	683a      	ldr	r2, [r7, #0]
 8014814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	1c5a      	adds	r2, r3, #1
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	601a      	str	r2, [r3, #0]
}
 8014826:	bf00      	nop
 8014828:	3714      	adds	r7, #20
 801482a:	46bd      	mov	sp, r7
 801482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014830:	4770      	bx	lr

08014832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014832:	b480      	push	{r7}
 8014834:	b085      	sub	sp, #20
 8014836:	af00      	add	r7, sp, #0
 8014838:	6078      	str	r0, [r7, #4]
 801483a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014848:	d103      	bne.n	8014852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	691b      	ldr	r3, [r3, #16]
 801484e:	60fb      	str	r3, [r7, #12]
 8014850:	e00c      	b.n	801486c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	3308      	adds	r3, #8
 8014856:	60fb      	str	r3, [r7, #12]
 8014858:	e002      	b.n	8014860 <vListInsert+0x2e>
 801485a:	68fb      	ldr	r3, [r7, #12]
 801485c:	685b      	ldr	r3, [r3, #4]
 801485e:	60fb      	str	r3, [r7, #12]
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	685b      	ldr	r3, [r3, #4]
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	68ba      	ldr	r2, [r7, #8]
 8014868:	429a      	cmp	r2, r3
 801486a:	d2f6      	bcs.n	801485a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	685a      	ldr	r2, [r3, #4]
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	683a      	ldr	r2, [r7, #0]
 801487a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	68fa      	ldr	r2, [r7, #12]
 8014880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	683a      	ldr	r2, [r7, #0]
 8014886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	1c5a      	adds	r2, r3, #1
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	601a      	str	r2, [r3, #0]
}
 8014898:	bf00      	nop
 801489a:	3714      	adds	r7, #20
 801489c:	46bd      	mov	sp, r7
 801489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a2:	4770      	bx	lr

080148a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80148a4:	b480      	push	{r7}
 80148a6:	b085      	sub	sp, #20
 80148a8:	af00      	add	r7, sp, #0
 80148aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	691b      	ldr	r3, [r3, #16]
 80148b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	685b      	ldr	r3, [r3, #4]
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	6892      	ldr	r2, [r2, #8]
 80148ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	689b      	ldr	r3, [r3, #8]
 80148c0:	687a      	ldr	r2, [r7, #4]
 80148c2:	6852      	ldr	r2, [r2, #4]
 80148c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	687a      	ldr	r2, [r7, #4]
 80148cc:	429a      	cmp	r2, r3
 80148ce:	d103      	bne.n	80148d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	689a      	ldr	r2, [r3, #8]
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	2200      	movs	r2, #0
 80148dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	1e5a      	subs	r2, r3, #1
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	681b      	ldr	r3, [r3, #0]
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3714      	adds	r7, #20
 80148f0:	46bd      	mov	sp, r7
 80148f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f6:	4770      	bx	lr

080148f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d10a      	bne.n	8014922 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014910:	f383 8811 	msr	BASEPRI, r3
 8014914:	f3bf 8f6f 	isb	sy
 8014918:	f3bf 8f4f 	dsb	sy
 801491c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801491e:	bf00      	nop
 8014920:	e7fe      	b.n	8014920 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014922:	f002 ffc7 	bl	80178b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801492e:	68f9      	ldr	r1, [r7, #12]
 8014930:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014932:	fb01 f303 	mul.w	r3, r1, r3
 8014936:	441a      	add	r2, r3
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	2200      	movs	r2, #0
 8014940:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681a      	ldr	r2, [r3, #0]
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	681a      	ldr	r2, [r3, #0]
 801494e:	68fb      	ldr	r3, [r7, #12]
 8014950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014952:	3b01      	subs	r3, #1
 8014954:	68f9      	ldr	r1, [r7, #12]
 8014956:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8014958:	fb01 f303 	mul.w	r3, r1, r3
 801495c:	441a      	add	r2, r3
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	22ff      	movs	r2, #255	; 0xff
 8014966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	22ff      	movs	r2, #255	; 0xff
 801496e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8014972:	683b      	ldr	r3, [r7, #0]
 8014974:	2b00      	cmp	r3, #0
 8014976:	d114      	bne.n	80149a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	691b      	ldr	r3, [r3, #16]
 801497c:	2b00      	cmp	r3, #0
 801497e:	d01a      	beq.n	80149b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	3310      	adds	r3, #16
 8014984:	4618      	mov	r0, r3
 8014986:	f001 fd67 	bl	8016458 <xTaskRemoveFromEventList>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d012      	beq.n	80149b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014990:	4b0c      	ldr	r3, [pc, #48]	; (80149c4 <xQueueGenericReset+0xcc>)
 8014992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014996:	601a      	str	r2, [r3, #0]
 8014998:	f3bf 8f4f 	dsb	sy
 801499c:	f3bf 8f6f 	isb	sy
 80149a0:	e009      	b.n	80149b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	3310      	adds	r3, #16
 80149a6:	4618      	mov	r0, r3
 80149a8:	f7ff fef2 	bl	8014790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	3324      	adds	r3, #36	; 0x24
 80149b0:	4618      	mov	r0, r3
 80149b2:	f7ff feed 	bl	8014790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80149b6:	f002 ffad 	bl	8017914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80149ba:	2301      	movs	r3, #1
}
 80149bc:	4618      	mov	r0, r3
 80149be:	3710      	adds	r7, #16
 80149c0:	46bd      	mov	sp, r7
 80149c2:	bd80      	pop	{r7, pc}
 80149c4:	e000ed04 	.word	0xe000ed04

080149c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b08e      	sub	sp, #56	; 0x38
 80149cc:	af02      	add	r7, sp, #8
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
 80149d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d10a      	bne.n	80149f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80149dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149e0:	f383 8811 	msr	BASEPRI, r3
 80149e4:	f3bf 8f6f 	isb	sy
 80149e8:	f3bf 8f4f 	dsb	sy
 80149ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80149ee:	bf00      	nop
 80149f0:	e7fe      	b.n	80149f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d10a      	bne.n	8014a0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80149f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149fc:	f383 8811 	msr	BASEPRI, r3
 8014a00:	f3bf 8f6f 	isb	sy
 8014a04:	f3bf 8f4f 	dsb	sy
 8014a08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014a0a:	bf00      	nop
 8014a0c:	e7fe      	b.n	8014a0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d002      	beq.n	8014a1a <xQueueGenericCreateStatic+0x52>
 8014a14:	68bb      	ldr	r3, [r7, #8]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d001      	beq.n	8014a1e <xQueueGenericCreateStatic+0x56>
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	e000      	b.n	8014a20 <xQueueGenericCreateStatic+0x58>
 8014a1e:	2300      	movs	r3, #0
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d10a      	bne.n	8014a3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8014a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a28:	f383 8811 	msr	BASEPRI, r3
 8014a2c:	f3bf 8f6f 	isb	sy
 8014a30:	f3bf 8f4f 	dsb	sy
 8014a34:	623b      	str	r3, [r7, #32]
}
 8014a36:	bf00      	nop
 8014a38:	e7fe      	b.n	8014a38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d102      	bne.n	8014a46 <xQueueGenericCreateStatic+0x7e>
 8014a40:	68bb      	ldr	r3, [r7, #8]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d101      	bne.n	8014a4a <xQueueGenericCreateStatic+0x82>
 8014a46:	2301      	movs	r3, #1
 8014a48:	e000      	b.n	8014a4c <xQueueGenericCreateStatic+0x84>
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d10a      	bne.n	8014a66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8014a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	61fb      	str	r3, [r7, #28]
}
 8014a62:	bf00      	nop
 8014a64:	e7fe      	b.n	8014a64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014a66:	2350      	movs	r3, #80	; 0x50
 8014a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014a6a:	697b      	ldr	r3, [r7, #20]
 8014a6c:	2b50      	cmp	r3, #80	; 0x50
 8014a6e:	d00a      	beq.n	8014a86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8014a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a74:	f383 8811 	msr	BASEPRI, r3
 8014a78:	f3bf 8f6f 	isb	sy
 8014a7c:	f3bf 8f4f 	dsb	sy
 8014a80:	61bb      	str	r3, [r7, #24]
}
 8014a82:	bf00      	nop
 8014a84:	e7fe      	b.n	8014a84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014a86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014a88:	683b      	ldr	r3, [r7, #0]
 8014a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8014a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	d00d      	beq.n	8014aae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a94:	2201      	movs	r2, #1
 8014a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014a9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8014a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aa0:	9300      	str	r3, [sp, #0]
 8014aa2:	4613      	mov	r3, r2
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	68b9      	ldr	r1, [r7, #8]
 8014aa8:	68f8      	ldr	r0, [r7, #12]
 8014aaa:	f000 f83f 	bl	8014b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3730      	adds	r7, #48	; 0x30
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}

08014ab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b08a      	sub	sp, #40	; 0x28
 8014abc:	af02      	add	r7, sp, #8
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d10a      	bne.n	8014ae2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8014acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad0:	f383 8811 	msr	BASEPRI, r3
 8014ad4:	f3bf 8f6f 	isb	sy
 8014ad8:	f3bf 8f4f 	dsb	sy
 8014adc:	613b      	str	r3, [r7, #16]
}
 8014ade:	bf00      	nop
 8014ae0:	e7fe      	b.n	8014ae0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	fb02 f303 	mul.w	r3, r2, r3
 8014aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014aec:	69fb      	ldr	r3, [r7, #28]
 8014aee:	3350      	adds	r3, #80	; 0x50
 8014af0:	4618      	mov	r0, r3
 8014af2:	f003 f801 	bl	8017af8 <pvPortMalloc>
 8014af6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d011      	beq.n	8014b22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014afe:	69bb      	ldr	r3, [r7, #24]
 8014b00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	3350      	adds	r3, #80	; 0x50
 8014b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	2200      	movs	r2, #0
 8014b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014b10:	79fa      	ldrb	r2, [r7, #7]
 8014b12:	69bb      	ldr	r3, [r7, #24]
 8014b14:	9300      	str	r3, [sp, #0]
 8014b16:	4613      	mov	r3, r2
 8014b18:	697a      	ldr	r2, [r7, #20]
 8014b1a:	68b9      	ldr	r1, [r7, #8]
 8014b1c:	68f8      	ldr	r0, [r7, #12]
 8014b1e:	f000 f805 	bl	8014b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014b22:	69bb      	ldr	r3, [r7, #24]
	}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3720      	adds	r7, #32
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b084      	sub	sp, #16
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	607a      	str	r2, [r7, #4]
 8014b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014b3a:	68bb      	ldr	r3, [r7, #8]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d103      	bne.n	8014b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014b40:	69bb      	ldr	r3, [r7, #24]
 8014b42:	69ba      	ldr	r2, [r7, #24]
 8014b44:	601a      	str	r2, [r3, #0]
 8014b46:	e002      	b.n	8014b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014b48:	69bb      	ldr	r3, [r7, #24]
 8014b4a:	687a      	ldr	r2, [r7, #4]
 8014b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014b4e:	69bb      	ldr	r3, [r7, #24]
 8014b50:	68fa      	ldr	r2, [r7, #12]
 8014b52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014b54:	69bb      	ldr	r3, [r7, #24]
 8014b56:	68ba      	ldr	r2, [r7, #8]
 8014b58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014b5a:	2101      	movs	r1, #1
 8014b5c:	69b8      	ldr	r0, [r7, #24]
 8014b5e:	f7ff fecb 	bl	80148f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014b62:	69bb      	ldr	r3, [r7, #24]
 8014b64:	78fa      	ldrb	r2, [r7, #3]
 8014b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014b6a:	bf00      	nop
 8014b6c:	3710      	adds	r7, #16
 8014b6e:	46bd      	mov	sp, r7
 8014b70:	bd80      	pop	{r7, pc}

08014b72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8014b72:	b580      	push	{r7, lr}
 8014b74:	b08a      	sub	sp, #40	; 0x28
 8014b76:	af02      	add	r7, sp, #8
 8014b78:	60f8      	str	r0, [r7, #12]
 8014b7a:	60b9      	str	r1, [r7, #8]
 8014b7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d10a      	bne.n	8014b9a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8014b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b88:	f383 8811 	msr	BASEPRI, r3
 8014b8c:	f3bf 8f6f 	isb	sy
 8014b90:	f3bf 8f4f 	dsb	sy
 8014b94:	61bb      	str	r3, [r7, #24]
}
 8014b96:	bf00      	nop
 8014b98:	e7fe      	b.n	8014b98 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014b9a:	68ba      	ldr	r2, [r7, #8]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	429a      	cmp	r2, r3
 8014ba0:	d90a      	bls.n	8014bb8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8014ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ba6:	f383 8811 	msr	BASEPRI, r3
 8014baa:	f3bf 8f6f 	isb	sy
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	617b      	str	r3, [r7, #20]
}
 8014bb4:	bf00      	nop
 8014bb6:	e7fe      	b.n	8014bb6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014bb8:	2302      	movs	r3, #2
 8014bba:	9300      	str	r3, [sp, #0]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	2100      	movs	r1, #0
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f7ff ff00 	bl	80149c8 <xQueueGenericCreateStatic>
 8014bc8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8014bca:	69fb      	ldr	r3, [r7, #28]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d002      	beq.n	8014bd6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014bd0:	69fb      	ldr	r3, [r7, #28]
 8014bd2:	68ba      	ldr	r2, [r7, #8]
 8014bd4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014bd6:	69fb      	ldr	r3, [r7, #28]
	}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3720      	adds	r7, #32
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}

08014be0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8014be0:	b580      	push	{r7, lr}
 8014be2:	b086      	sub	sp, #24
 8014be4:	af00      	add	r7, sp, #0
 8014be6:	6078      	str	r0, [r7, #4]
 8014be8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d10a      	bne.n	8014c06 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8014bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf4:	f383 8811 	msr	BASEPRI, r3
 8014bf8:	f3bf 8f6f 	isb	sy
 8014bfc:	f3bf 8f4f 	dsb	sy
 8014c00:	613b      	str	r3, [r7, #16]
}
 8014c02:	bf00      	nop
 8014c04:	e7fe      	b.n	8014c04 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8014c06:	683a      	ldr	r2, [r7, #0]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	429a      	cmp	r2, r3
 8014c0c:	d90a      	bls.n	8014c24 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8014c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c12:	f383 8811 	msr	BASEPRI, r3
 8014c16:	f3bf 8f6f 	isb	sy
 8014c1a:	f3bf 8f4f 	dsb	sy
 8014c1e:	60fb      	str	r3, [r7, #12]
}
 8014c20:	bf00      	nop
 8014c22:	e7fe      	b.n	8014c22 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8014c24:	2202      	movs	r2, #2
 8014c26:	2100      	movs	r1, #0
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7ff ff45 	bl	8014ab8 <xQueueGenericCreate>
 8014c2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8014c30:	697b      	ldr	r3, [r7, #20]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d002      	beq.n	8014c3c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	683a      	ldr	r2, [r7, #0]
 8014c3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8014c3c:	697b      	ldr	r3, [r7, #20]
	}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3718      	adds	r7, #24
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
	...

08014c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b08e      	sub	sp, #56	; 0x38
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014c56:	2300      	movs	r3, #0
 8014c58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d10a      	bne.n	8014c7a <xQueueGenericSend+0x32>
	__asm volatile
 8014c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c68:	f383 8811 	msr	BASEPRI, r3
 8014c6c:	f3bf 8f6f 	isb	sy
 8014c70:	f3bf 8f4f 	dsb	sy
 8014c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014c76:	bf00      	nop
 8014c78:	e7fe      	b.n	8014c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014c7a:	68bb      	ldr	r3, [r7, #8]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d103      	bne.n	8014c88 <xQueueGenericSend+0x40>
 8014c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d101      	bne.n	8014c8c <xQueueGenericSend+0x44>
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e000      	b.n	8014c8e <xQueueGenericSend+0x46>
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d10a      	bne.n	8014ca8 <xQueueGenericSend+0x60>
	__asm volatile
 8014c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c96:	f383 8811 	msr	BASEPRI, r3
 8014c9a:	f3bf 8f6f 	isb	sy
 8014c9e:	f3bf 8f4f 	dsb	sy
 8014ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014ca4:	bf00      	nop
 8014ca6:	e7fe      	b.n	8014ca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	2b02      	cmp	r3, #2
 8014cac:	d103      	bne.n	8014cb6 <xQueueGenericSend+0x6e>
 8014cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d101      	bne.n	8014cba <xQueueGenericSend+0x72>
 8014cb6:	2301      	movs	r3, #1
 8014cb8:	e000      	b.n	8014cbc <xQueueGenericSend+0x74>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d10a      	bne.n	8014cd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8014cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc4:	f383 8811 	msr	BASEPRI, r3
 8014cc8:	f3bf 8f6f 	isb	sy
 8014ccc:	f3bf 8f4f 	dsb	sy
 8014cd0:	623b      	str	r3, [r7, #32]
}
 8014cd2:	bf00      	nop
 8014cd4:	e7fe      	b.n	8014cd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014cd6:	f001 fe55 	bl	8016984 <xTaskGetSchedulerState>
 8014cda:	4603      	mov	r3, r0
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d102      	bne.n	8014ce6 <xQueueGenericSend+0x9e>
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d101      	bne.n	8014cea <xQueueGenericSend+0xa2>
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	e000      	b.n	8014cec <xQueueGenericSend+0xa4>
 8014cea:	2300      	movs	r3, #0
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d10a      	bne.n	8014d06 <xQueueGenericSend+0xbe>
	__asm volatile
 8014cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cf4:	f383 8811 	msr	BASEPRI, r3
 8014cf8:	f3bf 8f6f 	isb	sy
 8014cfc:	f3bf 8f4f 	dsb	sy
 8014d00:	61fb      	str	r3, [r7, #28]
}
 8014d02:	bf00      	nop
 8014d04:	e7fe      	b.n	8014d04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014d06:	f002 fdd5 	bl	80178b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d302      	bcc.n	8014d1c <xQueueGenericSend+0xd4>
 8014d16:	683b      	ldr	r3, [r7, #0]
 8014d18:	2b02      	cmp	r3, #2
 8014d1a:	d129      	bne.n	8014d70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014d1c:	683a      	ldr	r2, [r7, #0]
 8014d1e:	68b9      	ldr	r1, [r7, #8]
 8014d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d22:	f000 fc5e 	bl	80155e2 <prvCopyDataToQueue>
 8014d26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d010      	beq.n	8014d52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d32:	3324      	adds	r3, #36	; 0x24
 8014d34:	4618      	mov	r0, r3
 8014d36:	f001 fb8f 	bl	8016458 <xTaskRemoveFromEventList>
 8014d3a:	4603      	mov	r3, r0
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d013      	beq.n	8014d68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014d40:	4b3f      	ldr	r3, [pc, #252]	; (8014e40 <xQueueGenericSend+0x1f8>)
 8014d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d46:	601a      	str	r2, [r3, #0]
 8014d48:	f3bf 8f4f 	dsb	sy
 8014d4c:	f3bf 8f6f 	isb	sy
 8014d50:	e00a      	b.n	8014d68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d007      	beq.n	8014d68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014d58:	4b39      	ldr	r3, [pc, #228]	; (8014e40 <xQueueGenericSend+0x1f8>)
 8014d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d5e:	601a      	str	r2, [r3, #0]
 8014d60:	f3bf 8f4f 	dsb	sy
 8014d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014d68:	f002 fdd4 	bl	8017914 <vPortExitCritical>
				return pdPASS;
 8014d6c:	2301      	movs	r3, #1
 8014d6e:	e063      	b.n	8014e38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2b00      	cmp	r3, #0
 8014d74:	d103      	bne.n	8014d7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014d76:	f002 fdcd 	bl	8017914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e05c      	b.n	8014e38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d106      	bne.n	8014d92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014d84:	f107 0314 	add.w	r3, r7, #20
 8014d88:	4618      	mov	r0, r3
 8014d8a:	f001 fbc9 	bl	8016520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014d8e:	2301      	movs	r3, #1
 8014d90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014d92:	f002 fdbf 	bl	8017914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014d96:	f001 f887 	bl	8015ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014d9a:	f002 fd8b 	bl	80178b4 <vPortEnterCritical>
 8014d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014da4:	b25b      	sxtb	r3, r3
 8014da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014daa:	d103      	bne.n	8014db4 <xQueueGenericSend+0x16c>
 8014dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dae:	2200      	movs	r2, #0
 8014db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014dba:	b25b      	sxtb	r3, r3
 8014dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014dc0:	d103      	bne.n	8014dca <xQueueGenericSend+0x182>
 8014dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc4:	2200      	movs	r2, #0
 8014dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014dca:	f002 fda3 	bl	8017914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014dce:	1d3a      	adds	r2, r7, #4
 8014dd0:	f107 0314 	add.w	r3, r7, #20
 8014dd4:	4611      	mov	r1, r2
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	f001 fbb8 	bl	801654c <xTaskCheckForTimeOut>
 8014ddc:	4603      	mov	r3, r0
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d124      	bne.n	8014e2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014de4:	f000 fcf5 	bl	80157d2 <prvIsQueueFull>
 8014de8:	4603      	mov	r3, r0
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d018      	beq.n	8014e20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df0:	3310      	adds	r3, #16
 8014df2:	687a      	ldr	r2, [r7, #4]
 8014df4:	4611      	mov	r1, r2
 8014df6:	4618      	mov	r0, r3
 8014df8:	f001 fade 	bl	80163b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014dfe:	f000 fc80 	bl	8015702 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014e02:	f001 f85f 	bl	8015ec4 <xTaskResumeAll>
 8014e06:	4603      	mov	r3, r0
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	f47f af7c 	bne.w	8014d06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8014e0e:	4b0c      	ldr	r3, [pc, #48]	; (8014e40 <xQueueGenericSend+0x1f8>)
 8014e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e14:	601a      	str	r2, [r3, #0]
 8014e16:	f3bf 8f4f 	dsb	sy
 8014e1a:	f3bf 8f6f 	isb	sy
 8014e1e:	e772      	b.n	8014d06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e22:	f000 fc6e 	bl	8015702 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014e26:	f001 f84d 	bl	8015ec4 <xTaskResumeAll>
 8014e2a:	e76c      	b.n	8014d06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e2e:	f000 fc68 	bl	8015702 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014e32:	f001 f847 	bl	8015ec4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014e38:	4618      	mov	r0, r3
 8014e3a:	3738      	adds	r7, #56	; 0x38
 8014e3c:	46bd      	mov	sp, r7
 8014e3e:	bd80      	pop	{r7, pc}
 8014e40:	e000ed04 	.word	0xe000ed04

08014e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b090      	sub	sp, #64	; 0x40
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	60f8      	str	r0, [r7, #12]
 8014e4c:	60b9      	str	r1, [r7, #8]
 8014e4e:	607a      	str	r2, [r7, #4]
 8014e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8014e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d10a      	bne.n	8014e72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8014e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e60:	f383 8811 	msr	BASEPRI, r3
 8014e64:	f3bf 8f6f 	isb	sy
 8014e68:	f3bf 8f4f 	dsb	sy
 8014e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8014e6e:	bf00      	nop
 8014e70:	e7fe      	b.n	8014e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d103      	bne.n	8014e80 <xQueueGenericSendFromISR+0x3c>
 8014e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d101      	bne.n	8014e84 <xQueueGenericSendFromISR+0x40>
 8014e80:	2301      	movs	r3, #1
 8014e82:	e000      	b.n	8014e86 <xQueueGenericSendFromISR+0x42>
 8014e84:	2300      	movs	r3, #0
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d10a      	bne.n	8014ea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8014e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e8e:	f383 8811 	msr	BASEPRI, r3
 8014e92:	f3bf 8f6f 	isb	sy
 8014e96:	f3bf 8f4f 	dsb	sy
 8014e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014e9c:	bf00      	nop
 8014e9e:	e7fe      	b.n	8014e9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	2b02      	cmp	r3, #2
 8014ea4:	d103      	bne.n	8014eae <xQueueGenericSendFromISR+0x6a>
 8014ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014eaa:	2b01      	cmp	r3, #1
 8014eac:	d101      	bne.n	8014eb2 <xQueueGenericSendFromISR+0x6e>
 8014eae:	2301      	movs	r3, #1
 8014eb0:	e000      	b.n	8014eb4 <xQueueGenericSendFromISR+0x70>
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d10a      	bne.n	8014ece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8014eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ebc:	f383 8811 	msr	BASEPRI, r3
 8014ec0:	f3bf 8f6f 	isb	sy
 8014ec4:	f3bf 8f4f 	dsb	sy
 8014ec8:	623b      	str	r3, [r7, #32]
}
 8014eca:	bf00      	nop
 8014ecc:	e7fe      	b.n	8014ecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ece:	f002 fdd3 	bl	8017a78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8014ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8014ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014eda:	f383 8811 	msr	BASEPRI, r3
 8014ede:	f3bf 8f6f 	isb	sy
 8014ee2:	f3bf 8f4f 	dsb	sy
 8014ee6:	61fa      	str	r2, [r7, #28]
 8014ee8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8014eea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014eec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d302      	bcc.n	8014f00 <xQueueGenericSendFromISR+0xbc>
 8014efa:	683b      	ldr	r3, [r7, #0]
 8014efc:	2b02      	cmp	r3, #2
 8014efe:	d12f      	bne.n	8014f60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8014f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014f10:	683a      	ldr	r2, [r7, #0]
 8014f12:	68b9      	ldr	r1, [r7, #8]
 8014f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014f16:	f000 fb64 	bl	80155e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8014f1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8014f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f22:	d112      	bne.n	8014f4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d016      	beq.n	8014f5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f2e:	3324      	adds	r3, #36	; 0x24
 8014f30:	4618      	mov	r0, r3
 8014f32:	f001 fa91 	bl	8016458 <xTaskRemoveFromEventList>
 8014f36:	4603      	mov	r3, r0
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d00e      	beq.n	8014f5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d00b      	beq.n	8014f5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2201      	movs	r2, #1
 8014f46:	601a      	str	r2, [r3, #0]
 8014f48:	e007      	b.n	8014f5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014f4e:	3301      	adds	r3, #1
 8014f50:	b2db      	uxtb	r3, r3
 8014f52:	b25a      	sxtb	r2, r3
 8014f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8014f5a:	2301      	movs	r3, #1
 8014f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8014f5e:	e001      	b.n	8014f64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014f60:	2300      	movs	r3, #0
 8014f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8014f72:	4618      	mov	r0, r3
 8014f74:	3740      	adds	r7, #64	; 0x40
 8014f76:	46bd      	mov	sp, r7
 8014f78:	bd80      	pop	{r7, pc}

08014f7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b08e      	sub	sp, #56	; 0x38
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
 8014f82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8014f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d10a      	bne.n	8014fa4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8014f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f92:	f383 8811 	msr	BASEPRI, r3
 8014f96:	f3bf 8f6f 	isb	sy
 8014f9a:	f3bf 8f4f 	dsb	sy
 8014f9e:	623b      	str	r3, [r7, #32]
}
 8014fa0:	bf00      	nop
 8014fa2:	e7fe      	b.n	8014fa2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d00a      	beq.n	8014fc2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8014fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fb0:	f383 8811 	msr	BASEPRI, r3
 8014fb4:	f3bf 8f6f 	isb	sy
 8014fb8:	f3bf 8f4f 	dsb	sy
 8014fbc:	61fb      	str	r3, [r7, #28]
}
 8014fbe:	bf00      	nop
 8014fc0:	e7fe      	b.n	8014fc0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8014fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d103      	bne.n	8014fd2 <xQueueGiveFromISR+0x58>
 8014fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fcc:	689b      	ldr	r3, [r3, #8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d101      	bne.n	8014fd6 <xQueueGiveFromISR+0x5c>
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	e000      	b.n	8014fd8 <xQueueGiveFromISR+0x5e>
 8014fd6:	2300      	movs	r3, #0
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d10a      	bne.n	8014ff2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8014fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fe0:	f383 8811 	msr	BASEPRI, r3
 8014fe4:	f3bf 8f6f 	isb	sy
 8014fe8:	f3bf 8f4f 	dsb	sy
 8014fec:	61bb      	str	r3, [r7, #24]
}
 8014fee:	bf00      	nop
 8014ff0:	e7fe      	b.n	8014ff0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014ff2:	f002 fd41 	bl	8017a78 <vPortValidateInterruptPriority>
	__asm volatile
 8014ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8014ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ffe:	f383 8811 	msr	BASEPRI, r3
 8015002:	f3bf 8f6f 	isb	sy
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	617a      	str	r2, [r7, #20]
 801500c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801500e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8015018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801501c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801501e:	429a      	cmp	r2, r3
 8015020:	d22b      	bcs.n	801507a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8015022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502e:	1c5a      	adds	r2, r3, #1
 8015030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015032:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801503c:	d112      	bne.n	8015064 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015042:	2b00      	cmp	r3, #0
 8015044:	d016      	beq.n	8015074 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015048:	3324      	adds	r3, #36	; 0x24
 801504a:	4618      	mov	r0, r3
 801504c:	f001 fa04 	bl	8016458 <xTaskRemoveFromEventList>
 8015050:	4603      	mov	r3, r0
 8015052:	2b00      	cmp	r3, #0
 8015054:	d00e      	beq.n	8015074 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d00b      	beq.n	8015074 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	2201      	movs	r2, #1
 8015060:	601a      	str	r2, [r3, #0]
 8015062:	e007      	b.n	8015074 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015068:	3301      	adds	r3, #1
 801506a:	b2db      	uxtb	r3, r3
 801506c:	b25a      	sxtb	r2, r3
 801506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8015074:	2301      	movs	r3, #1
 8015076:	637b      	str	r3, [r7, #52]	; 0x34
 8015078:	e001      	b.n	801507e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801507a:	2300      	movs	r3, #0
 801507c:	637b      	str	r3, [r7, #52]	; 0x34
 801507e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015080:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	f383 8811 	msr	BASEPRI, r3
}
 8015088:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801508c:	4618      	mov	r0, r3
 801508e:	3738      	adds	r7, #56	; 0x38
 8015090:	46bd      	mov	sp, r7
 8015092:	bd80      	pop	{r7, pc}

08015094 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b08c      	sub	sp, #48	; 0x30
 8015098:	af00      	add	r7, sp, #0
 801509a:	60f8      	str	r0, [r7, #12]
 801509c:	60b9      	str	r1, [r7, #8]
 801509e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80150a0:	2300      	movs	r3, #0
 80150a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80150a4:	68fb      	ldr	r3, [r7, #12]
 80150a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80150a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d10a      	bne.n	80150c4 <xQueueReceive+0x30>
	__asm volatile
 80150ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150b2:	f383 8811 	msr	BASEPRI, r3
 80150b6:	f3bf 8f6f 	isb	sy
 80150ba:	f3bf 8f4f 	dsb	sy
 80150be:	623b      	str	r3, [r7, #32]
}
 80150c0:	bf00      	nop
 80150c2:	e7fe      	b.n	80150c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	d103      	bne.n	80150d2 <xQueueReceive+0x3e>
 80150ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d101      	bne.n	80150d6 <xQueueReceive+0x42>
 80150d2:	2301      	movs	r3, #1
 80150d4:	e000      	b.n	80150d8 <xQueueReceive+0x44>
 80150d6:	2300      	movs	r3, #0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d10a      	bne.n	80150f2 <xQueueReceive+0x5e>
	__asm volatile
 80150dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e0:	f383 8811 	msr	BASEPRI, r3
 80150e4:	f3bf 8f6f 	isb	sy
 80150e8:	f3bf 8f4f 	dsb	sy
 80150ec:	61fb      	str	r3, [r7, #28]
}
 80150ee:	bf00      	nop
 80150f0:	e7fe      	b.n	80150f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80150f2:	f001 fc47 	bl	8016984 <xTaskGetSchedulerState>
 80150f6:	4603      	mov	r3, r0
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d102      	bne.n	8015102 <xQueueReceive+0x6e>
 80150fc:	687b      	ldr	r3, [r7, #4]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d101      	bne.n	8015106 <xQueueReceive+0x72>
 8015102:	2301      	movs	r3, #1
 8015104:	e000      	b.n	8015108 <xQueueReceive+0x74>
 8015106:	2300      	movs	r3, #0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d10a      	bne.n	8015122 <xQueueReceive+0x8e>
	__asm volatile
 801510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015110:	f383 8811 	msr	BASEPRI, r3
 8015114:	f3bf 8f6f 	isb	sy
 8015118:	f3bf 8f4f 	dsb	sy
 801511c:	61bb      	str	r3, [r7, #24]
}
 801511e:	bf00      	nop
 8015120:	e7fe      	b.n	8015120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015122:	f002 fbc7 	bl	80178b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801512a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801512c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801512e:	2b00      	cmp	r3, #0
 8015130:	d01f      	beq.n	8015172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8015132:	68b9      	ldr	r1, [r7, #8]
 8015134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015136:	f000 fabe 	bl	80156b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801513a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801513c:	1e5a      	subs	r2, r3, #1
 801513e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015144:	691b      	ldr	r3, [r3, #16]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d00f      	beq.n	801516a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514c:	3310      	adds	r3, #16
 801514e:	4618      	mov	r0, r3
 8015150:	f001 f982 	bl	8016458 <xTaskRemoveFromEventList>
 8015154:	4603      	mov	r3, r0
 8015156:	2b00      	cmp	r3, #0
 8015158:	d007      	beq.n	801516a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801515a:	4b3d      	ldr	r3, [pc, #244]	; (8015250 <xQueueReceive+0x1bc>)
 801515c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015160:	601a      	str	r2, [r3, #0]
 8015162:	f3bf 8f4f 	dsb	sy
 8015166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801516a:	f002 fbd3 	bl	8017914 <vPortExitCritical>
				return pdPASS;
 801516e:	2301      	movs	r3, #1
 8015170:	e069      	b.n	8015246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d103      	bne.n	8015180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015178:	f002 fbcc 	bl	8017914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801517c:	2300      	movs	r3, #0
 801517e:	e062      	b.n	8015246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015182:	2b00      	cmp	r3, #0
 8015184:	d106      	bne.n	8015194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015186:	f107 0310 	add.w	r3, r7, #16
 801518a:	4618      	mov	r0, r3
 801518c:	f001 f9c8 	bl	8016520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015190:	2301      	movs	r3, #1
 8015192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015194:	f002 fbbe 	bl	8017914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015198:	f000 fe86 	bl	8015ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801519c:	f002 fb8a 	bl	80178b4 <vPortEnterCritical>
 80151a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80151a6:	b25b      	sxtb	r3, r3
 80151a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151ac:	d103      	bne.n	80151b6 <xQueueReceive+0x122>
 80151ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b0:	2200      	movs	r2, #0
 80151b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80151b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80151bc:	b25b      	sxtb	r3, r3
 80151be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151c2:	d103      	bne.n	80151cc <xQueueReceive+0x138>
 80151c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c6:	2200      	movs	r2, #0
 80151c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80151cc:	f002 fba2 	bl	8017914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80151d0:	1d3a      	adds	r2, r7, #4
 80151d2:	f107 0310 	add.w	r3, r7, #16
 80151d6:	4611      	mov	r1, r2
 80151d8:	4618      	mov	r0, r3
 80151da:	f001 f9b7 	bl	801654c <xTaskCheckForTimeOut>
 80151de:	4603      	mov	r3, r0
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d123      	bne.n	801522c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80151e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80151e6:	f000 fade 	bl	80157a6 <prvIsQueueEmpty>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d017      	beq.n	8015220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80151f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151f2:	3324      	adds	r3, #36	; 0x24
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	4611      	mov	r1, r2
 80151f8:	4618      	mov	r0, r3
 80151fa:	f001 f8dd 	bl	80163b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80151fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015200:	f000 fa7f 	bl	8015702 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015204:	f000 fe5e 	bl	8015ec4 <xTaskResumeAll>
 8015208:	4603      	mov	r3, r0
 801520a:	2b00      	cmp	r3, #0
 801520c:	d189      	bne.n	8015122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801520e:	4b10      	ldr	r3, [pc, #64]	; (8015250 <xQueueReceive+0x1bc>)
 8015210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015214:	601a      	str	r2, [r3, #0]
 8015216:	f3bf 8f4f 	dsb	sy
 801521a:	f3bf 8f6f 	isb	sy
 801521e:	e780      	b.n	8015122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8015220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015222:	f000 fa6e 	bl	8015702 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015226:	f000 fe4d 	bl	8015ec4 <xTaskResumeAll>
 801522a:	e77a      	b.n	8015122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801522e:	f000 fa68 	bl	8015702 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015232:	f000 fe47 	bl	8015ec4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015238:	f000 fab5 	bl	80157a6 <prvIsQueueEmpty>
 801523c:	4603      	mov	r3, r0
 801523e:	2b00      	cmp	r3, #0
 8015240:	f43f af6f 	beq.w	8015122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8015244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8015246:	4618      	mov	r0, r3
 8015248:	3730      	adds	r7, #48	; 0x30
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	bf00      	nop
 8015250:	e000ed04 	.word	0xe000ed04

08015254 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b08e      	sub	sp, #56	; 0x38
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801525e:	2300      	movs	r3, #0
 8015260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8015266:	2300      	movs	r3, #0
 8015268:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526c:	2b00      	cmp	r3, #0
 801526e:	d10a      	bne.n	8015286 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8015270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015274:	f383 8811 	msr	BASEPRI, r3
 8015278:	f3bf 8f6f 	isb	sy
 801527c:	f3bf 8f4f 	dsb	sy
 8015280:	623b      	str	r3, [r7, #32]
}
 8015282:	bf00      	nop
 8015284:	e7fe      	b.n	8015284 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8015286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801528a:	2b00      	cmp	r3, #0
 801528c:	d00a      	beq.n	80152a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801528e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015292:	f383 8811 	msr	BASEPRI, r3
 8015296:	f3bf 8f6f 	isb	sy
 801529a:	f3bf 8f4f 	dsb	sy
 801529e:	61fb      	str	r3, [r7, #28]
}
 80152a0:	bf00      	nop
 80152a2:	e7fe      	b.n	80152a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80152a4:	f001 fb6e 	bl	8016984 <xTaskGetSchedulerState>
 80152a8:	4603      	mov	r3, r0
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d102      	bne.n	80152b4 <xQueueSemaphoreTake+0x60>
 80152ae:	683b      	ldr	r3, [r7, #0]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d101      	bne.n	80152b8 <xQueueSemaphoreTake+0x64>
 80152b4:	2301      	movs	r3, #1
 80152b6:	e000      	b.n	80152ba <xQueueSemaphoreTake+0x66>
 80152b8:	2300      	movs	r3, #0
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d10a      	bne.n	80152d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80152be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152c2:	f383 8811 	msr	BASEPRI, r3
 80152c6:	f3bf 8f6f 	isb	sy
 80152ca:	f3bf 8f4f 	dsb	sy
 80152ce:	61bb      	str	r3, [r7, #24]
}
 80152d0:	bf00      	nop
 80152d2:	e7fe      	b.n	80152d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80152d4:	f002 faee 	bl	80178b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80152d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80152dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80152de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d024      	beq.n	801532e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80152e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152e6:	1e5a      	subs	r2, r3, #1
 80152e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80152ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ee:	681b      	ldr	r3, [r3, #0]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d104      	bne.n	80152fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80152f4:	f001 fdfc 	bl	8016ef0 <pvTaskIncrementMutexHeldCount>
 80152f8:	4602      	mov	r2, r0
 80152fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80152fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015300:	691b      	ldr	r3, [r3, #16]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d00f      	beq.n	8015326 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015308:	3310      	adds	r3, #16
 801530a:	4618      	mov	r0, r3
 801530c:	f001 f8a4 	bl	8016458 <xTaskRemoveFromEventList>
 8015310:	4603      	mov	r3, r0
 8015312:	2b00      	cmp	r3, #0
 8015314:	d007      	beq.n	8015326 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015316:	4b54      	ldr	r3, [pc, #336]	; (8015468 <xQueueSemaphoreTake+0x214>)
 8015318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801531c:	601a      	str	r2, [r3, #0]
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015326:	f002 faf5 	bl	8017914 <vPortExitCritical>
				return pdPASS;
 801532a:	2301      	movs	r3, #1
 801532c:	e097      	b.n	801545e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	2b00      	cmp	r3, #0
 8015332:	d111      	bne.n	8015358 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015336:	2b00      	cmp	r3, #0
 8015338:	d00a      	beq.n	8015350 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801533a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801533e:	f383 8811 	msr	BASEPRI, r3
 8015342:	f3bf 8f6f 	isb	sy
 8015346:	f3bf 8f4f 	dsb	sy
 801534a:	617b      	str	r3, [r7, #20]
}
 801534c:	bf00      	nop
 801534e:	e7fe      	b.n	801534e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8015350:	f002 fae0 	bl	8017914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8015354:	2300      	movs	r3, #0
 8015356:	e082      	b.n	801545e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801535a:	2b00      	cmp	r3, #0
 801535c:	d106      	bne.n	801536c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801535e:	f107 030c 	add.w	r3, r7, #12
 8015362:	4618      	mov	r0, r3
 8015364:	f001 f8dc 	bl	8016520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015368:	2301      	movs	r3, #1
 801536a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801536c:	f002 fad2 	bl	8017914 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015370:	f000 fd9a 	bl	8015ea8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015374:	f002 fa9e 	bl	80178b4 <vPortEnterCritical>
 8015378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801537e:	b25b      	sxtb	r3, r3
 8015380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015384:	d103      	bne.n	801538e <xQueueSemaphoreTake+0x13a>
 8015386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015388:	2200      	movs	r2, #0
 801538a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015394:	b25b      	sxtb	r3, r3
 8015396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801539a:	d103      	bne.n	80153a4 <xQueueSemaphoreTake+0x150>
 801539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801539e:	2200      	movs	r2, #0
 80153a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80153a4:	f002 fab6 	bl	8017914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80153a8:	463a      	mov	r2, r7
 80153aa:	f107 030c 	add.w	r3, r7, #12
 80153ae:	4611      	mov	r1, r2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f001 f8cb 	bl	801654c <xTaskCheckForTimeOut>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d132      	bne.n	8015422 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80153bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153be:	f000 f9f2 	bl	80157a6 <prvIsQueueEmpty>
 80153c2:	4603      	mov	r3, r0
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d026      	beq.n	8015416 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80153c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d109      	bne.n	80153e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80153d0:	f002 fa70 	bl	80178b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80153d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d6:	689b      	ldr	r3, [r3, #8]
 80153d8:	4618      	mov	r0, r3
 80153da:	f001 faf1 	bl	80169c0 <xTaskPriorityInherit>
 80153de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80153e0:	f002 fa98 	bl	8017914 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80153e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e6:	3324      	adds	r3, #36	; 0x24
 80153e8:	683a      	ldr	r2, [r7, #0]
 80153ea:	4611      	mov	r1, r2
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 ffe3 	bl	80163b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80153f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153f4:	f000 f985 	bl	8015702 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80153f8:	f000 fd64 	bl	8015ec4 <xTaskResumeAll>
 80153fc:	4603      	mov	r3, r0
 80153fe:	2b00      	cmp	r3, #0
 8015400:	f47f af68 	bne.w	80152d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8015404:	4b18      	ldr	r3, [pc, #96]	; (8015468 <xQueueSemaphoreTake+0x214>)
 8015406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801540a:	601a      	str	r2, [r3, #0]
 801540c:	f3bf 8f4f 	dsb	sy
 8015410:	f3bf 8f6f 	isb	sy
 8015414:	e75e      	b.n	80152d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015418:	f000 f973 	bl	8015702 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801541c:	f000 fd52 	bl	8015ec4 <xTaskResumeAll>
 8015420:	e758      	b.n	80152d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015424:	f000 f96d 	bl	8015702 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015428:	f000 fd4c 	bl	8015ec4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801542c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801542e:	f000 f9ba 	bl	80157a6 <prvIsQueueEmpty>
 8015432:	4603      	mov	r3, r0
 8015434:	2b00      	cmp	r3, #0
 8015436:	f43f af4d 	beq.w	80152d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801543a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543c:	2b00      	cmp	r3, #0
 801543e:	d00d      	beq.n	801545c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8015440:	f002 fa38 	bl	80178b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8015444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015446:	f000 f8b4 	bl	80155b2 <prvGetDisinheritPriorityAfterTimeout>
 801544a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544e:	689b      	ldr	r3, [r3, #8]
 8015450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015452:	4618      	mov	r0, r3
 8015454:	f001 fb8a 	bl	8016b6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8015458:	f002 fa5c 	bl	8017914 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801545c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801545e:	4618      	mov	r0, r3
 8015460:	3738      	adds	r7, #56	; 0x38
 8015462:	46bd      	mov	sp, r7
 8015464:	bd80      	pop	{r7, pc}
 8015466:	bf00      	nop
 8015468:	e000ed04 	.word	0xe000ed04

0801546c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b08e      	sub	sp, #56	; 0x38
 8015470:	af00      	add	r7, sp, #0
 8015472:	60f8      	str	r0, [r7, #12]
 8015474:	60b9      	str	r1, [r7, #8]
 8015476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801547c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801547e:	2b00      	cmp	r3, #0
 8015480:	d10a      	bne.n	8015498 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8015482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015486:	f383 8811 	msr	BASEPRI, r3
 801548a:	f3bf 8f6f 	isb	sy
 801548e:	f3bf 8f4f 	dsb	sy
 8015492:	623b      	str	r3, [r7, #32]
}
 8015494:	bf00      	nop
 8015496:	e7fe      	b.n	8015496 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d103      	bne.n	80154a6 <xQueueReceiveFromISR+0x3a>
 801549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d101      	bne.n	80154aa <xQueueReceiveFromISR+0x3e>
 80154a6:	2301      	movs	r3, #1
 80154a8:	e000      	b.n	80154ac <xQueueReceiveFromISR+0x40>
 80154aa:	2300      	movs	r3, #0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d10a      	bne.n	80154c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80154b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b4:	f383 8811 	msr	BASEPRI, r3
 80154b8:	f3bf 8f6f 	isb	sy
 80154bc:	f3bf 8f4f 	dsb	sy
 80154c0:	61fb      	str	r3, [r7, #28]
}
 80154c2:	bf00      	nop
 80154c4:	e7fe      	b.n	80154c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80154c6:	f002 fad7 	bl	8017a78 <vPortValidateInterruptPriority>
	__asm volatile
 80154ca:	f3ef 8211 	mrs	r2, BASEPRI
 80154ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154d2:	f383 8811 	msr	BASEPRI, r3
 80154d6:	f3bf 8f6f 	isb	sy
 80154da:	f3bf 8f4f 	dsb	sy
 80154de:	61ba      	str	r2, [r7, #24]
 80154e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80154e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80154e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80154e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80154ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80154ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d02f      	beq.n	8015552 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80154f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80154f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80154fc:	68b9      	ldr	r1, [r7, #8]
 80154fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015500:	f000 f8d9 	bl	80156b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015506:	1e5a      	subs	r2, r3, #1
 8015508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801550a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801550c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015514:	d112      	bne.n	801553c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015518:	691b      	ldr	r3, [r3, #16]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d016      	beq.n	801554c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015520:	3310      	adds	r3, #16
 8015522:	4618      	mov	r0, r3
 8015524:	f000 ff98 	bl	8016458 <xTaskRemoveFromEventList>
 8015528:	4603      	mov	r3, r0
 801552a:	2b00      	cmp	r3, #0
 801552c:	d00e      	beq.n	801554c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d00b      	beq.n	801554c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2201      	movs	r2, #1
 8015538:	601a      	str	r2, [r3, #0]
 801553a:	e007      	b.n	801554c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801553c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015540:	3301      	adds	r3, #1
 8015542:	b2db      	uxtb	r3, r3
 8015544:	b25a      	sxtb	r2, r3
 8015546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801554c:	2301      	movs	r3, #1
 801554e:	637b      	str	r3, [r7, #52]	; 0x34
 8015550:	e001      	b.n	8015556 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8015552:	2300      	movs	r3, #0
 8015554:	637b      	str	r3, [r7, #52]	; 0x34
 8015556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015558:	613b      	str	r3, [r7, #16]
	__asm volatile
 801555a:	693b      	ldr	r3, [r7, #16]
 801555c:	f383 8811 	msr	BASEPRI, r3
}
 8015560:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8015562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015564:	4618      	mov	r0, r3
 8015566:	3738      	adds	r7, #56	; 0x38
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}

0801556c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b084      	sub	sp, #16
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d10a      	bne.n	8015594 <vQueueDelete+0x28>
	__asm volatile
 801557e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015582:	f383 8811 	msr	BASEPRI, r3
 8015586:	f3bf 8f6f 	isb	sy
 801558a:	f3bf 8f4f 	dsb	sy
 801558e:	60bb      	str	r3, [r7, #8]
}
 8015590:	bf00      	nop
 8015592:	e7fe      	b.n	8015592 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8015594:	68f8      	ldr	r0, [r7, #12]
 8015596:	f000 f95f 	bl	8015858 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d102      	bne.n	80155aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80155a4:	68f8      	ldr	r0, [r7, #12]
 80155a6:	f002 fb73 	bl	8017c90 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80155aa:	bf00      	nop
 80155ac:	3710      	adds	r7, #16
 80155ae:	46bd      	mov	sp, r7
 80155b0:	bd80      	pop	{r7, pc}

080155b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80155b2:	b480      	push	{r7}
 80155b4:	b085      	sub	sp, #20
 80155b6:	af00      	add	r7, sp, #0
 80155b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d006      	beq.n	80155d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80155cc:	60fb      	str	r3, [r7, #12]
 80155ce:	e001      	b.n	80155d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80155d0:	2300      	movs	r3, #0
 80155d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80155d4:	68fb      	ldr	r3, [r7, #12]
	}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3714      	adds	r7, #20
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr

080155e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b086      	sub	sp, #24
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	60f8      	str	r0, [r7, #12]
 80155ea:	60b9      	str	r1, [r7, #8]
 80155ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80155ee:	2300      	movs	r3, #0
 80155f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80155f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d10d      	bne.n	801561c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d14d      	bne.n	80156a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	689b      	ldr	r3, [r3, #8]
 801560c:	4618      	mov	r0, r3
 801560e:	f001 fa3f 	bl	8016a90 <xTaskPriorityDisinherit>
 8015612:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8015614:	68fb      	ldr	r3, [r7, #12]
 8015616:	2200      	movs	r2, #0
 8015618:	609a      	str	r2, [r3, #8]
 801561a:	e043      	b.n	80156a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d119      	bne.n	8015656 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	6858      	ldr	r0, [r3, #4]
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801562a:	461a      	mov	r2, r3
 801562c:	68b9      	ldr	r1, [r7, #8]
 801562e:	f003 facf 	bl	8018bd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	685a      	ldr	r2, [r3, #4]
 8015636:	68fb      	ldr	r3, [r7, #12]
 8015638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801563a:	441a      	add	r2, r3
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	685a      	ldr	r2, [r3, #4]
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	689b      	ldr	r3, [r3, #8]
 8015648:	429a      	cmp	r2, r3
 801564a:	d32b      	bcc.n	80156a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	681a      	ldr	r2, [r3, #0]
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	605a      	str	r2, [r3, #4]
 8015654:	e026      	b.n	80156a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	68d8      	ldr	r0, [r3, #12]
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801565e:	461a      	mov	r2, r3
 8015660:	68b9      	ldr	r1, [r7, #8]
 8015662:	f003 fab5 	bl	8018bd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	68da      	ldr	r2, [r3, #12]
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801566e:	425b      	negs	r3, r3
 8015670:	441a      	add	r2, r3
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	68da      	ldr	r2, [r3, #12]
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	429a      	cmp	r2, r3
 8015680:	d207      	bcs.n	8015692 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015682:	68fb      	ldr	r3, [r7, #12]
 8015684:	689a      	ldr	r2, [r3, #8]
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801568a:	425b      	negs	r3, r3
 801568c:	441a      	add	r2, r3
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2b02      	cmp	r3, #2
 8015696:	d105      	bne.n	80156a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015698:	693b      	ldr	r3, [r7, #16]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d002      	beq.n	80156a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	3b01      	subs	r3, #1
 80156a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	1c5a      	adds	r2, r3, #1
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80156ac:	697b      	ldr	r3, [r7, #20]
}
 80156ae:	4618      	mov	r0, r3
 80156b0:	3718      	adds	r7, #24
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd80      	pop	{r7, pc}

080156b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80156b6:	b580      	push	{r7, lr}
 80156b8:	b082      	sub	sp, #8
 80156ba:	af00      	add	r7, sp, #0
 80156bc:	6078      	str	r0, [r7, #4]
 80156be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d018      	beq.n	80156fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	68da      	ldr	r2, [r3, #12]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156d0:	441a      	add	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	68da      	ldr	r2, [r3, #12]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	689b      	ldr	r3, [r3, #8]
 80156de:	429a      	cmp	r2, r3
 80156e0:	d303      	bcc.n	80156ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	681a      	ldr	r2, [r3, #0]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	68d9      	ldr	r1, [r3, #12]
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80156f2:	461a      	mov	r2, r3
 80156f4:	6838      	ldr	r0, [r7, #0]
 80156f6:	f003 fa6b 	bl	8018bd0 <memcpy>
	}
}
 80156fa:	bf00      	nop
 80156fc:	3708      	adds	r7, #8
 80156fe:	46bd      	mov	sp, r7
 8015700:	bd80      	pop	{r7, pc}

08015702 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8015702:	b580      	push	{r7, lr}
 8015704:	b084      	sub	sp, #16
 8015706:	af00      	add	r7, sp, #0
 8015708:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801570a:	f002 f8d3 	bl	80178b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015714:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015716:	e011      	b.n	801573c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801571c:	2b00      	cmp	r3, #0
 801571e:	d012      	beq.n	8015746 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	3324      	adds	r3, #36	; 0x24
 8015724:	4618      	mov	r0, r3
 8015726:	f000 fe97 	bl	8016458 <xTaskRemoveFromEventList>
 801572a:	4603      	mov	r3, r0
 801572c:	2b00      	cmp	r3, #0
 801572e:	d001      	beq.n	8015734 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8015730:	f000 ff6e 	bl	8016610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015734:	7bfb      	ldrb	r3, [r7, #15]
 8015736:	3b01      	subs	r3, #1
 8015738:	b2db      	uxtb	r3, r3
 801573a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801573c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015740:	2b00      	cmp	r3, #0
 8015742:	dce9      	bgt.n	8015718 <prvUnlockQueue+0x16>
 8015744:	e000      	b.n	8015748 <prvUnlockQueue+0x46>
					break;
 8015746:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	22ff      	movs	r2, #255	; 0xff
 801574c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8015750:	f002 f8e0 	bl	8017914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015754:	f002 f8ae 	bl	80178b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801575e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015760:	e011      	b.n	8015786 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	691b      	ldr	r3, [r3, #16]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d012      	beq.n	8015790 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	3310      	adds	r3, #16
 801576e:	4618      	mov	r0, r3
 8015770:	f000 fe72 	bl	8016458 <xTaskRemoveFromEventList>
 8015774:	4603      	mov	r3, r0
 8015776:	2b00      	cmp	r3, #0
 8015778:	d001      	beq.n	801577e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801577a:	f000 ff49 	bl	8016610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801577e:	7bbb      	ldrb	r3, [r7, #14]
 8015780:	3b01      	subs	r3, #1
 8015782:	b2db      	uxtb	r3, r3
 8015784:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8015786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801578a:	2b00      	cmp	r3, #0
 801578c:	dce9      	bgt.n	8015762 <prvUnlockQueue+0x60>
 801578e:	e000      	b.n	8015792 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8015790:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	22ff      	movs	r2, #255	; 0xff
 8015796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801579a:	f002 f8bb 	bl	8017914 <vPortExitCritical>
}
 801579e:	bf00      	nop
 80157a0:	3710      	adds	r7, #16
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b084      	sub	sp, #16
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80157ae:	f002 f881 	bl	80178b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d102      	bne.n	80157c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80157ba:	2301      	movs	r3, #1
 80157bc:	60fb      	str	r3, [r7, #12]
 80157be:	e001      	b.n	80157c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80157c0:	2300      	movs	r3, #0
 80157c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157c4:	f002 f8a6 	bl	8017914 <vPortExitCritical>

	return xReturn;
 80157c8:	68fb      	ldr	r3, [r7, #12]
}
 80157ca:	4618      	mov	r0, r3
 80157cc:	3710      	adds	r7, #16
 80157ce:	46bd      	mov	sp, r7
 80157d0:	bd80      	pop	{r7, pc}

080157d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80157d2:	b580      	push	{r7, lr}
 80157d4:	b084      	sub	sp, #16
 80157d6:	af00      	add	r7, sp, #0
 80157d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80157da:	f002 f86b 	bl	80178b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80157e6:	429a      	cmp	r2, r3
 80157e8:	d102      	bne.n	80157f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80157ea:	2301      	movs	r3, #1
 80157ec:	60fb      	str	r3, [r7, #12]
 80157ee:	e001      	b.n	80157f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80157f0:	2300      	movs	r3, #0
 80157f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80157f4:	f002 f88e 	bl	8017914 <vPortExitCritical>

	return xReturn;
 80157f8:	68fb      	ldr	r3, [r7, #12]
}
 80157fa:	4618      	mov	r0, r3
 80157fc:	3710      	adds	r7, #16
 80157fe:	46bd      	mov	sp, r7
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015804:	b480      	push	{r7}
 8015806:	b085      	sub	sp, #20
 8015808:	af00      	add	r7, sp, #0
 801580a:	6078      	str	r0, [r7, #4]
 801580c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801580e:	2300      	movs	r3, #0
 8015810:	60fb      	str	r3, [r7, #12]
 8015812:	e014      	b.n	801583e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015814:	4a0f      	ldr	r2, [pc, #60]	; (8015854 <vQueueAddToRegistry+0x50>)
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d10b      	bne.n	8015838 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015820:	490c      	ldr	r1, [pc, #48]	; (8015854 <vQueueAddToRegistry+0x50>)
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	683a      	ldr	r2, [r7, #0]
 8015826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801582a:	4a0a      	ldr	r2, [pc, #40]	; (8015854 <vQueueAddToRegistry+0x50>)
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	00db      	lsls	r3, r3, #3
 8015830:	4413      	add	r3, r2
 8015832:	687a      	ldr	r2, [r7, #4]
 8015834:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8015836:	e006      	b.n	8015846 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	3301      	adds	r3, #1
 801583c:	60fb      	str	r3, [r7, #12]
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	2b07      	cmp	r3, #7
 8015842:	d9e7      	bls.n	8015814 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015844:	bf00      	nop
 8015846:	bf00      	nop
 8015848:	3714      	adds	r7, #20
 801584a:	46bd      	mov	sp, r7
 801584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015850:	4770      	bx	lr
 8015852:	bf00      	nop
 8015854:	20013ae0 	.word	0x20013ae0

08015858 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8015858:	b480      	push	{r7}
 801585a:	b085      	sub	sp, #20
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015860:	2300      	movs	r3, #0
 8015862:	60fb      	str	r3, [r7, #12]
 8015864:	e016      	b.n	8015894 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8015866:	4a10      	ldr	r2, [pc, #64]	; (80158a8 <vQueueUnregisterQueue+0x50>)
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	00db      	lsls	r3, r3, #3
 801586c:	4413      	add	r3, r2
 801586e:	685b      	ldr	r3, [r3, #4]
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	429a      	cmp	r2, r3
 8015874:	d10b      	bne.n	801588e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8015876:	4a0c      	ldr	r2, [pc, #48]	; (80158a8 <vQueueUnregisterQueue+0x50>)
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	2100      	movs	r1, #0
 801587c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8015880:	4a09      	ldr	r2, [pc, #36]	; (80158a8 <vQueueUnregisterQueue+0x50>)
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	00db      	lsls	r3, r3, #3
 8015886:	4413      	add	r3, r2
 8015888:	2200      	movs	r2, #0
 801588a:	605a      	str	r2, [r3, #4]
				break;
 801588c:	e006      	b.n	801589c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	3301      	adds	r3, #1
 8015892:	60fb      	str	r3, [r7, #12]
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2b07      	cmp	r3, #7
 8015898:	d9e5      	bls.n	8015866 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801589a:	bf00      	nop
 801589c:	bf00      	nop
 801589e:	3714      	adds	r7, #20
 80158a0:	46bd      	mov	sp, r7
 80158a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158a6:	4770      	bx	lr
 80158a8:	20013ae0 	.word	0x20013ae0

080158ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b086      	sub	sp, #24
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	60f8      	str	r0, [r7, #12]
 80158b4:	60b9      	str	r1, [r7, #8]
 80158b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80158bc:	f001 fffa 	bl	80178b4 <vPortEnterCritical>
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80158c6:	b25b      	sxtb	r3, r3
 80158c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158cc:	d103      	bne.n	80158d6 <vQueueWaitForMessageRestricted+0x2a>
 80158ce:	697b      	ldr	r3, [r7, #20]
 80158d0:	2200      	movs	r2, #0
 80158d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80158d6:	697b      	ldr	r3, [r7, #20]
 80158d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80158dc:	b25b      	sxtb	r3, r3
 80158de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80158e2:	d103      	bne.n	80158ec <vQueueWaitForMessageRestricted+0x40>
 80158e4:	697b      	ldr	r3, [r7, #20]
 80158e6:	2200      	movs	r2, #0
 80158e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80158ec:	f002 f812 	bl	8017914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80158f0:	697b      	ldr	r3, [r7, #20]
 80158f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d106      	bne.n	8015906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80158f8:	697b      	ldr	r3, [r7, #20]
 80158fa:	3324      	adds	r3, #36	; 0x24
 80158fc:	687a      	ldr	r2, [r7, #4]
 80158fe:	68b9      	ldr	r1, [r7, #8]
 8015900:	4618      	mov	r0, r3
 8015902:	f000 fd7d 	bl	8016400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015906:	6978      	ldr	r0, [r7, #20]
 8015908:	f7ff fefb 	bl	8015702 <prvUnlockQueue>
	}
 801590c:	bf00      	nop
 801590e:	3718      	adds	r7, #24
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}

08015914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8015914:	b580      	push	{r7, lr}
 8015916:	b08e      	sub	sp, #56	; 0x38
 8015918:	af04      	add	r7, sp, #16
 801591a:	60f8      	str	r0, [r7, #12]
 801591c:	60b9      	str	r1, [r7, #8]
 801591e:	607a      	str	r2, [r7, #4]
 8015920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8015922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10a      	bne.n	801593e <xTaskCreateStatic+0x2a>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	623b      	str	r3, [r7, #32]
}
 801593a:	bf00      	nop
 801593c:	e7fe      	b.n	801593c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015940:	2b00      	cmp	r3, #0
 8015942:	d10a      	bne.n	801595a <xTaskCreateStatic+0x46>
	__asm volatile
 8015944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	61fb      	str	r3, [r7, #28]
}
 8015956:	bf00      	nop
 8015958:	e7fe      	b.n	8015958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801595a:	23c0      	movs	r3, #192	; 0xc0
 801595c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801595e:	693b      	ldr	r3, [r7, #16]
 8015960:	2bc0      	cmp	r3, #192	; 0xc0
 8015962:	d00a      	beq.n	801597a <xTaskCreateStatic+0x66>
	__asm volatile
 8015964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015968:	f383 8811 	msr	BASEPRI, r3
 801596c:	f3bf 8f6f 	isb	sy
 8015970:	f3bf 8f4f 	dsb	sy
 8015974:	61bb      	str	r3, [r7, #24]
}
 8015976:	bf00      	nop
 8015978:	e7fe      	b.n	8015978 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801597a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597e:	2b00      	cmp	r3, #0
 8015980:	d01e      	beq.n	80159c0 <xTaskCreateStatic+0xac>
 8015982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015984:	2b00      	cmp	r3, #0
 8015986:	d01b      	beq.n	80159c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801598a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015990:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8015992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015994:	2202      	movs	r2, #2
 8015996:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801599a:	2300      	movs	r3, #0
 801599c:	9303      	str	r3, [sp, #12]
 801599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159a0:	9302      	str	r3, [sp, #8]
 80159a2:	f107 0314 	add.w	r3, r7, #20
 80159a6:	9301      	str	r3, [sp, #4]
 80159a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159aa:	9300      	str	r3, [sp, #0]
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	687a      	ldr	r2, [r7, #4]
 80159b0:	68b9      	ldr	r1, [r7, #8]
 80159b2:	68f8      	ldr	r0, [r7, #12]
 80159b4:	f000 f850 	bl	8015a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80159b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80159ba:	f000 f8f7 	bl	8015bac <prvAddNewTaskToReadyList>
 80159be:	e001      	b.n	80159c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80159c0:	2300      	movs	r3, #0
 80159c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80159c4:	697b      	ldr	r3, [r7, #20]
	}
 80159c6:	4618      	mov	r0, r3
 80159c8:	3728      	adds	r7, #40	; 0x28
 80159ca:	46bd      	mov	sp, r7
 80159cc:	bd80      	pop	{r7, pc}

080159ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b08c      	sub	sp, #48	; 0x30
 80159d2:	af04      	add	r7, sp, #16
 80159d4:	60f8      	str	r0, [r7, #12]
 80159d6:	60b9      	str	r1, [r7, #8]
 80159d8:	603b      	str	r3, [r7, #0]
 80159da:	4613      	mov	r3, r2
 80159dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80159de:	88fb      	ldrh	r3, [r7, #6]
 80159e0:	009b      	lsls	r3, r3, #2
 80159e2:	4618      	mov	r0, r3
 80159e4:	f002 f888 	bl	8017af8 <pvPortMalloc>
 80159e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80159ea:	697b      	ldr	r3, [r7, #20]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d00e      	beq.n	8015a0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80159f0:	20c0      	movs	r0, #192	; 0xc0
 80159f2:	f002 f881 	bl	8017af8 <pvPortMalloc>
 80159f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80159f8:	69fb      	ldr	r3, [r7, #28]
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d003      	beq.n	8015a06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80159fe:	69fb      	ldr	r3, [r7, #28]
 8015a00:	697a      	ldr	r2, [r7, #20]
 8015a02:	631a      	str	r2, [r3, #48]	; 0x30
 8015a04:	e005      	b.n	8015a12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015a06:	6978      	ldr	r0, [r7, #20]
 8015a08:	f002 f942 	bl	8017c90 <vPortFree>
 8015a0c:	e001      	b.n	8015a12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015a12:	69fb      	ldr	r3, [r7, #28]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d017      	beq.n	8015a48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8015a18:	69fb      	ldr	r3, [r7, #28]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015a20:	88fa      	ldrh	r2, [r7, #6]
 8015a22:	2300      	movs	r3, #0
 8015a24:	9303      	str	r3, [sp, #12]
 8015a26:	69fb      	ldr	r3, [r7, #28]
 8015a28:	9302      	str	r3, [sp, #8]
 8015a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a2c:	9301      	str	r3, [sp, #4]
 8015a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a30:	9300      	str	r3, [sp, #0]
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	68b9      	ldr	r1, [r7, #8]
 8015a36:	68f8      	ldr	r0, [r7, #12]
 8015a38:	f000 f80e 	bl	8015a58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015a3c:	69f8      	ldr	r0, [r7, #28]
 8015a3e:	f000 f8b5 	bl	8015bac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015a42:	2301      	movs	r3, #1
 8015a44:	61bb      	str	r3, [r7, #24]
 8015a46:	e002      	b.n	8015a4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015a48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015a4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015a4e:	69bb      	ldr	r3, [r7, #24]
	}
 8015a50:	4618      	mov	r0, r3
 8015a52:	3720      	adds	r7, #32
 8015a54:	46bd      	mov	sp, r7
 8015a56:	bd80      	pop	{r7, pc}

08015a58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b088      	sub	sp, #32
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	009b      	lsls	r3, r3, #2
 8015a6e:	461a      	mov	r2, r3
 8015a70:	21a5      	movs	r1, #165	; 0xa5
 8015a72:	f003 f8bb 	bl	8018bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8015a80:	3b01      	subs	r3, #1
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	4413      	add	r3, r2
 8015a86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015a88:	69bb      	ldr	r3, [r7, #24]
 8015a8a:	f023 0307 	bic.w	r3, r3, #7
 8015a8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8015a90:	69bb      	ldr	r3, [r7, #24]
 8015a92:	f003 0307 	and.w	r3, r3, #7
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d00a      	beq.n	8015ab0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8015a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9e:	f383 8811 	msr	BASEPRI, r3
 8015aa2:	f3bf 8f6f 	isb	sy
 8015aa6:	f3bf 8f4f 	dsb	sy
 8015aaa:	617b      	str	r3, [r7, #20]
}
 8015aac:	bf00      	nop
 8015aae:	e7fe      	b.n	8015aae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8015ab0:	68bb      	ldr	r3, [r7, #8]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d01f      	beq.n	8015af6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	61fb      	str	r3, [r7, #28]
 8015aba:	e012      	b.n	8015ae2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8015abc:	68ba      	ldr	r2, [r7, #8]
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	4413      	add	r3, r2
 8015ac2:	7819      	ldrb	r1, [r3, #0]
 8015ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ac6:	69fb      	ldr	r3, [r7, #28]
 8015ac8:	4413      	add	r3, r2
 8015aca:	3334      	adds	r3, #52	; 0x34
 8015acc:	460a      	mov	r2, r1
 8015ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015ad0:	68ba      	ldr	r2, [r7, #8]
 8015ad2:	69fb      	ldr	r3, [r7, #28]
 8015ad4:	4413      	add	r3, r2
 8015ad6:	781b      	ldrb	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d006      	beq.n	8015aea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015adc:	69fb      	ldr	r3, [r7, #28]
 8015ade:	3301      	adds	r3, #1
 8015ae0:	61fb      	str	r3, [r7, #28]
 8015ae2:	69fb      	ldr	r3, [r7, #28]
 8015ae4:	2b0f      	cmp	r3, #15
 8015ae6:	d9e9      	bls.n	8015abc <prvInitialiseNewTask+0x64>
 8015ae8:	e000      	b.n	8015aec <prvInitialiseNewTask+0x94>
			{
				break;
 8015aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aee:	2200      	movs	r2, #0
 8015af0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8015af4:	e003      	b.n	8015afe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8015af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af8:	2200      	movs	r2, #0
 8015afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b00:	2b37      	cmp	r3, #55	; 0x37
 8015b02:	d901      	bls.n	8015b08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8015b04:	2337      	movs	r3, #55	; 0x37
 8015b06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8015b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015b12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8015b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b16:	2200      	movs	r2, #0
 8015b18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1c:	3304      	adds	r3, #4
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7fe fe56 	bl	80147d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8015b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b26:	3318      	adds	r3, #24
 8015b28:	4618      	mov	r0, r3
 8015b2a:	f7fe fe51 	bl	80147d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8015b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b46:	2200      	movs	r2, #0
 8015b48:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b4c:	2200      	movs	r2, #0
 8015b4e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b54:	2200      	movs	r2, #0
 8015b56:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5c:	3358      	adds	r3, #88	; 0x58
 8015b5e:	2260      	movs	r2, #96	; 0x60
 8015b60:	2100      	movs	r1, #0
 8015b62:	4618      	mov	r0, r3
 8015b64:	f003 f842 	bl	8018bec <memset>
 8015b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6a:	4a0d      	ldr	r2, [pc, #52]	; (8015ba0 <prvInitialiseNewTask+0x148>)
 8015b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8015b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b70:	4a0c      	ldr	r2, [pc, #48]	; (8015ba4 <prvInitialiseNewTask+0x14c>)
 8015b72:	661a      	str	r2, [r3, #96]	; 0x60
 8015b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b76:	4a0c      	ldr	r2, [pc, #48]	; (8015ba8 <prvInitialiseNewTask+0x150>)
 8015b78:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015b7a:	683a      	ldr	r2, [r7, #0]
 8015b7c:	68f9      	ldr	r1, [r7, #12]
 8015b7e:	69b8      	ldr	r0, [r7, #24]
 8015b80:	f001 fd6c 	bl	801765c <pxPortInitialiseStack>
 8015b84:	4602      	mov	r2, r0
 8015b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d002      	beq.n	8015b96 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015b94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b96:	bf00      	nop
 8015b98:	3720      	adds	r7, #32
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}
 8015b9e:	bf00      	nop
 8015ba0:	08020aac 	.word	0x08020aac
 8015ba4:	08020acc 	.word	0x08020acc
 8015ba8:	08020a8c 	.word	0x08020a8c

08015bac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b082      	sub	sp, #8
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015bb4:	f001 fe7e 	bl	80178b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015bb8:	4b2d      	ldr	r3, [pc, #180]	; (8015c70 <prvAddNewTaskToReadyList+0xc4>)
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	4a2c      	ldr	r2, [pc, #176]	; (8015c70 <prvAddNewTaskToReadyList+0xc4>)
 8015bc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015bc2:	4b2c      	ldr	r3, [pc, #176]	; (8015c74 <prvAddNewTaskToReadyList+0xc8>)
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d109      	bne.n	8015bde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015bca:	4a2a      	ldr	r2, [pc, #168]	; (8015c74 <prvAddNewTaskToReadyList+0xc8>)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015bd0:	4b27      	ldr	r3, [pc, #156]	; (8015c70 <prvAddNewTaskToReadyList+0xc4>)
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d110      	bne.n	8015bfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015bd8:	f000 fd3e 	bl	8016658 <prvInitialiseTaskLists>
 8015bdc:	e00d      	b.n	8015bfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015bde:	4b26      	ldr	r3, [pc, #152]	; (8015c78 <prvAddNewTaskToReadyList+0xcc>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d109      	bne.n	8015bfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015be6:	4b23      	ldr	r3, [pc, #140]	; (8015c74 <prvAddNewTaskToReadyList+0xc8>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bf0:	429a      	cmp	r2, r3
 8015bf2:	d802      	bhi.n	8015bfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015bf4:	4a1f      	ldr	r2, [pc, #124]	; (8015c74 <prvAddNewTaskToReadyList+0xc8>)
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015bfa:	4b20      	ldr	r3, [pc, #128]	; (8015c7c <prvAddNewTaskToReadyList+0xd0>)
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	3301      	adds	r3, #1
 8015c00:	4a1e      	ldr	r2, [pc, #120]	; (8015c7c <prvAddNewTaskToReadyList+0xd0>)
 8015c02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015c04:	4b1d      	ldr	r3, [pc, #116]	; (8015c7c <prvAddNewTaskToReadyList+0xd0>)
 8015c06:	681a      	ldr	r2, [r3, #0]
 8015c08:	687b      	ldr	r3, [r7, #4]
 8015c0a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c10:	4b1b      	ldr	r3, [pc, #108]	; (8015c80 <prvAddNewTaskToReadyList+0xd4>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	429a      	cmp	r2, r3
 8015c16:	d903      	bls.n	8015c20 <prvAddNewTaskToReadyList+0x74>
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c1c:	4a18      	ldr	r2, [pc, #96]	; (8015c80 <prvAddNewTaskToReadyList+0xd4>)
 8015c1e:	6013      	str	r3, [r2, #0]
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c24:	4613      	mov	r3, r2
 8015c26:	009b      	lsls	r3, r3, #2
 8015c28:	4413      	add	r3, r2
 8015c2a:	009b      	lsls	r3, r3, #2
 8015c2c:	4a15      	ldr	r2, [pc, #84]	; (8015c84 <prvAddNewTaskToReadyList+0xd8>)
 8015c2e:	441a      	add	r2, r3
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	3304      	adds	r3, #4
 8015c34:	4619      	mov	r1, r3
 8015c36:	4610      	mov	r0, r2
 8015c38:	f7fe fdd7 	bl	80147ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015c3c:	f001 fe6a 	bl	8017914 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015c40:	4b0d      	ldr	r3, [pc, #52]	; (8015c78 <prvAddNewTaskToReadyList+0xcc>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d00e      	beq.n	8015c66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015c48:	4b0a      	ldr	r3, [pc, #40]	; (8015c74 <prvAddNewTaskToReadyList+0xc8>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d207      	bcs.n	8015c66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015c56:	4b0c      	ldr	r3, [pc, #48]	; (8015c88 <prvAddNewTaskToReadyList+0xdc>)
 8015c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c5c:	601a      	str	r2, [r3, #0]
 8015c5e:	f3bf 8f4f 	dsb	sy
 8015c62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015c66:	bf00      	nop
 8015c68:	3708      	adds	r7, #8
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	200034dc 	.word	0x200034dc
 8015c74:	20003008 	.word	0x20003008
 8015c78:	200034e8 	.word	0x200034e8
 8015c7c:	200034f8 	.word	0x200034f8
 8015c80:	200034e4 	.word	0x200034e4
 8015c84:	2000300c 	.word	0x2000300c
 8015c88:	e000ed04 	.word	0xe000ed04

08015c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b084      	sub	sp, #16
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015c94:	2300      	movs	r3, #0
 8015c96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d017      	beq.n	8015cce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015c9e:	4b13      	ldr	r3, [pc, #76]	; (8015cec <vTaskDelay+0x60>)
 8015ca0:	681b      	ldr	r3, [r3, #0]
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	d00a      	beq.n	8015cbc <vTaskDelay+0x30>
	__asm volatile
 8015ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015caa:	f383 8811 	msr	BASEPRI, r3
 8015cae:	f3bf 8f6f 	isb	sy
 8015cb2:	f3bf 8f4f 	dsb	sy
 8015cb6:	60bb      	str	r3, [r7, #8]
}
 8015cb8:	bf00      	nop
 8015cba:	e7fe      	b.n	8015cba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015cbc:	f000 f8f4 	bl	8015ea8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015cc0:	2100      	movs	r1, #0
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f001 f928 	bl	8016f18 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015cc8:	f000 f8fc 	bl	8015ec4 <xTaskResumeAll>
 8015ccc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d107      	bne.n	8015ce4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8015cd4:	4b06      	ldr	r3, [pc, #24]	; (8015cf0 <vTaskDelay+0x64>)
 8015cd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cda:	601a      	str	r2, [r3, #0]
 8015cdc:	f3bf 8f4f 	dsb	sy
 8015ce0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015ce4:	bf00      	nop
 8015ce6:	3710      	adds	r7, #16
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	bd80      	pop	{r7, pc}
 8015cec:	20003504 	.word	0x20003504
 8015cf0:	e000ed04 	.word	0xe000ed04

08015cf4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8015cf4:	b580      	push	{r7, lr}
 8015cf6:	b088      	sub	sp, #32
 8015cf8:	af00      	add	r7, sp, #0
 8015cfa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8015d00:	69bb      	ldr	r3, [r7, #24]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d10a      	bne.n	8015d1c <eTaskGetState+0x28>
	__asm volatile
 8015d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d0a:	f383 8811 	msr	BASEPRI, r3
 8015d0e:	f3bf 8f6f 	isb	sy
 8015d12:	f3bf 8f4f 	dsb	sy
 8015d16:	60bb      	str	r3, [r7, #8]
}
 8015d18:	bf00      	nop
 8015d1a:	e7fe      	b.n	8015d1a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8015d1c:	4b23      	ldr	r3, [pc, #140]	; (8015dac <eTaskGetState+0xb8>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	69ba      	ldr	r2, [r7, #24]
 8015d22:	429a      	cmp	r2, r3
 8015d24:	d102      	bne.n	8015d2c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8015d26:	2300      	movs	r3, #0
 8015d28:	77fb      	strb	r3, [r7, #31]
 8015d2a:	e03a      	b.n	8015da2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8015d2c:	f001 fdc2 	bl	80178b4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8015d30:	69bb      	ldr	r3, [r7, #24]
 8015d32:	695b      	ldr	r3, [r3, #20]
 8015d34:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8015d36:	4b1e      	ldr	r3, [pc, #120]	; (8015db0 <eTaskGetState+0xbc>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8015d3c:	4b1d      	ldr	r3, [pc, #116]	; (8015db4 <eTaskGetState+0xc0>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8015d42:	f001 fde7 	bl	8017914 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8015d46:	697a      	ldr	r2, [r7, #20]
 8015d48:	693b      	ldr	r3, [r7, #16]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d003      	beq.n	8015d56 <eTaskGetState+0x62>
 8015d4e:	697a      	ldr	r2, [r7, #20]
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	429a      	cmp	r2, r3
 8015d54:	d102      	bne.n	8015d5c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8015d56:	2302      	movs	r3, #2
 8015d58:	77fb      	strb	r3, [r7, #31]
 8015d5a:	e022      	b.n	8015da2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8015d5c:	697b      	ldr	r3, [r7, #20]
 8015d5e:	4a16      	ldr	r2, [pc, #88]	; (8015db8 <eTaskGetState+0xc4>)
 8015d60:	4293      	cmp	r3, r2
 8015d62:	d112      	bne.n	8015d8a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8015d64:	69bb      	ldr	r3, [r7, #24]
 8015d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d10b      	bne.n	8015d84 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8015d6c:	69bb      	ldr	r3, [r7, #24]
 8015d6e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b01      	cmp	r3, #1
 8015d76:	d102      	bne.n	8015d7e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8015d78:	2302      	movs	r3, #2
 8015d7a:	77fb      	strb	r3, [r7, #31]
 8015d7c:	e011      	b.n	8015da2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8015d7e:	2303      	movs	r3, #3
 8015d80:	77fb      	strb	r3, [r7, #31]
 8015d82:	e00e      	b.n	8015da2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8015d84:	2302      	movs	r3, #2
 8015d86:	77fb      	strb	r3, [r7, #31]
 8015d88:	e00b      	b.n	8015da2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8015d8a:	697b      	ldr	r3, [r7, #20]
 8015d8c:	4a0b      	ldr	r2, [pc, #44]	; (8015dbc <eTaskGetState+0xc8>)
 8015d8e:	4293      	cmp	r3, r2
 8015d90:	d002      	beq.n	8015d98 <eTaskGetState+0xa4>
 8015d92:	697b      	ldr	r3, [r7, #20]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d102      	bne.n	8015d9e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8015d98:	2304      	movs	r3, #4
 8015d9a:	77fb      	strb	r3, [r7, #31]
 8015d9c:	e001      	b.n	8015da2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8015d9e:	2301      	movs	r3, #1
 8015da0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8015da2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8015da4:	4618      	mov	r0, r3
 8015da6:	3720      	adds	r7, #32
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}
 8015dac:	20003008 	.word	0x20003008
 8015db0:	20003494 	.word	0x20003494
 8015db4:	20003498 	.word	0x20003498
 8015db8:	200034c8 	.word	0x200034c8
 8015dbc:	200034b0 	.word	0x200034b0

08015dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015dc0:	b580      	push	{r7, lr}
 8015dc2:	b08a      	sub	sp, #40	; 0x28
 8015dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015dca:	2300      	movs	r3, #0
 8015dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015dce:	463a      	mov	r2, r7
 8015dd0:	1d39      	adds	r1, r7, #4
 8015dd2:	f107 0308 	add.w	r3, r7, #8
 8015dd6:	4618      	mov	r0, r3
 8015dd8:	f7fe fca6 	bl	8014728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015ddc:	6839      	ldr	r1, [r7, #0]
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	68ba      	ldr	r2, [r7, #8]
 8015de2:	9202      	str	r2, [sp, #8]
 8015de4:	9301      	str	r3, [sp, #4]
 8015de6:	2300      	movs	r3, #0
 8015de8:	9300      	str	r3, [sp, #0]
 8015dea:	2300      	movs	r3, #0
 8015dec:	460a      	mov	r2, r1
 8015dee:	4925      	ldr	r1, [pc, #148]	; (8015e84 <vTaskStartScheduler+0xc4>)
 8015df0:	4825      	ldr	r0, [pc, #148]	; (8015e88 <vTaskStartScheduler+0xc8>)
 8015df2:	f7ff fd8f 	bl	8015914 <xTaskCreateStatic>
 8015df6:	4603      	mov	r3, r0
 8015df8:	4a24      	ldr	r2, [pc, #144]	; (8015e8c <vTaskStartScheduler+0xcc>)
 8015dfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015dfc:	4b23      	ldr	r3, [pc, #140]	; (8015e8c <vTaskStartScheduler+0xcc>)
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d002      	beq.n	8015e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015e04:	2301      	movs	r3, #1
 8015e06:	617b      	str	r3, [r7, #20]
 8015e08:	e001      	b.n	8015e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015e0e:	697b      	ldr	r3, [r7, #20]
 8015e10:	2b01      	cmp	r3, #1
 8015e12:	d102      	bne.n	8015e1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015e14:	f001 f8d4 	bl	8016fc0 <xTimerCreateTimerTask>
 8015e18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015e1a:	697b      	ldr	r3, [r7, #20]
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d11e      	bne.n	8015e5e <vTaskStartScheduler+0x9e>
	__asm volatile
 8015e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e24:	f383 8811 	msr	BASEPRI, r3
 8015e28:	f3bf 8f6f 	isb	sy
 8015e2c:	f3bf 8f4f 	dsb	sy
 8015e30:	613b      	str	r3, [r7, #16]
}
 8015e32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015e34:	4b16      	ldr	r3, [pc, #88]	; (8015e90 <vTaskStartScheduler+0xd0>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	3358      	adds	r3, #88	; 0x58
 8015e3a:	4a16      	ldr	r2, [pc, #88]	; (8015e94 <vTaskStartScheduler+0xd4>)
 8015e3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015e3e:	4b16      	ldr	r3, [pc, #88]	; (8015e98 <vTaskStartScheduler+0xd8>)
 8015e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015e46:	4b15      	ldr	r3, [pc, #84]	; (8015e9c <vTaskStartScheduler+0xdc>)
 8015e48:	2201      	movs	r2, #1
 8015e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015e4c:	4b14      	ldr	r3, [pc, #80]	; (8015ea0 <vTaskStartScheduler+0xe0>)
 8015e4e:	2200      	movs	r2, #0
 8015e50:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8015e52:	4b14      	ldr	r3, [pc, #80]	; (8015ea4 <vTaskStartScheduler+0xe4>)
 8015e54:	2200      	movs	r2, #0
 8015e56:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015e58:	f001 fc8a 	bl	8017770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015e5c:	e00e      	b.n	8015e7c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015e5e:	697b      	ldr	r3, [r7, #20]
 8015e60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015e64:	d10a      	bne.n	8015e7c <vTaskStartScheduler+0xbc>
	__asm volatile
 8015e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e6a:	f383 8811 	msr	BASEPRI, r3
 8015e6e:	f3bf 8f6f 	isb	sy
 8015e72:	f3bf 8f4f 	dsb	sy
 8015e76:	60fb      	str	r3, [r7, #12]
}
 8015e78:	bf00      	nop
 8015e7a:	e7fe      	b.n	8015e7a <vTaskStartScheduler+0xba>
}
 8015e7c:	bf00      	nop
 8015e7e:	3718      	adds	r7, #24
 8015e80:	46bd      	mov	sp, r7
 8015e82:	bd80      	pop	{r7, pc}
 8015e84:	0801c6d0 	.word	0x0801c6d0
 8015e88:	08016629 	.word	0x08016629
 8015e8c:	20003500 	.word	0x20003500
 8015e90:	20003008 	.word	0x20003008
 8015e94:	2000025c 	.word	0x2000025c
 8015e98:	200034fc 	.word	0x200034fc
 8015e9c:	200034e8 	.word	0x200034e8
 8015ea0:	200034e0 	.word	0x200034e0
 8015ea4:	20010448 	.word	0x20010448

08015ea8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015eac:	4b04      	ldr	r3, [pc, #16]	; (8015ec0 <vTaskSuspendAll+0x18>)
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	3301      	adds	r3, #1
 8015eb2:	4a03      	ldr	r2, [pc, #12]	; (8015ec0 <vTaskSuspendAll+0x18>)
 8015eb4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015eb6:	bf00      	nop
 8015eb8:	46bd      	mov	sp, r7
 8015eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ebe:	4770      	bx	lr
 8015ec0:	20003504 	.word	0x20003504

08015ec4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b084      	sub	sp, #16
 8015ec8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015eca:	2300      	movs	r3, #0
 8015ecc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015ed2:	4b42      	ldr	r3, [pc, #264]	; (8015fdc <xTaskResumeAll+0x118>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d10a      	bne.n	8015ef0 <xTaskResumeAll+0x2c>
	__asm volatile
 8015eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ede:	f383 8811 	msr	BASEPRI, r3
 8015ee2:	f3bf 8f6f 	isb	sy
 8015ee6:	f3bf 8f4f 	dsb	sy
 8015eea:	603b      	str	r3, [r7, #0]
}
 8015eec:	bf00      	nop
 8015eee:	e7fe      	b.n	8015eee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015ef0:	f001 fce0 	bl	80178b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015ef4:	4b39      	ldr	r3, [pc, #228]	; (8015fdc <xTaskResumeAll+0x118>)
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	3b01      	subs	r3, #1
 8015efa:	4a38      	ldr	r2, [pc, #224]	; (8015fdc <xTaskResumeAll+0x118>)
 8015efc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015efe:	4b37      	ldr	r3, [pc, #220]	; (8015fdc <xTaskResumeAll+0x118>)
 8015f00:	681b      	ldr	r3, [r3, #0]
 8015f02:	2b00      	cmp	r3, #0
 8015f04:	d162      	bne.n	8015fcc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015f06:	4b36      	ldr	r3, [pc, #216]	; (8015fe0 <xTaskResumeAll+0x11c>)
 8015f08:	681b      	ldr	r3, [r3, #0]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d05e      	beq.n	8015fcc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015f0e:	e02f      	b.n	8015f70 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f10:	4b34      	ldr	r3, [pc, #208]	; (8015fe4 <xTaskResumeAll+0x120>)
 8015f12:	68db      	ldr	r3, [r3, #12]
 8015f14:	68db      	ldr	r3, [r3, #12]
 8015f16:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	3318      	adds	r3, #24
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7fe fcc1 	bl	80148a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015f22:	68fb      	ldr	r3, [r7, #12]
 8015f24:	3304      	adds	r3, #4
 8015f26:	4618      	mov	r0, r3
 8015f28:	f7fe fcbc 	bl	80148a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f30:	4b2d      	ldr	r3, [pc, #180]	; (8015fe8 <xTaskResumeAll+0x124>)
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	429a      	cmp	r2, r3
 8015f36:	d903      	bls.n	8015f40 <xTaskResumeAll+0x7c>
 8015f38:	68fb      	ldr	r3, [r7, #12]
 8015f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f3c:	4a2a      	ldr	r2, [pc, #168]	; (8015fe8 <xTaskResumeAll+0x124>)
 8015f3e:	6013      	str	r3, [r2, #0]
 8015f40:	68fb      	ldr	r3, [r7, #12]
 8015f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f44:	4613      	mov	r3, r2
 8015f46:	009b      	lsls	r3, r3, #2
 8015f48:	4413      	add	r3, r2
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	4a27      	ldr	r2, [pc, #156]	; (8015fec <xTaskResumeAll+0x128>)
 8015f4e:	441a      	add	r2, r3
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	3304      	adds	r3, #4
 8015f54:	4619      	mov	r1, r3
 8015f56:	4610      	mov	r0, r2
 8015f58:	f7fe fc47 	bl	80147ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015f60:	4b23      	ldr	r3, [pc, #140]	; (8015ff0 <xTaskResumeAll+0x12c>)
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d302      	bcc.n	8015f70 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8015f6a:	4b22      	ldr	r3, [pc, #136]	; (8015ff4 <xTaskResumeAll+0x130>)
 8015f6c:	2201      	movs	r2, #1
 8015f6e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015f70:	4b1c      	ldr	r3, [pc, #112]	; (8015fe4 <xTaskResumeAll+0x120>)
 8015f72:	681b      	ldr	r3, [r3, #0]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d1cb      	bne.n	8015f10 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d001      	beq.n	8015f82 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015f7e:	f000 fce1 	bl	8016944 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015f82:	4b1d      	ldr	r3, [pc, #116]	; (8015ff8 <xTaskResumeAll+0x134>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d010      	beq.n	8015fb0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015f8e:	f000 f8d7 	bl	8016140 <xTaskIncrementTick>
 8015f92:	4603      	mov	r3, r0
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d002      	beq.n	8015f9e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8015f98:	4b16      	ldr	r3, [pc, #88]	; (8015ff4 <xTaskResumeAll+0x130>)
 8015f9a:	2201      	movs	r2, #1
 8015f9c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	3b01      	subs	r3, #1
 8015fa2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d1f1      	bne.n	8015f8e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8015faa:	4b13      	ldr	r3, [pc, #76]	; (8015ff8 <xTaskResumeAll+0x134>)
 8015fac:	2200      	movs	r2, #0
 8015fae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015fb0:	4b10      	ldr	r3, [pc, #64]	; (8015ff4 <xTaskResumeAll+0x130>)
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d009      	beq.n	8015fcc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015fb8:	2301      	movs	r3, #1
 8015fba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015fbc:	4b0f      	ldr	r3, [pc, #60]	; (8015ffc <xTaskResumeAll+0x138>)
 8015fbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fc2:	601a      	str	r2, [r3, #0]
 8015fc4:	f3bf 8f4f 	dsb	sy
 8015fc8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015fcc:	f001 fca2 	bl	8017914 <vPortExitCritical>

	return xAlreadyYielded;
 8015fd0:	68bb      	ldr	r3, [r7, #8]
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3710      	adds	r7, #16
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	20003504 	.word	0x20003504
 8015fe0:	200034dc 	.word	0x200034dc
 8015fe4:	2000349c 	.word	0x2000349c
 8015fe8:	200034e4 	.word	0x200034e4
 8015fec:	2000300c 	.word	0x2000300c
 8015ff0:	20003008 	.word	0x20003008
 8015ff4:	200034f0 	.word	0x200034f0
 8015ff8:	200034ec 	.word	0x200034ec
 8015ffc:	e000ed04 	.word	0xe000ed04

08016000 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8016006:	4b05      	ldr	r3, [pc, #20]	; (801601c <xTaskGetTickCount+0x1c>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801600c:	687b      	ldr	r3, [r7, #4]
}
 801600e:	4618      	mov	r0, r3
 8016010:	370c      	adds	r7, #12
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop
 801601c:	200034e0 	.word	0x200034e0

08016020 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8016020:	b580      	push	{r7, lr}
 8016022:	b086      	sub	sp, #24
 8016024:	af00      	add	r7, sp, #0
 8016026:	60f8      	str	r0, [r7, #12]
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 801602c:	2300      	movs	r3, #0
 801602e:	617b      	str	r3, [r7, #20]
 8016030:	2338      	movs	r3, #56	; 0x38
 8016032:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8016034:	f7ff ff38 	bl	8015ea8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8016038:	4b3a      	ldr	r3, [pc, #232]	; (8016124 <uxTaskGetSystemState+0x104>)
 801603a:	681b      	ldr	r3, [r3, #0]
 801603c:	68ba      	ldr	r2, [r7, #8]
 801603e:	429a      	cmp	r2, r3
 8016040:	d369      	bcc.n	8016116 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8016042:	693b      	ldr	r3, [r7, #16]
 8016044:	3b01      	subs	r3, #1
 8016046:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8016048:	697a      	ldr	r2, [r7, #20]
 801604a:	4613      	mov	r3, r2
 801604c:	00db      	lsls	r3, r3, #3
 801604e:	4413      	add	r3, r2
 8016050:	009b      	lsls	r3, r3, #2
 8016052:	461a      	mov	r2, r3
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	1898      	adds	r0, r3, r2
 8016058:	693a      	ldr	r2, [r7, #16]
 801605a:	4613      	mov	r3, r2
 801605c:	009b      	lsls	r3, r3, #2
 801605e:	4413      	add	r3, r2
 8016060:	009b      	lsls	r3, r3, #2
 8016062:	4a31      	ldr	r2, [pc, #196]	; (8016128 <uxTaskGetSystemState+0x108>)
 8016064:	4413      	add	r3, r2
 8016066:	2201      	movs	r2, #1
 8016068:	4619      	mov	r1, r3
 801606a:	f000 fbc9 	bl	8016800 <prvListTasksWithinSingleList>
 801606e:	4602      	mov	r2, r0
 8016070:	697b      	ldr	r3, [r7, #20]
 8016072:	4413      	add	r3, r2
 8016074:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d1e2      	bne.n	8016042 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 801607c:	697a      	ldr	r2, [r7, #20]
 801607e:	4613      	mov	r3, r2
 8016080:	00db      	lsls	r3, r3, #3
 8016082:	4413      	add	r3, r2
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	461a      	mov	r2, r3
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	4413      	add	r3, r2
 801608c:	4a27      	ldr	r2, [pc, #156]	; (801612c <uxTaskGetSystemState+0x10c>)
 801608e:	6811      	ldr	r1, [r2, #0]
 8016090:	2202      	movs	r2, #2
 8016092:	4618      	mov	r0, r3
 8016094:	f000 fbb4 	bl	8016800 <prvListTasksWithinSingleList>
 8016098:	4602      	mov	r2, r0
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	4413      	add	r3, r2
 801609e:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 80160a0:	697a      	ldr	r2, [r7, #20]
 80160a2:	4613      	mov	r3, r2
 80160a4:	00db      	lsls	r3, r3, #3
 80160a6:	4413      	add	r3, r2
 80160a8:	009b      	lsls	r3, r3, #2
 80160aa:	461a      	mov	r2, r3
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	4413      	add	r3, r2
 80160b0:	4a1f      	ldr	r2, [pc, #124]	; (8016130 <uxTaskGetSystemState+0x110>)
 80160b2:	6811      	ldr	r1, [r2, #0]
 80160b4:	2202      	movs	r2, #2
 80160b6:	4618      	mov	r0, r3
 80160b8:	f000 fba2 	bl	8016800 <prvListTasksWithinSingleList>
 80160bc:	4602      	mov	r2, r0
 80160be:	697b      	ldr	r3, [r7, #20]
 80160c0:	4413      	add	r3, r2
 80160c2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 80160c4:	697a      	ldr	r2, [r7, #20]
 80160c6:	4613      	mov	r3, r2
 80160c8:	00db      	lsls	r3, r3, #3
 80160ca:	4413      	add	r3, r2
 80160cc:	009b      	lsls	r3, r3, #2
 80160ce:	461a      	mov	r2, r3
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	4413      	add	r3, r2
 80160d4:	2204      	movs	r2, #4
 80160d6:	4917      	ldr	r1, [pc, #92]	; (8016134 <uxTaskGetSystemState+0x114>)
 80160d8:	4618      	mov	r0, r3
 80160da:	f000 fb91 	bl	8016800 <prvListTasksWithinSingleList>
 80160de:	4602      	mov	r2, r0
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	4413      	add	r3, r2
 80160e4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80160e6:	697a      	ldr	r2, [r7, #20]
 80160e8:	4613      	mov	r3, r2
 80160ea:	00db      	lsls	r3, r3, #3
 80160ec:	4413      	add	r3, r2
 80160ee:	009b      	lsls	r3, r3, #2
 80160f0:	461a      	mov	r2, r3
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	4413      	add	r3, r2
 80160f6:	2203      	movs	r2, #3
 80160f8:	490f      	ldr	r1, [pc, #60]	; (8016138 <uxTaskGetSystemState+0x118>)
 80160fa:	4618      	mov	r0, r3
 80160fc:	f000 fb80 	bl	8016800 <prvListTasksWithinSingleList>
 8016100:	4602      	mov	r2, r0
 8016102:	697b      	ldr	r3, [r7, #20]
 8016104:	4413      	add	r3, r2
 8016106:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d003      	beq.n	8016116 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801610e:	4b0b      	ldr	r3, [pc, #44]	; (801613c <uxTaskGetSystemState+0x11c>)
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8016116:	f7ff fed5 	bl	8015ec4 <xTaskResumeAll>

		return uxTask;
 801611a:	697b      	ldr	r3, [r7, #20]
	}
 801611c:	4618      	mov	r0, r3
 801611e:	3718      	adds	r7, #24
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	200034dc 	.word	0x200034dc
 8016128:	2000300c 	.word	0x2000300c
 801612c:	20003494 	.word	0x20003494
 8016130:	20003498 	.word	0x20003498
 8016134:	200034b0 	.word	0x200034b0
 8016138:	200034c8 	.word	0x200034c8
 801613c:	20010448 	.word	0x20010448

08016140 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b086      	sub	sp, #24
 8016144:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8016146:	2300      	movs	r3, #0
 8016148:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801614a:	4b4f      	ldr	r3, [pc, #316]	; (8016288 <xTaskIncrementTick+0x148>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	f040 808f 	bne.w	8016272 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016154:	4b4d      	ldr	r3, [pc, #308]	; (801628c <xTaskIncrementTick+0x14c>)
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	3301      	adds	r3, #1
 801615a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801615c:	4a4b      	ldr	r2, [pc, #300]	; (801628c <xTaskIncrementTick+0x14c>)
 801615e:	693b      	ldr	r3, [r7, #16]
 8016160:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d120      	bne.n	80161aa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8016168:	4b49      	ldr	r3, [pc, #292]	; (8016290 <xTaskIncrementTick+0x150>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d00a      	beq.n	8016188 <xTaskIncrementTick+0x48>
	__asm volatile
 8016172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016176:	f383 8811 	msr	BASEPRI, r3
 801617a:	f3bf 8f6f 	isb	sy
 801617e:	f3bf 8f4f 	dsb	sy
 8016182:	603b      	str	r3, [r7, #0]
}
 8016184:	bf00      	nop
 8016186:	e7fe      	b.n	8016186 <xTaskIncrementTick+0x46>
 8016188:	4b41      	ldr	r3, [pc, #260]	; (8016290 <xTaskIncrementTick+0x150>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	60fb      	str	r3, [r7, #12]
 801618e:	4b41      	ldr	r3, [pc, #260]	; (8016294 <xTaskIncrementTick+0x154>)
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	4a3f      	ldr	r2, [pc, #252]	; (8016290 <xTaskIncrementTick+0x150>)
 8016194:	6013      	str	r3, [r2, #0]
 8016196:	4a3f      	ldr	r2, [pc, #252]	; (8016294 <xTaskIncrementTick+0x154>)
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	6013      	str	r3, [r2, #0]
 801619c:	4b3e      	ldr	r3, [pc, #248]	; (8016298 <xTaskIncrementTick+0x158>)
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	3301      	adds	r3, #1
 80161a2:	4a3d      	ldr	r2, [pc, #244]	; (8016298 <xTaskIncrementTick+0x158>)
 80161a4:	6013      	str	r3, [r2, #0]
 80161a6:	f000 fbcd 	bl	8016944 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80161aa:	4b3c      	ldr	r3, [pc, #240]	; (801629c <xTaskIncrementTick+0x15c>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	693a      	ldr	r2, [r7, #16]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d349      	bcc.n	8016248 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80161b4:	4b36      	ldr	r3, [pc, #216]	; (8016290 <xTaskIncrementTick+0x150>)
 80161b6:	681b      	ldr	r3, [r3, #0]
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d104      	bne.n	80161c8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80161be:	4b37      	ldr	r3, [pc, #220]	; (801629c <xTaskIncrementTick+0x15c>)
 80161c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80161c4:	601a      	str	r2, [r3, #0]
					break;
 80161c6:	e03f      	b.n	8016248 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80161c8:	4b31      	ldr	r3, [pc, #196]	; (8016290 <xTaskIncrementTick+0x150>)
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	68db      	ldr	r3, [r3, #12]
 80161ce:	68db      	ldr	r3, [r3, #12]
 80161d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80161d2:	68bb      	ldr	r3, [r7, #8]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80161d8:	693a      	ldr	r2, [r7, #16]
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	429a      	cmp	r2, r3
 80161de:	d203      	bcs.n	80161e8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80161e0:	4a2e      	ldr	r2, [pc, #184]	; (801629c <xTaskIncrementTick+0x15c>)
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80161e6:	e02f      	b.n	8016248 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80161e8:	68bb      	ldr	r3, [r7, #8]
 80161ea:	3304      	adds	r3, #4
 80161ec:	4618      	mov	r0, r3
 80161ee:	f7fe fb59 	bl	80148a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d004      	beq.n	8016204 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	3318      	adds	r3, #24
 80161fe:	4618      	mov	r0, r3
 8016200:	f7fe fb50 	bl	80148a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016208:	4b25      	ldr	r3, [pc, #148]	; (80162a0 <xTaskIncrementTick+0x160>)
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	429a      	cmp	r2, r3
 801620e:	d903      	bls.n	8016218 <xTaskIncrementTick+0xd8>
 8016210:	68bb      	ldr	r3, [r7, #8]
 8016212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016214:	4a22      	ldr	r2, [pc, #136]	; (80162a0 <xTaskIncrementTick+0x160>)
 8016216:	6013      	str	r3, [r2, #0]
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801621c:	4613      	mov	r3, r2
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	4413      	add	r3, r2
 8016222:	009b      	lsls	r3, r3, #2
 8016224:	4a1f      	ldr	r2, [pc, #124]	; (80162a4 <xTaskIncrementTick+0x164>)
 8016226:	441a      	add	r2, r3
 8016228:	68bb      	ldr	r3, [r7, #8]
 801622a:	3304      	adds	r3, #4
 801622c:	4619      	mov	r1, r3
 801622e:	4610      	mov	r0, r2
 8016230:	f7fe fadb 	bl	80147ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016234:	68bb      	ldr	r3, [r7, #8]
 8016236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016238:	4b1b      	ldr	r3, [pc, #108]	; (80162a8 <xTaskIncrementTick+0x168>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801623e:	429a      	cmp	r2, r3
 8016240:	d3b8      	bcc.n	80161b4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8016242:	2301      	movs	r3, #1
 8016244:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016246:	e7b5      	b.n	80161b4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016248:	4b17      	ldr	r3, [pc, #92]	; (80162a8 <xTaskIncrementTick+0x168>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801624e:	4915      	ldr	r1, [pc, #84]	; (80162a4 <xTaskIncrementTick+0x164>)
 8016250:	4613      	mov	r3, r2
 8016252:	009b      	lsls	r3, r3, #2
 8016254:	4413      	add	r3, r2
 8016256:	009b      	lsls	r3, r3, #2
 8016258:	440b      	add	r3, r1
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	2b01      	cmp	r3, #1
 801625e:	d901      	bls.n	8016264 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8016260:	2301      	movs	r3, #1
 8016262:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8016264:	4b11      	ldr	r3, [pc, #68]	; (80162ac <xTaskIncrementTick+0x16c>)
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	2b00      	cmp	r3, #0
 801626a:	d007      	beq.n	801627c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801626c:	2301      	movs	r3, #1
 801626e:	617b      	str	r3, [r7, #20]
 8016270:	e004      	b.n	801627c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8016272:	4b0f      	ldr	r3, [pc, #60]	; (80162b0 <xTaskIncrementTick+0x170>)
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	3301      	adds	r3, #1
 8016278:	4a0d      	ldr	r2, [pc, #52]	; (80162b0 <xTaskIncrementTick+0x170>)
 801627a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801627c:	697b      	ldr	r3, [r7, #20]
}
 801627e:	4618      	mov	r0, r3
 8016280:	3718      	adds	r7, #24
 8016282:	46bd      	mov	sp, r7
 8016284:	bd80      	pop	{r7, pc}
 8016286:	bf00      	nop
 8016288:	20003504 	.word	0x20003504
 801628c:	200034e0 	.word	0x200034e0
 8016290:	20003494 	.word	0x20003494
 8016294:	20003498 	.word	0x20003498
 8016298:	200034f4 	.word	0x200034f4
 801629c:	200034fc 	.word	0x200034fc
 80162a0:	200034e4 	.word	0x200034e4
 80162a4:	2000300c 	.word	0x2000300c
 80162a8:	20003008 	.word	0x20003008
 80162ac:	200034f0 	.word	0x200034f0
 80162b0:	200034ec 	.word	0x200034ec

080162b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80162b4:	b480      	push	{r7}
 80162b6:	b085      	sub	sp, #20
 80162b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80162ba:	4b36      	ldr	r3, [pc, #216]	; (8016394 <vTaskSwitchContext+0xe0>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d003      	beq.n	80162ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80162c2:	4b35      	ldr	r3, [pc, #212]	; (8016398 <vTaskSwitchContext+0xe4>)
 80162c4:	2201      	movs	r2, #1
 80162c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80162c8:	e05e      	b.n	8016388 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 80162ca:	4b33      	ldr	r3, [pc, #204]	; (8016398 <vTaskSwitchContext+0xe4>)
 80162cc:	2200      	movs	r2, #0
 80162ce:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80162d0:	4b32      	ldr	r3, [pc, #200]	; (801639c <vTaskSwitchContext+0xe8>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	4a32      	ldr	r2, [pc, #200]	; (80163a0 <vTaskSwitchContext+0xec>)
 80162d6:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80162d8:	4b31      	ldr	r3, [pc, #196]	; (80163a0 <vTaskSwitchContext+0xec>)
 80162da:	681a      	ldr	r2, [r3, #0]
 80162dc:	4b31      	ldr	r3, [pc, #196]	; (80163a4 <vTaskSwitchContext+0xf0>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d909      	bls.n	80162f8 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80162e4:	4b30      	ldr	r3, [pc, #192]	; (80163a8 <vTaskSwitchContext+0xf4>)
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80162ea:	4a2d      	ldr	r2, [pc, #180]	; (80163a0 <vTaskSwitchContext+0xec>)
 80162ec:	6810      	ldr	r0, [r2, #0]
 80162ee:	4a2d      	ldr	r2, [pc, #180]	; (80163a4 <vTaskSwitchContext+0xf0>)
 80162f0:	6812      	ldr	r2, [r2, #0]
 80162f2:	1a82      	subs	r2, r0, r2
 80162f4:	440a      	add	r2, r1
 80162f6:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80162f8:	4b29      	ldr	r3, [pc, #164]	; (80163a0 <vTaskSwitchContext+0xec>)
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	4a29      	ldr	r2, [pc, #164]	; (80163a4 <vTaskSwitchContext+0xf0>)
 80162fe:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016300:	4b2a      	ldr	r3, [pc, #168]	; (80163ac <vTaskSwitchContext+0xf8>)
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	60fb      	str	r3, [r7, #12]
 8016306:	e010      	b.n	801632a <vTaskSwitchContext+0x76>
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d10a      	bne.n	8016324 <vTaskSwitchContext+0x70>
	__asm volatile
 801630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016312:	f383 8811 	msr	BASEPRI, r3
 8016316:	f3bf 8f6f 	isb	sy
 801631a:	f3bf 8f4f 	dsb	sy
 801631e:	607b      	str	r3, [r7, #4]
}
 8016320:	bf00      	nop
 8016322:	e7fe      	b.n	8016322 <vTaskSwitchContext+0x6e>
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	3b01      	subs	r3, #1
 8016328:	60fb      	str	r3, [r7, #12]
 801632a:	4921      	ldr	r1, [pc, #132]	; (80163b0 <vTaskSwitchContext+0xfc>)
 801632c:	68fa      	ldr	r2, [r7, #12]
 801632e:	4613      	mov	r3, r2
 8016330:	009b      	lsls	r3, r3, #2
 8016332:	4413      	add	r3, r2
 8016334:	009b      	lsls	r3, r3, #2
 8016336:	440b      	add	r3, r1
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	2b00      	cmp	r3, #0
 801633c:	d0e4      	beq.n	8016308 <vTaskSwitchContext+0x54>
 801633e:	68fa      	ldr	r2, [r7, #12]
 8016340:	4613      	mov	r3, r2
 8016342:	009b      	lsls	r3, r3, #2
 8016344:	4413      	add	r3, r2
 8016346:	009b      	lsls	r3, r3, #2
 8016348:	4a19      	ldr	r2, [pc, #100]	; (80163b0 <vTaskSwitchContext+0xfc>)
 801634a:	4413      	add	r3, r2
 801634c:	60bb      	str	r3, [r7, #8]
 801634e:	68bb      	ldr	r3, [r7, #8]
 8016350:	685b      	ldr	r3, [r3, #4]
 8016352:	685a      	ldr	r2, [r3, #4]
 8016354:	68bb      	ldr	r3, [r7, #8]
 8016356:	605a      	str	r2, [r3, #4]
 8016358:	68bb      	ldr	r3, [r7, #8]
 801635a:	685a      	ldr	r2, [r3, #4]
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	3308      	adds	r3, #8
 8016360:	429a      	cmp	r2, r3
 8016362:	d104      	bne.n	801636e <vTaskSwitchContext+0xba>
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	685b      	ldr	r3, [r3, #4]
 8016368:	685a      	ldr	r2, [r3, #4]
 801636a:	68bb      	ldr	r3, [r7, #8]
 801636c:	605a      	str	r2, [r3, #4]
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	685b      	ldr	r3, [r3, #4]
 8016372:	68db      	ldr	r3, [r3, #12]
 8016374:	4a0c      	ldr	r2, [pc, #48]	; (80163a8 <vTaskSwitchContext+0xf4>)
 8016376:	6013      	str	r3, [r2, #0]
 8016378:	4a0c      	ldr	r2, [pc, #48]	; (80163ac <vTaskSwitchContext+0xf8>)
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801637e:	4b0a      	ldr	r3, [pc, #40]	; (80163a8 <vTaskSwitchContext+0xf4>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	3358      	adds	r3, #88	; 0x58
 8016384:	4a0b      	ldr	r2, [pc, #44]	; (80163b4 <vTaskSwitchContext+0x100>)
 8016386:	6013      	str	r3, [r2, #0]
}
 8016388:	bf00      	nop
 801638a:	3714      	adds	r7, #20
 801638c:	46bd      	mov	sp, r7
 801638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016392:	4770      	bx	lr
 8016394:	20003504 	.word	0x20003504
 8016398:	200034f0 	.word	0x200034f0
 801639c:	20010448 	.word	0x20010448
 80163a0:	2000350c 	.word	0x2000350c
 80163a4:	20003508 	.word	0x20003508
 80163a8:	20003008 	.word	0x20003008
 80163ac:	200034e4 	.word	0x200034e4
 80163b0:	2000300c 	.word	0x2000300c
 80163b4:	2000025c 	.word	0x2000025c

080163b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
 80163c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d10a      	bne.n	80163de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80163c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163cc:	f383 8811 	msr	BASEPRI, r3
 80163d0:	f3bf 8f6f 	isb	sy
 80163d4:	f3bf 8f4f 	dsb	sy
 80163d8:	60fb      	str	r3, [r7, #12]
}
 80163da:	bf00      	nop
 80163dc:	e7fe      	b.n	80163dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80163de:	4b07      	ldr	r3, [pc, #28]	; (80163fc <vTaskPlaceOnEventList+0x44>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	3318      	adds	r3, #24
 80163e4:	4619      	mov	r1, r3
 80163e6:	6878      	ldr	r0, [r7, #4]
 80163e8:	f7fe fa23 	bl	8014832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80163ec:	2101      	movs	r1, #1
 80163ee:	6838      	ldr	r0, [r7, #0]
 80163f0:	f000 fd92 	bl	8016f18 <prvAddCurrentTaskToDelayedList>
}
 80163f4:	bf00      	nop
 80163f6:	3710      	adds	r7, #16
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	20003008 	.word	0x20003008

08016400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016400:	b580      	push	{r7, lr}
 8016402:	b086      	sub	sp, #24
 8016404:	af00      	add	r7, sp, #0
 8016406:	60f8      	str	r0, [r7, #12]
 8016408:	60b9      	str	r1, [r7, #8]
 801640a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	2b00      	cmp	r3, #0
 8016410:	d10a      	bne.n	8016428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8016412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016416:	f383 8811 	msr	BASEPRI, r3
 801641a:	f3bf 8f6f 	isb	sy
 801641e:	f3bf 8f4f 	dsb	sy
 8016422:	617b      	str	r3, [r7, #20]
}
 8016424:	bf00      	nop
 8016426:	e7fe      	b.n	8016426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016428:	4b0a      	ldr	r3, [pc, #40]	; (8016454 <vTaskPlaceOnEventListRestricted+0x54>)
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	3318      	adds	r3, #24
 801642e:	4619      	mov	r1, r3
 8016430:	68f8      	ldr	r0, [r7, #12]
 8016432:	f7fe f9da 	bl	80147ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d002      	beq.n	8016442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801643c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016442:	6879      	ldr	r1, [r7, #4]
 8016444:	68b8      	ldr	r0, [r7, #8]
 8016446:	f000 fd67 	bl	8016f18 <prvAddCurrentTaskToDelayedList>
	}
 801644a:	bf00      	nop
 801644c:	3718      	adds	r7, #24
 801644e:	46bd      	mov	sp, r7
 8016450:	bd80      	pop	{r7, pc}
 8016452:	bf00      	nop
 8016454:	20003008 	.word	0x20003008

08016458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8016458:	b580      	push	{r7, lr}
 801645a:	b086      	sub	sp, #24
 801645c:	af00      	add	r7, sp, #0
 801645e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	68db      	ldr	r3, [r3, #12]
 8016464:	68db      	ldr	r3, [r3, #12]
 8016466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8016468:	693b      	ldr	r3, [r7, #16]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d10a      	bne.n	8016484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016472:	f383 8811 	msr	BASEPRI, r3
 8016476:	f3bf 8f6f 	isb	sy
 801647a:	f3bf 8f4f 	dsb	sy
 801647e:	60fb      	str	r3, [r7, #12]
}
 8016480:	bf00      	nop
 8016482:	e7fe      	b.n	8016482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	3318      	adds	r3, #24
 8016488:	4618      	mov	r0, r3
 801648a:	f7fe fa0b 	bl	80148a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801648e:	4b1e      	ldr	r3, [pc, #120]	; (8016508 <xTaskRemoveFromEventList+0xb0>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d11d      	bne.n	80164d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8016496:	693b      	ldr	r3, [r7, #16]
 8016498:	3304      	adds	r3, #4
 801649a:	4618      	mov	r0, r3
 801649c:	f7fe fa02 	bl	80148a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80164a0:	693b      	ldr	r3, [r7, #16]
 80164a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164a4:	4b19      	ldr	r3, [pc, #100]	; (801650c <xTaskRemoveFromEventList+0xb4>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d903      	bls.n	80164b4 <xTaskRemoveFromEventList+0x5c>
 80164ac:	693b      	ldr	r3, [r7, #16]
 80164ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164b0:	4a16      	ldr	r2, [pc, #88]	; (801650c <xTaskRemoveFromEventList+0xb4>)
 80164b2:	6013      	str	r3, [r2, #0]
 80164b4:	693b      	ldr	r3, [r7, #16]
 80164b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164b8:	4613      	mov	r3, r2
 80164ba:	009b      	lsls	r3, r3, #2
 80164bc:	4413      	add	r3, r2
 80164be:	009b      	lsls	r3, r3, #2
 80164c0:	4a13      	ldr	r2, [pc, #76]	; (8016510 <xTaskRemoveFromEventList+0xb8>)
 80164c2:	441a      	add	r2, r3
 80164c4:	693b      	ldr	r3, [r7, #16]
 80164c6:	3304      	adds	r3, #4
 80164c8:	4619      	mov	r1, r3
 80164ca:	4610      	mov	r0, r2
 80164cc:	f7fe f98d 	bl	80147ea <vListInsertEnd>
 80164d0:	e005      	b.n	80164de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80164d2:	693b      	ldr	r3, [r7, #16]
 80164d4:	3318      	adds	r3, #24
 80164d6:	4619      	mov	r1, r3
 80164d8:	480e      	ldr	r0, [pc, #56]	; (8016514 <xTaskRemoveFromEventList+0xbc>)
 80164da:	f7fe f986 	bl	80147ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80164de:	693b      	ldr	r3, [r7, #16]
 80164e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80164e2:	4b0d      	ldr	r3, [pc, #52]	; (8016518 <xTaskRemoveFromEventList+0xc0>)
 80164e4:	681b      	ldr	r3, [r3, #0]
 80164e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164e8:	429a      	cmp	r2, r3
 80164ea:	d905      	bls.n	80164f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80164ec:	2301      	movs	r3, #1
 80164ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80164f0:	4b0a      	ldr	r3, [pc, #40]	; (801651c <xTaskRemoveFromEventList+0xc4>)
 80164f2:	2201      	movs	r2, #1
 80164f4:	601a      	str	r2, [r3, #0]
 80164f6:	e001      	b.n	80164fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80164f8:	2300      	movs	r3, #0
 80164fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80164fc:	697b      	ldr	r3, [r7, #20]
}
 80164fe:	4618      	mov	r0, r3
 8016500:	3718      	adds	r7, #24
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	20003504 	.word	0x20003504
 801650c:	200034e4 	.word	0x200034e4
 8016510:	2000300c 	.word	0x2000300c
 8016514:	2000349c 	.word	0x2000349c
 8016518:	20003008 	.word	0x20003008
 801651c:	200034f0 	.word	0x200034f0

08016520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8016520:	b480      	push	{r7}
 8016522:	b083      	sub	sp, #12
 8016524:	af00      	add	r7, sp, #0
 8016526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016528:	4b06      	ldr	r3, [pc, #24]	; (8016544 <vTaskInternalSetTimeOutState+0x24>)
 801652a:	681a      	ldr	r2, [r3, #0]
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8016530:	4b05      	ldr	r3, [pc, #20]	; (8016548 <vTaskInternalSetTimeOutState+0x28>)
 8016532:	681a      	ldr	r2, [r3, #0]
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	605a      	str	r2, [r3, #4]
}
 8016538:	bf00      	nop
 801653a:	370c      	adds	r7, #12
 801653c:	46bd      	mov	sp, r7
 801653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016542:	4770      	bx	lr
 8016544:	200034f4 	.word	0x200034f4
 8016548:	200034e0 	.word	0x200034e0

0801654c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801654c:	b580      	push	{r7, lr}
 801654e:	b088      	sub	sp, #32
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d10a      	bne.n	8016572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801655c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016560:	f383 8811 	msr	BASEPRI, r3
 8016564:	f3bf 8f6f 	isb	sy
 8016568:	f3bf 8f4f 	dsb	sy
 801656c:	613b      	str	r3, [r7, #16]
}
 801656e:	bf00      	nop
 8016570:	e7fe      	b.n	8016570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d10a      	bne.n	801658e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8016578:	f04f 0350 	mov.w	r3, #80	; 0x50
 801657c:	f383 8811 	msr	BASEPRI, r3
 8016580:	f3bf 8f6f 	isb	sy
 8016584:	f3bf 8f4f 	dsb	sy
 8016588:	60fb      	str	r3, [r7, #12]
}
 801658a:	bf00      	nop
 801658c:	e7fe      	b.n	801658c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801658e:	f001 f991 	bl	80178b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8016592:	4b1d      	ldr	r3, [pc, #116]	; (8016608 <xTaskCheckForTimeOut+0xbc>)
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	685b      	ldr	r3, [r3, #4]
 801659c:	69ba      	ldr	r2, [r7, #24]
 801659e:	1ad3      	subs	r3, r2, r3
 80165a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80165a2:	683b      	ldr	r3, [r7, #0]
 80165a4:	681b      	ldr	r3, [r3, #0]
 80165a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80165aa:	d102      	bne.n	80165b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80165ac:	2300      	movs	r3, #0
 80165ae:	61fb      	str	r3, [r7, #28]
 80165b0:	e023      	b.n	80165fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	681a      	ldr	r2, [r3, #0]
 80165b6:	4b15      	ldr	r3, [pc, #84]	; (801660c <xTaskCheckForTimeOut+0xc0>)
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	429a      	cmp	r2, r3
 80165bc:	d007      	beq.n	80165ce <xTaskCheckForTimeOut+0x82>
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	685b      	ldr	r3, [r3, #4]
 80165c2:	69ba      	ldr	r2, [r7, #24]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d302      	bcc.n	80165ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80165c8:	2301      	movs	r3, #1
 80165ca:	61fb      	str	r3, [r7, #28]
 80165cc:	e015      	b.n	80165fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80165ce:	683b      	ldr	r3, [r7, #0]
 80165d0:	681b      	ldr	r3, [r3, #0]
 80165d2:	697a      	ldr	r2, [r7, #20]
 80165d4:	429a      	cmp	r2, r3
 80165d6:	d20b      	bcs.n	80165f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	681a      	ldr	r2, [r3, #0]
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	1ad2      	subs	r2, r2, r3
 80165e0:	683b      	ldr	r3, [r7, #0]
 80165e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80165e4:	6878      	ldr	r0, [r7, #4]
 80165e6:	f7ff ff9b 	bl	8016520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80165ea:	2300      	movs	r3, #0
 80165ec:	61fb      	str	r3, [r7, #28]
 80165ee:	e004      	b.n	80165fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	2200      	movs	r2, #0
 80165f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80165f6:	2301      	movs	r3, #1
 80165f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80165fa:	f001 f98b 	bl	8017914 <vPortExitCritical>

	return xReturn;
 80165fe:	69fb      	ldr	r3, [r7, #28]
}
 8016600:	4618      	mov	r0, r3
 8016602:	3720      	adds	r7, #32
 8016604:	46bd      	mov	sp, r7
 8016606:	bd80      	pop	{r7, pc}
 8016608:	200034e0 	.word	0x200034e0
 801660c:	200034f4 	.word	0x200034f4

08016610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8016610:	b480      	push	{r7}
 8016612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8016614:	4b03      	ldr	r3, [pc, #12]	; (8016624 <vTaskMissedYield+0x14>)
 8016616:	2201      	movs	r2, #1
 8016618:	601a      	str	r2, [r3, #0]
}
 801661a:	bf00      	nop
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr
 8016624:	200034f0 	.word	0x200034f0

08016628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8016628:	b580      	push	{r7, lr}
 801662a:	b082      	sub	sp, #8
 801662c:	af00      	add	r7, sp, #0
 801662e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8016630:	f000 f852 	bl	80166d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8016634:	4b06      	ldr	r3, [pc, #24]	; (8016650 <prvIdleTask+0x28>)
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	2b01      	cmp	r3, #1
 801663a:	d9f9      	bls.n	8016630 <prvIdleTask+0x8>
			{
				taskYIELD();
 801663c:	4b05      	ldr	r3, [pc, #20]	; (8016654 <prvIdleTask+0x2c>)
 801663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	f3bf 8f4f 	dsb	sy
 8016648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801664c:	e7f0      	b.n	8016630 <prvIdleTask+0x8>
 801664e:	bf00      	nop
 8016650:	2000300c 	.word	0x2000300c
 8016654:	e000ed04 	.word	0xe000ed04

08016658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016658:	b580      	push	{r7, lr}
 801665a:	b082      	sub	sp, #8
 801665c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801665e:	2300      	movs	r3, #0
 8016660:	607b      	str	r3, [r7, #4]
 8016662:	e00c      	b.n	801667e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8016664:	687a      	ldr	r2, [r7, #4]
 8016666:	4613      	mov	r3, r2
 8016668:	009b      	lsls	r3, r3, #2
 801666a:	4413      	add	r3, r2
 801666c:	009b      	lsls	r3, r3, #2
 801666e:	4a12      	ldr	r2, [pc, #72]	; (80166b8 <prvInitialiseTaskLists+0x60>)
 8016670:	4413      	add	r3, r2
 8016672:	4618      	mov	r0, r3
 8016674:	f7fe f88c 	bl	8014790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	3301      	adds	r3, #1
 801667c:	607b      	str	r3, [r7, #4]
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	2b37      	cmp	r3, #55	; 0x37
 8016682:	d9ef      	bls.n	8016664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8016684:	480d      	ldr	r0, [pc, #52]	; (80166bc <prvInitialiseTaskLists+0x64>)
 8016686:	f7fe f883 	bl	8014790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801668a:	480d      	ldr	r0, [pc, #52]	; (80166c0 <prvInitialiseTaskLists+0x68>)
 801668c:	f7fe f880 	bl	8014790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016690:	480c      	ldr	r0, [pc, #48]	; (80166c4 <prvInitialiseTaskLists+0x6c>)
 8016692:	f7fe f87d 	bl	8014790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8016696:	480c      	ldr	r0, [pc, #48]	; (80166c8 <prvInitialiseTaskLists+0x70>)
 8016698:	f7fe f87a 	bl	8014790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801669c:	480b      	ldr	r0, [pc, #44]	; (80166cc <prvInitialiseTaskLists+0x74>)
 801669e:	f7fe f877 	bl	8014790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80166a2:	4b0b      	ldr	r3, [pc, #44]	; (80166d0 <prvInitialiseTaskLists+0x78>)
 80166a4:	4a05      	ldr	r2, [pc, #20]	; (80166bc <prvInitialiseTaskLists+0x64>)
 80166a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80166a8:	4b0a      	ldr	r3, [pc, #40]	; (80166d4 <prvInitialiseTaskLists+0x7c>)
 80166aa:	4a05      	ldr	r2, [pc, #20]	; (80166c0 <prvInitialiseTaskLists+0x68>)
 80166ac:	601a      	str	r2, [r3, #0]
}
 80166ae:	bf00      	nop
 80166b0:	3708      	adds	r7, #8
 80166b2:	46bd      	mov	sp, r7
 80166b4:	bd80      	pop	{r7, pc}
 80166b6:	bf00      	nop
 80166b8:	2000300c 	.word	0x2000300c
 80166bc:	2000346c 	.word	0x2000346c
 80166c0:	20003480 	.word	0x20003480
 80166c4:	2000349c 	.word	0x2000349c
 80166c8:	200034b0 	.word	0x200034b0
 80166cc:	200034c8 	.word	0x200034c8
 80166d0:	20003494 	.word	0x20003494
 80166d4:	20003498 	.word	0x20003498

080166d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b082      	sub	sp, #8
 80166dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80166de:	e019      	b.n	8016714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80166e0:	f001 f8e8 	bl	80178b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166e4:	4b10      	ldr	r3, [pc, #64]	; (8016728 <prvCheckTasksWaitingTermination+0x50>)
 80166e6:	68db      	ldr	r3, [r3, #12]
 80166e8:	68db      	ldr	r3, [r3, #12]
 80166ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	3304      	adds	r3, #4
 80166f0:	4618      	mov	r0, r3
 80166f2:	f7fe f8d7 	bl	80148a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80166f6:	4b0d      	ldr	r3, [pc, #52]	; (801672c <prvCheckTasksWaitingTermination+0x54>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	3b01      	subs	r3, #1
 80166fc:	4a0b      	ldr	r2, [pc, #44]	; (801672c <prvCheckTasksWaitingTermination+0x54>)
 80166fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8016700:	4b0b      	ldr	r3, [pc, #44]	; (8016730 <prvCheckTasksWaitingTermination+0x58>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	3b01      	subs	r3, #1
 8016706:	4a0a      	ldr	r2, [pc, #40]	; (8016730 <prvCheckTasksWaitingTermination+0x58>)
 8016708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801670a:	f001 f903 	bl	8017914 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f000 f8e4 	bl	80168dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016714:	4b06      	ldr	r3, [pc, #24]	; (8016730 <prvCheckTasksWaitingTermination+0x58>)
 8016716:	681b      	ldr	r3, [r3, #0]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d1e1      	bne.n	80166e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801671c:	bf00      	nop
 801671e:	bf00      	nop
 8016720:	3708      	adds	r7, #8
 8016722:	46bd      	mov	sp, r7
 8016724:	bd80      	pop	{r7, pc}
 8016726:	bf00      	nop
 8016728:	200034b0 	.word	0x200034b0
 801672c:	200034dc 	.word	0x200034dc
 8016730:	200034c4 	.word	0x200034c4

08016734 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8016734:	b580      	push	{r7, lr}
 8016736:	b086      	sub	sp, #24
 8016738:	af00      	add	r7, sp, #0
 801673a:	60f8      	str	r0, [r7, #12]
 801673c:	60b9      	str	r1, [r7, #8]
 801673e:	607a      	str	r2, [r7, #4]
 8016740:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d102      	bne.n	801674e <vTaskGetInfo+0x1a>
 8016748:	4b2c      	ldr	r3, [pc, #176]	; (80167fc <vTaskGetInfo+0xc8>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	e000      	b.n	8016750 <vTaskGetInfo+0x1c>
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8016752:	68bb      	ldr	r3, [r7, #8]
 8016754:	697a      	ldr	r2, [r7, #20]
 8016756:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801675e:	68bb      	ldr	r3, [r7, #8]
 8016760:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801676a:	697b      	ldr	r3, [r7, #20]
 801676c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8016772:	697b      	ldr	r3, [r7, #20]
 8016774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016776:	68bb      	ldr	r3, [r7, #8]
 8016778:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801677e:	68bb      	ldr	r3, [r7, #8]
 8016780:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8016782:	697b      	ldr	r3, [r7, #20]
 8016784:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016786:	68bb      	ldr	r3, [r7, #8]
 8016788:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801678a:	78fb      	ldrb	r3, [r7, #3]
 801678c:	2b05      	cmp	r3, #5
 801678e:	d01a      	beq.n	80167c6 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8016790:	4b1a      	ldr	r3, [pc, #104]	; (80167fc <vTaskGetInfo+0xc8>)
 8016792:	681b      	ldr	r3, [r3, #0]
 8016794:	697a      	ldr	r2, [r7, #20]
 8016796:	429a      	cmp	r2, r3
 8016798:	d103      	bne.n	80167a2 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	2200      	movs	r2, #0
 801679e:	731a      	strb	r2, [r3, #12]
 80167a0:	e018      	b.n	80167d4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80167a2:	68bb      	ldr	r3, [r7, #8]
 80167a4:	78fa      	ldrb	r2, [r7, #3]
 80167a6:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80167a8:	78fb      	ldrb	r3, [r7, #3]
 80167aa:	2b03      	cmp	r3, #3
 80167ac:	d112      	bne.n	80167d4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 80167ae:	f7ff fb7b 	bl	8015ea8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80167b2:	697b      	ldr	r3, [r7, #20]
 80167b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d002      	beq.n	80167c0 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80167ba:	68bb      	ldr	r3, [r7, #8]
 80167bc:	2202      	movs	r2, #2
 80167be:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80167c0:	f7ff fb80 	bl	8015ec4 <xTaskResumeAll>
 80167c4:	e006      	b.n	80167d4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80167c6:	6978      	ldr	r0, [r7, #20]
 80167c8:	f7ff fa94 	bl	8015cf4 <eTaskGetState>
 80167cc:	4603      	mov	r3, r0
 80167ce:	461a      	mov	r2, r3
 80167d0:	68bb      	ldr	r3, [r7, #8]
 80167d2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d009      	beq.n	80167ee <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80167da:	697b      	ldr	r3, [r7, #20]
 80167dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167de:	4618      	mov	r0, r3
 80167e0:	f000 f860 	bl	80168a4 <prvTaskCheckFreeStackSpace>
 80167e4:	4603      	mov	r3, r0
 80167e6:	461a      	mov	r2, r3
 80167e8:	68bb      	ldr	r3, [r7, #8]
 80167ea:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80167ec:	e002      	b.n	80167f4 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80167ee:	68bb      	ldr	r3, [r7, #8]
 80167f0:	2200      	movs	r2, #0
 80167f2:	841a      	strh	r2, [r3, #32]
	}
 80167f4:	bf00      	nop
 80167f6:	3718      	adds	r7, #24
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	20003008 	.word	0x20003008

08016800 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8016800:	b580      	push	{r7, lr}
 8016802:	b08a      	sub	sp, #40	; 0x28
 8016804:	af00      	add	r7, sp, #0
 8016806:	60f8      	str	r0, [r7, #12]
 8016808:	60b9      	str	r1, [r7, #8]
 801680a:	4613      	mov	r3, r2
 801680c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801680e:	2300      	movs	r3, #0
 8016810:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8016812:	68bb      	ldr	r3, [r7, #8]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d03f      	beq.n	801689a <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801681a:	68bb      	ldr	r3, [r7, #8]
 801681c:	623b      	str	r3, [r7, #32]
 801681e:	6a3b      	ldr	r3, [r7, #32]
 8016820:	685b      	ldr	r3, [r3, #4]
 8016822:	685a      	ldr	r2, [r3, #4]
 8016824:	6a3b      	ldr	r3, [r7, #32]
 8016826:	605a      	str	r2, [r3, #4]
 8016828:	6a3b      	ldr	r3, [r7, #32]
 801682a:	685a      	ldr	r2, [r3, #4]
 801682c:	6a3b      	ldr	r3, [r7, #32]
 801682e:	3308      	adds	r3, #8
 8016830:	429a      	cmp	r2, r3
 8016832:	d104      	bne.n	801683e <prvListTasksWithinSingleList+0x3e>
 8016834:	6a3b      	ldr	r3, [r7, #32]
 8016836:	685b      	ldr	r3, [r3, #4]
 8016838:	685a      	ldr	r2, [r3, #4]
 801683a:	6a3b      	ldr	r3, [r7, #32]
 801683c:	605a      	str	r2, [r3, #4]
 801683e:	6a3b      	ldr	r3, [r7, #32]
 8016840:	685b      	ldr	r3, [r3, #4]
 8016842:	68db      	ldr	r3, [r3, #12]
 8016844:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	61bb      	str	r3, [r7, #24]
 801684a:	69bb      	ldr	r3, [r7, #24]
 801684c:	685b      	ldr	r3, [r3, #4]
 801684e:	685a      	ldr	r2, [r3, #4]
 8016850:	69bb      	ldr	r3, [r7, #24]
 8016852:	605a      	str	r2, [r3, #4]
 8016854:	69bb      	ldr	r3, [r7, #24]
 8016856:	685a      	ldr	r2, [r3, #4]
 8016858:	69bb      	ldr	r3, [r7, #24]
 801685a:	3308      	adds	r3, #8
 801685c:	429a      	cmp	r2, r3
 801685e:	d104      	bne.n	801686a <prvListTasksWithinSingleList+0x6a>
 8016860:	69bb      	ldr	r3, [r7, #24]
 8016862:	685b      	ldr	r3, [r3, #4]
 8016864:	685a      	ldr	r2, [r3, #4]
 8016866:	69bb      	ldr	r3, [r7, #24]
 8016868:	605a      	str	r2, [r3, #4]
 801686a:	69bb      	ldr	r3, [r7, #24]
 801686c:	685b      	ldr	r3, [r3, #4]
 801686e:	68db      	ldr	r3, [r3, #12]
 8016870:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8016872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016874:	4613      	mov	r3, r2
 8016876:	00db      	lsls	r3, r3, #3
 8016878:	4413      	add	r3, r2
 801687a:	009b      	lsls	r3, r3, #2
 801687c:	461a      	mov	r2, r3
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	1899      	adds	r1, r3, r2
 8016882:	79fb      	ldrb	r3, [r7, #7]
 8016884:	2201      	movs	r2, #1
 8016886:	6978      	ldr	r0, [r7, #20]
 8016888:	f7ff ff54 	bl	8016734 <vTaskGetInfo>
				uxTask++;
 801688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801688e:	3301      	adds	r3, #1
 8016890:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8016892:	697a      	ldr	r2, [r7, #20]
 8016894:	69fb      	ldr	r3, [r7, #28]
 8016896:	429a      	cmp	r2, r3
 8016898:	d1d5      	bne.n	8016846 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801689a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801689c:	4618      	mov	r0, r3
 801689e:	3728      	adds	r7, #40	; 0x28
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}

080168a4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80168a4:	b480      	push	{r7}
 80168a6:	b085      	sub	sp, #20
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80168ac:	2300      	movs	r3, #0
 80168ae:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80168b0:	e005      	b.n	80168be <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	3301      	adds	r3, #1
 80168b6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	3301      	adds	r3, #1
 80168bc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80168be:	687b      	ldr	r3, [r7, #4]
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	2ba5      	cmp	r3, #165	; 0xa5
 80168c4:	d0f5      	beq.n	80168b2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80168c6:	68fb      	ldr	r3, [r7, #12]
 80168c8:	089b      	lsrs	r3, r3, #2
 80168ca:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	b29b      	uxth	r3, r3
	}
 80168d0:	4618      	mov	r0, r3
 80168d2:	3714      	adds	r7, #20
 80168d4:	46bd      	mov	sp, r7
 80168d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168da:	4770      	bx	lr

080168dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b084      	sub	sp, #16
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	3358      	adds	r3, #88	; 0x58
 80168e8:	4618      	mov	r0, r3
 80168ea:	f002 fea9 	bl	8019640 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	d108      	bne.n	801690a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80168fc:	4618      	mov	r0, r3
 80168fe:	f001 f9c7 	bl	8017c90 <vPortFree>
				vPortFree( pxTCB );
 8016902:	6878      	ldr	r0, [r7, #4]
 8016904:	f001 f9c4 	bl	8017c90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016908:	e018      	b.n	801693c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8016910:	2b01      	cmp	r3, #1
 8016912:	d103      	bne.n	801691c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f001 f9bb 	bl	8017c90 <vPortFree>
	}
 801691a:	e00f      	b.n	801693c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8016922:	2b02      	cmp	r3, #2
 8016924:	d00a      	beq.n	801693c <prvDeleteTCB+0x60>
	__asm volatile
 8016926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801692a:	f383 8811 	msr	BASEPRI, r3
 801692e:	f3bf 8f6f 	isb	sy
 8016932:	f3bf 8f4f 	dsb	sy
 8016936:	60fb      	str	r3, [r7, #12]
}
 8016938:	bf00      	nop
 801693a:	e7fe      	b.n	801693a <prvDeleteTCB+0x5e>
	}
 801693c:	bf00      	nop
 801693e:	3710      	adds	r7, #16
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}

08016944 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016944:	b480      	push	{r7}
 8016946:	b083      	sub	sp, #12
 8016948:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801694a:	4b0c      	ldr	r3, [pc, #48]	; (801697c <prvResetNextTaskUnblockTime+0x38>)
 801694c:	681b      	ldr	r3, [r3, #0]
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d104      	bne.n	801695e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016954:	4b0a      	ldr	r3, [pc, #40]	; (8016980 <prvResetNextTaskUnblockTime+0x3c>)
 8016956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801695a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801695c:	e008      	b.n	8016970 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801695e:	4b07      	ldr	r3, [pc, #28]	; (801697c <prvResetNextTaskUnblockTime+0x38>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	68db      	ldr	r3, [r3, #12]
 8016964:	68db      	ldr	r3, [r3, #12]
 8016966:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	685b      	ldr	r3, [r3, #4]
 801696c:	4a04      	ldr	r2, [pc, #16]	; (8016980 <prvResetNextTaskUnblockTime+0x3c>)
 801696e:	6013      	str	r3, [r2, #0]
}
 8016970:	bf00      	nop
 8016972:	370c      	adds	r7, #12
 8016974:	46bd      	mov	sp, r7
 8016976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801697a:	4770      	bx	lr
 801697c:	20003494 	.word	0x20003494
 8016980:	200034fc 	.word	0x200034fc

08016984 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8016984:	b480      	push	{r7}
 8016986:	b083      	sub	sp, #12
 8016988:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801698a:	4b0b      	ldr	r3, [pc, #44]	; (80169b8 <xTaskGetSchedulerState+0x34>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d102      	bne.n	8016998 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016992:	2301      	movs	r3, #1
 8016994:	607b      	str	r3, [r7, #4]
 8016996:	e008      	b.n	80169aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016998:	4b08      	ldr	r3, [pc, #32]	; (80169bc <xTaskGetSchedulerState+0x38>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	2b00      	cmp	r3, #0
 801699e:	d102      	bne.n	80169a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80169a0:	2302      	movs	r3, #2
 80169a2:	607b      	str	r3, [r7, #4]
 80169a4:	e001      	b.n	80169aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80169a6:	2300      	movs	r3, #0
 80169a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80169aa:	687b      	ldr	r3, [r7, #4]
	}
 80169ac:	4618      	mov	r0, r3
 80169ae:	370c      	adds	r7, #12
 80169b0:	46bd      	mov	sp, r7
 80169b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169b6:	4770      	bx	lr
 80169b8:	200034e8 	.word	0x200034e8
 80169bc:	20003504 	.word	0x20003504

080169c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80169c0:	b580      	push	{r7, lr}
 80169c2:	b084      	sub	sp, #16
 80169c4:	af00      	add	r7, sp, #0
 80169c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80169cc:	2300      	movs	r3, #0
 80169ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80169d0:	687b      	ldr	r3, [r7, #4]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d051      	beq.n	8016a7a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80169da:	4b2a      	ldr	r3, [pc, #168]	; (8016a84 <xTaskPriorityInherit+0xc4>)
 80169dc:	681b      	ldr	r3, [r3, #0]
 80169de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e0:	429a      	cmp	r2, r3
 80169e2:	d241      	bcs.n	8016a68 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	699b      	ldr	r3, [r3, #24]
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	db06      	blt.n	80169fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169ec:	4b25      	ldr	r3, [pc, #148]	; (8016a84 <xTaskPriorityInherit+0xc4>)
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80169f6:	68bb      	ldr	r3, [r7, #8]
 80169f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	6959      	ldr	r1, [r3, #20]
 80169fe:	68bb      	ldr	r3, [r7, #8]
 8016a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a02:	4613      	mov	r3, r2
 8016a04:	009b      	lsls	r3, r3, #2
 8016a06:	4413      	add	r3, r2
 8016a08:	009b      	lsls	r3, r3, #2
 8016a0a:	4a1f      	ldr	r2, [pc, #124]	; (8016a88 <xTaskPriorityInherit+0xc8>)
 8016a0c:	4413      	add	r3, r2
 8016a0e:	4299      	cmp	r1, r3
 8016a10:	d122      	bne.n	8016a58 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a12:	68bb      	ldr	r3, [r7, #8]
 8016a14:	3304      	adds	r3, #4
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7fd ff44 	bl	80148a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a1c:	4b19      	ldr	r3, [pc, #100]	; (8016a84 <xTaskPriorityInherit+0xc4>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a22:	68bb      	ldr	r3, [r7, #8]
 8016a24:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a2a:	4b18      	ldr	r3, [pc, #96]	; (8016a8c <xTaskPriorityInherit+0xcc>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d903      	bls.n	8016a3a <xTaskPriorityInherit+0x7a>
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a36:	4a15      	ldr	r2, [pc, #84]	; (8016a8c <xTaskPriorityInherit+0xcc>)
 8016a38:	6013      	str	r3, [r2, #0]
 8016a3a:	68bb      	ldr	r3, [r7, #8]
 8016a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a3e:	4613      	mov	r3, r2
 8016a40:	009b      	lsls	r3, r3, #2
 8016a42:	4413      	add	r3, r2
 8016a44:	009b      	lsls	r3, r3, #2
 8016a46:	4a10      	ldr	r2, [pc, #64]	; (8016a88 <xTaskPriorityInherit+0xc8>)
 8016a48:	441a      	add	r2, r3
 8016a4a:	68bb      	ldr	r3, [r7, #8]
 8016a4c:	3304      	adds	r3, #4
 8016a4e:	4619      	mov	r1, r3
 8016a50:	4610      	mov	r0, r2
 8016a52:	f7fd feca 	bl	80147ea <vListInsertEnd>
 8016a56:	e004      	b.n	8016a62 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016a58:	4b0a      	ldr	r3, [pc, #40]	; (8016a84 <xTaskPriorityInherit+0xc4>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016a5e:	68bb      	ldr	r3, [r7, #8]
 8016a60:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016a62:	2301      	movs	r3, #1
 8016a64:	60fb      	str	r3, [r7, #12]
 8016a66:	e008      	b.n	8016a7a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016a6c:	4b05      	ldr	r3, [pc, #20]	; (8016a84 <xTaskPriorityInherit+0xc4>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d201      	bcs.n	8016a7a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8016a76:	2301      	movs	r3, #1
 8016a78:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016a7a:	68fb      	ldr	r3, [r7, #12]
	}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3710      	adds	r7, #16
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}
 8016a84:	20003008 	.word	0x20003008
 8016a88:	2000300c 	.word	0x2000300c
 8016a8c:	200034e4 	.word	0x200034e4

08016a90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8016a90:	b580      	push	{r7, lr}
 8016a92:	b086      	sub	sp, #24
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d056      	beq.n	8016b54 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8016aa6:	4b2e      	ldr	r3, [pc, #184]	; (8016b60 <xTaskPriorityDisinherit+0xd0>)
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	693a      	ldr	r2, [r7, #16]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d00a      	beq.n	8016ac6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8016ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ab4:	f383 8811 	msr	BASEPRI, r3
 8016ab8:	f3bf 8f6f 	isb	sy
 8016abc:	f3bf 8f4f 	dsb	sy
 8016ac0:	60fb      	str	r3, [r7, #12]
}
 8016ac2:	bf00      	nop
 8016ac4:	e7fe      	b.n	8016ac4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d10a      	bne.n	8016ae4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8016ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad2:	f383 8811 	msr	BASEPRI, r3
 8016ad6:	f3bf 8f6f 	isb	sy
 8016ada:	f3bf 8f4f 	dsb	sy
 8016ade:	60bb      	str	r3, [r7, #8]
}
 8016ae0:	bf00      	nop
 8016ae2:	e7fe      	b.n	8016ae2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ae8:	1e5a      	subs	r2, r3, #1
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016aee:	693b      	ldr	r3, [r7, #16]
 8016af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016af2:	693b      	ldr	r3, [r7, #16]
 8016af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016af6:	429a      	cmp	r2, r3
 8016af8:	d02c      	beq.n	8016b54 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d128      	bne.n	8016b54 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	3304      	adds	r3, #4
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fd fecc 	bl	80148a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016b10:	693b      	ldr	r3, [r7, #16]
 8016b12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b18:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016b20:	693b      	ldr	r3, [r7, #16]
 8016b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b24:	4b0f      	ldr	r3, [pc, #60]	; (8016b64 <xTaskPriorityDisinherit+0xd4>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d903      	bls.n	8016b34 <xTaskPriorityDisinherit+0xa4>
 8016b2c:	693b      	ldr	r3, [r7, #16]
 8016b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b30:	4a0c      	ldr	r2, [pc, #48]	; (8016b64 <xTaskPriorityDisinherit+0xd4>)
 8016b32:	6013      	str	r3, [r2, #0]
 8016b34:	693b      	ldr	r3, [r7, #16]
 8016b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b38:	4613      	mov	r3, r2
 8016b3a:	009b      	lsls	r3, r3, #2
 8016b3c:	4413      	add	r3, r2
 8016b3e:	009b      	lsls	r3, r3, #2
 8016b40:	4a09      	ldr	r2, [pc, #36]	; (8016b68 <xTaskPriorityDisinherit+0xd8>)
 8016b42:	441a      	add	r2, r3
 8016b44:	693b      	ldr	r3, [r7, #16]
 8016b46:	3304      	adds	r3, #4
 8016b48:	4619      	mov	r1, r3
 8016b4a:	4610      	mov	r0, r2
 8016b4c:	f7fd fe4d 	bl	80147ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016b50:	2301      	movs	r3, #1
 8016b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8016b54:	697b      	ldr	r3, [r7, #20]
	}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3718      	adds	r7, #24
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}
 8016b5e:	bf00      	nop
 8016b60:	20003008 	.word	0x20003008
 8016b64:	200034e4 	.word	0x200034e4
 8016b68:	2000300c 	.word	0x2000300c

08016b6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016b6c:	b580      	push	{r7, lr}
 8016b6e:	b088      	sub	sp, #32
 8016b70:	af00      	add	r7, sp, #0
 8016b72:	6078      	str	r0, [r7, #4]
 8016b74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d06a      	beq.n	8016c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8016b84:	69bb      	ldr	r3, [r7, #24]
 8016b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d10a      	bne.n	8016ba2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8016b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b90:	f383 8811 	msr	BASEPRI, r3
 8016b94:	f3bf 8f6f 	isb	sy
 8016b98:	f3bf 8f4f 	dsb	sy
 8016b9c:	60fb      	str	r3, [r7, #12]
}
 8016b9e:	bf00      	nop
 8016ba0:	e7fe      	b.n	8016ba0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016ba6:	683a      	ldr	r2, [r7, #0]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d902      	bls.n	8016bb2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8016bac:	683b      	ldr	r3, [r7, #0]
 8016bae:	61fb      	str	r3, [r7, #28]
 8016bb0:	e002      	b.n	8016bb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8016bb2:	69bb      	ldr	r3, [r7, #24]
 8016bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016bb6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bbc:	69fa      	ldr	r2, [r7, #28]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d04b      	beq.n	8016c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8016bc2:	69bb      	ldr	r3, [r7, #24]
 8016bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016bc6:	697a      	ldr	r2, [r7, #20]
 8016bc8:	429a      	cmp	r2, r3
 8016bca:	d146      	bne.n	8016c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8016bcc:	4b25      	ldr	r3, [pc, #148]	; (8016c64 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	69ba      	ldr	r2, [r7, #24]
 8016bd2:	429a      	cmp	r2, r3
 8016bd4:	d10a      	bne.n	8016bec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8016bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bda:	f383 8811 	msr	BASEPRI, r3
 8016bde:	f3bf 8f6f 	isb	sy
 8016be2:	f3bf 8f4f 	dsb	sy
 8016be6:	60bb      	str	r3, [r7, #8]
}
 8016be8:	bf00      	nop
 8016bea:	e7fe      	b.n	8016bea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016bec:	69bb      	ldr	r3, [r7, #24]
 8016bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bf0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8016bf2:	69bb      	ldr	r3, [r7, #24]
 8016bf4:	69fa      	ldr	r2, [r7, #28]
 8016bf6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016bf8:	69bb      	ldr	r3, [r7, #24]
 8016bfa:	699b      	ldr	r3, [r3, #24]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	db04      	blt.n	8016c0a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016c00:	69fb      	ldr	r3, [r7, #28]
 8016c02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016c06:	69bb      	ldr	r3, [r7, #24]
 8016c08:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	6959      	ldr	r1, [r3, #20]
 8016c0e:	693a      	ldr	r2, [r7, #16]
 8016c10:	4613      	mov	r3, r2
 8016c12:	009b      	lsls	r3, r3, #2
 8016c14:	4413      	add	r3, r2
 8016c16:	009b      	lsls	r3, r3, #2
 8016c18:	4a13      	ldr	r2, [pc, #76]	; (8016c68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016c1a:	4413      	add	r3, r2
 8016c1c:	4299      	cmp	r1, r3
 8016c1e:	d11c      	bne.n	8016c5a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	3304      	adds	r3, #4
 8016c24:	4618      	mov	r0, r3
 8016c26:	f7fd fe3d 	bl	80148a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016c2a:	69bb      	ldr	r3, [r7, #24]
 8016c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c2e:	4b0f      	ldr	r3, [pc, #60]	; (8016c6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d903      	bls.n	8016c3e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8016c36:	69bb      	ldr	r3, [r7, #24]
 8016c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c3a:	4a0c      	ldr	r2, [pc, #48]	; (8016c6c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016c3c:	6013      	str	r3, [r2, #0]
 8016c3e:	69bb      	ldr	r3, [r7, #24]
 8016c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c42:	4613      	mov	r3, r2
 8016c44:	009b      	lsls	r3, r3, #2
 8016c46:	4413      	add	r3, r2
 8016c48:	009b      	lsls	r3, r3, #2
 8016c4a:	4a07      	ldr	r2, [pc, #28]	; (8016c68 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8016c4c:	441a      	add	r2, r3
 8016c4e:	69bb      	ldr	r3, [r7, #24]
 8016c50:	3304      	adds	r3, #4
 8016c52:	4619      	mov	r1, r3
 8016c54:	4610      	mov	r0, r2
 8016c56:	f7fd fdc8 	bl	80147ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016c5a:	bf00      	nop
 8016c5c:	3720      	adds	r7, #32
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	20003008 	.word	0x20003008
 8016c68:	2000300c 	.word	0x2000300c
 8016c6c:	200034e4 	.word	0x200034e4

08016c70 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
 8016c78:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8016c7a:	6839      	ldr	r1, [r7, #0]
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f002 fdbd 	bl	80197fc <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8016c82:	6878      	ldr	r0, [r7, #4]
 8016c84:	f7e9 faa4 	bl	80001d0 <strlen>
 8016c88:	60f8      	str	r0, [r7, #12]
 8016c8a:	e007      	b.n	8016c9c <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8016c8c:	687a      	ldr	r2, [r7, #4]
 8016c8e:	68fb      	ldr	r3, [r7, #12]
 8016c90:	4413      	add	r3, r2
 8016c92:	2220      	movs	r2, #32
 8016c94:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	3301      	adds	r3, #1
 8016c9a:	60fb      	str	r3, [r7, #12]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	2b0e      	cmp	r3, #14
 8016ca0:	d9f4      	bls.n	8016c8c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8016ca2:	687a      	ldr	r2, [r7, #4]
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	4413      	add	r3, r2
 8016ca8:	2200      	movs	r2, #0
 8016caa:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	68fb      	ldr	r3, [r7, #12]
 8016cb0:	4413      	add	r3, r2
	}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3710      	adds	r7, #16
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
	...

08016cbc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8016cbc:	b590      	push	{r4, r7, lr}
 8016cbe:	b089      	sub	sp, #36	; 0x24
 8016cc0:	af02      	add	r7, sp, #8
 8016cc2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	2200      	movs	r2, #0
 8016cc8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8016cca:	4b45      	ldr	r3, [pc, #276]	; (8016de0 <vTaskList+0x124>)
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8016cd0:	4b43      	ldr	r3, [pc, #268]	; (8016de0 <vTaskList+0x124>)
 8016cd2:	681a      	ldr	r2, [r3, #0]
 8016cd4:	4613      	mov	r3, r2
 8016cd6:	00db      	lsls	r3, r3, #3
 8016cd8:	4413      	add	r3, r2
 8016cda:	009b      	lsls	r3, r3, #2
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f000 ff0b 	bl	8017af8 <pvPortMalloc>
 8016ce2:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d076      	beq.n	8016dd8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8016cea:	2200      	movs	r2, #0
 8016cec:	68f9      	ldr	r1, [r7, #12]
 8016cee:	68b8      	ldr	r0, [r7, #8]
 8016cf0:	f7ff f996 	bl	8016020 <uxTaskGetSystemState>
 8016cf4:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	617b      	str	r3, [r7, #20]
 8016cfa:	e066      	b.n	8016dca <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8016cfc:	697a      	ldr	r2, [r7, #20]
 8016cfe:	4613      	mov	r3, r2
 8016d00:	00db      	lsls	r3, r3, #3
 8016d02:	4413      	add	r3, r2
 8016d04:	009b      	lsls	r3, r3, #2
 8016d06:	461a      	mov	r2, r3
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	4413      	add	r3, r2
 8016d0c:	7b1b      	ldrb	r3, [r3, #12]
 8016d0e:	2b04      	cmp	r3, #4
 8016d10:	d81b      	bhi.n	8016d4a <vTaskList+0x8e>
 8016d12:	a201      	add	r2, pc, #4	; (adr r2, 8016d18 <vTaskList+0x5c>)
 8016d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d18:	08016d2d 	.word	0x08016d2d
 8016d1c:	08016d33 	.word	0x08016d33
 8016d20:	08016d39 	.word	0x08016d39
 8016d24:	08016d3f 	.word	0x08016d3f
 8016d28:	08016d45 	.word	0x08016d45
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8016d2c:	2358      	movs	r3, #88	; 0x58
 8016d2e:	74fb      	strb	r3, [r7, #19]
										break;
 8016d30:	e00e      	b.n	8016d50 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8016d32:	2352      	movs	r3, #82	; 0x52
 8016d34:	74fb      	strb	r3, [r7, #19]
										break;
 8016d36:	e00b      	b.n	8016d50 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8016d38:	2342      	movs	r3, #66	; 0x42
 8016d3a:	74fb      	strb	r3, [r7, #19]
										break;
 8016d3c:	e008      	b.n	8016d50 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8016d3e:	2353      	movs	r3, #83	; 0x53
 8016d40:	74fb      	strb	r3, [r7, #19]
										break;
 8016d42:	e005      	b.n	8016d50 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8016d44:	2344      	movs	r3, #68	; 0x44
 8016d46:	74fb      	strb	r3, [r7, #19]
										break;
 8016d48:	e002      	b.n	8016d50 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	74fb      	strb	r3, [r7, #19]
										break;
 8016d4e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8016d50:	697a      	ldr	r2, [r7, #20]
 8016d52:	4613      	mov	r3, r2
 8016d54:	00db      	lsls	r3, r3, #3
 8016d56:	4413      	add	r3, r2
 8016d58:	009b      	lsls	r3, r3, #2
 8016d5a:	461a      	mov	r2, r3
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	4413      	add	r3, r2
 8016d60:	685b      	ldr	r3, [r3, #4]
 8016d62:	4619      	mov	r1, r3
 8016d64:	6878      	ldr	r0, [r7, #4]
 8016d66:	f7ff ff83 	bl	8016c70 <prvWriteNameToBuffer>
 8016d6a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8016d6c:	7cf9      	ldrb	r1, [r7, #19]
 8016d6e:	697a      	ldr	r2, [r7, #20]
 8016d70:	4613      	mov	r3, r2
 8016d72:	00db      	lsls	r3, r3, #3
 8016d74:	4413      	add	r3, r2
 8016d76:	009b      	lsls	r3, r3, #2
 8016d78:	461a      	mov	r2, r3
 8016d7a:	68bb      	ldr	r3, [r7, #8]
 8016d7c:	4413      	add	r3, r2
 8016d7e:	6918      	ldr	r0, [r3, #16]
 8016d80:	697a      	ldr	r2, [r7, #20]
 8016d82:	4613      	mov	r3, r2
 8016d84:	00db      	lsls	r3, r3, #3
 8016d86:	4413      	add	r3, r2
 8016d88:	009b      	lsls	r3, r3, #2
 8016d8a:	461a      	mov	r2, r3
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	4413      	add	r3, r2
 8016d90:	8c1b      	ldrh	r3, [r3, #32]
 8016d92:	461c      	mov	r4, r3
 8016d94:	697a      	ldr	r2, [r7, #20]
 8016d96:	4613      	mov	r3, r2
 8016d98:	00db      	lsls	r3, r3, #3
 8016d9a:	4413      	add	r3, r2
 8016d9c:	009b      	lsls	r3, r3, #2
 8016d9e:	461a      	mov	r2, r3
 8016da0:	68bb      	ldr	r3, [r7, #8]
 8016da2:	4413      	add	r3, r2
 8016da4:	689b      	ldr	r3, [r3, #8]
 8016da6:	9301      	str	r3, [sp, #4]
 8016da8:	9400      	str	r4, [sp, #0]
 8016daa:	4603      	mov	r3, r0
 8016dac:	460a      	mov	r2, r1
 8016dae:	490d      	ldr	r1, [pc, #52]	; (8016de4 <vTaskList+0x128>)
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f002 fcb1 	bl	8019718 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f7e9 fa0a 	bl	80001d0 <strlen>
 8016dbc:	4602      	mov	r2, r0
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	4413      	add	r3, r2
 8016dc2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	3301      	adds	r3, #1
 8016dc8:	617b      	str	r3, [r7, #20]
 8016dca:	697a      	ldr	r2, [r7, #20]
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d394      	bcc.n	8016cfc <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8016dd2:	68b8      	ldr	r0, [r7, #8]
 8016dd4:	f000 ff5c 	bl	8017c90 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016dd8:	bf00      	nop
 8016dda:	371c      	adds	r7, #28
 8016ddc:	46bd      	mov	sp, r7
 8016dde:	bd90      	pop	{r4, r7, pc}
 8016de0:	200034dc 	.word	0x200034dc
 8016de4:	0801c6d8 	.word	0x0801c6d8

08016de8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8016de8:	b580      	push	{r7, lr}
 8016dea:	b088      	sub	sp, #32
 8016dec:	af00      	add	r7, sp, #0
 8016dee:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2200      	movs	r2, #0
 8016df4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8016df6:	4b3a      	ldr	r3, [pc, #232]	; (8016ee0 <vTaskGetRunTimeStats+0xf8>)
 8016df8:	681b      	ldr	r3, [r3, #0]
 8016dfa:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8016dfc:	4b38      	ldr	r3, [pc, #224]	; (8016ee0 <vTaskGetRunTimeStats+0xf8>)
 8016dfe:	681a      	ldr	r2, [r3, #0]
 8016e00:	4613      	mov	r3, r2
 8016e02:	00db      	lsls	r3, r3, #3
 8016e04:	4413      	add	r3, r2
 8016e06:	009b      	lsls	r3, r3, #2
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f000 fe75 	bl	8017af8 <pvPortMalloc>
 8016e0e:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d05f      	beq.n	8016ed6 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8016e16:	f107 030c 	add.w	r3, r7, #12
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	69b9      	ldr	r1, [r7, #24]
 8016e1e:	6978      	ldr	r0, [r7, #20]
 8016e20:	f7ff f8fe 	bl	8016020 <uxTaskGetSystemState>
 8016e24:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	4a2e      	ldr	r2, [pc, #184]	; (8016ee4 <vTaskGetRunTimeStats+0xfc>)
 8016e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8016e2e:	095b      	lsrs	r3, r3, #5
 8016e30:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8016e32:	68fb      	ldr	r3, [r7, #12]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d04b      	beq.n	8016ed0 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8016e38:	2300      	movs	r3, #0
 8016e3a:	61fb      	str	r3, [r7, #28]
 8016e3c:	e044      	b.n	8016ec8 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8016e3e:	69fa      	ldr	r2, [r7, #28]
 8016e40:	4613      	mov	r3, r2
 8016e42:	00db      	lsls	r3, r3, #3
 8016e44:	4413      	add	r3, r2
 8016e46:	009b      	lsls	r3, r3, #2
 8016e48:	461a      	mov	r2, r3
 8016e4a:	697b      	ldr	r3, [r7, #20]
 8016e4c:	4413      	add	r3, r2
 8016e4e:	699a      	ldr	r2, [r3, #24]
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8016e56:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8016e58:	69fa      	ldr	r2, [r7, #28]
 8016e5a:	4613      	mov	r3, r2
 8016e5c:	00db      	lsls	r3, r3, #3
 8016e5e:	4413      	add	r3, r2
 8016e60:	009b      	lsls	r3, r3, #2
 8016e62:	461a      	mov	r2, r3
 8016e64:	697b      	ldr	r3, [r7, #20]
 8016e66:	4413      	add	r3, r2
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	4619      	mov	r1, r3
 8016e6c:	6878      	ldr	r0, [r7, #4]
 8016e6e:	f7ff feff 	bl	8016c70 <prvWriteNameToBuffer>
 8016e72:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d00e      	beq.n	8016e98 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8016e7a:	69fa      	ldr	r2, [r7, #28]
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	00db      	lsls	r3, r3, #3
 8016e80:	4413      	add	r3, r2
 8016e82:	009b      	lsls	r3, r3, #2
 8016e84:	461a      	mov	r2, r3
 8016e86:	697b      	ldr	r3, [r7, #20]
 8016e88:	4413      	add	r3, r2
 8016e8a:	699a      	ldr	r2, [r3, #24]
 8016e8c:	693b      	ldr	r3, [r7, #16]
 8016e8e:	4916      	ldr	r1, [pc, #88]	; (8016ee8 <vTaskGetRunTimeStats+0x100>)
 8016e90:	6878      	ldr	r0, [r7, #4]
 8016e92:	f002 fc41 	bl	8019718 <siprintf>
 8016e96:	e00d      	b.n	8016eb4 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8016e98:	69fa      	ldr	r2, [r7, #28]
 8016e9a:	4613      	mov	r3, r2
 8016e9c:	00db      	lsls	r3, r3, #3
 8016e9e:	4413      	add	r3, r2
 8016ea0:	009b      	lsls	r3, r3, #2
 8016ea2:	461a      	mov	r2, r3
 8016ea4:	697b      	ldr	r3, [r7, #20]
 8016ea6:	4413      	add	r3, r2
 8016ea8:	699b      	ldr	r3, [r3, #24]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	490f      	ldr	r1, [pc, #60]	; (8016eec <vTaskGetRunTimeStats+0x104>)
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f002 fc32 	bl	8019718 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f7e9 f98b 	bl	80001d0 <strlen>
 8016eba:	4602      	mov	r2, r0
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	4413      	add	r3, r2
 8016ec0:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8016ec2:	69fb      	ldr	r3, [r7, #28]
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	61fb      	str	r3, [r7, #28]
 8016ec8:	69fa      	ldr	r2, [r7, #28]
 8016eca:	69bb      	ldr	r3, [r7, #24]
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d3b6      	bcc.n	8016e3e <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8016ed0:	6978      	ldr	r0, [r7, #20]
 8016ed2:	f000 fedd 	bl	8017c90 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016ed6:	bf00      	nop
 8016ed8:	3720      	adds	r7, #32
 8016eda:	46bd      	mov	sp, r7
 8016edc:	bd80      	pop	{r7, pc}
 8016ede:	bf00      	nop
 8016ee0:	200034dc 	.word	0x200034dc
 8016ee4:	51eb851f 	.word	0x51eb851f
 8016ee8:	0801c6e8 	.word	0x0801c6e8
 8016eec:	0801c6f4 	.word	0x0801c6f4

08016ef0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8016ef0:	b480      	push	{r7}
 8016ef2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8016ef4:	4b07      	ldr	r3, [pc, #28]	; (8016f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	2b00      	cmp	r3, #0
 8016efa:	d004      	beq.n	8016f06 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8016efc:	4b05      	ldr	r3, [pc, #20]	; (8016f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8016efe:	681b      	ldr	r3, [r3, #0]
 8016f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016f02:	3201      	adds	r2, #1
 8016f04:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8016f06:	4b03      	ldr	r3, [pc, #12]	; (8016f14 <pvTaskIncrementMutexHeldCount+0x24>)
 8016f08:	681b      	ldr	r3, [r3, #0]
	}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	46bd      	mov	sp, r7
 8016f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f12:	4770      	bx	lr
 8016f14:	20003008 	.word	0x20003008

08016f18 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b084      	sub	sp, #16
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016f22:	4b21      	ldr	r3, [pc, #132]	; (8016fa8 <prvAddCurrentTaskToDelayedList+0x90>)
 8016f24:	681b      	ldr	r3, [r3, #0]
 8016f26:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016f28:	4b20      	ldr	r3, [pc, #128]	; (8016fac <prvAddCurrentTaskToDelayedList+0x94>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	3304      	adds	r3, #4
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7fd fcb8 	bl	80148a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f3a:	d10a      	bne.n	8016f52 <prvAddCurrentTaskToDelayedList+0x3a>
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d007      	beq.n	8016f52 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f42:	4b1a      	ldr	r3, [pc, #104]	; (8016fac <prvAddCurrentTaskToDelayedList+0x94>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	3304      	adds	r3, #4
 8016f48:	4619      	mov	r1, r3
 8016f4a:	4819      	ldr	r0, [pc, #100]	; (8016fb0 <prvAddCurrentTaskToDelayedList+0x98>)
 8016f4c:	f7fd fc4d 	bl	80147ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016f50:	e026      	b.n	8016fa0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8016f52:	68fa      	ldr	r2, [r7, #12]
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	4413      	add	r3, r2
 8016f58:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016f5a:	4b14      	ldr	r3, [pc, #80]	; (8016fac <prvAddCurrentTaskToDelayedList+0x94>)
 8016f5c:	681b      	ldr	r3, [r3, #0]
 8016f5e:	68ba      	ldr	r2, [r7, #8]
 8016f60:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8016f62:	68ba      	ldr	r2, [r7, #8]
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d209      	bcs.n	8016f7e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f6a:	4b12      	ldr	r3, [pc, #72]	; (8016fb4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8016f6c:	681a      	ldr	r2, [r3, #0]
 8016f6e:	4b0f      	ldr	r3, [pc, #60]	; (8016fac <prvAddCurrentTaskToDelayedList+0x94>)
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	3304      	adds	r3, #4
 8016f74:	4619      	mov	r1, r3
 8016f76:	4610      	mov	r0, r2
 8016f78:	f7fd fc5b 	bl	8014832 <vListInsert>
}
 8016f7c:	e010      	b.n	8016fa0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016f7e:	4b0e      	ldr	r3, [pc, #56]	; (8016fb8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016f80:	681a      	ldr	r2, [r3, #0]
 8016f82:	4b0a      	ldr	r3, [pc, #40]	; (8016fac <prvAddCurrentTaskToDelayedList+0x94>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	3304      	adds	r3, #4
 8016f88:	4619      	mov	r1, r3
 8016f8a:	4610      	mov	r0, r2
 8016f8c:	f7fd fc51 	bl	8014832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016f90:	4b0a      	ldr	r3, [pc, #40]	; (8016fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	68ba      	ldr	r2, [r7, #8]
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d202      	bcs.n	8016fa0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016f9a:	4a08      	ldr	r2, [pc, #32]	; (8016fbc <prvAddCurrentTaskToDelayedList+0xa4>)
 8016f9c:	68bb      	ldr	r3, [r7, #8]
 8016f9e:	6013      	str	r3, [r2, #0]
}
 8016fa0:	bf00      	nop
 8016fa2:	3710      	adds	r7, #16
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	200034e0 	.word	0x200034e0
 8016fac:	20003008 	.word	0x20003008
 8016fb0:	200034c8 	.word	0x200034c8
 8016fb4:	20003498 	.word	0x20003498
 8016fb8:	20003494 	.word	0x20003494
 8016fbc:	200034fc 	.word	0x200034fc

08016fc0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b08a      	sub	sp, #40	; 0x28
 8016fc4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016fca:	f000 fb07 	bl	80175dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016fce:	4b1c      	ldr	r3, [pc, #112]	; (8017040 <xTimerCreateTimerTask+0x80>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d021      	beq.n	801701a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016fde:	1d3a      	adds	r2, r7, #4
 8016fe0:	f107 0108 	add.w	r1, r7, #8
 8016fe4:	f107 030c 	add.w	r3, r7, #12
 8016fe8:	4618      	mov	r0, r3
 8016fea:	f7fd fbb7 	bl	801475c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016fee:	6879      	ldr	r1, [r7, #4]
 8016ff0:	68bb      	ldr	r3, [r7, #8]
 8016ff2:	68fa      	ldr	r2, [r7, #12]
 8016ff4:	9202      	str	r2, [sp, #8]
 8016ff6:	9301      	str	r3, [sp, #4]
 8016ff8:	2302      	movs	r3, #2
 8016ffa:	9300      	str	r3, [sp, #0]
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	460a      	mov	r2, r1
 8017000:	4910      	ldr	r1, [pc, #64]	; (8017044 <xTimerCreateTimerTask+0x84>)
 8017002:	4811      	ldr	r0, [pc, #68]	; (8017048 <xTimerCreateTimerTask+0x88>)
 8017004:	f7fe fc86 	bl	8015914 <xTaskCreateStatic>
 8017008:	4603      	mov	r3, r0
 801700a:	4a10      	ldr	r2, [pc, #64]	; (801704c <xTimerCreateTimerTask+0x8c>)
 801700c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801700e:	4b0f      	ldr	r3, [pc, #60]	; (801704c <xTimerCreateTimerTask+0x8c>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d001      	beq.n	801701a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017016:	2301      	movs	r3, #1
 8017018:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801701a:	697b      	ldr	r3, [r7, #20]
 801701c:	2b00      	cmp	r3, #0
 801701e:	d10a      	bne.n	8017036 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017024:	f383 8811 	msr	BASEPRI, r3
 8017028:	f3bf 8f6f 	isb	sy
 801702c:	f3bf 8f4f 	dsb	sy
 8017030:	613b      	str	r3, [r7, #16]
}
 8017032:	bf00      	nop
 8017034:	e7fe      	b.n	8017034 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017036:	697b      	ldr	r3, [r7, #20]
}
 8017038:	4618      	mov	r0, r3
 801703a:	3718      	adds	r7, #24
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}
 8017040:	20003540 	.word	0x20003540
 8017044:	0801c700 	.word	0x0801c700
 8017048:	08017185 	.word	0x08017185
 801704c:	20003544 	.word	0x20003544

08017050 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017050:	b580      	push	{r7, lr}
 8017052:	b08a      	sub	sp, #40	; 0x28
 8017054:	af00      	add	r7, sp, #0
 8017056:	60f8      	str	r0, [r7, #12]
 8017058:	60b9      	str	r1, [r7, #8]
 801705a:	607a      	str	r2, [r7, #4]
 801705c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801705e:	2300      	movs	r3, #0
 8017060:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	2b00      	cmp	r3, #0
 8017066:	d10a      	bne.n	801707e <xTimerGenericCommand+0x2e>
	__asm volatile
 8017068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801706c:	f383 8811 	msr	BASEPRI, r3
 8017070:	f3bf 8f6f 	isb	sy
 8017074:	f3bf 8f4f 	dsb	sy
 8017078:	623b      	str	r3, [r7, #32]
}
 801707a:	bf00      	nop
 801707c:	e7fe      	b.n	801707c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801707e:	4b1a      	ldr	r3, [pc, #104]	; (80170e8 <xTimerGenericCommand+0x98>)
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d02a      	beq.n	80170dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017086:	68bb      	ldr	r3, [r7, #8]
 8017088:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017092:	68bb      	ldr	r3, [r7, #8]
 8017094:	2b05      	cmp	r3, #5
 8017096:	dc18      	bgt.n	80170ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017098:	f7ff fc74 	bl	8016984 <xTaskGetSchedulerState>
 801709c:	4603      	mov	r3, r0
 801709e:	2b02      	cmp	r3, #2
 80170a0:	d109      	bne.n	80170b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80170a2:	4b11      	ldr	r3, [pc, #68]	; (80170e8 <xTimerGenericCommand+0x98>)
 80170a4:	6818      	ldr	r0, [r3, #0]
 80170a6:	f107 0110 	add.w	r1, r7, #16
 80170aa:	2300      	movs	r3, #0
 80170ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80170ae:	f7fd fdcb 	bl	8014c48 <xQueueGenericSend>
 80170b2:	6278      	str	r0, [r7, #36]	; 0x24
 80170b4:	e012      	b.n	80170dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80170b6:	4b0c      	ldr	r3, [pc, #48]	; (80170e8 <xTimerGenericCommand+0x98>)
 80170b8:	6818      	ldr	r0, [r3, #0]
 80170ba:	f107 0110 	add.w	r1, r7, #16
 80170be:	2300      	movs	r3, #0
 80170c0:	2200      	movs	r2, #0
 80170c2:	f7fd fdc1 	bl	8014c48 <xQueueGenericSend>
 80170c6:	6278      	str	r0, [r7, #36]	; 0x24
 80170c8:	e008      	b.n	80170dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80170ca:	4b07      	ldr	r3, [pc, #28]	; (80170e8 <xTimerGenericCommand+0x98>)
 80170cc:	6818      	ldr	r0, [r3, #0]
 80170ce:	f107 0110 	add.w	r1, r7, #16
 80170d2:	2300      	movs	r3, #0
 80170d4:	683a      	ldr	r2, [r7, #0]
 80170d6:	f7fd feb5 	bl	8014e44 <xQueueGenericSendFromISR>
 80170da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80170dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80170de:	4618      	mov	r0, r3
 80170e0:	3728      	adds	r7, #40	; 0x28
 80170e2:	46bd      	mov	sp, r7
 80170e4:	bd80      	pop	{r7, pc}
 80170e6:	bf00      	nop
 80170e8:	20003540 	.word	0x20003540

080170ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80170ec:	b580      	push	{r7, lr}
 80170ee:	b088      	sub	sp, #32
 80170f0:	af02      	add	r7, sp, #8
 80170f2:	6078      	str	r0, [r7, #4]
 80170f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80170f6:	4b22      	ldr	r3, [pc, #136]	; (8017180 <prvProcessExpiredTimer+0x94>)
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	68db      	ldr	r3, [r3, #12]
 80170fc:	68db      	ldr	r3, [r3, #12]
 80170fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017100:	697b      	ldr	r3, [r7, #20]
 8017102:	3304      	adds	r3, #4
 8017104:	4618      	mov	r0, r3
 8017106:	f7fd fbcd 	bl	80148a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017110:	f003 0304 	and.w	r3, r3, #4
 8017114:	2b00      	cmp	r3, #0
 8017116:	d022      	beq.n	801715e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017118:	697b      	ldr	r3, [r7, #20]
 801711a:	699a      	ldr	r2, [r3, #24]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	18d1      	adds	r1, r2, r3
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	683a      	ldr	r2, [r7, #0]
 8017124:	6978      	ldr	r0, [r7, #20]
 8017126:	f000 f8d1 	bl	80172cc <prvInsertTimerInActiveList>
 801712a:	4603      	mov	r3, r0
 801712c:	2b00      	cmp	r3, #0
 801712e:	d01f      	beq.n	8017170 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017130:	2300      	movs	r3, #0
 8017132:	9300      	str	r3, [sp, #0]
 8017134:	2300      	movs	r3, #0
 8017136:	687a      	ldr	r2, [r7, #4]
 8017138:	2100      	movs	r1, #0
 801713a:	6978      	ldr	r0, [r7, #20]
 801713c:	f7ff ff88 	bl	8017050 <xTimerGenericCommand>
 8017140:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017142:	693b      	ldr	r3, [r7, #16]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d113      	bne.n	8017170 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017148:	f04f 0350 	mov.w	r3, #80	; 0x50
 801714c:	f383 8811 	msr	BASEPRI, r3
 8017150:	f3bf 8f6f 	isb	sy
 8017154:	f3bf 8f4f 	dsb	sy
 8017158:	60fb      	str	r3, [r7, #12]
}
 801715a:	bf00      	nop
 801715c:	e7fe      	b.n	801715c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801715e:	697b      	ldr	r3, [r7, #20]
 8017160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017164:	f023 0301 	bic.w	r3, r3, #1
 8017168:	b2da      	uxtb	r2, r3
 801716a:	697b      	ldr	r3, [r7, #20]
 801716c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017170:	697b      	ldr	r3, [r7, #20]
 8017172:	6a1b      	ldr	r3, [r3, #32]
 8017174:	6978      	ldr	r0, [r7, #20]
 8017176:	4798      	blx	r3
}
 8017178:	bf00      	nop
 801717a:	3718      	adds	r7, #24
 801717c:	46bd      	mov	sp, r7
 801717e:	bd80      	pop	{r7, pc}
 8017180:	20003538 	.word	0x20003538

08017184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017184:	b580      	push	{r7, lr}
 8017186:	b084      	sub	sp, #16
 8017188:	af00      	add	r7, sp, #0
 801718a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801718c:	f107 0308 	add.w	r3, r7, #8
 8017190:	4618      	mov	r0, r3
 8017192:	f000 f857 	bl	8017244 <prvGetNextExpireTime>
 8017196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017198:	68bb      	ldr	r3, [r7, #8]
 801719a:	4619      	mov	r1, r3
 801719c:	68f8      	ldr	r0, [r7, #12]
 801719e:	f000 f803 	bl	80171a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80171a2:	f000 f8d5 	bl	8017350 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80171a6:	e7f1      	b.n	801718c <prvTimerTask+0x8>

080171a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
 80171b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80171b2:	f7fe fe79 	bl	8015ea8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80171b6:	f107 0308 	add.w	r3, r7, #8
 80171ba:	4618      	mov	r0, r3
 80171bc:	f000 f866 	bl	801728c <prvSampleTimeNow>
 80171c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80171c2:	68bb      	ldr	r3, [r7, #8]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d130      	bne.n	801722a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80171c8:	683b      	ldr	r3, [r7, #0]
 80171ca:	2b00      	cmp	r3, #0
 80171cc:	d10a      	bne.n	80171e4 <prvProcessTimerOrBlockTask+0x3c>
 80171ce:	687a      	ldr	r2, [r7, #4]
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	429a      	cmp	r2, r3
 80171d4:	d806      	bhi.n	80171e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80171d6:	f7fe fe75 	bl	8015ec4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80171da:	68f9      	ldr	r1, [r7, #12]
 80171dc:	6878      	ldr	r0, [r7, #4]
 80171de:	f7ff ff85 	bl	80170ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80171e2:	e024      	b.n	801722e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80171e4:	683b      	ldr	r3, [r7, #0]
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d008      	beq.n	80171fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80171ea:	4b13      	ldr	r3, [pc, #76]	; (8017238 <prvProcessTimerOrBlockTask+0x90>)
 80171ec:	681b      	ldr	r3, [r3, #0]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d101      	bne.n	80171f8 <prvProcessTimerOrBlockTask+0x50>
 80171f4:	2301      	movs	r3, #1
 80171f6:	e000      	b.n	80171fa <prvProcessTimerOrBlockTask+0x52>
 80171f8:	2300      	movs	r3, #0
 80171fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80171fc:	4b0f      	ldr	r3, [pc, #60]	; (801723c <prvProcessTimerOrBlockTask+0x94>)
 80171fe:	6818      	ldr	r0, [r3, #0]
 8017200:	687a      	ldr	r2, [r7, #4]
 8017202:	68fb      	ldr	r3, [r7, #12]
 8017204:	1ad3      	subs	r3, r2, r3
 8017206:	683a      	ldr	r2, [r7, #0]
 8017208:	4619      	mov	r1, r3
 801720a:	f7fe fb4f 	bl	80158ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801720e:	f7fe fe59 	bl	8015ec4 <xTaskResumeAll>
 8017212:	4603      	mov	r3, r0
 8017214:	2b00      	cmp	r3, #0
 8017216:	d10a      	bne.n	801722e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017218:	4b09      	ldr	r3, [pc, #36]	; (8017240 <prvProcessTimerOrBlockTask+0x98>)
 801721a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801721e:	601a      	str	r2, [r3, #0]
 8017220:	f3bf 8f4f 	dsb	sy
 8017224:	f3bf 8f6f 	isb	sy
}
 8017228:	e001      	b.n	801722e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801722a:	f7fe fe4b 	bl	8015ec4 <xTaskResumeAll>
}
 801722e:	bf00      	nop
 8017230:	3710      	adds	r7, #16
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}
 8017236:	bf00      	nop
 8017238:	2000353c 	.word	0x2000353c
 801723c:	20003540 	.word	0x20003540
 8017240:	e000ed04 	.word	0xe000ed04

08017244 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017244:	b480      	push	{r7}
 8017246:	b085      	sub	sp, #20
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801724c:	4b0e      	ldr	r3, [pc, #56]	; (8017288 <prvGetNextExpireTime+0x44>)
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	681b      	ldr	r3, [r3, #0]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d101      	bne.n	801725a <prvGetNextExpireTime+0x16>
 8017256:	2201      	movs	r2, #1
 8017258:	e000      	b.n	801725c <prvGetNextExpireTime+0x18>
 801725a:	2200      	movs	r2, #0
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	2b00      	cmp	r3, #0
 8017266:	d105      	bne.n	8017274 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017268:	4b07      	ldr	r3, [pc, #28]	; (8017288 <prvGetNextExpireTime+0x44>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	68db      	ldr	r3, [r3, #12]
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	60fb      	str	r3, [r7, #12]
 8017272:	e001      	b.n	8017278 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017274:	2300      	movs	r3, #0
 8017276:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017278:	68fb      	ldr	r3, [r7, #12]
}
 801727a:	4618      	mov	r0, r3
 801727c:	3714      	adds	r7, #20
 801727e:	46bd      	mov	sp, r7
 8017280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017284:	4770      	bx	lr
 8017286:	bf00      	nop
 8017288:	20003538 	.word	0x20003538

0801728c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b084      	sub	sp, #16
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017294:	f7fe feb4 	bl	8016000 <xTaskGetTickCount>
 8017298:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801729a:	4b0b      	ldr	r3, [pc, #44]	; (80172c8 <prvSampleTimeNow+0x3c>)
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	68fa      	ldr	r2, [r7, #12]
 80172a0:	429a      	cmp	r2, r3
 80172a2:	d205      	bcs.n	80172b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80172a4:	f000 f936 	bl	8017514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	2201      	movs	r2, #1
 80172ac:	601a      	str	r2, [r3, #0]
 80172ae:	e002      	b.n	80172b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2200      	movs	r2, #0
 80172b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80172b6:	4a04      	ldr	r2, [pc, #16]	; (80172c8 <prvSampleTimeNow+0x3c>)
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80172bc:	68fb      	ldr	r3, [r7, #12]
}
 80172be:	4618      	mov	r0, r3
 80172c0:	3710      	adds	r7, #16
 80172c2:	46bd      	mov	sp, r7
 80172c4:	bd80      	pop	{r7, pc}
 80172c6:	bf00      	nop
 80172c8:	20003548 	.word	0x20003548

080172cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b086      	sub	sp, #24
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	60f8      	str	r0, [r7, #12]
 80172d4:	60b9      	str	r1, [r7, #8]
 80172d6:	607a      	str	r2, [r7, #4]
 80172d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80172da:	2300      	movs	r3, #0
 80172dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80172de:	68fb      	ldr	r3, [r7, #12]
 80172e0:	68ba      	ldr	r2, [r7, #8]
 80172e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	68fa      	ldr	r2, [r7, #12]
 80172e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80172ea:	68ba      	ldr	r2, [r7, #8]
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	429a      	cmp	r2, r3
 80172f0:	d812      	bhi.n	8017318 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80172f2:	687a      	ldr	r2, [r7, #4]
 80172f4:	683b      	ldr	r3, [r7, #0]
 80172f6:	1ad2      	subs	r2, r2, r3
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	699b      	ldr	r3, [r3, #24]
 80172fc:	429a      	cmp	r2, r3
 80172fe:	d302      	bcc.n	8017306 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8017300:	2301      	movs	r3, #1
 8017302:	617b      	str	r3, [r7, #20]
 8017304:	e01b      	b.n	801733e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017306:	4b10      	ldr	r3, [pc, #64]	; (8017348 <prvInsertTimerInActiveList+0x7c>)
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	3304      	adds	r3, #4
 801730e:	4619      	mov	r1, r3
 8017310:	4610      	mov	r0, r2
 8017312:	f7fd fa8e 	bl	8014832 <vListInsert>
 8017316:	e012      	b.n	801733e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017318:	687a      	ldr	r2, [r7, #4]
 801731a:	683b      	ldr	r3, [r7, #0]
 801731c:	429a      	cmp	r2, r3
 801731e:	d206      	bcs.n	801732e <prvInsertTimerInActiveList+0x62>
 8017320:	68ba      	ldr	r2, [r7, #8]
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	429a      	cmp	r2, r3
 8017326:	d302      	bcc.n	801732e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8017328:	2301      	movs	r3, #1
 801732a:	617b      	str	r3, [r7, #20]
 801732c:	e007      	b.n	801733e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801732e:	4b07      	ldr	r3, [pc, #28]	; (801734c <prvInsertTimerInActiveList+0x80>)
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	3304      	adds	r3, #4
 8017336:	4619      	mov	r1, r3
 8017338:	4610      	mov	r0, r2
 801733a:	f7fd fa7a 	bl	8014832 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801733e:	697b      	ldr	r3, [r7, #20]
}
 8017340:	4618      	mov	r0, r3
 8017342:	3718      	adds	r7, #24
 8017344:	46bd      	mov	sp, r7
 8017346:	bd80      	pop	{r7, pc}
 8017348:	2000353c 	.word	0x2000353c
 801734c:	20003538 	.word	0x20003538

08017350 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b08e      	sub	sp, #56	; 0x38
 8017354:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8017356:	e0ca      	b.n	80174ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2b00      	cmp	r3, #0
 801735c:	da18      	bge.n	8017390 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801735e:	1d3b      	adds	r3, r7, #4
 8017360:	3304      	adds	r3, #4
 8017362:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8017364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017366:	2b00      	cmp	r3, #0
 8017368:	d10a      	bne.n	8017380 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801736e:	f383 8811 	msr	BASEPRI, r3
 8017372:	f3bf 8f6f 	isb	sy
 8017376:	f3bf 8f4f 	dsb	sy
 801737a:	61fb      	str	r3, [r7, #28]
}
 801737c:	bf00      	nop
 801737e:	e7fe      	b.n	801737e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017386:	6850      	ldr	r0, [r2, #4]
 8017388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801738a:	6892      	ldr	r2, [r2, #8]
 801738c:	4611      	mov	r1, r2
 801738e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	2b00      	cmp	r3, #0
 8017394:	f2c0 80aa 	blt.w	80174ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8017398:	68fb      	ldr	r3, [r7, #12]
 801739a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801739c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801739e:	695b      	ldr	r3, [r3, #20]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d004      	beq.n	80173ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80173a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a6:	3304      	adds	r3, #4
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7fd fa7b 	bl	80148a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80173ae:	463b      	mov	r3, r7
 80173b0:	4618      	mov	r0, r3
 80173b2:	f7ff ff6b 	bl	801728c <prvSampleTimeNow>
 80173b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2b09      	cmp	r3, #9
 80173bc:	f200 8097 	bhi.w	80174ee <prvProcessReceivedCommands+0x19e>
 80173c0:	a201      	add	r2, pc, #4	; (adr r2, 80173c8 <prvProcessReceivedCommands+0x78>)
 80173c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173c6:	bf00      	nop
 80173c8:	080173f1 	.word	0x080173f1
 80173cc:	080173f1 	.word	0x080173f1
 80173d0:	080173f1 	.word	0x080173f1
 80173d4:	08017465 	.word	0x08017465
 80173d8:	08017479 	.word	0x08017479
 80173dc:	080174c3 	.word	0x080174c3
 80173e0:	080173f1 	.word	0x080173f1
 80173e4:	080173f1 	.word	0x080173f1
 80173e8:	08017465 	.word	0x08017465
 80173ec:	08017479 	.word	0x08017479
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80173f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80173f6:	f043 0301 	orr.w	r3, r3, #1
 80173fa:	b2da      	uxtb	r2, r3
 80173fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8017402:	68ba      	ldr	r2, [r7, #8]
 8017404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017406:	699b      	ldr	r3, [r3, #24]
 8017408:	18d1      	adds	r1, r2, r3
 801740a:	68bb      	ldr	r3, [r7, #8]
 801740c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801740e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017410:	f7ff ff5c 	bl	80172cc <prvInsertTimerInActiveList>
 8017414:	4603      	mov	r3, r0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d069      	beq.n	80174ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741c:	6a1b      	ldr	r3, [r3, #32]
 801741e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017420:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017428:	f003 0304 	and.w	r3, r3, #4
 801742c:	2b00      	cmp	r3, #0
 801742e:	d05e      	beq.n	80174ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8017430:	68ba      	ldr	r2, [r7, #8]
 8017432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017434:	699b      	ldr	r3, [r3, #24]
 8017436:	441a      	add	r2, r3
 8017438:	2300      	movs	r3, #0
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	2300      	movs	r3, #0
 801743e:	2100      	movs	r1, #0
 8017440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017442:	f7ff fe05 	bl	8017050 <xTimerGenericCommand>
 8017446:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8017448:	6a3b      	ldr	r3, [r7, #32]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d14f      	bne.n	80174ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017452:	f383 8811 	msr	BASEPRI, r3
 8017456:	f3bf 8f6f 	isb	sy
 801745a:	f3bf 8f4f 	dsb	sy
 801745e:	61bb      	str	r3, [r7, #24]
}
 8017460:	bf00      	nop
 8017462:	e7fe      	b.n	8017462 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017466:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801746a:	f023 0301 	bic.w	r3, r3, #1
 801746e:	b2da      	uxtb	r2, r3
 8017470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017472:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8017476:	e03a      	b.n	80174ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8017478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801747a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801747e:	f043 0301 	orr.w	r3, r3, #1
 8017482:	b2da      	uxtb	r2, r3
 8017484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017486:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801748a:	68ba      	ldr	r2, [r7, #8]
 801748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801748e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017492:	699b      	ldr	r3, [r3, #24]
 8017494:	2b00      	cmp	r3, #0
 8017496:	d10a      	bne.n	80174ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8017498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801749c:	f383 8811 	msr	BASEPRI, r3
 80174a0:	f3bf 8f6f 	isb	sy
 80174a4:	f3bf 8f4f 	dsb	sy
 80174a8:	617b      	str	r3, [r7, #20]
}
 80174aa:	bf00      	nop
 80174ac:	e7fe      	b.n	80174ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80174ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b0:	699a      	ldr	r2, [r3, #24]
 80174b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b4:	18d1      	adds	r1, r2, r3
 80174b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80174ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174bc:	f7ff ff06 	bl	80172cc <prvInsertTimerInActiveList>
					break;
 80174c0:	e015      	b.n	80174ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80174c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174c8:	f003 0302 	and.w	r3, r3, #2
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d103      	bne.n	80174d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80174d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80174d2:	f000 fbdd 	bl	8017c90 <vPortFree>
 80174d6:	e00a      	b.n	80174ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80174d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80174de:	f023 0301 	bic.w	r3, r3, #1
 80174e2:	b2da      	uxtb	r2, r3
 80174e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80174ea:	e000      	b.n	80174ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80174ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80174ee:	4b08      	ldr	r3, [pc, #32]	; (8017510 <prvProcessReceivedCommands+0x1c0>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	1d39      	adds	r1, r7, #4
 80174f4:	2200      	movs	r2, #0
 80174f6:	4618      	mov	r0, r3
 80174f8:	f7fd fdcc 	bl	8015094 <xQueueReceive>
 80174fc:	4603      	mov	r3, r0
 80174fe:	2b00      	cmp	r3, #0
 8017500:	f47f af2a 	bne.w	8017358 <prvProcessReceivedCommands+0x8>
	}
}
 8017504:	bf00      	nop
 8017506:	bf00      	nop
 8017508:	3730      	adds	r7, #48	; 0x30
 801750a:	46bd      	mov	sp, r7
 801750c:	bd80      	pop	{r7, pc}
 801750e:	bf00      	nop
 8017510:	20003540 	.word	0x20003540

08017514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017514:	b580      	push	{r7, lr}
 8017516:	b088      	sub	sp, #32
 8017518:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801751a:	e048      	b.n	80175ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801751c:	4b2d      	ldr	r3, [pc, #180]	; (80175d4 <prvSwitchTimerLists+0xc0>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	68db      	ldr	r3, [r3, #12]
 8017522:	681b      	ldr	r3, [r3, #0]
 8017524:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017526:	4b2b      	ldr	r3, [pc, #172]	; (80175d4 <prvSwitchTimerLists+0xc0>)
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	68db      	ldr	r3, [r3, #12]
 801752c:	68db      	ldr	r3, [r3, #12]
 801752e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	3304      	adds	r3, #4
 8017534:	4618      	mov	r0, r3
 8017536:	f7fd f9b5 	bl	80148a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	6a1b      	ldr	r3, [r3, #32]
 801753e:	68f8      	ldr	r0, [r7, #12]
 8017540:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017548:	f003 0304 	and.w	r3, r3, #4
 801754c:	2b00      	cmp	r3, #0
 801754e:	d02e      	beq.n	80175ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	699b      	ldr	r3, [r3, #24]
 8017554:	693a      	ldr	r2, [r7, #16]
 8017556:	4413      	add	r3, r2
 8017558:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801755a:	68ba      	ldr	r2, [r7, #8]
 801755c:	693b      	ldr	r3, [r7, #16]
 801755e:	429a      	cmp	r2, r3
 8017560:	d90e      	bls.n	8017580 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8017562:	68fb      	ldr	r3, [r7, #12]
 8017564:	68ba      	ldr	r2, [r7, #8]
 8017566:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8017568:	68fb      	ldr	r3, [r7, #12]
 801756a:	68fa      	ldr	r2, [r7, #12]
 801756c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801756e:	4b19      	ldr	r3, [pc, #100]	; (80175d4 <prvSwitchTimerLists+0xc0>)
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	68fb      	ldr	r3, [r7, #12]
 8017574:	3304      	adds	r3, #4
 8017576:	4619      	mov	r1, r3
 8017578:	4610      	mov	r0, r2
 801757a:	f7fd f95a 	bl	8014832 <vListInsert>
 801757e:	e016      	b.n	80175ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017580:	2300      	movs	r3, #0
 8017582:	9300      	str	r3, [sp, #0]
 8017584:	2300      	movs	r3, #0
 8017586:	693a      	ldr	r2, [r7, #16]
 8017588:	2100      	movs	r1, #0
 801758a:	68f8      	ldr	r0, [r7, #12]
 801758c:	f7ff fd60 	bl	8017050 <xTimerGenericCommand>
 8017590:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8017592:	687b      	ldr	r3, [r7, #4]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d10a      	bne.n	80175ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8017598:	f04f 0350 	mov.w	r3, #80	; 0x50
 801759c:	f383 8811 	msr	BASEPRI, r3
 80175a0:	f3bf 8f6f 	isb	sy
 80175a4:	f3bf 8f4f 	dsb	sy
 80175a8:	603b      	str	r3, [r7, #0]
}
 80175aa:	bf00      	nop
 80175ac:	e7fe      	b.n	80175ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80175ae:	4b09      	ldr	r3, [pc, #36]	; (80175d4 <prvSwitchTimerLists+0xc0>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d1b1      	bne.n	801751c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80175b8:	4b06      	ldr	r3, [pc, #24]	; (80175d4 <prvSwitchTimerLists+0xc0>)
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80175be:	4b06      	ldr	r3, [pc, #24]	; (80175d8 <prvSwitchTimerLists+0xc4>)
 80175c0:	681b      	ldr	r3, [r3, #0]
 80175c2:	4a04      	ldr	r2, [pc, #16]	; (80175d4 <prvSwitchTimerLists+0xc0>)
 80175c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80175c6:	4a04      	ldr	r2, [pc, #16]	; (80175d8 <prvSwitchTimerLists+0xc4>)
 80175c8:	697b      	ldr	r3, [r7, #20]
 80175ca:	6013      	str	r3, [r2, #0]
}
 80175cc:	bf00      	nop
 80175ce:	3718      	adds	r7, #24
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}
 80175d4:	20003538 	.word	0x20003538
 80175d8:	2000353c 	.word	0x2000353c

080175dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b082      	sub	sp, #8
 80175e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80175e2:	f000 f967 	bl	80178b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80175e6:	4b15      	ldr	r3, [pc, #84]	; (801763c <prvCheckForValidListAndQueue+0x60>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	2b00      	cmp	r3, #0
 80175ec:	d120      	bne.n	8017630 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80175ee:	4814      	ldr	r0, [pc, #80]	; (8017640 <prvCheckForValidListAndQueue+0x64>)
 80175f0:	f7fd f8ce 	bl	8014790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80175f4:	4813      	ldr	r0, [pc, #76]	; (8017644 <prvCheckForValidListAndQueue+0x68>)
 80175f6:	f7fd f8cb 	bl	8014790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80175fa:	4b13      	ldr	r3, [pc, #76]	; (8017648 <prvCheckForValidListAndQueue+0x6c>)
 80175fc:	4a10      	ldr	r2, [pc, #64]	; (8017640 <prvCheckForValidListAndQueue+0x64>)
 80175fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017600:	4b12      	ldr	r3, [pc, #72]	; (801764c <prvCheckForValidListAndQueue+0x70>)
 8017602:	4a10      	ldr	r2, [pc, #64]	; (8017644 <prvCheckForValidListAndQueue+0x68>)
 8017604:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8017606:	2300      	movs	r3, #0
 8017608:	9300      	str	r3, [sp, #0]
 801760a:	4b11      	ldr	r3, [pc, #68]	; (8017650 <prvCheckForValidListAndQueue+0x74>)
 801760c:	4a11      	ldr	r2, [pc, #68]	; (8017654 <prvCheckForValidListAndQueue+0x78>)
 801760e:	2110      	movs	r1, #16
 8017610:	200a      	movs	r0, #10
 8017612:	f7fd f9d9 	bl	80149c8 <xQueueGenericCreateStatic>
 8017616:	4603      	mov	r3, r0
 8017618:	4a08      	ldr	r2, [pc, #32]	; (801763c <prvCheckForValidListAndQueue+0x60>)
 801761a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801761c:	4b07      	ldr	r3, [pc, #28]	; (801763c <prvCheckForValidListAndQueue+0x60>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	2b00      	cmp	r3, #0
 8017622:	d005      	beq.n	8017630 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017624:	4b05      	ldr	r3, [pc, #20]	; (801763c <prvCheckForValidListAndQueue+0x60>)
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	490b      	ldr	r1, [pc, #44]	; (8017658 <prvCheckForValidListAndQueue+0x7c>)
 801762a:	4618      	mov	r0, r3
 801762c:	f7fe f8ea 	bl	8015804 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017630:	f000 f970 	bl	8017914 <vPortExitCritical>
}
 8017634:	bf00      	nop
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
 801763a:	bf00      	nop
 801763c:	20003540 	.word	0x20003540
 8017640:	20003510 	.word	0x20003510
 8017644:	20003524 	.word	0x20003524
 8017648:	20003538 	.word	0x20003538
 801764c:	2000353c 	.word	0x2000353c
 8017650:	200035ec 	.word	0x200035ec
 8017654:	2000354c 	.word	0x2000354c
 8017658:	0801c708 	.word	0x0801c708

0801765c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801765c:	b480      	push	{r7}
 801765e:	b085      	sub	sp, #20
 8017660:	af00      	add	r7, sp, #0
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	60b9      	str	r1, [r7, #8]
 8017666:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8017668:	68fb      	ldr	r3, [r7, #12]
 801766a:	3b04      	subs	r3, #4
 801766c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8017674:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	3b04      	subs	r3, #4
 801767a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801767c:	68bb      	ldr	r3, [r7, #8]
 801767e:	f023 0201 	bic.w	r2, r3, #1
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	3b04      	subs	r3, #4
 801768a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801768c:	4a0c      	ldr	r2, [pc, #48]	; (80176c0 <pxPortInitialiseStack+0x64>)
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	3b14      	subs	r3, #20
 8017696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8017698:	687a      	ldr	r2, [r7, #4]
 801769a:	68fb      	ldr	r3, [r7, #12]
 801769c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	3b04      	subs	r3, #4
 80176a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	f06f 0202 	mvn.w	r2, #2
 80176aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	3b20      	subs	r3, #32
 80176b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80176b2:	68fb      	ldr	r3, [r7, #12]
}
 80176b4:	4618      	mov	r0, r3
 80176b6:	3714      	adds	r7, #20
 80176b8:	46bd      	mov	sp, r7
 80176ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176be:	4770      	bx	lr
 80176c0:	080176c5 	.word	0x080176c5

080176c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80176c4:	b480      	push	{r7}
 80176c6:	b085      	sub	sp, #20
 80176c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80176ca:	2300      	movs	r3, #0
 80176cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80176ce:	4b12      	ldr	r3, [pc, #72]	; (8017718 <prvTaskExitError+0x54>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80176d6:	d00a      	beq.n	80176ee <prvTaskExitError+0x2a>
	__asm volatile
 80176d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176dc:	f383 8811 	msr	BASEPRI, r3
 80176e0:	f3bf 8f6f 	isb	sy
 80176e4:	f3bf 8f4f 	dsb	sy
 80176e8:	60fb      	str	r3, [r7, #12]
}
 80176ea:	bf00      	nop
 80176ec:	e7fe      	b.n	80176ec <prvTaskExitError+0x28>
	__asm volatile
 80176ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f2:	f383 8811 	msr	BASEPRI, r3
 80176f6:	f3bf 8f6f 	isb	sy
 80176fa:	f3bf 8f4f 	dsb	sy
 80176fe:	60bb      	str	r3, [r7, #8]
}
 8017700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017702:	bf00      	nop
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d0fc      	beq.n	8017704 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801770a:	bf00      	nop
 801770c:	bf00      	nop
 801770e:	3714      	adds	r7, #20
 8017710:	46bd      	mov	sp, r7
 8017712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017716:	4770      	bx	lr
 8017718:	200001f4 	.word	0x200001f4
 801771c:	00000000 	.word	0x00000000

08017720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017720:	4b07      	ldr	r3, [pc, #28]	; (8017740 <pxCurrentTCBConst2>)
 8017722:	6819      	ldr	r1, [r3, #0]
 8017724:	6808      	ldr	r0, [r1, #0]
 8017726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801772a:	f380 8809 	msr	PSP, r0
 801772e:	f3bf 8f6f 	isb	sy
 8017732:	f04f 0000 	mov.w	r0, #0
 8017736:	f380 8811 	msr	BASEPRI, r0
 801773a:	4770      	bx	lr
 801773c:	f3af 8000 	nop.w

08017740 <pxCurrentTCBConst2>:
 8017740:	20003008 	.word	0x20003008
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017744:	bf00      	nop
 8017746:	bf00      	nop

08017748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017748:	4808      	ldr	r0, [pc, #32]	; (801776c <prvPortStartFirstTask+0x24>)
 801774a:	6800      	ldr	r0, [r0, #0]
 801774c:	6800      	ldr	r0, [r0, #0]
 801774e:	f380 8808 	msr	MSP, r0
 8017752:	f04f 0000 	mov.w	r0, #0
 8017756:	f380 8814 	msr	CONTROL, r0
 801775a:	b662      	cpsie	i
 801775c:	b661      	cpsie	f
 801775e:	f3bf 8f4f 	dsb	sy
 8017762:	f3bf 8f6f 	isb	sy
 8017766:	df00      	svc	0
 8017768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801776a:	bf00      	nop
 801776c:	e000ed08 	.word	0xe000ed08

08017770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8017770:	b580      	push	{r7, lr}
 8017772:	b086      	sub	sp, #24
 8017774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8017776:	4b46      	ldr	r3, [pc, #280]	; (8017890 <xPortStartScheduler+0x120>)
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	4a46      	ldr	r2, [pc, #280]	; (8017894 <xPortStartScheduler+0x124>)
 801777c:	4293      	cmp	r3, r2
 801777e:	d10a      	bne.n	8017796 <xPortStartScheduler+0x26>
	__asm volatile
 8017780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017784:	f383 8811 	msr	BASEPRI, r3
 8017788:	f3bf 8f6f 	isb	sy
 801778c:	f3bf 8f4f 	dsb	sy
 8017790:	613b      	str	r3, [r7, #16]
}
 8017792:	bf00      	nop
 8017794:	e7fe      	b.n	8017794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8017796:	4b3e      	ldr	r3, [pc, #248]	; (8017890 <xPortStartScheduler+0x120>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	4a3f      	ldr	r2, [pc, #252]	; (8017898 <xPortStartScheduler+0x128>)
 801779c:	4293      	cmp	r3, r2
 801779e:	d10a      	bne.n	80177b6 <xPortStartScheduler+0x46>
	__asm volatile
 80177a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a4:	f383 8811 	msr	BASEPRI, r3
 80177a8:	f3bf 8f6f 	isb	sy
 80177ac:	f3bf 8f4f 	dsb	sy
 80177b0:	60fb      	str	r3, [r7, #12]
}
 80177b2:	bf00      	nop
 80177b4:	e7fe      	b.n	80177b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80177b6:	4b39      	ldr	r3, [pc, #228]	; (801789c <xPortStartScheduler+0x12c>)
 80177b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80177ba:	697b      	ldr	r3, [r7, #20]
 80177bc:	781b      	ldrb	r3, [r3, #0]
 80177be:	b2db      	uxtb	r3, r3
 80177c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80177c2:	697b      	ldr	r3, [r7, #20]
 80177c4:	22ff      	movs	r2, #255	; 0xff
 80177c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80177d0:	78fb      	ldrb	r3, [r7, #3]
 80177d2:	b2db      	uxtb	r3, r3
 80177d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80177d8:	b2da      	uxtb	r2, r3
 80177da:	4b31      	ldr	r3, [pc, #196]	; (80178a0 <xPortStartScheduler+0x130>)
 80177dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80177de:	4b31      	ldr	r3, [pc, #196]	; (80178a4 <xPortStartScheduler+0x134>)
 80177e0:	2207      	movs	r2, #7
 80177e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80177e4:	e009      	b.n	80177fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80177e6:	4b2f      	ldr	r3, [pc, #188]	; (80178a4 <xPortStartScheduler+0x134>)
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	3b01      	subs	r3, #1
 80177ec:	4a2d      	ldr	r2, [pc, #180]	; (80178a4 <xPortStartScheduler+0x134>)
 80177ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80177f0:	78fb      	ldrb	r3, [r7, #3]
 80177f2:	b2db      	uxtb	r3, r3
 80177f4:	005b      	lsls	r3, r3, #1
 80177f6:	b2db      	uxtb	r3, r3
 80177f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80177fa:	78fb      	ldrb	r3, [r7, #3]
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017802:	2b80      	cmp	r3, #128	; 0x80
 8017804:	d0ef      	beq.n	80177e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8017806:	4b27      	ldr	r3, [pc, #156]	; (80178a4 <xPortStartScheduler+0x134>)
 8017808:	681b      	ldr	r3, [r3, #0]
 801780a:	f1c3 0307 	rsb	r3, r3, #7
 801780e:	2b04      	cmp	r3, #4
 8017810:	d00a      	beq.n	8017828 <xPortStartScheduler+0xb8>
	__asm volatile
 8017812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017816:	f383 8811 	msr	BASEPRI, r3
 801781a:	f3bf 8f6f 	isb	sy
 801781e:	f3bf 8f4f 	dsb	sy
 8017822:	60bb      	str	r3, [r7, #8]
}
 8017824:	bf00      	nop
 8017826:	e7fe      	b.n	8017826 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8017828:	4b1e      	ldr	r3, [pc, #120]	; (80178a4 <xPortStartScheduler+0x134>)
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	021b      	lsls	r3, r3, #8
 801782e:	4a1d      	ldr	r2, [pc, #116]	; (80178a4 <xPortStartScheduler+0x134>)
 8017830:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017832:	4b1c      	ldr	r3, [pc, #112]	; (80178a4 <xPortStartScheduler+0x134>)
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801783a:	4a1a      	ldr	r2, [pc, #104]	; (80178a4 <xPortStartScheduler+0x134>)
 801783c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	b2da      	uxtb	r2, r3
 8017842:	697b      	ldr	r3, [r7, #20]
 8017844:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8017846:	4b18      	ldr	r3, [pc, #96]	; (80178a8 <xPortStartScheduler+0x138>)
 8017848:	681b      	ldr	r3, [r3, #0]
 801784a:	4a17      	ldr	r2, [pc, #92]	; (80178a8 <xPortStartScheduler+0x138>)
 801784c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017850:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8017852:	4b15      	ldr	r3, [pc, #84]	; (80178a8 <xPortStartScheduler+0x138>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	4a14      	ldr	r2, [pc, #80]	; (80178a8 <xPortStartScheduler+0x138>)
 8017858:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801785c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801785e:	f000 f8dd 	bl	8017a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8017862:	4b12      	ldr	r3, [pc, #72]	; (80178ac <xPortStartScheduler+0x13c>)
 8017864:	2200      	movs	r2, #0
 8017866:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8017868:	f000 f8fc 	bl	8017a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801786c:	4b10      	ldr	r3, [pc, #64]	; (80178b0 <xPortStartScheduler+0x140>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4a0f      	ldr	r2, [pc, #60]	; (80178b0 <xPortStartScheduler+0x140>)
 8017872:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017876:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8017878:	f7ff ff66 	bl	8017748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801787c:	f7fe fd1a 	bl	80162b4 <vTaskSwitchContext>
	prvTaskExitError();
 8017880:	f7ff ff20 	bl	80176c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8017884:	2300      	movs	r3, #0
}
 8017886:	4618      	mov	r0, r3
 8017888:	3718      	adds	r7, #24
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}
 801788e:	bf00      	nop
 8017890:	e000ed00 	.word	0xe000ed00
 8017894:	410fc271 	.word	0x410fc271
 8017898:	410fc270 	.word	0x410fc270
 801789c:	e000e400 	.word	0xe000e400
 80178a0:	2000363c 	.word	0x2000363c
 80178a4:	20003640 	.word	0x20003640
 80178a8:	e000ed20 	.word	0xe000ed20
 80178ac:	200001f4 	.word	0x200001f4
 80178b0:	e000ef34 	.word	0xe000ef34

080178b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80178b4:	b480      	push	{r7}
 80178b6:	b083      	sub	sp, #12
 80178b8:	af00      	add	r7, sp, #0
	__asm volatile
 80178ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178be:	f383 8811 	msr	BASEPRI, r3
 80178c2:	f3bf 8f6f 	isb	sy
 80178c6:	f3bf 8f4f 	dsb	sy
 80178ca:	607b      	str	r3, [r7, #4]
}
 80178cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80178ce:	4b0f      	ldr	r3, [pc, #60]	; (801790c <vPortEnterCritical+0x58>)
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	3301      	adds	r3, #1
 80178d4:	4a0d      	ldr	r2, [pc, #52]	; (801790c <vPortEnterCritical+0x58>)
 80178d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80178d8:	4b0c      	ldr	r3, [pc, #48]	; (801790c <vPortEnterCritical+0x58>)
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	2b01      	cmp	r3, #1
 80178de:	d10f      	bne.n	8017900 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80178e0:	4b0b      	ldr	r3, [pc, #44]	; (8017910 <vPortEnterCritical+0x5c>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	b2db      	uxtb	r3, r3
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d00a      	beq.n	8017900 <vPortEnterCritical+0x4c>
	__asm volatile
 80178ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178ee:	f383 8811 	msr	BASEPRI, r3
 80178f2:	f3bf 8f6f 	isb	sy
 80178f6:	f3bf 8f4f 	dsb	sy
 80178fa:	603b      	str	r3, [r7, #0]
}
 80178fc:	bf00      	nop
 80178fe:	e7fe      	b.n	80178fe <vPortEnterCritical+0x4a>
	}
}
 8017900:	bf00      	nop
 8017902:	370c      	adds	r7, #12
 8017904:	46bd      	mov	sp, r7
 8017906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801790a:	4770      	bx	lr
 801790c:	200001f4 	.word	0x200001f4
 8017910:	e000ed04 	.word	0xe000ed04

08017914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8017914:	b480      	push	{r7}
 8017916:	b083      	sub	sp, #12
 8017918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801791a:	4b12      	ldr	r3, [pc, #72]	; (8017964 <vPortExitCritical+0x50>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d10a      	bne.n	8017938 <vPortExitCritical+0x24>
	__asm volatile
 8017922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017926:	f383 8811 	msr	BASEPRI, r3
 801792a:	f3bf 8f6f 	isb	sy
 801792e:	f3bf 8f4f 	dsb	sy
 8017932:	607b      	str	r3, [r7, #4]
}
 8017934:	bf00      	nop
 8017936:	e7fe      	b.n	8017936 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017938:	4b0a      	ldr	r3, [pc, #40]	; (8017964 <vPortExitCritical+0x50>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	3b01      	subs	r3, #1
 801793e:	4a09      	ldr	r2, [pc, #36]	; (8017964 <vPortExitCritical+0x50>)
 8017940:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017942:	4b08      	ldr	r3, [pc, #32]	; (8017964 <vPortExitCritical+0x50>)
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d105      	bne.n	8017956 <vPortExitCritical+0x42>
 801794a:	2300      	movs	r3, #0
 801794c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801794e:	683b      	ldr	r3, [r7, #0]
 8017950:	f383 8811 	msr	BASEPRI, r3
}
 8017954:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8017956:	bf00      	nop
 8017958:	370c      	adds	r7, #12
 801795a:	46bd      	mov	sp, r7
 801795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017960:	4770      	bx	lr
 8017962:	bf00      	nop
 8017964:	200001f4 	.word	0x200001f4
	...

08017970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8017970:	f3ef 8009 	mrs	r0, PSP
 8017974:	f3bf 8f6f 	isb	sy
 8017978:	4b15      	ldr	r3, [pc, #84]	; (80179d0 <pxCurrentTCBConst>)
 801797a:	681a      	ldr	r2, [r3, #0]
 801797c:	f01e 0f10 	tst.w	lr, #16
 8017980:	bf08      	it	eq
 8017982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8017986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801798a:	6010      	str	r0, [r2, #0]
 801798c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8017990:	f04f 0050 	mov.w	r0, #80	; 0x50
 8017994:	f380 8811 	msr	BASEPRI, r0
 8017998:	f3bf 8f4f 	dsb	sy
 801799c:	f3bf 8f6f 	isb	sy
 80179a0:	f7fe fc88 	bl	80162b4 <vTaskSwitchContext>
 80179a4:	f04f 0000 	mov.w	r0, #0
 80179a8:	f380 8811 	msr	BASEPRI, r0
 80179ac:	bc09      	pop	{r0, r3}
 80179ae:	6819      	ldr	r1, [r3, #0]
 80179b0:	6808      	ldr	r0, [r1, #0]
 80179b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179b6:	f01e 0f10 	tst.w	lr, #16
 80179ba:	bf08      	it	eq
 80179bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80179c0:	f380 8809 	msr	PSP, r0
 80179c4:	f3bf 8f6f 	isb	sy
 80179c8:	4770      	bx	lr
 80179ca:	bf00      	nop
 80179cc:	f3af 8000 	nop.w

080179d0 <pxCurrentTCBConst>:
 80179d0:	20003008 	.word	0x20003008
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80179d4:	bf00      	nop
 80179d6:	bf00      	nop

080179d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
	__asm volatile
 80179de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80179e2:	f383 8811 	msr	BASEPRI, r3
 80179e6:	f3bf 8f6f 	isb	sy
 80179ea:	f3bf 8f4f 	dsb	sy
 80179ee:	607b      	str	r3, [r7, #4]
}
 80179f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80179f2:	f7fe fba5 	bl	8016140 <xTaskIncrementTick>
 80179f6:	4603      	mov	r3, r0
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d003      	beq.n	8017a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80179fc:	4b06      	ldr	r3, [pc, #24]	; (8017a18 <xPortSysTickHandler+0x40>)
 80179fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017a02:	601a      	str	r2, [r3, #0]
 8017a04:	2300      	movs	r3, #0
 8017a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017a08:	683b      	ldr	r3, [r7, #0]
 8017a0a:	f383 8811 	msr	BASEPRI, r3
}
 8017a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017a10:	bf00      	nop
 8017a12:	3708      	adds	r7, #8
 8017a14:	46bd      	mov	sp, r7
 8017a16:	bd80      	pop	{r7, pc}
 8017a18:	e000ed04 	.word	0xe000ed04

08017a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8017a1c:	b480      	push	{r7}
 8017a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017a20:	4b0b      	ldr	r3, [pc, #44]	; (8017a50 <vPortSetupTimerInterrupt+0x34>)
 8017a22:	2200      	movs	r2, #0
 8017a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017a26:	4b0b      	ldr	r3, [pc, #44]	; (8017a54 <vPortSetupTimerInterrupt+0x38>)
 8017a28:	2200      	movs	r2, #0
 8017a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017a2c:	4b0a      	ldr	r3, [pc, #40]	; (8017a58 <vPortSetupTimerInterrupt+0x3c>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	4a0a      	ldr	r2, [pc, #40]	; (8017a5c <vPortSetupTimerInterrupt+0x40>)
 8017a32:	fba2 2303 	umull	r2, r3, r2, r3
 8017a36:	099b      	lsrs	r3, r3, #6
 8017a38:	4a09      	ldr	r2, [pc, #36]	; (8017a60 <vPortSetupTimerInterrupt+0x44>)
 8017a3a:	3b01      	subs	r3, #1
 8017a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017a3e:	4b04      	ldr	r3, [pc, #16]	; (8017a50 <vPortSetupTimerInterrupt+0x34>)
 8017a40:	2207      	movs	r2, #7
 8017a42:	601a      	str	r2, [r3, #0]
}
 8017a44:	bf00      	nop
 8017a46:	46bd      	mov	sp, r7
 8017a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a4c:	4770      	bx	lr
 8017a4e:	bf00      	nop
 8017a50:	e000e010 	.word	0xe000e010
 8017a54:	e000e018 	.word	0xe000e018
 8017a58:	20000030 	.word	0x20000030
 8017a5c:	10624dd3 	.word	0x10624dd3
 8017a60:	e000e014 	.word	0xe000e014

08017a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8017a64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8017a74 <vPortEnableVFP+0x10>
 8017a68:	6801      	ldr	r1, [r0, #0]
 8017a6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017a6e:	6001      	str	r1, [r0, #0]
 8017a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8017a72:	bf00      	nop
 8017a74:	e000ed88 	.word	0xe000ed88

08017a78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8017a78:	b480      	push	{r7}
 8017a7a:	b085      	sub	sp, #20
 8017a7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017a7e:	f3ef 8305 	mrs	r3, IPSR
 8017a82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017a84:	68fb      	ldr	r3, [r7, #12]
 8017a86:	2b0f      	cmp	r3, #15
 8017a88:	d914      	bls.n	8017ab4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017a8a:	4a17      	ldr	r2, [pc, #92]	; (8017ae8 <vPortValidateInterruptPriority+0x70>)
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	4413      	add	r3, r2
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8017a94:	4b15      	ldr	r3, [pc, #84]	; (8017aec <vPortValidateInterruptPriority+0x74>)
 8017a96:	781b      	ldrb	r3, [r3, #0]
 8017a98:	7afa      	ldrb	r2, [r7, #11]
 8017a9a:	429a      	cmp	r2, r3
 8017a9c:	d20a      	bcs.n	8017ab4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8017a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aa2:	f383 8811 	msr	BASEPRI, r3
 8017aa6:	f3bf 8f6f 	isb	sy
 8017aaa:	f3bf 8f4f 	dsb	sy
 8017aae:	607b      	str	r3, [r7, #4]
}
 8017ab0:	bf00      	nop
 8017ab2:	e7fe      	b.n	8017ab2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017ab4:	4b0e      	ldr	r3, [pc, #56]	; (8017af0 <vPortValidateInterruptPriority+0x78>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8017abc:	4b0d      	ldr	r3, [pc, #52]	; (8017af4 <vPortValidateInterruptPriority+0x7c>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	429a      	cmp	r2, r3
 8017ac2:	d90a      	bls.n	8017ada <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8017ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ac8:	f383 8811 	msr	BASEPRI, r3
 8017acc:	f3bf 8f6f 	isb	sy
 8017ad0:	f3bf 8f4f 	dsb	sy
 8017ad4:	603b      	str	r3, [r7, #0]
}
 8017ad6:	bf00      	nop
 8017ad8:	e7fe      	b.n	8017ad8 <vPortValidateInterruptPriority+0x60>
	}
 8017ada:	bf00      	nop
 8017adc:	3714      	adds	r7, #20
 8017ade:	46bd      	mov	sp, r7
 8017ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ae4:	4770      	bx	lr
 8017ae6:	bf00      	nop
 8017ae8:	e000e3f0 	.word	0xe000e3f0
 8017aec:	2000363c 	.word	0x2000363c
 8017af0:	e000ed0c 	.word	0xe000ed0c
 8017af4:	20003640 	.word	0x20003640

08017af8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b08a      	sub	sp, #40	; 0x28
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017b00:	2300      	movs	r3, #0
 8017b02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017b04:	f7fe f9d0 	bl	8015ea8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8017b08:	4b5b      	ldr	r3, [pc, #364]	; (8017c78 <pvPortMalloc+0x180>)
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d101      	bne.n	8017b14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017b10:	f000 f92c 	bl	8017d6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017b14:	4b59      	ldr	r3, [pc, #356]	; (8017c7c <pvPortMalloc+0x184>)
 8017b16:	681a      	ldr	r2, [r3, #0]
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	4013      	ands	r3, r2
 8017b1c:	2b00      	cmp	r3, #0
 8017b1e:	f040 8093 	bne.w	8017c48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d01d      	beq.n	8017b64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8017b28:	2208      	movs	r2, #8
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	4413      	add	r3, r2
 8017b2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f003 0307 	and.w	r3, r3, #7
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d014      	beq.n	8017b64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	f023 0307 	bic.w	r3, r3, #7
 8017b40:	3308      	adds	r3, #8
 8017b42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f003 0307 	and.w	r3, r3, #7
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d00a      	beq.n	8017b64 <pvPortMalloc+0x6c>
	__asm volatile
 8017b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b52:	f383 8811 	msr	BASEPRI, r3
 8017b56:	f3bf 8f6f 	isb	sy
 8017b5a:	f3bf 8f4f 	dsb	sy
 8017b5e:	617b      	str	r3, [r7, #20]
}
 8017b60:	bf00      	nop
 8017b62:	e7fe      	b.n	8017b62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d06e      	beq.n	8017c48 <pvPortMalloc+0x150>
 8017b6a:	4b45      	ldr	r3, [pc, #276]	; (8017c80 <pvPortMalloc+0x188>)
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	687a      	ldr	r2, [r7, #4]
 8017b70:	429a      	cmp	r2, r3
 8017b72:	d869      	bhi.n	8017c48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8017b74:	4b43      	ldr	r3, [pc, #268]	; (8017c84 <pvPortMalloc+0x18c>)
 8017b76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8017b78:	4b42      	ldr	r3, [pc, #264]	; (8017c84 <pvPortMalloc+0x18c>)
 8017b7a:	681b      	ldr	r3, [r3, #0]
 8017b7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017b7e:	e004      	b.n	8017b8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8017b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8017b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b8c:	685b      	ldr	r3, [r3, #4]
 8017b8e:	687a      	ldr	r2, [r7, #4]
 8017b90:	429a      	cmp	r2, r3
 8017b92:	d903      	bls.n	8017b9c <pvPortMalloc+0xa4>
 8017b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b96:	681b      	ldr	r3, [r3, #0]
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d1f1      	bne.n	8017b80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8017b9c:	4b36      	ldr	r3, [pc, #216]	; (8017c78 <pvPortMalloc+0x180>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d050      	beq.n	8017c48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8017ba6:	6a3b      	ldr	r3, [r7, #32]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	2208      	movs	r2, #8
 8017bac:	4413      	add	r3, r2
 8017bae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bb2:	681a      	ldr	r2, [r3, #0]
 8017bb4:	6a3b      	ldr	r3, [r7, #32]
 8017bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bba:	685a      	ldr	r2, [r3, #4]
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	1ad2      	subs	r2, r2, r3
 8017bc0:	2308      	movs	r3, #8
 8017bc2:	005b      	lsls	r3, r3, #1
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	d91f      	bls.n	8017c08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8017bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	4413      	add	r3, r2
 8017bce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017bd0:	69bb      	ldr	r3, [r7, #24]
 8017bd2:	f003 0307 	and.w	r3, r3, #7
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d00a      	beq.n	8017bf0 <pvPortMalloc+0xf8>
	__asm volatile
 8017bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bde:	f383 8811 	msr	BASEPRI, r3
 8017be2:	f3bf 8f6f 	isb	sy
 8017be6:	f3bf 8f4f 	dsb	sy
 8017bea:	613b      	str	r3, [r7, #16]
}
 8017bec:	bf00      	nop
 8017bee:	e7fe      	b.n	8017bee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf2:	685a      	ldr	r2, [r3, #4]
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	1ad2      	subs	r2, r2, r3
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bfe:	687a      	ldr	r2, [r7, #4]
 8017c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8017c02:	69b8      	ldr	r0, [r7, #24]
 8017c04:	f000 f914 	bl	8017e30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017c08:	4b1d      	ldr	r3, [pc, #116]	; (8017c80 <pvPortMalloc+0x188>)
 8017c0a:	681a      	ldr	r2, [r3, #0]
 8017c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c0e:	685b      	ldr	r3, [r3, #4]
 8017c10:	1ad3      	subs	r3, r2, r3
 8017c12:	4a1b      	ldr	r2, [pc, #108]	; (8017c80 <pvPortMalloc+0x188>)
 8017c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017c16:	4b1a      	ldr	r3, [pc, #104]	; (8017c80 <pvPortMalloc+0x188>)
 8017c18:	681a      	ldr	r2, [r3, #0]
 8017c1a:	4b1b      	ldr	r3, [pc, #108]	; (8017c88 <pvPortMalloc+0x190>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d203      	bcs.n	8017c2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8017c22:	4b17      	ldr	r3, [pc, #92]	; (8017c80 <pvPortMalloc+0x188>)
 8017c24:	681b      	ldr	r3, [r3, #0]
 8017c26:	4a18      	ldr	r2, [pc, #96]	; (8017c88 <pvPortMalloc+0x190>)
 8017c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c2c:	685a      	ldr	r2, [r3, #4]
 8017c2e:	4b13      	ldr	r3, [pc, #76]	; (8017c7c <pvPortMalloc+0x184>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	431a      	orrs	r2, r3
 8017c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017c3e:	4b13      	ldr	r3, [pc, #76]	; (8017c8c <pvPortMalloc+0x194>)
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	3301      	adds	r3, #1
 8017c44:	4a11      	ldr	r2, [pc, #68]	; (8017c8c <pvPortMalloc+0x194>)
 8017c46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8017c48:	f7fe f93c 	bl	8015ec4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8017c4c:	69fb      	ldr	r3, [r7, #28]
 8017c4e:	f003 0307 	and.w	r3, r3, #7
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d00a      	beq.n	8017c6c <pvPortMalloc+0x174>
	__asm volatile
 8017c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c5a:	f383 8811 	msr	BASEPRI, r3
 8017c5e:	f3bf 8f6f 	isb	sy
 8017c62:	f3bf 8f4f 	dsb	sy
 8017c66:	60fb      	str	r3, [r7, #12]
}
 8017c68:	bf00      	nop
 8017c6a:	e7fe      	b.n	8017c6a <pvPortMalloc+0x172>
	return pvReturn;
 8017c6c:	69fb      	ldr	r3, [r7, #28]
}
 8017c6e:	4618      	mov	r0, r3
 8017c70:	3728      	adds	r7, #40	; 0x28
 8017c72:	46bd      	mov	sp, r7
 8017c74:	bd80      	pop	{r7, pc}
 8017c76:	bf00      	nop
 8017c78:	200074cc 	.word	0x200074cc
 8017c7c:	200074e0 	.word	0x200074e0
 8017c80:	200074d0 	.word	0x200074d0
 8017c84:	200074c4 	.word	0x200074c4
 8017c88:	200074d4 	.word	0x200074d4
 8017c8c:	200074d8 	.word	0x200074d8

08017c90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b086      	sub	sp, #24
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	2b00      	cmp	r3, #0
 8017ca0:	d04d      	beq.n	8017d3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8017ca2:	2308      	movs	r3, #8
 8017ca4:	425b      	negs	r3, r3
 8017ca6:	697a      	ldr	r2, [r7, #20]
 8017ca8:	4413      	add	r3, r2
 8017caa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017cac:	697b      	ldr	r3, [r7, #20]
 8017cae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017cb0:	693b      	ldr	r3, [r7, #16]
 8017cb2:	685a      	ldr	r2, [r3, #4]
 8017cb4:	4b24      	ldr	r3, [pc, #144]	; (8017d48 <vPortFree+0xb8>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	4013      	ands	r3, r2
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d10a      	bne.n	8017cd4 <vPortFree+0x44>
	__asm volatile
 8017cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc2:	f383 8811 	msr	BASEPRI, r3
 8017cc6:	f3bf 8f6f 	isb	sy
 8017cca:	f3bf 8f4f 	dsb	sy
 8017cce:	60fb      	str	r3, [r7, #12]
}
 8017cd0:	bf00      	nop
 8017cd2:	e7fe      	b.n	8017cd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8017cd4:	693b      	ldr	r3, [r7, #16]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d00a      	beq.n	8017cf2 <vPortFree+0x62>
	__asm volatile
 8017cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce0:	f383 8811 	msr	BASEPRI, r3
 8017ce4:	f3bf 8f6f 	isb	sy
 8017ce8:	f3bf 8f4f 	dsb	sy
 8017cec:	60bb      	str	r3, [r7, #8]
}
 8017cee:	bf00      	nop
 8017cf0:	e7fe      	b.n	8017cf0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8017cf2:	693b      	ldr	r3, [r7, #16]
 8017cf4:	685a      	ldr	r2, [r3, #4]
 8017cf6:	4b14      	ldr	r3, [pc, #80]	; (8017d48 <vPortFree+0xb8>)
 8017cf8:	681b      	ldr	r3, [r3, #0]
 8017cfa:	4013      	ands	r3, r2
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d01e      	beq.n	8017d3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8017d00:	693b      	ldr	r3, [r7, #16]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d11a      	bne.n	8017d3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017d08:	693b      	ldr	r3, [r7, #16]
 8017d0a:	685a      	ldr	r2, [r3, #4]
 8017d0c:	4b0e      	ldr	r3, [pc, #56]	; (8017d48 <vPortFree+0xb8>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	43db      	mvns	r3, r3
 8017d12:	401a      	ands	r2, r3
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017d18:	f7fe f8c6 	bl	8015ea8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017d1c:	693b      	ldr	r3, [r7, #16]
 8017d1e:	685a      	ldr	r2, [r3, #4]
 8017d20:	4b0a      	ldr	r3, [pc, #40]	; (8017d4c <vPortFree+0xbc>)
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	4413      	add	r3, r2
 8017d26:	4a09      	ldr	r2, [pc, #36]	; (8017d4c <vPortFree+0xbc>)
 8017d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017d2a:	6938      	ldr	r0, [r7, #16]
 8017d2c:	f000 f880 	bl	8017e30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8017d30:	4b07      	ldr	r3, [pc, #28]	; (8017d50 <vPortFree+0xc0>)
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	3301      	adds	r3, #1
 8017d36:	4a06      	ldr	r2, [pc, #24]	; (8017d50 <vPortFree+0xc0>)
 8017d38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017d3a:	f7fe f8c3 	bl	8015ec4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8017d3e:	bf00      	nop
 8017d40:	3718      	adds	r7, #24
 8017d42:	46bd      	mov	sp, r7
 8017d44:	bd80      	pop	{r7, pc}
 8017d46:	bf00      	nop
 8017d48:	200074e0 	.word	0x200074e0
 8017d4c:	200074d0 	.word	0x200074d0
 8017d50:	200074dc 	.word	0x200074dc

08017d54 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8017d54:	b480      	push	{r7}
 8017d56:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8017d58:	4b03      	ldr	r3, [pc, #12]	; (8017d68 <xPortGetFreeHeapSize+0x14>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
}
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	200074d0 	.word	0x200074d0

08017d6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017d6c:	b480      	push	{r7}
 8017d6e:	b085      	sub	sp, #20
 8017d70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017d72:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8017d76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8017d78:	4b27      	ldr	r3, [pc, #156]	; (8017e18 <prvHeapInit+0xac>)
 8017d7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	f003 0307 	and.w	r3, r3, #7
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d00c      	beq.n	8017da0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	3307      	adds	r3, #7
 8017d8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	f023 0307 	bic.w	r3, r3, #7
 8017d92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017d94:	68ba      	ldr	r2, [r7, #8]
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	1ad3      	subs	r3, r2, r3
 8017d9a:	4a1f      	ldr	r2, [pc, #124]	; (8017e18 <prvHeapInit+0xac>)
 8017d9c:	4413      	add	r3, r2
 8017d9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017da4:	4a1d      	ldr	r2, [pc, #116]	; (8017e1c <prvHeapInit+0xb0>)
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8017daa:	4b1c      	ldr	r3, [pc, #112]	; (8017e1c <prvHeapInit+0xb0>)
 8017dac:	2200      	movs	r2, #0
 8017dae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	68ba      	ldr	r2, [r7, #8]
 8017db4:	4413      	add	r3, r2
 8017db6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8017db8:	2208      	movs	r2, #8
 8017dba:	68fb      	ldr	r3, [r7, #12]
 8017dbc:	1a9b      	subs	r3, r3, r2
 8017dbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f023 0307 	bic.w	r3, r3, #7
 8017dc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	4a15      	ldr	r2, [pc, #84]	; (8017e20 <prvHeapInit+0xb4>)
 8017dcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017dce:	4b14      	ldr	r3, [pc, #80]	; (8017e20 <prvHeapInit+0xb4>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2200      	movs	r2, #0
 8017dd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8017dd6:	4b12      	ldr	r3, [pc, #72]	; (8017e20 <prvHeapInit+0xb4>)
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	2200      	movs	r2, #0
 8017ddc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017de2:	683b      	ldr	r3, [r7, #0]
 8017de4:	68fa      	ldr	r2, [r7, #12]
 8017de6:	1ad2      	subs	r2, r2, r3
 8017de8:	683b      	ldr	r3, [r7, #0]
 8017dea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017dec:	4b0c      	ldr	r3, [pc, #48]	; (8017e20 <prvHeapInit+0xb4>)
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	683b      	ldr	r3, [r7, #0]
 8017df2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017df4:	683b      	ldr	r3, [r7, #0]
 8017df6:	685b      	ldr	r3, [r3, #4]
 8017df8:	4a0a      	ldr	r2, [pc, #40]	; (8017e24 <prvHeapInit+0xb8>)
 8017dfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017dfc:	683b      	ldr	r3, [r7, #0]
 8017dfe:	685b      	ldr	r3, [r3, #4]
 8017e00:	4a09      	ldr	r2, [pc, #36]	; (8017e28 <prvHeapInit+0xbc>)
 8017e02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017e04:	4b09      	ldr	r3, [pc, #36]	; (8017e2c <prvHeapInit+0xc0>)
 8017e06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017e0a:	601a      	str	r2, [r3, #0]
}
 8017e0c:	bf00      	nop
 8017e0e:	3714      	adds	r7, #20
 8017e10:	46bd      	mov	sp, r7
 8017e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e16:	4770      	bx	lr
 8017e18:	20003644 	.word	0x20003644
 8017e1c:	200074c4 	.word	0x200074c4
 8017e20:	200074cc 	.word	0x200074cc
 8017e24:	200074d4 	.word	0x200074d4
 8017e28:	200074d0 	.word	0x200074d0
 8017e2c:	200074e0 	.word	0x200074e0

08017e30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017e30:	b480      	push	{r7}
 8017e32:	b085      	sub	sp, #20
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017e38:	4b28      	ldr	r3, [pc, #160]	; (8017edc <prvInsertBlockIntoFreeList+0xac>)
 8017e3a:	60fb      	str	r3, [r7, #12]
 8017e3c:	e002      	b.n	8017e44 <prvInsertBlockIntoFreeList+0x14>
 8017e3e:	68fb      	ldr	r3, [r7, #12]
 8017e40:	681b      	ldr	r3, [r3, #0]
 8017e42:	60fb      	str	r3, [r7, #12]
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	687a      	ldr	r2, [r7, #4]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d8f7      	bhi.n	8017e3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	685b      	ldr	r3, [r3, #4]
 8017e56:	68ba      	ldr	r2, [r7, #8]
 8017e58:	4413      	add	r3, r2
 8017e5a:	687a      	ldr	r2, [r7, #4]
 8017e5c:	429a      	cmp	r2, r3
 8017e5e:	d108      	bne.n	8017e72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017e60:	68fb      	ldr	r3, [r7, #12]
 8017e62:	685a      	ldr	r2, [r3, #4]
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	685b      	ldr	r3, [r3, #4]
 8017e68:	441a      	add	r2, r3
 8017e6a:	68fb      	ldr	r3, [r7, #12]
 8017e6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	685b      	ldr	r3, [r3, #4]
 8017e7a:	68ba      	ldr	r2, [r7, #8]
 8017e7c:	441a      	add	r2, r3
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	429a      	cmp	r2, r3
 8017e84:	d118      	bne.n	8017eb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681a      	ldr	r2, [r3, #0]
 8017e8a:	4b15      	ldr	r3, [pc, #84]	; (8017ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	429a      	cmp	r2, r3
 8017e90:	d00d      	beq.n	8017eae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	685a      	ldr	r2, [r3, #4]
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	685b      	ldr	r3, [r3, #4]
 8017e9c:	441a      	add	r2, r3
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	681b      	ldr	r3, [r3, #0]
 8017ea6:	681a      	ldr	r2, [r3, #0]
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	601a      	str	r2, [r3, #0]
 8017eac:	e008      	b.n	8017ec0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017eae:	4b0c      	ldr	r3, [pc, #48]	; (8017ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8017eb0:	681a      	ldr	r2, [r3, #0]
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	601a      	str	r2, [r3, #0]
 8017eb6:	e003      	b.n	8017ec0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681a      	ldr	r2, [r3, #0]
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017ec0:	68fa      	ldr	r2, [r7, #12]
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d002      	beq.n	8017ece <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	687a      	ldr	r2, [r7, #4]
 8017ecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017ece:	bf00      	nop
 8017ed0:	3714      	adds	r7, #20
 8017ed2:	46bd      	mov	sp, r7
 8017ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed8:	4770      	bx	lr
 8017eda:	bf00      	nop
 8017edc:	200074c4 	.word	0x200074c4
 8017ee0:	200074cc 	.word	0x200074cc

08017ee4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017ee4:	b580      	push	{r7, lr}
 8017ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017ee8:	2200      	movs	r2, #0
 8017eea:	4912      	ldr	r1, [pc, #72]	; (8017f34 <MX_USB_DEVICE_Init+0x50>)
 8017eec:	4812      	ldr	r0, [pc, #72]	; (8017f38 <MX_USB_DEVICE_Init+0x54>)
 8017eee:	f7f7 fba9 	bl	800f644 <USBD_Init>
 8017ef2:	4603      	mov	r3, r0
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d001      	beq.n	8017efc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017ef8:	f7ec fe6c 	bl	8004bd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017efc:	490f      	ldr	r1, [pc, #60]	; (8017f3c <MX_USB_DEVICE_Init+0x58>)
 8017efe:	480e      	ldr	r0, [pc, #56]	; (8017f38 <MX_USB_DEVICE_Init+0x54>)
 8017f00:	f7f7 fbd0 	bl	800f6a4 <USBD_RegisterClass>
 8017f04:	4603      	mov	r3, r0
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d001      	beq.n	8017f0e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017f0a:	f7ec fe63 	bl	8004bd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017f0e:	490c      	ldr	r1, [pc, #48]	; (8017f40 <MX_USB_DEVICE_Init+0x5c>)
 8017f10:	4809      	ldr	r0, [pc, #36]	; (8017f38 <MX_USB_DEVICE_Init+0x54>)
 8017f12:	f7f7 faf1 	bl	800f4f8 <USBD_CDC_RegisterInterface>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d001      	beq.n	8017f20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017f1c:	f7ec fe5a 	bl	8004bd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017f20:	4805      	ldr	r0, [pc, #20]	; (8017f38 <MX_USB_DEVICE_Init+0x54>)
 8017f22:	f7f7 fbe6 	bl	800f6f2 <USBD_Start>
 8017f26:	4603      	mov	r3, r0
 8017f28:	2b00      	cmp	r3, #0
 8017f2a:	d001      	beq.n	8017f30 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017f2c:	f7ec fe52 	bl	8004bd4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017f30:	bf00      	nop
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	2000020c 	.word	0x2000020c
 8017f38:	20013b20 	.word	0x20013b20
 8017f3c:	200000f0 	.word	0x200000f0
 8017f40:	200001f8 	.word	0x200001f8

08017f44 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017f48:	2200      	movs	r2, #0
 8017f4a:	4905      	ldr	r1, [pc, #20]	; (8017f60 <CDC_Init_FS+0x1c>)
 8017f4c:	4805      	ldr	r0, [pc, #20]	; (8017f64 <CDC_Init_FS+0x20>)
 8017f4e:	f7f7 fae8 	bl	800f522 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017f52:	4905      	ldr	r1, [pc, #20]	; (8017f68 <CDC_Init_FS+0x24>)
 8017f54:	4803      	ldr	r0, [pc, #12]	; (8017f64 <CDC_Init_FS+0x20>)
 8017f56:	f7f7 fb02 	bl	800f55e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017f5a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	bd80      	pop	{r7, pc}
 8017f60:	200145f0 	.word	0x200145f0
 8017f64:	20013b20 	.word	0x20013b20
 8017f68:	20013df0 	.word	0x20013df0

08017f6c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017f6c:	b480      	push	{r7}
 8017f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017f70:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017f72:	4618      	mov	r0, r3
 8017f74:	46bd      	mov	sp, r7
 8017f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7a:	4770      	bx	lr

08017f7c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017f7c:	b480      	push	{r7}
 8017f7e:	b083      	sub	sp, #12
 8017f80:	af00      	add	r7, sp, #0
 8017f82:	4603      	mov	r3, r0
 8017f84:	6039      	str	r1, [r7, #0]
 8017f86:	71fb      	strb	r3, [r7, #7]
 8017f88:	4613      	mov	r3, r2
 8017f8a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017f8c:	79fb      	ldrb	r3, [r7, #7]
 8017f8e:	2b23      	cmp	r3, #35	; 0x23
 8017f90:	d84a      	bhi.n	8018028 <CDC_Control_FS+0xac>
 8017f92:	a201      	add	r2, pc, #4	; (adr r2, 8017f98 <CDC_Control_FS+0x1c>)
 8017f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f98:	08018029 	.word	0x08018029
 8017f9c:	08018029 	.word	0x08018029
 8017fa0:	08018029 	.word	0x08018029
 8017fa4:	08018029 	.word	0x08018029
 8017fa8:	08018029 	.word	0x08018029
 8017fac:	08018029 	.word	0x08018029
 8017fb0:	08018029 	.word	0x08018029
 8017fb4:	08018029 	.word	0x08018029
 8017fb8:	08018029 	.word	0x08018029
 8017fbc:	08018029 	.word	0x08018029
 8017fc0:	08018029 	.word	0x08018029
 8017fc4:	08018029 	.word	0x08018029
 8017fc8:	08018029 	.word	0x08018029
 8017fcc:	08018029 	.word	0x08018029
 8017fd0:	08018029 	.word	0x08018029
 8017fd4:	08018029 	.word	0x08018029
 8017fd8:	08018029 	.word	0x08018029
 8017fdc:	08018029 	.word	0x08018029
 8017fe0:	08018029 	.word	0x08018029
 8017fe4:	08018029 	.word	0x08018029
 8017fe8:	08018029 	.word	0x08018029
 8017fec:	08018029 	.word	0x08018029
 8017ff0:	08018029 	.word	0x08018029
 8017ff4:	08018029 	.word	0x08018029
 8017ff8:	08018029 	.word	0x08018029
 8017ffc:	08018029 	.word	0x08018029
 8018000:	08018029 	.word	0x08018029
 8018004:	08018029 	.word	0x08018029
 8018008:	08018029 	.word	0x08018029
 801800c:	08018029 	.word	0x08018029
 8018010:	08018029 	.word	0x08018029
 8018014:	08018029 	.word	0x08018029
 8018018:	08018029 	.word	0x08018029
 801801c:	08018029 	.word	0x08018029
 8018020:	08018029 	.word	0x08018029
 8018024:	08018029 	.word	0x08018029
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018028:	bf00      	nop
  }

  return (USBD_OK);
 801802a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801802c:	4618      	mov	r0, r3
 801802e:	370c      	adds	r7, #12
 8018030:	46bd      	mov	sp, r7
 8018032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018036:	4770      	bx	lr

08018038 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
 8018040:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8018042:	6879      	ldr	r1, [r7, #4]
 8018044:	4805      	ldr	r0, [pc, #20]	; (801805c <CDC_Receive_FS+0x24>)
 8018046:	f7f7 fa8a 	bl	800f55e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801804a:	4804      	ldr	r0, [pc, #16]	; (801805c <CDC_Receive_FS+0x24>)
 801804c:	f7f7 fad0 	bl	800f5f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018050:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018052:	4618      	mov	r0, r3
 8018054:	3708      	adds	r7, #8
 8018056:	46bd      	mov	sp, r7
 8018058:	bd80      	pop	{r7, pc}
 801805a:	bf00      	nop
 801805c:	20013b20 	.word	0x20013b20

08018060 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8018060:	b580      	push	{r7, lr}
 8018062:	b084      	sub	sp, #16
 8018064:	af00      	add	r7, sp, #0
 8018066:	6078      	str	r0, [r7, #4]
 8018068:	460b      	mov	r3, r1
 801806a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801806c:	2300      	movs	r3, #0
 801806e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8018070:	4b0d      	ldr	r3, [pc, #52]	; (80180a8 <CDC_Transmit_FS+0x48>)
 8018072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018076:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018078:	68bb      	ldr	r3, [r7, #8]
 801807a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801807e:	2b00      	cmp	r3, #0
 8018080:	d001      	beq.n	8018086 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8018082:	2301      	movs	r3, #1
 8018084:	e00b      	b.n	801809e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8018086:	887b      	ldrh	r3, [r7, #2]
 8018088:	461a      	mov	r2, r3
 801808a:	6879      	ldr	r1, [r7, #4]
 801808c:	4806      	ldr	r0, [pc, #24]	; (80180a8 <CDC_Transmit_FS+0x48>)
 801808e:	f7f7 fa48 	bl	800f522 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8018092:	4805      	ldr	r0, [pc, #20]	; (80180a8 <CDC_Transmit_FS+0x48>)
 8018094:	f7f7 fa7c 	bl	800f590 <USBD_CDC_TransmitPacket>
 8018098:	4603      	mov	r3, r0
 801809a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801809c:	7bfb      	ldrb	r3, [r7, #15]
}
 801809e:	4618      	mov	r0, r3
 80180a0:	3710      	adds	r7, #16
 80180a2:	46bd      	mov	sp, r7
 80180a4:	bd80      	pop	{r7, pc}
 80180a6:	bf00      	nop
 80180a8:	20013b20 	.word	0x20013b20

080180ac <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b087      	sub	sp, #28
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	60f8      	str	r0, [r7, #12]
 80180b4:	60b9      	str	r1, [r7, #8]
 80180b6:	4613      	mov	r3, r2
 80180b8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80180ba:	2300      	movs	r3, #0
 80180bc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80180be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180c2:	4618      	mov	r0, r3
 80180c4:	371c      	adds	r7, #28
 80180c6:	46bd      	mov	sp, r7
 80180c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180cc:	4770      	bx	lr
	...

080180d0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180d0:	b480      	push	{r7}
 80180d2:	b083      	sub	sp, #12
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	4603      	mov	r3, r0
 80180d8:	6039      	str	r1, [r7, #0]
 80180da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80180dc:	683b      	ldr	r3, [r7, #0]
 80180de:	2212      	movs	r2, #18
 80180e0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80180e2:	4b03      	ldr	r3, [pc, #12]	; (80180f0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80180e4:	4618      	mov	r0, r3
 80180e6:	370c      	adds	r7, #12
 80180e8:	46bd      	mov	sp, r7
 80180ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ee:	4770      	bx	lr
 80180f0:	20000228 	.word	0x20000228

080180f4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180f4:	b480      	push	{r7}
 80180f6:	b083      	sub	sp, #12
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	4603      	mov	r3, r0
 80180fc:	6039      	str	r1, [r7, #0]
 80180fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	2204      	movs	r2, #4
 8018104:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018106:	4b03      	ldr	r3, [pc, #12]	; (8018114 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018108:	4618      	mov	r0, r3
 801810a:	370c      	adds	r7, #12
 801810c:	46bd      	mov	sp, r7
 801810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018112:	4770      	bx	lr
 8018114:	2000023c 	.word	0x2000023c

08018118 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b082      	sub	sp, #8
 801811c:	af00      	add	r7, sp, #0
 801811e:	4603      	mov	r3, r0
 8018120:	6039      	str	r1, [r7, #0]
 8018122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018124:	79fb      	ldrb	r3, [r7, #7]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d105      	bne.n	8018136 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801812a:	683a      	ldr	r2, [r7, #0]
 801812c:	4907      	ldr	r1, [pc, #28]	; (801814c <USBD_FS_ProductStrDescriptor+0x34>)
 801812e:	4808      	ldr	r0, [pc, #32]	; (8018150 <USBD_FS_ProductStrDescriptor+0x38>)
 8018130:	f7f8 fb11 	bl	8010756 <USBD_GetString>
 8018134:	e004      	b.n	8018140 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018136:	683a      	ldr	r2, [r7, #0]
 8018138:	4904      	ldr	r1, [pc, #16]	; (801814c <USBD_FS_ProductStrDescriptor+0x34>)
 801813a:	4805      	ldr	r0, [pc, #20]	; (8018150 <USBD_FS_ProductStrDescriptor+0x38>)
 801813c:	f7f8 fb0b 	bl	8010756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018140:	4b02      	ldr	r3, [pc, #8]	; (801814c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018142:	4618      	mov	r0, r3
 8018144:	3708      	adds	r7, #8
 8018146:	46bd      	mov	sp, r7
 8018148:	bd80      	pop	{r7, pc}
 801814a:	bf00      	nop
 801814c:	20014df0 	.word	0x20014df0
 8018150:	0801c710 	.word	0x0801c710

08018154 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018154:	b580      	push	{r7, lr}
 8018156:	b082      	sub	sp, #8
 8018158:	af00      	add	r7, sp, #0
 801815a:	4603      	mov	r3, r0
 801815c:	6039      	str	r1, [r7, #0]
 801815e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018160:	683a      	ldr	r2, [r7, #0]
 8018162:	4904      	ldr	r1, [pc, #16]	; (8018174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018164:	4804      	ldr	r0, [pc, #16]	; (8018178 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018166:	f7f8 faf6 	bl	8010756 <USBD_GetString>
  return USBD_StrDesc;
 801816a:	4b02      	ldr	r3, [pc, #8]	; (8018174 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801816c:	4618      	mov	r0, r3
 801816e:	3708      	adds	r7, #8
 8018170:	46bd      	mov	sp, r7
 8018172:	bd80      	pop	{r7, pc}
 8018174:	20014df0 	.word	0x20014df0
 8018178:	0801c728 	.word	0x0801c728

0801817c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	4603      	mov	r3, r0
 8018184:	6039      	str	r1, [r7, #0]
 8018186:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018188:	683b      	ldr	r3, [r7, #0]
 801818a:	221a      	movs	r2, #26
 801818c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801818e:	f000 f843 	bl	8018218 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018192:	4b02      	ldr	r3, [pc, #8]	; (801819c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018194:	4618      	mov	r0, r3
 8018196:	3708      	adds	r7, #8
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}
 801819c:	20000240 	.word	0x20000240

080181a0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181a0:	b580      	push	{r7, lr}
 80181a2:	b082      	sub	sp, #8
 80181a4:	af00      	add	r7, sp, #0
 80181a6:	4603      	mov	r3, r0
 80181a8:	6039      	str	r1, [r7, #0]
 80181aa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80181ac:	79fb      	ldrb	r3, [r7, #7]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d105      	bne.n	80181be <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80181b2:	683a      	ldr	r2, [r7, #0]
 80181b4:	4907      	ldr	r1, [pc, #28]	; (80181d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80181b6:	4808      	ldr	r0, [pc, #32]	; (80181d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80181b8:	f7f8 facd 	bl	8010756 <USBD_GetString>
 80181bc:	e004      	b.n	80181c8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80181be:	683a      	ldr	r2, [r7, #0]
 80181c0:	4904      	ldr	r1, [pc, #16]	; (80181d4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80181c2:	4805      	ldr	r0, [pc, #20]	; (80181d8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80181c4:	f7f8 fac7 	bl	8010756 <USBD_GetString>
  }
  return USBD_StrDesc;
 80181c8:	4b02      	ldr	r3, [pc, #8]	; (80181d4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	3708      	adds	r7, #8
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	20014df0 	.word	0x20014df0
 80181d8:	0801c73c 	.word	0x0801c73c

080181dc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b082      	sub	sp, #8
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	4603      	mov	r3, r0
 80181e4:	6039      	str	r1, [r7, #0]
 80181e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80181e8:	79fb      	ldrb	r3, [r7, #7]
 80181ea:	2b00      	cmp	r3, #0
 80181ec:	d105      	bne.n	80181fa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181ee:	683a      	ldr	r2, [r7, #0]
 80181f0:	4907      	ldr	r1, [pc, #28]	; (8018210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80181f2:	4808      	ldr	r0, [pc, #32]	; (8018214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80181f4:	f7f8 faaf 	bl	8010756 <USBD_GetString>
 80181f8:	e004      	b.n	8018204 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181fa:	683a      	ldr	r2, [r7, #0]
 80181fc:	4904      	ldr	r1, [pc, #16]	; (8018210 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80181fe:	4805      	ldr	r0, [pc, #20]	; (8018214 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018200:	f7f8 faa9 	bl	8010756 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018204:	4b02      	ldr	r3, [pc, #8]	; (8018210 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018206:	4618      	mov	r0, r3
 8018208:	3708      	adds	r7, #8
 801820a:	46bd      	mov	sp, r7
 801820c:	bd80      	pop	{r7, pc}
 801820e:	bf00      	nop
 8018210:	20014df0 	.word	0x20014df0
 8018214:	0801c748 	.word	0x0801c748

08018218 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b084      	sub	sp, #16
 801821c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801821e:	4b0f      	ldr	r3, [pc, #60]	; (801825c <Get_SerialNum+0x44>)
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018224:	4b0e      	ldr	r3, [pc, #56]	; (8018260 <Get_SerialNum+0x48>)
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801822a:	4b0e      	ldr	r3, [pc, #56]	; (8018264 <Get_SerialNum+0x4c>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018230:	68fa      	ldr	r2, [r7, #12]
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	4413      	add	r3, r2
 8018236:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d009      	beq.n	8018252 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801823e:	2208      	movs	r2, #8
 8018240:	4909      	ldr	r1, [pc, #36]	; (8018268 <Get_SerialNum+0x50>)
 8018242:	68f8      	ldr	r0, [r7, #12]
 8018244:	f000 f814 	bl	8018270 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018248:	2204      	movs	r2, #4
 801824a:	4908      	ldr	r1, [pc, #32]	; (801826c <Get_SerialNum+0x54>)
 801824c:	68b8      	ldr	r0, [r7, #8]
 801824e:	f000 f80f 	bl	8018270 <IntToUnicode>
  }
}
 8018252:	bf00      	nop
 8018254:	3710      	adds	r7, #16
 8018256:	46bd      	mov	sp, r7
 8018258:	bd80      	pop	{r7, pc}
 801825a:	bf00      	nop
 801825c:	1fff7a10 	.word	0x1fff7a10
 8018260:	1fff7a14 	.word	0x1fff7a14
 8018264:	1fff7a18 	.word	0x1fff7a18
 8018268:	20000242 	.word	0x20000242
 801826c:	20000252 	.word	0x20000252

08018270 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018270:	b480      	push	{r7}
 8018272:	b087      	sub	sp, #28
 8018274:	af00      	add	r7, sp, #0
 8018276:	60f8      	str	r0, [r7, #12]
 8018278:	60b9      	str	r1, [r7, #8]
 801827a:	4613      	mov	r3, r2
 801827c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801827e:	2300      	movs	r3, #0
 8018280:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018282:	2300      	movs	r3, #0
 8018284:	75fb      	strb	r3, [r7, #23]
 8018286:	e027      	b.n	80182d8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018288:	68fb      	ldr	r3, [r7, #12]
 801828a:	0f1b      	lsrs	r3, r3, #28
 801828c:	2b09      	cmp	r3, #9
 801828e:	d80b      	bhi.n	80182a8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	0f1b      	lsrs	r3, r3, #28
 8018294:	b2da      	uxtb	r2, r3
 8018296:	7dfb      	ldrb	r3, [r7, #23]
 8018298:	005b      	lsls	r3, r3, #1
 801829a:	4619      	mov	r1, r3
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	440b      	add	r3, r1
 80182a0:	3230      	adds	r2, #48	; 0x30
 80182a2:	b2d2      	uxtb	r2, r2
 80182a4:	701a      	strb	r2, [r3, #0]
 80182a6:	e00a      	b.n	80182be <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80182a8:	68fb      	ldr	r3, [r7, #12]
 80182aa:	0f1b      	lsrs	r3, r3, #28
 80182ac:	b2da      	uxtb	r2, r3
 80182ae:	7dfb      	ldrb	r3, [r7, #23]
 80182b0:	005b      	lsls	r3, r3, #1
 80182b2:	4619      	mov	r1, r3
 80182b4:	68bb      	ldr	r3, [r7, #8]
 80182b6:	440b      	add	r3, r1
 80182b8:	3237      	adds	r2, #55	; 0x37
 80182ba:	b2d2      	uxtb	r2, r2
 80182bc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	011b      	lsls	r3, r3, #4
 80182c2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80182c4:	7dfb      	ldrb	r3, [r7, #23]
 80182c6:	005b      	lsls	r3, r3, #1
 80182c8:	3301      	adds	r3, #1
 80182ca:	68ba      	ldr	r2, [r7, #8]
 80182cc:	4413      	add	r3, r2
 80182ce:	2200      	movs	r2, #0
 80182d0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80182d2:	7dfb      	ldrb	r3, [r7, #23]
 80182d4:	3301      	adds	r3, #1
 80182d6:	75fb      	strb	r3, [r7, #23]
 80182d8:	7dfa      	ldrb	r2, [r7, #23]
 80182da:	79fb      	ldrb	r3, [r7, #7]
 80182dc:	429a      	cmp	r2, r3
 80182de:	d3d3      	bcc.n	8018288 <IntToUnicode+0x18>
  }
}
 80182e0:	bf00      	nop
 80182e2:	bf00      	nop
 80182e4:	371c      	adds	r7, #28
 80182e6:	46bd      	mov	sp, r7
 80182e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ec:	4770      	bx	lr
	...

080182f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b08a      	sub	sp, #40	; 0x28
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80182f8:	f107 0314 	add.w	r3, r7, #20
 80182fc:	2200      	movs	r2, #0
 80182fe:	601a      	str	r2, [r3, #0]
 8018300:	605a      	str	r2, [r3, #4]
 8018302:	609a      	str	r2, [r3, #8]
 8018304:	60da      	str	r2, [r3, #12]
 8018306:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018310:	d147      	bne.n	80183a2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018312:	2300      	movs	r3, #0
 8018314:	613b      	str	r3, [r7, #16]
 8018316:	4b25      	ldr	r3, [pc, #148]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 8018318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801831a:	4a24      	ldr	r2, [pc, #144]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 801831c:	f043 0301 	orr.w	r3, r3, #1
 8018320:	6313      	str	r3, [r2, #48]	; 0x30
 8018322:	4b22      	ldr	r3, [pc, #136]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 8018324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018326:	f003 0301 	and.w	r3, r3, #1
 801832a:	613b      	str	r3, [r7, #16]
 801832c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 801832e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018334:	2300      	movs	r3, #0
 8018336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018338:	2300      	movs	r3, #0
 801833a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801833c:	f107 0314 	add.w	r3, r7, #20
 8018340:	4619      	mov	r1, r3
 8018342:	481b      	ldr	r0, [pc, #108]	; (80183b0 <HAL_PCD_MspInit+0xc0>)
 8018344:	f7ef fc4a 	bl	8007bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8018348:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801834c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801834e:	2302      	movs	r3, #2
 8018350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018352:	2300      	movs	r3, #0
 8018354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018356:	2300      	movs	r3, #0
 8018358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801835a:	230a      	movs	r3, #10
 801835c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801835e:	f107 0314 	add.w	r3, r7, #20
 8018362:	4619      	mov	r1, r3
 8018364:	4812      	ldr	r0, [pc, #72]	; (80183b0 <HAL_PCD_MspInit+0xc0>)
 8018366:	f7ef fc39 	bl	8007bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801836a:	4b10      	ldr	r3, [pc, #64]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 801836c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801836e:	4a0f      	ldr	r2, [pc, #60]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 8018370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018374:	6353      	str	r3, [r2, #52]	; 0x34
 8018376:	2300      	movs	r3, #0
 8018378:	60fb      	str	r3, [r7, #12]
 801837a:	4b0c      	ldr	r3, [pc, #48]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 801837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801837e:	4a0b      	ldr	r2, [pc, #44]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 8018380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018384:	6453      	str	r3, [r2, #68]	; 0x44
 8018386:	4b09      	ldr	r3, [pc, #36]	; (80183ac <HAL_PCD_MspInit+0xbc>)
 8018388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801838a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801838e:	60fb      	str	r3, [r7, #12]
 8018390:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018392:	2200      	movs	r2, #0
 8018394:	2105      	movs	r1, #5
 8018396:	2043      	movs	r0, #67	; 0x43
 8018398:	f7ee ff88 	bl	80072ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801839c:	2043      	movs	r0, #67	; 0x43
 801839e:	f7ee ffa1 	bl	80072e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80183a2:	bf00      	nop
 80183a4:	3728      	adds	r7, #40	; 0x28
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}
 80183aa:	bf00      	nop
 80183ac:	40023800 	.word	0x40023800
 80183b0:	40020000 	.word	0x40020000

080183b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b082      	sub	sp, #8
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80183c8:	4619      	mov	r1, r3
 80183ca:	4610      	mov	r0, r2
 80183cc:	f7f7 f9dc 	bl	800f788 <USBD_LL_SetupStage>
}
 80183d0:	bf00      	nop
 80183d2:	3708      	adds	r7, #8
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}

080183d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	b082      	sub	sp, #8
 80183dc:	af00      	add	r7, sp, #0
 80183de:	6078      	str	r0, [r7, #4]
 80183e0:	460b      	mov	r3, r1
 80183e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80183ea:	78fa      	ldrb	r2, [r7, #3]
 80183ec:	6879      	ldr	r1, [r7, #4]
 80183ee:	4613      	mov	r3, r2
 80183f0:	00db      	lsls	r3, r3, #3
 80183f2:	1a9b      	subs	r3, r3, r2
 80183f4:	009b      	lsls	r3, r3, #2
 80183f6:	440b      	add	r3, r1
 80183f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80183fc:	681a      	ldr	r2, [r3, #0]
 80183fe:	78fb      	ldrb	r3, [r7, #3]
 8018400:	4619      	mov	r1, r3
 8018402:	f7f7 fa16 	bl	800f832 <USBD_LL_DataOutStage>
}
 8018406:	bf00      	nop
 8018408:	3708      	adds	r7, #8
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}

0801840e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801840e:	b580      	push	{r7, lr}
 8018410:	b082      	sub	sp, #8
 8018412:	af00      	add	r7, sp, #0
 8018414:	6078      	str	r0, [r7, #4]
 8018416:	460b      	mov	r3, r1
 8018418:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018420:	78fa      	ldrb	r2, [r7, #3]
 8018422:	6879      	ldr	r1, [r7, #4]
 8018424:	4613      	mov	r3, r2
 8018426:	00db      	lsls	r3, r3, #3
 8018428:	1a9b      	subs	r3, r3, r2
 801842a:	009b      	lsls	r3, r3, #2
 801842c:	440b      	add	r3, r1
 801842e:	3348      	adds	r3, #72	; 0x48
 8018430:	681a      	ldr	r2, [r3, #0]
 8018432:	78fb      	ldrb	r3, [r7, #3]
 8018434:	4619      	mov	r1, r3
 8018436:	f7f7 fa5f 	bl	800f8f8 <USBD_LL_DataInStage>
}
 801843a:	bf00      	nop
 801843c:	3708      	adds	r7, #8
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}

08018442 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018442:	b580      	push	{r7, lr}
 8018444:	b082      	sub	sp, #8
 8018446:	af00      	add	r7, sp, #0
 8018448:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018450:	4618      	mov	r0, r3
 8018452:	f7f7 fb73 	bl	800fb3c <USBD_LL_SOF>
}
 8018456:	bf00      	nop
 8018458:	3708      	adds	r7, #8
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}

0801845e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801845e:	b580      	push	{r7, lr}
 8018460:	b084      	sub	sp, #16
 8018462:	af00      	add	r7, sp, #0
 8018464:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018466:	2301      	movs	r3, #1
 8018468:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	68db      	ldr	r3, [r3, #12]
 801846e:	2b00      	cmp	r3, #0
 8018470:	d102      	bne.n	8018478 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018472:	2300      	movs	r3, #0
 8018474:	73fb      	strb	r3, [r7, #15]
 8018476:	e008      	b.n	801848a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	68db      	ldr	r3, [r3, #12]
 801847c:	2b02      	cmp	r3, #2
 801847e:	d102      	bne.n	8018486 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018480:	2301      	movs	r3, #1
 8018482:	73fb      	strb	r3, [r7, #15]
 8018484:	e001      	b.n	801848a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018486:	f7ec fba5 	bl	8004bd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018490:	7bfa      	ldrb	r2, [r7, #15]
 8018492:	4611      	mov	r1, r2
 8018494:	4618      	mov	r0, r3
 8018496:	f7f7 fb13 	bl	800fac0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80184a0:	4618      	mov	r0, r3
 80184a2:	f7f7 fabf 	bl	800fa24 <USBD_LL_Reset>
}
 80184a6:	bf00      	nop
 80184a8:	3710      	adds	r7, #16
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
	...

080184b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80184be:	4618      	mov	r0, r3
 80184c0:	f7f7 fb0e 	bl	800fae0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	681b      	ldr	r3, [r3, #0]
 80184c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	687a      	ldr	r2, [r7, #4]
 80184d0:	6812      	ldr	r2, [r2, #0]
 80184d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80184d6:	f043 0301 	orr.w	r3, r3, #1
 80184da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	6a1b      	ldr	r3, [r3, #32]
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	d005      	beq.n	80184f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80184e4:	4b04      	ldr	r3, [pc, #16]	; (80184f8 <HAL_PCD_SuspendCallback+0x48>)
 80184e6:	691b      	ldr	r3, [r3, #16]
 80184e8:	4a03      	ldr	r2, [pc, #12]	; (80184f8 <HAL_PCD_SuspendCallback+0x48>)
 80184ea:	f043 0306 	orr.w	r3, r3, #6
 80184ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80184f0:	bf00      	nop
 80184f2:	3708      	adds	r7, #8
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}
 80184f8:	e000ed00 	.word	0xe000ed00

080184fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b082      	sub	sp, #8
 8018500:	af00      	add	r7, sp, #0
 8018502:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801850a:	4618      	mov	r0, r3
 801850c:	f7f7 fafe 	bl	800fb0c <USBD_LL_Resume>
}
 8018510:	bf00      	nop
 8018512:	3708      	adds	r7, #8
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}

08018518 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	460b      	mov	r3, r1
 8018522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801852a:	78fa      	ldrb	r2, [r7, #3]
 801852c:	4611      	mov	r1, r2
 801852e:	4618      	mov	r0, r3
 8018530:	f7f7 fb4c 	bl	800fbcc <USBD_LL_IsoOUTIncomplete>
}
 8018534:	bf00      	nop
 8018536:	3708      	adds	r7, #8
 8018538:	46bd      	mov	sp, r7
 801853a:	bd80      	pop	{r7, pc}

0801853c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b082      	sub	sp, #8
 8018540:	af00      	add	r7, sp, #0
 8018542:	6078      	str	r0, [r7, #4]
 8018544:	460b      	mov	r3, r1
 8018546:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801854e:	78fa      	ldrb	r2, [r7, #3]
 8018550:	4611      	mov	r1, r2
 8018552:	4618      	mov	r0, r3
 8018554:	f7f7 fb14 	bl	800fb80 <USBD_LL_IsoINIncomplete>
}
 8018558:	bf00      	nop
 801855a:	3708      	adds	r7, #8
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}

08018560 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801856e:	4618      	mov	r0, r3
 8018570:	f7f7 fb52 	bl	800fc18 <USBD_LL_DevConnected>
}
 8018574:	bf00      	nop
 8018576:	3708      	adds	r7, #8
 8018578:	46bd      	mov	sp, r7
 801857a:	bd80      	pop	{r7, pc}

0801857c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801857c:	b580      	push	{r7, lr}
 801857e:	b082      	sub	sp, #8
 8018580:	af00      	add	r7, sp, #0
 8018582:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801858a:	4618      	mov	r0, r3
 801858c:	f7f7 fb4f 	bl	800fc2e <USBD_LL_DevDisconnected>
}
 8018590:	bf00      	nop
 8018592:	3708      	adds	r7, #8
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}

08018598 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	781b      	ldrb	r3, [r3, #0]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d13c      	bne.n	8018622 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80185a8:	4a20      	ldr	r2, [pc, #128]	; (801862c <USBD_LL_Init+0x94>)
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	4a1e      	ldr	r2, [pc, #120]	; (801862c <USBD_LL_Init+0x94>)
 80185b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80185b8:	4b1c      	ldr	r3, [pc, #112]	; (801862c <USBD_LL_Init+0x94>)
 80185ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80185be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80185c0:	4b1a      	ldr	r3, [pc, #104]	; (801862c <USBD_LL_Init+0x94>)
 80185c2:	2204      	movs	r2, #4
 80185c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80185c6:	4b19      	ldr	r3, [pc, #100]	; (801862c <USBD_LL_Init+0x94>)
 80185c8:	2202      	movs	r2, #2
 80185ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80185cc:	4b17      	ldr	r3, [pc, #92]	; (801862c <USBD_LL_Init+0x94>)
 80185ce:	2200      	movs	r2, #0
 80185d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80185d2:	4b16      	ldr	r3, [pc, #88]	; (801862c <USBD_LL_Init+0x94>)
 80185d4:	2202      	movs	r2, #2
 80185d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80185d8:	4b14      	ldr	r3, [pc, #80]	; (801862c <USBD_LL_Init+0x94>)
 80185da:	2200      	movs	r2, #0
 80185dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80185de:	4b13      	ldr	r3, [pc, #76]	; (801862c <USBD_LL_Init+0x94>)
 80185e0:	2200      	movs	r2, #0
 80185e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80185e4:	4b11      	ldr	r3, [pc, #68]	; (801862c <USBD_LL_Init+0x94>)
 80185e6:	2200      	movs	r2, #0
 80185e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80185ea:	4b10      	ldr	r3, [pc, #64]	; (801862c <USBD_LL_Init+0x94>)
 80185ec:	2200      	movs	r2, #0
 80185ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80185f0:	4b0e      	ldr	r3, [pc, #56]	; (801862c <USBD_LL_Init+0x94>)
 80185f2:	2200      	movs	r2, #0
 80185f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80185f6:	480d      	ldr	r0, [pc, #52]	; (801862c <USBD_LL_Init+0x94>)
 80185f8:	f7f1 f9ed 	bl	80099d6 <HAL_PCD_Init>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d001      	beq.n	8018606 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018602:	f7ec fae7 	bl	8004bd4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018606:	2180      	movs	r1, #128	; 0x80
 8018608:	4808      	ldr	r0, [pc, #32]	; (801862c <USBD_LL_Init+0x94>)
 801860a:	f7f2 fb4a 	bl	800aca2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801860e:	2240      	movs	r2, #64	; 0x40
 8018610:	2100      	movs	r1, #0
 8018612:	4806      	ldr	r0, [pc, #24]	; (801862c <USBD_LL_Init+0x94>)
 8018614:	f7f2 fafe 	bl	800ac14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018618:	2280      	movs	r2, #128	; 0x80
 801861a:	2101      	movs	r1, #1
 801861c:	4803      	ldr	r0, [pc, #12]	; (801862c <USBD_LL_Init+0x94>)
 801861e:	f7f2 faf9 	bl	800ac14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018622:	2300      	movs	r3, #0
}
 8018624:	4618      	mov	r0, r3
 8018626:	3708      	adds	r7, #8
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}
 801862c:	20014ff0 	.word	0x20014ff0

08018630 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b084      	sub	sp, #16
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018638:	2300      	movs	r3, #0
 801863a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801863c:	2300      	movs	r3, #0
 801863e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018646:	4618      	mov	r0, r3
 8018648:	f7f1 fae2 	bl	8009c10 <HAL_PCD_Start>
 801864c:	4603      	mov	r3, r0
 801864e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018650:	7bfb      	ldrb	r3, [r7, #15]
 8018652:	4618      	mov	r0, r3
 8018654:	f000 f942 	bl	80188dc <USBD_Get_USB_Status>
 8018658:	4603      	mov	r3, r0
 801865a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801865c:	7bbb      	ldrb	r3, [r7, #14]
}
 801865e:	4618      	mov	r0, r3
 8018660:	3710      	adds	r7, #16
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}

08018666 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8018666:	b580      	push	{r7, lr}
 8018668:	b084      	sub	sp, #16
 801866a:	af00      	add	r7, sp, #0
 801866c:	6078      	str	r0, [r7, #4]
 801866e:	4608      	mov	r0, r1
 8018670:	4611      	mov	r1, r2
 8018672:	461a      	mov	r2, r3
 8018674:	4603      	mov	r3, r0
 8018676:	70fb      	strb	r3, [r7, #3]
 8018678:	460b      	mov	r3, r1
 801867a:	70bb      	strb	r3, [r7, #2]
 801867c:	4613      	mov	r3, r2
 801867e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018680:	2300      	movs	r3, #0
 8018682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018684:	2300      	movs	r3, #0
 8018686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801868e:	78bb      	ldrb	r3, [r7, #2]
 8018690:	883a      	ldrh	r2, [r7, #0]
 8018692:	78f9      	ldrb	r1, [r7, #3]
 8018694:	f7f1 fec6 	bl	800a424 <HAL_PCD_EP_Open>
 8018698:	4603      	mov	r3, r0
 801869a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801869c:	7bfb      	ldrb	r3, [r7, #15]
 801869e:	4618      	mov	r0, r3
 80186a0:	f000 f91c 	bl	80188dc <USBD_Get_USB_Status>
 80186a4:	4603      	mov	r3, r0
 80186a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80186aa:	4618      	mov	r0, r3
 80186ac:	3710      	adds	r7, #16
 80186ae:	46bd      	mov	sp, r7
 80186b0:	bd80      	pop	{r7, pc}

080186b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186b2:	b580      	push	{r7, lr}
 80186b4:	b084      	sub	sp, #16
 80186b6:	af00      	add	r7, sp, #0
 80186b8:	6078      	str	r0, [r7, #4]
 80186ba:	460b      	mov	r3, r1
 80186bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186be:	2300      	movs	r3, #0
 80186c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186c2:	2300      	movs	r3, #0
 80186c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80186cc:	78fa      	ldrb	r2, [r7, #3]
 80186ce:	4611      	mov	r1, r2
 80186d0:	4618      	mov	r0, r3
 80186d2:	f7f1 ff0f 	bl	800a4f4 <HAL_PCD_EP_Close>
 80186d6:	4603      	mov	r3, r0
 80186d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186da:	7bfb      	ldrb	r3, [r7, #15]
 80186dc:	4618      	mov	r0, r3
 80186de:	f000 f8fd 	bl	80188dc <USBD_Get_USB_Status>
 80186e2:	4603      	mov	r3, r0
 80186e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80186e8:	4618      	mov	r0, r3
 80186ea:	3710      	adds	r7, #16
 80186ec:	46bd      	mov	sp, r7
 80186ee:	bd80      	pop	{r7, pc}

080186f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b084      	sub	sp, #16
 80186f4:	af00      	add	r7, sp, #0
 80186f6:	6078      	str	r0, [r7, #4]
 80186f8:	460b      	mov	r3, r1
 80186fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186fc:	2300      	movs	r3, #0
 80186fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018700:	2300      	movs	r3, #0
 8018702:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801870a:	78fa      	ldrb	r2, [r7, #3]
 801870c:	4611      	mov	r1, r2
 801870e:	4618      	mov	r0, r3
 8018710:	f7f1 ffe7 	bl	800a6e2 <HAL_PCD_EP_SetStall>
 8018714:	4603      	mov	r3, r0
 8018716:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018718:	7bfb      	ldrb	r3, [r7, #15]
 801871a:	4618      	mov	r0, r3
 801871c:	f000 f8de 	bl	80188dc <USBD_Get_USB_Status>
 8018720:	4603      	mov	r3, r0
 8018722:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018724:	7bbb      	ldrb	r3, [r7, #14]
}
 8018726:	4618      	mov	r0, r3
 8018728:	3710      	adds	r7, #16
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}

0801872e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801872e:	b580      	push	{r7, lr}
 8018730:	b084      	sub	sp, #16
 8018732:	af00      	add	r7, sp, #0
 8018734:	6078      	str	r0, [r7, #4]
 8018736:	460b      	mov	r3, r1
 8018738:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801873a:	2300      	movs	r3, #0
 801873c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801873e:	2300      	movs	r3, #0
 8018740:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018748:	78fa      	ldrb	r2, [r7, #3]
 801874a:	4611      	mov	r1, r2
 801874c:	4618      	mov	r0, r3
 801874e:	f7f2 f82c 	bl	800a7aa <HAL_PCD_EP_ClrStall>
 8018752:	4603      	mov	r3, r0
 8018754:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018756:	7bfb      	ldrb	r3, [r7, #15]
 8018758:	4618      	mov	r0, r3
 801875a:	f000 f8bf 	bl	80188dc <USBD_Get_USB_Status>
 801875e:	4603      	mov	r3, r0
 8018760:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018762:	7bbb      	ldrb	r3, [r7, #14]
}
 8018764:	4618      	mov	r0, r3
 8018766:	3710      	adds	r7, #16
 8018768:	46bd      	mov	sp, r7
 801876a:	bd80      	pop	{r7, pc}

0801876c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801876c:	b480      	push	{r7}
 801876e:	b085      	sub	sp, #20
 8018770:	af00      	add	r7, sp, #0
 8018772:	6078      	str	r0, [r7, #4]
 8018774:	460b      	mov	r3, r1
 8018776:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801877e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018780:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018784:	2b00      	cmp	r3, #0
 8018786:	da0b      	bge.n	80187a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8018788:	78fb      	ldrb	r3, [r7, #3]
 801878a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801878e:	68f9      	ldr	r1, [r7, #12]
 8018790:	4613      	mov	r3, r2
 8018792:	00db      	lsls	r3, r3, #3
 8018794:	1a9b      	subs	r3, r3, r2
 8018796:	009b      	lsls	r3, r3, #2
 8018798:	440b      	add	r3, r1
 801879a:	333e      	adds	r3, #62	; 0x3e
 801879c:	781b      	ldrb	r3, [r3, #0]
 801879e:	e00b      	b.n	80187b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80187a0:	78fb      	ldrb	r3, [r7, #3]
 80187a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80187a6:	68f9      	ldr	r1, [r7, #12]
 80187a8:	4613      	mov	r3, r2
 80187aa:	00db      	lsls	r3, r3, #3
 80187ac:	1a9b      	subs	r3, r3, r2
 80187ae:	009b      	lsls	r3, r3, #2
 80187b0:	440b      	add	r3, r1
 80187b2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80187b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80187b8:	4618      	mov	r0, r3
 80187ba:	3714      	adds	r7, #20
 80187bc:	46bd      	mov	sp, r7
 80187be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c2:	4770      	bx	lr

080187c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80187c4:	b580      	push	{r7, lr}
 80187c6:	b084      	sub	sp, #16
 80187c8:	af00      	add	r7, sp, #0
 80187ca:	6078      	str	r0, [r7, #4]
 80187cc:	460b      	mov	r3, r1
 80187ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187d0:	2300      	movs	r3, #0
 80187d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187d4:	2300      	movs	r3, #0
 80187d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80187de:	78fa      	ldrb	r2, [r7, #3]
 80187e0:	4611      	mov	r1, r2
 80187e2:	4618      	mov	r0, r3
 80187e4:	f7f1 fdf9 	bl	800a3da <HAL_PCD_SetAddress>
 80187e8:	4603      	mov	r3, r0
 80187ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187ec:	7bfb      	ldrb	r3, [r7, #15]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f000 f874 	bl	80188dc <USBD_Get_USB_Status>
 80187f4:	4603      	mov	r3, r0
 80187f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3710      	adds	r7, #16
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}

08018802 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018802:	b580      	push	{r7, lr}
 8018804:	b086      	sub	sp, #24
 8018806:	af00      	add	r7, sp, #0
 8018808:	60f8      	str	r0, [r7, #12]
 801880a:	607a      	str	r2, [r7, #4]
 801880c:	603b      	str	r3, [r7, #0]
 801880e:	460b      	mov	r3, r1
 8018810:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018812:	2300      	movs	r3, #0
 8018814:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018816:	2300      	movs	r3, #0
 8018818:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018820:	7af9      	ldrb	r1, [r7, #11]
 8018822:	683b      	ldr	r3, [r7, #0]
 8018824:	687a      	ldr	r2, [r7, #4]
 8018826:	f7f1 ff12 	bl	800a64e <HAL_PCD_EP_Transmit>
 801882a:	4603      	mov	r3, r0
 801882c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801882e:	7dfb      	ldrb	r3, [r7, #23]
 8018830:	4618      	mov	r0, r3
 8018832:	f000 f853 	bl	80188dc <USBD_Get_USB_Status>
 8018836:	4603      	mov	r3, r0
 8018838:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801883a:	7dbb      	ldrb	r3, [r7, #22]
}
 801883c:	4618      	mov	r0, r3
 801883e:	3718      	adds	r7, #24
 8018840:	46bd      	mov	sp, r7
 8018842:	bd80      	pop	{r7, pc}

08018844 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	b086      	sub	sp, #24
 8018848:	af00      	add	r7, sp, #0
 801884a:	60f8      	str	r0, [r7, #12]
 801884c:	607a      	str	r2, [r7, #4]
 801884e:	603b      	str	r3, [r7, #0]
 8018850:	460b      	mov	r3, r1
 8018852:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018854:	2300      	movs	r3, #0
 8018856:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018858:	2300      	movs	r3, #0
 801885a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801885c:	68fb      	ldr	r3, [r7, #12]
 801885e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8018862:	7af9      	ldrb	r1, [r7, #11]
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	687a      	ldr	r2, [r7, #4]
 8018868:	f7f1 fe8e 	bl	800a588 <HAL_PCD_EP_Receive>
 801886c:	4603      	mov	r3, r0
 801886e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018870:	7dfb      	ldrb	r3, [r7, #23]
 8018872:	4618      	mov	r0, r3
 8018874:	f000 f832 	bl	80188dc <USBD_Get_USB_Status>
 8018878:	4603      	mov	r3, r0
 801887a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801887c:	7dbb      	ldrb	r3, [r7, #22]
}
 801887e:	4618      	mov	r0, r3
 8018880:	3718      	adds	r7, #24
 8018882:	46bd      	mov	sp, r7
 8018884:	bd80      	pop	{r7, pc}

08018886 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018886:	b580      	push	{r7, lr}
 8018888:	b082      	sub	sp, #8
 801888a:	af00      	add	r7, sp, #0
 801888c:	6078      	str	r0, [r7, #4]
 801888e:	460b      	mov	r3, r1
 8018890:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8018898:	78fa      	ldrb	r2, [r7, #3]
 801889a:	4611      	mov	r1, r2
 801889c:	4618      	mov	r0, r3
 801889e:	f7f1 febe 	bl	800a61e <HAL_PCD_EP_GetRxCount>
 80188a2:	4603      	mov	r3, r0
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	3708      	adds	r7, #8
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}

080188ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80188ac:	b480      	push	{r7}
 80188ae:	b083      	sub	sp, #12
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80188b4:	4b03      	ldr	r3, [pc, #12]	; (80188c4 <USBD_static_malloc+0x18>)
}
 80188b6:	4618      	mov	r0, r3
 80188b8:	370c      	adds	r7, #12
 80188ba:	46bd      	mov	sp, r7
 80188bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c0:	4770      	bx	lr
 80188c2:	bf00      	nop
 80188c4:	200074e4 	.word	0x200074e4

080188c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80188c8:	b480      	push	{r7}
 80188ca:	b083      	sub	sp, #12
 80188cc:	af00      	add	r7, sp, #0
 80188ce:	6078      	str	r0, [r7, #4]

}
 80188d0:	bf00      	nop
 80188d2:	370c      	adds	r7, #12
 80188d4:	46bd      	mov	sp, r7
 80188d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188da:	4770      	bx	lr

080188dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80188dc:	b480      	push	{r7}
 80188de:	b085      	sub	sp, #20
 80188e0:	af00      	add	r7, sp, #0
 80188e2:	4603      	mov	r3, r0
 80188e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188e6:	2300      	movs	r3, #0
 80188e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80188ea:	79fb      	ldrb	r3, [r7, #7]
 80188ec:	2b03      	cmp	r3, #3
 80188ee:	d817      	bhi.n	8018920 <USBD_Get_USB_Status+0x44>
 80188f0:	a201      	add	r2, pc, #4	; (adr r2, 80188f8 <USBD_Get_USB_Status+0x1c>)
 80188f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188f6:	bf00      	nop
 80188f8:	08018909 	.word	0x08018909
 80188fc:	0801890f 	.word	0x0801890f
 8018900:	08018915 	.word	0x08018915
 8018904:	0801891b 	.word	0x0801891b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018908:	2300      	movs	r3, #0
 801890a:	73fb      	strb	r3, [r7, #15]
    break;
 801890c:	e00b      	b.n	8018926 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801890e:	2303      	movs	r3, #3
 8018910:	73fb      	strb	r3, [r7, #15]
    break;
 8018912:	e008      	b.n	8018926 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018914:	2301      	movs	r3, #1
 8018916:	73fb      	strb	r3, [r7, #15]
    break;
 8018918:	e005      	b.n	8018926 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801891a:	2303      	movs	r3, #3
 801891c:	73fb      	strb	r3, [r7, #15]
    break;
 801891e:	e002      	b.n	8018926 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018920:	2303      	movs	r3, #3
 8018922:	73fb      	strb	r3, [r7, #15]
    break;
 8018924:	bf00      	nop
  }
  return usb_status;
 8018926:	7bfb      	ldrb	r3, [r7, #15]
}
 8018928:	4618      	mov	r0, r3
 801892a:	3714      	adds	r7, #20
 801892c:	46bd      	mov	sp, r7
 801892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018932:	4770      	bx	lr

08018934 <__errno>:
 8018934:	4b01      	ldr	r3, [pc, #4]	; (801893c <__errno+0x8>)
 8018936:	6818      	ldr	r0, [r3, #0]
 8018938:	4770      	bx	lr
 801893a:	bf00      	nop
 801893c:	2000025c 	.word	0x2000025c

08018940 <std>:
 8018940:	2300      	movs	r3, #0
 8018942:	b510      	push	{r4, lr}
 8018944:	4604      	mov	r4, r0
 8018946:	e9c0 3300 	strd	r3, r3, [r0]
 801894a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801894e:	6083      	str	r3, [r0, #8]
 8018950:	8181      	strh	r1, [r0, #12]
 8018952:	6643      	str	r3, [r0, #100]	; 0x64
 8018954:	81c2      	strh	r2, [r0, #14]
 8018956:	6183      	str	r3, [r0, #24]
 8018958:	4619      	mov	r1, r3
 801895a:	2208      	movs	r2, #8
 801895c:	305c      	adds	r0, #92	; 0x5c
 801895e:	f000 f945 	bl	8018bec <memset>
 8018962:	4b05      	ldr	r3, [pc, #20]	; (8018978 <std+0x38>)
 8018964:	6263      	str	r3, [r4, #36]	; 0x24
 8018966:	4b05      	ldr	r3, [pc, #20]	; (801897c <std+0x3c>)
 8018968:	62a3      	str	r3, [r4, #40]	; 0x28
 801896a:	4b05      	ldr	r3, [pc, #20]	; (8018980 <std+0x40>)
 801896c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801896e:	4b05      	ldr	r3, [pc, #20]	; (8018984 <std+0x44>)
 8018970:	6224      	str	r4, [r4, #32]
 8018972:	6323      	str	r3, [r4, #48]	; 0x30
 8018974:	bd10      	pop	{r4, pc}
 8018976:	bf00      	nop
 8018978:	08019759 	.word	0x08019759
 801897c:	0801977b 	.word	0x0801977b
 8018980:	080197b3 	.word	0x080197b3
 8018984:	080197d7 	.word	0x080197d7

08018988 <_cleanup_r>:
 8018988:	4901      	ldr	r1, [pc, #4]	; (8018990 <_cleanup_r+0x8>)
 801898a:	f000 b8af 	b.w	8018aec <_fwalk_reent>
 801898e:	bf00      	nop
 8018990:	0801a6d5 	.word	0x0801a6d5

08018994 <__sfmoreglue>:
 8018994:	b570      	push	{r4, r5, r6, lr}
 8018996:	1e4a      	subs	r2, r1, #1
 8018998:	2568      	movs	r5, #104	; 0x68
 801899a:	4355      	muls	r5, r2
 801899c:	460e      	mov	r6, r1
 801899e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80189a2:	f000 f97b 	bl	8018c9c <_malloc_r>
 80189a6:	4604      	mov	r4, r0
 80189a8:	b140      	cbz	r0, 80189bc <__sfmoreglue+0x28>
 80189aa:	2100      	movs	r1, #0
 80189ac:	e9c0 1600 	strd	r1, r6, [r0]
 80189b0:	300c      	adds	r0, #12
 80189b2:	60a0      	str	r0, [r4, #8]
 80189b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80189b8:	f000 f918 	bl	8018bec <memset>
 80189bc:	4620      	mov	r0, r4
 80189be:	bd70      	pop	{r4, r5, r6, pc}

080189c0 <__sfp_lock_acquire>:
 80189c0:	4801      	ldr	r0, [pc, #4]	; (80189c8 <__sfp_lock_acquire+0x8>)
 80189c2:	f000 b8f2 	b.w	8018baa <__retarget_lock_acquire_recursive>
 80189c6:	bf00      	nop
 80189c8:	20015400 	.word	0x20015400

080189cc <__sfp_lock_release>:
 80189cc:	4801      	ldr	r0, [pc, #4]	; (80189d4 <__sfp_lock_release+0x8>)
 80189ce:	f000 b8ed 	b.w	8018bac <__retarget_lock_release_recursive>
 80189d2:	bf00      	nop
 80189d4:	20015400 	.word	0x20015400

080189d8 <__sinit_lock_acquire>:
 80189d8:	4801      	ldr	r0, [pc, #4]	; (80189e0 <__sinit_lock_acquire+0x8>)
 80189da:	f000 b8e6 	b.w	8018baa <__retarget_lock_acquire_recursive>
 80189de:	bf00      	nop
 80189e0:	200153fb 	.word	0x200153fb

080189e4 <__sinit_lock_release>:
 80189e4:	4801      	ldr	r0, [pc, #4]	; (80189ec <__sinit_lock_release+0x8>)
 80189e6:	f000 b8e1 	b.w	8018bac <__retarget_lock_release_recursive>
 80189ea:	bf00      	nop
 80189ec:	200153fb 	.word	0x200153fb

080189f0 <__sinit>:
 80189f0:	b510      	push	{r4, lr}
 80189f2:	4604      	mov	r4, r0
 80189f4:	f7ff fff0 	bl	80189d8 <__sinit_lock_acquire>
 80189f8:	69a3      	ldr	r3, [r4, #24]
 80189fa:	b11b      	cbz	r3, 8018a04 <__sinit+0x14>
 80189fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018a00:	f7ff bff0 	b.w	80189e4 <__sinit_lock_release>
 8018a04:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018a08:	6523      	str	r3, [r4, #80]	; 0x50
 8018a0a:	4b13      	ldr	r3, [pc, #76]	; (8018a58 <__sinit+0x68>)
 8018a0c:	4a13      	ldr	r2, [pc, #76]	; (8018a5c <__sinit+0x6c>)
 8018a0e:	681b      	ldr	r3, [r3, #0]
 8018a10:	62a2      	str	r2, [r4, #40]	; 0x28
 8018a12:	42a3      	cmp	r3, r4
 8018a14:	bf04      	itt	eq
 8018a16:	2301      	moveq	r3, #1
 8018a18:	61a3      	streq	r3, [r4, #24]
 8018a1a:	4620      	mov	r0, r4
 8018a1c:	f000 f820 	bl	8018a60 <__sfp>
 8018a20:	6060      	str	r0, [r4, #4]
 8018a22:	4620      	mov	r0, r4
 8018a24:	f000 f81c 	bl	8018a60 <__sfp>
 8018a28:	60a0      	str	r0, [r4, #8]
 8018a2a:	4620      	mov	r0, r4
 8018a2c:	f000 f818 	bl	8018a60 <__sfp>
 8018a30:	2200      	movs	r2, #0
 8018a32:	60e0      	str	r0, [r4, #12]
 8018a34:	2104      	movs	r1, #4
 8018a36:	6860      	ldr	r0, [r4, #4]
 8018a38:	f7ff ff82 	bl	8018940 <std>
 8018a3c:	68a0      	ldr	r0, [r4, #8]
 8018a3e:	2201      	movs	r2, #1
 8018a40:	2109      	movs	r1, #9
 8018a42:	f7ff ff7d 	bl	8018940 <std>
 8018a46:	68e0      	ldr	r0, [r4, #12]
 8018a48:	2202      	movs	r2, #2
 8018a4a:	2112      	movs	r1, #18
 8018a4c:	f7ff ff78 	bl	8018940 <std>
 8018a50:	2301      	movs	r3, #1
 8018a52:	61a3      	str	r3, [r4, #24]
 8018a54:	e7d2      	b.n	80189fc <__sinit+0xc>
 8018a56:	bf00      	nop
 8018a58:	08020aec 	.word	0x08020aec
 8018a5c:	08018989 	.word	0x08018989

08018a60 <__sfp>:
 8018a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a62:	4607      	mov	r7, r0
 8018a64:	f7ff ffac 	bl	80189c0 <__sfp_lock_acquire>
 8018a68:	4b1e      	ldr	r3, [pc, #120]	; (8018ae4 <__sfp+0x84>)
 8018a6a:	681e      	ldr	r6, [r3, #0]
 8018a6c:	69b3      	ldr	r3, [r6, #24]
 8018a6e:	b913      	cbnz	r3, 8018a76 <__sfp+0x16>
 8018a70:	4630      	mov	r0, r6
 8018a72:	f7ff ffbd 	bl	80189f0 <__sinit>
 8018a76:	3648      	adds	r6, #72	; 0x48
 8018a78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	d503      	bpl.n	8018a88 <__sfp+0x28>
 8018a80:	6833      	ldr	r3, [r6, #0]
 8018a82:	b30b      	cbz	r3, 8018ac8 <__sfp+0x68>
 8018a84:	6836      	ldr	r6, [r6, #0]
 8018a86:	e7f7      	b.n	8018a78 <__sfp+0x18>
 8018a88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018a8c:	b9d5      	cbnz	r5, 8018ac4 <__sfp+0x64>
 8018a8e:	4b16      	ldr	r3, [pc, #88]	; (8018ae8 <__sfp+0x88>)
 8018a90:	60e3      	str	r3, [r4, #12]
 8018a92:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018a96:	6665      	str	r5, [r4, #100]	; 0x64
 8018a98:	f000 f886 	bl	8018ba8 <__retarget_lock_init_recursive>
 8018a9c:	f7ff ff96 	bl	80189cc <__sfp_lock_release>
 8018aa0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018aa4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018aa8:	6025      	str	r5, [r4, #0]
 8018aaa:	61a5      	str	r5, [r4, #24]
 8018aac:	2208      	movs	r2, #8
 8018aae:	4629      	mov	r1, r5
 8018ab0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018ab4:	f000 f89a 	bl	8018bec <memset>
 8018ab8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018abc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018ac0:	4620      	mov	r0, r4
 8018ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ac4:	3468      	adds	r4, #104	; 0x68
 8018ac6:	e7d9      	b.n	8018a7c <__sfp+0x1c>
 8018ac8:	2104      	movs	r1, #4
 8018aca:	4638      	mov	r0, r7
 8018acc:	f7ff ff62 	bl	8018994 <__sfmoreglue>
 8018ad0:	4604      	mov	r4, r0
 8018ad2:	6030      	str	r0, [r6, #0]
 8018ad4:	2800      	cmp	r0, #0
 8018ad6:	d1d5      	bne.n	8018a84 <__sfp+0x24>
 8018ad8:	f7ff ff78 	bl	80189cc <__sfp_lock_release>
 8018adc:	230c      	movs	r3, #12
 8018ade:	603b      	str	r3, [r7, #0]
 8018ae0:	e7ee      	b.n	8018ac0 <__sfp+0x60>
 8018ae2:	bf00      	nop
 8018ae4:	08020aec 	.word	0x08020aec
 8018ae8:	ffff0001 	.word	0xffff0001

08018aec <_fwalk_reent>:
 8018aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018af0:	4606      	mov	r6, r0
 8018af2:	4688      	mov	r8, r1
 8018af4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018af8:	2700      	movs	r7, #0
 8018afa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018afe:	f1b9 0901 	subs.w	r9, r9, #1
 8018b02:	d505      	bpl.n	8018b10 <_fwalk_reent+0x24>
 8018b04:	6824      	ldr	r4, [r4, #0]
 8018b06:	2c00      	cmp	r4, #0
 8018b08:	d1f7      	bne.n	8018afa <_fwalk_reent+0xe>
 8018b0a:	4638      	mov	r0, r7
 8018b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018b10:	89ab      	ldrh	r3, [r5, #12]
 8018b12:	2b01      	cmp	r3, #1
 8018b14:	d907      	bls.n	8018b26 <_fwalk_reent+0x3a>
 8018b16:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018b1a:	3301      	adds	r3, #1
 8018b1c:	d003      	beq.n	8018b26 <_fwalk_reent+0x3a>
 8018b1e:	4629      	mov	r1, r5
 8018b20:	4630      	mov	r0, r6
 8018b22:	47c0      	blx	r8
 8018b24:	4307      	orrs	r7, r0
 8018b26:	3568      	adds	r5, #104	; 0x68
 8018b28:	e7e9      	b.n	8018afe <_fwalk_reent+0x12>
	...

08018b2c <__libc_init_array>:
 8018b2c:	b570      	push	{r4, r5, r6, lr}
 8018b2e:	4d0d      	ldr	r5, [pc, #52]	; (8018b64 <__libc_init_array+0x38>)
 8018b30:	4c0d      	ldr	r4, [pc, #52]	; (8018b68 <__libc_init_array+0x3c>)
 8018b32:	1b64      	subs	r4, r4, r5
 8018b34:	10a4      	asrs	r4, r4, #2
 8018b36:	2600      	movs	r6, #0
 8018b38:	42a6      	cmp	r6, r4
 8018b3a:	d109      	bne.n	8018b50 <__libc_init_array+0x24>
 8018b3c:	4d0b      	ldr	r5, [pc, #44]	; (8018b6c <__libc_init_array+0x40>)
 8018b3e:	4c0c      	ldr	r4, [pc, #48]	; (8018b70 <__libc_init_array+0x44>)
 8018b40:	f003 fa04 	bl	801bf4c <_init>
 8018b44:	1b64      	subs	r4, r4, r5
 8018b46:	10a4      	asrs	r4, r4, #2
 8018b48:	2600      	movs	r6, #0
 8018b4a:	42a6      	cmp	r6, r4
 8018b4c:	d105      	bne.n	8018b5a <__libc_init_array+0x2e>
 8018b4e:	bd70      	pop	{r4, r5, r6, pc}
 8018b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b54:	4798      	blx	r3
 8018b56:	3601      	adds	r6, #1
 8018b58:	e7ee      	b.n	8018b38 <__libc_init_array+0xc>
 8018b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b5e:	4798      	blx	r3
 8018b60:	3601      	adds	r6, #1
 8018b62:	e7f2      	b.n	8018b4a <__libc_init_array+0x1e>
 8018b64:	08020f10 	.word	0x08020f10
 8018b68:	08020f10 	.word	0x08020f10
 8018b6c:	08020f10 	.word	0x08020f10
 8018b70:	08020f14 	.word	0x08020f14

08018b74 <__itoa>:
 8018b74:	1e93      	subs	r3, r2, #2
 8018b76:	2b22      	cmp	r3, #34	; 0x22
 8018b78:	b510      	push	{r4, lr}
 8018b7a:	460c      	mov	r4, r1
 8018b7c:	d904      	bls.n	8018b88 <__itoa+0x14>
 8018b7e:	2300      	movs	r3, #0
 8018b80:	700b      	strb	r3, [r1, #0]
 8018b82:	461c      	mov	r4, r3
 8018b84:	4620      	mov	r0, r4
 8018b86:	bd10      	pop	{r4, pc}
 8018b88:	2a0a      	cmp	r2, #10
 8018b8a:	d109      	bne.n	8018ba0 <__itoa+0x2c>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	da07      	bge.n	8018ba0 <__itoa+0x2c>
 8018b90:	232d      	movs	r3, #45	; 0x2d
 8018b92:	700b      	strb	r3, [r1, #0]
 8018b94:	4240      	negs	r0, r0
 8018b96:	2101      	movs	r1, #1
 8018b98:	4421      	add	r1, r4
 8018b9a:	f000 fe37 	bl	801980c <__utoa>
 8018b9e:	e7f1      	b.n	8018b84 <__itoa+0x10>
 8018ba0:	2100      	movs	r1, #0
 8018ba2:	e7f9      	b.n	8018b98 <__itoa+0x24>

08018ba4 <itoa>:
 8018ba4:	f7ff bfe6 	b.w	8018b74 <__itoa>

08018ba8 <__retarget_lock_init_recursive>:
 8018ba8:	4770      	bx	lr

08018baa <__retarget_lock_acquire_recursive>:
 8018baa:	4770      	bx	lr

08018bac <__retarget_lock_release_recursive>:
 8018bac:	4770      	bx	lr
	...

08018bb0 <malloc>:
 8018bb0:	4b02      	ldr	r3, [pc, #8]	; (8018bbc <malloc+0xc>)
 8018bb2:	4601      	mov	r1, r0
 8018bb4:	6818      	ldr	r0, [r3, #0]
 8018bb6:	f000 b871 	b.w	8018c9c <_malloc_r>
 8018bba:	bf00      	nop
 8018bbc:	2000025c 	.word	0x2000025c

08018bc0 <free>:
 8018bc0:	4b02      	ldr	r3, [pc, #8]	; (8018bcc <free+0xc>)
 8018bc2:	4601      	mov	r1, r0
 8018bc4:	6818      	ldr	r0, [r3, #0]
 8018bc6:	f000 b819 	b.w	8018bfc <_free_r>
 8018bca:	bf00      	nop
 8018bcc:	2000025c 	.word	0x2000025c

08018bd0 <memcpy>:
 8018bd0:	440a      	add	r2, r1
 8018bd2:	4291      	cmp	r1, r2
 8018bd4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018bd8:	d100      	bne.n	8018bdc <memcpy+0xc>
 8018bda:	4770      	bx	lr
 8018bdc:	b510      	push	{r4, lr}
 8018bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018be6:	4291      	cmp	r1, r2
 8018be8:	d1f9      	bne.n	8018bde <memcpy+0xe>
 8018bea:	bd10      	pop	{r4, pc}

08018bec <memset>:
 8018bec:	4402      	add	r2, r0
 8018bee:	4603      	mov	r3, r0
 8018bf0:	4293      	cmp	r3, r2
 8018bf2:	d100      	bne.n	8018bf6 <memset+0xa>
 8018bf4:	4770      	bx	lr
 8018bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8018bfa:	e7f9      	b.n	8018bf0 <memset+0x4>

08018bfc <_free_r>:
 8018bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bfe:	2900      	cmp	r1, #0
 8018c00:	d048      	beq.n	8018c94 <_free_r+0x98>
 8018c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018c06:	9001      	str	r0, [sp, #4]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8018c0e:	bfb8      	it	lt
 8018c10:	18e4      	addlt	r4, r4, r3
 8018c12:	f001 fdb1 	bl	801a778 <__malloc_lock>
 8018c16:	4a20      	ldr	r2, [pc, #128]	; (8018c98 <_free_r+0x9c>)
 8018c18:	9801      	ldr	r0, [sp, #4]
 8018c1a:	6813      	ldr	r3, [r2, #0]
 8018c1c:	4615      	mov	r5, r2
 8018c1e:	b933      	cbnz	r3, 8018c2e <_free_r+0x32>
 8018c20:	6063      	str	r3, [r4, #4]
 8018c22:	6014      	str	r4, [r2, #0]
 8018c24:	b003      	add	sp, #12
 8018c26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018c2a:	f001 bdab 	b.w	801a784 <__malloc_unlock>
 8018c2e:	42a3      	cmp	r3, r4
 8018c30:	d90b      	bls.n	8018c4a <_free_r+0x4e>
 8018c32:	6821      	ldr	r1, [r4, #0]
 8018c34:	1862      	adds	r2, r4, r1
 8018c36:	4293      	cmp	r3, r2
 8018c38:	bf04      	itt	eq
 8018c3a:	681a      	ldreq	r2, [r3, #0]
 8018c3c:	685b      	ldreq	r3, [r3, #4]
 8018c3e:	6063      	str	r3, [r4, #4]
 8018c40:	bf04      	itt	eq
 8018c42:	1852      	addeq	r2, r2, r1
 8018c44:	6022      	streq	r2, [r4, #0]
 8018c46:	602c      	str	r4, [r5, #0]
 8018c48:	e7ec      	b.n	8018c24 <_free_r+0x28>
 8018c4a:	461a      	mov	r2, r3
 8018c4c:	685b      	ldr	r3, [r3, #4]
 8018c4e:	b10b      	cbz	r3, 8018c54 <_free_r+0x58>
 8018c50:	42a3      	cmp	r3, r4
 8018c52:	d9fa      	bls.n	8018c4a <_free_r+0x4e>
 8018c54:	6811      	ldr	r1, [r2, #0]
 8018c56:	1855      	adds	r5, r2, r1
 8018c58:	42a5      	cmp	r5, r4
 8018c5a:	d10b      	bne.n	8018c74 <_free_r+0x78>
 8018c5c:	6824      	ldr	r4, [r4, #0]
 8018c5e:	4421      	add	r1, r4
 8018c60:	1854      	adds	r4, r2, r1
 8018c62:	42a3      	cmp	r3, r4
 8018c64:	6011      	str	r1, [r2, #0]
 8018c66:	d1dd      	bne.n	8018c24 <_free_r+0x28>
 8018c68:	681c      	ldr	r4, [r3, #0]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	6053      	str	r3, [r2, #4]
 8018c6e:	4421      	add	r1, r4
 8018c70:	6011      	str	r1, [r2, #0]
 8018c72:	e7d7      	b.n	8018c24 <_free_r+0x28>
 8018c74:	d902      	bls.n	8018c7c <_free_r+0x80>
 8018c76:	230c      	movs	r3, #12
 8018c78:	6003      	str	r3, [r0, #0]
 8018c7a:	e7d3      	b.n	8018c24 <_free_r+0x28>
 8018c7c:	6825      	ldr	r5, [r4, #0]
 8018c7e:	1961      	adds	r1, r4, r5
 8018c80:	428b      	cmp	r3, r1
 8018c82:	bf04      	itt	eq
 8018c84:	6819      	ldreq	r1, [r3, #0]
 8018c86:	685b      	ldreq	r3, [r3, #4]
 8018c88:	6063      	str	r3, [r4, #4]
 8018c8a:	bf04      	itt	eq
 8018c8c:	1949      	addeq	r1, r1, r5
 8018c8e:	6021      	streq	r1, [r4, #0]
 8018c90:	6054      	str	r4, [r2, #4]
 8018c92:	e7c7      	b.n	8018c24 <_free_r+0x28>
 8018c94:	b003      	add	sp, #12
 8018c96:	bd30      	pop	{r4, r5, pc}
 8018c98:	20007704 	.word	0x20007704

08018c9c <_malloc_r>:
 8018c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c9e:	1ccd      	adds	r5, r1, #3
 8018ca0:	f025 0503 	bic.w	r5, r5, #3
 8018ca4:	3508      	adds	r5, #8
 8018ca6:	2d0c      	cmp	r5, #12
 8018ca8:	bf38      	it	cc
 8018caa:	250c      	movcc	r5, #12
 8018cac:	2d00      	cmp	r5, #0
 8018cae:	4606      	mov	r6, r0
 8018cb0:	db01      	blt.n	8018cb6 <_malloc_r+0x1a>
 8018cb2:	42a9      	cmp	r1, r5
 8018cb4:	d903      	bls.n	8018cbe <_malloc_r+0x22>
 8018cb6:	230c      	movs	r3, #12
 8018cb8:	6033      	str	r3, [r6, #0]
 8018cba:	2000      	movs	r0, #0
 8018cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018cbe:	f001 fd5b 	bl	801a778 <__malloc_lock>
 8018cc2:	4921      	ldr	r1, [pc, #132]	; (8018d48 <_malloc_r+0xac>)
 8018cc4:	680a      	ldr	r2, [r1, #0]
 8018cc6:	4614      	mov	r4, r2
 8018cc8:	b99c      	cbnz	r4, 8018cf2 <_malloc_r+0x56>
 8018cca:	4f20      	ldr	r7, [pc, #128]	; (8018d4c <_malloc_r+0xb0>)
 8018ccc:	683b      	ldr	r3, [r7, #0]
 8018cce:	b923      	cbnz	r3, 8018cda <_malloc_r+0x3e>
 8018cd0:	4621      	mov	r1, r4
 8018cd2:	4630      	mov	r0, r6
 8018cd4:	f000 fd10 	bl	80196f8 <_sbrk_r>
 8018cd8:	6038      	str	r0, [r7, #0]
 8018cda:	4629      	mov	r1, r5
 8018cdc:	4630      	mov	r0, r6
 8018cde:	f000 fd0b 	bl	80196f8 <_sbrk_r>
 8018ce2:	1c43      	adds	r3, r0, #1
 8018ce4:	d123      	bne.n	8018d2e <_malloc_r+0x92>
 8018ce6:	230c      	movs	r3, #12
 8018ce8:	6033      	str	r3, [r6, #0]
 8018cea:	4630      	mov	r0, r6
 8018cec:	f001 fd4a 	bl	801a784 <__malloc_unlock>
 8018cf0:	e7e3      	b.n	8018cba <_malloc_r+0x1e>
 8018cf2:	6823      	ldr	r3, [r4, #0]
 8018cf4:	1b5b      	subs	r3, r3, r5
 8018cf6:	d417      	bmi.n	8018d28 <_malloc_r+0x8c>
 8018cf8:	2b0b      	cmp	r3, #11
 8018cfa:	d903      	bls.n	8018d04 <_malloc_r+0x68>
 8018cfc:	6023      	str	r3, [r4, #0]
 8018cfe:	441c      	add	r4, r3
 8018d00:	6025      	str	r5, [r4, #0]
 8018d02:	e004      	b.n	8018d0e <_malloc_r+0x72>
 8018d04:	6863      	ldr	r3, [r4, #4]
 8018d06:	42a2      	cmp	r2, r4
 8018d08:	bf0c      	ite	eq
 8018d0a:	600b      	streq	r3, [r1, #0]
 8018d0c:	6053      	strne	r3, [r2, #4]
 8018d0e:	4630      	mov	r0, r6
 8018d10:	f001 fd38 	bl	801a784 <__malloc_unlock>
 8018d14:	f104 000b 	add.w	r0, r4, #11
 8018d18:	1d23      	adds	r3, r4, #4
 8018d1a:	f020 0007 	bic.w	r0, r0, #7
 8018d1e:	1ac2      	subs	r2, r0, r3
 8018d20:	d0cc      	beq.n	8018cbc <_malloc_r+0x20>
 8018d22:	1a1b      	subs	r3, r3, r0
 8018d24:	50a3      	str	r3, [r4, r2]
 8018d26:	e7c9      	b.n	8018cbc <_malloc_r+0x20>
 8018d28:	4622      	mov	r2, r4
 8018d2a:	6864      	ldr	r4, [r4, #4]
 8018d2c:	e7cc      	b.n	8018cc8 <_malloc_r+0x2c>
 8018d2e:	1cc4      	adds	r4, r0, #3
 8018d30:	f024 0403 	bic.w	r4, r4, #3
 8018d34:	42a0      	cmp	r0, r4
 8018d36:	d0e3      	beq.n	8018d00 <_malloc_r+0x64>
 8018d38:	1a21      	subs	r1, r4, r0
 8018d3a:	4630      	mov	r0, r6
 8018d3c:	f000 fcdc 	bl	80196f8 <_sbrk_r>
 8018d40:	3001      	adds	r0, #1
 8018d42:	d1dd      	bne.n	8018d00 <_malloc_r+0x64>
 8018d44:	e7cf      	b.n	8018ce6 <_malloc_r+0x4a>
 8018d46:	bf00      	nop
 8018d48:	20007704 	.word	0x20007704
 8018d4c:	20007708 	.word	0x20007708

08018d50 <__cvt>:
 8018d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018d54:	ec55 4b10 	vmov	r4, r5, d0
 8018d58:	2d00      	cmp	r5, #0
 8018d5a:	460e      	mov	r6, r1
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	462b      	mov	r3, r5
 8018d60:	bfbb      	ittet	lt
 8018d62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8018d66:	461d      	movlt	r5, r3
 8018d68:	2300      	movge	r3, #0
 8018d6a:	232d      	movlt	r3, #45	; 0x2d
 8018d6c:	700b      	strb	r3, [r1, #0]
 8018d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018d70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8018d74:	4691      	mov	r9, r2
 8018d76:	f023 0820 	bic.w	r8, r3, #32
 8018d7a:	bfbc      	itt	lt
 8018d7c:	4622      	movlt	r2, r4
 8018d7e:	4614      	movlt	r4, r2
 8018d80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018d84:	d005      	beq.n	8018d92 <__cvt+0x42>
 8018d86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8018d8a:	d100      	bne.n	8018d8e <__cvt+0x3e>
 8018d8c:	3601      	adds	r6, #1
 8018d8e:	2102      	movs	r1, #2
 8018d90:	e000      	b.n	8018d94 <__cvt+0x44>
 8018d92:	2103      	movs	r1, #3
 8018d94:	ab03      	add	r3, sp, #12
 8018d96:	9301      	str	r3, [sp, #4]
 8018d98:	ab02      	add	r3, sp, #8
 8018d9a:	9300      	str	r3, [sp, #0]
 8018d9c:	ec45 4b10 	vmov	d0, r4, r5
 8018da0:	4653      	mov	r3, sl
 8018da2:	4632      	mov	r2, r6
 8018da4:	f000 fe24 	bl	80199f0 <_dtoa_r>
 8018da8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018dac:	4607      	mov	r7, r0
 8018dae:	d102      	bne.n	8018db6 <__cvt+0x66>
 8018db0:	f019 0f01 	tst.w	r9, #1
 8018db4:	d022      	beq.n	8018dfc <__cvt+0xac>
 8018db6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018dba:	eb07 0906 	add.w	r9, r7, r6
 8018dbe:	d110      	bne.n	8018de2 <__cvt+0x92>
 8018dc0:	783b      	ldrb	r3, [r7, #0]
 8018dc2:	2b30      	cmp	r3, #48	; 0x30
 8018dc4:	d10a      	bne.n	8018ddc <__cvt+0x8c>
 8018dc6:	2200      	movs	r2, #0
 8018dc8:	2300      	movs	r3, #0
 8018dca:	4620      	mov	r0, r4
 8018dcc:	4629      	mov	r1, r5
 8018dce:	f7e7 fe7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8018dd2:	b918      	cbnz	r0, 8018ddc <__cvt+0x8c>
 8018dd4:	f1c6 0601 	rsb	r6, r6, #1
 8018dd8:	f8ca 6000 	str.w	r6, [sl]
 8018ddc:	f8da 3000 	ldr.w	r3, [sl]
 8018de0:	4499      	add	r9, r3
 8018de2:	2200      	movs	r2, #0
 8018de4:	2300      	movs	r3, #0
 8018de6:	4620      	mov	r0, r4
 8018de8:	4629      	mov	r1, r5
 8018dea:	f7e7 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8018dee:	b108      	cbz	r0, 8018df4 <__cvt+0xa4>
 8018df0:	f8cd 900c 	str.w	r9, [sp, #12]
 8018df4:	2230      	movs	r2, #48	; 0x30
 8018df6:	9b03      	ldr	r3, [sp, #12]
 8018df8:	454b      	cmp	r3, r9
 8018dfa:	d307      	bcc.n	8018e0c <__cvt+0xbc>
 8018dfc:	9b03      	ldr	r3, [sp, #12]
 8018dfe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018e00:	1bdb      	subs	r3, r3, r7
 8018e02:	4638      	mov	r0, r7
 8018e04:	6013      	str	r3, [r2, #0]
 8018e06:	b004      	add	sp, #16
 8018e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e0c:	1c59      	adds	r1, r3, #1
 8018e0e:	9103      	str	r1, [sp, #12]
 8018e10:	701a      	strb	r2, [r3, #0]
 8018e12:	e7f0      	b.n	8018df6 <__cvt+0xa6>

08018e14 <__exponent>:
 8018e14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018e16:	4603      	mov	r3, r0
 8018e18:	2900      	cmp	r1, #0
 8018e1a:	bfb8      	it	lt
 8018e1c:	4249      	neglt	r1, r1
 8018e1e:	f803 2b02 	strb.w	r2, [r3], #2
 8018e22:	bfb4      	ite	lt
 8018e24:	222d      	movlt	r2, #45	; 0x2d
 8018e26:	222b      	movge	r2, #43	; 0x2b
 8018e28:	2909      	cmp	r1, #9
 8018e2a:	7042      	strb	r2, [r0, #1]
 8018e2c:	dd2a      	ble.n	8018e84 <__exponent+0x70>
 8018e2e:	f10d 0407 	add.w	r4, sp, #7
 8018e32:	46a4      	mov	ip, r4
 8018e34:	270a      	movs	r7, #10
 8018e36:	46a6      	mov	lr, r4
 8018e38:	460a      	mov	r2, r1
 8018e3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8018e3e:	fb07 1516 	mls	r5, r7, r6, r1
 8018e42:	3530      	adds	r5, #48	; 0x30
 8018e44:	2a63      	cmp	r2, #99	; 0x63
 8018e46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8018e4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8018e4e:	4631      	mov	r1, r6
 8018e50:	dcf1      	bgt.n	8018e36 <__exponent+0x22>
 8018e52:	3130      	adds	r1, #48	; 0x30
 8018e54:	f1ae 0502 	sub.w	r5, lr, #2
 8018e58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8018e5c:	1c44      	adds	r4, r0, #1
 8018e5e:	4629      	mov	r1, r5
 8018e60:	4561      	cmp	r1, ip
 8018e62:	d30a      	bcc.n	8018e7a <__exponent+0x66>
 8018e64:	f10d 0209 	add.w	r2, sp, #9
 8018e68:	eba2 020e 	sub.w	r2, r2, lr
 8018e6c:	4565      	cmp	r5, ip
 8018e6e:	bf88      	it	hi
 8018e70:	2200      	movhi	r2, #0
 8018e72:	4413      	add	r3, r2
 8018e74:	1a18      	subs	r0, r3, r0
 8018e76:	b003      	add	sp, #12
 8018e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018e7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8018e82:	e7ed      	b.n	8018e60 <__exponent+0x4c>
 8018e84:	2330      	movs	r3, #48	; 0x30
 8018e86:	3130      	adds	r1, #48	; 0x30
 8018e88:	7083      	strb	r3, [r0, #2]
 8018e8a:	70c1      	strb	r1, [r0, #3]
 8018e8c:	1d03      	adds	r3, r0, #4
 8018e8e:	e7f1      	b.n	8018e74 <__exponent+0x60>

08018e90 <_printf_float>:
 8018e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e94:	ed2d 8b02 	vpush	{d8}
 8018e98:	b08d      	sub	sp, #52	; 0x34
 8018e9a:	460c      	mov	r4, r1
 8018e9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8018ea0:	4616      	mov	r6, r2
 8018ea2:	461f      	mov	r7, r3
 8018ea4:	4605      	mov	r5, r0
 8018ea6:	f001 fc51 	bl	801a74c <_localeconv_r>
 8018eaa:	f8d0 a000 	ldr.w	sl, [r0]
 8018eae:	4650      	mov	r0, sl
 8018eb0:	f7e7 f98e 	bl	80001d0 <strlen>
 8018eb4:	2300      	movs	r3, #0
 8018eb6:	930a      	str	r3, [sp, #40]	; 0x28
 8018eb8:	6823      	ldr	r3, [r4, #0]
 8018eba:	9305      	str	r3, [sp, #20]
 8018ebc:	f8d8 3000 	ldr.w	r3, [r8]
 8018ec0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8018ec4:	3307      	adds	r3, #7
 8018ec6:	f023 0307 	bic.w	r3, r3, #7
 8018eca:	f103 0208 	add.w	r2, r3, #8
 8018ece:	f8c8 2000 	str.w	r2, [r8]
 8018ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018eda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018ede:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8018ee2:	9307      	str	r3, [sp, #28]
 8018ee4:	f8cd 8018 	str.w	r8, [sp, #24]
 8018ee8:	ee08 0a10 	vmov	s16, r0
 8018eec:	4b9f      	ldr	r3, [pc, #636]	; (801916c <_printf_float+0x2dc>)
 8018eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018ef2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ef6:	f7e7 fe19 	bl	8000b2c <__aeabi_dcmpun>
 8018efa:	bb88      	cbnz	r0, 8018f60 <_printf_float+0xd0>
 8018efc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018f00:	4b9a      	ldr	r3, [pc, #616]	; (801916c <_printf_float+0x2dc>)
 8018f02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018f06:	f7e7 fdf3 	bl	8000af0 <__aeabi_dcmple>
 8018f0a:	bb48      	cbnz	r0, 8018f60 <_printf_float+0xd0>
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	2300      	movs	r3, #0
 8018f10:	4640      	mov	r0, r8
 8018f12:	4649      	mov	r1, r9
 8018f14:	f7e7 fde2 	bl	8000adc <__aeabi_dcmplt>
 8018f18:	b110      	cbz	r0, 8018f20 <_printf_float+0x90>
 8018f1a:	232d      	movs	r3, #45	; 0x2d
 8018f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018f20:	4b93      	ldr	r3, [pc, #588]	; (8019170 <_printf_float+0x2e0>)
 8018f22:	4894      	ldr	r0, [pc, #592]	; (8019174 <_printf_float+0x2e4>)
 8018f24:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018f28:	bf94      	ite	ls
 8018f2a:	4698      	movls	r8, r3
 8018f2c:	4680      	movhi	r8, r0
 8018f2e:	2303      	movs	r3, #3
 8018f30:	6123      	str	r3, [r4, #16]
 8018f32:	9b05      	ldr	r3, [sp, #20]
 8018f34:	f023 0204 	bic.w	r2, r3, #4
 8018f38:	6022      	str	r2, [r4, #0]
 8018f3a:	f04f 0900 	mov.w	r9, #0
 8018f3e:	9700      	str	r7, [sp, #0]
 8018f40:	4633      	mov	r3, r6
 8018f42:	aa0b      	add	r2, sp, #44	; 0x2c
 8018f44:	4621      	mov	r1, r4
 8018f46:	4628      	mov	r0, r5
 8018f48:	f000 f9d8 	bl	80192fc <_printf_common>
 8018f4c:	3001      	adds	r0, #1
 8018f4e:	f040 8090 	bne.w	8019072 <_printf_float+0x1e2>
 8018f52:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018f56:	b00d      	add	sp, #52	; 0x34
 8018f58:	ecbd 8b02 	vpop	{d8}
 8018f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f60:	4642      	mov	r2, r8
 8018f62:	464b      	mov	r3, r9
 8018f64:	4640      	mov	r0, r8
 8018f66:	4649      	mov	r1, r9
 8018f68:	f7e7 fde0 	bl	8000b2c <__aeabi_dcmpun>
 8018f6c:	b140      	cbz	r0, 8018f80 <_printf_float+0xf0>
 8018f6e:	464b      	mov	r3, r9
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	bfbc      	itt	lt
 8018f74:	232d      	movlt	r3, #45	; 0x2d
 8018f76:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8018f7a:	487f      	ldr	r0, [pc, #508]	; (8019178 <_printf_float+0x2e8>)
 8018f7c:	4b7f      	ldr	r3, [pc, #508]	; (801917c <_printf_float+0x2ec>)
 8018f7e:	e7d1      	b.n	8018f24 <_printf_float+0x94>
 8018f80:	6863      	ldr	r3, [r4, #4]
 8018f82:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8018f86:	9206      	str	r2, [sp, #24]
 8018f88:	1c5a      	adds	r2, r3, #1
 8018f8a:	d13f      	bne.n	801900c <_printf_float+0x17c>
 8018f8c:	2306      	movs	r3, #6
 8018f8e:	6063      	str	r3, [r4, #4]
 8018f90:	9b05      	ldr	r3, [sp, #20]
 8018f92:	6861      	ldr	r1, [r4, #4]
 8018f94:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8018f98:	2300      	movs	r3, #0
 8018f9a:	9303      	str	r3, [sp, #12]
 8018f9c:	ab0a      	add	r3, sp, #40	; 0x28
 8018f9e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8018fa2:	ab09      	add	r3, sp, #36	; 0x24
 8018fa4:	ec49 8b10 	vmov	d0, r8, r9
 8018fa8:	9300      	str	r3, [sp, #0]
 8018faa:	6022      	str	r2, [r4, #0]
 8018fac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018fb0:	4628      	mov	r0, r5
 8018fb2:	f7ff fecd 	bl	8018d50 <__cvt>
 8018fb6:	9b06      	ldr	r3, [sp, #24]
 8018fb8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018fba:	2b47      	cmp	r3, #71	; 0x47
 8018fbc:	4680      	mov	r8, r0
 8018fbe:	d108      	bne.n	8018fd2 <_printf_float+0x142>
 8018fc0:	1cc8      	adds	r0, r1, #3
 8018fc2:	db02      	blt.n	8018fca <_printf_float+0x13a>
 8018fc4:	6863      	ldr	r3, [r4, #4]
 8018fc6:	4299      	cmp	r1, r3
 8018fc8:	dd41      	ble.n	801904e <_printf_float+0x1be>
 8018fca:	f1ab 0b02 	sub.w	fp, fp, #2
 8018fce:	fa5f fb8b 	uxtb.w	fp, fp
 8018fd2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8018fd6:	d820      	bhi.n	801901a <_printf_float+0x18a>
 8018fd8:	3901      	subs	r1, #1
 8018fda:	465a      	mov	r2, fp
 8018fdc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018fe0:	9109      	str	r1, [sp, #36]	; 0x24
 8018fe2:	f7ff ff17 	bl	8018e14 <__exponent>
 8018fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018fe8:	1813      	adds	r3, r2, r0
 8018fea:	2a01      	cmp	r2, #1
 8018fec:	4681      	mov	r9, r0
 8018fee:	6123      	str	r3, [r4, #16]
 8018ff0:	dc02      	bgt.n	8018ff8 <_printf_float+0x168>
 8018ff2:	6822      	ldr	r2, [r4, #0]
 8018ff4:	07d2      	lsls	r2, r2, #31
 8018ff6:	d501      	bpl.n	8018ffc <_printf_float+0x16c>
 8018ff8:	3301      	adds	r3, #1
 8018ffa:	6123      	str	r3, [r4, #16]
 8018ffc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8019000:	2b00      	cmp	r3, #0
 8019002:	d09c      	beq.n	8018f3e <_printf_float+0xae>
 8019004:	232d      	movs	r3, #45	; 0x2d
 8019006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801900a:	e798      	b.n	8018f3e <_printf_float+0xae>
 801900c:	9a06      	ldr	r2, [sp, #24]
 801900e:	2a47      	cmp	r2, #71	; 0x47
 8019010:	d1be      	bne.n	8018f90 <_printf_float+0x100>
 8019012:	2b00      	cmp	r3, #0
 8019014:	d1bc      	bne.n	8018f90 <_printf_float+0x100>
 8019016:	2301      	movs	r3, #1
 8019018:	e7b9      	b.n	8018f8e <_printf_float+0xfe>
 801901a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801901e:	d118      	bne.n	8019052 <_printf_float+0x1c2>
 8019020:	2900      	cmp	r1, #0
 8019022:	6863      	ldr	r3, [r4, #4]
 8019024:	dd0b      	ble.n	801903e <_printf_float+0x1ae>
 8019026:	6121      	str	r1, [r4, #16]
 8019028:	b913      	cbnz	r3, 8019030 <_printf_float+0x1a0>
 801902a:	6822      	ldr	r2, [r4, #0]
 801902c:	07d0      	lsls	r0, r2, #31
 801902e:	d502      	bpl.n	8019036 <_printf_float+0x1a6>
 8019030:	3301      	adds	r3, #1
 8019032:	440b      	add	r3, r1
 8019034:	6123      	str	r3, [r4, #16]
 8019036:	65a1      	str	r1, [r4, #88]	; 0x58
 8019038:	f04f 0900 	mov.w	r9, #0
 801903c:	e7de      	b.n	8018ffc <_printf_float+0x16c>
 801903e:	b913      	cbnz	r3, 8019046 <_printf_float+0x1b6>
 8019040:	6822      	ldr	r2, [r4, #0]
 8019042:	07d2      	lsls	r2, r2, #31
 8019044:	d501      	bpl.n	801904a <_printf_float+0x1ba>
 8019046:	3302      	adds	r3, #2
 8019048:	e7f4      	b.n	8019034 <_printf_float+0x1a4>
 801904a:	2301      	movs	r3, #1
 801904c:	e7f2      	b.n	8019034 <_printf_float+0x1a4>
 801904e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8019052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019054:	4299      	cmp	r1, r3
 8019056:	db05      	blt.n	8019064 <_printf_float+0x1d4>
 8019058:	6823      	ldr	r3, [r4, #0]
 801905a:	6121      	str	r1, [r4, #16]
 801905c:	07d8      	lsls	r0, r3, #31
 801905e:	d5ea      	bpl.n	8019036 <_printf_float+0x1a6>
 8019060:	1c4b      	adds	r3, r1, #1
 8019062:	e7e7      	b.n	8019034 <_printf_float+0x1a4>
 8019064:	2900      	cmp	r1, #0
 8019066:	bfd4      	ite	le
 8019068:	f1c1 0202 	rsble	r2, r1, #2
 801906c:	2201      	movgt	r2, #1
 801906e:	4413      	add	r3, r2
 8019070:	e7e0      	b.n	8019034 <_printf_float+0x1a4>
 8019072:	6823      	ldr	r3, [r4, #0]
 8019074:	055a      	lsls	r2, r3, #21
 8019076:	d407      	bmi.n	8019088 <_printf_float+0x1f8>
 8019078:	6923      	ldr	r3, [r4, #16]
 801907a:	4642      	mov	r2, r8
 801907c:	4631      	mov	r1, r6
 801907e:	4628      	mov	r0, r5
 8019080:	47b8      	blx	r7
 8019082:	3001      	adds	r0, #1
 8019084:	d12c      	bne.n	80190e0 <_printf_float+0x250>
 8019086:	e764      	b.n	8018f52 <_printf_float+0xc2>
 8019088:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801908c:	f240 80e0 	bls.w	8019250 <_printf_float+0x3c0>
 8019090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019094:	2200      	movs	r2, #0
 8019096:	2300      	movs	r3, #0
 8019098:	f7e7 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 801909c:	2800      	cmp	r0, #0
 801909e:	d034      	beq.n	801910a <_printf_float+0x27a>
 80190a0:	4a37      	ldr	r2, [pc, #220]	; (8019180 <_printf_float+0x2f0>)
 80190a2:	2301      	movs	r3, #1
 80190a4:	4631      	mov	r1, r6
 80190a6:	4628      	mov	r0, r5
 80190a8:	47b8      	blx	r7
 80190aa:	3001      	adds	r0, #1
 80190ac:	f43f af51 	beq.w	8018f52 <_printf_float+0xc2>
 80190b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80190b4:	429a      	cmp	r2, r3
 80190b6:	db02      	blt.n	80190be <_printf_float+0x22e>
 80190b8:	6823      	ldr	r3, [r4, #0]
 80190ba:	07d8      	lsls	r0, r3, #31
 80190bc:	d510      	bpl.n	80190e0 <_printf_float+0x250>
 80190be:	ee18 3a10 	vmov	r3, s16
 80190c2:	4652      	mov	r2, sl
 80190c4:	4631      	mov	r1, r6
 80190c6:	4628      	mov	r0, r5
 80190c8:	47b8      	blx	r7
 80190ca:	3001      	adds	r0, #1
 80190cc:	f43f af41 	beq.w	8018f52 <_printf_float+0xc2>
 80190d0:	f04f 0800 	mov.w	r8, #0
 80190d4:	f104 091a 	add.w	r9, r4, #26
 80190d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190da:	3b01      	subs	r3, #1
 80190dc:	4543      	cmp	r3, r8
 80190de:	dc09      	bgt.n	80190f4 <_printf_float+0x264>
 80190e0:	6823      	ldr	r3, [r4, #0]
 80190e2:	079b      	lsls	r3, r3, #30
 80190e4:	f100 8105 	bmi.w	80192f2 <_printf_float+0x462>
 80190e8:	68e0      	ldr	r0, [r4, #12]
 80190ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80190ec:	4298      	cmp	r0, r3
 80190ee:	bfb8      	it	lt
 80190f0:	4618      	movlt	r0, r3
 80190f2:	e730      	b.n	8018f56 <_printf_float+0xc6>
 80190f4:	2301      	movs	r3, #1
 80190f6:	464a      	mov	r2, r9
 80190f8:	4631      	mov	r1, r6
 80190fa:	4628      	mov	r0, r5
 80190fc:	47b8      	blx	r7
 80190fe:	3001      	adds	r0, #1
 8019100:	f43f af27 	beq.w	8018f52 <_printf_float+0xc2>
 8019104:	f108 0801 	add.w	r8, r8, #1
 8019108:	e7e6      	b.n	80190d8 <_printf_float+0x248>
 801910a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801910c:	2b00      	cmp	r3, #0
 801910e:	dc39      	bgt.n	8019184 <_printf_float+0x2f4>
 8019110:	4a1b      	ldr	r2, [pc, #108]	; (8019180 <_printf_float+0x2f0>)
 8019112:	2301      	movs	r3, #1
 8019114:	4631      	mov	r1, r6
 8019116:	4628      	mov	r0, r5
 8019118:	47b8      	blx	r7
 801911a:	3001      	adds	r0, #1
 801911c:	f43f af19 	beq.w	8018f52 <_printf_float+0xc2>
 8019120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019124:	4313      	orrs	r3, r2
 8019126:	d102      	bne.n	801912e <_printf_float+0x29e>
 8019128:	6823      	ldr	r3, [r4, #0]
 801912a:	07d9      	lsls	r1, r3, #31
 801912c:	d5d8      	bpl.n	80190e0 <_printf_float+0x250>
 801912e:	ee18 3a10 	vmov	r3, s16
 8019132:	4652      	mov	r2, sl
 8019134:	4631      	mov	r1, r6
 8019136:	4628      	mov	r0, r5
 8019138:	47b8      	blx	r7
 801913a:	3001      	adds	r0, #1
 801913c:	f43f af09 	beq.w	8018f52 <_printf_float+0xc2>
 8019140:	f04f 0900 	mov.w	r9, #0
 8019144:	f104 0a1a 	add.w	sl, r4, #26
 8019148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801914a:	425b      	negs	r3, r3
 801914c:	454b      	cmp	r3, r9
 801914e:	dc01      	bgt.n	8019154 <_printf_float+0x2c4>
 8019150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019152:	e792      	b.n	801907a <_printf_float+0x1ea>
 8019154:	2301      	movs	r3, #1
 8019156:	4652      	mov	r2, sl
 8019158:	4631      	mov	r1, r6
 801915a:	4628      	mov	r0, r5
 801915c:	47b8      	blx	r7
 801915e:	3001      	adds	r0, #1
 8019160:	f43f aef7 	beq.w	8018f52 <_printf_float+0xc2>
 8019164:	f109 0901 	add.w	r9, r9, #1
 8019168:	e7ee      	b.n	8019148 <_printf_float+0x2b8>
 801916a:	bf00      	nop
 801916c:	7fefffff 	.word	0x7fefffff
 8019170:	08020af0 	.word	0x08020af0
 8019174:	08020af4 	.word	0x08020af4
 8019178:	08020afc 	.word	0x08020afc
 801917c:	08020af8 	.word	0x08020af8
 8019180:	08020b00 	.word	0x08020b00
 8019184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019186:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019188:	429a      	cmp	r2, r3
 801918a:	bfa8      	it	ge
 801918c:	461a      	movge	r2, r3
 801918e:	2a00      	cmp	r2, #0
 8019190:	4691      	mov	r9, r2
 8019192:	dc37      	bgt.n	8019204 <_printf_float+0x374>
 8019194:	f04f 0b00 	mov.w	fp, #0
 8019198:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801919c:	f104 021a 	add.w	r2, r4, #26
 80191a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80191a2:	9305      	str	r3, [sp, #20]
 80191a4:	eba3 0309 	sub.w	r3, r3, r9
 80191a8:	455b      	cmp	r3, fp
 80191aa:	dc33      	bgt.n	8019214 <_printf_float+0x384>
 80191ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80191b0:	429a      	cmp	r2, r3
 80191b2:	db3b      	blt.n	801922c <_printf_float+0x39c>
 80191b4:	6823      	ldr	r3, [r4, #0]
 80191b6:	07da      	lsls	r2, r3, #31
 80191b8:	d438      	bmi.n	801922c <_printf_float+0x39c>
 80191ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80191bc:	9b05      	ldr	r3, [sp, #20]
 80191be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80191c0:	1ad3      	subs	r3, r2, r3
 80191c2:	eba2 0901 	sub.w	r9, r2, r1
 80191c6:	4599      	cmp	r9, r3
 80191c8:	bfa8      	it	ge
 80191ca:	4699      	movge	r9, r3
 80191cc:	f1b9 0f00 	cmp.w	r9, #0
 80191d0:	dc35      	bgt.n	801923e <_printf_float+0x3ae>
 80191d2:	f04f 0800 	mov.w	r8, #0
 80191d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80191da:	f104 0a1a 	add.w	sl, r4, #26
 80191de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80191e2:	1a9b      	subs	r3, r3, r2
 80191e4:	eba3 0309 	sub.w	r3, r3, r9
 80191e8:	4543      	cmp	r3, r8
 80191ea:	f77f af79 	ble.w	80190e0 <_printf_float+0x250>
 80191ee:	2301      	movs	r3, #1
 80191f0:	4652      	mov	r2, sl
 80191f2:	4631      	mov	r1, r6
 80191f4:	4628      	mov	r0, r5
 80191f6:	47b8      	blx	r7
 80191f8:	3001      	adds	r0, #1
 80191fa:	f43f aeaa 	beq.w	8018f52 <_printf_float+0xc2>
 80191fe:	f108 0801 	add.w	r8, r8, #1
 8019202:	e7ec      	b.n	80191de <_printf_float+0x34e>
 8019204:	4613      	mov	r3, r2
 8019206:	4631      	mov	r1, r6
 8019208:	4642      	mov	r2, r8
 801920a:	4628      	mov	r0, r5
 801920c:	47b8      	blx	r7
 801920e:	3001      	adds	r0, #1
 8019210:	d1c0      	bne.n	8019194 <_printf_float+0x304>
 8019212:	e69e      	b.n	8018f52 <_printf_float+0xc2>
 8019214:	2301      	movs	r3, #1
 8019216:	4631      	mov	r1, r6
 8019218:	4628      	mov	r0, r5
 801921a:	9205      	str	r2, [sp, #20]
 801921c:	47b8      	blx	r7
 801921e:	3001      	adds	r0, #1
 8019220:	f43f ae97 	beq.w	8018f52 <_printf_float+0xc2>
 8019224:	9a05      	ldr	r2, [sp, #20]
 8019226:	f10b 0b01 	add.w	fp, fp, #1
 801922a:	e7b9      	b.n	80191a0 <_printf_float+0x310>
 801922c:	ee18 3a10 	vmov	r3, s16
 8019230:	4652      	mov	r2, sl
 8019232:	4631      	mov	r1, r6
 8019234:	4628      	mov	r0, r5
 8019236:	47b8      	blx	r7
 8019238:	3001      	adds	r0, #1
 801923a:	d1be      	bne.n	80191ba <_printf_float+0x32a>
 801923c:	e689      	b.n	8018f52 <_printf_float+0xc2>
 801923e:	9a05      	ldr	r2, [sp, #20]
 8019240:	464b      	mov	r3, r9
 8019242:	4442      	add	r2, r8
 8019244:	4631      	mov	r1, r6
 8019246:	4628      	mov	r0, r5
 8019248:	47b8      	blx	r7
 801924a:	3001      	adds	r0, #1
 801924c:	d1c1      	bne.n	80191d2 <_printf_float+0x342>
 801924e:	e680      	b.n	8018f52 <_printf_float+0xc2>
 8019250:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019252:	2a01      	cmp	r2, #1
 8019254:	dc01      	bgt.n	801925a <_printf_float+0x3ca>
 8019256:	07db      	lsls	r3, r3, #31
 8019258:	d538      	bpl.n	80192cc <_printf_float+0x43c>
 801925a:	2301      	movs	r3, #1
 801925c:	4642      	mov	r2, r8
 801925e:	4631      	mov	r1, r6
 8019260:	4628      	mov	r0, r5
 8019262:	47b8      	blx	r7
 8019264:	3001      	adds	r0, #1
 8019266:	f43f ae74 	beq.w	8018f52 <_printf_float+0xc2>
 801926a:	ee18 3a10 	vmov	r3, s16
 801926e:	4652      	mov	r2, sl
 8019270:	4631      	mov	r1, r6
 8019272:	4628      	mov	r0, r5
 8019274:	47b8      	blx	r7
 8019276:	3001      	adds	r0, #1
 8019278:	f43f ae6b 	beq.w	8018f52 <_printf_float+0xc2>
 801927c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019280:	2200      	movs	r2, #0
 8019282:	2300      	movs	r3, #0
 8019284:	f7e7 fc20 	bl	8000ac8 <__aeabi_dcmpeq>
 8019288:	b9d8      	cbnz	r0, 80192c2 <_printf_float+0x432>
 801928a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801928c:	f108 0201 	add.w	r2, r8, #1
 8019290:	3b01      	subs	r3, #1
 8019292:	4631      	mov	r1, r6
 8019294:	4628      	mov	r0, r5
 8019296:	47b8      	blx	r7
 8019298:	3001      	adds	r0, #1
 801929a:	d10e      	bne.n	80192ba <_printf_float+0x42a>
 801929c:	e659      	b.n	8018f52 <_printf_float+0xc2>
 801929e:	2301      	movs	r3, #1
 80192a0:	4652      	mov	r2, sl
 80192a2:	4631      	mov	r1, r6
 80192a4:	4628      	mov	r0, r5
 80192a6:	47b8      	blx	r7
 80192a8:	3001      	adds	r0, #1
 80192aa:	f43f ae52 	beq.w	8018f52 <_printf_float+0xc2>
 80192ae:	f108 0801 	add.w	r8, r8, #1
 80192b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80192b4:	3b01      	subs	r3, #1
 80192b6:	4543      	cmp	r3, r8
 80192b8:	dcf1      	bgt.n	801929e <_printf_float+0x40e>
 80192ba:	464b      	mov	r3, r9
 80192bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80192c0:	e6dc      	b.n	801907c <_printf_float+0x1ec>
 80192c2:	f04f 0800 	mov.w	r8, #0
 80192c6:	f104 0a1a 	add.w	sl, r4, #26
 80192ca:	e7f2      	b.n	80192b2 <_printf_float+0x422>
 80192cc:	2301      	movs	r3, #1
 80192ce:	4642      	mov	r2, r8
 80192d0:	e7df      	b.n	8019292 <_printf_float+0x402>
 80192d2:	2301      	movs	r3, #1
 80192d4:	464a      	mov	r2, r9
 80192d6:	4631      	mov	r1, r6
 80192d8:	4628      	mov	r0, r5
 80192da:	47b8      	blx	r7
 80192dc:	3001      	adds	r0, #1
 80192de:	f43f ae38 	beq.w	8018f52 <_printf_float+0xc2>
 80192e2:	f108 0801 	add.w	r8, r8, #1
 80192e6:	68e3      	ldr	r3, [r4, #12]
 80192e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80192ea:	1a5b      	subs	r3, r3, r1
 80192ec:	4543      	cmp	r3, r8
 80192ee:	dcf0      	bgt.n	80192d2 <_printf_float+0x442>
 80192f0:	e6fa      	b.n	80190e8 <_printf_float+0x258>
 80192f2:	f04f 0800 	mov.w	r8, #0
 80192f6:	f104 0919 	add.w	r9, r4, #25
 80192fa:	e7f4      	b.n	80192e6 <_printf_float+0x456>

080192fc <_printf_common>:
 80192fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019300:	4616      	mov	r6, r2
 8019302:	4699      	mov	r9, r3
 8019304:	688a      	ldr	r2, [r1, #8]
 8019306:	690b      	ldr	r3, [r1, #16]
 8019308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801930c:	4293      	cmp	r3, r2
 801930e:	bfb8      	it	lt
 8019310:	4613      	movlt	r3, r2
 8019312:	6033      	str	r3, [r6, #0]
 8019314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019318:	4607      	mov	r7, r0
 801931a:	460c      	mov	r4, r1
 801931c:	b10a      	cbz	r2, 8019322 <_printf_common+0x26>
 801931e:	3301      	adds	r3, #1
 8019320:	6033      	str	r3, [r6, #0]
 8019322:	6823      	ldr	r3, [r4, #0]
 8019324:	0699      	lsls	r1, r3, #26
 8019326:	bf42      	ittt	mi
 8019328:	6833      	ldrmi	r3, [r6, #0]
 801932a:	3302      	addmi	r3, #2
 801932c:	6033      	strmi	r3, [r6, #0]
 801932e:	6825      	ldr	r5, [r4, #0]
 8019330:	f015 0506 	ands.w	r5, r5, #6
 8019334:	d106      	bne.n	8019344 <_printf_common+0x48>
 8019336:	f104 0a19 	add.w	sl, r4, #25
 801933a:	68e3      	ldr	r3, [r4, #12]
 801933c:	6832      	ldr	r2, [r6, #0]
 801933e:	1a9b      	subs	r3, r3, r2
 8019340:	42ab      	cmp	r3, r5
 8019342:	dc26      	bgt.n	8019392 <_printf_common+0x96>
 8019344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019348:	1e13      	subs	r3, r2, #0
 801934a:	6822      	ldr	r2, [r4, #0]
 801934c:	bf18      	it	ne
 801934e:	2301      	movne	r3, #1
 8019350:	0692      	lsls	r2, r2, #26
 8019352:	d42b      	bmi.n	80193ac <_printf_common+0xb0>
 8019354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019358:	4649      	mov	r1, r9
 801935a:	4638      	mov	r0, r7
 801935c:	47c0      	blx	r8
 801935e:	3001      	adds	r0, #1
 8019360:	d01e      	beq.n	80193a0 <_printf_common+0xa4>
 8019362:	6823      	ldr	r3, [r4, #0]
 8019364:	68e5      	ldr	r5, [r4, #12]
 8019366:	6832      	ldr	r2, [r6, #0]
 8019368:	f003 0306 	and.w	r3, r3, #6
 801936c:	2b04      	cmp	r3, #4
 801936e:	bf08      	it	eq
 8019370:	1aad      	subeq	r5, r5, r2
 8019372:	68a3      	ldr	r3, [r4, #8]
 8019374:	6922      	ldr	r2, [r4, #16]
 8019376:	bf0c      	ite	eq
 8019378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801937c:	2500      	movne	r5, #0
 801937e:	4293      	cmp	r3, r2
 8019380:	bfc4      	itt	gt
 8019382:	1a9b      	subgt	r3, r3, r2
 8019384:	18ed      	addgt	r5, r5, r3
 8019386:	2600      	movs	r6, #0
 8019388:	341a      	adds	r4, #26
 801938a:	42b5      	cmp	r5, r6
 801938c:	d11a      	bne.n	80193c4 <_printf_common+0xc8>
 801938e:	2000      	movs	r0, #0
 8019390:	e008      	b.n	80193a4 <_printf_common+0xa8>
 8019392:	2301      	movs	r3, #1
 8019394:	4652      	mov	r2, sl
 8019396:	4649      	mov	r1, r9
 8019398:	4638      	mov	r0, r7
 801939a:	47c0      	blx	r8
 801939c:	3001      	adds	r0, #1
 801939e:	d103      	bne.n	80193a8 <_printf_common+0xac>
 80193a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193a8:	3501      	adds	r5, #1
 80193aa:	e7c6      	b.n	801933a <_printf_common+0x3e>
 80193ac:	18e1      	adds	r1, r4, r3
 80193ae:	1c5a      	adds	r2, r3, #1
 80193b0:	2030      	movs	r0, #48	; 0x30
 80193b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80193b6:	4422      	add	r2, r4
 80193b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80193bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80193c0:	3302      	adds	r3, #2
 80193c2:	e7c7      	b.n	8019354 <_printf_common+0x58>
 80193c4:	2301      	movs	r3, #1
 80193c6:	4622      	mov	r2, r4
 80193c8:	4649      	mov	r1, r9
 80193ca:	4638      	mov	r0, r7
 80193cc:	47c0      	blx	r8
 80193ce:	3001      	adds	r0, #1
 80193d0:	d0e6      	beq.n	80193a0 <_printf_common+0xa4>
 80193d2:	3601      	adds	r6, #1
 80193d4:	e7d9      	b.n	801938a <_printf_common+0x8e>
	...

080193d8 <_printf_i>:
 80193d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80193dc:	460c      	mov	r4, r1
 80193de:	4691      	mov	r9, r2
 80193e0:	7e27      	ldrb	r7, [r4, #24]
 80193e2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80193e4:	2f78      	cmp	r7, #120	; 0x78
 80193e6:	4680      	mov	r8, r0
 80193e8:	469a      	mov	sl, r3
 80193ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80193ee:	d807      	bhi.n	8019400 <_printf_i+0x28>
 80193f0:	2f62      	cmp	r7, #98	; 0x62
 80193f2:	d80a      	bhi.n	801940a <_printf_i+0x32>
 80193f4:	2f00      	cmp	r7, #0
 80193f6:	f000 80d8 	beq.w	80195aa <_printf_i+0x1d2>
 80193fa:	2f58      	cmp	r7, #88	; 0x58
 80193fc:	f000 80a3 	beq.w	8019546 <_printf_i+0x16e>
 8019400:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019408:	e03a      	b.n	8019480 <_printf_i+0xa8>
 801940a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801940e:	2b15      	cmp	r3, #21
 8019410:	d8f6      	bhi.n	8019400 <_printf_i+0x28>
 8019412:	a001      	add	r0, pc, #4	; (adr r0, 8019418 <_printf_i+0x40>)
 8019414:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019418:	08019471 	.word	0x08019471
 801941c:	08019485 	.word	0x08019485
 8019420:	08019401 	.word	0x08019401
 8019424:	08019401 	.word	0x08019401
 8019428:	08019401 	.word	0x08019401
 801942c:	08019401 	.word	0x08019401
 8019430:	08019485 	.word	0x08019485
 8019434:	08019401 	.word	0x08019401
 8019438:	08019401 	.word	0x08019401
 801943c:	08019401 	.word	0x08019401
 8019440:	08019401 	.word	0x08019401
 8019444:	08019591 	.word	0x08019591
 8019448:	080194b5 	.word	0x080194b5
 801944c:	08019573 	.word	0x08019573
 8019450:	08019401 	.word	0x08019401
 8019454:	08019401 	.word	0x08019401
 8019458:	080195b3 	.word	0x080195b3
 801945c:	08019401 	.word	0x08019401
 8019460:	080194b5 	.word	0x080194b5
 8019464:	08019401 	.word	0x08019401
 8019468:	08019401 	.word	0x08019401
 801946c:	0801957b 	.word	0x0801957b
 8019470:	680b      	ldr	r3, [r1, #0]
 8019472:	1d1a      	adds	r2, r3, #4
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	600a      	str	r2, [r1, #0]
 8019478:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801947c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019480:	2301      	movs	r3, #1
 8019482:	e0a3      	b.n	80195cc <_printf_i+0x1f4>
 8019484:	6825      	ldr	r5, [r4, #0]
 8019486:	6808      	ldr	r0, [r1, #0]
 8019488:	062e      	lsls	r6, r5, #24
 801948a:	f100 0304 	add.w	r3, r0, #4
 801948e:	d50a      	bpl.n	80194a6 <_printf_i+0xce>
 8019490:	6805      	ldr	r5, [r0, #0]
 8019492:	600b      	str	r3, [r1, #0]
 8019494:	2d00      	cmp	r5, #0
 8019496:	da03      	bge.n	80194a0 <_printf_i+0xc8>
 8019498:	232d      	movs	r3, #45	; 0x2d
 801949a:	426d      	negs	r5, r5
 801949c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80194a0:	485e      	ldr	r0, [pc, #376]	; (801961c <_printf_i+0x244>)
 80194a2:	230a      	movs	r3, #10
 80194a4:	e019      	b.n	80194da <_printf_i+0x102>
 80194a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80194aa:	6805      	ldr	r5, [r0, #0]
 80194ac:	600b      	str	r3, [r1, #0]
 80194ae:	bf18      	it	ne
 80194b0:	b22d      	sxthne	r5, r5
 80194b2:	e7ef      	b.n	8019494 <_printf_i+0xbc>
 80194b4:	680b      	ldr	r3, [r1, #0]
 80194b6:	6825      	ldr	r5, [r4, #0]
 80194b8:	1d18      	adds	r0, r3, #4
 80194ba:	6008      	str	r0, [r1, #0]
 80194bc:	0628      	lsls	r0, r5, #24
 80194be:	d501      	bpl.n	80194c4 <_printf_i+0xec>
 80194c0:	681d      	ldr	r5, [r3, #0]
 80194c2:	e002      	b.n	80194ca <_printf_i+0xf2>
 80194c4:	0669      	lsls	r1, r5, #25
 80194c6:	d5fb      	bpl.n	80194c0 <_printf_i+0xe8>
 80194c8:	881d      	ldrh	r5, [r3, #0]
 80194ca:	4854      	ldr	r0, [pc, #336]	; (801961c <_printf_i+0x244>)
 80194cc:	2f6f      	cmp	r7, #111	; 0x6f
 80194ce:	bf0c      	ite	eq
 80194d0:	2308      	moveq	r3, #8
 80194d2:	230a      	movne	r3, #10
 80194d4:	2100      	movs	r1, #0
 80194d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80194da:	6866      	ldr	r6, [r4, #4]
 80194dc:	60a6      	str	r6, [r4, #8]
 80194de:	2e00      	cmp	r6, #0
 80194e0:	bfa2      	ittt	ge
 80194e2:	6821      	ldrge	r1, [r4, #0]
 80194e4:	f021 0104 	bicge.w	r1, r1, #4
 80194e8:	6021      	strge	r1, [r4, #0]
 80194ea:	b90d      	cbnz	r5, 80194f0 <_printf_i+0x118>
 80194ec:	2e00      	cmp	r6, #0
 80194ee:	d04d      	beq.n	801958c <_printf_i+0x1b4>
 80194f0:	4616      	mov	r6, r2
 80194f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80194f6:	fb03 5711 	mls	r7, r3, r1, r5
 80194fa:	5dc7      	ldrb	r7, [r0, r7]
 80194fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019500:	462f      	mov	r7, r5
 8019502:	42bb      	cmp	r3, r7
 8019504:	460d      	mov	r5, r1
 8019506:	d9f4      	bls.n	80194f2 <_printf_i+0x11a>
 8019508:	2b08      	cmp	r3, #8
 801950a:	d10b      	bne.n	8019524 <_printf_i+0x14c>
 801950c:	6823      	ldr	r3, [r4, #0]
 801950e:	07df      	lsls	r7, r3, #31
 8019510:	d508      	bpl.n	8019524 <_printf_i+0x14c>
 8019512:	6923      	ldr	r3, [r4, #16]
 8019514:	6861      	ldr	r1, [r4, #4]
 8019516:	4299      	cmp	r1, r3
 8019518:	bfde      	ittt	le
 801951a:	2330      	movle	r3, #48	; 0x30
 801951c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019520:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019524:	1b92      	subs	r2, r2, r6
 8019526:	6122      	str	r2, [r4, #16]
 8019528:	f8cd a000 	str.w	sl, [sp]
 801952c:	464b      	mov	r3, r9
 801952e:	aa03      	add	r2, sp, #12
 8019530:	4621      	mov	r1, r4
 8019532:	4640      	mov	r0, r8
 8019534:	f7ff fee2 	bl	80192fc <_printf_common>
 8019538:	3001      	adds	r0, #1
 801953a:	d14c      	bne.n	80195d6 <_printf_i+0x1fe>
 801953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019540:	b004      	add	sp, #16
 8019542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019546:	4835      	ldr	r0, [pc, #212]	; (801961c <_printf_i+0x244>)
 8019548:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801954c:	6823      	ldr	r3, [r4, #0]
 801954e:	680e      	ldr	r6, [r1, #0]
 8019550:	061f      	lsls	r7, r3, #24
 8019552:	f856 5b04 	ldr.w	r5, [r6], #4
 8019556:	600e      	str	r6, [r1, #0]
 8019558:	d514      	bpl.n	8019584 <_printf_i+0x1ac>
 801955a:	07d9      	lsls	r1, r3, #31
 801955c:	bf44      	itt	mi
 801955e:	f043 0320 	orrmi.w	r3, r3, #32
 8019562:	6023      	strmi	r3, [r4, #0]
 8019564:	b91d      	cbnz	r5, 801956e <_printf_i+0x196>
 8019566:	6823      	ldr	r3, [r4, #0]
 8019568:	f023 0320 	bic.w	r3, r3, #32
 801956c:	6023      	str	r3, [r4, #0]
 801956e:	2310      	movs	r3, #16
 8019570:	e7b0      	b.n	80194d4 <_printf_i+0xfc>
 8019572:	6823      	ldr	r3, [r4, #0]
 8019574:	f043 0320 	orr.w	r3, r3, #32
 8019578:	6023      	str	r3, [r4, #0]
 801957a:	2378      	movs	r3, #120	; 0x78
 801957c:	4828      	ldr	r0, [pc, #160]	; (8019620 <_printf_i+0x248>)
 801957e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019582:	e7e3      	b.n	801954c <_printf_i+0x174>
 8019584:	065e      	lsls	r6, r3, #25
 8019586:	bf48      	it	mi
 8019588:	b2ad      	uxthmi	r5, r5
 801958a:	e7e6      	b.n	801955a <_printf_i+0x182>
 801958c:	4616      	mov	r6, r2
 801958e:	e7bb      	b.n	8019508 <_printf_i+0x130>
 8019590:	680b      	ldr	r3, [r1, #0]
 8019592:	6826      	ldr	r6, [r4, #0]
 8019594:	6960      	ldr	r0, [r4, #20]
 8019596:	1d1d      	adds	r5, r3, #4
 8019598:	600d      	str	r5, [r1, #0]
 801959a:	0635      	lsls	r5, r6, #24
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	d501      	bpl.n	80195a4 <_printf_i+0x1cc>
 80195a0:	6018      	str	r0, [r3, #0]
 80195a2:	e002      	b.n	80195aa <_printf_i+0x1d2>
 80195a4:	0671      	lsls	r1, r6, #25
 80195a6:	d5fb      	bpl.n	80195a0 <_printf_i+0x1c8>
 80195a8:	8018      	strh	r0, [r3, #0]
 80195aa:	2300      	movs	r3, #0
 80195ac:	6123      	str	r3, [r4, #16]
 80195ae:	4616      	mov	r6, r2
 80195b0:	e7ba      	b.n	8019528 <_printf_i+0x150>
 80195b2:	680b      	ldr	r3, [r1, #0]
 80195b4:	1d1a      	adds	r2, r3, #4
 80195b6:	600a      	str	r2, [r1, #0]
 80195b8:	681e      	ldr	r6, [r3, #0]
 80195ba:	6862      	ldr	r2, [r4, #4]
 80195bc:	2100      	movs	r1, #0
 80195be:	4630      	mov	r0, r6
 80195c0:	f7e6 fe0e 	bl	80001e0 <memchr>
 80195c4:	b108      	cbz	r0, 80195ca <_printf_i+0x1f2>
 80195c6:	1b80      	subs	r0, r0, r6
 80195c8:	6060      	str	r0, [r4, #4]
 80195ca:	6863      	ldr	r3, [r4, #4]
 80195cc:	6123      	str	r3, [r4, #16]
 80195ce:	2300      	movs	r3, #0
 80195d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80195d4:	e7a8      	b.n	8019528 <_printf_i+0x150>
 80195d6:	6923      	ldr	r3, [r4, #16]
 80195d8:	4632      	mov	r2, r6
 80195da:	4649      	mov	r1, r9
 80195dc:	4640      	mov	r0, r8
 80195de:	47d0      	blx	sl
 80195e0:	3001      	adds	r0, #1
 80195e2:	d0ab      	beq.n	801953c <_printf_i+0x164>
 80195e4:	6823      	ldr	r3, [r4, #0]
 80195e6:	079b      	lsls	r3, r3, #30
 80195e8:	d413      	bmi.n	8019612 <_printf_i+0x23a>
 80195ea:	68e0      	ldr	r0, [r4, #12]
 80195ec:	9b03      	ldr	r3, [sp, #12]
 80195ee:	4298      	cmp	r0, r3
 80195f0:	bfb8      	it	lt
 80195f2:	4618      	movlt	r0, r3
 80195f4:	e7a4      	b.n	8019540 <_printf_i+0x168>
 80195f6:	2301      	movs	r3, #1
 80195f8:	4632      	mov	r2, r6
 80195fa:	4649      	mov	r1, r9
 80195fc:	4640      	mov	r0, r8
 80195fe:	47d0      	blx	sl
 8019600:	3001      	adds	r0, #1
 8019602:	d09b      	beq.n	801953c <_printf_i+0x164>
 8019604:	3501      	adds	r5, #1
 8019606:	68e3      	ldr	r3, [r4, #12]
 8019608:	9903      	ldr	r1, [sp, #12]
 801960a:	1a5b      	subs	r3, r3, r1
 801960c:	42ab      	cmp	r3, r5
 801960e:	dcf2      	bgt.n	80195f6 <_printf_i+0x21e>
 8019610:	e7eb      	b.n	80195ea <_printf_i+0x212>
 8019612:	2500      	movs	r5, #0
 8019614:	f104 0619 	add.w	r6, r4, #25
 8019618:	e7f5      	b.n	8019606 <_printf_i+0x22e>
 801961a:	bf00      	nop
 801961c:	08020b02 	.word	0x08020b02
 8019620:	08020b13 	.word	0x08020b13

08019624 <cleanup_glue>:
 8019624:	b538      	push	{r3, r4, r5, lr}
 8019626:	460c      	mov	r4, r1
 8019628:	6809      	ldr	r1, [r1, #0]
 801962a:	4605      	mov	r5, r0
 801962c:	b109      	cbz	r1, 8019632 <cleanup_glue+0xe>
 801962e:	f7ff fff9 	bl	8019624 <cleanup_glue>
 8019632:	4621      	mov	r1, r4
 8019634:	4628      	mov	r0, r5
 8019636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801963a:	f7ff badf 	b.w	8018bfc <_free_r>
	...

08019640 <_reclaim_reent>:
 8019640:	4b2c      	ldr	r3, [pc, #176]	; (80196f4 <_reclaim_reent+0xb4>)
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	4283      	cmp	r3, r0
 8019646:	b570      	push	{r4, r5, r6, lr}
 8019648:	4604      	mov	r4, r0
 801964a:	d051      	beq.n	80196f0 <_reclaim_reent+0xb0>
 801964c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801964e:	b143      	cbz	r3, 8019662 <_reclaim_reent+0x22>
 8019650:	68db      	ldr	r3, [r3, #12]
 8019652:	2b00      	cmp	r3, #0
 8019654:	d14a      	bne.n	80196ec <_reclaim_reent+0xac>
 8019656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019658:	6819      	ldr	r1, [r3, #0]
 801965a:	b111      	cbz	r1, 8019662 <_reclaim_reent+0x22>
 801965c:	4620      	mov	r0, r4
 801965e:	f7ff facd 	bl	8018bfc <_free_r>
 8019662:	6961      	ldr	r1, [r4, #20]
 8019664:	b111      	cbz	r1, 801966c <_reclaim_reent+0x2c>
 8019666:	4620      	mov	r0, r4
 8019668:	f7ff fac8 	bl	8018bfc <_free_r>
 801966c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801966e:	b111      	cbz	r1, 8019676 <_reclaim_reent+0x36>
 8019670:	4620      	mov	r0, r4
 8019672:	f7ff fac3 	bl	8018bfc <_free_r>
 8019676:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019678:	b111      	cbz	r1, 8019680 <_reclaim_reent+0x40>
 801967a:	4620      	mov	r0, r4
 801967c:	f7ff fabe 	bl	8018bfc <_free_r>
 8019680:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019682:	b111      	cbz	r1, 801968a <_reclaim_reent+0x4a>
 8019684:	4620      	mov	r0, r4
 8019686:	f7ff fab9 	bl	8018bfc <_free_r>
 801968a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801968c:	b111      	cbz	r1, 8019694 <_reclaim_reent+0x54>
 801968e:	4620      	mov	r0, r4
 8019690:	f7ff fab4 	bl	8018bfc <_free_r>
 8019694:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019696:	b111      	cbz	r1, 801969e <_reclaim_reent+0x5e>
 8019698:	4620      	mov	r0, r4
 801969a:	f7ff faaf 	bl	8018bfc <_free_r>
 801969e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80196a0:	b111      	cbz	r1, 80196a8 <_reclaim_reent+0x68>
 80196a2:	4620      	mov	r0, r4
 80196a4:	f7ff faaa 	bl	8018bfc <_free_r>
 80196a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80196aa:	b111      	cbz	r1, 80196b2 <_reclaim_reent+0x72>
 80196ac:	4620      	mov	r0, r4
 80196ae:	f7ff faa5 	bl	8018bfc <_free_r>
 80196b2:	69a3      	ldr	r3, [r4, #24]
 80196b4:	b1e3      	cbz	r3, 80196f0 <_reclaim_reent+0xb0>
 80196b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80196b8:	4620      	mov	r0, r4
 80196ba:	4798      	blx	r3
 80196bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80196be:	b1b9      	cbz	r1, 80196f0 <_reclaim_reent+0xb0>
 80196c0:	4620      	mov	r0, r4
 80196c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80196c6:	f7ff bfad 	b.w	8019624 <cleanup_glue>
 80196ca:	5949      	ldr	r1, [r1, r5]
 80196cc:	b941      	cbnz	r1, 80196e0 <_reclaim_reent+0xa0>
 80196ce:	3504      	adds	r5, #4
 80196d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80196d2:	2d80      	cmp	r5, #128	; 0x80
 80196d4:	68d9      	ldr	r1, [r3, #12]
 80196d6:	d1f8      	bne.n	80196ca <_reclaim_reent+0x8a>
 80196d8:	4620      	mov	r0, r4
 80196da:	f7ff fa8f 	bl	8018bfc <_free_r>
 80196de:	e7ba      	b.n	8019656 <_reclaim_reent+0x16>
 80196e0:	680e      	ldr	r6, [r1, #0]
 80196e2:	4620      	mov	r0, r4
 80196e4:	f7ff fa8a 	bl	8018bfc <_free_r>
 80196e8:	4631      	mov	r1, r6
 80196ea:	e7ef      	b.n	80196cc <_reclaim_reent+0x8c>
 80196ec:	2500      	movs	r5, #0
 80196ee:	e7ef      	b.n	80196d0 <_reclaim_reent+0x90>
 80196f0:	bd70      	pop	{r4, r5, r6, pc}
 80196f2:	bf00      	nop
 80196f4:	2000025c 	.word	0x2000025c

080196f8 <_sbrk_r>:
 80196f8:	b538      	push	{r3, r4, r5, lr}
 80196fa:	4d06      	ldr	r5, [pc, #24]	; (8019714 <_sbrk_r+0x1c>)
 80196fc:	2300      	movs	r3, #0
 80196fe:	4604      	mov	r4, r0
 8019700:	4608      	mov	r0, r1
 8019702:	602b      	str	r3, [r5, #0]
 8019704:	f7eb fe68 	bl	80053d8 <_sbrk>
 8019708:	1c43      	adds	r3, r0, #1
 801970a:	d102      	bne.n	8019712 <_sbrk_r+0x1a>
 801970c:	682b      	ldr	r3, [r5, #0]
 801970e:	b103      	cbz	r3, 8019712 <_sbrk_r+0x1a>
 8019710:	6023      	str	r3, [r4, #0]
 8019712:	bd38      	pop	{r3, r4, r5, pc}
 8019714:	20015404 	.word	0x20015404

08019718 <siprintf>:
 8019718:	b40e      	push	{r1, r2, r3}
 801971a:	b500      	push	{lr}
 801971c:	b09c      	sub	sp, #112	; 0x70
 801971e:	ab1d      	add	r3, sp, #116	; 0x74
 8019720:	9002      	str	r0, [sp, #8]
 8019722:	9006      	str	r0, [sp, #24]
 8019724:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019728:	4809      	ldr	r0, [pc, #36]	; (8019750 <siprintf+0x38>)
 801972a:	9107      	str	r1, [sp, #28]
 801972c:	9104      	str	r1, [sp, #16]
 801972e:	4909      	ldr	r1, [pc, #36]	; (8019754 <siprintf+0x3c>)
 8019730:	f853 2b04 	ldr.w	r2, [r3], #4
 8019734:	9105      	str	r1, [sp, #20]
 8019736:	6800      	ldr	r0, [r0, #0]
 8019738:	9301      	str	r3, [sp, #4]
 801973a:	a902      	add	r1, sp, #8
 801973c:	f001 fc10 	bl	801af60 <_svfiprintf_r>
 8019740:	9b02      	ldr	r3, [sp, #8]
 8019742:	2200      	movs	r2, #0
 8019744:	701a      	strb	r2, [r3, #0]
 8019746:	b01c      	add	sp, #112	; 0x70
 8019748:	f85d eb04 	ldr.w	lr, [sp], #4
 801974c:	b003      	add	sp, #12
 801974e:	4770      	bx	lr
 8019750:	2000025c 	.word	0x2000025c
 8019754:	ffff0208 	.word	0xffff0208

08019758 <__sread>:
 8019758:	b510      	push	{r4, lr}
 801975a:	460c      	mov	r4, r1
 801975c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019760:	f001 fcfe 	bl	801b160 <_read_r>
 8019764:	2800      	cmp	r0, #0
 8019766:	bfab      	itete	ge
 8019768:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801976a:	89a3      	ldrhlt	r3, [r4, #12]
 801976c:	181b      	addge	r3, r3, r0
 801976e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019772:	bfac      	ite	ge
 8019774:	6563      	strge	r3, [r4, #84]	; 0x54
 8019776:	81a3      	strhlt	r3, [r4, #12]
 8019778:	bd10      	pop	{r4, pc}

0801977a <__swrite>:
 801977a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801977e:	461f      	mov	r7, r3
 8019780:	898b      	ldrh	r3, [r1, #12]
 8019782:	05db      	lsls	r3, r3, #23
 8019784:	4605      	mov	r5, r0
 8019786:	460c      	mov	r4, r1
 8019788:	4616      	mov	r6, r2
 801978a:	d505      	bpl.n	8019798 <__swrite+0x1e>
 801978c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019790:	2302      	movs	r3, #2
 8019792:	2200      	movs	r2, #0
 8019794:	f000 ffde 	bl	801a754 <_lseek_r>
 8019798:	89a3      	ldrh	r3, [r4, #12]
 801979a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801979e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80197a2:	81a3      	strh	r3, [r4, #12]
 80197a4:	4632      	mov	r2, r6
 80197a6:	463b      	mov	r3, r7
 80197a8:	4628      	mov	r0, r5
 80197aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197ae:	f000 b86f 	b.w	8019890 <_write_r>

080197b2 <__sseek>:
 80197b2:	b510      	push	{r4, lr}
 80197b4:	460c      	mov	r4, r1
 80197b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197ba:	f000 ffcb 	bl	801a754 <_lseek_r>
 80197be:	1c43      	adds	r3, r0, #1
 80197c0:	89a3      	ldrh	r3, [r4, #12]
 80197c2:	bf15      	itete	ne
 80197c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80197c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80197ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80197ce:	81a3      	strheq	r3, [r4, #12]
 80197d0:	bf18      	it	ne
 80197d2:	81a3      	strhne	r3, [r4, #12]
 80197d4:	bd10      	pop	{r4, pc}

080197d6 <__sclose>:
 80197d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80197da:	f000 b86b 	b.w	80198b4 <_close_r>

080197de <strcat>:
 80197de:	b510      	push	{r4, lr}
 80197e0:	4602      	mov	r2, r0
 80197e2:	7814      	ldrb	r4, [r2, #0]
 80197e4:	4613      	mov	r3, r2
 80197e6:	3201      	adds	r2, #1
 80197e8:	2c00      	cmp	r4, #0
 80197ea:	d1fa      	bne.n	80197e2 <strcat+0x4>
 80197ec:	3b01      	subs	r3, #1
 80197ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80197f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80197f6:	2a00      	cmp	r2, #0
 80197f8:	d1f9      	bne.n	80197ee <strcat+0x10>
 80197fa:	bd10      	pop	{r4, pc}

080197fc <strcpy>:
 80197fc:	4603      	mov	r3, r0
 80197fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019802:	f803 2b01 	strb.w	r2, [r3], #1
 8019806:	2a00      	cmp	r2, #0
 8019808:	d1f9      	bne.n	80197fe <strcpy+0x2>
 801980a:	4770      	bx	lr

0801980c <__utoa>:
 801980c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801980e:	4c1f      	ldr	r4, [pc, #124]	; (801988c <__utoa+0x80>)
 8019810:	b08b      	sub	sp, #44	; 0x2c
 8019812:	4605      	mov	r5, r0
 8019814:	460b      	mov	r3, r1
 8019816:	466e      	mov	r6, sp
 8019818:	f104 0c20 	add.w	ip, r4, #32
 801981c:	6820      	ldr	r0, [r4, #0]
 801981e:	6861      	ldr	r1, [r4, #4]
 8019820:	4637      	mov	r7, r6
 8019822:	c703      	stmia	r7!, {r0, r1}
 8019824:	3408      	adds	r4, #8
 8019826:	4564      	cmp	r4, ip
 8019828:	463e      	mov	r6, r7
 801982a:	d1f7      	bne.n	801981c <__utoa+0x10>
 801982c:	7921      	ldrb	r1, [r4, #4]
 801982e:	7139      	strb	r1, [r7, #4]
 8019830:	1e91      	subs	r1, r2, #2
 8019832:	6820      	ldr	r0, [r4, #0]
 8019834:	6038      	str	r0, [r7, #0]
 8019836:	2922      	cmp	r1, #34	; 0x22
 8019838:	f04f 0100 	mov.w	r1, #0
 801983c:	d904      	bls.n	8019848 <__utoa+0x3c>
 801983e:	7019      	strb	r1, [r3, #0]
 8019840:	460b      	mov	r3, r1
 8019842:	4618      	mov	r0, r3
 8019844:	b00b      	add	sp, #44	; 0x2c
 8019846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019848:	1e58      	subs	r0, r3, #1
 801984a:	4684      	mov	ip, r0
 801984c:	fbb5 f7f2 	udiv	r7, r5, r2
 8019850:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8019854:	fb02 5617 	mls	r6, r2, r7, r5
 8019858:	4476      	add	r6, lr
 801985a:	460c      	mov	r4, r1
 801985c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8019860:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8019864:	462e      	mov	r6, r5
 8019866:	42b2      	cmp	r2, r6
 8019868:	f101 0101 	add.w	r1, r1, #1
 801986c:	463d      	mov	r5, r7
 801986e:	d9ed      	bls.n	801984c <__utoa+0x40>
 8019870:	2200      	movs	r2, #0
 8019872:	545a      	strb	r2, [r3, r1]
 8019874:	1919      	adds	r1, r3, r4
 8019876:	1aa5      	subs	r5, r4, r2
 8019878:	42aa      	cmp	r2, r5
 801987a:	dae2      	bge.n	8019842 <__utoa+0x36>
 801987c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8019880:	780e      	ldrb	r6, [r1, #0]
 8019882:	7006      	strb	r6, [r0, #0]
 8019884:	3201      	adds	r2, #1
 8019886:	f801 5901 	strb.w	r5, [r1], #-1
 801988a:	e7f4      	b.n	8019876 <__utoa+0x6a>
 801988c:	08020b24 	.word	0x08020b24

08019890 <_write_r>:
 8019890:	b538      	push	{r3, r4, r5, lr}
 8019892:	4d07      	ldr	r5, [pc, #28]	; (80198b0 <_write_r+0x20>)
 8019894:	4604      	mov	r4, r0
 8019896:	4608      	mov	r0, r1
 8019898:	4611      	mov	r1, r2
 801989a:	2200      	movs	r2, #0
 801989c:	602a      	str	r2, [r5, #0]
 801989e:	461a      	mov	r2, r3
 80198a0:	f7eb fd49 	bl	8005336 <_write>
 80198a4:	1c43      	adds	r3, r0, #1
 80198a6:	d102      	bne.n	80198ae <_write_r+0x1e>
 80198a8:	682b      	ldr	r3, [r5, #0]
 80198aa:	b103      	cbz	r3, 80198ae <_write_r+0x1e>
 80198ac:	6023      	str	r3, [r4, #0]
 80198ae:	bd38      	pop	{r3, r4, r5, pc}
 80198b0:	20015404 	.word	0x20015404

080198b4 <_close_r>:
 80198b4:	b538      	push	{r3, r4, r5, lr}
 80198b6:	4d06      	ldr	r5, [pc, #24]	; (80198d0 <_close_r+0x1c>)
 80198b8:	2300      	movs	r3, #0
 80198ba:	4604      	mov	r4, r0
 80198bc:	4608      	mov	r0, r1
 80198be:	602b      	str	r3, [r5, #0]
 80198c0:	f7eb fd55 	bl	800536e <_close>
 80198c4:	1c43      	adds	r3, r0, #1
 80198c6:	d102      	bne.n	80198ce <_close_r+0x1a>
 80198c8:	682b      	ldr	r3, [r5, #0]
 80198ca:	b103      	cbz	r3, 80198ce <_close_r+0x1a>
 80198cc:	6023      	str	r3, [r4, #0]
 80198ce:	bd38      	pop	{r3, r4, r5, pc}
 80198d0:	20015404 	.word	0x20015404

080198d4 <quorem>:
 80198d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198d8:	6903      	ldr	r3, [r0, #16]
 80198da:	690c      	ldr	r4, [r1, #16]
 80198dc:	42a3      	cmp	r3, r4
 80198de:	4607      	mov	r7, r0
 80198e0:	f2c0 8081 	blt.w	80199e6 <quorem+0x112>
 80198e4:	3c01      	subs	r4, #1
 80198e6:	f101 0814 	add.w	r8, r1, #20
 80198ea:	f100 0514 	add.w	r5, r0, #20
 80198ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80198f2:	9301      	str	r3, [sp, #4]
 80198f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80198f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80198fc:	3301      	adds	r3, #1
 80198fe:	429a      	cmp	r2, r3
 8019900:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8019904:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8019908:	fbb2 f6f3 	udiv	r6, r2, r3
 801990c:	d331      	bcc.n	8019972 <quorem+0x9e>
 801990e:	f04f 0e00 	mov.w	lr, #0
 8019912:	4640      	mov	r0, r8
 8019914:	46ac      	mov	ip, r5
 8019916:	46f2      	mov	sl, lr
 8019918:	f850 2b04 	ldr.w	r2, [r0], #4
 801991c:	b293      	uxth	r3, r2
 801991e:	fb06 e303 	mla	r3, r6, r3, lr
 8019922:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8019926:	b29b      	uxth	r3, r3
 8019928:	ebaa 0303 	sub.w	r3, sl, r3
 801992c:	0c12      	lsrs	r2, r2, #16
 801992e:	f8dc a000 	ldr.w	sl, [ip]
 8019932:	fb06 e202 	mla	r2, r6, r2, lr
 8019936:	fa13 f38a 	uxtah	r3, r3, sl
 801993a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801993e:	fa1f fa82 	uxth.w	sl, r2
 8019942:	f8dc 2000 	ldr.w	r2, [ip]
 8019946:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801994a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801994e:	b29b      	uxth	r3, r3
 8019950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019954:	4581      	cmp	r9, r0
 8019956:	f84c 3b04 	str.w	r3, [ip], #4
 801995a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801995e:	d2db      	bcs.n	8019918 <quorem+0x44>
 8019960:	f855 300b 	ldr.w	r3, [r5, fp]
 8019964:	b92b      	cbnz	r3, 8019972 <quorem+0x9e>
 8019966:	9b01      	ldr	r3, [sp, #4]
 8019968:	3b04      	subs	r3, #4
 801996a:	429d      	cmp	r5, r3
 801996c:	461a      	mov	r2, r3
 801996e:	d32e      	bcc.n	80199ce <quorem+0xfa>
 8019970:	613c      	str	r4, [r7, #16]
 8019972:	4638      	mov	r0, r7
 8019974:	f001 f98a 	bl	801ac8c <__mcmp>
 8019978:	2800      	cmp	r0, #0
 801997a:	db24      	blt.n	80199c6 <quorem+0xf2>
 801997c:	3601      	adds	r6, #1
 801997e:	4628      	mov	r0, r5
 8019980:	f04f 0c00 	mov.w	ip, #0
 8019984:	f858 2b04 	ldr.w	r2, [r8], #4
 8019988:	f8d0 e000 	ldr.w	lr, [r0]
 801998c:	b293      	uxth	r3, r2
 801998e:	ebac 0303 	sub.w	r3, ip, r3
 8019992:	0c12      	lsrs	r2, r2, #16
 8019994:	fa13 f38e 	uxtah	r3, r3, lr
 8019998:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801999c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80199a0:	b29b      	uxth	r3, r3
 80199a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80199a6:	45c1      	cmp	r9, r8
 80199a8:	f840 3b04 	str.w	r3, [r0], #4
 80199ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80199b0:	d2e8      	bcs.n	8019984 <quorem+0xb0>
 80199b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80199b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80199ba:	b922      	cbnz	r2, 80199c6 <quorem+0xf2>
 80199bc:	3b04      	subs	r3, #4
 80199be:	429d      	cmp	r5, r3
 80199c0:	461a      	mov	r2, r3
 80199c2:	d30a      	bcc.n	80199da <quorem+0x106>
 80199c4:	613c      	str	r4, [r7, #16]
 80199c6:	4630      	mov	r0, r6
 80199c8:	b003      	add	sp, #12
 80199ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199ce:	6812      	ldr	r2, [r2, #0]
 80199d0:	3b04      	subs	r3, #4
 80199d2:	2a00      	cmp	r2, #0
 80199d4:	d1cc      	bne.n	8019970 <quorem+0x9c>
 80199d6:	3c01      	subs	r4, #1
 80199d8:	e7c7      	b.n	801996a <quorem+0x96>
 80199da:	6812      	ldr	r2, [r2, #0]
 80199dc:	3b04      	subs	r3, #4
 80199de:	2a00      	cmp	r2, #0
 80199e0:	d1f0      	bne.n	80199c4 <quorem+0xf0>
 80199e2:	3c01      	subs	r4, #1
 80199e4:	e7eb      	b.n	80199be <quorem+0xea>
 80199e6:	2000      	movs	r0, #0
 80199e8:	e7ee      	b.n	80199c8 <quorem+0xf4>
 80199ea:	0000      	movs	r0, r0
 80199ec:	0000      	movs	r0, r0
	...

080199f0 <_dtoa_r>:
 80199f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199f4:	ed2d 8b02 	vpush	{d8}
 80199f8:	ec57 6b10 	vmov	r6, r7, d0
 80199fc:	b095      	sub	sp, #84	; 0x54
 80199fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8019a00:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8019a04:	9105      	str	r1, [sp, #20]
 8019a06:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8019a0a:	4604      	mov	r4, r0
 8019a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8019a0e:	930f      	str	r3, [sp, #60]	; 0x3c
 8019a10:	b975      	cbnz	r5, 8019a30 <_dtoa_r+0x40>
 8019a12:	2010      	movs	r0, #16
 8019a14:	f7ff f8cc 	bl	8018bb0 <malloc>
 8019a18:	4602      	mov	r2, r0
 8019a1a:	6260      	str	r0, [r4, #36]	; 0x24
 8019a1c:	b920      	cbnz	r0, 8019a28 <_dtoa_r+0x38>
 8019a1e:	4bb2      	ldr	r3, [pc, #712]	; (8019ce8 <_dtoa_r+0x2f8>)
 8019a20:	21ea      	movs	r1, #234	; 0xea
 8019a22:	48b2      	ldr	r0, [pc, #712]	; (8019cec <_dtoa_r+0x2fc>)
 8019a24:	f001 fbae 	bl	801b184 <__assert_func>
 8019a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8019a2c:	6005      	str	r5, [r0, #0]
 8019a2e:	60c5      	str	r5, [r0, #12]
 8019a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a32:	6819      	ldr	r1, [r3, #0]
 8019a34:	b151      	cbz	r1, 8019a4c <_dtoa_r+0x5c>
 8019a36:	685a      	ldr	r2, [r3, #4]
 8019a38:	604a      	str	r2, [r1, #4]
 8019a3a:	2301      	movs	r3, #1
 8019a3c:	4093      	lsls	r3, r2
 8019a3e:	608b      	str	r3, [r1, #8]
 8019a40:	4620      	mov	r0, r4
 8019a42:	f000 fee5 	bl	801a810 <_Bfree>
 8019a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019a48:	2200      	movs	r2, #0
 8019a4a:	601a      	str	r2, [r3, #0]
 8019a4c:	1e3b      	subs	r3, r7, #0
 8019a4e:	bfb9      	ittee	lt
 8019a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8019a54:	9303      	strlt	r3, [sp, #12]
 8019a56:	2300      	movge	r3, #0
 8019a58:	f8c8 3000 	strge.w	r3, [r8]
 8019a5c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8019a60:	4ba3      	ldr	r3, [pc, #652]	; (8019cf0 <_dtoa_r+0x300>)
 8019a62:	bfbc      	itt	lt
 8019a64:	2201      	movlt	r2, #1
 8019a66:	f8c8 2000 	strlt.w	r2, [r8]
 8019a6a:	ea33 0309 	bics.w	r3, r3, r9
 8019a6e:	d11b      	bne.n	8019aa8 <_dtoa_r+0xb8>
 8019a70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019a72:	f242 730f 	movw	r3, #9999	; 0x270f
 8019a76:	6013      	str	r3, [r2, #0]
 8019a78:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8019a7c:	4333      	orrs	r3, r6
 8019a7e:	f000 857a 	beq.w	801a576 <_dtoa_r+0xb86>
 8019a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019a84:	b963      	cbnz	r3, 8019aa0 <_dtoa_r+0xb0>
 8019a86:	4b9b      	ldr	r3, [pc, #620]	; (8019cf4 <_dtoa_r+0x304>)
 8019a88:	e024      	b.n	8019ad4 <_dtoa_r+0xe4>
 8019a8a:	4b9b      	ldr	r3, [pc, #620]	; (8019cf8 <_dtoa_r+0x308>)
 8019a8c:	9300      	str	r3, [sp, #0]
 8019a8e:	3308      	adds	r3, #8
 8019a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019a92:	6013      	str	r3, [r2, #0]
 8019a94:	9800      	ldr	r0, [sp, #0]
 8019a96:	b015      	add	sp, #84	; 0x54
 8019a98:	ecbd 8b02 	vpop	{d8}
 8019a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa0:	4b94      	ldr	r3, [pc, #592]	; (8019cf4 <_dtoa_r+0x304>)
 8019aa2:	9300      	str	r3, [sp, #0]
 8019aa4:	3303      	adds	r3, #3
 8019aa6:	e7f3      	b.n	8019a90 <_dtoa_r+0xa0>
 8019aa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019aac:	2200      	movs	r2, #0
 8019aae:	ec51 0b17 	vmov	r0, r1, d7
 8019ab2:	2300      	movs	r3, #0
 8019ab4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8019ab8:	f7e7 f806 	bl	8000ac8 <__aeabi_dcmpeq>
 8019abc:	4680      	mov	r8, r0
 8019abe:	b158      	cbz	r0, 8019ad8 <_dtoa_r+0xe8>
 8019ac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8019ac2:	2301      	movs	r3, #1
 8019ac4:	6013      	str	r3, [r2, #0]
 8019ac6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	f000 8551 	beq.w	801a570 <_dtoa_r+0xb80>
 8019ace:	488b      	ldr	r0, [pc, #556]	; (8019cfc <_dtoa_r+0x30c>)
 8019ad0:	6018      	str	r0, [r3, #0]
 8019ad2:	1e43      	subs	r3, r0, #1
 8019ad4:	9300      	str	r3, [sp, #0]
 8019ad6:	e7dd      	b.n	8019a94 <_dtoa_r+0xa4>
 8019ad8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8019adc:	aa12      	add	r2, sp, #72	; 0x48
 8019ade:	a913      	add	r1, sp, #76	; 0x4c
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	f001 f977 	bl	801add4 <__d2b>
 8019ae6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019aea:	4683      	mov	fp, r0
 8019aec:	2d00      	cmp	r5, #0
 8019aee:	d07c      	beq.n	8019bea <_dtoa_r+0x1fa>
 8019af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019af2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8019af6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019afa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8019afe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8019b02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8019b06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8019b0a:	4b7d      	ldr	r3, [pc, #500]	; (8019d00 <_dtoa_r+0x310>)
 8019b0c:	2200      	movs	r2, #0
 8019b0e:	4630      	mov	r0, r6
 8019b10:	4639      	mov	r1, r7
 8019b12:	f7e6 fbb9 	bl	8000288 <__aeabi_dsub>
 8019b16:	a36e      	add	r3, pc, #440	; (adr r3, 8019cd0 <_dtoa_r+0x2e0>)
 8019b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b1c:	f7e6 fd6c 	bl	80005f8 <__aeabi_dmul>
 8019b20:	a36d      	add	r3, pc, #436	; (adr r3, 8019cd8 <_dtoa_r+0x2e8>)
 8019b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b26:	f7e6 fbb1 	bl	800028c <__adddf3>
 8019b2a:	4606      	mov	r6, r0
 8019b2c:	4628      	mov	r0, r5
 8019b2e:	460f      	mov	r7, r1
 8019b30:	f7e6 fcf8 	bl	8000524 <__aeabi_i2d>
 8019b34:	a36a      	add	r3, pc, #424	; (adr r3, 8019ce0 <_dtoa_r+0x2f0>)
 8019b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b3a:	f7e6 fd5d 	bl	80005f8 <__aeabi_dmul>
 8019b3e:	4602      	mov	r2, r0
 8019b40:	460b      	mov	r3, r1
 8019b42:	4630      	mov	r0, r6
 8019b44:	4639      	mov	r1, r7
 8019b46:	f7e6 fba1 	bl	800028c <__adddf3>
 8019b4a:	4606      	mov	r6, r0
 8019b4c:	460f      	mov	r7, r1
 8019b4e:	f7e7 f803 	bl	8000b58 <__aeabi_d2iz>
 8019b52:	2200      	movs	r2, #0
 8019b54:	4682      	mov	sl, r0
 8019b56:	2300      	movs	r3, #0
 8019b58:	4630      	mov	r0, r6
 8019b5a:	4639      	mov	r1, r7
 8019b5c:	f7e6 ffbe 	bl	8000adc <__aeabi_dcmplt>
 8019b60:	b148      	cbz	r0, 8019b76 <_dtoa_r+0x186>
 8019b62:	4650      	mov	r0, sl
 8019b64:	f7e6 fcde 	bl	8000524 <__aeabi_i2d>
 8019b68:	4632      	mov	r2, r6
 8019b6a:	463b      	mov	r3, r7
 8019b6c:	f7e6 ffac 	bl	8000ac8 <__aeabi_dcmpeq>
 8019b70:	b908      	cbnz	r0, 8019b76 <_dtoa_r+0x186>
 8019b72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019b76:	f1ba 0f16 	cmp.w	sl, #22
 8019b7a:	d854      	bhi.n	8019c26 <_dtoa_r+0x236>
 8019b7c:	4b61      	ldr	r3, [pc, #388]	; (8019d04 <_dtoa_r+0x314>)
 8019b7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019b8a:	f7e6 ffa7 	bl	8000adc <__aeabi_dcmplt>
 8019b8e:	2800      	cmp	r0, #0
 8019b90:	d04b      	beq.n	8019c2a <_dtoa_r+0x23a>
 8019b92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8019b96:	2300      	movs	r3, #0
 8019b98:	930e      	str	r3, [sp, #56]	; 0x38
 8019b9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019b9c:	1b5d      	subs	r5, r3, r5
 8019b9e:	1e6b      	subs	r3, r5, #1
 8019ba0:	9304      	str	r3, [sp, #16]
 8019ba2:	bf43      	ittte	mi
 8019ba4:	2300      	movmi	r3, #0
 8019ba6:	f1c5 0801 	rsbmi	r8, r5, #1
 8019baa:	9304      	strmi	r3, [sp, #16]
 8019bac:	f04f 0800 	movpl.w	r8, #0
 8019bb0:	f1ba 0f00 	cmp.w	sl, #0
 8019bb4:	db3b      	blt.n	8019c2e <_dtoa_r+0x23e>
 8019bb6:	9b04      	ldr	r3, [sp, #16]
 8019bb8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8019bbc:	4453      	add	r3, sl
 8019bbe:	9304      	str	r3, [sp, #16]
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	9306      	str	r3, [sp, #24]
 8019bc4:	9b05      	ldr	r3, [sp, #20]
 8019bc6:	2b09      	cmp	r3, #9
 8019bc8:	d869      	bhi.n	8019c9e <_dtoa_r+0x2ae>
 8019bca:	2b05      	cmp	r3, #5
 8019bcc:	bfc4      	itt	gt
 8019bce:	3b04      	subgt	r3, #4
 8019bd0:	9305      	strgt	r3, [sp, #20]
 8019bd2:	9b05      	ldr	r3, [sp, #20]
 8019bd4:	f1a3 0302 	sub.w	r3, r3, #2
 8019bd8:	bfcc      	ite	gt
 8019bda:	2500      	movgt	r5, #0
 8019bdc:	2501      	movle	r5, #1
 8019bde:	2b03      	cmp	r3, #3
 8019be0:	d869      	bhi.n	8019cb6 <_dtoa_r+0x2c6>
 8019be2:	e8df f003 	tbb	[pc, r3]
 8019be6:	4e2c      	.short	0x4e2c
 8019be8:	5a4c      	.short	0x5a4c
 8019bea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8019bee:	441d      	add	r5, r3
 8019bf0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8019bf4:	2b20      	cmp	r3, #32
 8019bf6:	bfc1      	itttt	gt
 8019bf8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8019bfc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8019c00:	fa09 f303 	lslgt.w	r3, r9, r3
 8019c04:	fa26 f000 	lsrgt.w	r0, r6, r0
 8019c08:	bfda      	itte	le
 8019c0a:	f1c3 0320 	rsble	r3, r3, #32
 8019c0e:	fa06 f003 	lslle.w	r0, r6, r3
 8019c12:	4318      	orrgt	r0, r3
 8019c14:	f7e6 fc76 	bl	8000504 <__aeabi_ui2d>
 8019c18:	2301      	movs	r3, #1
 8019c1a:	4606      	mov	r6, r0
 8019c1c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019c20:	3d01      	subs	r5, #1
 8019c22:	9310      	str	r3, [sp, #64]	; 0x40
 8019c24:	e771      	b.n	8019b0a <_dtoa_r+0x11a>
 8019c26:	2301      	movs	r3, #1
 8019c28:	e7b6      	b.n	8019b98 <_dtoa_r+0x1a8>
 8019c2a:	900e      	str	r0, [sp, #56]	; 0x38
 8019c2c:	e7b5      	b.n	8019b9a <_dtoa_r+0x1aa>
 8019c2e:	f1ca 0300 	rsb	r3, sl, #0
 8019c32:	9306      	str	r3, [sp, #24]
 8019c34:	2300      	movs	r3, #0
 8019c36:	eba8 080a 	sub.w	r8, r8, sl
 8019c3a:	930d      	str	r3, [sp, #52]	; 0x34
 8019c3c:	e7c2      	b.n	8019bc4 <_dtoa_r+0x1d4>
 8019c3e:	2300      	movs	r3, #0
 8019c40:	9308      	str	r3, [sp, #32]
 8019c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	dc39      	bgt.n	8019cbc <_dtoa_r+0x2cc>
 8019c48:	f04f 0901 	mov.w	r9, #1
 8019c4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019c50:	464b      	mov	r3, r9
 8019c52:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019c56:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019c58:	2200      	movs	r2, #0
 8019c5a:	6042      	str	r2, [r0, #4]
 8019c5c:	2204      	movs	r2, #4
 8019c5e:	f102 0614 	add.w	r6, r2, #20
 8019c62:	429e      	cmp	r6, r3
 8019c64:	6841      	ldr	r1, [r0, #4]
 8019c66:	d92f      	bls.n	8019cc8 <_dtoa_r+0x2d8>
 8019c68:	4620      	mov	r0, r4
 8019c6a:	f000 fd91 	bl	801a790 <_Balloc>
 8019c6e:	9000      	str	r0, [sp, #0]
 8019c70:	2800      	cmp	r0, #0
 8019c72:	d14b      	bne.n	8019d0c <_dtoa_r+0x31c>
 8019c74:	4b24      	ldr	r3, [pc, #144]	; (8019d08 <_dtoa_r+0x318>)
 8019c76:	4602      	mov	r2, r0
 8019c78:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8019c7c:	e6d1      	b.n	8019a22 <_dtoa_r+0x32>
 8019c7e:	2301      	movs	r3, #1
 8019c80:	e7de      	b.n	8019c40 <_dtoa_r+0x250>
 8019c82:	2300      	movs	r3, #0
 8019c84:	9308      	str	r3, [sp, #32]
 8019c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c88:	eb0a 0903 	add.w	r9, sl, r3
 8019c8c:	f109 0301 	add.w	r3, r9, #1
 8019c90:	2b01      	cmp	r3, #1
 8019c92:	9301      	str	r3, [sp, #4]
 8019c94:	bfb8      	it	lt
 8019c96:	2301      	movlt	r3, #1
 8019c98:	e7dd      	b.n	8019c56 <_dtoa_r+0x266>
 8019c9a:	2301      	movs	r3, #1
 8019c9c:	e7f2      	b.n	8019c84 <_dtoa_r+0x294>
 8019c9e:	2501      	movs	r5, #1
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	9305      	str	r3, [sp, #20]
 8019ca4:	9508      	str	r5, [sp, #32]
 8019ca6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8019caa:	2200      	movs	r2, #0
 8019cac:	f8cd 9004 	str.w	r9, [sp, #4]
 8019cb0:	2312      	movs	r3, #18
 8019cb2:	9209      	str	r2, [sp, #36]	; 0x24
 8019cb4:	e7cf      	b.n	8019c56 <_dtoa_r+0x266>
 8019cb6:	2301      	movs	r3, #1
 8019cb8:	9308      	str	r3, [sp, #32]
 8019cba:	e7f4      	b.n	8019ca6 <_dtoa_r+0x2b6>
 8019cbc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019cc0:	f8cd 9004 	str.w	r9, [sp, #4]
 8019cc4:	464b      	mov	r3, r9
 8019cc6:	e7c6      	b.n	8019c56 <_dtoa_r+0x266>
 8019cc8:	3101      	adds	r1, #1
 8019cca:	6041      	str	r1, [r0, #4]
 8019ccc:	0052      	lsls	r2, r2, #1
 8019cce:	e7c6      	b.n	8019c5e <_dtoa_r+0x26e>
 8019cd0:	636f4361 	.word	0x636f4361
 8019cd4:	3fd287a7 	.word	0x3fd287a7
 8019cd8:	8b60c8b3 	.word	0x8b60c8b3
 8019cdc:	3fc68a28 	.word	0x3fc68a28
 8019ce0:	509f79fb 	.word	0x509f79fb
 8019ce4:	3fd34413 	.word	0x3fd34413
 8019ce8:	08020b56 	.word	0x08020b56
 8019cec:	08020b6d 	.word	0x08020b6d
 8019cf0:	7ff00000 	.word	0x7ff00000
 8019cf4:	08020b52 	.word	0x08020b52
 8019cf8:	08020b49 	.word	0x08020b49
 8019cfc:	08020b01 	.word	0x08020b01
 8019d00:	3ff80000 	.word	0x3ff80000
 8019d04:	08020c68 	.word	0x08020c68
 8019d08:	08020bcc 	.word	0x08020bcc
 8019d0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019d0e:	9a00      	ldr	r2, [sp, #0]
 8019d10:	601a      	str	r2, [r3, #0]
 8019d12:	9b01      	ldr	r3, [sp, #4]
 8019d14:	2b0e      	cmp	r3, #14
 8019d16:	f200 80ad 	bhi.w	8019e74 <_dtoa_r+0x484>
 8019d1a:	2d00      	cmp	r5, #0
 8019d1c:	f000 80aa 	beq.w	8019e74 <_dtoa_r+0x484>
 8019d20:	f1ba 0f00 	cmp.w	sl, #0
 8019d24:	dd36      	ble.n	8019d94 <_dtoa_r+0x3a4>
 8019d26:	4ac3      	ldr	r2, [pc, #780]	; (801a034 <_dtoa_r+0x644>)
 8019d28:	f00a 030f 	and.w	r3, sl, #15
 8019d2c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019d30:	ed93 7b00 	vldr	d7, [r3]
 8019d34:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019d38:	ea4f 172a 	mov.w	r7, sl, asr #4
 8019d3c:	eeb0 8a47 	vmov.f32	s16, s14
 8019d40:	eef0 8a67 	vmov.f32	s17, s15
 8019d44:	d016      	beq.n	8019d74 <_dtoa_r+0x384>
 8019d46:	4bbc      	ldr	r3, [pc, #752]	; (801a038 <_dtoa_r+0x648>)
 8019d48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019d4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019d50:	f7e6 fd7c 	bl	800084c <__aeabi_ddiv>
 8019d54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019d58:	f007 070f 	and.w	r7, r7, #15
 8019d5c:	2503      	movs	r5, #3
 8019d5e:	4eb6      	ldr	r6, [pc, #728]	; (801a038 <_dtoa_r+0x648>)
 8019d60:	b957      	cbnz	r7, 8019d78 <_dtoa_r+0x388>
 8019d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019d66:	ec53 2b18 	vmov	r2, r3, d8
 8019d6a:	f7e6 fd6f 	bl	800084c <__aeabi_ddiv>
 8019d6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019d72:	e029      	b.n	8019dc8 <_dtoa_r+0x3d8>
 8019d74:	2502      	movs	r5, #2
 8019d76:	e7f2      	b.n	8019d5e <_dtoa_r+0x36e>
 8019d78:	07f9      	lsls	r1, r7, #31
 8019d7a:	d508      	bpl.n	8019d8e <_dtoa_r+0x39e>
 8019d7c:	ec51 0b18 	vmov	r0, r1, d8
 8019d80:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019d84:	f7e6 fc38 	bl	80005f8 <__aeabi_dmul>
 8019d88:	ec41 0b18 	vmov	d8, r0, r1
 8019d8c:	3501      	adds	r5, #1
 8019d8e:	107f      	asrs	r7, r7, #1
 8019d90:	3608      	adds	r6, #8
 8019d92:	e7e5      	b.n	8019d60 <_dtoa_r+0x370>
 8019d94:	f000 80a6 	beq.w	8019ee4 <_dtoa_r+0x4f4>
 8019d98:	f1ca 0600 	rsb	r6, sl, #0
 8019d9c:	4ba5      	ldr	r3, [pc, #660]	; (801a034 <_dtoa_r+0x644>)
 8019d9e:	4fa6      	ldr	r7, [pc, #664]	; (801a038 <_dtoa_r+0x648>)
 8019da0:	f006 020f 	and.w	r2, r6, #15
 8019da4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8019db0:	f7e6 fc22 	bl	80005f8 <__aeabi_dmul>
 8019db4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019db8:	1136      	asrs	r6, r6, #4
 8019dba:	2300      	movs	r3, #0
 8019dbc:	2502      	movs	r5, #2
 8019dbe:	2e00      	cmp	r6, #0
 8019dc0:	f040 8085 	bne.w	8019ece <_dtoa_r+0x4de>
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d1d2      	bne.n	8019d6e <_dtoa_r+0x37e>
 8019dc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	f000 808c 	beq.w	8019ee8 <_dtoa_r+0x4f8>
 8019dd0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019dd4:	4b99      	ldr	r3, [pc, #612]	; (801a03c <_dtoa_r+0x64c>)
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	4630      	mov	r0, r6
 8019dda:	4639      	mov	r1, r7
 8019ddc:	f7e6 fe7e 	bl	8000adc <__aeabi_dcmplt>
 8019de0:	2800      	cmp	r0, #0
 8019de2:	f000 8081 	beq.w	8019ee8 <_dtoa_r+0x4f8>
 8019de6:	9b01      	ldr	r3, [sp, #4]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d07d      	beq.n	8019ee8 <_dtoa_r+0x4f8>
 8019dec:	f1b9 0f00 	cmp.w	r9, #0
 8019df0:	dd3c      	ble.n	8019e6c <_dtoa_r+0x47c>
 8019df2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8019df6:	9307      	str	r3, [sp, #28]
 8019df8:	2200      	movs	r2, #0
 8019dfa:	4b91      	ldr	r3, [pc, #580]	; (801a040 <_dtoa_r+0x650>)
 8019dfc:	4630      	mov	r0, r6
 8019dfe:	4639      	mov	r1, r7
 8019e00:	f7e6 fbfa 	bl	80005f8 <__aeabi_dmul>
 8019e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e08:	3501      	adds	r5, #1
 8019e0a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8019e0e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019e12:	4628      	mov	r0, r5
 8019e14:	f7e6 fb86 	bl	8000524 <__aeabi_i2d>
 8019e18:	4632      	mov	r2, r6
 8019e1a:	463b      	mov	r3, r7
 8019e1c:	f7e6 fbec 	bl	80005f8 <__aeabi_dmul>
 8019e20:	4b88      	ldr	r3, [pc, #544]	; (801a044 <_dtoa_r+0x654>)
 8019e22:	2200      	movs	r2, #0
 8019e24:	f7e6 fa32 	bl	800028c <__adddf3>
 8019e28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8019e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019e30:	9303      	str	r3, [sp, #12]
 8019e32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019e34:	2b00      	cmp	r3, #0
 8019e36:	d15c      	bne.n	8019ef2 <_dtoa_r+0x502>
 8019e38:	4b83      	ldr	r3, [pc, #524]	; (801a048 <_dtoa_r+0x658>)
 8019e3a:	2200      	movs	r2, #0
 8019e3c:	4630      	mov	r0, r6
 8019e3e:	4639      	mov	r1, r7
 8019e40:	f7e6 fa22 	bl	8000288 <__aeabi_dsub>
 8019e44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019e48:	4606      	mov	r6, r0
 8019e4a:	460f      	mov	r7, r1
 8019e4c:	f7e6 fe64 	bl	8000b18 <__aeabi_dcmpgt>
 8019e50:	2800      	cmp	r0, #0
 8019e52:	f040 8296 	bne.w	801a382 <_dtoa_r+0x992>
 8019e56:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8019e5a:	4630      	mov	r0, r6
 8019e5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019e60:	4639      	mov	r1, r7
 8019e62:	f7e6 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8019e66:	2800      	cmp	r0, #0
 8019e68:	f040 8288 	bne.w	801a37c <_dtoa_r+0x98c>
 8019e6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019e70:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019e74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	f2c0 8158 	blt.w	801a12c <_dtoa_r+0x73c>
 8019e7c:	f1ba 0f0e 	cmp.w	sl, #14
 8019e80:	f300 8154 	bgt.w	801a12c <_dtoa_r+0x73c>
 8019e84:	4b6b      	ldr	r3, [pc, #428]	; (801a034 <_dtoa_r+0x644>)
 8019e86:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8019e8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	f280 80e3 	bge.w	801a05c <_dtoa_r+0x66c>
 8019e96:	9b01      	ldr	r3, [sp, #4]
 8019e98:	2b00      	cmp	r3, #0
 8019e9a:	f300 80df 	bgt.w	801a05c <_dtoa_r+0x66c>
 8019e9e:	f040 826d 	bne.w	801a37c <_dtoa_r+0x98c>
 8019ea2:	4b69      	ldr	r3, [pc, #420]	; (801a048 <_dtoa_r+0x658>)
 8019ea4:	2200      	movs	r2, #0
 8019ea6:	4640      	mov	r0, r8
 8019ea8:	4649      	mov	r1, r9
 8019eaa:	f7e6 fba5 	bl	80005f8 <__aeabi_dmul>
 8019eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019eb2:	f7e6 fe27 	bl	8000b04 <__aeabi_dcmpge>
 8019eb6:	9e01      	ldr	r6, [sp, #4]
 8019eb8:	4637      	mov	r7, r6
 8019eba:	2800      	cmp	r0, #0
 8019ebc:	f040 8243 	bne.w	801a346 <_dtoa_r+0x956>
 8019ec0:	9d00      	ldr	r5, [sp, #0]
 8019ec2:	2331      	movs	r3, #49	; 0x31
 8019ec4:	f805 3b01 	strb.w	r3, [r5], #1
 8019ec8:	f10a 0a01 	add.w	sl, sl, #1
 8019ecc:	e23f      	b.n	801a34e <_dtoa_r+0x95e>
 8019ece:	07f2      	lsls	r2, r6, #31
 8019ed0:	d505      	bpl.n	8019ede <_dtoa_r+0x4ee>
 8019ed2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019ed6:	f7e6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8019eda:	3501      	adds	r5, #1
 8019edc:	2301      	movs	r3, #1
 8019ede:	1076      	asrs	r6, r6, #1
 8019ee0:	3708      	adds	r7, #8
 8019ee2:	e76c      	b.n	8019dbe <_dtoa_r+0x3ce>
 8019ee4:	2502      	movs	r5, #2
 8019ee6:	e76f      	b.n	8019dc8 <_dtoa_r+0x3d8>
 8019ee8:	9b01      	ldr	r3, [sp, #4]
 8019eea:	f8cd a01c 	str.w	sl, [sp, #28]
 8019eee:	930c      	str	r3, [sp, #48]	; 0x30
 8019ef0:	e78d      	b.n	8019e0e <_dtoa_r+0x41e>
 8019ef2:	9900      	ldr	r1, [sp, #0]
 8019ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8019ef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8019ef8:	4b4e      	ldr	r3, [pc, #312]	; (801a034 <_dtoa_r+0x644>)
 8019efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019efe:	4401      	add	r1, r0
 8019f00:	9102      	str	r1, [sp, #8]
 8019f02:	9908      	ldr	r1, [sp, #32]
 8019f04:	eeb0 8a47 	vmov.f32	s16, s14
 8019f08:	eef0 8a67 	vmov.f32	s17, s15
 8019f0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019f10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019f14:	2900      	cmp	r1, #0
 8019f16:	d045      	beq.n	8019fa4 <_dtoa_r+0x5b4>
 8019f18:	494c      	ldr	r1, [pc, #304]	; (801a04c <_dtoa_r+0x65c>)
 8019f1a:	2000      	movs	r0, #0
 8019f1c:	f7e6 fc96 	bl	800084c <__aeabi_ddiv>
 8019f20:	ec53 2b18 	vmov	r2, r3, d8
 8019f24:	f7e6 f9b0 	bl	8000288 <__aeabi_dsub>
 8019f28:	9d00      	ldr	r5, [sp, #0]
 8019f2a:	ec41 0b18 	vmov	d8, r0, r1
 8019f2e:	4639      	mov	r1, r7
 8019f30:	4630      	mov	r0, r6
 8019f32:	f7e6 fe11 	bl	8000b58 <__aeabi_d2iz>
 8019f36:	900c      	str	r0, [sp, #48]	; 0x30
 8019f38:	f7e6 faf4 	bl	8000524 <__aeabi_i2d>
 8019f3c:	4602      	mov	r2, r0
 8019f3e:	460b      	mov	r3, r1
 8019f40:	4630      	mov	r0, r6
 8019f42:	4639      	mov	r1, r7
 8019f44:	f7e6 f9a0 	bl	8000288 <__aeabi_dsub>
 8019f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019f4a:	3330      	adds	r3, #48	; 0x30
 8019f4c:	f805 3b01 	strb.w	r3, [r5], #1
 8019f50:	ec53 2b18 	vmov	r2, r3, d8
 8019f54:	4606      	mov	r6, r0
 8019f56:	460f      	mov	r7, r1
 8019f58:	f7e6 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	d165      	bne.n	801a02c <_dtoa_r+0x63c>
 8019f60:	4632      	mov	r2, r6
 8019f62:	463b      	mov	r3, r7
 8019f64:	4935      	ldr	r1, [pc, #212]	; (801a03c <_dtoa_r+0x64c>)
 8019f66:	2000      	movs	r0, #0
 8019f68:	f7e6 f98e 	bl	8000288 <__aeabi_dsub>
 8019f6c:	ec53 2b18 	vmov	r2, r3, d8
 8019f70:	f7e6 fdb4 	bl	8000adc <__aeabi_dcmplt>
 8019f74:	2800      	cmp	r0, #0
 8019f76:	f040 80b9 	bne.w	801a0ec <_dtoa_r+0x6fc>
 8019f7a:	9b02      	ldr	r3, [sp, #8]
 8019f7c:	429d      	cmp	r5, r3
 8019f7e:	f43f af75 	beq.w	8019e6c <_dtoa_r+0x47c>
 8019f82:	4b2f      	ldr	r3, [pc, #188]	; (801a040 <_dtoa_r+0x650>)
 8019f84:	ec51 0b18 	vmov	r0, r1, d8
 8019f88:	2200      	movs	r2, #0
 8019f8a:	f7e6 fb35 	bl	80005f8 <__aeabi_dmul>
 8019f8e:	4b2c      	ldr	r3, [pc, #176]	; (801a040 <_dtoa_r+0x650>)
 8019f90:	ec41 0b18 	vmov	d8, r0, r1
 8019f94:	2200      	movs	r2, #0
 8019f96:	4630      	mov	r0, r6
 8019f98:	4639      	mov	r1, r7
 8019f9a:	f7e6 fb2d 	bl	80005f8 <__aeabi_dmul>
 8019f9e:	4606      	mov	r6, r0
 8019fa0:	460f      	mov	r7, r1
 8019fa2:	e7c4      	b.n	8019f2e <_dtoa_r+0x53e>
 8019fa4:	ec51 0b17 	vmov	r0, r1, d7
 8019fa8:	f7e6 fb26 	bl	80005f8 <__aeabi_dmul>
 8019fac:	9b02      	ldr	r3, [sp, #8]
 8019fae:	9d00      	ldr	r5, [sp, #0]
 8019fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8019fb2:	ec41 0b18 	vmov	d8, r0, r1
 8019fb6:	4639      	mov	r1, r7
 8019fb8:	4630      	mov	r0, r6
 8019fba:	f7e6 fdcd 	bl	8000b58 <__aeabi_d2iz>
 8019fbe:	9011      	str	r0, [sp, #68]	; 0x44
 8019fc0:	f7e6 fab0 	bl	8000524 <__aeabi_i2d>
 8019fc4:	4602      	mov	r2, r0
 8019fc6:	460b      	mov	r3, r1
 8019fc8:	4630      	mov	r0, r6
 8019fca:	4639      	mov	r1, r7
 8019fcc:	f7e6 f95c 	bl	8000288 <__aeabi_dsub>
 8019fd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019fd2:	3330      	adds	r3, #48	; 0x30
 8019fd4:	f805 3b01 	strb.w	r3, [r5], #1
 8019fd8:	9b02      	ldr	r3, [sp, #8]
 8019fda:	429d      	cmp	r5, r3
 8019fdc:	4606      	mov	r6, r0
 8019fde:	460f      	mov	r7, r1
 8019fe0:	f04f 0200 	mov.w	r2, #0
 8019fe4:	d134      	bne.n	801a050 <_dtoa_r+0x660>
 8019fe6:	4b19      	ldr	r3, [pc, #100]	; (801a04c <_dtoa_r+0x65c>)
 8019fe8:	ec51 0b18 	vmov	r0, r1, d8
 8019fec:	f7e6 f94e 	bl	800028c <__adddf3>
 8019ff0:	4602      	mov	r2, r0
 8019ff2:	460b      	mov	r3, r1
 8019ff4:	4630      	mov	r0, r6
 8019ff6:	4639      	mov	r1, r7
 8019ff8:	f7e6 fd8e 	bl	8000b18 <__aeabi_dcmpgt>
 8019ffc:	2800      	cmp	r0, #0
 8019ffe:	d175      	bne.n	801a0ec <_dtoa_r+0x6fc>
 801a000:	ec53 2b18 	vmov	r2, r3, d8
 801a004:	4911      	ldr	r1, [pc, #68]	; (801a04c <_dtoa_r+0x65c>)
 801a006:	2000      	movs	r0, #0
 801a008:	f7e6 f93e 	bl	8000288 <__aeabi_dsub>
 801a00c:	4602      	mov	r2, r0
 801a00e:	460b      	mov	r3, r1
 801a010:	4630      	mov	r0, r6
 801a012:	4639      	mov	r1, r7
 801a014:	f7e6 fd62 	bl	8000adc <__aeabi_dcmplt>
 801a018:	2800      	cmp	r0, #0
 801a01a:	f43f af27 	beq.w	8019e6c <_dtoa_r+0x47c>
 801a01e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a020:	1e6b      	subs	r3, r5, #1
 801a022:	930c      	str	r3, [sp, #48]	; 0x30
 801a024:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801a028:	2b30      	cmp	r3, #48	; 0x30
 801a02a:	d0f8      	beq.n	801a01e <_dtoa_r+0x62e>
 801a02c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a030:	e04a      	b.n	801a0c8 <_dtoa_r+0x6d8>
 801a032:	bf00      	nop
 801a034:	08020c68 	.word	0x08020c68
 801a038:	08020c40 	.word	0x08020c40
 801a03c:	3ff00000 	.word	0x3ff00000
 801a040:	40240000 	.word	0x40240000
 801a044:	401c0000 	.word	0x401c0000
 801a048:	40140000 	.word	0x40140000
 801a04c:	3fe00000 	.word	0x3fe00000
 801a050:	4baf      	ldr	r3, [pc, #700]	; (801a310 <_dtoa_r+0x920>)
 801a052:	f7e6 fad1 	bl	80005f8 <__aeabi_dmul>
 801a056:	4606      	mov	r6, r0
 801a058:	460f      	mov	r7, r1
 801a05a:	e7ac      	b.n	8019fb6 <_dtoa_r+0x5c6>
 801a05c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801a060:	9d00      	ldr	r5, [sp, #0]
 801a062:	4642      	mov	r2, r8
 801a064:	464b      	mov	r3, r9
 801a066:	4630      	mov	r0, r6
 801a068:	4639      	mov	r1, r7
 801a06a:	f7e6 fbef 	bl	800084c <__aeabi_ddiv>
 801a06e:	f7e6 fd73 	bl	8000b58 <__aeabi_d2iz>
 801a072:	9002      	str	r0, [sp, #8]
 801a074:	f7e6 fa56 	bl	8000524 <__aeabi_i2d>
 801a078:	4642      	mov	r2, r8
 801a07a:	464b      	mov	r3, r9
 801a07c:	f7e6 fabc 	bl	80005f8 <__aeabi_dmul>
 801a080:	4602      	mov	r2, r0
 801a082:	460b      	mov	r3, r1
 801a084:	4630      	mov	r0, r6
 801a086:	4639      	mov	r1, r7
 801a088:	f7e6 f8fe 	bl	8000288 <__aeabi_dsub>
 801a08c:	9e02      	ldr	r6, [sp, #8]
 801a08e:	9f01      	ldr	r7, [sp, #4]
 801a090:	3630      	adds	r6, #48	; 0x30
 801a092:	f805 6b01 	strb.w	r6, [r5], #1
 801a096:	9e00      	ldr	r6, [sp, #0]
 801a098:	1bae      	subs	r6, r5, r6
 801a09a:	42b7      	cmp	r7, r6
 801a09c:	4602      	mov	r2, r0
 801a09e:	460b      	mov	r3, r1
 801a0a0:	d137      	bne.n	801a112 <_dtoa_r+0x722>
 801a0a2:	f7e6 f8f3 	bl	800028c <__adddf3>
 801a0a6:	4642      	mov	r2, r8
 801a0a8:	464b      	mov	r3, r9
 801a0aa:	4606      	mov	r6, r0
 801a0ac:	460f      	mov	r7, r1
 801a0ae:	f7e6 fd33 	bl	8000b18 <__aeabi_dcmpgt>
 801a0b2:	b9c8      	cbnz	r0, 801a0e8 <_dtoa_r+0x6f8>
 801a0b4:	4642      	mov	r2, r8
 801a0b6:	464b      	mov	r3, r9
 801a0b8:	4630      	mov	r0, r6
 801a0ba:	4639      	mov	r1, r7
 801a0bc:	f7e6 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 801a0c0:	b110      	cbz	r0, 801a0c8 <_dtoa_r+0x6d8>
 801a0c2:	9b02      	ldr	r3, [sp, #8]
 801a0c4:	07d9      	lsls	r1, r3, #31
 801a0c6:	d40f      	bmi.n	801a0e8 <_dtoa_r+0x6f8>
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	4659      	mov	r1, fp
 801a0cc:	f000 fba0 	bl	801a810 <_Bfree>
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	702b      	strb	r3, [r5, #0]
 801a0d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a0d6:	f10a 0001 	add.w	r0, sl, #1
 801a0da:	6018      	str	r0, [r3, #0]
 801a0dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a0de:	2b00      	cmp	r3, #0
 801a0e0:	f43f acd8 	beq.w	8019a94 <_dtoa_r+0xa4>
 801a0e4:	601d      	str	r5, [r3, #0]
 801a0e6:	e4d5      	b.n	8019a94 <_dtoa_r+0xa4>
 801a0e8:	f8cd a01c 	str.w	sl, [sp, #28]
 801a0ec:	462b      	mov	r3, r5
 801a0ee:	461d      	mov	r5, r3
 801a0f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a0f4:	2a39      	cmp	r2, #57	; 0x39
 801a0f6:	d108      	bne.n	801a10a <_dtoa_r+0x71a>
 801a0f8:	9a00      	ldr	r2, [sp, #0]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d1f7      	bne.n	801a0ee <_dtoa_r+0x6fe>
 801a0fe:	9a07      	ldr	r2, [sp, #28]
 801a100:	9900      	ldr	r1, [sp, #0]
 801a102:	3201      	adds	r2, #1
 801a104:	9207      	str	r2, [sp, #28]
 801a106:	2230      	movs	r2, #48	; 0x30
 801a108:	700a      	strb	r2, [r1, #0]
 801a10a:	781a      	ldrb	r2, [r3, #0]
 801a10c:	3201      	adds	r2, #1
 801a10e:	701a      	strb	r2, [r3, #0]
 801a110:	e78c      	b.n	801a02c <_dtoa_r+0x63c>
 801a112:	4b7f      	ldr	r3, [pc, #508]	; (801a310 <_dtoa_r+0x920>)
 801a114:	2200      	movs	r2, #0
 801a116:	f7e6 fa6f 	bl	80005f8 <__aeabi_dmul>
 801a11a:	2200      	movs	r2, #0
 801a11c:	2300      	movs	r3, #0
 801a11e:	4606      	mov	r6, r0
 801a120:	460f      	mov	r7, r1
 801a122:	f7e6 fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 801a126:	2800      	cmp	r0, #0
 801a128:	d09b      	beq.n	801a062 <_dtoa_r+0x672>
 801a12a:	e7cd      	b.n	801a0c8 <_dtoa_r+0x6d8>
 801a12c:	9a08      	ldr	r2, [sp, #32]
 801a12e:	2a00      	cmp	r2, #0
 801a130:	f000 80c4 	beq.w	801a2bc <_dtoa_r+0x8cc>
 801a134:	9a05      	ldr	r2, [sp, #20]
 801a136:	2a01      	cmp	r2, #1
 801a138:	f300 80a8 	bgt.w	801a28c <_dtoa_r+0x89c>
 801a13c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a13e:	2a00      	cmp	r2, #0
 801a140:	f000 80a0 	beq.w	801a284 <_dtoa_r+0x894>
 801a144:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801a148:	9e06      	ldr	r6, [sp, #24]
 801a14a:	4645      	mov	r5, r8
 801a14c:	9a04      	ldr	r2, [sp, #16]
 801a14e:	2101      	movs	r1, #1
 801a150:	441a      	add	r2, r3
 801a152:	4620      	mov	r0, r4
 801a154:	4498      	add	r8, r3
 801a156:	9204      	str	r2, [sp, #16]
 801a158:	f000 fc16 	bl	801a988 <__i2b>
 801a15c:	4607      	mov	r7, r0
 801a15e:	2d00      	cmp	r5, #0
 801a160:	dd0b      	ble.n	801a17a <_dtoa_r+0x78a>
 801a162:	9b04      	ldr	r3, [sp, #16]
 801a164:	2b00      	cmp	r3, #0
 801a166:	dd08      	ble.n	801a17a <_dtoa_r+0x78a>
 801a168:	42ab      	cmp	r3, r5
 801a16a:	9a04      	ldr	r2, [sp, #16]
 801a16c:	bfa8      	it	ge
 801a16e:	462b      	movge	r3, r5
 801a170:	eba8 0803 	sub.w	r8, r8, r3
 801a174:	1aed      	subs	r5, r5, r3
 801a176:	1ad3      	subs	r3, r2, r3
 801a178:	9304      	str	r3, [sp, #16]
 801a17a:	9b06      	ldr	r3, [sp, #24]
 801a17c:	b1fb      	cbz	r3, 801a1be <_dtoa_r+0x7ce>
 801a17e:	9b08      	ldr	r3, [sp, #32]
 801a180:	2b00      	cmp	r3, #0
 801a182:	f000 809f 	beq.w	801a2c4 <_dtoa_r+0x8d4>
 801a186:	2e00      	cmp	r6, #0
 801a188:	dd11      	ble.n	801a1ae <_dtoa_r+0x7be>
 801a18a:	4639      	mov	r1, r7
 801a18c:	4632      	mov	r2, r6
 801a18e:	4620      	mov	r0, r4
 801a190:	f000 fcb6 	bl	801ab00 <__pow5mult>
 801a194:	465a      	mov	r2, fp
 801a196:	4601      	mov	r1, r0
 801a198:	4607      	mov	r7, r0
 801a19a:	4620      	mov	r0, r4
 801a19c:	f000 fc0a 	bl	801a9b4 <__multiply>
 801a1a0:	4659      	mov	r1, fp
 801a1a2:	9007      	str	r0, [sp, #28]
 801a1a4:	4620      	mov	r0, r4
 801a1a6:	f000 fb33 	bl	801a810 <_Bfree>
 801a1aa:	9b07      	ldr	r3, [sp, #28]
 801a1ac:	469b      	mov	fp, r3
 801a1ae:	9b06      	ldr	r3, [sp, #24]
 801a1b0:	1b9a      	subs	r2, r3, r6
 801a1b2:	d004      	beq.n	801a1be <_dtoa_r+0x7ce>
 801a1b4:	4659      	mov	r1, fp
 801a1b6:	4620      	mov	r0, r4
 801a1b8:	f000 fca2 	bl	801ab00 <__pow5mult>
 801a1bc:	4683      	mov	fp, r0
 801a1be:	2101      	movs	r1, #1
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f000 fbe1 	bl	801a988 <__i2b>
 801a1c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	4606      	mov	r6, r0
 801a1cc:	dd7c      	ble.n	801a2c8 <_dtoa_r+0x8d8>
 801a1ce:	461a      	mov	r2, r3
 801a1d0:	4601      	mov	r1, r0
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	f000 fc94 	bl	801ab00 <__pow5mult>
 801a1d8:	9b05      	ldr	r3, [sp, #20]
 801a1da:	2b01      	cmp	r3, #1
 801a1dc:	4606      	mov	r6, r0
 801a1de:	dd76      	ble.n	801a2ce <_dtoa_r+0x8de>
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	9306      	str	r3, [sp, #24]
 801a1e4:	6933      	ldr	r3, [r6, #16]
 801a1e6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801a1ea:	6918      	ldr	r0, [r3, #16]
 801a1ec:	f000 fb7c 	bl	801a8e8 <__hi0bits>
 801a1f0:	f1c0 0020 	rsb	r0, r0, #32
 801a1f4:	9b04      	ldr	r3, [sp, #16]
 801a1f6:	4418      	add	r0, r3
 801a1f8:	f010 001f 	ands.w	r0, r0, #31
 801a1fc:	f000 8086 	beq.w	801a30c <_dtoa_r+0x91c>
 801a200:	f1c0 0320 	rsb	r3, r0, #32
 801a204:	2b04      	cmp	r3, #4
 801a206:	dd7f      	ble.n	801a308 <_dtoa_r+0x918>
 801a208:	f1c0 001c 	rsb	r0, r0, #28
 801a20c:	9b04      	ldr	r3, [sp, #16]
 801a20e:	4403      	add	r3, r0
 801a210:	4480      	add	r8, r0
 801a212:	4405      	add	r5, r0
 801a214:	9304      	str	r3, [sp, #16]
 801a216:	f1b8 0f00 	cmp.w	r8, #0
 801a21a:	dd05      	ble.n	801a228 <_dtoa_r+0x838>
 801a21c:	4659      	mov	r1, fp
 801a21e:	4642      	mov	r2, r8
 801a220:	4620      	mov	r0, r4
 801a222:	f000 fcc7 	bl	801abb4 <__lshift>
 801a226:	4683      	mov	fp, r0
 801a228:	9b04      	ldr	r3, [sp, #16]
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	dd05      	ble.n	801a23a <_dtoa_r+0x84a>
 801a22e:	4631      	mov	r1, r6
 801a230:	461a      	mov	r2, r3
 801a232:	4620      	mov	r0, r4
 801a234:	f000 fcbe 	bl	801abb4 <__lshift>
 801a238:	4606      	mov	r6, r0
 801a23a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d069      	beq.n	801a314 <_dtoa_r+0x924>
 801a240:	4631      	mov	r1, r6
 801a242:	4658      	mov	r0, fp
 801a244:	f000 fd22 	bl	801ac8c <__mcmp>
 801a248:	2800      	cmp	r0, #0
 801a24a:	da63      	bge.n	801a314 <_dtoa_r+0x924>
 801a24c:	2300      	movs	r3, #0
 801a24e:	4659      	mov	r1, fp
 801a250:	220a      	movs	r2, #10
 801a252:	4620      	mov	r0, r4
 801a254:	f000 fafe 	bl	801a854 <__multadd>
 801a258:	9b08      	ldr	r3, [sp, #32]
 801a25a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801a25e:	4683      	mov	fp, r0
 801a260:	2b00      	cmp	r3, #0
 801a262:	f000 818f 	beq.w	801a584 <_dtoa_r+0xb94>
 801a266:	4639      	mov	r1, r7
 801a268:	2300      	movs	r3, #0
 801a26a:	220a      	movs	r2, #10
 801a26c:	4620      	mov	r0, r4
 801a26e:	f000 faf1 	bl	801a854 <__multadd>
 801a272:	f1b9 0f00 	cmp.w	r9, #0
 801a276:	4607      	mov	r7, r0
 801a278:	f300 808e 	bgt.w	801a398 <_dtoa_r+0x9a8>
 801a27c:	9b05      	ldr	r3, [sp, #20]
 801a27e:	2b02      	cmp	r3, #2
 801a280:	dc50      	bgt.n	801a324 <_dtoa_r+0x934>
 801a282:	e089      	b.n	801a398 <_dtoa_r+0x9a8>
 801a284:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801a28a:	e75d      	b.n	801a148 <_dtoa_r+0x758>
 801a28c:	9b01      	ldr	r3, [sp, #4]
 801a28e:	1e5e      	subs	r6, r3, #1
 801a290:	9b06      	ldr	r3, [sp, #24]
 801a292:	42b3      	cmp	r3, r6
 801a294:	bfbf      	itttt	lt
 801a296:	9b06      	ldrlt	r3, [sp, #24]
 801a298:	9606      	strlt	r6, [sp, #24]
 801a29a:	1af2      	sublt	r2, r6, r3
 801a29c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801a29e:	bfb6      	itet	lt
 801a2a0:	189b      	addlt	r3, r3, r2
 801a2a2:	1b9e      	subge	r6, r3, r6
 801a2a4:	930d      	strlt	r3, [sp, #52]	; 0x34
 801a2a6:	9b01      	ldr	r3, [sp, #4]
 801a2a8:	bfb8      	it	lt
 801a2aa:	2600      	movlt	r6, #0
 801a2ac:	2b00      	cmp	r3, #0
 801a2ae:	bfb5      	itete	lt
 801a2b0:	eba8 0503 	sublt.w	r5, r8, r3
 801a2b4:	9b01      	ldrge	r3, [sp, #4]
 801a2b6:	2300      	movlt	r3, #0
 801a2b8:	4645      	movge	r5, r8
 801a2ba:	e747      	b.n	801a14c <_dtoa_r+0x75c>
 801a2bc:	9e06      	ldr	r6, [sp, #24]
 801a2be:	9f08      	ldr	r7, [sp, #32]
 801a2c0:	4645      	mov	r5, r8
 801a2c2:	e74c      	b.n	801a15e <_dtoa_r+0x76e>
 801a2c4:	9a06      	ldr	r2, [sp, #24]
 801a2c6:	e775      	b.n	801a1b4 <_dtoa_r+0x7c4>
 801a2c8:	9b05      	ldr	r3, [sp, #20]
 801a2ca:	2b01      	cmp	r3, #1
 801a2cc:	dc18      	bgt.n	801a300 <_dtoa_r+0x910>
 801a2ce:	9b02      	ldr	r3, [sp, #8]
 801a2d0:	b9b3      	cbnz	r3, 801a300 <_dtoa_r+0x910>
 801a2d2:	9b03      	ldr	r3, [sp, #12]
 801a2d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a2d8:	b9a3      	cbnz	r3, 801a304 <_dtoa_r+0x914>
 801a2da:	9b03      	ldr	r3, [sp, #12]
 801a2dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a2e0:	0d1b      	lsrs	r3, r3, #20
 801a2e2:	051b      	lsls	r3, r3, #20
 801a2e4:	b12b      	cbz	r3, 801a2f2 <_dtoa_r+0x902>
 801a2e6:	9b04      	ldr	r3, [sp, #16]
 801a2e8:	3301      	adds	r3, #1
 801a2ea:	9304      	str	r3, [sp, #16]
 801a2ec:	f108 0801 	add.w	r8, r8, #1
 801a2f0:	2301      	movs	r3, #1
 801a2f2:	9306      	str	r3, [sp, #24]
 801a2f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2f6:	2b00      	cmp	r3, #0
 801a2f8:	f47f af74 	bne.w	801a1e4 <_dtoa_r+0x7f4>
 801a2fc:	2001      	movs	r0, #1
 801a2fe:	e779      	b.n	801a1f4 <_dtoa_r+0x804>
 801a300:	2300      	movs	r3, #0
 801a302:	e7f6      	b.n	801a2f2 <_dtoa_r+0x902>
 801a304:	9b02      	ldr	r3, [sp, #8]
 801a306:	e7f4      	b.n	801a2f2 <_dtoa_r+0x902>
 801a308:	d085      	beq.n	801a216 <_dtoa_r+0x826>
 801a30a:	4618      	mov	r0, r3
 801a30c:	301c      	adds	r0, #28
 801a30e:	e77d      	b.n	801a20c <_dtoa_r+0x81c>
 801a310:	40240000 	.word	0x40240000
 801a314:	9b01      	ldr	r3, [sp, #4]
 801a316:	2b00      	cmp	r3, #0
 801a318:	dc38      	bgt.n	801a38c <_dtoa_r+0x99c>
 801a31a:	9b05      	ldr	r3, [sp, #20]
 801a31c:	2b02      	cmp	r3, #2
 801a31e:	dd35      	ble.n	801a38c <_dtoa_r+0x99c>
 801a320:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a324:	f1b9 0f00 	cmp.w	r9, #0
 801a328:	d10d      	bne.n	801a346 <_dtoa_r+0x956>
 801a32a:	4631      	mov	r1, r6
 801a32c:	464b      	mov	r3, r9
 801a32e:	2205      	movs	r2, #5
 801a330:	4620      	mov	r0, r4
 801a332:	f000 fa8f 	bl	801a854 <__multadd>
 801a336:	4601      	mov	r1, r0
 801a338:	4606      	mov	r6, r0
 801a33a:	4658      	mov	r0, fp
 801a33c:	f000 fca6 	bl	801ac8c <__mcmp>
 801a340:	2800      	cmp	r0, #0
 801a342:	f73f adbd 	bgt.w	8019ec0 <_dtoa_r+0x4d0>
 801a346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a348:	9d00      	ldr	r5, [sp, #0]
 801a34a:	ea6f 0a03 	mvn.w	sl, r3
 801a34e:	f04f 0800 	mov.w	r8, #0
 801a352:	4631      	mov	r1, r6
 801a354:	4620      	mov	r0, r4
 801a356:	f000 fa5b 	bl	801a810 <_Bfree>
 801a35a:	2f00      	cmp	r7, #0
 801a35c:	f43f aeb4 	beq.w	801a0c8 <_dtoa_r+0x6d8>
 801a360:	f1b8 0f00 	cmp.w	r8, #0
 801a364:	d005      	beq.n	801a372 <_dtoa_r+0x982>
 801a366:	45b8      	cmp	r8, r7
 801a368:	d003      	beq.n	801a372 <_dtoa_r+0x982>
 801a36a:	4641      	mov	r1, r8
 801a36c:	4620      	mov	r0, r4
 801a36e:	f000 fa4f 	bl	801a810 <_Bfree>
 801a372:	4639      	mov	r1, r7
 801a374:	4620      	mov	r0, r4
 801a376:	f000 fa4b 	bl	801a810 <_Bfree>
 801a37a:	e6a5      	b.n	801a0c8 <_dtoa_r+0x6d8>
 801a37c:	2600      	movs	r6, #0
 801a37e:	4637      	mov	r7, r6
 801a380:	e7e1      	b.n	801a346 <_dtoa_r+0x956>
 801a382:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a384:	f8dd a01c 	ldr.w	sl, [sp, #28]
 801a388:	4637      	mov	r7, r6
 801a38a:	e599      	b.n	8019ec0 <_dtoa_r+0x4d0>
 801a38c:	9b08      	ldr	r3, [sp, #32]
 801a38e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801a392:	2b00      	cmp	r3, #0
 801a394:	f000 80fd 	beq.w	801a592 <_dtoa_r+0xba2>
 801a398:	2d00      	cmp	r5, #0
 801a39a:	dd05      	ble.n	801a3a8 <_dtoa_r+0x9b8>
 801a39c:	4639      	mov	r1, r7
 801a39e:	462a      	mov	r2, r5
 801a3a0:	4620      	mov	r0, r4
 801a3a2:	f000 fc07 	bl	801abb4 <__lshift>
 801a3a6:	4607      	mov	r7, r0
 801a3a8:	9b06      	ldr	r3, [sp, #24]
 801a3aa:	2b00      	cmp	r3, #0
 801a3ac:	d05c      	beq.n	801a468 <_dtoa_r+0xa78>
 801a3ae:	6879      	ldr	r1, [r7, #4]
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	f000 f9ed 	bl	801a790 <_Balloc>
 801a3b6:	4605      	mov	r5, r0
 801a3b8:	b928      	cbnz	r0, 801a3c6 <_dtoa_r+0x9d6>
 801a3ba:	4b80      	ldr	r3, [pc, #512]	; (801a5bc <_dtoa_r+0xbcc>)
 801a3bc:	4602      	mov	r2, r0
 801a3be:	f240 21ea 	movw	r1, #746	; 0x2ea
 801a3c2:	f7ff bb2e 	b.w	8019a22 <_dtoa_r+0x32>
 801a3c6:	693a      	ldr	r2, [r7, #16]
 801a3c8:	3202      	adds	r2, #2
 801a3ca:	0092      	lsls	r2, r2, #2
 801a3cc:	f107 010c 	add.w	r1, r7, #12
 801a3d0:	300c      	adds	r0, #12
 801a3d2:	f7fe fbfd 	bl	8018bd0 <memcpy>
 801a3d6:	2201      	movs	r2, #1
 801a3d8:	4629      	mov	r1, r5
 801a3da:	4620      	mov	r0, r4
 801a3dc:	f000 fbea 	bl	801abb4 <__lshift>
 801a3e0:	9b00      	ldr	r3, [sp, #0]
 801a3e2:	3301      	adds	r3, #1
 801a3e4:	9301      	str	r3, [sp, #4]
 801a3e6:	9b00      	ldr	r3, [sp, #0]
 801a3e8:	444b      	add	r3, r9
 801a3ea:	9307      	str	r3, [sp, #28]
 801a3ec:	9b02      	ldr	r3, [sp, #8]
 801a3ee:	f003 0301 	and.w	r3, r3, #1
 801a3f2:	46b8      	mov	r8, r7
 801a3f4:	9306      	str	r3, [sp, #24]
 801a3f6:	4607      	mov	r7, r0
 801a3f8:	9b01      	ldr	r3, [sp, #4]
 801a3fa:	4631      	mov	r1, r6
 801a3fc:	3b01      	subs	r3, #1
 801a3fe:	4658      	mov	r0, fp
 801a400:	9302      	str	r3, [sp, #8]
 801a402:	f7ff fa67 	bl	80198d4 <quorem>
 801a406:	4603      	mov	r3, r0
 801a408:	3330      	adds	r3, #48	; 0x30
 801a40a:	9004      	str	r0, [sp, #16]
 801a40c:	4641      	mov	r1, r8
 801a40e:	4658      	mov	r0, fp
 801a410:	9308      	str	r3, [sp, #32]
 801a412:	f000 fc3b 	bl	801ac8c <__mcmp>
 801a416:	463a      	mov	r2, r7
 801a418:	4681      	mov	r9, r0
 801a41a:	4631      	mov	r1, r6
 801a41c:	4620      	mov	r0, r4
 801a41e:	f000 fc51 	bl	801acc4 <__mdiff>
 801a422:	68c2      	ldr	r2, [r0, #12]
 801a424:	9b08      	ldr	r3, [sp, #32]
 801a426:	4605      	mov	r5, r0
 801a428:	bb02      	cbnz	r2, 801a46c <_dtoa_r+0xa7c>
 801a42a:	4601      	mov	r1, r0
 801a42c:	4658      	mov	r0, fp
 801a42e:	f000 fc2d 	bl	801ac8c <__mcmp>
 801a432:	9b08      	ldr	r3, [sp, #32]
 801a434:	4602      	mov	r2, r0
 801a436:	4629      	mov	r1, r5
 801a438:	4620      	mov	r0, r4
 801a43a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801a43e:	f000 f9e7 	bl	801a810 <_Bfree>
 801a442:	9b05      	ldr	r3, [sp, #20]
 801a444:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a446:	9d01      	ldr	r5, [sp, #4]
 801a448:	ea43 0102 	orr.w	r1, r3, r2
 801a44c:	9b06      	ldr	r3, [sp, #24]
 801a44e:	430b      	orrs	r3, r1
 801a450:	9b08      	ldr	r3, [sp, #32]
 801a452:	d10d      	bne.n	801a470 <_dtoa_r+0xa80>
 801a454:	2b39      	cmp	r3, #57	; 0x39
 801a456:	d029      	beq.n	801a4ac <_dtoa_r+0xabc>
 801a458:	f1b9 0f00 	cmp.w	r9, #0
 801a45c:	dd01      	ble.n	801a462 <_dtoa_r+0xa72>
 801a45e:	9b04      	ldr	r3, [sp, #16]
 801a460:	3331      	adds	r3, #49	; 0x31
 801a462:	9a02      	ldr	r2, [sp, #8]
 801a464:	7013      	strb	r3, [r2, #0]
 801a466:	e774      	b.n	801a352 <_dtoa_r+0x962>
 801a468:	4638      	mov	r0, r7
 801a46a:	e7b9      	b.n	801a3e0 <_dtoa_r+0x9f0>
 801a46c:	2201      	movs	r2, #1
 801a46e:	e7e2      	b.n	801a436 <_dtoa_r+0xa46>
 801a470:	f1b9 0f00 	cmp.w	r9, #0
 801a474:	db06      	blt.n	801a484 <_dtoa_r+0xa94>
 801a476:	9905      	ldr	r1, [sp, #20]
 801a478:	ea41 0909 	orr.w	r9, r1, r9
 801a47c:	9906      	ldr	r1, [sp, #24]
 801a47e:	ea59 0101 	orrs.w	r1, r9, r1
 801a482:	d120      	bne.n	801a4c6 <_dtoa_r+0xad6>
 801a484:	2a00      	cmp	r2, #0
 801a486:	ddec      	ble.n	801a462 <_dtoa_r+0xa72>
 801a488:	4659      	mov	r1, fp
 801a48a:	2201      	movs	r2, #1
 801a48c:	4620      	mov	r0, r4
 801a48e:	9301      	str	r3, [sp, #4]
 801a490:	f000 fb90 	bl	801abb4 <__lshift>
 801a494:	4631      	mov	r1, r6
 801a496:	4683      	mov	fp, r0
 801a498:	f000 fbf8 	bl	801ac8c <__mcmp>
 801a49c:	2800      	cmp	r0, #0
 801a49e:	9b01      	ldr	r3, [sp, #4]
 801a4a0:	dc02      	bgt.n	801a4a8 <_dtoa_r+0xab8>
 801a4a2:	d1de      	bne.n	801a462 <_dtoa_r+0xa72>
 801a4a4:	07da      	lsls	r2, r3, #31
 801a4a6:	d5dc      	bpl.n	801a462 <_dtoa_r+0xa72>
 801a4a8:	2b39      	cmp	r3, #57	; 0x39
 801a4aa:	d1d8      	bne.n	801a45e <_dtoa_r+0xa6e>
 801a4ac:	9a02      	ldr	r2, [sp, #8]
 801a4ae:	2339      	movs	r3, #57	; 0x39
 801a4b0:	7013      	strb	r3, [r2, #0]
 801a4b2:	462b      	mov	r3, r5
 801a4b4:	461d      	mov	r5, r3
 801a4b6:	3b01      	subs	r3, #1
 801a4b8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801a4bc:	2a39      	cmp	r2, #57	; 0x39
 801a4be:	d050      	beq.n	801a562 <_dtoa_r+0xb72>
 801a4c0:	3201      	adds	r2, #1
 801a4c2:	701a      	strb	r2, [r3, #0]
 801a4c4:	e745      	b.n	801a352 <_dtoa_r+0x962>
 801a4c6:	2a00      	cmp	r2, #0
 801a4c8:	dd03      	ble.n	801a4d2 <_dtoa_r+0xae2>
 801a4ca:	2b39      	cmp	r3, #57	; 0x39
 801a4cc:	d0ee      	beq.n	801a4ac <_dtoa_r+0xabc>
 801a4ce:	3301      	adds	r3, #1
 801a4d0:	e7c7      	b.n	801a462 <_dtoa_r+0xa72>
 801a4d2:	9a01      	ldr	r2, [sp, #4]
 801a4d4:	9907      	ldr	r1, [sp, #28]
 801a4d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801a4da:	428a      	cmp	r2, r1
 801a4dc:	d02a      	beq.n	801a534 <_dtoa_r+0xb44>
 801a4de:	4659      	mov	r1, fp
 801a4e0:	2300      	movs	r3, #0
 801a4e2:	220a      	movs	r2, #10
 801a4e4:	4620      	mov	r0, r4
 801a4e6:	f000 f9b5 	bl	801a854 <__multadd>
 801a4ea:	45b8      	cmp	r8, r7
 801a4ec:	4683      	mov	fp, r0
 801a4ee:	f04f 0300 	mov.w	r3, #0
 801a4f2:	f04f 020a 	mov.w	r2, #10
 801a4f6:	4641      	mov	r1, r8
 801a4f8:	4620      	mov	r0, r4
 801a4fa:	d107      	bne.n	801a50c <_dtoa_r+0xb1c>
 801a4fc:	f000 f9aa 	bl	801a854 <__multadd>
 801a500:	4680      	mov	r8, r0
 801a502:	4607      	mov	r7, r0
 801a504:	9b01      	ldr	r3, [sp, #4]
 801a506:	3301      	adds	r3, #1
 801a508:	9301      	str	r3, [sp, #4]
 801a50a:	e775      	b.n	801a3f8 <_dtoa_r+0xa08>
 801a50c:	f000 f9a2 	bl	801a854 <__multadd>
 801a510:	4639      	mov	r1, r7
 801a512:	4680      	mov	r8, r0
 801a514:	2300      	movs	r3, #0
 801a516:	220a      	movs	r2, #10
 801a518:	4620      	mov	r0, r4
 801a51a:	f000 f99b 	bl	801a854 <__multadd>
 801a51e:	4607      	mov	r7, r0
 801a520:	e7f0      	b.n	801a504 <_dtoa_r+0xb14>
 801a522:	f1b9 0f00 	cmp.w	r9, #0
 801a526:	9a00      	ldr	r2, [sp, #0]
 801a528:	bfcc      	ite	gt
 801a52a:	464d      	movgt	r5, r9
 801a52c:	2501      	movle	r5, #1
 801a52e:	4415      	add	r5, r2
 801a530:	f04f 0800 	mov.w	r8, #0
 801a534:	4659      	mov	r1, fp
 801a536:	2201      	movs	r2, #1
 801a538:	4620      	mov	r0, r4
 801a53a:	9301      	str	r3, [sp, #4]
 801a53c:	f000 fb3a 	bl	801abb4 <__lshift>
 801a540:	4631      	mov	r1, r6
 801a542:	4683      	mov	fp, r0
 801a544:	f000 fba2 	bl	801ac8c <__mcmp>
 801a548:	2800      	cmp	r0, #0
 801a54a:	dcb2      	bgt.n	801a4b2 <_dtoa_r+0xac2>
 801a54c:	d102      	bne.n	801a554 <_dtoa_r+0xb64>
 801a54e:	9b01      	ldr	r3, [sp, #4]
 801a550:	07db      	lsls	r3, r3, #31
 801a552:	d4ae      	bmi.n	801a4b2 <_dtoa_r+0xac2>
 801a554:	462b      	mov	r3, r5
 801a556:	461d      	mov	r5, r3
 801a558:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801a55c:	2a30      	cmp	r2, #48	; 0x30
 801a55e:	d0fa      	beq.n	801a556 <_dtoa_r+0xb66>
 801a560:	e6f7      	b.n	801a352 <_dtoa_r+0x962>
 801a562:	9a00      	ldr	r2, [sp, #0]
 801a564:	429a      	cmp	r2, r3
 801a566:	d1a5      	bne.n	801a4b4 <_dtoa_r+0xac4>
 801a568:	f10a 0a01 	add.w	sl, sl, #1
 801a56c:	2331      	movs	r3, #49	; 0x31
 801a56e:	e779      	b.n	801a464 <_dtoa_r+0xa74>
 801a570:	4b13      	ldr	r3, [pc, #76]	; (801a5c0 <_dtoa_r+0xbd0>)
 801a572:	f7ff baaf 	b.w	8019ad4 <_dtoa_r+0xe4>
 801a576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801a578:	2b00      	cmp	r3, #0
 801a57a:	f47f aa86 	bne.w	8019a8a <_dtoa_r+0x9a>
 801a57e:	4b11      	ldr	r3, [pc, #68]	; (801a5c4 <_dtoa_r+0xbd4>)
 801a580:	f7ff baa8 	b.w	8019ad4 <_dtoa_r+0xe4>
 801a584:	f1b9 0f00 	cmp.w	r9, #0
 801a588:	dc03      	bgt.n	801a592 <_dtoa_r+0xba2>
 801a58a:	9b05      	ldr	r3, [sp, #20]
 801a58c:	2b02      	cmp	r3, #2
 801a58e:	f73f aec9 	bgt.w	801a324 <_dtoa_r+0x934>
 801a592:	9d00      	ldr	r5, [sp, #0]
 801a594:	4631      	mov	r1, r6
 801a596:	4658      	mov	r0, fp
 801a598:	f7ff f99c 	bl	80198d4 <quorem>
 801a59c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801a5a0:	f805 3b01 	strb.w	r3, [r5], #1
 801a5a4:	9a00      	ldr	r2, [sp, #0]
 801a5a6:	1aaa      	subs	r2, r5, r2
 801a5a8:	4591      	cmp	r9, r2
 801a5aa:	ddba      	ble.n	801a522 <_dtoa_r+0xb32>
 801a5ac:	4659      	mov	r1, fp
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	220a      	movs	r2, #10
 801a5b2:	4620      	mov	r0, r4
 801a5b4:	f000 f94e 	bl	801a854 <__multadd>
 801a5b8:	4683      	mov	fp, r0
 801a5ba:	e7eb      	b.n	801a594 <_dtoa_r+0xba4>
 801a5bc:	08020bcc 	.word	0x08020bcc
 801a5c0:	08020b00 	.word	0x08020b00
 801a5c4:	08020b49 	.word	0x08020b49

0801a5c8 <__sflush_r>:
 801a5c8:	898a      	ldrh	r2, [r1, #12]
 801a5ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a5ce:	4605      	mov	r5, r0
 801a5d0:	0710      	lsls	r0, r2, #28
 801a5d2:	460c      	mov	r4, r1
 801a5d4:	d458      	bmi.n	801a688 <__sflush_r+0xc0>
 801a5d6:	684b      	ldr	r3, [r1, #4]
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	dc05      	bgt.n	801a5e8 <__sflush_r+0x20>
 801a5dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	dc02      	bgt.n	801a5e8 <__sflush_r+0x20>
 801a5e2:	2000      	movs	r0, #0
 801a5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5ea:	2e00      	cmp	r6, #0
 801a5ec:	d0f9      	beq.n	801a5e2 <__sflush_r+0x1a>
 801a5ee:	2300      	movs	r3, #0
 801a5f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a5f4:	682f      	ldr	r7, [r5, #0]
 801a5f6:	602b      	str	r3, [r5, #0]
 801a5f8:	d032      	beq.n	801a660 <__sflush_r+0x98>
 801a5fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a5fc:	89a3      	ldrh	r3, [r4, #12]
 801a5fe:	075a      	lsls	r2, r3, #29
 801a600:	d505      	bpl.n	801a60e <__sflush_r+0x46>
 801a602:	6863      	ldr	r3, [r4, #4]
 801a604:	1ac0      	subs	r0, r0, r3
 801a606:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a608:	b10b      	cbz	r3, 801a60e <__sflush_r+0x46>
 801a60a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a60c:	1ac0      	subs	r0, r0, r3
 801a60e:	2300      	movs	r3, #0
 801a610:	4602      	mov	r2, r0
 801a612:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a614:	6a21      	ldr	r1, [r4, #32]
 801a616:	4628      	mov	r0, r5
 801a618:	47b0      	blx	r6
 801a61a:	1c43      	adds	r3, r0, #1
 801a61c:	89a3      	ldrh	r3, [r4, #12]
 801a61e:	d106      	bne.n	801a62e <__sflush_r+0x66>
 801a620:	6829      	ldr	r1, [r5, #0]
 801a622:	291d      	cmp	r1, #29
 801a624:	d82c      	bhi.n	801a680 <__sflush_r+0xb8>
 801a626:	4a2a      	ldr	r2, [pc, #168]	; (801a6d0 <__sflush_r+0x108>)
 801a628:	40ca      	lsrs	r2, r1
 801a62a:	07d6      	lsls	r6, r2, #31
 801a62c:	d528      	bpl.n	801a680 <__sflush_r+0xb8>
 801a62e:	2200      	movs	r2, #0
 801a630:	6062      	str	r2, [r4, #4]
 801a632:	04d9      	lsls	r1, r3, #19
 801a634:	6922      	ldr	r2, [r4, #16]
 801a636:	6022      	str	r2, [r4, #0]
 801a638:	d504      	bpl.n	801a644 <__sflush_r+0x7c>
 801a63a:	1c42      	adds	r2, r0, #1
 801a63c:	d101      	bne.n	801a642 <__sflush_r+0x7a>
 801a63e:	682b      	ldr	r3, [r5, #0]
 801a640:	b903      	cbnz	r3, 801a644 <__sflush_r+0x7c>
 801a642:	6560      	str	r0, [r4, #84]	; 0x54
 801a644:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a646:	602f      	str	r7, [r5, #0]
 801a648:	2900      	cmp	r1, #0
 801a64a:	d0ca      	beq.n	801a5e2 <__sflush_r+0x1a>
 801a64c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a650:	4299      	cmp	r1, r3
 801a652:	d002      	beq.n	801a65a <__sflush_r+0x92>
 801a654:	4628      	mov	r0, r5
 801a656:	f7fe fad1 	bl	8018bfc <_free_r>
 801a65a:	2000      	movs	r0, #0
 801a65c:	6360      	str	r0, [r4, #52]	; 0x34
 801a65e:	e7c1      	b.n	801a5e4 <__sflush_r+0x1c>
 801a660:	6a21      	ldr	r1, [r4, #32]
 801a662:	2301      	movs	r3, #1
 801a664:	4628      	mov	r0, r5
 801a666:	47b0      	blx	r6
 801a668:	1c41      	adds	r1, r0, #1
 801a66a:	d1c7      	bne.n	801a5fc <__sflush_r+0x34>
 801a66c:	682b      	ldr	r3, [r5, #0]
 801a66e:	2b00      	cmp	r3, #0
 801a670:	d0c4      	beq.n	801a5fc <__sflush_r+0x34>
 801a672:	2b1d      	cmp	r3, #29
 801a674:	d001      	beq.n	801a67a <__sflush_r+0xb2>
 801a676:	2b16      	cmp	r3, #22
 801a678:	d101      	bne.n	801a67e <__sflush_r+0xb6>
 801a67a:	602f      	str	r7, [r5, #0]
 801a67c:	e7b1      	b.n	801a5e2 <__sflush_r+0x1a>
 801a67e:	89a3      	ldrh	r3, [r4, #12]
 801a680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a684:	81a3      	strh	r3, [r4, #12]
 801a686:	e7ad      	b.n	801a5e4 <__sflush_r+0x1c>
 801a688:	690f      	ldr	r7, [r1, #16]
 801a68a:	2f00      	cmp	r7, #0
 801a68c:	d0a9      	beq.n	801a5e2 <__sflush_r+0x1a>
 801a68e:	0793      	lsls	r3, r2, #30
 801a690:	680e      	ldr	r6, [r1, #0]
 801a692:	bf08      	it	eq
 801a694:	694b      	ldreq	r3, [r1, #20]
 801a696:	600f      	str	r7, [r1, #0]
 801a698:	bf18      	it	ne
 801a69a:	2300      	movne	r3, #0
 801a69c:	eba6 0807 	sub.w	r8, r6, r7
 801a6a0:	608b      	str	r3, [r1, #8]
 801a6a2:	f1b8 0f00 	cmp.w	r8, #0
 801a6a6:	dd9c      	ble.n	801a5e2 <__sflush_r+0x1a>
 801a6a8:	6a21      	ldr	r1, [r4, #32]
 801a6aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a6ac:	4643      	mov	r3, r8
 801a6ae:	463a      	mov	r2, r7
 801a6b0:	4628      	mov	r0, r5
 801a6b2:	47b0      	blx	r6
 801a6b4:	2800      	cmp	r0, #0
 801a6b6:	dc06      	bgt.n	801a6c6 <__sflush_r+0xfe>
 801a6b8:	89a3      	ldrh	r3, [r4, #12]
 801a6ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a6be:	81a3      	strh	r3, [r4, #12]
 801a6c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a6c4:	e78e      	b.n	801a5e4 <__sflush_r+0x1c>
 801a6c6:	4407      	add	r7, r0
 801a6c8:	eba8 0800 	sub.w	r8, r8, r0
 801a6cc:	e7e9      	b.n	801a6a2 <__sflush_r+0xda>
 801a6ce:	bf00      	nop
 801a6d0:	20400001 	.word	0x20400001

0801a6d4 <_fflush_r>:
 801a6d4:	b538      	push	{r3, r4, r5, lr}
 801a6d6:	690b      	ldr	r3, [r1, #16]
 801a6d8:	4605      	mov	r5, r0
 801a6da:	460c      	mov	r4, r1
 801a6dc:	b913      	cbnz	r3, 801a6e4 <_fflush_r+0x10>
 801a6de:	2500      	movs	r5, #0
 801a6e0:	4628      	mov	r0, r5
 801a6e2:	bd38      	pop	{r3, r4, r5, pc}
 801a6e4:	b118      	cbz	r0, 801a6ee <_fflush_r+0x1a>
 801a6e6:	6983      	ldr	r3, [r0, #24]
 801a6e8:	b90b      	cbnz	r3, 801a6ee <_fflush_r+0x1a>
 801a6ea:	f7fe f981 	bl	80189f0 <__sinit>
 801a6ee:	4b14      	ldr	r3, [pc, #80]	; (801a740 <_fflush_r+0x6c>)
 801a6f0:	429c      	cmp	r4, r3
 801a6f2:	d11b      	bne.n	801a72c <_fflush_r+0x58>
 801a6f4:	686c      	ldr	r4, [r5, #4]
 801a6f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d0ef      	beq.n	801a6de <_fflush_r+0xa>
 801a6fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a700:	07d0      	lsls	r0, r2, #31
 801a702:	d404      	bmi.n	801a70e <_fflush_r+0x3a>
 801a704:	0599      	lsls	r1, r3, #22
 801a706:	d402      	bmi.n	801a70e <_fflush_r+0x3a>
 801a708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a70a:	f7fe fa4e 	bl	8018baa <__retarget_lock_acquire_recursive>
 801a70e:	4628      	mov	r0, r5
 801a710:	4621      	mov	r1, r4
 801a712:	f7ff ff59 	bl	801a5c8 <__sflush_r>
 801a716:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a718:	07da      	lsls	r2, r3, #31
 801a71a:	4605      	mov	r5, r0
 801a71c:	d4e0      	bmi.n	801a6e0 <_fflush_r+0xc>
 801a71e:	89a3      	ldrh	r3, [r4, #12]
 801a720:	059b      	lsls	r3, r3, #22
 801a722:	d4dd      	bmi.n	801a6e0 <_fflush_r+0xc>
 801a724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a726:	f7fe fa41 	bl	8018bac <__retarget_lock_release_recursive>
 801a72a:	e7d9      	b.n	801a6e0 <_fflush_r+0xc>
 801a72c:	4b05      	ldr	r3, [pc, #20]	; (801a744 <_fflush_r+0x70>)
 801a72e:	429c      	cmp	r4, r3
 801a730:	d101      	bne.n	801a736 <_fflush_r+0x62>
 801a732:	68ac      	ldr	r4, [r5, #8]
 801a734:	e7df      	b.n	801a6f6 <_fflush_r+0x22>
 801a736:	4b04      	ldr	r3, [pc, #16]	; (801a748 <_fflush_r+0x74>)
 801a738:	429c      	cmp	r4, r3
 801a73a:	bf08      	it	eq
 801a73c:	68ec      	ldreq	r4, [r5, #12]
 801a73e:	e7da      	b.n	801a6f6 <_fflush_r+0x22>
 801a740:	08020aac 	.word	0x08020aac
 801a744:	08020acc 	.word	0x08020acc
 801a748:	08020a8c 	.word	0x08020a8c

0801a74c <_localeconv_r>:
 801a74c:	4800      	ldr	r0, [pc, #0]	; (801a750 <_localeconv_r+0x4>)
 801a74e:	4770      	bx	lr
 801a750:	200003b0 	.word	0x200003b0

0801a754 <_lseek_r>:
 801a754:	b538      	push	{r3, r4, r5, lr}
 801a756:	4d07      	ldr	r5, [pc, #28]	; (801a774 <_lseek_r+0x20>)
 801a758:	4604      	mov	r4, r0
 801a75a:	4608      	mov	r0, r1
 801a75c:	4611      	mov	r1, r2
 801a75e:	2200      	movs	r2, #0
 801a760:	602a      	str	r2, [r5, #0]
 801a762:	461a      	mov	r2, r3
 801a764:	f7ea fe2a 	bl	80053bc <_lseek>
 801a768:	1c43      	adds	r3, r0, #1
 801a76a:	d102      	bne.n	801a772 <_lseek_r+0x1e>
 801a76c:	682b      	ldr	r3, [r5, #0]
 801a76e:	b103      	cbz	r3, 801a772 <_lseek_r+0x1e>
 801a770:	6023      	str	r3, [r4, #0]
 801a772:	bd38      	pop	{r3, r4, r5, pc}
 801a774:	20015404 	.word	0x20015404

0801a778 <__malloc_lock>:
 801a778:	4801      	ldr	r0, [pc, #4]	; (801a780 <__malloc_lock+0x8>)
 801a77a:	f7fe ba16 	b.w	8018baa <__retarget_lock_acquire_recursive>
 801a77e:	bf00      	nop
 801a780:	200153fc 	.word	0x200153fc

0801a784 <__malloc_unlock>:
 801a784:	4801      	ldr	r0, [pc, #4]	; (801a78c <__malloc_unlock+0x8>)
 801a786:	f7fe ba11 	b.w	8018bac <__retarget_lock_release_recursive>
 801a78a:	bf00      	nop
 801a78c:	200153fc 	.word	0x200153fc

0801a790 <_Balloc>:
 801a790:	b570      	push	{r4, r5, r6, lr}
 801a792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a794:	4604      	mov	r4, r0
 801a796:	460d      	mov	r5, r1
 801a798:	b976      	cbnz	r6, 801a7b8 <_Balloc+0x28>
 801a79a:	2010      	movs	r0, #16
 801a79c:	f7fe fa08 	bl	8018bb0 <malloc>
 801a7a0:	4602      	mov	r2, r0
 801a7a2:	6260      	str	r0, [r4, #36]	; 0x24
 801a7a4:	b920      	cbnz	r0, 801a7b0 <_Balloc+0x20>
 801a7a6:	4b18      	ldr	r3, [pc, #96]	; (801a808 <_Balloc+0x78>)
 801a7a8:	4818      	ldr	r0, [pc, #96]	; (801a80c <_Balloc+0x7c>)
 801a7aa:	2166      	movs	r1, #102	; 0x66
 801a7ac:	f000 fcea 	bl	801b184 <__assert_func>
 801a7b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a7b4:	6006      	str	r6, [r0, #0]
 801a7b6:	60c6      	str	r6, [r0, #12]
 801a7b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801a7ba:	68f3      	ldr	r3, [r6, #12]
 801a7bc:	b183      	cbz	r3, 801a7e0 <_Balloc+0x50>
 801a7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a7c0:	68db      	ldr	r3, [r3, #12]
 801a7c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a7c6:	b9b8      	cbnz	r0, 801a7f8 <_Balloc+0x68>
 801a7c8:	2101      	movs	r1, #1
 801a7ca:	fa01 f605 	lsl.w	r6, r1, r5
 801a7ce:	1d72      	adds	r2, r6, #5
 801a7d0:	0092      	lsls	r2, r2, #2
 801a7d2:	4620      	mov	r0, r4
 801a7d4:	f000 fb5a 	bl	801ae8c <_calloc_r>
 801a7d8:	b160      	cbz	r0, 801a7f4 <_Balloc+0x64>
 801a7da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801a7de:	e00e      	b.n	801a7fe <_Balloc+0x6e>
 801a7e0:	2221      	movs	r2, #33	; 0x21
 801a7e2:	2104      	movs	r1, #4
 801a7e4:	4620      	mov	r0, r4
 801a7e6:	f000 fb51 	bl	801ae8c <_calloc_r>
 801a7ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a7ec:	60f0      	str	r0, [r6, #12]
 801a7ee:	68db      	ldr	r3, [r3, #12]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d1e4      	bne.n	801a7be <_Balloc+0x2e>
 801a7f4:	2000      	movs	r0, #0
 801a7f6:	bd70      	pop	{r4, r5, r6, pc}
 801a7f8:	6802      	ldr	r2, [r0, #0]
 801a7fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801a7fe:	2300      	movs	r3, #0
 801a800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801a804:	e7f7      	b.n	801a7f6 <_Balloc+0x66>
 801a806:	bf00      	nop
 801a808:	08020b56 	.word	0x08020b56
 801a80c:	08020bdd 	.word	0x08020bdd

0801a810 <_Bfree>:
 801a810:	b570      	push	{r4, r5, r6, lr}
 801a812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801a814:	4605      	mov	r5, r0
 801a816:	460c      	mov	r4, r1
 801a818:	b976      	cbnz	r6, 801a838 <_Bfree+0x28>
 801a81a:	2010      	movs	r0, #16
 801a81c:	f7fe f9c8 	bl	8018bb0 <malloc>
 801a820:	4602      	mov	r2, r0
 801a822:	6268      	str	r0, [r5, #36]	; 0x24
 801a824:	b920      	cbnz	r0, 801a830 <_Bfree+0x20>
 801a826:	4b09      	ldr	r3, [pc, #36]	; (801a84c <_Bfree+0x3c>)
 801a828:	4809      	ldr	r0, [pc, #36]	; (801a850 <_Bfree+0x40>)
 801a82a:	218a      	movs	r1, #138	; 0x8a
 801a82c:	f000 fcaa 	bl	801b184 <__assert_func>
 801a830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801a834:	6006      	str	r6, [r0, #0]
 801a836:	60c6      	str	r6, [r0, #12]
 801a838:	b13c      	cbz	r4, 801a84a <_Bfree+0x3a>
 801a83a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801a83c:	6862      	ldr	r2, [r4, #4]
 801a83e:	68db      	ldr	r3, [r3, #12]
 801a840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801a844:	6021      	str	r1, [r4, #0]
 801a846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801a84a:	bd70      	pop	{r4, r5, r6, pc}
 801a84c:	08020b56 	.word	0x08020b56
 801a850:	08020bdd 	.word	0x08020bdd

0801a854 <__multadd>:
 801a854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a858:	690e      	ldr	r6, [r1, #16]
 801a85a:	4607      	mov	r7, r0
 801a85c:	4698      	mov	r8, r3
 801a85e:	460c      	mov	r4, r1
 801a860:	f101 0014 	add.w	r0, r1, #20
 801a864:	2300      	movs	r3, #0
 801a866:	6805      	ldr	r5, [r0, #0]
 801a868:	b2a9      	uxth	r1, r5
 801a86a:	fb02 8101 	mla	r1, r2, r1, r8
 801a86e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801a872:	0c2d      	lsrs	r5, r5, #16
 801a874:	fb02 c505 	mla	r5, r2, r5, ip
 801a878:	b289      	uxth	r1, r1
 801a87a:	3301      	adds	r3, #1
 801a87c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801a880:	429e      	cmp	r6, r3
 801a882:	f840 1b04 	str.w	r1, [r0], #4
 801a886:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801a88a:	dcec      	bgt.n	801a866 <__multadd+0x12>
 801a88c:	f1b8 0f00 	cmp.w	r8, #0
 801a890:	d022      	beq.n	801a8d8 <__multadd+0x84>
 801a892:	68a3      	ldr	r3, [r4, #8]
 801a894:	42b3      	cmp	r3, r6
 801a896:	dc19      	bgt.n	801a8cc <__multadd+0x78>
 801a898:	6861      	ldr	r1, [r4, #4]
 801a89a:	4638      	mov	r0, r7
 801a89c:	3101      	adds	r1, #1
 801a89e:	f7ff ff77 	bl	801a790 <_Balloc>
 801a8a2:	4605      	mov	r5, r0
 801a8a4:	b928      	cbnz	r0, 801a8b2 <__multadd+0x5e>
 801a8a6:	4602      	mov	r2, r0
 801a8a8:	4b0d      	ldr	r3, [pc, #52]	; (801a8e0 <__multadd+0x8c>)
 801a8aa:	480e      	ldr	r0, [pc, #56]	; (801a8e4 <__multadd+0x90>)
 801a8ac:	21b5      	movs	r1, #181	; 0xb5
 801a8ae:	f000 fc69 	bl	801b184 <__assert_func>
 801a8b2:	6922      	ldr	r2, [r4, #16]
 801a8b4:	3202      	adds	r2, #2
 801a8b6:	f104 010c 	add.w	r1, r4, #12
 801a8ba:	0092      	lsls	r2, r2, #2
 801a8bc:	300c      	adds	r0, #12
 801a8be:	f7fe f987 	bl	8018bd0 <memcpy>
 801a8c2:	4621      	mov	r1, r4
 801a8c4:	4638      	mov	r0, r7
 801a8c6:	f7ff ffa3 	bl	801a810 <_Bfree>
 801a8ca:	462c      	mov	r4, r5
 801a8cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801a8d0:	3601      	adds	r6, #1
 801a8d2:	f8c3 8014 	str.w	r8, [r3, #20]
 801a8d6:	6126      	str	r6, [r4, #16]
 801a8d8:	4620      	mov	r0, r4
 801a8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a8de:	bf00      	nop
 801a8e0:	08020bcc 	.word	0x08020bcc
 801a8e4:	08020bdd 	.word	0x08020bdd

0801a8e8 <__hi0bits>:
 801a8e8:	0c03      	lsrs	r3, r0, #16
 801a8ea:	041b      	lsls	r3, r3, #16
 801a8ec:	b9d3      	cbnz	r3, 801a924 <__hi0bits+0x3c>
 801a8ee:	0400      	lsls	r0, r0, #16
 801a8f0:	2310      	movs	r3, #16
 801a8f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801a8f6:	bf04      	itt	eq
 801a8f8:	0200      	lsleq	r0, r0, #8
 801a8fa:	3308      	addeq	r3, #8
 801a8fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801a900:	bf04      	itt	eq
 801a902:	0100      	lsleq	r0, r0, #4
 801a904:	3304      	addeq	r3, #4
 801a906:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801a90a:	bf04      	itt	eq
 801a90c:	0080      	lsleq	r0, r0, #2
 801a90e:	3302      	addeq	r3, #2
 801a910:	2800      	cmp	r0, #0
 801a912:	db05      	blt.n	801a920 <__hi0bits+0x38>
 801a914:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801a918:	f103 0301 	add.w	r3, r3, #1
 801a91c:	bf08      	it	eq
 801a91e:	2320      	moveq	r3, #32
 801a920:	4618      	mov	r0, r3
 801a922:	4770      	bx	lr
 801a924:	2300      	movs	r3, #0
 801a926:	e7e4      	b.n	801a8f2 <__hi0bits+0xa>

0801a928 <__lo0bits>:
 801a928:	6803      	ldr	r3, [r0, #0]
 801a92a:	f013 0207 	ands.w	r2, r3, #7
 801a92e:	4601      	mov	r1, r0
 801a930:	d00b      	beq.n	801a94a <__lo0bits+0x22>
 801a932:	07da      	lsls	r2, r3, #31
 801a934:	d424      	bmi.n	801a980 <__lo0bits+0x58>
 801a936:	0798      	lsls	r0, r3, #30
 801a938:	bf49      	itett	mi
 801a93a:	085b      	lsrmi	r3, r3, #1
 801a93c:	089b      	lsrpl	r3, r3, #2
 801a93e:	2001      	movmi	r0, #1
 801a940:	600b      	strmi	r3, [r1, #0]
 801a942:	bf5c      	itt	pl
 801a944:	600b      	strpl	r3, [r1, #0]
 801a946:	2002      	movpl	r0, #2
 801a948:	4770      	bx	lr
 801a94a:	b298      	uxth	r0, r3
 801a94c:	b9b0      	cbnz	r0, 801a97c <__lo0bits+0x54>
 801a94e:	0c1b      	lsrs	r3, r3, #16
 801a950:	2010      	movs	r0, #16
 801a952:	f013 0fff 	tst.w	r3, #255	; 0xff
 801a956:	bf04      	itt	eq
 801a958:	0a1b      	lsreq	r3, r3, #8
 801a95a:	3008      	addeq	r0, #8
 801a95c:	071a      	lsls	r2, r3, #28
 801a95e:	bf04      	itt	eq
 801a960:	091b      	lsreq	r3, r3, #4
 801a962:	3004      	addeq	r0, #4
 801a964:	079a      	lsls	r2, r3, #30
 801a966:	bf04      	itt	eq
 801a968:	089b      	lsreq	r3, r3, #2
 801a96a:	3002      	addeq	r0, #2
 801a96c:	07da      	lsls	r2, r3, #31
 801a96e:	d403      	bmi.n	801a978 <__lo0bits+0x50>
 801a970:	085b      	lsrs	r3, r3, #1
 801a972:	f100 0001 	add.w	r0, r0, #1
 801a976:	d005      	beq.n	801a984 <__lo0bits+0x5c>
 801a978:	600b      	str	r3, [r1, #0]
 801a97a:	4770      	bx	lr
 801a97c:	4610      	mov	r0, r2
 801a97e:	e7e8      	b.n	801a952 <__lo0bits+0x2a>
 801a980:	2000      	movs	r0, #0
 801a982:	4770      	bx	lr
 801a984:	2020      	movs	r0, #32
 801a986:	4770      	bx	lr

0801a988 <__i2b>:
 801a988:	b510      	push	{r4, lr}
 801a98a:	460c      	mov	r4, r1
 801a98c:	2101      	movs	r1, #1
 801a98e:	f7ff feff 	bl	801a790 <_Balloc>
 801a992:	4602      	mov	r2, r0
 801a994:	b928      	cbnz	r0, 801a9a2 <__i2b+0x1a>
 801a996:	4b05      	ldr	r3, [pc, #20]	; (801a9ac <__i2b+0x24>)
 801a998:	4805      	ldr	r0, [pc, #20]	; (801a9b0 <__i2b+0x28>)
 801a99a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801a99e:	f000 fbf1 	bl	801b184 <__assert_func>
 801a9a2:	2301      	movs	r3, #1
 801a9a4:	6144      	str	r4, [r0, #20]
 801a9a6:	6103      	str	r3, [r0, #16]
 801a9a8:	bd10      	pop	{r4, pc}
 801a9aa:	bf00      	nop
 801a9ac:	08020bcc 	.word	0x08020bcc
 801a9b0:	08020bdd 	.word	0x08020bdd

0801a9b4 <__multiply>:
 801a9b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9b8:	4614      	mov	r4, r2
 801a9ba:	690a      	ldr	r2, [r1, #16]
 801a9bc:	6923      	ldr	r3, [r4, #16]
 801a9be:	429a      	cmp	r2, r3
 801a9c0:	bfb8      	it	lt
 801a9c2:	460b      	movlt	r3, r1
 801a9c4:	460d      	mov	r5, r1
 801a9c6:	bfbc      	itt	lt
 801a9c8:	4625      	movlt	r5, r4
 801a9ca:	461c      	movlt	r4, r3
 801a9cc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801a9d0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801a9d4:	68ab      	ldr	r3, [r5, #8]
 801a9d6:	6869      	ldr	r1, [r5, #4]
 801a9d8:	eb0a 0709 	add.w	r7, sl, r9
 801a9dc:	42bb      	cmp	r3, r7
 801a9de:	b085      	sub	sp, #20
 801a9e0:	bfb8      	it	lt
 801a9e2:	3101      	addlt	r1, #1
 801a9e4:	f7ff fed4 	bl	801a790 <_Balloc>
 801a9e8:	b930      	cbnz	r0, 801a9f8 <__multiply+0x44>
 801a9ea:	4602      	mov	r2, r0
 801a9ec:	4b42      	ldr	r3, [pc, #264]	; (801aaf8 <__multiply+0x144>)
 801a9ee:	4843      	ldr	r0, [pc, #268]	; (801aafc <__multiply+0x148>)
 801a9f0:	f240 115d 	movw	r1, #349	; 0x15d
 801a9f4:	f000 fbc6 	bl	801b184 <__assert_func>
 801a9f8:	f100 0614 	add.w	r6, r0, #20
 801a9fc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801aa00:	4633      	mov	r3, r6
 801aa02:	2200      	movs	r2, #0
 801aa04:	4543      	cmp	r3, r8
 801aa06:	d31e      	bcc.n	801aa46 <__multiply+0x92>
 801aa08:	f105 0c14 	add.w	ip, r5, #20
 801aa0c:	f104 0314 	add.w	r3, r4, #20
 801aa10:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801aa14:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801aa18:	9202      	str	r2, [sp, #8]
 801aa1a:	ebac 0205 	sub.w	r2, ip, r5
 801aa1e:	3a15      	subs	r2, #21
 801aa20:	f022 0203 	bic.w	r2, r2, #3
 801aa24:	3204      	adds	r2, #4
 801aa26:	f105 0115 	add.w	r1, r5, #21
 801aa2a:	458c      	cmp	ip, r1
 801aa2c:	bf38      	it	cc
 801aa2e:	2204      	movcc	r2, #4
 801aa30:	9201      	str	r2, [sp, #4]
 801aa32:	9a02      	ldr	r2, [sp, #8]
 801aa34:	9303      	str	r3, [sp, #12]
 801aa36:	429a      	cmp	r2, r3
 801aa38:	d808      	bhi.n	801aa4c <__multiply+0x98>
 801aa3a:	2f00      	cmp	r7, #0
 801aa3c:	dc55      	bgt.n	801aaea <__multiply+0x136>
 801aa3e:	6107      	str	r7, [r0, #16]
 801aa40:	b005      	add	sp, #20
 801aa42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa46:	f843 2b04 	str.w	r2, [r3], #4
 801aa4a:	e7db      	b.n	801aa04 <__multiply+0x50>
 801aa4c:	f8b3 a000 	ldrh.w	sl, [r3]
 801aa50:	f1ba 0f00 	cmp.w	sl, #0
 801aa54:	d020      	beq.n	801aa98 <__multiply+0xe4>
 801aa56:	f105 0e14 	add.w	lr, r5, #20
 801aa5a:	46b1      	mov	r9, r6
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	f85e 4b04 	ldr.w	r4, [lr], #4
 801aa62:	f8d9 b000 	ldr.w	fp, [r9]
 801aa66:	b2a1      	uxth	r1, r4
 801aa68:	fa1f fb8b 	uxth.w	fp, fp
 801aa6c:	fb0a b101 	mla	r1, sl, r1, fp
 801aa70:	4411      	add	r1, r2
 801aa72:	f8d9 2000 	ldr.w	r2, [r9]
 801aa76:	0c24      	lsrs	r4, r4, #16
 801aa78:	0c12      	lsrs	r2, r2, #16
 801aa7a:	fb0a 2404 	mla	r4, sl, r4, r2
 801aa7e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801aa82:	b289      	uxth	r1, r1
 801aa84:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801aa88:	45f4      	cmp	ip, lr
 801aa8a:	f849 1b04 	str.w	r1, [r9], #4
 801aa8e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801aa92:	d8e4      	bhi.n	801aa5e <__multiply+0xaa>
 801aa94:	9901      	ldr	r1, [sp, #4]
 801aa96:	5072      	str	r2, [r6, r1]
 801aa98:	9a03      	ldr	r2, [sp, #12]
 801aa9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801aa9e:	3304      	adds	r3, #4
 801aaa0:	f1b9 0f00 	cmp.w	r9, #0
 801aaa4:	d01f      	beq.n	801aae6 <__multiply+0x132>
 801aaa6:	6834      	ldr	r4, [r6, #0]
 801aaa8:	f105 0114 	add.w	r1, r5, #20
 801aaac:	46b6      	mov	lr, r6
 801aaae:	f04f 0a00 	mov.w	sl, #0
 801aab2:	880a      	ldrh	r2, [r1, #0]
 801aab4:	f8be b002 	ldrh.w	fp, [lr, #2]
 801aab8:	fb09 b202 	mla	r2, r9, r2, fp
 801aabc:	4492      	add	sl, r2
 801aabe:	b2a4      	uxth	r4, r4
 801aac0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801aac4:	f84e 4b04 	str.w	r4, [lr], #4
 801aac8:	f851 4b04 	ldr.w	r4, [r1], #4
 801aacc:	f8be 2000 	ldrh.w	r2, [lr]
 801aad0:	0c24      	lsrs	r4, r4, #16
 801aad2:	fb09 2404 	mla	r4, r9, r4, r2
 801aad6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801aada:	458c      	cmp	ip, r1
 801aadc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801aae0:	d8e7      	bhi.n	801aab2 <__multiply+0xfe>
 801aae2:	9a01      	ldr	r2, [sp, #4]
 801aae4:	50b4      	str	r4, [r6, r2]
 801aae6:	3604      	adds	r6, #4
 801aae8:	e7a3      	b.n	801aa32 <__multiply+0x7e>
 801aaea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d1a5      	bne.n	801aa3e <__multiply+0x8a>
 801aaf2:	3f01      	subs	r7, #1
 801aaf4:	e7a1      	b.n	801aa3a <__multiply+0x86>
 801aaf6:	bf00      	nop
 801aaf8:	08020bcc 	.word	0x08020bcc
 801aafc:	08020bdd 	.word	0x08020bdd

0801ab00 <__pow5mult>:
 801ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ab04:	4615      	mov	r5, r2
 801ab06:	f012 0203 	ands.w	r2, r2, #3
 801ab0a:	4606      	mov	r6, r0
 801ab0c:	460f      	mov	r7, r1
 801ab0e:	d007      	beq.n	801ab20 <__pow5mult+0x20>
 801ab10:	4c25      	ldr	r4, [pc, #148]	; (801aba8 <__pow5mult+0xa8>)
 801ab12:	3a01      	subs	r2, #1
 801ab14:	2300      	movs	r3, #0
 801ab16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801ab1a:	f7ff fe9b 	bl	801a854 <__multadd>
 801ab1e:	4607      	mov	r7, r0
 801ab20:	10ad      	asrs	r5, r5, #2
 801ab22:	d03d      	beq.n	801aba0 <__pow5mult+0xa0>
 801ab24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ab26:	b97c      	cbnz	r4, 801ab48 <__pow5mult+0x48>
 801ab28:	2010      	movs	r0, #16
 801ab2a:	f7fe f841 	bl	8018bb0 <malloc>
 801ab2e:	4602      	mov	r2, r0
 801ab30:	6270      	str	r0, [r6, #36]	; 0x24
 801ab32:	b928      	cbnz	r0, 801ab40 <__pow5mult+0x40>
 801ab34:	4b1d      	ldr	r3, [pc, #116]	; (801abac <__pow5mult+0xac>)
 801ab36:	481e      	ldr	r0, [pc, #120]	; (801abb0 <__pow5mult+0xb0>)
 801ab38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ab3c:	f000 fb22 	bl	801b184 <__assert_func>
 801ab40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ab44:	6004      	str	r4, [r0, #0]
 801ab46:	60c4      	str	r4, [r0, #12]
 801ab48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ab4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ab50:	b94c      	cbnz	r4, 801ab66 <__pow5mult+0x66>
 801ab52:	f240 2171 	movw	r1, #625	; 0x271
 801ab56:	4630      	mov	r0, r6
 801ab58:	f7ff ff16 	bl	801a988 <__i2b>
 801ab5c:	2300      	movs	r3, #0
 801ab5e:	f8c8 0008 	str.w	r0, [r8, #8]
 801ab62:	4604      	mov	r4, r0
 801ab64:	6003      	str	r3, [r0, #0]
 801ab66:	f04f 0900 	mov.w	r9, #0
 801ab6a:	07eb      	lsls	r3, r5, #31
 801ab6c:	d50a      	bpl.n	801ab84 <__pow5mult+0x84>
 801ab6e:	4639      	mov	r1, r7
 801ab70:	4622      	mov	r2, r4
 801ab72:	4630      	mov	r0, r6
 801ab74:	f7ff ff1e 	bl	801a9b4 <__multiply>
 801ab78:	4639      	mov	r1, r7
 801ab7a:	4680      	mov	r8, r0
 801ab7c:	4630      	mov	r0, r6
 801ab7e:	f7ff fe47 	bl	801a810 <_Bfree>
 801ab82:	4647      	mov	r7, r8
 801ab84:	106d      	asrs	r5, r5, #1
 801ab86:	d00b      	beq.n	801aba0 <__pow5mult+0xa0>
 801ab88:	6820      	ldr	r0, [r4, #0]
 801ab8a:	b938      	cbnz	r0, 801ab9c <__pow5mult+0x9c>
 801ab8c:	4622      	mov	r2, r4
 801ab8e:	4621      	mov	r1, r4
 801ab90:	4630      	mov	r0, r6
 801ab92:	f7ff ff0f 	bl	801a9b4 <__multiply>
 801ab96:	6020      	str	r0, [r4, #0]
 801ab98:	f8c0 9000 	str.w	r9, [r0]
 801ab9c:	4604      	mov	r4, r0
 801ab9e:	e7e4      	b.n	801ab6a <__pow5mult+0x6a>
 801aba0:	4638      	mov	r0, r7
 801aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801aba6:	bf00      	nop
 801aba8:	08020d30 	.word	0x08020d30
 801abac:	08020b56 	.word	0x08020b56
 801abb0:	08020bdd 	.word	0x08020bdd

0801abb4 <__lshift>:
 801abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801abb8:	460c      	mov	r4, r1
 801abba:	6849      	ldr	r1, [r1, #4]
 801abbc:	6923      	ldr	r3, [r4, #16]
 801abbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801abc2:	68a3      	ldr	r3, [r4, #8]
 801abc4:	4607      	mov	r7, r0
 801abc6:	4691      	mov	r9, r2
 801abc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801abcc:	f108 0601 	add.w	r6, r8, #1
 801abd0:	42b3      	cmp	r3, r6
 801abd2:	db0b      	blt.n	801abec <__lshift+0x38>
 801abd4:	4638      	mov	r0, r7
 801abd6:	f7ff fddb 	bl	801a790 <_Balloc>
 801abda:	4605      	mov	r5, r0
 801abdc:	b948      	cbnz	r0, 801abf2 <__lshift+0x3e>
 801abde:	4602      	mov	r2, r0
 801abe0:	4b28      	ldr	r3, [pc, #160]	; (801ac84 <__lshift+0xd0>)
 801abe2:	4829      	ldr	r0, [pc, #164]	; (801ac88 <__lshift+0xd4>)
 801abe4:	f240 11d9 	movw	r1, #473	; 0x1d9
 801abe8:	f000 facc 	bl	801b184 <__assert_func>
 801abec:	3101      	adds	r1, #1
 801abee:	005b      	lsls	r3, r3, #1
 801abf0:	e7ee      	b.n	801abd0 <__lshift+0x1c>
 801abf2:	2300      	movs	r3, #0
 801abf4:	f100 0114 	add.w	r1, r0, #20
 801abf8:	f100 0210 	add.w	r2, r0, #16
 801abfc:	4618      	mov	r0, r3
 801abfe:	4553      	cmp	r3, sl
 801ac00:	db33      	blt.n	801ac6a <__lshift+0xb6>
 801ac02:	6920      	ldr	r0, [r4, #16]
 801ac04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ac08:	f104 0314 	add.w	r3, r4, #20
 801ac0c:	f019 091f 	ands.w	r9, r9, #31
 801ac10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ac14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801ac18:	d02b      	beq.n	801ac72 <__lshift+0xbe>
 801ac1a:	f1c9 0e20 	rsb	lr, r9, #32
 801ac1e:	468a      	mov	sl, r1
 801ac20:	2200      	movs	r2, #0
 801ac22:	6818      	ldr	r0, [r3, #0]
 801ac24:	fa00 f009 	lsl.w	r0, r0, r9
 801ac28:	4302      	orrs	r2, r0
 801ac2a:	f84a 2b04 	str.w	r2, [sl], #4
 801ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac32:	459c      	cmp	ip, r3
 801ac34:	fa22 f20e 	lsr.w	r2, r2, lr
 801ac38:	d8f3      	bhi.n	801ac22 <__lshift+0x6e>
 801ac3a:	ebac 0304 	sub.w	r3, ip, r4
 801ac3e:	3b15      	subs	r3, #21
 801ac40:	f023 0303 	bic.w	r3, r3, #3
 801ac44:	3304      	adds	r3, #4
 801ac46:	f104 0015 	add.w	r0, r4, #21
 801ac4a:	4584      	cmp	ip, r0
 801ac4c:	bf38      	it	cc
 801ac4e:	2304      	movcc	r3, #4
 801ac50:	50ca      	str	r2, [r1, r3]
 801ac52:	b10a      	cbz	r2, 801ac58 <__lshift+0xa4>
 801ac54:	f108 0602 	add.w	r6, r8, #2
 801ac58:	3e01      	subs	r6, #1
 801ac5a:	4638      	mov	r0, r7
 801ac5c:	612e      	str	r6, [r5, #16]
 801ac5e:	4621      	mov	r1, r4
 801ac60:	f7ff fdd6 	bl	801a810 <_Bfree>
 801ac64:	4628      	mov	r0, r5
 801ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac6a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ac6e:	3301      	adds	r3, #1
 801ac70:	e7c5      	b.n	801abfe <__lshift+0x4a>
 801ac72:	3904      	subs	r1, #4
 801ac74:	f853 2b04 	ldr.w	r2, [r3], #4
 801ac78:	f841 2f04 	str.w	r2, [r1, #4]!
 801ac7c:	459c      	cmp	ip, r3
 801ac7e:	d8f9      	bhi.n	801ac74 <__lshift+0xc0>
 801ac80:	e7ea      	b.n	801ac58 <__lshift+0xa4>
 801ac82:	bf00      	nop
 801ac84:	08020bcc 	.word	0x08020bcc
 801ac88:	08020bdd 	.word	0x08020bdd

0801ac8c <__mcmp>:
 801ac8c:	b530      	push	{r4, r5, lr}
 801ac8e:	6902      	ldr	r2, [r0, #16]
 801ac90:	690c      	ldr	r4, [r1, #16]
 801ac92:	1b12      	subs	r2, r2, r4
 801ac94:	d10e      	bne.n	801acb4 <__mcmp+0x28>
 801ac96:	f100 0314 	add.w	r3, r0, #20
 801ac9a:	3114      	adds	r1, #20
 801ac9c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801aca0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801aca4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801aca8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801acac:	42a5      	cmp	r5, r4
 801acae:	d003      	beq.n	801acb8 <__mcmp+0x2c>
 801acb0:	d305      	bcc.n	801acbe <__mcmp+0x32>
 801acb2:	2201      	movs	r2, #1
 801acb4:	4610      	mov	r0, r2
 801acb6:	bd30      	pop	{r4, r5, pc}
 801acb8:	4283      	cmp	r3, r0
 801acba:	d3f3      	bcc.n	801aca4 <__mcmp+0x18>
 801acbc:	e7fa      	b.n	801acb4 <__mcmp+0x28>
 801acbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801acc2:	e7f7      	b.n	801acb4 <__mcmp+0x28>

0801acc4 <__mdiff>:
 801acc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acc8:	460c      	mov	r4, r1
 801acca:	4606      	mov	r6, r0
 801accc:	4611      	mov	r1, r2
 801acce:	4620      	mov	r0, r4
 801acd0:	4617      	mov	r7, r2
 801acd2:	f7ff ffdb 	bl	801ac8c <__mcmp>
 801acd6:	1e05      	subs	r5, r0, #0
 801acd8:	d110      	bne.n	801acfc <__mdiff+0x38>
 801acda:	4629      	mov	r1, r5
 801acdc:	4630      	mov	r0, r6
 801acde:	f7ff fd57 	bl	801a790 <_Balloc>
 801ace2:	b930      	cbnz	r0, 801acf2 <__mdiff+0x2e>
 801ace4:	4b39      	ldr	r3, [pc, #228]	; (801adcc <__mdiff+0x108>)
 801ace6:	4602      	mov	r2, r0
 801ace8:	f240 2132 	movw	r1, #562	; 0x232
 801acec:	4838      	ldr	r0, [pc, #224]	; (801add0 <__mdiff+0x10c>)
 801acee:	f000 fa49 	bl	801b184 <__assert_func>
 801acf2:	2301      	movs	r3, #1
 801acf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801acf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acfc:	bfa4      	itt	ge
 801acfe:	463b      	movge	r3, r7
 801ad00:	4627      	movge	r7, r4
 801ad02:	4630      	mov	r0, r6
 801ad04:	6879      	ldr	r1, [r7, #4]
 801ad06:	bfa6      	itte	ge
 801ad08:	461c      	movge	r4, r3
 801ad0a:	2500      	movge	r5, #0
 801ad0c:	2501      	movlt	r5, #1
 801ad0e:	f7ff fd3f 	bl	801a790 <_Balloc>
 801ad12:	b920      	cbnz	r0, 801ad1e <__mdiff+0x5a>
 801ad14:	4b2d      	ldr	r3, [pc, #180]	; (801adcc <__mdiff+0x108>)
 801ad16:	4602      	mov	r2, r0
 801ad18:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ad1c:	e7e6      	b.n	801acec <__mdiff+0x28>
 801ad1e:	693e      	ldr	r6, [r7, #16]
 801ad20:	60c5      	str	r5, [r0, #12]
 801ad22:	6925      	ldr	r5, [r4, #16]
 801ad24:	f107 0114 	add.w	r1, r7, #20
 801ad28:	f104 0914 	add.w	r9, r4, #20
 801ad2c:	f100 0e14 	add.w	lr, r0, #20
 801ad30:	f107 0210 	add.w	r2, r7, #16
 801ad34:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801ad38:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801ad3c:	46f2      	mov	sl, lr
 801ad3e:	2700      	movs	r7, #0
 801ad40:	f859 3b04 	ldr.w	r3, [r9], #4
 801ad44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ad48:	fa1f f883 	uxth.w	r8, r3
 801ad4c:	fa17 f78b 	uxtah	r7, r7, fp
 801ad50:	0c1b      	lsrs	r3, r3, #16
 801ad52:	eba7 0808 	sub.w	r8, r7, r8
 801ad56:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ad5a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ad5e:	fa1f f888 	uxth.w	r8, r8
 801ad62:	141f      	asrs	r7, r3, #16
 801ad64:	454d      	cmp	r5, r9
 801ad66:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801ad6a:	f84a 3b04 	str.w	r3, [sl], #4
 801ad6e:	d8e7      	bhi.n	801ad40 <__mdiff+0x7c>
 801ad70:	1b2b      	subs	r3, r5, r4
 801ad72:	3b15      	subs	r3, #21
 801ad74:	f023 0303 	bic.w	r3, r3, #3
 801ad78:	3304      	adds	r3, #4
 801ad7a:	3415      	adds	r4, #21
 801ad7c:	42a5      	cmp	r5, r4
 801ad7e:	bf38      	it	cc
 801ad80:	2304      	movcc	r3, #4
 801ad82:	4419      	add	r1, r3
 801ad84:	4473      	add	r3, lr
 801ad86:	469e      	mov	lr, r3
 801ad88:	460d      	mov	r5, r1
 801ad8a:	4565      	cmp	r5, ip
 801ad8c:	d30e      	bcc.n	801adac <__mdiff+0xe8>
 801ad8e:	f10c 0203 	add.w	r2, ip, #3
 801ad92:	1a52      	subs	r2, r2, r1
 801ad94:	f022 0203 	bic.w	r2, r2, #3
 801ad98:	3903      	subs	r1, #3
 801ad9a:	458c      	cmp	ip, r1
 801ad9c:	bf38      	it	cc
 801ad9e:	2200      	movcc	r2, #0
 801ada0:	441a      	add	r2, r3
 801ada2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801ada6:	b17b      	cbz	r3, 801adc8 <__mdiff+0x104>
 801ada8:	6106      	str	r6, [r0, #16]
 801adaa:	e7a5      	b.n	801acf8 <__mdiff+0x34>
 801adac:	f855 8b04 	ldr.w	r8, [r5], #4
 801adb0:	fa17 f488 	uxtah	r4, r7, r8
 801adb4:	1422      	asrs	r2, r4, #16
 801adb6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801adba:	b2a4      	uxth	r4, r4
 801adbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801adc0:	f84e 4b04 	str.w	r4, [lr], #4
 801adc4:	1417      	asrs	r7, r2, #16
 801adc6:	e7e0      	b.n	801ad8a <__mdiff+0xc6>
 801adc8:	3e01      	subs	r6, #1
 801adca:	e7ea      	b.n	801ada2 <__mdiff+0xde>
 801adcc:	08020bcc 	.word	0x08020bcc
 801add0:	08020bdd 	.word	0x08020bdd

0801add4 <__d2b>:
 801add4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801add8:	4689      	mov	r9, r1
 801adda:	2101      	movs	r1, #1
 801addc:	ec57 6b10 	vmov	r6, r7, d0
 801ade0:	4690      	mov	r8, r2
 801ade2:	f7ff fcd5 	bl	801a790 <_Balloc>
 801ade6:	4604      	mov	r4, r0
 801ade8:	b930      	cbnz	r0, 801adf8 <__d2b+0x24>
 801adea:	4602      	mov	r2, r0
 801adec:	4b25      	ldr	r3, [pc, #148]	; (801ae84 <__d2b+0xb0>)
 801adee:	4826      	ldr	r0, [pc, #152]	; (801ae88 <__d2b+0xb4>)
 801adf0:	f240 310a 	movw	r1, #778	; 0x30a
 801adf4:	f000 f9c6 	bl	801b184 <__assert_func>
 801adf8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801adfc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ae00:	bb35      	cbnz	r5, 801ae50 <__d2b+0x7c>
 801ae02:	2e00      	cmp	r6, #0
 801ae04:	9301      	str	r3, [sp, #4]
 801ae06:	d028      	beq.n	801ae5a <__d2b+0x86>
 801ae08:	4668      	mov	r0, sp
 801ae0a:	9600      	str	r6, [sp, #0]
 801ae0c:	f7ff fd8c 	bl	801a928 <__lo0bits>
 801ae10:	9900      	ldr	r1, [sp, #0]
 801ae12:	b300      	cbz	r0, 801ae56 <__d2b+0x82>
 801ae14:	9a01      	ldr	r2, [sp, #4]
 801ae16:	f1c0 0320 	rsb	r3, r0, #32
 801ae1a:	fa02 f303 	lsl.w	r3, r2, r3
 801ae1e:	430b      	orrs	r3, r1
 801ae20:	40c2      	lsrs	r2, r0
 801ae22:	6163      	str	r3, [r4, #20]
 801ae24:	9201      	str	r2, [sp, #4]
 801ae26:	9b01      	ldr	r3, [sp, #4]
 801ae28:	61a3      	str	r3, [r4, #24]
 801ae2a:	2b00      	cmp	r3, #0
 801ae2c:	bf14      	ite	ne
 801ae2e:	2202      	movne	r2, #2
 801ae30:	2201      	moveq	r2, #1
 801ae32:	6122      	str	r2, [r4, #16]
 801ae34:	b1d5      	cbz	r5, 801ae6c <__d2b+0x98>
 801ae36:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801ae3a:	4405      	add	r5, r0
 801ae3c:	f8c9 5000 	str.w	r5, [r9]
 801ae40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801ae44:	f8c8 0000 	str.w	r0, [r8]
 801ae48:	4620      	mov	r0, r4
 801ae4a:	b003      	add	sp, #12
 801ae4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ae50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ae54:	e7d5      	b.n	801ae02 <__d2b+0x2e>
 801ae56:	6161      	str	r1, [r4, #20]
 801ae58:	e7e5      	b.n	801ae26 <__d2b+0x52>
 801ae5a:	a801      	add	r0, sp, #4
 801ae5c:	f7ff fd64 	bl	801a928 <__lo0bits>
 801ae60:	9b01      	ldr	r3, [sp, #4]
 801ae62:	6163      	str	r3, [r4, #20]
 801ae64:	2201      	movs	r2, #1
 801ae66:	6122      	str	r2, [r4, #16]
 801ae68:	3020      	adds	r0, #32
 801ae6a:	e7e3      	b.n	801ae34 <__d2b+0x60>
 801ae6c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ae70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801ae74:	f8c9 0000 	str.w	r0, [r9]
 801ae78:	6918      	ldr	r0, [r3, #16]
 801ae7a:	f7ff fd35 	bl	801a8e8 <__hi0bits>
 801ae7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ae82:	e7df      	b.n	801ae44 <__d2b+0x70>
 801ae84:	08020bcc 	.word	0x08020bcc
 801ae88:	08020bdd 	.word	0x08020bdd

0801ae8c <_calloc_r>:
 801ae8c:	b513      	push	{r0, r1, r4, lr}
 801ae8e:	434a      	muls	r2, r1
 801ae90:	4611      	mov	r1, r2
 801ae92:	9201      	str	r2, [sp, #4]
 801ae94:	f7fd ff02 	bl	8018c9c <_malloc_r>
 801ae98:	4604      	mov	r4, r0
 801ae9a:	b118      	cbz	r0, 801aea4 <_calloc_r+0x18>
 801ae9c:	9a01      	ldr	r2, [sp, #4]
 801ae9e:	2100      	movs	r1, #0
 801aea0:	f7fd fea4 	bl	8018bec <memset>
 801aea4:	4620      	mov	r0, r4
 801aea6:	b002      	add	sp, #8
 801aea8:	bd10      	pop	{r4, pc}

0801aeaa <__ssputs_r>:
 801aeaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aeae:	688e      	ldr	r6, [r1, #8]
 801aeb0:	429e      	cmp	r6, r3
 801aeb2:	4682      	mov	sl, r0
 801aeb4:	460c      	mov	r4, r1
 801aeb6:	4690      	mov	r8, r2
 801aeb8:	461f      	mov	r7, r3
 801aeba:	d838      	bhi.n	801af2e <__ssputs_r+0x84>
 801aebc:	898a      	ldrh	r2, [r1, #12]
 801aebe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801aec2:	d032      	beq.n	801af2a <__ssputs_r+0x80>
 801aec4:	6825      	ldr	r5, [r4, #0]
 801aec6:	6909      	ldr	r1, [r1, #16]
 801aec8:	eba5 0901 	sub.w	r9, r5, r1
 801aecc:	6965      	ldr	r5, [r4, #20]
 801aece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aed2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801aed6:	3301      	adds	r3, #1
 801aed8:	444b      	add	r3, r9
 801aeda:	106d      	asrs	r5, r5, #1
 801aedc:	429d      	cmp	r5, r3
 801aede:	bf38      	it	cc
 801aee0:	461d      	movcc	r5, r3
 801aee2:	0553      	lsls	r3, r2, #21
 801aee4:	d531      	bpl.n	801af4a <__ssputs_r+0xa0>
 801aee6:	4629      	mov	r1, r5
 801aee8:	f7fd fed8 	bl	8018c9c <_malloc_r>
 801aeec:	4606      	mov	r6, r0
 801aeee:	b950      	cbnz	r0, 801af06 <__ssputs_r+0x5c>
 801aef0:	230c      	movs	r3, #12
 801aef2:	f8ca 3000 	str.w	r3, [sl]
 801aef6:	89a3      	ldrh	r3, [r4, #12]
 801aef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aefc:	81a3      	strh	r3, [r4, #12]
 801aefe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af06:	6921      	ldr	r1, [r4, #16]
 801af08:	464a      	mov	r2, r9
 801af0a:	f7fd fe61 	bl	8018bd0 <memcpy>
 801af0e:	89a3      	ldrh	r3, [r4, #12]
 801af10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801af18:	81a3      	strh	r3, [r4, #12]
 801af1a:	6126      	str	r6, [r4, #16]
 801af1c:	6165      	str	r5, [r4, #20]
 801af1e:	444e      	add	r6, r9
 801af20:	eba5 0509 	sub.w	r5, r5, r9
 801af24:	6026      	str	r6, [r4, #0]
 801af26:	60a5      	str	r5, [r4, #8]
 801af28:	463e      	mov	r6, r7
 801af2a:	42be      	cmp	r6, r7
 801af2c:	d900      	bls.n	801af30 <__ssputs_r+0x86>
 801af2e:	463e      	mov	r6, r7
 801af30:	4632      	mov	r2, r6
 801af32:	6820      	ldr	r0, [r4, #0]
 801af34:	4641      	mov	r1, r8
 801af36:	f000 f967 	bl	801b208 <memmove>
 801af3a:	68a3      	ldr	r3, [r4, #8]
 801af3c:	6822      	ldr	r2, [r4, #0]
 801af3e:	1b9b      	subs	r3, r3, r6
 801af40:	4432      	add	r2, r6
 801af42:	60a3      	str	r3, [r4, #8]
 801af44:	6022      	str	r2, [r4, #0]
 801af46:	2000      	movs	r0, #0
 801af48:	e7db      	b.n	801af02 <__ssputs_r+0x58>
 801af4a:	462a      	mov	r2, r5
 801af4c:	f000 f976 	bl	801b23c <_realloc_r>
 801af50:	4606      	mov	r6, r0
 801af52:	2800      	cmp	r0, #0
 801af54:	d1e1      	bne.n	801af1a <__ssputs_r+0x70>
 801af56:	6921      	ldr	r1, [r4, #16]
 801af58:	4650      	mov	r0, sl
 801af5a:	f7fd fe4f 	bl	8018bfc <_free_r>
 801af5e:	e7c7      	b.n	801aef0 <__ssputs_r+0x46>

0801af60 <_svfiprintf_r>:
 801af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af64:	4698      	mov	r8, r3
 801af66:	898b      	ldrh	r3, [r1, #12]
 801af68:	061b      	lsls	r3, r3, #24
 801af6a:	b09d      	sub	sp, #116	; 0x74
 801af6c:	4607      	mov	r7, r0
 801af6e:	460d      	mov	r5, r1
 801af70:	4614      	mov	r4, r2
 801af72:	d50e      	bpl.n	801af92 <_svfiprintf_r+0x32>
 801af74:	690b      	ldr	r3, [r1, #16]
 801af76:	b963      	cbnz	r3, 801af92 <_svfiprintf_r+0x32>
 801af78:	2140      	movs	r1, #64	; 0x40
 801af7a:	f7fd fe8f 	bl	8018c9c <_malloc_r>
 801af7e:	6028      	str	r0, [r5, #0]
 801af80:	6128      	str	r0, [r5, #16]
 801af82:	b920      	cbnz	r0, 801af8e <_svfiprintf_r+0x2e>
 801af84:	230c      	movs	r3, #12
 801af86:	603b      	str	r3, [r7, #0]
 801af88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801af8c:	e0d1      	b.n	801b132 <_svfiprintf_r+0x1d2>
 801af8e:	2340      	movs	r3, #64	; 0x40
 801af90:	616b      	str	r3, [r5, #20]
 801af92:	2300      	movs	r3, #0
 801af94:	9309      	str	r3, [sp, #36]	; 0x24
 801af96:	2320      	movs	r3, #32
 801af98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af9c:	f8cd 800c 	str.w	r8, [sp, #12]
 801afa0:	2330      	movs	r3, #48	; 0x30
 801afa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801b14c <_svfiprintf_r+0x1ec>
 801afa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801afaa:	f04f 0901 	mov.w	r9, #1
 801afae:	4623      	mov	r3, r4
 801afb0:	469a      	mov	sl, r3
 801afb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801afb6:	b10a      	cbz	r2, 801afbc <_svfiprintf_r+0x5c>
 801afb8:	2a25      	cmp	r2, #37	; 0x25
 801afba:	d1f9      	bne.n	801afb0 <_svfiprintf_r+0x50>
 801afbc:	ebba 0b04 	subs.w	fp, sl, r4
 801afc0:	d00b      	beq.n	801afda <_svfiprintf_r+0x7a>
 801afc2:	465b      	mov	r3, fp
 801afc4:	4622      	mov	r2, r4
 801afc6:	4629      	mov	r1, r5
 801afc8:	4638      	mov	r0, r7
 801afca:	f7ff ff6e 	bl	801aeaa <__ssputs_r>
 801afce:	3001      	adds	r0, #1
 801afd0:	f000 80aa 	beq.w	801b128 <_svfiprintf_r+0x1c8>
 801afd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801afd6:	445a      	add	r2, fp
 801afd8:	9209      	str	r2, [sp, #36]	; 0x24
 801afda:	f89a 3000 	ldrb.w	r3, [sl]
 801afde:	2b00      	cmp	r3, #0
 801afe0:	f000 80a2 	beq.w	801b128 <_svfiprintf_r+0x1c8>
 801afe4:	2300      	movs	r3, #0
 801afe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801afea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801afee:	f10a 0a01 	add.w	sl, sl, #1
 801aff2:	9304      	str	r3, [sp, #16]
 801aff4:	9307      	str	r3, [sp, #28]
 801aff6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801affa:	931a      	str	r3, [sp, #104]	; 0x68
 801affc:	4654      	mov	r4, sl
 801affe:	2205      	movs	r2, #5
 801b000:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b004:	4851      	ldr	r0, [pc, #324]	; (801b14c <_svfiprintf_r+0x1ec>)
 801b006:	f7e5 f8eb 	bl	80001e0 <memchr>
 801b00a:	9a04      	ldr	r2, [sp, #16]
 801b00c:	b9d8      	cbnz	r0, 801b046 <_svfiprintf_r+0xe6>
 801b00e:	06d0      	lsls	r0, r2, #27
 801b010:	bf44      	itt	mi
 801b012:	2320      	movmi	r3, #32
 801b014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b018:	0711      	lsls	r1, r2, #28
 801b01a:	bf44      	itt	mi
 801b01c:	232b      	movmi	r3, #43	; 0x2b
 801b01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b022:	f89a 3000 	ldrb.w	r3, [sl]
 801b026:	2b2a      	cmp	r3, #42	; 0x2a
 801b028:	d015      	beq.n	801b056 <_svfiprintf_r+0xf6>
 801b02a:	9a07      	ldr	r2, [sp, #28]
 801b02c:	4654      	mov	r4, sl
 801b02e:	2000      	movs	r0, #0
 801b030:	f04f 0c0a 	mov.w	ip, #10
 801b034:	4621      	mov	r1, r4
 801b036:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b03a:	3b30      	subs	r3, #48	; 0x30
 801b03c:	2b09      	cmp	r3, #9
 801b03e:	d94e      	bls.n	801b0de <_svfiprintf_r+0x17e>
 801b040:	b1b0      	cbz	r0, 801b070 <_svfiprintf_r+0x110>
 801b042:	9207      	str	r2, [sp, #28]
 801b044:	e014      	b.n	801b070 <_svfiprintf_r+0x110>
 801b046:	eba0 0308 	sub.w	r3, r0, r8
 801b04a:	fa09 f303 	lsl.w	r3, r9, r3
 801b04e:	4313      	orrs	r3, r2
 801b050:	9304      	str	r3, [sp, #16]
 801b052:	46a2      	mov	sl, r4
 801b054:	e7d2      	b.n	801affc <_svfiprintf_r+0x9c>
 801b056:	9b03      	ldr	r3, [sp, #12]
 801b058:	1d19      	adds	r1, r3, #4
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	9103      	str	r1, [sp, #12]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	bfbb      	ittet	lt
 801b062:	425b      	neglt	r3, r3
 801b064:	f042 0202 	orrlt.w	r2, r2, #2
 801b068:	9307      	strge	r3, [sp, #28]
 801b06a:	9307      	strlt	r3, [sp, #28]
 801b06c:	bfb8      	it	lt
 801b06e:	9204      	strlt	r2, [sp, #16]
 801b070:	7823      	ldrb	r3, [r4, #0]
 801b072:	2b2e      	cmp	r3, #46	; 0x2e
 801b074:	d10c      	bne.n	801b090 <_svfiprintf_r+0x130>
 801b076:	7863      	ldrb	r3, [r4, #1]
 801b078:	2b2a      	cmp	r3, #42	; 0x2a
 801b07a:	d135      	bne.n	801b0e8 <_svfiprintf_r+0x188>
 801b07c:	9b03      	ldr	r3, [sp, #12]
 801b07e:	1d1a      	adds	r2, r3, #4
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	9203      	str	r2, [sp, #12]
 801b084:	2b00      	cmp	r3, #0
 801b086:	bfb8      	it	lt
 801b088:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b08c:	3402      	adds	r4, #2
 801b08e:	9305      	str	r3, [sp, #20]
 801b090:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b15c <_svfiprintf_r+0x1fc>
 801b094:	7821      	ldrb	r1, [r4, #0]
 801b096:	2203      	movs	r2, #3
 801b098:	4650      	mov	r0, sl
 801b09a:	f7e5 f8a1 	bl	80001e0 <memchr>
 801b09e:	b140      	cbz	r0, 801b0b2 <_svfiprintf_r+0x152>
 801b0a0:	2340      	movs	r3, #64	; 0x40
 801b0a2:	eba0 000a 	sub.w	r0, r0, sl
 801b0a6:	fa03 f000 	lsl.w	r0, r3, r0
 801b0aa:	9b04      	ldr	r3, [sp, #16]
 801b0ac:	4303      	orrs	r3, r0
 801b0ae:	3401      	adds	r4, #1
 801b0b0:	9304      	str	r3, [sp, #16]
 801b0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b0b6:	4826      	ldr	r0, [pc, #152]	; (801b150 <_svfiprintf_r+0x1f0>)
 801b0b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b0bc:	2206      	movs	r2, #6
 801b0be:	f7e5 f88f 	bl	80001e0 <memchr>
 801b0c2:	2800      	cmp	r0, #0
 801b0c4:	d038      	beq.n	801b138 <_svfiprintf_r+0x1d8>
 801b0c6:	4b23      	ldr	r3, [pc, #140]	; (801b154 <_svfiprintf_r+0x1f4>)
 801b0c8:	bb1b      	cbnz	r3, 801b112 <_svfiprintf_r+0x1b2>
 801b0ca:	9b03      	ldr	r3, [sp, #12]
 801b0cc:	3307      	adds	r3, #7
 801b0ce:	f023 0307 	bic.w	r3, r3, #7
 801b0d2:	3308      	adds	r3, #8
 801b0d4:	9303      	str	r3, [sp, #12]
 801b0d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0d8:	4433      	add	r3, r6
 801b0da:	9309      	str	r3, [sp, #36]	; 0x24
 801b0dc:	e767      	b.n	801afae <_svfiprintf_r+0x4e>
 801b0de:	fb0c 3202 	mla	r2, ip, r2, r3
 801b0e2:	460c      	mov	r4, r1
 801b0e4:	2001      	movs	r0, #1
 801b0e6:	e7a5      	b.n	801b034 <_svfiprintf_r+0xd4>
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	3401      	adds	r4, #1
 801b0ec:	9305      	str	r3, [sp, #20]
 801b0ee:	4619      	mov	r1, r3
 801b0f0:	f04f 0c0a 	mov.w	ip, #10
 801b0f4:	4620      	mov	r0, r4
 801b0f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b0fa:	3a30      	subs	r2, #48	; 0x30
 801b0fc:	2a09      	cmp	r2, #9
 801b0fe:	d903      	bls.n	801b108 <_svfiprintf_r+0x1a8>
 801b100:	2b00      	cmp	r3, #0
 801b102:	d0c5      	beq.n	801b090 <_svfiprintf_r+0x130>
 801b104:	9105      	str	r1, [sp, #20]
 801b106:	e7c3      	b.n	801b090 <_svfiprintf_r+0x130>
 801b108:	fb0c 2101 	mla	r1, ip, r1, r2
 801b10c:	4604      	mov	r4, r0
 801b10e:	2301      	movs	r3, #1
 801b110:	e7f0      	b.n	801b0f4 <_svfiprintf_r+0x194>
 801b112:	ab03      	add	r3, sp, #12
 801b114:	9300      	str	r3, [sp, #0]
 801b116:	462a      	mov	r2, r5
 801b118:	4b0f      	ldr	r3, [pc, #60]	; (801b158 <_svfiprintf_r+0x1f8>)
 801b11a:	a904      	add	r1, sp, #16
 801b11c:	4638      	mov	r0, r7
 801b11e:	f7fd feb7 	bl	8018e90 <_printf_float>
 801b122:	1c42      	adds	r2, r0, #1
 801b124:	4606      	mov	r6, r0
 801b126:	d1d6      	bne.n	801b0d6 <_svfiprintf_r+0x176>
 801b128:	89ab      	ldrh	r3, [r5, #12]
 801b12a:	065b      	lsls	r3, r3, #25
 801b12c:	f53f af2c 	bmi.w	801af88 <_svfiprintf_r+0x28>
 801b130:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b132:	b01d      	add	sp, #116	; 0x74
 801b134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b138:	ab03      	add	r3, sp, #12
 801b13a:	9300      	str	r3, [sp, #0]
 801b13c:	462a      	mov	r2, r5
 801b13e:	4b06      	ldr	r3, [pc, #24]	; (801b158 <_svfiprintf_r+0x1f8>)
 801b140:	a904      	add	r1, sp, #16
 801b142:	4638      	mov	r0, r7
 801b144:	f7fe f948 	bl	80193d8 <_printf_i>
 801b148:	e7eb      	b.n	801b122 <_svfiprintf_r+0x1c2>
 801b14a:	bf00      	nop
 801b14c:	08020d3c 	.word	0x08020d3c
 801b150:	08020d46 	.word	0x08020d46
 801b154:	08018e91 	.word	0x08018e91
 801b158:	0801aeab 	.word	0x0801aeab
 801b15c:	08020d42 	.word	0x08020d42

0801b160 <_read_r>:
 801b160:	b538      	push	{r3, r4, r5, lr}
 801b162:	4d07      	ldr	r5, [pc, #28]	; (801b180 <_read_r+0x20>)
 801b164:	4604      	mov	r4, r0
 801b166:	4608      	mov	r0, r1
 801b168:	4611      	mov	r1, r2
 801b16a:	2200      	movs	r2, #0
 801b16c:	602a      	str	r2, [r5, #0]
 801b16e:	461a      	mov	r2, r3
 801b170:	f7ea f8c4 	bl	80052fc <_read>
 801b174:	1c43      	adds	r3, r0, #1
 801b176:	d102      	bne.n	801b17e <_read_r+0x1e>
 801b178:	682b      	ldr	r3, [r5, #0]
 801b17a:	b103      	cbz	r3, 801b17e <_read_r+0x1e>
 801b17c:	6023      	str	r3, [r4, #0]
 801b17e:	bd38      	pop	{r3, r4, r5, pc}
 801b180:	20015404 	.word	0x20015404

0801b184 <__assert_func>:
 801b184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b186:	4614      	mov	r4, r2
 801b188:	461a      	mov	r2, r3
 801b18a:	4b09      	ldr	r3, [pc, #36]	; (801b1b0 <__assert_func+0x2c>)
 801b18c:	681b      	ldr	r3, [r3, #0]
 801b18e:	4605      	mov	r5, r0
 801b190:	68d8      	ldr	r0, [r3, #12]
 801b192:	b14c      	cbz	r4, 801b1a8 <__assert_func+0x24>
 801b194:	4b07      	ldr	r3, [pc, #28]	; (801b1b4 <__assert_func+0x30>)
 801b196:	9100      	str	r1, [sp, #0]
 801b198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b19c:	4906      	ldr	r1, [pc, #24]	; (801b1b8 <__assert_func+0x34>)
 801b19e:	462b      	mov	r3, r5
 801b1a0:	f000 f80e 	bl	801b1c0 <fiprintf>
 801b1a4:	f000 fa98 	bl	801b6d8 <abort>
 801b1a8:	4b04      	ldr	r3, [pc, #16]	; (801b1bc <__assert_func+0x38>)
 801b1aa:	461c      	mov	r4, r3
 801b1ac:	e7f3      	b.n	801b196 <__assert_func+0x12>
 801b1ae:	bf00      	nop
 801b1b0:	2000025c 	.word	0x2000025c
 801b1b4:	08020d4d 	.word	0x08020d4d
 801b1b8:	08020d5a 	.word	0x08020d5a
 801b1bc:	08020d88 	.word	0x08020d88

0801b1c0 <fiprintf>:
 801b1c0:	b40e      	push	{r1, r2, r3}
 801b1c2:	b503      	push	{r0, r1, lr}
 801b1c4:	4601      	mov	r1, r0
 801b1c6:	ab03      	add	r3, sp, #12
 801b1c8:	4805      	ldr	r0, [pc, #20]	; (801b1e0 <fiprintf+0x20>)
 801b1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1ce:	6800      	ldr	r0, [r0, #0]
 801b1d0:	9301      	str	r3, [sp, #4]
 801b1d2:	f000 f883 	bl	801b2dc <_vfiprintf_r>
 801b1d6:	b002      	add	sp, #8
 801b1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1dc:	b003      	add	sp, #12
 801b1de:	4770      	bx	lr
 801b1e0:	2000025c 	.word	0x2000025c

0801b1e4 <__ascii_mbtowc>:
 801b1e4:	b082      	sub	sp, #8
 801b1e6:	b901      	cbnz	r1, 801b1ea <__ascii_mbtowc+0x6>
 801b1e8:	a901      	add	r1, sp, #4
 801b1ea:	b142      	cbz	r2, 801b1fe <__ascii_mbtowc+0x1a>
 801b1ec:	b14b      	cbz	r3, 801b202 <__ascii_mbtowc+0x1e>
 801b1ee:	7813      	ldrb	r3, [r2, #0]
 801b1f0:	600b      	str	r3, [r1, #0]
 801b1f2:	7812      	ldrb	r2, [r2, #0]
 801b1f4:	1e10      	subs	r0, r2, #0
 801b1f6:	bf18      	it	ne
 801b1f8:	2001      	movne	r0, #1
 801b1fa:	b002      	add	sp, #8
 801b1fc:	4770      	bx	lr
 801b1fe:	4610      	mov	r0, r2
 801b200:	e7fb      	b.n	801b1fa <__ascii_mbtowc+0x16>
 801b202:	f06f 0001 	mvn.w	r0, #1
 801b206:	e7f8      	b.n	801b1fa <__ascii_mbtowc+0x16>

0801b208 <memmove>:
 801b208:	4288      	cmp	r0, r1
 801b20a:	b510      	push	{r4, lr}
 801b20c:	eb01 0402 	add.w	r4, r1, r2
 801b210:	d902      	bls.n	801b218 <memmove+0x10>
 801b212:	4284      	cmp	r4, r0
 801b214:	4623      	mov	r3, r4
 801b216:	d807      	bhi.n	801b228 <memmove+0x20>
 801b218:	1e43      	subs	r3, r0, #1
 801b21a:	42a1      	cmp	r1, r4
 801b21c:	d008      	beq.n	801b230 <memmove+0x28>
 801b21e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b222:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b226:	e7f8      	b.n	801b21a <memmove+0x12>
 801b228:	4402      	add	r2, r0
 801b22a:	4601      	mov	r1, r0
 801b22c:	428a      	cmp	r2, r1
 801b22e:	d100      	bne.n	801b232 <memmove+0x2a>
 801b230:	bd10      	pop	{r4, pc}
 801b232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b23a:	e7f7      	b.n	801b22c <memmove+0x24>

0801b23c <_realloc_r>:
 801b23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b23e:	4607      	mov	r7, r0
 801b240:	4614      	mov	r4, r2
 801b242:	460e      	mov	r6, r1
 801b244:	b921      	cbnz	r1, 801b250 <_realloc_r+0x14>
 801b246:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b24a:	4611      	mov	r1, r2
 801b24c:	f7fd bd26 	b.w	8018c9c <_malloc_r>
 801b250:	b922      	cbnz	r2, 801b25c <_realloc_r+0x20>
 801b252:	f7fd fcd3 	bl	8018bfc <_free_r>
 801b256:	4625      	mov	r5, r4
 801b258:	4628      	mov	r0, r5
 801b25a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b25c:	f000 faa8 	bl	801b7b0 <_malloc_usable_size_r>
 801b260:	42a0      	cmp	r0, r4
 801b262:	d20f      	bcs.n	801b284 <_realloc_r+0x48>
 801b264:	4621      	mov	r1, r4
 801b266:	4638      	mov	r0, r7
 801b268:	f7fd fd18 	bl	8018c9c <_malloc_r>
 801b26c:	4605      	mov	r5, r0
 801b26e:	2800      	cmp	r0, #0
 801b270:	d0f2      	beq.n	801b258 <_realloc_r+0x1c>
 801b272:	4631      	mov	r1, r6
 801b274:	4622      	mov	r2, r4
 801b276:	f7fd fcab 	bl	8018bd0 <memcpy>
 801b27a:	4631      	mov	r1, r6
 801b27c:	4638      	mov	r0, r7
 801b27e:	f7fd fcbd 	bl	8018bfc <_free_r>
 801b282:	e7e9      	b.n	801b258 <_realloc_r+0x1c>
 801b284:	4635      	mov	r5, r6
 801b286:	e7e7      	b.n	801b258 <_realloc_r+0x1c>

0801b288 <__sfputc_r>:
 801b288:	6893      	ldr	r3, [r2, #8]
 801b28a:	3b01      	subs	r3, #1
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	b410      	push	{r4}
 801b290:	6093      	str	r3, [r2, #8]
 801b292:	da08      	bge.n	801b2a6 <__sfputc_r+0x1e>
 801b294:	6994      	ldr	r4, [r2, #24]
 801b296:	42a3      	cmp	r3, r4
 801b298:	db01      	blt.n	801b29e <__sfputc_r+0x16>
 801b29a:	290a      	cmp	r1, #10
 801b29c:	d103      	bne.n	801b2a6 <__sfputc_r+0x1e>
 801b29e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2a2:	f000 b94b 	b.w	801b53c <__swbuf_r>
 801b2a6:	6813      	ldr	r3, [r2, #0]
 801b2a8:	1c58      	adds	r0, r3, #1
 801b2aa:	6010      	str	r0, [r2, #0]
 801b2ac:	7019      	strb	r1, [r3, #0]
 801b2ae:	4608      	mov	r0, r1
 801b2b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2b4:	4770      	bx	lr

0801b2b6 <__sfputs_r>:
 801b2b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2b8:	4606      	mov	r6, r0
 801b2ba:	460f      	mov	r7, r1
 801b2bc:	4614      	mov	r4, r2
 801b2be:	18d5      	adds	r5, r2, r3
 801b2c0:	42ac      	cmp	r4, r5
 801b2c2:	d101      	bne.n	801b2c8 <__sfputs_r+0x12>
 801b2c4:	2000      	movs	r0, #0
 801b2c6:	e007      	b.n	801b2d8 <__sfputs_r+0x22>
 801b2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b2cc:	463a      	mov	r2, r7
 801b2ce:	4630      	mov	r0, r6
 801b2d0:	f7ff ffda 	bl	801b288 <__sfputc_r>
 801b2d4:	1c43      	adds	r3, r0, #1
 801b2d6:	d1f3      	bne.n	801b2c0 <__sfputs_r+0xa>
 801b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b2dc <_vfiprintf_r>:
 801b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2e0:	460d      	mov	r5, r1
 801b2e2:	b09d      	sub	sp, #116	; 0x74
 801b2e4:	4614      	mov	r4, r2
 801b2e6:	4698      	mov	r8, r3
 801b2e8:	4606      	mov	r6, r0
 801b2ea:	b118      	cbz	r0, 801b2f4 <_vfiprintf_r+0x18>
 801b2ec:	6983      	ldr	r3, [r0, #24]
 801b2ee:	b90b      	cbnz	r3, 801b2f4 <_vfiprintf_r+0x18>
 801b2f0:	f7fd fb7e 	bl	80189f0 <__sinit>
 801b2f4:	4b89      	ldr	r3, [pc, #548]	; (801b51c <_vfiprintf_r+0x240>)
 801b2f6:	429d      	cmp	r5, r3
 801b2f8:	d11b      	bne.n	801b332 <_vfiprintf_r+0x56>
 801b2fa:	6875      	ldr	r5, [r6, #4]
 801b2fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b2fe:	07d9      	lsls	r1, r3, #31
 801b300:	d405      	bmi.n	801b30e <_vfiprintf_r+0x32>
 801b302:	89ab      	ldrh	r3, [r5, #12]
 801b304:	059a      	lsls	r2, r3, #22
 801b306:	d402      	bmi.n	801b30e <_vfiprintf_r+0x32>
 801b308:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b30a:	f7fd fc4e 	bl	8018baa <__retarget_lock_acquire_recursive>
 801b30e:	89ab      	ldrh	r3, [r5, #12]
 801b310:	071b      	lsls	r3, r3, #28
 801b312:	d501      	bpl.n	801b318 <_vfiprintf_r+0x3c>
 801b314:	692b      	ldr	r3, [r5, #16]
 801b316:	b9eb      	cbnz	r3, 801b354 <_vfiprintf_r+0x78>
 801b318:	4629      	mov	r1, r5
 801b31a:	4630      	mov	r0, r6
 801b31c:	f000 f96e 	bl	801b5fc <__swsetup_r>
 801b320:	b1c0      	cbz	r0, 801b354 <_vfiprintf_r+0x78>
 801b322:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b324:	07dc      	lsls	r4, r3, #31
 801b326:	d50e      	bpl.n	801b346 <_vfiprintf_r+0x6a>
 801b328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b32c:	b01d      	add	sp, #116	; 0x74
 801b32e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b332:	4b7b      	ldr	r3, [pc, #492]	; (801b520 <_vfiprintf_r+0x244>)
 801b334:	429d      	cmp	r5, r3
 801b336:	d101      	bne.n	801b33c <_vfiprintf_r+0x60>
 801b338:	68b5      	ldr	r5, [r6, #8]
 801b33a:	e7df      	b.n	801b2fc <_vfiprintf_r+0x20>
 801b33c:	4b79      	ldr	r3, [pc, #484]	; (801b524 <_vfiprintf_r+0x248>)
 801b33e:	429d      	cmp	r5, r3
 801b340:	bf08      	it	eq
 801b342:	68f5      	ldreq	r5, [r6, #12]
 801b344:	e7da      	b.n	801b2fc <_vfiprintf_r+0x20>
 801b346:	89ab      	ldrh	r3, [r5, #12]
 801b348:	0598      	lsls	r0, r3, #22
 801b34a:	d4ed      	bmi.n	801b328 <_vfiprintf_r+0x4c>
 801b34c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b34e:	f7fd fc2d 	bl	8018bac <__retarget_lock_release_recursive>
 801b352:	e7e9      	b.n	801b328 <_vfiprintf_r+0x4c>
 801b354:	2300      	movs	r3, #0
 801b356:	9309      	str	r3, [sp, #36]	; 0x24
 801b358:	2320      	movs	r3, #32
 801b35a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b35e:	f8cd 800c 	str.w	r8, [sp, #12]
 801b362:	2330      	movs	r3, #48	; 0x30
 801b364:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b528 <_vfiprintf_r+0x24c>
 801b368:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b36c:	f04f 0901 	mov.w	r9, #1
 801b370:	4623      	mov	r3, r4
 801b372:	469a      	mov	sl, r3
 801b374:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b378:	b10a      	cbz	r2, 801b37e <_vfiprintf_r+0xa2>
 801b37a:	2a25      	cmp	r2, #37	; 0x25
 801b37c:	d1f9      	bne.n	801b372 <_vfiprintf_r+0x96>
 801b37e:	ebba 0b04 	subs.w	fp, sl, r4
 801b382:	d00b      	beq.n	801b39c <_vfiprintf_r+0xc0>
 801b384:	465b      	mov	r3, fp
 801b386:	4622      	mov	r2, r4
 801b388:	4629      	mov	r1, r5
 801b38a:	4630      	mov	r0, r6
 801b38c:	f7ff ff93 	bl	801b2b6 <__sfputs_r>
 801b390:	3001      	adds	r0, #1
 801b392:	f000 80aa 	beq.w	801b4ea <_vfiprintf_r+0x20e>
 801b396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b398:	445a      	add	r2, fp
 801b39a:	9209      	str	r2, [sp, #36]	; 0x24
 801b39c:	f89a 3000 	ldrb.w	r3, [sl]
 801b3a0:	2b00      	cmp	r3, #0
 801b3a2:	f000 80a2 	beq.w	801b4ea <_vfiprintf_r+0x20e>
 801b3a6:	2300      	movs	r3, #0
 801b3a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b3b0:	f10a 0a01 	add.w	sl, sl, #1
 801b3b4:	9304      	str	r3, [sp, #16]
 801b3b6:	9307      	str	r3, [sp, #28]
 801b3b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b3bc:	931a      	str	r3, [sp, #104]	; 0x68
 801b3be:	4654      	mov	r4, sl
 801b3c0:	2205      	movs	r2, #5
 801b3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3c6:	4858      	ldr	r0, [pc, #352]	; (801b528 <_vfiprintf_r+0x24c>)
 801b3c8:	f7e4 ff0a 	bl	80001e0 <memchr>
 801b3cc:	9a04      	ldr	r2, [sp, #16]
 801b3ce:	b9d8      	cbnz	r0, 801b408 <_vfiprintf_r+0x12c>
 801b3d0:	06d1      	lsls	r1, r2, #27
 801b3d2:	bf44      	itt	mi
 801b3d4:	2320      	movmi	r3, #32
 801b3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3da:	0713      	lsls	r3, r2, #28
 801b3dc:	bf44      	itt	mi
 801b3de:	232b      	movmi	r3, #43	; 0x2b
 801b3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b3e4:	f89a 3000 	ldrb.w	r3, [sl]
 801b3e8:	2b2a      	cmp	r3, #42	; 0x2a
 801b3ea:	d015      	beq.n	801b418 <_vfiprintf_r+0x13c>
 801b3ec:	9a07      	ldr	r2, [sp, #28]
 801b3ee:	4654      	mov	r4, sl
 801b3f0:	2000      	movs	r0, #0
 801b3f2:	f04f 0c0a 	mov.w	ip, #10
 801b3f6:	4621      	mov	r1, r4
 801b3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3fc:	3b30      	subs	r3, #48	; 0x30
 801b3fe:	2b09      	cmp	r3, #9
 801b400:	d94e      	bls.n	801b4a0 <_vfiprintf_r+0x1c4>
 801b402:	b1b0      	cbz	r0, 801b432 <_vfiprintf_r+0x156>
 801b404:	9207      	str	r2, [sp, #28]
 801b406:	e014      	b.n	801b432 <_vfiprintf_r+0x156>
 801b408:	eba0 0308 	sub.w	r3, r0, r8
 801b40c:	fa09 f303 	lsl.w	r3, r9, r3
 801b410:	4313      	orrs	r3, r2
 801b412:	9304      	str	r3, [sp, #16]
 801b414:	46a2      	mov	sl, r4
 801b416:	e7d2      	b.n	801b3be <_vfiprintf_r+0xe2>
 801b418:	9b03      	ldr	r3, [sp, #12]
 801b41a:	1d19      	adds	r1, r3, #4
 801b41c:	681b      	ldr	r3, [r3, #0]
 801b41e:	9103      	str	r1, [sp, #12]
 801b420:	2b00      	cmp	r3, #0
 801b422:	bfbb      	ittet	lt
 801b424:	425b      	neglt	r3, r3
 801b426:	f042 0202 	orrlt.w	r2, r2, #2
 801b42a:	9307      	strge	r3, [sp, #28]
 801b42c:	9307      	strlt	r3, [sp, #28]
 801b42e:	bfb8      	it	lt
 801b430:	9204      	strlt	r2, [sp, #16]
 801b432:	7823      	ldrb	r3, [r4, #0]
 801b434:	2b2e      	cmp	r3, #46	; 0x2e
 801b436:	d10c      	bne.n	801b452 <_vfiprintf_r+0x176>
 801b438:	7863      	ldrb	r3, [r4, #1]
 801b43a:	2b2a      	cmp	r3, #42	; 0x2a
 801b43c:	d135      	bne.n	801b4aa <_vfiprintf_r+0x1ce>
 801b43e:	9b03      	ldr	r3, [sp, #12]
 801b440:	1d1a      	adds	r2, r3, #4
 801b442:	681b      	ldr	r3, [r3, #0]
 801b444:	9203      	str	r2, [sp, #12]
 801b446:	2b00      	cmp	r3, #0
 801b448:	bfb8      	it	lt
 801b44a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b44e:	3402      	adds	r4, #2
 801b450:	9305      	str	r3, [sp, #20]
 801b452:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b538 <_vfiprintf_r+0x25c>
 801b456:	7821      	ldrb	r1, [r4, #0]
 801b458:	2203      	movs	r2, #3
 801b45a:	4650      	mov	r0, sl
 801b45c:	f7e4 fec0 	bl	80001e0 <memchr>
 801b460:	b140      	cbz	r0, 801b474 <_vfiprintf_r+0x198>
 801b462:	2340      	movs	r3, #64	; 0x40
 801b464:	eba0 000a 	sub.w	r0, r0, sl
 801b468:	fa03 f000 	lsl.w	r0, r3, r0
 801b46c:	9b04      	ldr	r3, [sp, #16]
 801b46e:	4303      	orrs	r3, r0
 801b470:	3401      	adds	r4, #1
 801b472:	9304      	str	r3, [sp, #16]
 801b474:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b478:	482c      	ldr	r0, [pc, #176]	; (801b52c <_vfiprintf_r+0x250>)
 801b47a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b47e:	2206      	movs	r2, #6
 801b480:	f7e4 feae 	bl	80001e0 <memchr>
 801b484:	2800      	cmp	r0, #0
 801b486:	d03f      	beq.n	801b508 <_vfiprintf_r+0x22c>
 801b488:	4b29      	ldr	r3, [pc, #164]	; (801b530 <_vfiprintf_r+0x254>)
 801b48a:	bb1b      	cbnz	r3, 801b4d4 <_vfiprintf_r+0x1f8>
 801b48c:	9b03      	ldr	r3, [sp, #12]
 801b48e:	3307      	adds	r3, #7
 801b490:	f023 0307 	bic.w	r3, r3, #7
 801b494:	3308      	adds	r3, #8
 801b496:	9303      	str	r3, [sp, #12]
 801b498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b49a:	443b      	add	r3, r7
 801b49c:	9309      	str	r3, [sp, #36]	; 0x24
 801b49e:	e767      	b.n	801b370 <_vfiprintf_r+0x94>
 801b4a0:	fb0c 3202 	mla	r2, ip, r2, r3
 801b4a4:	460c      	mov	r4, r1
 801b4a6:	2001      	movs	r0, #1
 801b4a8:	e7a5      	b.n	801b3f6 <_vfiprintf_r+0x11a>
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	3401      	adds	r4, #1
 801b4ae:	9305      	str	r3, [sp, #20]
 801b4b0:	4619      	mov	r1, r3
 801b4b2:	f04f 0c0a 	mov.w	ip, #10
 801b4b6:	4620      	mov	r0, r4
 801b4b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4bc:	3a30      	subs	r2, #48	; 0x30
 801b4be:	2a09      	cmp	r2, #9
 801b4c0:	d903      	bls.n	801b4ca <_vfiprintf_r+0x1ee>
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d0c5      	beq.n	801b452 <_vfiprintf_r+0x176>
 801b4c6:	9105      	str	r1, [sp, #20]
 801b4c8:	e7c3      	b.n	801b452 <_vfiprintf_r+0x176>
 801b4ca:	fb0c 2101 	mla	r1, ip, r1, r2
 801b4ce:	4604      	mov	r4, r0
 801b4d0:	2301      	movs	r3, #1
 801b4d2:	e7f0      	b.n	801b4b6 <_vfiprintf_r+0x1da>
 801b4d4:	ab03      	add	r3, sp, #12
 801b4d6:	9300      	str	r3, [sp, #0]
 801b4d8:	462a      	mov	r2, r5
 801b4da:	4b16      	ldr	r3, [pc, #88]	; (801b534 <_vfiprintf_r+0x258>)
 801b4dc:	a904      	add	r1, sp, #16
 801b4de:	4630      	mov	r0, r6
 801b4e0:	f7fd fcd6 	bl	8018e90 <_printf_float>
 801b4e4:	4607      	mov	r7, r0
 801b4e6:	1c78      	adds	r0, r7, #1
 801b4e8:	d1d6      	bne.n	801b498 <_vfiprintf_r+0x1bc>
 801b4ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b4ec:	07d9      	lsls	r1, r3, #31
 801b4ee:	d405      	bmi.n	801b4fc <_vfiprintf_r+0x220>
 801b4f0:	89ab      	ldrh	r3, [r5, #12]
 801b4f2:	059a      	lsls	r2, r3, #22
 801b4f4:	d402      	bmi.n	801b4fc <_vfiprintf_r+0x220>
 801b4f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b4f8:	f7fd fb58 	bl	8018bac <__retarget_lock_release_recursive>
 801b4fc:	89ab      	ldrh	r3, [r5, #12]
 801b4fe:	065b      	lsls	r3, r3, #25
 801b500:	f53f af12 	bmi.w	801b328 <_vfiprintf_r+0x4c>
 801b504:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b506:	e711      	b.n	801b32c <_vfiprintf_r+0x50>
 801b508:	ab03      	add	r3, sp, #12
 801b50a:	9300      	str	r3, [sp, #0]
 801b50c:	462a      	mov	r2, r5
 801b50e:	4b09      	ldr	r3, [pc, #36]	; (801b534 <_vfiprintf_r+0x258>)
 801b510:	a904      	add	r1, sp, #16
 801b512:	4630      	mov	r0, r6
 801b514:	f7fd ff60 	bl	80193d8 <_printf_i>
 801b518:	e7e4      	b.n	801b4e4 <_vfiprintf_r+0x208>
 801b51a:	bf00      	nop
 801b51c:	08020aac 	.word	0x08020aac
 801b520:	08020acc 	.word	0x08020acc
 801b524:	08020a8c 	.word	0x08020a8c
 801b528:	08020d3c 	.word	0x08020d3c
 801b52c:	08020d46 	.word	0x08020d46
 801b530:	08018e91 	.word	0x08018e91
 801b534:	0801b2b7 	.word	0x0801b2b7
 801b538:	08020d42 	.word	0x08020d42

0801b53c <__swbuf_r>:
 801b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b53e:	460e      	mov	r6, r1
 801b540:	4614      	mov	r4, r2
 801b542:	4605      	mov	r5, r0
 801b544:	b118      	cbz	r0, 801b54e <__swbuf_r+0x12>
 801b546:	6983      	ldr	r3, [r0, #24]
 801b548:	b90b      	cbnz	r3, 801b54e <__swbuf_r+0x12>
 801b54a:	f7fd fa51 	bl	80189f0 <__sinit>
 801b54e:	4b21      	ldr	r3, [pc, #132]	; (801b5d4 <__swbuf_r+0x98>)
 801b550:	429c      	cmp	r4, r3
 801b552:	d12b      	bne.n	801b5ac <__swbuf_r+0x70>
 801b554:	686c      	ldr	r4, [r5, #4]
 801b556:	69a3      	ldr	r3, [r4, #24]
 801b558:	60a3      	str	r3, [r4, #8]
 801b55a:	89a3      	ldrh	r3, [r4, #12]
 801b55c:	071a      	lsls	r2, r3, #28
 801b55e:	d52f      	bpl.n	801b5c0 <__swbuf_r+0x84>
 801b560:	6923      	ldr	r3, [r4, #16]
 801b562:	b36b      	cbz	r3, 801b5c0 <__swbuf_r+0x84>
 801b564:	6923      	ldr	r3, [r4, #16]
 801b566:	6820      	ldr	r0, [r4, #0]
 801b568:	1ac0      	subs	r0, r0, r3
 801b56a:	6963      	ldr	r3, [r4, #20]
 801b56c:	b2f6      	uxtb	r6, r6
 801b56e:	4283      	cmp	r3, r0
 801b570:	4637      	mov	r7, r6
 801b572:	dc04      	bgt.n	801b57e <__swbuf_r+0x42>
 801b574:	4621      	mov	r1, r4
 801b576:	4628      	mov	r0, r5
 801b578:	f7ff f8ac 	bl	801a6d4 <_fflush_r>
 801b57c:	bb30      	cbnz	r0, 801b5cc <__swbuf_r+0x90>
 801b57e:	68a3      	ldr	r3, [r4, #8]
 801b580:	3b01      	subs	r3, #1
 801b582:	60a3      	str	r3, [r4, #8]
 801b584:	6823      	ldr	r3, [r4, #0]
 801b586:	1c5a      	adds	r2, r3, #1
 801b588:	6022      	str	r2, [r4, #0]
 801b58a:	701e      	strb	r6, [r3, #0]
 801b58c:	6963      	ldr	r3, [r4, #20]
 801b58e:	3001      	adds	r0, #1
 801b590:	4283      	cmp	r3, r0
 801b592:	d004      	beq.n	801b59e <__swbuf_r+0x62>
 801b594:	89a3      	ldrh	r3, [r4, #12]
 801b596:	07db      	lsls	r3, r3, #31
 801b598:	d506      	bpl.n	801b5a8 <__swbuf_r+0x6c>
 801b59a:	2e0a      	cmp	r6, #10
 801b59c:	d104      	bne.n	801b5a8 <__swbuf_r+0x6c>
 801b59e:	4621      	mov	r1, r4
 801b5a0:	4628      	mov	r0, r5
 801b5a2:	f7ff f897 	bl	801a6d4 <_fflush_r>
 801b5a6:	b988      	cbnz	r0, 801b5cc <__swbuf_r+0x90>
 801b5a8:	4638      	mov	r0, r7
 801b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b5ac:	4b0a      	ldr	r3, [pc, #40]	; (801b5d8 <__swbuf_r+0x9c>)
 801b5ae:	429c      	cmp	r4, r3
 801b5b0:	d101      	bne.n	801b5b6 <__swbuf_r+0x7a>
 801b5b2:	68ac      	ldr	r4, [r5, #8]
 801b5b4:	e7cf      	b.n	801b556 <__swbuf_r+0x1a>
 801b5b6:	4b09      	ldr	r3, [pc, #36]	; (801b5dc <__swbuf_r+0xa0>)
 801b5b8:	429c      	cmp	r4, r3
 801b5ba:	bf08      	it	eq
 801b5bc:	68ec      	ldreq	r4, [r5, #12]
 801b5be:	e7ca      	b.n	801b556 <__swbuf_r+0x1a>
 801b5c0:	4621      	mov	r1, r4
 801b5c2:	4628      	mov	r0, r5
 801b5c4:	f000 f81a 	bl	801b5fc <__swsetup_r>
 801b5c8:	2800      	cmp	r0, #0
 801b5ca:	d0cb      	beq.n	801b564 <__swbuf_r+0x28>
 801b5cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b5d0:	e7ea      	b.n	801b5a8 <__swbuf_r+0x6c>
 801b5d2:	bf00      	nop
 801b5d4:	08020aac 	.word	0x08020aac
 801b5d8:	08020acc 	.word	0x08020acc
 801b5dc:	08020a8c 	.word	0x08020a8c

0801b5e0 <__ascii_wctomb>:
 801b5e0:	b149      	cbz	r1, 801b5f6 <__ascii_wctomb+0x16>
 801b5e2:	2aff      	cmp	r2, #255	; 0xff
 801b5e4:	bf85      	ittet	hi
 801b5e6:	238a      	movhi	r3, #138	; 0x8a
 801b5e8:	6003      	strhi	r3, [r0, #0]
 801b5ea:	700a      	strbls	r2, [r1, #0]
 801b5ec:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801b5f0:	bf98      	it	ls
 801b5f2:	2001      	movls	r0, #1
 801b5f4:	4770      	bx	lr
 801b5f6:	4608      	mov	r0, r1
 801b5f8:	4770      	bx	lr
	...

0801b5fc <__swsetup_r>:
 801b5fc:	4b32      	ldr	r3, [pc, #200]	; (801b6c8 <__swsetup_r+0xcc>)
 801b5fe:	b570      	push	{r4, r5, r6, lr}
 801b600:	681d      	ldr	r5, [r3, #0]
 801b602:	4606      	mov	r6, r0
 801b604:	460c      	mov	r4, r1
 801b606:	b125      	cbz	r5, 801b612 <__swsetup_r+0x16>
 801b608:	69ab      	ldr	r3, [r5, #24]
 801b60a:	b913      	cbnz	r3, 801b612 <__swsetup_r+0x16>
 801b60c:	4628      	mov	r0, r5
 801b60e:	f7fd f9ef 	bl	80189f0 <__sinit>
 801b612:	4b2e      	ldr	r3, [pc, #184]	; (801b6cc <__swsetup_r+0xd0>)
 801b614:	429c      	cmp	r4, r3
 801b616:	d10f      	bne.n	801b638 <__swsetup_r+0x3c>
 801b618:	686c      	ldr	r4, [r5, #4]
 801b61a:	89a3      	ldrh	r3, [r4, #12]
 801b61c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b620:	0719      	lsls	r1, r3, #28
 801b622:	d42c      	bmi.n	801b67e <__swsetup_r+0x82>
 801b624:	06dd      	lsls	r5, r3, #27
 801b626:	d411      	bmi.n	801b64c <__swsetup_r+0x50>
 801b628:	2309      	movs	r3, #9
 801b62a:	6033      	str	r3, [r6, #0]
 801b62c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b630:	81a3      	strh	r3, [r4, #12]
 801b632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b636:	e03e      	b.n	801b6b6 <__swsetup_r+0xba>
 801b638:	4b25      	ldr	r3, [pc, #148]	; (801b6d0 <__swsetup_r+0xd4>)
 801b63a:	429c      	cmp	r4, r3
 801b63c:	d101      	bne.n	801b642 <__swsetup_r+0x46>
 801b63e:	68ac      	ldr	r4, [r5, #8]
 801b640:	e7eb      	b.n	801b61a <__swsetup_r+0x1e>
 801b642:	4b24      	ldr	r3, [pc, #144]	; (801b6d4 <__swsetup_r+0xd8>)
 801b644:	429c      	cmp	r4, r3
 801b646:	bf08      	it	eq
 801b648:	68ec      	ldreq	r4, [r5, #12]
 801b64a:	e7e6      	b.n	801b61a <__swsetup_r+0x1e>
 801b64c:	0758      	lsls	r0, r3, #29
 801b64e:	d512      	bpl.n	801b676 <__swsetup_r+0x7a>
 801b650:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b652:	b141      	cbz	r1, 801b666 <__swsetup_r+0x6a>
 801b654:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b658:	4299      	cmp	r1, r3
 801b65a:	d002      	beq.n	801b662 <__swsetup_r+0x66>
 801b65c:	4630      	mov	r0, r6
 801b65e:	f7fd facd 	bl	8018bfc <_free_r>
 801b662:	2300      	movs	r3, #0
 801b664:	6363      	str	r3, [r4, #52]	; 0x34
 801b666:	89a3      	ldrh	r3, [r4, #12]
 801b668:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b66c:	81a3      	strh	r3, [r4, #12]
 801b66e:	2300      	movs	r3, #0
 801b670:	6063      	str	r3, [r4, #4]
 801b672:	6923      	ldr	r3, [r4, #16]
 801b674:	6023      	str	r3, [r4, #0]
 801b676:	89a3      	ldrh	r3, [r4, #12]
 801b678:	f043 0308 	orr.w	r3, r3, #8
 801b67c:	81a3      	strh	r3, [r4, #12]
 801b67e:	6923      	ldr	r3, [r4, #16]
 801b680:	b94b      	cbnz	r3, 801b696 <__swsetup_r+0x9a>
 801b682:	89a3      	ldrh	r3, [r4, #12]
 801b684:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b688:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b68c:	d003      	beq.n	801b696 <__swsetup_r+0x9a>
 801b68e:	4621      	mov	r1, r4
 801b690:	4630      	mov	r0, r6
 801b692:	f000 f84d 	bl	801b730 <__smakebuf_r>
 801b696:	89a0      	ldrh	r0, [r4, #12]
 801b698:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b69c:	f010 0301 	ands.w	r3, r0, #1
 801b6a0:	d00a      	beq.n	801b6b8 <__swsetup_r+0xbc>
 801b6a2:	2300      	movs	r3, #0
 801b6a4:	60a3      	str	r3, [r4, #8]
 801b6a6:	6963      	ldr	r3, [r4, #20]
 801b6a8:	425b      	negs	r3, r3
 801b6aa:	61a3      	str	r3, [r4, #24]
 801b6ac:	6923      	ldr	r3, [r4, #16]
 801b6ae:	b943      	cbnz	r3, 801b6c2 <__swsetup_r+0xc6>
 801b6b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b6b4:	d1ba      	bne.n	801b62c <__swsetup_r+0x30>
 801b6b6:	bd70      	pop	{r4, r5, r6, pc}
 801b6b8:	0781      	lsls	r1, r0, #30
 801b6ba:	bf58      	it	pl
 801b6bc:	6963      	ldrpl	r3, [r4, #20]
 801b6be:	60a3      	str	r3, [r4, #8]
 801b6c0:	e7f4      	b.n	801b6ac <__swsetup_r+0xb0>
 801b6c2:	2000      	movs	r0, #0
 801b6c4:	e7f7      	b.n	801b6b6 <__swsetup_r+0xba>
 801b6c6:	bf00      	nop
 801b6c8:	2000025c 	.word	0x2000025c
 801b6cc:	08020aac 	.word	0x08020aac
 801b6d0:	08020acc 	.word	0x08020acc
 801b6d4:	08020a8c 	.word	0x08020a8c

0801b6d8 <abort>:
 801b6d8:	b508      	push	{r3, lr}
 801b6da:	2006      	movs	r0, #6
 801b6dc:	f000 f898 	bl	801b810 <raise>
 801b6e0:	2001      	movs	r0, #1
 801b6e2:	f7e9 fe01 	bl	80052e8 <_exit>

0801b6e6 <__swhatbuf_r>:
 801b6e6:	b570      	push	{r4, r5, r6, lr}
 801b6e8:	460e      	mov	r6, r1
 801b6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b6ee:	2900      	cmp	r1, #0
 801b6f0:	b096      	sub	sp, #88	; 0x58
 801b6f2:	4614      	mov	r4, r2
 801b6f4:	461d      	mov	r5, r3
 801b6f6:	da07      	bge.n	801b708 <__swhatbuf_r+0x22>
 801b6f8:	2300      	movs	r3, #0
 801b6fa:	602b      	str	r3, [r5, #0]
 801b6fc:	89b3      	ldrh	r3, [r6, #12]
 801b6fe:	061a      	lsls	r2, r3, #24
 801b700:	d410      	bmi.n	801b724 <__swhatbuf_r+0x3e>
 801b702:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b706:	e00e      	b.n	801b726 <__swhatbuf_r+0x40>
 801b708:	466a      	mov	r2, sp
 801b70a:	f000 f89d 	bl	801b848 <_fstat_r>
 801b70e:	2800      	cmp	r0, #0
 801b710:	dbf2      	blt.n	801b6f8 <__swhatbuf_r+0x12>
 801b712:	9a01      	ldr	r2, [sp, #4]
 801b714:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b718:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b71c:	425a      	negs	r2, r3
 801b71e:	415a      	adcs	r2, r3
 801b720:	602a      	str	r2, [r5, #0]
 801b722:	e7ee      	b.n	801b702 <__swhatbuf_r+0x1c>
 801b724:	2340      	movs	r3, #64	; 0x40
 801b726:	2000      	movs	r0, #0
 801b728:	6023      	str	r3, [r4, #0]
 801b72a:	b016      	add	sp, #88	; 0x58
 801b72c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b730 <__smakebuf_r>:
 801b730:	898b      	ldrh	r3, [r1, #12]
 801b732:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b734:	079d      	lsls	r5, r3, #30
 801b736:	4606      	mov	r6, r0
 801b738:	460c      	mov	r4, r1
 801b73a:	d507      	bpl.n	801b74c <__smakebuf_r+0x1c>
 801b73c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b740:	6023      	str	r3, [r4, #0]
 801b742:	6123      	str	r3, [r4, #16]
 801b744:	2301      	movs	r3, #1
 801b746:	6163      	str	r3, [r4, #20]
 801b748:	b002      	add	sp, #8
 801b74a:	bd70      	pop	{r4, r5, r6, pc}
 801b74c:	ab01      	add	r3, sp, #4
 801b74e:	466a      	mov	r2, sp
 801b750:	f7ff ffc9 	bl	801b6e6 <__swhatbuf_r>
 801b754:	9900      	ldr	r1, [sp, #0]
 801b756:	4605      	mov	r5, r0
 801b758:	4630      	mov	r0, r6
 801b75a:	f7fd fa9f 	bl	8018c9c <_malloc_r>
 801b75e:	b948      	cbnz	r0, 801b774 <__smakebuf_r+0x44>
 801b760:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b764:	059a      	lsls	r2, r3, #22
 801b766:	d4ef      	bmi.n	801b748 <__smakebuf_r+0x18>
 801b768:	f023 0303 	bic.w	r3, r3, #3
 801b76c:	f043 0302 	orr.w	r3, r3, #2
 801b770:	81a3      	strh	r3, [r4, #12]
 801b772:	e7e3      	b.n	801b73c <__smakebuf_r+0xc>
 801b774:	4b0d      	ldr	r3, [pc, #52]	; (801b7ac <__smakebuf_r+0x7c>)
 801b776:	62b3      	str	r3, [r6, #40]	; 0x28
 801b778:	89a3      	ldrh	r3, [r4, #12]
 801b77a:	6020      	str	r0, [r4, #0]
 801b77c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b780:	81a3      	strh	r3, [r4, #12]
 801b782:	9b00      	ldr	r3, [sp, #0]
 801b784:	6163      	str	r3, [r4, #20]
 801b786:	9b01      	ldr	r3, [sp, #4]
 801b788:	6120      	str	r0, [r4, #16]
 801b78a:	b15b      	cbz	r3, 801b7a4 <__smakebuf_r+0x74>
 801b78c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b790:	4630      	mov	r0, r6
 801b792:	f000 f86b 	bl	801b86c <_isatty_r>
 801b796:	b128      	cbz	r0, 801b7a4 <__smakebuf_r+0x74>
 801b798:	89a3      	ldrh	r3, [r4, #12]
 801b79a:	f023 0303 	bic.w	r3, r3, #3
 801b79e:	f043 0301 	orr.w	r3, r3, #1
 801b7a2:	81a3      	strh	r3, [r4, #12]
 801b7a4:	89a0      	ldrh	r0, [r4, #12]
 801b7a6:	4305      	orrs	r5, r0
 801b7a8:	81a5      	strh	r5, [r4, #12]
 801b7aa:	e7cd      	b.n	801b748 <__smakebuf_r+0x18>
 801b7ac:	08018989 	.word	0x08018989

0801b7b0 <_malloc_usable_size_r>:
 801b7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7b4:	1f18      	subs	r0, r3, #4
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	bfbc      	itt	lt
 801b7ba:	580b      	ldrlt	r3, [r1, r0]
 801b7bc:	18c0      	addlt	r0, r0, r3
 801b7be:	4770      	bx	lr

0801b7c0 <_raise_r>:
 801b7c0:	291f      	cmp	r1, #31
 801b7c2:	b538      	push	{r3, r4, r5, lr}
 801b7c4:	4604      	mov	r4, r0
 801b7c6:	460d      	mov	r5, r1
 801b7c8:	d904      	bls.n	801b7d4 <_raise_r+0x14>
 801b7ca:	2316      	movs	r3, #22
 801b7cc:	6003      	str	r3, [r0, #0]
 801b7ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b7d2:	bd38      	pop	{r3, r4, r5, pc}
 801b7d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b7d6:	b112      	cbz	r2, 801b7de <_raise_r+0x1e>
 801b7d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b7dc:	b94b      	cbnz	r3, 801b7f2 <_raise_r+0x32>
 801b7de:	4620      	mov	r0, r4
 801b7e0:	f000 f830 	bl	801b844 <_getpid_r>
 801b7e4:	462a      	mov	r2, r5
 801b7e6:	4601      	mov	r1, r0
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7ee:	f000 b817 	b.w	801b820 <_kill_r>
 801b7f2:	2b01      	cmp	r3, #1
 801b7f4:	d00a      	beq.n	801b80c <_raise_r+0x4c>
 801b7f6:	1c59      	adds	r1, r3, #1
 801b7f8:	d103      	bne.n	801b802 <_raise_r+0x42>
 801b7fa:	2316      	movs	r3, #22
 801b7fc:	6003      	str	r3, [r0, #0]
 801b7fe:	2001      	movs	r0, #1
 801b800:	e7e7      	b.n	801b7d2 <_raise_r+0x12>
 801b802:	2400      	movs	r4, #0
 801b804:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b808:	4628      	mov	r0, r5
 801b80a:	4798      	blx	r3
 801b80c:	2000      	movs	r0, #0
 801b80e:	e7e0      	b.n	801b7d2 <_raise_r+0x12>

0801b810 <raise>:
 801b810:	4b02      	ldr	r3, [pc, #8]	; (801b81c <raise+0xc>)
 801b812:	4601      	mov	r1, r0
 801b814:	6818      	ldr	r0, [r3, #0]
 801b816:	f7ff bfd3 	b.w	801b7c0 <_raise_r>
 801b81a:	bf00      	nop
 801b81c:	2000025c 	.word	0x2000025c

0801b820 <_kill_r>:
 801b820:	b538      	push	{r3, r4, r5, lr}
 801b822:	4d07      	ldr	r5, [pc, #28]	; (801b840 <_kill_r+0x20>)
 801b824:	2300      	movs	r3, #0
 801b826:	4604      	mov	r4, r0
 801b828:	4608      	mov	r0, r1
 801b82a:	4611      	mov	r1, r2
 801b82c:	602b      	str	r3, [r5, #0]
 801b82e:	f7e9 fd4b 	bl	80052c8 <_kill>
 801b832:	1c43      	adds	r3, r0, #1
 801b834:	d102      	bne.n	801b83c <_kill_r+0x1c>
 801b836:	682b      	ldr	r3, [r5, #0]
 801b838:	b103      	cbz	r3, 801b83c <_kill_r+0x1c>
 801b83a:	6023      	str	r3, [r4, #0]
 801b83c:	bd38      	pop	{r3, r4, r5, pc}
 801b83e:	bf00      	nop
 801b840:	20015404 	.word	0x20015404

0801b844 <_getpid_r>:
 801b844:	f7e9 bd38 	b.w	80052b8 <_getpid>

0801b848 <_fstat_r>:
 801b848:	b538      	push	{r3, r4, r5, lr}
 801b84a:	4d07      	ldr	r5, [pc, #28]	; (801b868 <_fstat_r+0x20>)
 801b84c:	2300      	movs	r3, #0
 801b84e:	4604      	mov	r4, r0
 801b850:	4608      	mov	r0, r1
 801b852:	4611      	mov	r1, r2
 801b854:	602b      	str	r3, [r5, #0]
 801b856:	f7e9 fd96 	bl	8005386 <_fstat>
 801b85a:	1c43      	adds	r3, r0, #1
 801b85c:	d102      	bne.n	801b864 <_fstat_r+0x1c>
 801b85e:	682b      	ldr	r3, [r5, #0]
 801b860:	b103      	cbz	r3, 801b864 <_fstat_r+0x1c>
 801b862:	6023      	str	r3, [r4, #0]
 801b864:	bd38      	pop	{r3, r4, r5, pc}
 801b866:	bf00      	nop
 801b868:	20015404 	.word	0x20015404

0801b86c <_isatty_r>:
 801b86c:	b538      	push	{r3, r4, r5, lr}
 801b86e:	4d06      	ldr	r5, [pc, #24]	; (801b888 <_isatty_r+0x1c>)
 801b870:	2300      	movs	r3, #0
 801b872:	4604      	mov	r4, r0
 801b874:	4608      	mov	r0, r1
 801b876:	602b      	str	r3, [r5, #0]
 801b878:	f7e9 fd95 	bl	80053a6 <_isatty>
 801b87c:	1c43      	adds	r3, r0, #1
 801b87e:	d102      	bne.n	801b886 <_isatty_r+0x1a>
 801b880:	682b      	ldr	r3, [r5, #0]
 801b882:	b103      	cbz	r3, 801b886 <_isatty_r+0x1a>
 801b884:	6023      	str	r3, [r4, #0]
 801b886:	bd38      	pop	{r3, r4, r5, pc}
 801b888:	20015404 	.word	0x20015404
 801b88c:	00000000 	.word	0x00000000

0801b890 <atan>:
 801b890:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b894:	ec55 4b10 	vmov	r4, r5, d0
 801b898:	4bc3      	ldr	r3, [pc, #780]	; (801bba8 <atan+0x318>)
 801b89a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b89e:	429e      	cmp	r6, r3
 801b8a0:	46ab      	mov	fp, r5
 801b8a2:	dd18      	ble.n	801b8d6 <atan+0x46>
 801b8a4:	4bc1      	ldr	r3, [pc, #772]	; (801bbac <atan+0x31c>)
 801b8a6:	429e      	cmp	r6, r3
 801b8a8:	dc01      	bgt.n	801b8ae <atan+0x1e>
 801b8aa:	d109      	bne.n	801b8c0 <atan+0x30>
 801b8ac:	b144      	cbz	r4, 801b8c0 <atan+0x30>
 801b8ae:	4622      	mov	r2, r4
 801b8b0:	462b      	mov	r3, r5
 801b8b2:	4620      	mov	r0, r4
 801b8b4:	4629      	mov	r1, r5
 801b8b6:	f7e4 fce9 	bl	800028c <__adddf3>
 801b8ba:	4604      	mov	r4, r0
 801b8bc:	460d      	mov	r5, r1
 801b8be:	e006      	b.n	801b8ce <atan+0x3e>
 801b8c0:	f1bb 0f00 	cmp.w	fp, #0
 801b8c4:	f300 8131 	bgt.w	801bb2a <atan+0x29a>
 801b8c8:	a59b      	add	r5, pc, #620	; (adr r5, 801bb38 <atan+0x2a8>)
 801b8ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b8ce:	ec45 4b10 	vmov	d0, r4, r5
 801b8d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8d6:	4bb6      	ldr	r3, [pc, #728]	; (801bbb0 <atan+0x320>)
 801b8d8:	429e      	cmp	r6, r3
 801b8da:	dc14      	bgt.n	801b906 <atan+0x76>
 801b8dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b8e0:	429e      	cmp	r6, r3
 801b8e2:	dc0d      	bgt.n	801b900 <atan+0x70>
 801b8e4:	a396      	add	r3, pc, #600	; (adr r3, 801bb40 <atan+0x2b0>)
 801b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ea:	ee10 0a10 	vmov	r0, s0
 801b8ee:	4629      	mov	r1, r5
 801b8f0:	f7e4 fccc 	bl	800028c <__adddf3>
 801b8f4:	4baf      	ldr	r3, [pc, #700]	; (801bbb4 <atan+0x324>)
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	f7e5 f90e 	bl	8000b18 <__aeabi_dcmpgt>
 801b8fc:	2800      	cmp	r0, #0
 801b8fe:	d1e6      	bne.n	801b8ce <atan+0x3e>
 801b900:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801b904:	e02b      	b.n	801b95e <atan+0xce>
 801b906:	f000 f963 	bl	801bbd0 <fabs>
 801b90a:	4bab      	ldr	r3, [pc, #684]	; (801bbb8 <atan+0x328>)
 801b90c:	429e      	cmp	r6, r3
 801b90e:	ec55 4b10 	vmov	r4, r5, d0
 801b912:	f300 80bf 	bgt.w	801ba94 <atan+0x204>
 801b916:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b91a:	429e      	cmp	r6, r3
 801b91c:	f300 80a0 	bgt.w	801ba60 <atan+0x1d0>
 801b920:	ee10 2a10 	vmov	r2, s0
 801b924:	ee10 0a10 	vmov	r0, s0
 801b928:	462b      	mov	r3, r5
 801b92a:	4629      	mov	r1, r5
 801b92c:	f7e4 fcae 	bl	800028c <__adddf3>
 801b930:	4ba0      	ldr	r3, [pc, #640]	; (801bbb4 <atan+0x324>)
 801b932:	2200      	movs	r2, #0
 801b934:	f7e4 fca8 	bl	8000288 <__aeabi_dsub>
 801b938:	2200      	movs	r2, #0
 801b93a:	4606      	mov	r6, r0
 801b93c:	460f      	mov	r7, r1
 801b93e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b942:	4620      	mov	r0, r4
 801b944:	4629      	mov	r1, r5
 801b946:	f7e4 fca1 	bl	800028c <__adddf3>
 801b94a:	4602      	mov	r2, r0
 801b94c:	460b      	mov	r3, r1
 801b94e:	4630      	mov	r0, r6
 801b950:	4639      	mov	r1, r7
 801b952:	f7e4 ff7b 	bl	800084c <__aeabi_ddiv>
 801b956:	f04f 0a00 	mov.w	sl, #0
 801b95a:	4604      	mov	r4, r0
 801b95c:	460d      	mov	r5, r1
 801b95e:	4622      	mov	r2, r4
 801b960:	462b      	mov	r3, r5
 801b962:	4620      	mov	r0, r4
 801b964:	4629      	mov	r1, r5
 801b966:	f7e4 fe47 	bl	80005f8 <__aeabi_dmul>
 801b96a:	4602      	mov	r2, r0
 801b96c:	460b      	mov	r3, r1
 801b96e:	4680      	mov	r8, r0
 801b970:	4689      	mov	r9, r1
 801b972:	f7e4 fe41 	bl	80005f8 <__aeabi_dmul>
 801b976:	a374      	add	r3, pc, #464	; (adr r3, 801bb48 <atan+0x2b8>)
 801b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b97c:	4606      	mov	r6, r0
 801b97e:	460f      	mov	r7, r1
 801b980:	f7e4 fe3a 	bl	80005f8 <__aeabi_dmul>
 801b984:	a372      	add	r3, pc, #456	; (adr r3, 801bb50 <atan+0x2c0>)
 801b986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b98a:	f7e4 fc7f 	bl	800028c <__adddf3>
 801b98e:	4632      	mov	r2, r6
 801b990:	463b      	mov	r3, r7
 801b992:	f7e4 fe31 	bl	80005f8 <__aeabi_dmul>
 801b996:	a370      	add	r3, pc, #448	; (adr r3, 801bb58 <atan+0x2c8>)
 801b998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b99c:	f7e4 fc76 	bl	800028c <__adddf3>
 801b9a0:	4632      	mov	r2, r6
 801b9a2:	463b      	mov	r3, r7
 801b9a4:	f7e4 fe28 	bl	80005f8 <__aeabi_dmul>
 801b9a8:	a36d      	add	r3, pc, #436	; (adr r3, 801bb60 <atan+0x2d0>)
 801b9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9ae:	f7e4 fc6d 	bl	800028c <__adddf3>
 801b9b2:	4632      	mov	r2, r6
 801b9b4:	463b      	mov	r3, r7
 801b9b6:	f7e4 fe1f 	bl	80005f8 <__aeabi_dmul>
 801b9ba:	a36b      	add	r3, pc, #428	; (adr r3, 801bb68 <atan+0x2d8>)
 801b9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9c0:	f7e4 fc64 	bl	800028c <__adddf3>
 801b9c4:	4632      	mov	r2, r6
 801b9c6:	463b      	mov	r3, r7
 801b9c8:	f7e4 fe16 	bl	80005f8 <__aeabi_dmul>
 801b9cc:	a368      	add	r3, pc, #416	; (adr r3, 801bb70 <atan+0x2e0>)
 801b9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9d2:	f7e4 fc5b 	bl	800028c <__adddf3>
 801b9d6:	4642      	mov	r2, r8
 801b9d8:	464b      	mov	r3, r9
 801b9da:	f7e4 fe0d 	bl	80005f8 <__aeabi_dmul>
 801b9de:	a366      	add	r3, pc, #408	; (adr r3, 801bb78 <atan+0x2e8>)
 801b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9e4:	4680      	mov	r8, r0
 801b9e6:	4689      	mov	r9, r1
 801b9e8:	4630      	mov	r0, r6
 801b9ea:	4639      	mov	r1, r7
 801b9ec:	f7e4 fe04 	bl	80005f8 <__aeabi_dmul>
 801b9f0:	a363      	add	r3, pc, #396	; (adr r3, 801bb80 <atan+0x2f0>)
 801b9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9f6:	f7e4 fc47 	bl	8000288 <__aeabi_dsub>
 801b9fa:	4632      	mov	r2, r6
 801b9fc:	463b      	mov	r3, r7
 801b9fe:	f7e4 fdfb 	bl	80005f8 <__aeabi_dmul>
 801ba02:	a361      	add	r3, pc, #388	; (adr r3, 801bb88 <atan+0x2f8>)
 801ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba08:	f7e4 fc3e 	bl	8000288 <__aeabi_dsub>
 801ba0c:	4632      	mov	r2, r6
 801ba0e:	463b      	mov	r3, r7
 801ba10:	f7e4 fdf2 	bl	80005f8 <__aeabi_dmul>
 801ba14:	a35e      	add	r3, pc, #376	; (adr r3, 801bb90 <atan+0x300>)
 801ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1a:	f7e4 fc35 	bl	8000288 <__aeabi_dsub>
 801ba1e:	4632      	mov	r2, r6
 801ba20:	463b      	mov	r3, r7
 801ba22:	f7e4 fde9 	bl	80005f8 <__aeabi_dmul>
 801ba26:	a35c      	add	r3, pc, #368	; (adr r3, 801bb98 <atan+0x308>)
 801ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba2c:	f7e4 fc2c 	bl	8000288 <__aeabi_dsub>
 801ba30:	4632      	mov	r2, r6
 801ba32:	463b      	mov	r3, r7
 801ba34:	f7e4 fde0 	bl	80005f8 <__aeabi_dmul>
 801ba38:	4602      	mov	r2, r0
 801ba3a:	460b      	mov	r3, r1
 801ba3c:	4640      	mov	r0, r8
 801ba3e:	4649      	mov	r1, r9
 801ba40:	f7e4 fc24 	bl	800028c <__adddf3>
 801ba44:	4622      	mov	r2, r4
 801ba46:	462b      	mov	r3, r5
 801ba48:	f7e4 fdd6 	bl	80005f8 <__aeabi_dmul>
 801ba4c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 801ba50:	4602      	mov	r2, r0
 801ba52:	460b      	mov	r3, r1
 801ba54:	d14b      	bne.n	801baee <atan+0x25e>
 801ba56:	4620      	mov	r0, r4
 801ba58:	4629      	mov	r1, r5
 801ba5a:	f7e4 fc15 	bl	8000288 <__aeabi_dsub>
 801ba5e:	e72c      	b.n	801b8ba <atan+0x2a>
 801ba60:	ee10 0a10 	vmov	r0, s0
 801ba64:	4b53      	ldr	r3, [pc, #332]	; (801bbb4 <atan+0x324>)
 801ba66:	2200      	movs	r2, #0
 801ba68:	4629      	mov	r1, r5
 801ba6a:	f7e4 fc0d 	bl	8000288 <__aeabi_dsub>
 801ba6e:	4b51      	ldr	r3, [pc, #324]	; (801bbb4 <atan+0x324>)
 801ba70:	4606      	mov	r6, r0
 801ba72:	460f      	mov	r7, r1
 801ba74:	2200      	movs	r2, #0
 801ba76:	4620      	mov	r0, r4
 801ba78:	4629      	mov	r1, r5
 801ba7a:	f7e4 fc07 	bl	800028c <__adddf3>
 801ba7e:	4602      	mov	r2, r0
 801ba80:	460b      	mov	r3, r1
 801ba82:	4630      	mov	r0, r6
 801ba84:	4639      	mov	r1, r7
 801ba86:	f7e4 fee1 	bl	800084c <__aeabi_ddiv>
 801ba8a:	f04f 0a01 	mov.w	sl, #1
 801ba8e:	4604      	mov	r4, r0
 801ba90:	460d      	mov	r5, r1
 801ba92:	e764      	b.n	801b95e <atan+0xce>
 801ba94:	4b49      	ldr	r3, [pc, #292]	; (801bbbc <atan+0x32c>)
 801ba96:	429e      	cmp	r6, r3
 801ba98:	da1d      	bge.n	801bad6 <atan+0x246>
 801ba9a:	ee10 0a10 	vmov	r0, s0
 801ba9e:	4b48      	ldr	r3, [pc, #288]	; (801bbc0 <atan+0x330>)
 801baa0:	2200      	movs	r2, #0
 801baa2:	4629      	mov	r1, r5
 801baa4:	f7e4 fbf0 	bl	8000288 <__aeabi_dsub>
 801baa8:	4b45      	ldr	r3, [pc, #276]	; (801bbc0 <atan+0x330>)
 801baaa:	4606      	mov	r6, r0
 801baac:	460f      	mov	r7, r1
 801baae:	2200      	movs	r2, #0
 801bab0:	4620      	mov	r0, r4
 801bab2:	4629      	mov	r1, r5
 801bab4:	f7e4 fda0 	bl	80005f8 <__aeabi_dmul>
 801bab8:	4b3e      	ldr	r3, [pc, #248]	; (801bbb4 <atan+0x324>)
 801baba:	2200      	movs	r2, #0
 801babc:	f7e4 fbe6 	bl	800028c <__adddf3>
 801bac0:	4602      	mov	r2, r0
 801bac2:	460b      	mov	r3, r1
 801bac4:	4630      	mov	r0, r6
 801bac6:	4639      	mov	r1, r7
 801bac8:	f7e4 fec0 	bl	800084c <__aeabi_ddiv>
 801bacc:	f04f 0a02 	mov.w	sl, #2
 801bad0:	4604      	mov	r4, r0
 801bad2:	460d      	mov	r5, r1
 801bad4:	e743      	b.n	801b95e <atan+0xce>
 801bad6:	462b      	mov	r3, r5
 801bad8:	ee10 2a10 	vmov	r2, s0
 801badc:	4939      	ldr	r1, [pc, #228]	; (801bbc4 <atan+0x334>)
 801bade:	2000      	movs	r0, #0
 801bae0:	f7e4 feb4 	bl	800084c <__aeabi_ddiv>
 801bae4:	f04f 0a03 	mov.w	sl, #3
 801bae8:	4604      	mov	r4, r0
 801baea:	460d      	mov	r5, r1
 801baec:	e737      	b.n	801b95e <atan+0xce>
 801baee:	4b36      	ldr	r3, [pc, #216]	; (801bbc8 <atan+0x338>)
 801baf0:	4e36      	ldr	r6, [pc, #216]	; (801bbcc <atan+0x33c>)
 801baf2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801baf6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801bafa:	e9da 2300 	ldrd	r2, r3, [sl]
 801bafe:	f7e4 fbc3 	bl	8000288 <__aeabi_dsub>
 801bb02:	4622      	mov	r2, r4
 801bb04:	462b      	mov	r3, r5
 801bb06:	f7e4 fbbf 	bl	8000288 <__aeabi_dsub>
 801bb0a:	4602      	mov	r2, r0
 801bb0c:	460b      	mov	r3, r1
 801bb0e:	e9d6 0100 	ldrd	r0, r1, [r6]
 801bb12:	f7e4 fbb9 	bl	8000288 <__aeabi_dsub>
 801bb16:	f1bb 0f00 	cmp.w	fp, #0
 801bb1a:	4604      	mov	r4, r0
 801bb1c:	460d      	mov	r5, r1
 801bb1e:	f6bf aed6 	bge.w	801b8ce <atan+0x3e>
 801bb22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bb26:	461d      	mov	r5, r3
 801bb28:	e6d1      	b.n	801b8ce <atan+0x3e>
 801bb2a:	a51d      	add	r5, pc, #116	; (adr r5, 801bba0 <atan+0x310>)
 801bb2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bb30:	e6cd      	b.n	801b8ce <atan+0x3e>
 801bb32:	bf00      	nop
 801bb34:	f3af 8000 	nop.w
 801bb38:	54442d18 	.word	0x54442d18
 801bb3c:	bff921fb 	.word	0xbff921fb
 801bb40:	8800759c 	.word	0x8800759c
 801bb44:	7e37e43c 	.word	0x7e37e43c
 801bb48:	e322da11 	.word	0xe322da11
 801bb4c:	3f90ad3a 	.word	0x3f90ad3a
 801bb50:	24760deb 	.word	0x24760deb
 801bb54:	3fa97b4b 	.word	0x3fa97b4b
 801bb58:	a0d03d51 	.word	0xa0d03d51
 801bb5c:	3fb10d66 	.word	0x3fb10d66
 801bb60:	c54c206e 	.word	0xc54c206e
 801bb64:	3fb745cd 	.word	0x3fb745cd
 801bb68:	920083ff 	.word	0x920083ff
 801bb6c:	3fc24924 	.word	0x3fc24924
 801bb70:	5555550d 	.word	0x5555550d
 801bb74:	3fd55555 	.word	0x3fd55555
 801bb78:	2c6a6c2f 	.word	0x2c6a6c2f
 801bb7c:	bfa2b444 	.word	0xbfa2b444
 801bb80:	52defd9a 	.word	0x52defd9a
 801bb84:	3fadde2d 	.word	0x3fadde2d
 801bb88:	af749a6d 	.word	0xaf749a6d
 801bb8c:	3fb3b0f2 	.word	0x3fb3b0f2
 801bb90:	fe231671 	.word	0xfe231671
 801bb94:	3fbc71c6 	.word	0x3fbc71c6
 801bb98:	9998ebc4 	.word	0x9998ebc4
 801bb9c:	3fc99999 	.word	0x3fc99999
 801bba0:	54442d18 	.word	0x54442d18
 801bba4:	3ff921fb 	.word	0x3ff921fb
 801bba8:	440fffff 	.word	0x440fffff
 801bbac:	7ff00000 	.word	0x7ff00000
 801bbb0:	3fdbffff 	.word	0x3fdbffff
 801bbb4:	3ff00000 	.word	0x3ff00000
 801bbb8:	3ff2ffff 	.word	0x3ff2ffff
 801bbbc:	40038000 	.word	0x40038000
 801bbc0:	3ff80000 	.word	0x3ff80000
 801bbc4:	bff00000 	.word	0xbff00000
 801bbc8:	08020eb8 	.word	0x08020eb8
 801bbcc:	08020e98 	.word	0x08020e98

0801bbd0 <fabs>:
 801bbd0:	ec51 0b10 	vmov	r0, r1, d0
 801bbd4:	ee10 2a10 	vmov	r2, s0
 801bbd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bbdc:	ec43 2b10 	vmov	d0, r2, r3
 801bbe0:	4770      	bx	lr

0801bbe2 <atan2>:
 801bbe2:	f000 b835 	b.w	801bc50 <__ieee754_atan2>
	...

0801bbe8 <sqrt>:
 801bbe8:	b538      	push	{r3, r4, r5, lr}
 801bbea:	ed2d 8b02 	vpush	{d8}
 801bbee:	ec55 4b10 	vmov	r4, r5, d0
 801bbf2:	f000 f8f7 	bl	801bde4 <__ieee754_sqrt>
 801bbf6:	4b15      	ldr	r3, [pc, #84]	; (801bc4c <sqrt+0x64>)
 801bbf8:	eeb0 8a40 	vmov.f32	s16, s0
 801bbfc:	eef0 8a60 	vmov.f32	s17, s1
 801bc00:	f993 3000 	ldrsb.w	r3, [r3]
 801bc04:	3301      	adds	r3, #1
 801bc06:	d019      	beq.n	801bc3c <sqrt+0x54>
 801bc08:	4622      	mov	r2, r4
 801bc0a:	462b      	mov	r3, r5
 801bc0c:	4620      	mov	r0, r4
 801bc0e:	4629      	mov	r1, r5
 801bc10:	f7e4 ff8c 	bl	8000b2c <__aeabi_dcmpun>
 801bc14:	b990      	cbnz	r0, 801bc3c <sqrt+0x54>
 801bc16:	2200      	movs	r2, #0
 801bc18:	2300      	movs	r3, #0
 801bc1a:	4620      	mov	r0, r4
 801bc1c:	4629      	mov	r1, r5
 801bc1e:	f7e4 ff5d 	bl	8000adc <__aeabi_dcmplt>
 801bc22:	b158      	cbz	r0, 801bc3c <sqrt+0x54>
 801bc24:	f7fc fe86 	bl	8018934 <__errno>
 801bc28:	2321      	movs	r3, #33	; 0x21
 801bc2a:	6003      	str	r3, [r0, #0]
 801bc2c:	2200      	movs	r2, #0
 801bc2e:	2300      	movs	r3, #0
 801bc30:	4610      	mov	r0, r2
 801bc32:	4619      	mov	r1, r3
 801bc34:	f7e4 fe0a 	bl	800084c <__aeabi_ddiv>
 801bc38:	ec41 0b18 	vmov	d8, r0, r1
 801bc3c:	eeb0 0a48 	vmov.f32	s0, s16
 801bc40:	eef0 0a68 	vmov.f32	s1, s17
 801bc44:	ecbd 8b02 	vpop	{d8}
 801bc48:	bd38      	pop	{r3, r4, r5, pc}
 801bc4a:	bf00      	nop
 801bc4c:	2000042c 	.word	0x2000042c

0801bc50 <__ieee754_atan2>:
 801bc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc54:	ec57 6b11 	vmov	r6, r7, d1
 801bc58:	4273      	negs	r3, r6
 801bc5a:	f8df e184 	ldr.w	lr, [pc, #388]	; 801bde0 <__ieee754_atan2+0x190>
 801bc5e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801bc62:	4333      	orrs	r3, r6
 801bc64:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 801bc68:	4573      	cmp	r3, lr
 801bc6a:	ec51 0b10 	vmov	r0, r1, d0
 801bc6e:	ee11 8a10 	vmov	r8, s2
 801bc72:	d80a      	bhi.n	801bc8a <__ieee754_atan2+0x3a>
 801bc74:	4244      	negs	r4, r0
 801bc76:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bc7a:	4304      	orrs	r4, r0
 801bc7c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 801bc80:	4574      	cmp	r4, lr
 801bc82:	ee10 9a10 	vmov	r9, s0
 801bc86:	468c      	mov	ip, r1
 801bc88:	d907      	bls.n	801bc9a <__ieee754_atan2+0x4a>
 801bc8a:	4632      	mov	r2, r6
 801bc8c:	463b      	mov	r3, r7
 801bc8e:	f7e4 fafd 	bl	800028c <__adddf3>
 801bc92:	ec41 0b10 	vmov	d0, r0, r1
 801bc96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc9a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801bc9e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801bca2:	4334      	orrs	r4, r6
 801bca4:	d103      	bne.n	801bcae <__ieee754_atan2+0x5e>
 801bca6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcaa:	f7ff bdf1 	b.w	801b890 <atan>
 801bcae:	17bc      	asrs	r4, r7, #30
 801bcb0:	f004 0402 	and.w	r4, r4, #2
 801bcb4:	ea53 0909 	orrs.w	r9, r3, r9
 801bcb8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801bcbc:	d107      	bne.n	801bcce <__ieee754_atan2+0x7e>
 801bcbe:	2c02      	cmp	r4, #2
 801bcc0:	d060      	beq.n	801bd84 <__ieee754_atan2+0x134>
 801bcc2:	2c03      	cmp	r4, #3
 801bcc4:	d1e5      	bne.n	801bc92 <__ieee754_atan2+0x42>
 801bcc6:	a142      	add	r1, pc, #264	; (adr r1, 801bdd0 <__ieee754_atan2+0x180>)
 801bcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bccc:	e7e1      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bcce:	ea52 0808 	orrs.w	r8, r2, r8
 801bcd2:	d106      	bne.n	801bce2 <__ieee754_atan2+0x92>
 801bcd4:	f1bc 0f00 	cmp.w	ip, #0
 801bcd8:	da5f      	bge.n	801bd9a <__ieee754_atan2+0x14a>
 801bcda:	a13f      	add	r1, pc, #252	; (adr r1, 801bdd8 <__ieee754_atan2+0x188>)
 801bcdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bce0:	e7d7      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bce2:	4572      	cmp	r2, lr
 801bce4:	d10f      	bne.n	801bd06 <__ieee754_atan2+0xb6>
 801bce6:	4293      	cmp	r3, r2
 801bce8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801bcec:	d107      	bne.n	801bcfe <__ieee754_atan2+0xae>
 801bcee:	2c02      	cmp	r4, #2
 801bcf0:	d84c      	bhi.n	801bd8c <__ieee754_atan2+0x13c>
 801bcf2:	4b35      	ldr	r3, [pc, #212]	; (801bdc8 <__ieee754_atan2+0x178>)
 801bcf4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801bcf8:	e9d4 0100 	ldrd	r0, r1, [r4]
 801bcfc:	e7c9      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bcfe:	2c02      	cmp	r4, #2
 801bd00:	d848      	bhi.n	801bd94 <__ieee754_atan2+0x144>
 801bd02:	4b32      	ldr	r3, [pc, #200]	; (801bdcc <__ieee754_atan2+0x17c>)
 801bd04:	e7f6      	b.n	801bcf4 <__ieee754_atan2+0xa4>
 801bd06:	4573      	cmp	r3, lr
 801bd08:	d0e4      	beq.n	801bcd4 <__ieee754_atan2+0x84>
 801bd0a:	1a9b      	subs	r3, r3, r2
 801bd0c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 801bd10:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bd14:	da1e      	bge.n	801bd54 <__ieee754_atan2+0x104>
 801bd16:	2f00      	cmp	r7, #0
 801bd18:	da01      	bge.n	801bd1e <__ieee754_atan2+0xce>
 801bd1a:	323c      	adds	r2, #60	; 0x3c
 801bd1c:	db1e      	blt.n	801bd5c <__ieee754_atan2+0x10c>
 801bd1e:	4632      	mov	r2, r6
 801bd20:	463b      	mov	r3, r7
 801bd22:	f7e4 fd93 	bl	800084c <__aeabi_ddiv>
 801bd26:	ec41 0b10 	vmov	d0, r0, r1
 801bd2a:	f7ff ff51 	bl	801bbd0 <fabs>
 801bd2e:	f7ff fdaf 	bl	801b890 <atan>
 801bd32:	ec51 0b10 	vmov	r0, r1, d0
 801bd36:	2c01      	cmp	r4, #1
 801bd38:	d013      	beq.n	801bd62 <__ieee754_atan2+0x112>
 801bd3a:	2c02      	cmp	r4, #2
 801bd3c:	d015      	beq.n	801bd6a <__ieee754_atan2+0x11a>
 801bd3e:	2c00      	cmp	r4, #0
 801bd40:	d0a7      	beq.n	801bc92 <__ieee754_atan2+0x42>
 801bd42:	a319      	add	r3, pc, #100	; (adr r3, 801bda8 <__ieee754_atan2+0x158>)
 801bd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd48:	f7e4 fa9e 	bl	8000288 <__aeabi_dsub>
 801bd4c:	a318      	add	r3, pc, #96	; (adr r3, 801bdb0 <__ieee754_atan2+0x160>)
 801bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd52:	e014      	b.n	801bd7e <__ieee754_atan2+0x12e>
 801bd54:	a118      	add	r1, pc, #96	; (adr r1, 801bdb8 <__ieee754_atan2+0x168>)
 801bd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd5a:	e7ec      	b.n	801bd36 <__ieee754_atan2+0xe6>
 801bd5c:	2000      	movs	r0, #0
 801bd5e:	2100      	movs	r1, #0
 801bd60:	e7e9      	b.n	801bd36 <__ieee754_atan2+0xe6>
 801bd62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801bd66:	4619      	mov	r1, r3
 801bd68:	e793      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bd6a:	a30f      	add	r3, pc, #60	; (adr r3, 801bda8 <__ieee754_atan2+0x158>)
 801bd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd70:	f7e4 fa8a 	bl	8000288 <__aeabi_dsub>
 801bd74:	4602      	mov	r2, r0
 801bd76:	460b      	mov	r3, r1
 801bd78:	a10d      	add	r1, pc, #52	; (adr r1, 801bdb0 <__ieee754_atan2+0x160>)
 801bd7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd7e:	f7e4 fa83 	bl	8000288 <__aeabi_dsub>
 801bd82:	e786      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bd84:	a10a      	add	r1, pc, #40	; (adr r1, 801bdb0 <__ieee754_atan2+0x160>)
 801bd86:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd8a:	e782      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bd8c:	a10c      	add	r1, pc, #48	; (adr r1, 801bdc0 <__ieee754_atan2+0x170>)
 801bd8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd92:	e77e      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bd94:	2000      	movs	r0, #0
 801bd96:	2100      	movs	r1, #0
 801bd98:	e77b      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bd9a:	a107      	add	r1, pc, #28	; (adr r1, 801bdb8 <__ieee754_atan2+0x168>)
 801bd9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bda0:	e777      	b.n	801bc92 <__ieee754_atan2+0x42>
 801bda2:	bf00      	nop
 801bda4:	f3af 8000 	nop.w
 801bda8:	33145c07 	.word	0x33145c07
 801bdac:	3ca1a626 	.word	0x3ca1a626
 801bdb0:	54442d18 	.word	0x54442d18
 801bdb4:	400921fb 	.word	0x400921fb
 801bdb8:	54442d18 	.word	0x54442d18
 801bdbc:	3ff921fb 	.word	0x3ff921fb
 801bdc0:	54442d18 	.word	0x54442d18
 801bdc4:	3fe921fb 	.word	0x3fe921fb
 801bdc8:	08020ed8 	.word	0x08020ed8
 801bdcc:	08020ef0 	.word	0x08020ef0
 801bdd0:	54442d18 	.word	0x54442d18
 801bdd4:	c00921fb 	.word	0xc00921fb
 801bdd8:	54442d18 	.word	0x54442d18
 801bddc:	bff921fb 	.word	0xbff921fb
 801bde0:	7ff00000 	.word	0x7ff00000

0801bde4 <__ieee754_sqrt>:
 801bde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bde8:	ec55 4b10 	vmov	r4, r5, d0
 801bdec:	4e56      	ldr	r6, [pc, #344]	; (801bf48 <__ieee754_sqrt+0x164>)
 801bdee:	43ae      	bics	r6, r5
 801bdf0:	ee10 0a10 	vmov	r0, s0
 801bdf4:	ee10 3a10 	vmov	r3, s0
 801bdf8:	4629      	mov	r1, r5
 801bdfa:	462a      	mov	r2, r5
 801bdfc:	d110      	bne.n	801be20 <__ieee754_sqrt+0x3c>
 801bdfe:	ee10 2a10 	vmov	r2, s0
 801be02:	462b      	mov	r3, r5
 801be04:	f7e4 fbf8 	bl	80005f8 <__aeabi_dmul>
 801be08:	4602      	mov	r2, r0
 801be0a:	460b      	mov	r3, r1
 801be0c:	4620      	mov	r0, r4
 801be0e:	4629      	mov	r1, r5
 801be10:	f7e4 fa3c 	bl	800028c <__adddf3>
 801be14:	4604      	mov	r4, r0
 801be16:	460d      	mov	r5, r1
 801be18:	ec45 4b10 	vmov	d0, r4, r5
 801be1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be20:	2d00      	cmp	r5, #0
 801be22:	dc10      	bgt.n	801be46 <__ieee754_sqrt+0x62>
 801be24:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801be28:	4330      	orrs	r0, r6
 801be2a:	d0f5      	beq.n	801be18 <__ieee754_sqrt+0x34>
 801be2c:	b15d      	cbz	r5, 801be46 <__ieee754_sqrt+0x62>
 801be2e:	ee10 2a10 	vmov	r2, s0
 801be32:	462b      	mov	r3, r5
 801be34:	ee10 0a10 	vmov	r0, s0
 801be38:	f7e4 fa26 	bl	8000288 <__aeabi_dsub>
 801be3c:	4602      	mov	r2, r0
 801be3e:	460b      	mov	r3, r1
 801be40:	f7e4 fd04 	bl	800084c <__aeabi_ddiv>
 801be44:	e7e6      	b.n	801be14 <__ieee754_sqrt+0x30>
 801be46:	1509      	asrs	r1, r1, #20
 801be48:	d076      	beq.n	801bf38 <__ieee754_sqrt+0x154>
 801be4a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801be4e:	07ce      	lsls	r6, r1, #31
 801be50:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801be54:	bf5e      	ittt	pl
 801be56:	0fda      	lsrpl	r2, r3, #31
 801be58:	005b      	lslpl	r3, r3, #1
 801be5a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801be5e:	0fda      	lsrs	r2, r3, #31
 801be60:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801be64:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801be68:	2000      	movs	r0, #0
 801be6a:	106d      	asrs	r5, r5, #1
 801be6c:	005b      	lsls	r3, r3, #1
 801be6e:	f04f 0e16 	mov.w	lr, #22
 801be72:	4684      	mov	ip, r0
 801be74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801be78:	eb0c 0401 	add.w	r4, ip, r1
 801be7c:	4294      	cmp	r4, r2
 801be7e:	bfde      	ittt	le
 801be80:	1b12      	suble	r2, r2, r4
 801be82:	eb04 0c01 	addle.w	ip, r4, r1
 801be86:	1840      	addle	r0, r0, r1
 801be88:	0052      	lsls	r2, r2, #1
 801be8a:	f1be 0e01 	subs.w	lr, lr, #1
 801be8e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801be92:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801be96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801be9a:	d1ed      	bne.n	801be78 <__ieee754_sqrt+0x94>
 801be9c:	4671      	mov	r1, lr
 801be9e:	2720      	movs	r7, #32
 801bea0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801bea4:	4562      	cmp	r2, ip
 801bea6:	eb04 060e 	add.w	r6, r4, lr
 801beaa:	dc02      	bgt.n	801beb2 <__ieee754_sqrt+0xce>
 801beac:	d113      	bne.n	801bed6 <__ieee754_sqrt+0xf2>
 801beae:	429e      	cmp	r6, r3
 801beb0:	d811      	bhi.n	801bed6 <__ieee754_sqrt+0xf2>
 801beb2:	2e00      	cmp	r6, #0
 801beb4:	eb06 0e04 	add.w	lr, r6, r4
 801beb8:	da43      	bge.n	801bf42 <__ieee754_sqrt+0x15e>
 801beba:	f1be 0f00 	cmp.w	lr, #0
 801bebe:	db40      	blt.n	801bf42 <__ieee754_sqrt+0x15e>
 801bec0:	f10c 0801 	add.w	r8, ip, #1
 801bec4:	eba2 020c 	sub.w	r2, r2, ip
 801bec8:	429e      	cmp	r6, r3
 801beca:	bf88      	it	hi
 801becc:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801bed0:	1b9b      	subs	r3, r3, r6
 801bed2:	4421      	add	r1, r4
 801bed4:	46c4      	mov	ip, r8
 801bed6:	0052      	lsls	r2, r2, #1
 801bed8:	3f01      	subs	r7, #1
 801beda:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801bede:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801bee2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801bee6:	d1dd      	bne.n	801bea4 <__ieee754_sqrt+0xc0>
 801bee8:	4313      	orrs	r3, r2
 801beea:	d006      	beq.n	801befa <__ieee754_sqrt+0x116>
 801beec:	1c4c      	adds	r4, r1, #1
 801beee:	bf13      	iteet	ne
 801bef0:	3101      	addne	r1, #1
 801bef2:	3001      	addeq	r0, #1
 801bef4:	4639      	moveq	r1, r7
 801bef6:	f021 0101 	bicne.w	r1, r1, #1
 801befa:	1043      	asrs	r3, r0, #1
 801befc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801bf00:	0849      	lsrs	r1, r1, #1
 801bf02:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801bf06:	07c2      	lsls	r2, r0, #31
 801bf08:	bf48      	it	mi
 801bf0a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801bf0e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801bf12:	460c      	mov	r4, r1
 801bf14:	463d      	mov	r5, r7
 801bf16:	e77f      	b.n	801be18 <__ieee754_sqrt+0x34>
 801bf18:	0ada      	lsrs	r2, r3, #11
 801bf1a:	3815      	subs	r0, #21
 801bf1c:	055b      	lsls	r3, r3, #21
 801bf1e:	2a00      	cmp	r2, #0
 801bf20:	d0fa      	beq.n	801bf18 <__ieee754_sqrt+0x134>
 801bf22:	02d7      	lsls	r7, r2, #11
 801bf24:	d50a      	bpl.n	801bf3c <__ieee754_sqrt+0x158>
 801bf26:	f1c1 0420 	rsb	r4, r1, #32
 801bf2a:	fa23 f404 	lsr.w	r4, r3, r4
 801bf2e:	1e4d      	subs	r5, r1, #1
 801bf30:	408b      	lsls	r3, r1
 801bf32:	4322      	orrs	r2, r4
 801bf34:	1b41      	subs	r1, r0, r5
 801bf36:	e788      	b.n	801be4a <__ieee754_sqrt+0x66>
 801bf38:	4608      	mov	r0, r1
 801bf3a:	e7f0      	b.n	801bf1e <__ieee754_sqrt+0x13a>
 801bf3c:	0052      	lsls	r2, r2, #1
 801bf3e:	3101      	adds	r1, #1
 801bf40:	e7ef      	b.n	801bf22 <__ieee754_sqrt+0x13e>
 801bf42:	46e0      	mov	r8, ip
 801bf44:	e7be      	b.n	801bec4 <__ieee754_sqrt+0xe0>
 801bf46:	bf00      	nop
 801bf48:	7ff00000 	.word	0x7ff00000

0801bf4c <_init>:
 801bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf4e:	bf00      	nop
 801bf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf52:	bc08      	pop	{r3}
 801bf54:	469e      	mov	lr, r3
 801bf56:	4770      	bx	lr

0801bf58 <_fini>:
 801bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf5a:	bf00      	nop
 801bf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bf5e:	bc08      	pop	{r3}
 801bf60:	469e      	mov	lr, r3
 801bf62:	4770      	bx	lr
